
AMT212E-V_Micro-ROS_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000154d0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000af8  080156b0  080156b0  000166b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080161a8  080161a8  00018084  2**0
                  CONTENTS
  4 .ARM          00000008  080161a8  080161a8  000171a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080161b0  080161b0  00018084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080161b0  080161b0  000171b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080161b4  080161b4  000171b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  080161b8  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000acac  20000088  0801623c  00018088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000ad34  0801623c  00018d34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00018084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024b74  00000000  00000000  000180b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005002  00000000  00000000  0003cc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b78  00000000  00000000  00041c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000151a  00000000  00000000  000437a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008b24  00000000  00000000  00044cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002299b  00000000  00000000  0004d7e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112659  00000000  00000000  00070181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001827da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007eb4  00000000  00000000  00182850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009d  00000000  00000000  0018a704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000088 	.word	0x20000088
 80001fc:	00000000 	.word	0x00000000
 8000200:	08015698 	.word	0x08015698

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000008c 	.word	0x2000008c
 800021c:	08015698 	.word	0x08015698

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800030e:	f000 b9b5 	b.w	800067c <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000684:	4a04      	ldr	r2, [pc, #16]	@ (8000698 <MX_FREERTOS_Init+0x18>)
 8000686:	2100      	movs	r1, #0
 8000688:	4804      	ldr	r0, [pc, #16]	@ (800069c <MX_FREERTOS_Init+0x1c>)
 800068a:	f006 fb87 	bl	8006d9c <osThreadNew>
 800068e:	4603      	mov	r3, r0
 8000690:	4a03      	ldr	r2, [pc, #12]	@ (80006a0 <MX_FREERTOS_Init+0x20>)
 8000692:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	08015730 	.word	0x08015730
 800069c:	080006a5 	.word	0x080006a5
 80006a0:	200000ac 	.word	0x200000ac

080006a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006a4:	b5b0      	push	{r4, r5, r7, lr}
 80006a6:	b0ea      	sub	sp, #424	@ 0x1a8
 80006a8:	af02      	add	r7, sp, #8
 80006aa:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
  /* USER CODE BEGIN StartDefaultTask */
	// micro-ROS configuration

	rmw_uros_set_custom_transport(
 80006ae:	4b4b      	ldr	r3, [pc, #300]	@ (80007dc <StartDefaultTask+0x138>)
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	4b4b      	ldr	r3, [pc, #300]	@ (80007e0 <StartDefaultTask+0x13c>)
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	4b4b      	ldr	r3, [pc, #300]	@ (80007e4 <StartDefaultTask+0x140>)
 80006b8:	4a4b      	ldr	r2, [pc, #300]	@ (80007e8 <StartDefaultTask+0x144>)
 80006ba:	494c      	ldr	r1, [pc, #304]	@ (80007ec <StartDefaultTask+0x148>)
 80006bc:	2001      	movs	r0, #1
 80006be:	f00a f947 	bl	800a950 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80006c2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80006c6:	4618      	mov	r0, r3
 80006c8:	f00a f862 	bl	800a790 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 80006cc:	4b48      	ldr	r3, [pc, #288]	@ (80007f0 <StartDefaultTask+0x14c>)
 80006ce:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
	freeRTOS_allocator.deallocate = microros_deallocate;
 80006d2:	4b48      	ldr	r3, [pc, #288]	@ (80007f4 <StartDefaultTask+0x150>)
 80006d4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
	freeRTOS_allocator.reallocate = microros_reallocate;
 80006d8:	4b47      	ldr	r3, [pc, #284]	@ (80007f8 <StartDefaultTask+0x154>)
 80006da:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80006de:	4b47      	ldr	r3, [pc, #284]	@ (80007fc <StartDefaultTask+0x158>)
 80006e0:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80006e4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80006e8:	4618      	mov	r0, r3
 80006ea:	f00a f85f 	bl	800a7ac <rcutils_set_default_allocator>
 80006ee:	4603      	mov	r3, r0
 80006f0:	f083 0301 	eor.w	r3, r3, #1
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d003      	beq.n	8000702 <StartDefaultTask+0x5e>
	  printf("Error on default allocators (line %d)\n", __LINE__);
 80006fa:	21a6      	movs	r1, #166	@ 0xa6
 80006fc:	4840      	ldr	r0, [pc, #256]	@ (8000800 <StartDefaultTask+0x15c>)
 80006fe:	f013 ff17 	bl	8014530 <iprintf>
	rclc_support_t support;
	rclc_executor_t executor;
	rcl_allocator_t allocator;
	rcl_init_options_t init_options;

	const unsigned int timer_period = RCL_MS_TO_NS(10);
 8000702:	4b40      	ldr	r3, [pc, #256]	@ (8000804 <StartDefaultTask+0x160>)
 8000704:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
	const int timeout_ms = 1000;
 8000708:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800070c:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
	int executor_num = 1;
 8000710:	2301      	movs	r3, #1
 8000712:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
//	  ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu);
//
//	const rosidl_service_type_support_t * imu_calib_type_support =
//	  ROSIDL_GET_SRV_TYPE_SUPPORT(imu_interfaces, srv, ImuCalibration);

	allocator = rcl_get_default_allocator();
 8000716:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800071a:	4618      	mov	r0, r3
 800071c:	f00a f864 	bl	800a7e8 <rcutils_get_default_allocator>
 8000720:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000724:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000728:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 800072c:	461d      	mov	r5, r3
 800072e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000732:	682b      	ldr	r3, [r5, #0]
 8000734:	6023      	str	r3, [r4, #0]

	executor = rclc_executor_get_zero_initialized_executor();
 8000736:	463b      	mov	r3, r7
 8000738:	4618      	mov	r0, r3
 800073a:	f009 fd0b 	bl	800a154 <rclc_executor_get_zero_initialized_executor>
 800073e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000742:	f5a3 72d0 	sub.w	r2, r3, #416	@ 0x1a0
 8000746:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800074a:	4611      	mov	r1, r2
 800074c:	2288      	movs	r2, #136	@ 0x88
 800074e:	4618      	mov	r0, r3
 8000750:	f014 f8cd 	bl	80148ee <memcpy>

	init_options = rcl_get_zero_initialized_init_options();
 8000754:	f009 f8b0 	bl	80098b8 <rcl_get_zero_initialized_init_options>
 8000758:	4603      	mov	r3, r0
 800075a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

	RCSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 800075e:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 8000762:	466a      	mov	r2, sp
 8000764:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8000768:	e893 0003 	ldmia.w	r3, {r0, r1}
 800076c:	e882 0003 	stmia.w	r2, {r0, r1}
 8000770:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000774:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000776:	4620      	mov	r0, r4
 8000778:	f009 f8a0 	bl	80098bc <rcl_init_options_init>
	RCSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 198));
 800077c:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8000780:	21c6      	movs	r1, #198	@ 0xc6
 8000782:	4618      	mov	r0, r3
 8000784:	f009 f996 	bl	8009ab4 <rcl_init_options_set_domain_id>

	//create support init_options
	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8000788:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 800078c:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8000790:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	4613      	mov	r3, r2
 8000798:	2200      	movs	r2, #0
 800079a:	2100      	movs	r1, #0
 800079c:	f009 ff80 	bl	800a6a0 <rclc_support_init_with_options>

	//create timer
//	rclc_timer_init_default(&amt_timer, &support, timer_period, timer_callback);

	// create node
	rclc_node_init_default(&node, "G474RE_MPU6050_node", "", &support);
 80007a0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80007a4:	4a18      	ldr	r2, [pc, #96]	@ (8000808 <StartDefaultTask+0x164>)
 80007a6:	4919      	ldr	r1, [pc, #100]	@ (800080c <StartDefaultTask+0x168>)
 80007a8:	4819      	ldr	r0, [pc, #100]	@ (8000810 <StartDefaultTask+0x16c>)
 80007aa:	f009 ffad 	bl	800a708 <rclc_node_init_default>

	//create service client


	//create executor
	rclc_executor_init(&executor, &support.context, executor_num, &allocator);
 80007ae:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80007b2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80007b6:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 80007ba:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 80007be:	f009 fcd3 	bl	800a168 <rclc_executor_init>

//	rclc_executor_add_timer(&executor, &amt_timer);

	rclc_executor_spin(&executor);
 80007c2:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f009 ff2a 	bl	800a620 <rclc_executor_spin>

	rmw_uros_sync_session(timeout_ms);
 80007cc:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 80007d0:	f00a fd64 	bl	800b29c <rmw_uros_sync_session>

	for(;;)
	{
		osDelay(10);
 80007d4:	200a      	movs	r0, #10
 80007d6:	f006 fb73 	bl	8006ec0 <osDelay>
 80007da:	e7fb      	b.n	80007d4 <StartDefaultTask+0x130>
 80007dc:	08000de9 	.word	0x08000de9
 80007e0:	08000d85 	.word	0x08000d85
 80007e4:	08000d65 	.word	0x08000d65
 80007e8:	08000d39 	.word	0x08000d39
 80007ec:	2000455c 	.word	0x2000455c
 80007f0:	080010a9 	.word	0x080010a9
 80007f4:	080010ed 	.word	0x080010ed
 80007f8:	08001125 	.word	0x08001125
 80007fc:	08001191 	.word	0x08001191
 8000800:	080156bc 	.word	0x080156bc
 8000804:	00989680 	.word	0x00989680
 8000808:	080156e4 	.word	0x080156e4
 800080c:	080156e8 	.word	0x080156e8
 8000810:	200000a4 	.word	0x200000a4

08000814 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	@ 0x28
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000820:	f007 fbb0 	bl	8007f84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000824:	4b5a      	ldr	r3, [pc, #360]	@ (8000990 <pvPortMallocMicroROS+0x17c>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d101      	bne.n	8000830 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 800082c:	f000 f986 	bl	8000b3c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000830:	4b58      	ldr	r3, [pc, #352]	@ (8000994 <pvPortMallocMicroROS+0x180>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4013      	ands	r3, r2
 8000838:	2b00      	cmp	r3, #0
 800083a:	f040 8090 	bne.w	800095e <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d01e      	beq.n	8000882 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000844:	2208      	movs	r2, #8
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4413      	add	r3, r2
 800084a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	2b00      	cmp	r3, #0
 8000854:	d015      	beq.n	8000882 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f023 0307 	bic.w	r3, r3, #7
 800085c:	3308      	adds	r3, #8
 800085e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	2b00      	cmp	r3, #0
 8000868:	d00b      	beq.n	8000882 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800086a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800086e:	f383 8811 	msr	BASEPRI, r3
 8000872:	f3bf 8f6f 	isb	sy
 8000876:	f3bf 8f4f 	dsb	sy
 800087a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800087c:	bf00      	nop
 800087e:	bf00      	nop
 8000880:	e7fd      	b.n	800087e <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d06a      	beq.n	800095e <pvPortMallocMicroROS+0x14a>
 8000888:	4b43      	ldr	r3, [pc, #268]	@ (8000998 <pvPortMallocMicroROS+0x184>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	429a      	cmp	r2, r3
 8000890:	d865      	bhi.n	800095e <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000892:	4b42      	ldr	r3, [pc, #264]	@ (800099c <pvPortMallocMicroROS+0x188>)
 8000894:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000896:	4b41      	ldr	r3, [pc, #260]	@ (800099c <pvPortMallocMicroROS+0x188>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800089c:	e004      	b.n	80008a8 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 800089e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008a0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80008a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80008a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d903      	bls.n	80008ba <pvPortMallocMicroROS+0xa6>
 80008b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1f1      	bne.n	800089e <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80008ba:	4b35      	ldr	r3, [pc, #212]	@ (8000990 <pvPortMallocMicroROS+0x17c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d04c      	beq.n	800095e <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80008c4:	6a3b      	ldr	r3, [r7, #32]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2208      	movs	r2, #8
 80008ca:	4413      	add	r3, r2
 80008cc:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80008ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	6a3b      	ldr	r3, [r7, #32]
 80008d4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80008d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008d8:	685a      	ldr	r2, [r3, #4]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	1ad2      	subs	r2, r2, r3
 80008de:	2308      	movs	r3, #8
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d920      	bls.n	8000928 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80008e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4413      	add	r3, r2
 80008ec:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80008ee:	69bb      	ldr	r3, [r7, #24]
 80008f0:	f003 0307 	and.w	r3, r3, #7
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d00b      	beq.n	8000910 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80008f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008fc:	f383 8811 	msr	BASEPRI, r3
 8000900:	f3bf 8f6f 	isb	sy
 8000904:	f3bf 8f4f 	dsb	sy
 8000908:	613b      	str	r3, [r7, #16]
}
 800090a:	bf00      	nop
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000912:	685a      	ldr	r2, [r3, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	1ad2      	subs	r2, r2, r3
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800091c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000922:	69b8      	ldr	r0, [r7, #24]
 8000924:	f000 f96c 	bl	8000c00 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000928:	4b1b      	ldr	r3, [pc, #108]	@ (8000998 <pvPortMallocMicroROS+0x184>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	4a19      	ldr	r2, [pc, #100]	@ (8000998 <pvPortMallocMicroROS+0x184>)
 8000934:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000936:	4b18      	ldr	r3, [pc, #96]	@ (8000998 <pvPortMallocMicroROS+0x184>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	4b19      	ldr	r3, [pc, #100]	@ (80009a0 <pvPortMallocMicroROS+0x18c>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	429a      	cmp	r2, r3
 8000940:	d203      	bcs.n	800094a <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000942:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <pvPortMallocMicroROS+0x184>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a16      	ldr	r2, [pc, #88]	@ (80009a0 <pvPortMallocMicroROS+0x18c>)
 8000948:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800094a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800094c:	685a      	ldr	r2, [r3, #4]
 800094e:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <pvPortMallocMicroROS+0x180>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	431a      	orrs	r2, r3
 8000954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000956:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800095e:	f007 fb1f 	bl	8007fa0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	f003 0307 	and.w	r3, r3, #7
 8000968:	2b00      	cmp	r3, #0
 800096a:	d00b      	beq.n	8000984 <pvPortMallocMicroROS+0x170>
	__asm volatile
 800096c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000970:	f383 8811 	msr	BASEPRI, r3
 8000974:	f3bf 8f6f 	isb	sy
 8000978:	f3bf 8f4f 	dsb	sy
 800097c:	60fb      	str	r3, [r7, #12]
}
 800097e:	bf00      	nop
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000984:	69fb      	ldr	r3, [r7, #28]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3728      	adds	r7, #40	@ 0x28
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20003c40 	.word	0x20003c40
 8000994:	20003c4c 	.word	0x20003c4c
 8000998:	20003c44 	.word	0x20003c44
 800099c:	20003c38 	.word	0x20003c38
 80009a0:	20003c48 	.word	0x20003c48

080009a4 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d04a      	beq.n	8000a4c <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80009b6:	2308      	movs	r3, #8
 80009b8:	425b      	negs	r3, r3
 80009ba:	697a      	ldr	r2, [r7, #20]
 80009bc:	4413      	add	r3, r2
 80009be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	685a      	ldr	r2, [r3, #4]
 80009c8:	4b22      	ldr	r3, [pc, #136]	@ (8000a54 <vPortFreeMicroROS+0xb0>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4013      	ands	r3, r2
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d10b      	bne.n	80009ea <vPortFreeMicroROS+0x46>
	__asm volatile
 80009d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80009d6:	f383 8811 	msr	BASEPRI, r3
 80009da:	f3bf 8f6f 	isb	sy
 80009de:	f3bf 8f4f 	dsb	sy
 80009e2:	60fb      	str	r3, [r7, #12]
}
 80009e4:	bf00      	nop
 80009e6:	bf00      	nop
 80009e8:	e7fd      	b.n	80009e6 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d00b      	beq.n	8000a0a <vPortFreeMicroROS+0x66>
	__asm volatile
 80009f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80009f6:	f383 8811 	msr	BASEPRI, r3
 80009fa:	f3bf 8f6f 	isb	sy
 80009fe:	f3bf 8f4f 	dsb	sy
 8000a02:	60bb      	str	r3, [r7, #8]
}
 8000a04:	bf00      	nop
 8000a06:	bf00      	nop
 8000a08:	e7fd      	b.n	8000a06 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	685a      	ldr	r2, [r3, #4]
 8000a0e:	4b11      	ldr	r3, [pc, #68]	@ (8000a54 <vPortFreeMicroROS+0xb0>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4013      	ands	r3, r2
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d019      	beq.n	8000a4c <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d115      	bne.n	8000a4c <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	685a      	ldr	r2, [r3, #4]
 8000a24:	4b0b      	ldr	r3, [pc, #44]	@ (8000a54 <vPortFreeMicroROS+0xb0>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	401a      	ands	r2, r3
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000a30:	f007 faa8 	bl	8007f84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	685a      	ldr	r2, [r3, #4]
 8000a38:	4b07      	ldr	r3, [pc, #28]	@ (8000a58 <vPortFreeMicroROS+0xb4>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	4a06      	ldr	r2, [pc, #24]	@ (8000a58 <vPortFreeMicroROS+0xb4>)
 8000a40:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000a42:	6938      	ldr	r0, [r7, #16]
 8000a44:	f000 f8dc 	bl	8000c00 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000a48:	f007 faaa 	bl	8007fa0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000a4c:	bf00      	nop
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20003c4c 	.word	0x20003c4c
 8000a58:	20003c44 	.word	0x20003c44

08000a5c <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b087      	sub	sp, #28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000a68:	2308      	movs	r3, #8
 8000a6a:	425b      	negs	r3, r3
 8000a6c:	697a      	ldr	r2, [r7, #20]
 8000a6e:	4413      	add	r3, r2
 8000a70:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	685a      	ldr	r2, [r3, #4]
 8000a7a:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <getBlockSize+0x38>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	4013      	ands	r3, r2
 8000a82:	60fb      	str	r3, [r7, #12]

	return count;
 8000a84:	68fb      	ldr	r3, [r7, #12]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	371c      	adds	r7, #28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	20003c4c 	.word	0x20003c4c

08000a98 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000aa2:	f007 fa6f 	bl	8007f84 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000aa6:	6838      	ldr	r0, [r7, #0]
 8000aa8:	f7ff feb4 	bl	8000814 <pvPortMallocMicroROS>
 8000aac:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d017      	beq.n	8000ae4 <pvPortReallocMicroROS+0x4c>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d014      	beq.n	8000ae4 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff ffce 	bl	8000a5c <getBlockSize>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2208      	movs	r2, #8
 8000ac4:	1a9b      	subs	r3, r3, r2
 8000ac6:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d201      	bcs.n	8000ad4 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000ad4:	68fa      	ldr	r2, [r7, #12]
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	68b8      	ldr	r0, [r7, #8]
 8000ada:	f013 ff08 	bl	80148ee <memcpy>

		vPortFreeMicroROS(pv);
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff ff60 	bl	80009a4 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000ae4:	f007 fa5c 	bl	8007fa0 <xTaskResumeAll>

	return newmem;
 8000ae8:	68bb      	ldr	r3, [r7, #8]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b086      	sub	sp, #24
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
 8000afa:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000afc:	f007 fa42 	bl	8007f84 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	fb02 f303 	mul.w	r3, r2, r3
 8000b08:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000b0a:	6978      	ldr	r0, [r7, #20]
 8000b0c:	f7ff fe82 	bl	8000814 <pvPortMallocMicroROS>
 8000b10:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000b16:	e004      	b.n	8000b22 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	1c5a      	adds	r2, r3, #1
 8000b1c:	613a      	str	r2, [r7, #16]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	1e5a      	subs	r2, r3, #1
 8000b26:	617a      	str	r2, [r7, #20]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d1f5      	bne.n	8000b18 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000b2c:	f007 fa38 	bl	8007fa0 <xTaskResumeAll>
  	return mem;
 8000b30:	68fb      	ldr	r3, [r7, #12]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000b42:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000b46:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000b48:	4b27      	ldr	r3, [pc, #156]	@ (8000be8 <prvHeapInit+0xac>)
 8000b4a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d00c      	beq.n	8000b70 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	3307      	adds	r3, #7
 8000b5a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f023 0307 	bic.w	r3, r3, #7
 8000b62:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000b64:	68ba      	ldr	r2, [r7, #8]
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	4a1f      	ldr	r2, [pc, #124]	@ (8000be8 <prvHeapInit+0xac>)
 8000b6c:	4413      	add	r3, r2
 8000b6e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000b74:	4a1d      	ldr	r2, [pc, #116]	@ (8000bec <prvHeapInit+0xb0>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bec <prvHeapInit+0xb0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	4413      	add	r3, r2
 8000b86:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000b88:	2208      	movs	r2, #8
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	1a9b      	subs	r3, r3, r2
 8000b8e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	f023 0307 	bic.w	r3, r3, #7
 8000b96:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4a15      	ldr	r2, [pc, #84]	@ (8000bf0 <prvHeapInit+0xb4>)
 8000b9c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000b9e:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <prvHeapInit+0xb4>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000ba6:	4b12      	ldr	r3, [pc, #72]	@ (8000bf0 <prvHeapInit+0xb4>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	68fa      	ldr	r2, [r7, #12]
 8000bb6:	1ad2      	subs	r2, r2, r3
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <prvHeapInit+0xb4>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf4 <prvHeapInit+0xb8>)
 8000bca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	4a09      	ldr	r2, [pc, #36]	@ (8000bf8 <prvHeapInit+0xbc>)
 8000bd2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000bd4:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <prvHeapInit+0xc0>)
 8000bd6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000bda:	601a      	str	r2, [r3, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	20003038 	.word	0x20003038
 8000bec:	20003c38 	.word	0x20003c38
 8000bf0:	20003c40 	.word	0x20003c40
 8000bf4:	20003c48 	.word	0x20003c48
 8000bf8:	20003c44 	.word	0x20003c44
 8000bfc:	20003c4c 	.word	0x20003c4c

08000c00 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000c08:	4b28      	ldr	r3, [pc, #160]	@ (8000cac <prvInsertBlockIntoFreeList+0xac>)
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	e002      	b.n	8000c14 <prvInsertBlockIntoFreeList+0x14>
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d8f7      	bhi.n	8000c0e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	4413      	add	r3, r2
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d108      	bne.n	8000c42 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	685a      	ldr	r2, [r3, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	441a      	add	r2, r3
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	441a      	add	r2, r3
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d118      	bne.n	8000c88 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	4b15      	ldr	r3, [pc, #84]	@ (8000cb0 <prvInsertBlockIntoFreeList+0xb0>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d00d      	beq.n	8000c7e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	685a      	ldr	r2, [r3, #4]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	441a      	add	r2, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	e008      	b.n	8000c90 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <prvInsertBlockIntoFreeList+0xb0>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	e003      	b.n	8000c90 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000c90:	68fa      	ldr	r2, [r7, #12]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d002      	beq.n	8000c9e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000c9e:	bf00      	nop
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20003c38 	.word	0x20003c38
 8000cb0:	20003c40 	.word	0x20003c40

08000cb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000cba:	4b1e      	ldr	r3, [pc, #120]	@ (8000d34 <MX_DMA_Init+0x80>)
 8000cbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cbe:	4a1d      	ldr	r2, [pc, #116]	@ (8000d34 <MX_DMA_Init+0x80>)
 8000cc0:	f043 0304 	orr.w	r3, r3, #4
 8000cc4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d34 <MX_DMA_Init+0x80>)
 8000cc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cca:	f003 0304 	and.w	r3, r3, #4
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cd2:	4b18      	ldr	r3, [pc, #96]	@ (8000d34 <MX_DMA_Init+0x80>)
 8000cd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cd6:	4a17      	ldr	r2, [pc, #92]	@ (8000d34 <MX_DMA_Init+0x80>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000cde:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <MX_DMA_Init+0x80>)
 8000ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2105      	movs	r1, #5
 8000cee:	200b      	movs	r0, #11
 8000cf0:	f001 f988 	bl	8002004 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cf4:	200b      	movs	r0, #11
 8000cf6:	f001 f99f 	bl	8002038 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2105      	movs	r1, #5
 8000cfe:	200c      	movs	r0, #12
 8000d00:	f001 f980 	bl	8002004 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000d04:	200c      	movs	r0, #12
 8000d06:	f001 f997 	bl	8002038 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2105      	movs	r1, #5
 8000d0e:	200d      	movs	r0, #13
 8000d10:	f001 f978 	bl	8002004 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000d14:	200d      	movs	r0, #13
 8000d16:	f001 f98f 	bl	8002038 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2105      	movs	r1, #5
 8000d1e:	200e      	movs	r0, #14
 8000d20:	f001 f970 	bl	8002004 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000d24:	200e      	movs	r0, #14
 8000d26:	f001 f987 	bl	8002038 <HAL_NVIC_EnableIRQ>

}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40021000 	.word	0x40021000

08000d38 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000d46:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000d48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d4c:	4904      	ldr	r1, [pc, #16]	@ (8000d60 <cubemx_transport_open+0x28>)
 8000d4e:	68f8      	ldr	r0, [r7, #12]
 8000d50:	f004 fa1a 	bl	8005188 <HAL_UART_Receive_DMA>
    return true;
 8000d54:	2301      	movs	r3, #1
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20003c50 	.word	0x20003c50

08000d64 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000d72:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000d74:	68f8      	ldr	r0, [r7, #12]
 8000d76:	f004 fa53 	bl	8005220 <HAL_UART_DMAStop>
    return true;
 8000d7a:	2301      	movs	r3, #1
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
 8000d90:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000d98:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000da0:	2b20      	cmp	r3, #32
 8000da2:	d11b      	bne.n	8000ddc <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	461a      	mov	r2, r3
 8000daa:	68b9      	ldr	r1, [r7, #8]
 8000dac:	6978      	ldr	r0, [r7, #20]
 8000dae:	f004 f96b 	bl	8005088 <HAL_UART_Transmit_DMA>
 8000db2:	4603      	mov	r3, r0
 8000db4:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000db6:	e002      	b.n	8000dbe <cubemx_transport_write+0x3a>
            osDelay(1);
 8000db8:	2001      	movs	r0, #1
 8000dba:	f006 f881 	bl	8006ec0 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000dbe:	7cfb      	ldrb	r3, [r7, #19]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d104      	bne.n	8000dce <cubemx_transport_write+0x4a>
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dca:	2b20      	cmp	r3, #32
 8000dcc:	d1f4      	bne.n	8000db8 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8000dce:	7cfb      	ldrb	r3, [r7, #19]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d101      	bne.n	8000dd8 <cubemx_transport_write+0x54>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	e002      	b.n	8000dde <cubemx_transport_write+0x5a>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	e000      	b.n	8000dde <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8000ddc:	2300      	movs	r3, #0
    }
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
 8000df4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000dfc:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e02:	b672      	cpsid	i
}
 8000e04:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000e14:	4a1b      	ldr	r2, [pc, #108]	@ (8000e84 <cubemx_transport_read+0x9c>)
 8000e16:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000e18:	b662      	cpsie	i
}
 8000e1a:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000e22:	2001      	movs	r0, #1
 8000e24:	f006 f84c 	bl	8006ec0 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000e28:	4b17      	ldr	r3, [pc, #92]	@ (8000e88 <cubemx_transport_read+0xa0>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b15      	ldr	r3, [pc, #84]	@ (8000e84 <cubemx_transport_read+0x9c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d103      	bne.n	8000e3c <cubemx_transport_read+0x54>
 8000e34:	69fa      	ldr	r2, [r7, #28]
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	dbe2      	blt.n	8000e02 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000e40:	e011      	b.n	8000e66 <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 8000e42:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <cubemx_transport_read+0xa0>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	68b9      	ldr	r1, [r7, #8]
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	440b      	add	r3, r1
 8000e4c:	490f      	ldr	r1, [pc, #60]	@ (8000e8c <cubemx_transport_read+0xa4>)
 8000e4e:	5c8a      	ldrb	r2, [r1, r2]
 8000e50:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000e52:	4b0d      	ldr	r3, [pc, #52]	@ (8000e88 <cubemx_transport_read+0xa0>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	3301      	adds	r3, #1
 8000e58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e88 <cubemx_transport_read+0xa0>)
 8000e5e:	6013      	str	r3, [r2, #0]
        wrote++;
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	3301      	adds	r3, #1
 8000e64:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000e66:	4b08      	ldr	r3, [pc, #32]	@ (8000e88 <cubemx_transport_read+0xa0>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <cubemx_transport_read+0x9c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d003      	beq.n	8000e7a <cubemx_transport_read+0x92>
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d3e3      	bcc.n	8000e42 <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8000e7a:	69bb      	ldr	r3, [r7, #24]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3720      	adds	r7, #32
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20004454 	.word	0x20004454
 8000e88:	20004450 	.word	0x20004450
 8000e8c:	20003c50 	.word	0x20003c50

08000e90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	@ 0x28
 8000e94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e96:	f107 0314 	add.w	r3, r7, #20
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
 8000ea4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea6:	4b2f      	ldr	r3, [pc, #188]	@ (8000f64 <MX_GPIO_Init+0xd4>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eaa:	4a2e      	ldr	r2, [pc, #184]	@ (8000f64 <MX_GPIO_Init+0xd4>)
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb2:	4b2c      	ldr	r3, [pc, #176]	@ (8000f64 <MX_GPIO_Init+0xd4>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb6:	f003 0304 	and.w	r3, r3, #4
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ebe:	4b29      	ldr	r3, [pc, #164]	@ (8000f64 <MX_GPIO_Init+0xd4>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec2:	4a28      	ldr	r2, [pc, #160]	@ (8000f64 <MX_GPIO_Init+0xd4>)
 8000ec4:	f043 0320 	orr.w	r3, r3, #32
 8000ec8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eca:	4b26      	ldr	r3, [pc, #152]	@ (8000f64 <MX_GPIO_Init+0xd4>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ece:	f003 0320 	and.w	r3, r3, #32
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	4b23      	ldr	r3, [pc, #140]	@ (8000f64 <MX_GPIO_Init+0xd4>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eda:	4a22      	ldr	r2, [pc, #136]	@ (8000f64 <MX_GPIO_Init+0xd4>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ee2:	4b20      	ldr	r3, [pc, #128]	@ (8000f64 <MX_GPIO_Init+0xd4>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eee:	4b1d      	ldr	r3, [pc, #116]	@ (8000f64 <MX_GPIO_Init+0xd4>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef2:	4a1c      	ldr	r2, [pc, #112]	@ (8000f64 <MX_GPIO_Init+0xd4>)
 8000ef4:	f043 0302 	orr.w	r3, r3, #2
 8000ef8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000efa:	4b1a      	ldr	r3, [pc, #104]	@ (8000f64 <MX_GPIO_Init+0xd4>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2120      	movs	r1, #32
 8000f0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f0e:	f001 fd61 	bl	80029d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f18:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	480f      	ldr	r0, [pc, #60]	@ (8000f68 <MX_GPIO_Init+0xd8>)
 8000f2a:	f001 fbd1 	bl	80026d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f2e:	2320      	movs	r3, #32
 8000f30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f32:	2301      	movs	r3, #1
 8000f34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f48:	f001 fbc2 	bl	80026d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2105      	movs	r1, #5
 8000f50:	2028      	movs	r0, #40	@ 0x28
 8000f52:	f001 f857 	bl	8002004 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f56:	2028      	movs	r0, #40	@ 0x28
 8000f58:	f001 f86e 	bl	8002038 <HAL_NVIC_EnableIRQ>

}
 8000f5c:	bf00      	nop
 8000f5e:	3728      	adds	r7, #40	@ 0x28
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40021000 	.word	0x40021000
 8000f68:	48000800 	.word	0x48000800

08000f6c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000f70:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa0 <MX_IWDG_Init+0x34>)
 8000f72:	4a0c      	ldr	r2, [pc, #48]	@ (8000fa4 <MX_IWDG_Init+0x38>)
 8000f74:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000f76:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <MX_IWDG_Init+0x34>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000f7c:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <MX_IWDG_Init+0x34>)
 8000f7e:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000f82:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 8000f84:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <MX_IWDG_Init+0x34>)
 8000f86:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8000f8a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000f8c:	4804      	ldr	r0, [pc, #16]	@ (8000fa0 <MX_IWDG_Init+0x34>)
 8000f8e:	f001 fd5c 	bl	8002a4a <HAL_IWDG_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8000f98:	f000 f880 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20004458 	.word	0x20004458
 8000fa4:	40003000 	.word	0x40003000

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fac:	f000 ff3b 	bl	8001e26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb0:	f000 f816 	bl	8000fe0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb4:	f7ff ff6c 	bl	8000e90 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fb8:	f7ff fe7c 	bl	8000cb4 <MX_DMA_Init>
  MX_TIM2_Init();
 8000fbc:	f000 fbba 	bl	8001734 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fc0:	f000 fc06 	bl	80017d0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000fc4:	f000 fd2e 	bl	8001a24 <MX_USART1_UART_Init>
  MX_LPUART1_UART_Init();
 8000fc8:	f000 fce2 	bl	8001990 <MX_LPUART1_UART_Init>
  MX_IWDG_Init();
 8000fcc:	f7ff ffce 	bl	8000f6c <MX_IWDG_Init>
//  AMT212EV_Init(&amt, &huart1, 1000, 16384);
//  HAL_TIM_Base_Start_IT(&htim2);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fd0:	f005 fe9a 	bl	8006d08 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000fd4:	f7ff fb54 	bl	8000680 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000fd8:	f005 feba 	bl	8006d50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <main+0x34>

08000fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b094      	sub	sp, #80	@ 0x50
 8000fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe6:	f107 0318 	add.w	r3, r7, #24
 8000fea:	2238      	movs	r2, #56	@ 0x38
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f013 fb8a 	bl	8014708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001002:	2000      	movs	r0, #0
 8001004:	f001 fd70 	bl	8002ae8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001008:	2309      	movs	r3, #9
 800100a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800100c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001010:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001012:	2301      	movs	r3, #1
 8001014:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001016:	2302      	movs	r3, #2
 8001018:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800101a:	2303      	movs	r3, #3
 800101c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800101e:	2306      	movs	r3, #6
 8001020:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001022:	2355      	movs	r3, #85	@ 0x55
 8001024:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001026:	2302      	movs	r3, #2
 8001028:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800102a:	2302      	movs	r3, #2
 800102c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800102e:	2302      	movs	r3, #2
 8001030:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001032:	f107 0318 	add.w	r3, r7, #24
 8001036:	4618      	mov	r0, r3
 8001038:	f001 fe0a 	bl	8002c50 <HAL_RCC_OscConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001042:	f000 f82b 	bl	800109c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001046:	230f      	movs	r3, #15
 8001048:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800104a:	2303      	movs	r3, #3
 800104c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2104      	movs	r1, #4
 800105e:	4618      	mov	r0, r3
 8001060:	f002 f908 	bl	8003274 <HAL_RCC_ClockConfig>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800106a:	f000 f817 	bl	800109c <Error_Handler>
  }
}
 800106e:	bf00      	nop
 8001070:	3750      	adds	r7, #80	@ 0x50
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
//		AMT212EV_DiffCount(&amt);
//		AMT212EV_Compute(&amt);
//	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a04      	ldr	r2, [pc, #16]	@ (8001098 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d101      	bne.n	800108e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800108a:	f000 fee5 	bl	8001e58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40012c00 	.word	0x40012c00

0800109c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010a0:	b672      	cpsid	i
}
 80010a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <Error_Handler+0x8>

080010a8 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80010b2:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <microros_allocate+0x3c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4413      	add	r3, r2
 80010bc:	461a      	mov	r2, r3
 80010be:	4b09      	ldr	r3, [pc, #36]	@ (80010e4 <microros_allocate+0x3c>)
 80010c0:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80010c2:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <microros_allocate+0x40>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4413      	add	r3, r2
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <microros_allocate+0x40>)
 80010d0:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff fb9e 	bl	8000814 <pvPortMallocMicroROS>
 80010d8:	4603      	mov	r3, r0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20004468 	.word	0x20004468
 80010e8:	2000446c 	.word	0x2000446c

080010ec <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d00c      	beq.n	8001116 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff fcad 	bl	8000a5c <getBlockSize>
 8001102:	4603      	mov	r3, r0
 8001104:	4a06      	ldr	r2, [pc, #24]	@ (8001120 <microros_deallocate+0x34>)
 8001106:	6812      	ldr	r2, [r2, #0]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	461a      	mov	r2, r3
 800110c:	4b04      	ldr	r3, [pc, #16]	@ (8001120 <microros_deallocate+0x34>)
 800110e:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff fc47 	bl	80009a4 <vPortFreeMicroROS>
  }
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	2000446c 	.word	0x2000446c

08001124 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001130:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <microros_reallocate+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	4413      	add	r3, r2
 800113a:	461a      	mov	r2, r3
 800113c:	4b12      	ldr	r3, [pc, #72]	@ (8001188 <microros_reallocate+0x64>)
 800113e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <microros_reallocate+0x68>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	4413      	add	r3, r2
 800114a:	461a      	mov	r2, r3
 800114c:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <microros_reallocate+0x68>)
 800114e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d104      	bne.n	8001160 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001156:	68b8      	ldr	r0, [r7, #8]
 8001158:	f7ff fb5c 	bl	8000814 <pvPortMallocMicroROS>
 800115c:	4603      	mov	r3, r0
 800115e:	e00e      	b.n	800117e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f7ff fc7b 	bl	8000a5c <getBlockSize>
 8001166:	4603      	mov	r3, r0
 8001168:	4a08      	ldr	r2, [pc, #32]	@ (800118c <microros_reallocate+0x68>)
 800116a:	6812      	ldr	r2, [r2, #0]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	461a      	mov	r2, r3
 8001170:	4b06      	ldr	r3, [pc, #24]	@ (800118c <microros_reallocate+0x68>)
 8001172:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001174:	68b9      	ldr	r1, [r7, #8]
 8001176:	68f8      	ldr	r0, [r7, #12]
 8001178:	f7ff fc8e 	bl	8000a98 <pvPortReallocMicroROS>
 800117c:	4603      	mov	r3, r0
  }
}
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20004468 	.word	0x20004468
 800118c:	2000446c 	.word	0x2000446c

08001190 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	fb02 f303 	mul.w	r3, r2, r3
 80011a4:	4a0c      	ldr	r2, [pc, #48]	@ (80011d8 <microros_zero_allocate+0x48>)
 80011a6:	6812      	ldr	r2, [r2, #0]
 80011a8:	4413      	add	r3, r2
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b0a      	ldr	r3, [pc, #40]	@ (80011d8 <microros_zero_allocate+0x48>)
 80011ae:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	fb02 f303 	mul.w	r3, r2, r3
 80011b8:	4a08      	ldr	r2, [pc, #32]	@ (80011dc <microros_zero_allocate+0x4c>)
 80011ba:	6812      	ldr	r2, [r2, #0]
 80011bc:	4413      	add	r3, r2
 80011be:	461a      	mov	r2, r3
 80011c0:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <microros_zero_allocate+0x4c>)
 80011c2:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80011c4:	68b9      	ldr	r1, [r7, #8]
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f7ff fc93 	bl	8000af2 <pvPortCallocMicroROS>
 80011cc:	4603      	mov	r3, r0
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20004468 	.word	0x20004468
 80011dc:	2000446c 	.word	0x2000446c

080011e0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80011e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011e4:	b086      	sub	sp, #24
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80011f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011f6:	a320      	add	r3, pc, #128	@ (adr r3, 8001278 <UTILS_NanosecondsToTimespec+0x98>)
 80011f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fc:	f7ff f878 	bl	80002f0 <__aeabi_ldivmod>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800120a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800120e:	a31a      	add	r3, pc, #104	@ (adr r3, 8001278 <UTILS_NanosecondsToTimespec+0x98>)
 8001210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001214:	f7ff f86c 	bl	80002f0 <__aeabi_ldivmod>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	2b00      	cmp	r3, #0
 8001222:	da20      	bge.n	8001266 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	4a11      	ldr	r2, [pc, #68]	@ (8001270 <UTILS_NanosecondsToTimespec+0x90>)
 800122a:	fb82 1203 	smull	r1, r2, r2, r3
 800122e:	1712      	asrs	r2, r2, #28
 8001230:	17db      	asrs	r3, r3, #31
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	3301      	adds	r3, #1
 8001236:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123e:	6979      	ldr	r1, [r7, #20]
 8001240:	17c8      	asrs	r0, r1, #31
 8001242:	460c      	mov	r4, r1
 8001244:	4605      	mov	r5, r0
 8001246:	ebb2 0804 	subs.w	r8, r2, r4
 800124a:	eb63 0905 	sbc.w	r9, r3, r5
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	4906      	ldr	r1, [pc, #24]	@ (8001274 <UTILS_NanosecondsToTimespec+0x94>)
 800125c:	fb01 f303 	mul.w	r3, r1, r3
 8001260:	441a      	add	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	609a      	str	r2, [r3, #8]
    }
}
 8001266:	bf00      	nop
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001270:	44b82fa1 	.word	0x44b82fa1
 8001274:	3b9aca00 	.word	0x3b9aca00
 8001278:	3b9aca00 	.word	0x3b9aca00
 800127c:	00000000 	.word	0x00000000

08001280 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001284:	b08e      	sub	sp, #56	@ 0x38
 8001286:	af00      	add	r7, sp, #0
 8001288:	6278      	str	r0, [r7, #36]	@ 0x24
 800128a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800128c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001290:	2300      	movs	r3, #0
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	f04f 0300 	mov.w	r3, #0
 800129e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80012a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012a6:	4618      	mov	r0, r3
 80012a8:	f007 f8fe 	bl	80084a8 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80012ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012ae:	17da      	asrs	r2, r3, #31
 80012b0:	61bb      	str	r3, [r7, #24]
 80012b2:	61fa      	str	r2, [r7, #28]
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	f04f 0300 	mov.w	r3, #0
 80012bc:	69b9      	ldr	r1, [r7, #24]
 80012be:	000b      	movs	r3, r1
 80012c0:	2200      	movs	r2, #0
 80012c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80012c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012c8:	2200      	movs	r2, #0
 80012ca:	461c      	mov	r4, r3
 80012cc:	4615      	mov	r5, r2
 80012ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80012d2:	1911      	adds	r1, r2, r4
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	416b      	adcs	r3, r5
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80012de:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80012e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	f04f 0400 	mov.w	r4, #0
 80012ee:	f04f 0500 	mov.w	r5, #0
 80012f2:	015d      	lsls	r5, r3, #5
 80012f4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80012f8:	0154      	lsls	r4, r2, #5
 80012fa:	4622      	mov	r2, r4
 80012fc:	462b      	mov	r3, r5
 80012fe:	ebb2 0800 	subs.w	r8, r2, r0
 8001302:	eb63 0901 	sbc.w	r9, r3, r1
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	f04f 0300 	mov.w	r3, #0
 800130e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001312:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001316:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800131a:	4690      	mov	r8, r2
 800131c:	4699      	mov	r9, r3
 800131e:	eb18 0a00 	adds.w	sl, r8, r0
 8001322:	eb49 0b01 	adc.w	fp, r9, r1
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	f04f 0300 	mov.w	r3, #0
 800132e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001332:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001336:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800133a:	ebb2 040a 	subs.w	r4, r2, sl
 800133e:	603c      	str	r4, [r7, #0]
 8001340:	eb63 030b 	sbc.w	r3, r3, fp
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	e9d7 4500 	ldrd	r4, r5, [r7]
 800134a:	4623      	mov	r3, r4
 800134c:	181b      	adds	r3, r3, r0
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	462b      	mov	r3, r5
 8001352:	eb41 0303 	adc.w	r3, r1, r3
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	6a3a      	ldr	r2, [r7, #32]
 800135a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800135e:	f7ff ff3f 	bl	80011e0 <UTILS_NanosecondsToTimespec>

    return 0;
 8001362:	2300      	movs	r3, #0
 8001364:	4618      	mov	r0, r3
 8001366:	3738      	adds	r7, #56	@ 0x38
 8001368:	46bd      	mov	sp, r7
 800136a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001376:	4b12      	ldr	r3, [pc, #72]	@ (80013c0 <HAL_MspInit+0x50>)
 8001378:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800137a:	4a11      	ldr	r2, [pc, #68]	@ (80013c0 <HAL_MspInit+0x50>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6613      	str	r3, [r2, #96]	@ 0x60
 8001382:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <HAL_MspInit+0x50>)
 8001384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <HAL_MspInit+0x50>)
 8001390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001392:	4a0b      	ldr	r2, [pc, #44]	@ (80013c0 <HAL_MspInit+0x50>)
 8001394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001398:	6593      	str	r3, [r2, #88]	@ 0x58
 800139a:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <HAL_MspInit+0x50>)
 800139c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800139e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	210f      	movs	r1, #15
 80013aa:	f06f 0001 	mvn.w	r0, #1
 80013ae:	f000 fe29 	bl	8002004 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80013b2:	f001 fc3d 	bl	8002c30 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000

080013c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08c      	sub	sp, #48	@ 0x30
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80013d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001488 <HAL_InitTick+0xc4>)
 80013d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013d8:	4a2b      	ldr	r2, [pc, #172]	@ (8001488 <HAL_InitTick+0xc4>)
 80013da:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013de:	6613      	str	r3, [r2, #96]	@ 0x60
 80013e0:	4b29      	ldr	r3, [pc, #164]	@ (8001488 <HAL_InitTick+0xc4>)
 80013e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013ec:	f107 020c 	add.w	r2, r7, #12
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	4611      	mov	r1, r2
 80013f6:	4618      	mov	r0, r3
 80013f8:	f002 f912 	bl	8003620 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80013fc:	f002 f8fa 	bl	80035f4 <HAL_RCC_GetPCLK2Freq>
 8001400:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001404:	4a21      	ldr	r2, [pc, #132]	@ (800148c <HAL_InitTick+0xc8>)
 8001406:	fba2 2303 	umull	r2, r3, r2, r3
 800140a:	0c9b      	lsrs	r3, r3, #18
 800140c:	3b01      	subs	r3, #1
 800140e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001410:	4b1f      	ldr	r3, [pc, #124]	@ (8001490 <HAL_InitTick+0xcc>)
 8001412:	4a20      	ldr	r2, [pc, #128]	@ (8001494 <HAL_InitTick+0xd0>)
 8001414:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001416:	4b1e      	ldr	r3, [pc, #120]	@ (8001490 <HAL_InitTick+0xcc>)
 8001418:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800141c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800141e:	4a1c      	ldr	r2, [pc, #112]	@ (8001490 <HAL_InitTick+0xcc>)
 8001420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001422:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001424:	4b1a      	ldr	r3, [pc, #104]	@ (8001490 <HAL_InitTick+0xcc>)
 8001426:	2200      	movs	r2, #0
 8001428:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142a:	4b19      	ldr	r3, [pc, #100]	@ (8001490 <HAL_InitTick+0xcc>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001430:	4817      	ldr	r0, [pc, #92]	@ (8001490 <HAL_InitTick+0xcc>)
 8001432:	f002 fbbb 	bl	8003bac <HAL_TIM_Base_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800143c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001440:	2b00      	cmp	r3, #0
 8001442:	d11b      	bne.n	800147c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001444:	4812      	ldr	r0, [pc, #72]	@ (8001490 <HAL_InitTick+0xcc>)
 8001446:	f002 fc09 	bl	8003c5c <HAL_TIM_Base_Start_IT>
 800144a:	4603      	mov	r3, r0
 800144c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001450:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001454:	2b00      	cmp	r3, #0
 8001456:	d111      	bne.n	800147c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001458:	2019      	movs	r0, #25
 800145a:	f000 fded 	bl	8002038 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b0f      	cmp	r3, #15
 8001462:	d808      	bhi.n	8001476 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001464:	2200      	movs	r2, #0
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	2019      	movs	r0, #25
 800146a:	f000 fdcb 	bl	8002004 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800146e:	4a0a      	ldr	r2, [pc, #40]	@ (8001498 <HAL_InitTick+0xd4>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	e002      	b.n	800147c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800147c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001480:	4618      	mov	r0, r3
 8001482:	3730      	adds	r7, #48	@ 0x30
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40021000 	.word	0x40021000
 800148c:	431bde83 	.word	0x431bde83
 8001490:	20004470 	.word	0x20004470
 8001494:	40012c00 	.word	0x40012c00
 8001498:	20000008 	.word	0x20000008

0800149c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <NMI_Handler+0x4>

080014a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <HardFault_Handler+0x4>

080014ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <MemManage_Handler+0x4>

080014b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <BusFault_Handler+0x4>

080014bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <UsageFault_Handler+0x4>

080014c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
	...

080014d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80014d8:	4802      	ldr	r0, [pc, #8]	@ (80014e4 <DMA1_Channel1_IRQHandler+0x10>)
 80014da:	f000 ff9e 	bl	800241a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20004744 	.word	0x20004744

080014e8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80014ec:	4802      	ldr	r0, [pc, #8]	@ (80014f8 <DMA1_Channel2_IRQHandler+0x10>)
 80014ee:	f000 ff94 	bl	800241a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200047a4 	.word	0x200047a4

080014fc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001500:	4802      	ldr	r0, [pc, #8]	@ (800150c <DMA1_Channel3_IRQHandler+0x10>)
 8001502:	f000 ff8a 	bl	800241a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20004684 	.word	0x20004684

08001510 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001514:	4802      	ldr	r0, [pc, #8]	@ (8001520 <DMA1_Channel4_IRQHandler+0x10>)
 8001516:	f000 ff80 	bl	800241a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200046e4 	.word	0x200046e4

08001524 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001528:	4802      	ldr	r0, [pc, #8]	@ (8001534 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800152a:	f002 fc66 	bl	8003dfa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20004470 	.word	0x20004470

08001538 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800153c:	4802      	ldr	r0, [pc, #8]	@ (8001548 <TIM2_IRQHandler+0x10>)
 800153e:	f002 fc5c 	bl	8003dfa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200044c4 	.word	0x200044c4

0800154c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001550:	4802      	ldr	r0, [pc, #8]	@ (800155c <USART1_IRQHandler+0x10>)
 8001552:	f003 fefb 	bl	800534c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200045f0 	.word	0x200045f0

08001560 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001564:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001568:	f001 fa4c 	bl	8002a04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}

08001570 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001574:	4802      	ldr	r0, [pc, #8]	@ (8001580 <LPUART1_IRQHandler+0x10>)
 8001576:	f003 fee9 	bl	800534c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	2000455c 	.word	0x2000455c

08001584 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return 1;
 8001588:	2301      	movs	r3, #1
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <_kill>:

int _kill(int pid, int sig)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800159e:	f013 f979 	bl	8014894 <__errno>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2216      	movs	r2, #22
 80015a6:	601a      	str	r2, [r3, #0]
  return -1;
 80015a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <_exit>:

void _exit (int status)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ffe7 	bl	8001594 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015c6:	bf00      	nop
 80015c8:	e7fd      	b.n	80015c6 <_exit+0x12>

080015ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b086      	sub	sp, #24
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	60f8      	str	r0, [r7, #12]
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	e00a      	b.n	80015f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015dc:	f3af 8000 	nop.w
 80015e0:	4601      	mov	r1, r0
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	1c5a      	adds	r2, r3, #1
 80015e6:	60ba      	str	r2, [r7, #8]
 80015e8:	b2ca      	uxtb	r2, r1
 80015ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	3301      	adds	r3, #1
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	dbf0      	blt.n	80015dc <_read+0x12>
  }

  return len;
 80015fa:	687b      	ldr	r3, [r7, #4]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	e009      	b.n	800162a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	1c5a      	adds	r2, r3, #1
 800161a:	60ba      	str	r2, [r7, #8]
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	3301      	adds	r3, #1
 8001628:	617b      	str	r3, [r7, #20]
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	429a      	cmp	r2, r3
 8001630:	dbf1      	blt.n	8001616 <_write+0x12>
  }
  return len;
 8001632:	687b      	ldr	r3, [r7, #4]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <_close>:

int _close(int file)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001644:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001648:	4618      	mov	r0, r3
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001664:	605a      	str	r2, [r3, #4]
  return 0;
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <_isatty>:

int _isatty(int file)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800167c:	2301      	movs	r3, #1
}
 800167e:	4618      	mov	r0, r3
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800168a:	b480      	push	{r7}
 800168c:	b085      	sub	sp, #20
 800168e:	af00      	add	r7, sp, #0
 8001690:	60f8      	str	r0, [r7, #12]
 8001692:	60b9      	str	r1, [r7, #8]
 8001694:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016ac:	4a14      	ldr	r2, [pc, #80]	@ (8001700 <_sbrk+0x5c>)
 80016ae:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <_sbrk+0x60>)
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016b8:	4b13      	ldr	r3, [pc, #76]	@ (8001708 <_sbrk+0x64>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d102      	bne.n	80016c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016c0:	4b11      	ldr	r3, [pc, #68]	@ (8001708 <_sbrk+0x64>)
 80016c2:	4a12      	ldr	r2, [pc, #72]	@ (800170c <_sbrk+0x68>)
 80016c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016c6:	4b10      	ldr	r3, [pc, #64]	@ (8001708 <_sbrk+0x64>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d207      	bcs.n	80016e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016d4:	f013 f8de 	bl	8014894 <__errno>
 80016d8:	4603      	mov	r3, r0
 80016da:	220c      	movs	r2, #12
 80016dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016e2:	e009      	b.n	80016f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016e4:	4b08      	ldr	r3, [pc, #32]	@ (8001708 <_sbrk+0x64>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ea:	4b07      	ldr	r3, [pc, #28]	@ (8001708 <_sbrk+0x64>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	4a05      	ldr	r2, [pc, #20]	@ (8001708 <_sbrk+0x64>)
 80016f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016f6:	68fb      	ldr	r3, [r7, #12]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20020000 	.word	0x20020000
 8001704:	00000400 	.word	0x00000400
 8001708:	200044c0 	.word	0x200044c0
 800170c:	2000ad38 	.word	0x2000ad38

08001710 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001714:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <SystemInit+0x20>)
 8001716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800171a:	4a05      	ldr	r2, [pc, #20]	@ (8001730 <SystemInit+0x20>)
 800171c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001720:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800173a:	f107 0310 	add.w	r3, r7, #16
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001752:	4b1e      	ldr	r3, [pc, #120]	@ (80017cc <MX_TIM2_Init+0x98>)
 8001754:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001758:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800175a:	4b1c      	ldr	r3, [pc, #112]	@ (80017cc <MX_TIM2_Init+0x98>)
 800175c:	22a9      	movs	r2, #169	@ 0xa9
 800175e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001760:	4b1a      	ldr	r3, [pc, #104]	@ (80017cc <MX_TIM2_Init+0x98>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001766:	4b19      	ldr	r3, [pc, #100]	@ (80017cc <MX_TIM2_Init+0x98>)
 8001768:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800176c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176e:	4b17      	ldr	r3, [pc, #92]	@ (80017cc <MX_TIM2_Init+0x98>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001774:	4b15      	ldr	r3, [pc, #84]	@ (80017cc <MX_TIM2_Init+0x98>)
 8001776:	2200      	movs	r2, #0
 8001778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800177a:	4814      	ldr	r0, [pc, #80]	@ (80017cc <MX_TIM2_Init+0x98>)
 800177c:	f002 fa16 	bl	8003bac <HAL_TIM_Base_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001786:	f7ff fc89 	bl	800109c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800178a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800178e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001790:	f107 0310 	add.w	r3, r7, #16
 8001794:	4619      	mov	r1, r3
 8001796:	480d      	ldr	r0, [pc, #52]	@ (80017cc <MX_TIM2_Init+0x98>)
 8001798:	f002 fd92 	bl	80042c0 <HAL_TIM_ConfigClockSource>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80017a2:	f7ff fc7b 	bl	800109c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a6:	2300      	movs	r3, #0
 80017a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017ae:	1d3b      	adds	r3, r7, #4
 80017b0:	4619      	mov	r1, r3
 80017b2:	4806      	ldr	r0, [pc, #24]	@ (80017cc <MX_TIM2_Init+0x98>)
 80017b4:	f003 fb3c 	bl	8004e30 <HAL_TIMEx_MasterConfigSynchronization>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80017be:	f7ff fc6d 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017c2:	bf00      	nop
 80017c4:	3720      	adds	r7, #32
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200044c4 	.word	0x200044c4

080017d0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08a      	sub	sp, #40	@ 0x28
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d6:	f107 031c 	add.w	r3, r7, #28
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017e2:	463b      	mov	r3, r7
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
 80017f0:	615a      	str	r2, [r3, #20]
 80017f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017f4:	4b27      	ldr	r3, [pc, #156]	@ (8001894 <MX_TIM3_Init+0xc4>)
 80017f6:	4a28      	ldr	r2, [pc, #160]	@ (8001898 <MX_TIM3_Init+0xc8>)
 80017f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017fa:	4b26      	ldr	r3, [pc, #152]	@ (8001894 <MX_TIM3_Init+0xc4>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001800:	4b24      	ldr	r3, [pc, #144]	@ (8001894 <MX_TIM3_Init+0xc4>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001806:	4b23      	ldr	r3, [pc, #140]	@ (8001894 <MX_TIM3_Init+0xc4>)
 8001808:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800180c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800180e:	4b21      	ldr	r3, [pc, #132]	@ (8001894 <MX_TIM3_Init+0xc4>)
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001814:	4b1f      	ldr	r3, [pc, #124]	@ (8001894 <MX_TIM3_Init+0xc4>)
 8001816:	2200      	movs	r2, #0
 8001818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800181a:	481e      	ldr	r0, [pc, #120]	@ (8001894 <MX_TIM3_Init+0xc4>)
 800181c:	f002 fa96 	bl	8003d4c <HAL_TIM_PWM_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001826:	f7ff fc39 	bl	800109c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800182e:	2300      	movs	r3, #0
 8001830:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001832:	f107 031c 	add.w	r3, r7, #28
 8001836:	4619      	mov	r1, r3
 8001838:	4816      	ldr	r0, [pc, #88]	@ (8001894 <MX_TIM3_Init+0xc4>)
 800183a:	f003 faf9 	bl	8004e30 <HAL_TIMEx_MasterConfigSynchronization>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001844:	f7ff fc2a 	bl	800109c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001848:	2360      	movs	r3, #96	@ 0x60
 800184a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001850:	2300      	movs	r3, #0
 8001852:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001854:	2300      	movs	r3, #0
 8001856:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001858:	463b      	mov	r3, r7
 800185a:	2200      	movs	r2, #0
 800185c:	4619      	mov	r1, r3
 800185e:	480d      	ldr	r0, [pc, #52]	@ (8001894 <MX_TIM3_Init+0xc4>)
 8001860:	f002 fc1a 	bl	8004098 <HAL_TIM_PWM_ConfigChannel>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800186a:	f7ff fc17 	bl	800109c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800186e:	463b      	mov	r3, r7
 8001870:	2204      	movs	r2, #4
 8001872:	4619      	mov	r1, r3
 8001874:	4807      	ldr	r0, [pc, #28]	@ (8001894 <MX_TIM3_Init+0xc4>)
 8001876:	f002 fc0f 	bl	8004098 <HAL_TIM_PWM_ConfigChannel>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001880:	f7ff fc0c 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001884:	4803      	ldr	r0, [pc, #12]	@ (8001894 <MX_TIM3_Init+0xc4>)
 8001886:	f000 f84d 	bl	8001924 <HAL_TIM_MspPostInit>

}
 800188a:	bf00      	nop
 800188c:	3728      	adds	r7, #40	@ 0x28
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20004510 	.word	0x20004510
 8001898:	40000400 	.word	0x40000400

0800189c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018ac:	d113      	bne.n	80018d6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018ae:	4b0c      	ldr	r3, [pc, #48]	@ (80018e0 <HAL_TIM_Base_MspInit+0x44>)
 80018b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b2:	4a0b      	ldr	r2, [pc, #44]	@ (80018e0 <HAL_TIM_Base_MspInit+0x44>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80018ba:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <HAL_TIM_Base_MspInit+0x44>)
 80018bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2105      	movs	r1, #5
 80018ca:	201c      	movs	r0, #28
 80018cc:	f000 fb9a 	bl	8002004 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018d0:	201c      	movs	r0, #28
 80018d2:	f000 fbb1 	bl	8002038 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000

080018e4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a0a      	ldr	r2, [pc, #40]	@ (800191c <HAL_TIM_PWM_MspInit+0x38>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d10b      	bne.n	800190e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001920 <HAL_TIM_PWM_MspInit+0x3c>)
 80018f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018fa:	4a09      	ldr	r2, [pc, #36]	@ (8001920 <HAL_TIM_PWM_MspInit+0x3c>)
 80018fc:	f043 0302 	orr.w	r3, r3, #2
 8001900:	6593      	str	r3, [r2, #88]	@ 0x58
 8001902:	4b07      	ldr	r3, [pc, #28]	@ (8001920 <HAL_TIM_PWM_MspInit+0x3c>)
 8001904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800190e:	bf00      	nop
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40000400 	.word	0x40000400
 8001920:	40021000 	.word	0x40021000

08001924 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 030c 	add.w	r3, r7, #12
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a11      	ldr	r2, [pc, #68]	@ (8001988 <HAL_TIM_MspPostInit+0x64>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d11c      	bne.n	8001980 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001946:	4b11      	ldr	r3, [pc, #68]	@ (800198c <HAL_TIM_MspPostInit+0x68>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194a:	4a10      	ldr	r2, [pc, #64]	@ (800198c <HAL_TIM_MspPostInit+0x68>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001952:	4b0e      	ldr	r3, [pc, #56]	@ (800198c <HAL_TIM_MspPostInit+0x68>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800195e:	2350      	movs	r3, #80	@ 0x50
 8001960:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2300      	movs	r3, #0
 800196c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800196e:	2302      	movs	r3, #2
 8001970:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001972:	f107 030c 	add.w	r3, r7, #12
 8001976:	4619      	mov	r1, r3
 8001978:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800197c:	f000 fea8 	bl	80026d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001980:	bf00      	nop
 8001982:	3720      	adds	r7, #32
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40000400 	.word	0x40000400
 800198c:	40021000 	.word	0x40021000

08001990 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001994:	4b21      	ldr	r3, [pc, #132]	@ (8001a1c <MX_LPUART1_UART_Init+0x8c>)
 8001996:	4a22      	ldr	r2, [pc, #136]	@ (8001a20 <MX_LPUART1_UART_Init+0x90>)
 8001998:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800199a:	4b20      	ldr	r3, [pc, #128]	@ (8001a1c <MX_LPUART1_UART_Init+0x8c>)
 800199c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019a0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019a2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a1c <MX_LPUART1_UART_Init+0x8c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80019a8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a1c <MX_LPUART1_UART_Init+0x8c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80019ae:	4b1b      	ldr	r3, [pc, #108]	@ (8001a1c <MX_LPUART1_UART_Init+0x8c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80019b4:	4b19      	ldr	r3, [pc, #100]	@ (8001a1c <MX_LPUART1_UART_Init+0x8c>)
 80019b6:	220c      	movs	r2, #12
 80019b8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ba:	4b18      	ldr	r3, [pc, #96]	@ (8001a1c <MX_LPUART1_UART_Init+0x8c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019c0:	4b16      	ldr	r3, [pc, #88]	@ (8001a1c <MX_LPUART1_UART_Init+0x8c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019c6:	4b15      	ldr	r3, [pc, #84]	@ (8001a1c <MX_LPUART1_UART_Init+0x8c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019cc:	4b13      	ldr	r3, [pc, #76]	@ (8001a1c <MX_LPUART1_UART_Init+0x8c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80019d2:	4812      	ldr	r0, [pc, #72]	@ (8001a1c <MX_LPUART1_UART_Init+0x8c>)
 80019d4:	f003 fb08 	bl	8004fe8 <HAL_UART_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80019de:	f7ff fb5d 	bl	800109c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019e2:	2100      	movs	r1, #0
 80019e4:	480d      	ldr	r0, [pc, #52]	@ (8001a1c <MX_LPUART1_UART_Init+0x8c>)
 80019e6:	f005 f881 	bl	8006aec <HAL_UARTEx_SetTxFifoThreshold>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80019f0:	f7ff fb54 	bl	800109c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019f4:	2100      	movs	r1, #0
 80019f6:	4809      	ldr	r0, [pc, #36]	@ (8001a1c <MX_LPUART1_UART_Init+0x8c>)
 80019f8:	f005 f8b6 	bl	8006b68 <HAL_UARTEx_SetRxFifoThreshold>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001a02:	f7ff fb4b 	bl	800109c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001a06:	4805      	ldr	r0, [pc, #20]	@ (8001a1c <MX_LPUART1_UART_Init+0x8c>)
 8001a08:	f005 f837 	bl	8006a7a <HAL_UARTEx_DisableFifoMode>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001a12:	f7ff fb43 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	2000455c 	.word	0x2000455c
 8001a20:	40008000 	.word	0x40008000

08001a24 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a28:	4b24      	ldr	r3, [pc, #144]	@ (8001abc <MX_USART1_UART_Init+0x98>)
 8001a2a:	4a25      	ldr	r2, [pc, #148]	@ (8001ac0 <MX_USART1_UART_Init+0x9c>)
 8001a2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a2e:	4b23      	ldr	r3, [pc, #140]	@ (8001abc <MX_USART1_UART_Init+0x98>)
 8001a30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a36:	4b21      	ldr	r3, [pc, #132]	@ (8001abc <MX_USART1_UART_Init+0x98>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001abc <MX_USART1_UART_Init+0x98>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a42:	4b1e      	ldr	r3, [pc, #120]	@ (8001abc <MX_USART1_UART_Init+0x98>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a48:	4b1c      	ldr	r3, [pc, #112]	@ (8001abc <MX_USART1_UART_Init+0x98>)
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001abc <MX_USART1_UART_Init+0x98>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a54:	4b19      	ldr	r3, [pc, #100]	@ (8001abc <MX_USART1_UART_Init+0x98>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a5a:	4b18      	ldr	r3, [pc, #96]	@ (8001abc <MX_USART1_UART_Init+0x98>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a60:	4b16      	ldr	r3, [pc, #88]	@ (8001abc <MX_USART1_UART_Init+0x98>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a66:	4b15      	ldr	r3, [pc, #84]	@ (8001abc <MX_USART1_UART_Init+0x98>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2100      	movs	r1, #0
 8001a72:	4812      	ldr	r0, [pc, #72]	@ (8001abc <MX_USART1_UART_Init+0x98>)
 8001a74:	f004 ff7a 	bl	800696c <HAL_RS485Ex_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 8001a7e:	f7ff fb0d 	bl	800109c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a82:	2100      	movs	r1, #0
 8001a84:	480d      	ldr	r0, [pc, #52]	@ (8001abc <MX_USART1_UART_Init+0x98>)
 8001a86:	f005 f831 	bl	8006aec <HAL_UARTEx_SetTxFifoThreshold>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 8001a90:	f7ff fb04 	bl	800109c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a94:	2100      	movs	r1, #0
 8001a96:	4809      	ldr	r0, [pc, #36]	@ (8001abc <MX_USART1_UART_Init+0x98>)
 8001a98:	f005 f866 	bl	8006b68 <HAL_UARTEx_SetRxFifoThreshold>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 8001aa2:	f7ff fafb 	bl	800109c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001aa6:	4805      	ldr	r0, [pc, #20]	@ (8001abc <MX_USART1_UART_Init+0x98>)
 8001aa8:	f004 ffe7 	bl	8006a7a <HAL_UARTEx_DisableFifoMode>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 8001ab2:	f7ff faf3 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200045f0 	.word	0x200045f0
 8001ac0:	40013800 	.word	0x40013800

08001ac4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b0a2      	sub	sp, #136	@ 0x88
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001adc:	f107 0320 	add.w	r3, r7, #32
 8001ae0:	2254      	movs	r2, #84	@ 0x54
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f012 fe0f 	bl	8014708 <memset>
  if(uartHandle->Instance==LPUART1)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a4d      	ldr	r2, [pc, #308]	@ (8001c24 <HAL_UART_MspInit+0x160>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	f040 80a3 	bne.w	8001c3c <HAL_UART_MspInit+0x178>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001af6:	2320      	movs	r3, #32
 8001af8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001afa:	2300      	movs	r3, #0
 8001afc:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001afe:	f107 0320 	add.w	r3, r7, #32
 8001b02:	4618      	mov	r0, r3
 8001b04:	f001 fe04 	bl	8003710 <HAL_RCCEx_PeriphCLKConfig>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b0e:	f7ff fac5 	bl	800109c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001b12:	4b45      	ldr	r3, [pc, #276]	@ (8001c28 <HAL_UART_MspInit+0x164>)
 8001b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b16:	4a44      	ldr	r2, [pc, #272]	@ (8001c28 <HAL_UART_MspInit+0x164>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001b1e:	4b42      	ldr	r3, [pc, #264]	@ (8001c28 <HAL_UART_MspInit+0x164>)
 8001b20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	61fb      	str	r3, [r7, #28]
 8001b28:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c28 <HAL_UART_MspInit+0x164>)
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2e:	4a3e      	ldr	r2, [pc, #248]	@ (8001c28 <HAL_UART_MspInit+0x164>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b36:	4b3c      	ldr	r3, [pc, #240]	@ (8001c28 <HAL_UART_MspInit+0x164>)
 8001b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	61bb      	str	r3, [r7, #24]
 8001b40:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001b42:	230c      	movs	r3, #12
 8001b44:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001b54:	230c      	movs	r3, #12
 8001b56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b64:	f000 fdb4 	bl	80026d0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel3;
 8001b68:	4b30      	ldr	r3, [pc, #192]	@ (8001c2c <HAL_UART_MspInit+0x168>)
 8001b6a:	4a31      	ldr	r2, [pc, #196]	@ (8001c30 <HAL_UART_MspInit+0x16c>)
 8001b6c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001b6e:	4b2f      	ldr	r3, [pc, #188]	@ (8001c2c <HAL_UART_MspInit+0x168>)
 8001b70:	2223      	movs	r2, #35	@ 0x23
 8001b72:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b74:	4b2d      	ldr	r3, [pc, #180]	@ (8001c2c <HAL_UART_MspInit+0x168>)
 8001b76:	2210      	movs	r2, #16
 8001b78:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b7a:	4b2c      	ldr	r3, [pc, #176]	@ (8001c2c <HAL_UART_MspInit+0x168>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b80:	4b2a      	ldr	r3, [pc, #168]	@ (8001c2c <HAL_UART_MspInit+0x168>)
 8001b82:	2280      	movs	r2, #128	@ 0x80
 8001b84:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b86:	4b29      	ldr	r3, [pc, #164]	@ (8001c2c <HAL_UART_MspInit+0x168>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b8c:	4b27      	ldr	r3, [pc, #156]	@ (8001c2c <HAL_UART_MspInit+0x168>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001b92:	4b26      	ldr	r3, [pc, #152]	@ (8001c2c <HAL_UART_MspInit+0x168>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001b98:	4b24      	ldr	r3, [pc, #144]	@ (8001c2c <HAL_UART_MspInit+0x168>)
 8001b9a:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001b9e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001ba0:	4822      	ldr	r0, [pc, #136]	@ (8001c2c <HAL_UART_MspInit+0x168>)
 8001ba2:	f000 fa57 	bl	8002054 <HAL_DMA_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 8001bac:	f7ff fa76 	bl	800109c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a1e      	ldr	r2, [pc, #120]	@ (8001c2c <HAL_UART_MspInit+0x168>)
 8001bb4:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001bb6:	4a1d      	ldr	r2, [pc, #116]	@ (8001c2c <HAL_UART_MspInit+0x168>)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 8001bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8001c34 <HAL_UART_MspInit+0x170>)
 8001bbe:	4a1e      	ldr	r2, [pc, #120]	@ (8001c38 <HAL_UART_MspInit+0x174>)
 8001bc0:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c34 <HAL_UART_MspInit+0x170>)
 8001bc4:	2222      	movs	r2, #34	@ 0x22
 8001bc6:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c34 <HAL_UART_MspInit+0x170>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bce:	4b19      	ldr	r3, [pc, #100]	@ (8001c34 <HAL_UART_MspInit+0x170>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bd4:	4b17      	ldr	r3, [pc, #92]	@ (8001c34 <HAL_UART_MspInit+0x170>)
 8001bd6:	2280      	movs	r2, #128	@ 0x80
 8001bd8:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bda:	4b16      	ldr	r3, [pc, #88]	@ (8001c34 <HAL_UART_MspInit+0x170>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001be0:	4b14      	ldr	r3, [pc, #80]	@ (8001c34 <HAL_UART_MspInit+0x170>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8001be6:	4b13      	ldr	r3, [pc, #76]	@ (8001c34 <HAL_UART_MspInit+0x170>)
 8001be8:	2220      	movs	r2, #32
 8001bea:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001bec:	4b11      	ldr	r3, [pc, #68]	@ (8001c34 <HAL_UART_MspInit+0x170>)
 8001bee:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001bf2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001bf4:	480f      	ldr	r0, [pc, #60]	@ (8001c34 <HAL_UART_MspInit+0x170>)
 8001bf6:	f000 fa2d 	bl	8002054 <HAL_DMA_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 8001c00:	f7ff fa4c 	bl	800109c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a0b      	ldr	r2, [pc, #44]	@ (8001c34 <HAL_UART_MspInit+0x170>)
 8001c08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001c0c:	4a09      	ldr	r2, [pc, #36]	@ (8001c34 <HAL_UART_MspInit+0x170>)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2105      	movs	r1, #5
 8001c16:	205b      	movs	r0, #91	@ 0x5b
 8001c18:	f000 f9f4 	bl	8002004 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001c1c:	205b      	movs	r0, #91	@ 0x5b
 8001c1e:	f000 fa0b 	bl	8002038 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001c22:	e0c4      	b.n	8001dae <HAL_UART_MspInit+0x2ea>
 8001c24:	40008000 	.word	0x40008000
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	20004684 	.word	0x20004684
 8001c30:	40020030 	.word	0x40020030
 8001c34:	200046e4 	.word	0x200046e4
 8001c38:	40020044 	.word	0x40020044
  else if(uartHandle->Instance==USART1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a5d      	ldr	r2, [pc, #372]	@ (8001db8 <HAL_UART_MspInit+0x2f4>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	f040 80b3 	bne.w	8001dae <HAL_UART_MspInit+0x2ea>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c50:	f107 0320 	add.w	r3, r7, #32
 8001c54:	4618      	mov	r0, r3
 8001c56:	f001 fd5b 	bl	8003710 <HAL_RCCEx_PeriphCLKConfig>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8001c60:	f7ff fa1c 	bl	800109c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c64:	4b55      	ldr	r3, [pc, #340]	@ (8001dbc <HAL_UART_MspInit+0x2f8>)
 8001c66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c68:	4a54      	ldr	r2, [pc, #336]	@ (8001dbc <HAL_UART_MspInit+0x2f8>)
 8001c6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c6e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c70:	4b52      	ldr	r3, [pc, #328]	@ (8001dbc <HAL_UART_MspInit+0x2f8>)
 8001c72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c7c:	4b4f      	ldr	r3, [pc, #316]	@ (8001dbc <HAL_UART_MspInit+0x2f8>)
 8001c7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c80:	4a4e      	ldr	r2, [pc, #312]	@ (8001dbc <HAL_UART_MspInit+0x2f8>)
 8001c82:	f043 0304 	orr.w	r3, r3, #4
 8001c86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c88:	4b4c      	ldr	r3, [pc, #304]	@ (8001dbc <HAL_UART_MspInit+0x2f8>)
 8001c8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c94:	4b49      	ldr	r3, [pc, #292]	@ (8001dbc <HAL_UART_MspInit+0x2f8>)
 8001c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c98:	4a48      	ldr	r2, [pc, #288]	@ (8001dbc <HAL_UART_MspInit+0x2f8>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ca0:	4b46      	ldr	r3, [pc, #280]	@ (8001dbc <HAL_UART_MspInit+0x2f8>)
 8001ca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001cac:	2330      	movs	r3, #48	@ 0x30
 8001cae:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cbe:	2307      	movs	r3, #7
 8001cc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001cc8:	4619      	mov	r1, r3
 8001cca:	483d      	ldr	r0, [pc, #244]	@ (8001dc0 <HAL_UART_MspInit+0x2fc>)
 8001ccc:	f000 fd00 	bl	80026d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001cd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cd4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ce4:	2307      	movs	r3, #7
 8001ce6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cea:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001cee:	4619      	mov	r1, r3
 8001cf0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cf4:	f000 fcec 	bl	80026d0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001cf8:	4b32      	ldr	r3, [pc, #200]	@ (8001dc4 <HAL_UART_MspInit+0x300>)
 8001cfa:	4a33      	ldr	r2, [pc, #204]	@ (8001dc8 <HAL_UART_MspInit+0x304>)
 8001cfc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001cfe:	4b31      	ldr	r3, [pc, #196]	@ (8001dc4 <HAL_UART_MspInit+0x300>)
 8001d00:	2218      	movs	r2, #24
 8001d02:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d04:	4b2f      	ldr	r3, [pc, #188]	@ (8001dc4 <HAL_UART_MspInit+0x300>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d0a:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc4 <HAL_UART_MspInit+0x300>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d10:	4b2c      	ldr	r3, [pc, #176]	@ (8001dc4 <HAL_UART_MspInit+0x300>)
 8001d12:	2280      	movs	r2, #128	@ 0x80
 8001d14:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d16:	4b2b      	ldr	r3, [pc, #172]	@ (8001dc4 <HAL_UART_MspInit+0x300>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d1c:	4b29      	ldr	r3, [pc, #164]	@ (8001dc4 <HAL_UART_MspInit+0x300>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001d22:	4b28      	ldr	r3, [pc, #160]	@ (8001dc4 <HAL_UART_MspInit+0x300>)
 8001d24:	2220      	movs	r2, #32
 8001d26:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d28:	4b26      	ldr	r3, [pc, #152]	@ (8001dc4 <HAL_UART_MspInit+0x300>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001d2e:	4825      	ldr	r0, [pc, #148]	@ (8001dc4 <HAL_UART_MspInit+0x300>)
 8001d30:	f000 f990 	bl	8002054 <HAL_DMA_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_UART_MspInit+0x27a>
      Error_Handler();
 8001d3a:	f7ff f9af 	bl	800109c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a20      	ldr	r2, [pc, #128]	@ (8001dc4 <HAL_UART_MspInit+0x300>)
 8001d42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001d46:	4a1f      	ldr	r2, [pc, #124]	@ (8001dc4 <HAL_UART_MspInit+0x300>)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dcc <HAL_UART_MspInit+0x308>)
 8001d4e:	4a20      	ldr	r2, [pc, #128]	@ (8001dd0 <HAL_UART_MspInit+0x30c>)
 8001d50:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001d52:	4b1e      	ldr	r3, [pc, #120]	@ (8001dcc <HAL_UART_MspInit+0x308>)
 8001d54:	2219      	movs	r2, #25
 8001d56:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d58:	4b1c      	ldr	r3, [pc, #112]	@ (8001dcc <HAL_UART_MspInit+0x308>)
 8001d5a:	2210      	movs	r2, #16
 8001d5c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dcc <HAL_UART_MspInit+0x308>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d64:	4b19      	ldr	r3, [pc, #100]	@ (8001dcc <HAL_UART_MspInit+0x308>)
 8001d66:	2280      	movs	r2, #128	@ 0x80
 8001d68:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d6a:	4b18      	ldr	r3, [pc, #96]	@ (8001dcc <HAL_UART_MspInit+0x308>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d70:	4b16      	ldr	r3, [pc, #88]	@ (8001dcc <HAL_UART_MspInit+0x308>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001d76:	4b15      	ldr	r3, [pc, #84]	@ (8001dcc <HAL_UART_MspInit+0x308>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d7c:	4b13      	ldr	r3, [pc, #76]	@ (8001dcc <HAL_UART_MspInit+0x308>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001d82:	4812      	ldr	r0, [pc, #72]	@ (8001dcc <HAL_UART_MspInit+0x308>)
 8001d84:	f000 f966 	bl	8002054 <HAL_DMA_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_UART_MspInit+0x2ce>
      Error_Handler();
 8001d8e:	f7ff f985 	bl	800109c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a0d      	ldr	r2, [pc, #52]	@ (8001dcc <HAL_UART_MspInit+0x308>)
 8001d96:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001d98:	4a0c      	ldr	r2, [pc, #48]	@ (8001dcc <HAL_UART_MspInit+0x308>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2105      	movs	r1, #5
 8001da2:	2025      	movs	r0, #37	@ 0x25
 8001da4:	f000 f92e 	bl	8002004 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001da8:	2025      	movs	r0, #37	@ 0x25
 8001daa:	f000 f945 	bl	8002038 <HAL_NVIC_EnableIRQ>
}
 8001dae:	bf00      	nop
 8001db0:	3788      	adds	r7, #136	@ 0x88
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40013800 	.word	0x40013800
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	48000800 	.word	0x48000800
 8001dc4:	20004744 	.word	0x20004744
 8001dc8:	40020008 	.word	0x40020008
 8001dcc:	200047a4 	.word	0x200047a4
 8001dd0:	4002001c 	.word	0x4002001c

08001dd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001dd4:	480d      	ldr	r0, [pc, #52]	@ (8001e0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001dd6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dd8:	f7ff fc9a 	bl	8001710 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ddc:	480c      	ldr	r0, [pc, #48]	@ (8001e10 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dde:	490d      	ldr	r1, [pc, #52]	@ (8001e14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001de0:	4a0d      	ldr	r2, [pc, #52]	@ (8001e18 <LoopForever+0xe>)
  movs r3, #0
 8001de2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001de4:	e002      	b.n	8001dec <LoopCopyDataInit>

08001de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dea:	3304      	adds	r3, #4

08001dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df0:	d3f9      	bcc.n	8001de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001df2:	4a0a      	ldr	r2, [pc, #40]	@ (8001e1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001df4:	4c0a      	ldr	r4, [pc, #40]	@ (8001e20 <LoopForever+0x16>)
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001df8:	e001      	b.n	8001dfe <LoopFillZerobss>

08001dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dfc:	3204      	adds	r2, #4

08001dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e00:	d3fb      	bcc.n	8001dfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e02:	f012 fd4d 	bl	80148a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e06:	f7ff f8cf 	bl	8000fa8 <main>

08001e0a <LoopForever>:

LoopForever:
    b LoopForever
 8001e0a:	e7fe      	b.n	8001e0a <LoopForever>
  ldr   r0, =_estack
 8001e0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e14:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001e18:	080161b8 	.word	0x080161b8
  ldr r2, =_sbss
 8001e1c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001e20:	2000ad34 	.word	0x2000ad34

08001e24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e24:	e7fe      	b.n	8001e24 <ADC1_2_IRQHandler>

08001e26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e30:	2003      	movs	r0, #3
 8001e32:	f000 f8dc 	bl	8001fee <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e36:	200f      	movs	r0, #15
 8001e38:	f7ff fac4 	bl	80013c4 <HAL_InitTick>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d002      	beq.n	8001e48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	71fb      	strb	r3, [r7, #7]
 8001e46:	e001      	b.n	8001e4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e48:	f7ff fa92 	bl	8001370 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e4c:	79fb      	ldrb	r3, [r7, #7]

}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e5c:	4b05      	ldr	r3, [pc, #20]	@ (8001e74 <HAL_IncTick+0x1c>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4b05      	ldr	r3, [pc, #20]	@ (8001e78 <HAL_IncTick+0x20>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4413      	add	r3, r2
 8001e66:	4a03      	ldr	r2, [pc, #12]	@ (8001e74 <HAL_IncTick+0x1c>)
 8001e68:	6013      	str	r3, [r2, #0]
}
 8001e6a:	bf00      	nop
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	20004804 	.word	0x20004804
 8001e78:	2000000c 	.word	0x2000000c

08001e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e80:	4b03      	ldr	r3, [pc, #12]	@ (8001e90 <HAL_GetTick+0x14>)
 8001e82:	681b      	ldr	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20004804 	.word	0x20004804

08001e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ebc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ec0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ec6:	4a04      	ldr	r2, [pc, #16]	@ (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	60d3      	str	r3, [r2, #12]
}
 8001ecc:	bf00      	nop
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee0:	4b04      	ldr	r3, [pc, #16]	@ (8001ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	f003 0307 	and.w	r3, r3, #7
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	db0b      	blt.n	8001f22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	f003 021f 	and.w	r2, r3, #31
 8001f10:	4907      	ldr	r1, [pc, #28]	@ (8001f30 <__NVIC_EnableIRQ+0x38>)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	095b      	lsrs	r3, r3, #5
 8001f18:	2001      	movs	r0, #1
 8001f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000e100 	.word	0xe000e100

08001f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	6039      	str	r1, [r7, #0]
 8001f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	db0a      	blt.n	8001f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	490c      	ldr	r1, [pc, #48]	@ (8001f80 <__NVIC_SetPriority+0x4c>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	0112      	lsls	r2, r2, #4
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	440b      	add	r3, r1
 8001f58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f5c:	e00a      	b.n	8001f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4908      	ldr	r1, [pc, #32]	@ (8001f84 <__NVIC_SetPriority+0x50>)
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	3b04      	subs	r3, #4
 8001f6c:	0112      	lsls	r2, r2, #4
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	440b      	add	r3, r1
 8001f72:	761a      	strb	r2, [r3, #24]
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000e100 	.word	0xe000e100
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b089      	sub	sp, #36	@ 0x24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f1c3 0307 	rsb	r3, r3, #7
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	bf28      	it	cs
 8001fa6:	2304      	movcs	r3, #4
 8001fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3304      	adds	r3, #4
 8001fae:	2b06      	cmp	r3, #6
 8001fb0:	d902      	bls.n	8001fb8 <NVIC_EncodePriority+0x30>
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3b03      	subs	r3, #3
 8001fb6:	e000      	b.n	8001fba <NVIC_EncodePriority+0x32>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43da      	mvns	r2, r3
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	401a      	ands	r2, r3
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fda:	43d9      	mvns	r1, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe0:	4313      	orrs	r3, r2
         );
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3724      	adds	r7, #36	@ 0x24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff ff4c 	bl	8001e94 <__NVIC_SetPriorityGrouping>
}
 8001ffc:	bf00      	nop
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
 8002010:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002012:	f7ff ff63 	bl	8001edc <__NVIC_GetPriorityGrouping>
 8002016:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	68b9      	ldr	r1, [r7, #8]
 800201c:	6978      	ldr	r0, [r7, #20]
 800201e:	f7ff ffb3 	bl	8001f88 <NVIC_EncodePriority>
 8002022:	4602      	mov	r2, r0
 8002024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002028:	4611      	mov	r1, r2
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff ff82 	bl	8001f34 <__NVIC_SetPriority>
}
 8002030:	bf00      	nop
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff ff56 	bl	8001ef8 <__NVIC_EnableIRQ>
}
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e08d      	b.n	8002182 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	4b47      	ldr	r3, [pc, #284]	@ (800218c <HAL_DMA_Init+0x138>)
 800206e:	429a      	cmp	r2, r3
 8002070:	d80f      	bhi.n	8002092 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	4b45      	ldr	r3, [pc, #276]	@ (8002190 <HAL_DMA_Init+0x13c>)
 800207a:	4413      	add	r3, r2
 800207c:	4a45      	ldr	r2, [pc, #276]	@ (8002194 <HAL_DMA_Init+0x140>)
 800207e:	fba2 2303 	umull	r2, r3, r2, r3
 8002082:	091b      	lsrs	r3, r3, #4
 8002084:	009a      	lsls	r2, r3, #2
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a42      	ldr	r2, [pc, #264]	@ (8002198 <HAL_DMA_Init+0x144>)
 800208e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002090:	e00e      	b.n	80020b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	461a      	mov	r2, r3
 8002098:	4b40      	ldr	r3, [pc, #256]	@ (800219c <HAL_DMA_Init+0x148>)
 800209a:	4413      	add	r3, r2
 800209c:	4a3d      	ldr	r2, [pc, #244]	@ (8002194 <HAL_DMA_Init+0x140>)
 800209e:	fba2 2303 	umull	r2, r3, r2, r3
 80020a2:	091b      	lsrs	r3, r3, #4
 80020a4:	009a      	lsls	r2, r3, #2
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a3c      	ldr	r2, [pc, #240]	@ (80021a0 <HAL_DMA_Init+0x14c>)
 80020ae:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2202      	movs	r2, #2
 80020b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80020c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80020d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 fa82 	bl	800260c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002110:	d102      	bne.n	8002118 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800212c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d010      	beq.n	8002158 <HAL_DMA_Init+0x104>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b04      	cmp	r3, #4
 800213c:	d80c      	bhi.n	8002158 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 faa2 	bl	8002688 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	e008      	b.n	800216a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40020407 	.word	0x40020407
 8002190:	bffdfff8 	.word	0xbffdfff8
 8002194:	cccccccd 	.word	0xcccccccd
 8002198:	40020000 	.word	0x40020000
 800219c:	bffdfbf8 	.word	0xbffdfbf8
 80021a0:	40020400 	.word	0x40020400

080021a4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
 80021b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021b2:	2300      	movs	r3, #0
 80021b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <HAL_DMA_Start_IT+0x20>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e066      	b.n	8002292 <HAL_DMA_Start_IT+0xee>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d155      	bne.n	8002284 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2202      	movs	r2, #2
 80021dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0201 	bic.w	r2, r2, #1
 80021f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	68b9      	ldr	r1, [r7, #8]
 80021fc:	68f8      	ldr	r0, [r7, #12]
 80021fe:	f000 f9c7 	bl	8002590 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	2b00      	cmp	r3, #0
 8002208:	d008      	beq.n	800221c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f042 020e 	orr.w	r2, r2, #14
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	e00f      	b.n	800223c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0204 	bic.w	r2, r2, #4
 800222a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 020a 	orr.w	r2, r2, #10
 800223a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d007      	beq.n	800225a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002254:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002258:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800225e:	2b00      	cmp	r3, #0
 8002260:	d007      	beq.n	8002272 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800226c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002270:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f042 0201 	orr.w	r2, r2, #1
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	e005      	b.n	8002290 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800228c:	2302      	movs	r3, #2
 800228e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002290:	7dfb      	ldrb	r3, [r7, #23]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800229a:	b480      	push	{r7}
 800229c:	b085      	sub	sp, #20
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d005      	beq.n	80022be <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2204      	movs	r2, #4
 80022b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	73fb      	strb	r3, [r7, #15]
 80022bc:	e037      	b.n	800232e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 020e 	bic.w	r2, r2, #14
 80022cc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022dc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0201 	bic.w	r2, r2, #1
 80022ec:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f2:	f003 021f 	and.w	r2, r3, #31
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	2101      	movs	r1, #1
 80022fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002300:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800230a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00c      	beq.n	800232e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800231e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002322:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800232c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800233e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002354:	2300      	movs	r3, #0
 8002356:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d00d      	beq.n	8002380 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2204      	movs	r2, #4
 8002368:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	73fb      	strb	r3, [r7, #15]
 800237e:	e047      	b.n	8002410 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 020e 	bic.w	r2, r2, #14
 800238e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0201 	bic.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b4:	f003 021f 	and.w	r2, r3, #31
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023bc:	2101      	movs	r1, #1
 80023be:	fa01 f202 	lsl.w	r2, r1, r2
 80023c2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80023cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00c      	beq.n	80023f0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80023ee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	4798      	blx	r3
    }
  }
  return status;
 8002410:	7bfb      	ldrb	r3, [r7, #15]
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b084      	sub	sp, #16
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002436:	f003 031f 	and.w	r3, r3, #31
 800243a:	2204      	movs	r2, #4
 800243c:	409a      	lsls	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4013      	ands	r3, r2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d026      	beq.n	8002494 <HAL_DMA_IRQHandler+0x7a>
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	d021      	beq.n	8002494 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0320 	and.w	r3, r3, #32
 800245a:	2b00      	cmp	r3, #0
 800245c:	d107      	bne.n	800246e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0204 	bic.w	r2, r2, #4
 800246c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002472:	f003 021f 	and.w	r2, r3, #31
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247a:	2104      	movs	r1, #4
 800247c:	fa01 f202 	lsl.w	r2, r1, r2
 8002480:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002486:	2b00      	cmp	r3, #0
 8002488:	d071      	beq.n	800256e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002492:	e06c      	b.n	800256e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	2202      	movs	r2, #2
 800249e:	409a      	lsls	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4013      	ands	r3, r2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d02e      	beq.n	8002506 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d029      	beq.n	8002506 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0320 	and.w	r3, r3, #32
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10b      	bne.n	80024d8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 020a 	bic.w	r2, r2, #10
 80024ce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024dc:	f003 021f 	and.w	r2, r3, #31
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e4:	2102      	movs	r1, #2
 80024e6:	fa01 f202 	lsl.w	r2, r1, r2
 80024ea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d038      	beq.n	800256e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002504:	e033      	b.n	800256e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250a:	f003 031f 	and.w	r3, r3, #31
 800250e:	2208      	movs	r2, #8
 8002510:	409a      	lsls	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4013      	ands	r3, r2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d02a      	beq.n	8002570 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	2b00      	cmp	r3, #0
 8002522:	d025      	beq.n	8002570 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 020e 	bic.w	r2, r2, #14
 8002532:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002538:	f003 021f 	and.w	r2, r3, #31
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002540:	2101      	movs	r1, #1
 8002542:	fa01 f202 	lsl.w	r2, r1, r2
 8002546:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002562:	2b00      	cmp	r3, #0
 8002564:	d004      	beq.n	8002570 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800256e:	bf00      	nop
 8002570:	bf00      	nop
}
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80025a6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d004      	beq.n	80025ba <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80025b8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025be:	f003 021f 	and.w	r2, r3, #31
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c6:	2101      	movs	r1, #1
 80025c8:	fa01 f202 	lsl.w	r2, r1, r2
 80025cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b10      	cmp	r3, #16
 80025dc:	d108      	bne.n	80025f0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80025ee:	e007      	b.n	8002600 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68ba      	ldr	r2, [r7, #8]
 80025f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	60da      	str	r2, [r3, #12]
}
 8002600:	bf00      	nop
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800260c:	b480      	push	{r7}
 800260e:	b087      	sub	sp, #28
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	461a      	mov	r2, r3
 800261a:	4b16      	ldr	r3, [pc, #88]	@ (8002674 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800261c:	429a      	cmp	r2, r3
 800261e:	d802      	bhi.n	8002626 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002620:	4b15      	ldr	r3, [pc, #84]	@ (8002678 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	e001      	b.n	800262a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002626:	4b15      	ldr	r3, [pc, #84]	@ (800267c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002628:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	3b08      	subs	r3, #8
 8002636:	4a12      	ldr	r2, [pc, #72]	@ (8002680 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002638:	fba2 2303 	umull	r2, r3, r2, r3
 800263c:	091b      	lsrs	r3, r3, #4
 800263e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002644:	089b      	lsrs	r3, r3, #2
 8002646:	009a      	lsls	r2, r3, #2
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4413      	add	r3, r2
 800264c:	461a      	mov	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a0b      	ldr	r2, [pc, #44]	@ (8002684 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002656:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f003 031f 	and.w	r3, r3, #31
 800265e:	2201      	movs	r2, #1
 8002660:	409a      	lsls	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002666:	bf00      	nop
 8002668:	371c      	adds	r7, #28
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	40020407 	.word	0x40020407
 8002678:	40020800 	.word	0x40020800
 800267c:	40020820 	.word	0x40020820
 8002680:	cccccccd 	.word	0xcccccccd
 8002684:	40020880 	.word	0x40020880

08002688 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	4b0b      	ldr	r3, [pc, #44]	@ (80026c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800269c:	4413      	add	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	461a      	mov	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a08      	ldr	r2, [pc, #32]	@ (80026cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80026aa:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	f003 031f 	and.w	r3, r3, #31
 80026b4:	2201      	movs	r2, #1
 80026b6:	409a      	lsls	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80026bc:	bf00      	nop
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	1000823f 	.word	0x1000823f
 80026cc:	40020940 	.word	0x40020940

080026d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026de:	e15a      	b.n	8002996 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	2101      	movs	r1, #1
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ec:	4013      	ands	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 814c 	beq.w	8002990 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	2b01      	cmp	r3, #1
 8002702:	d005      	beq.n	8002710 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800270c:	2b02      	cmp	r3, #2
 800270e:	d130      	bne.n	8002772 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	2203      	movs	r2, #3
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002746:	2201      	movs	r2, #1
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43db      	mvns	r3, r3
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	4013      	ands	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	091b      	lsrs	r3, r3, #4
 800275c:	f003 0201 	and.w	r2, r3, #1
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4313      	orrs	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	2b03      	cmp	r3, #3
 800277c:	d017      	beq.n	80027ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	2203      	movs	r2, #3
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43db      	mvns	r3, r3
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4013      	ands	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d123      	bne.n	8002802 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	08da      	lsrs	r2, r3, #3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	3208      	adds	r2, #8
 80027c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	220f      	movs	r2, #15
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	4013      	ands	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	691a      	ldr	r2, [r3, #16]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	08da      	lsrs	r2, r3, #3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3208      	adds	r2, #8
 80027fc:	6939      	ldr	r1, [r7, #16]
 80027fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	2203      	movs	r2, #3
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43db      	mvns	r3, r3
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	4013      	ands	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f003 0203 	and.w	r2, r3, #3
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 80a6 	beq.w	8002990 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002844:	4b5b      	ldr	r3, [pc, #364]	@ (80029b4 <HAL_GPIO_Init+0x2e4>)
 8002846:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002848:	4a5a      	ldr	r2, [pc, #360]	@ (80029b4 <HAL_GPIO_Init+0x2e4>)
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002850:	4b58      	ldr	r3, [pc, #352]	@ (80029b4 <HAL_GPIO_Init+0x2e4>)
 8002852:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800285c:	4a56      	ldr	r2, [pc, #344]	@ (80029b8 <HAL_GPIO_Init+0x2e8>)
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	089b      	lsrs	r3, r3, #2
 8002862:	3302      	adds	r3, #2
 8002864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002868:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f003 0303 	and.w	r3, r3, #3
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	220f      	movs	r2, #15
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4013      	ands	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002886:	d01f      	beq.n	80028c8 <HAL_GPIO_Init+0x1f8>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a4c      	ldr	r2, [pc, #304]	@ (80029bc <HAL_GPIO_Init+0x2ec>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d019      	beq.n	80028c4 <HAL_GPIO_Init+0x1f4>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a4b      	ldr	r2, [pc, #300]	@ (80029c0 <HAL_GPIO_Init+0x2f0>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d013      	beq.n	80028c0 <HAL_GPIO_Init+0x1f0>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a4a      	ldr	r2, [pc, #296]	@ (80029c4 <HAL_GPIO_Init+0x2f4>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d00d      	beq.n	80028bc <HAL_GPIO_Init+0x1ec>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a49      	ldr	r2, [pc, #292]	@ (80029c8 <HAL_GPIO_Init+0x2f8>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d007      	beq.n	80028b8 <HAL_GPIO_Init+0x1e8>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a48      	ldr	r2, [pc, #288]	@ (80029cc <HAL_GPIO_Init+0x2fc>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d101      	bne.n	80028b4 <HAL_GPIO_Init+0x1e4>
 80028b0:	2305      	movs	r3, #5
 80028b2:	e00a      	b.n	80028ca <HAL_GPIO_Init+0x1fa>
 80028b4:	2306      	movs	r3, #6
 80028b6:	e008      	b.n	80028ca <HAL_GPIO_Init+0x1fa>
 80028b8:	2304      	movs	r3, #4
 80028ba:	e006      	b.n	80028ca <HAL_GPIO_Init+0x1fa>
 80028bc:	2303      	movs	r3, #3
 80028be:	e004      	b.n	80028ca <HAL_GPIO_Init+0x1fa>
 80028c0:	2302      	movs	r3, #2
 80028c2:	e002      	b.n	80028ca <HAL_GPIO_Init+0x1fa>
 80028c4:	2301      	movs	r3, #1
 80028c6:	e000      	b.n	80028ca <HAL_GPIO_Init+0x1fa>
 80028c8:	2300      	movs	r3, #0
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	f002 0203 	and.w	r2, r2, #3
 80028d0:	0092      	lsls	r2, r2, #2
 80028d2:	4093      	lsls	r3, r2
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028da:	4937      	ldr	r1, [pc, #220]	@ (80029b8 <HAL_GPIO_Init+0x2e8>)
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	089b      	lsrs	r3, r3, #2
 80028e0:	3302      	adds	r3, #2
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028e8:	4b39      	ldr	r3, [pc, #228]	@ (80029d0 <HAL_GPIO_Init+0x300>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	43db      	mvns	r3, r3
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	4013      	ands	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d003      	beq.n	800290c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4313      	orrs	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800290c:	4a30      	ldr	r2, [pc, #192]	@ (80029d0 <HAL_GPIO_Init+0x300>)
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002912:	4b2f      	ldr	r3, [pc, #188]	@ (80029d0 <HAL_GPIO_Init+0x300>)
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	43db      	mvns	r3, r3
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	4013      	ands	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4313      	orrs	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002936:	4a26      	ldr	r2, [pc, #152]	@ (80029d0 <HAL_GPIO_Init+0x300>)
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800293c:	4b24      	ldr	r3, [pc, #144]	@ (80029d0 <HAL_GPIO_Init+0x300>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	43db      	mvns	r3, r3
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4013      	ands	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d003      	beq.n	8002960 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	4313      	orrs	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002960:	4a1b      	ldr	r2, [pc, #108]	@ (80029d0 <HAL_GPIO_Init+0x300>)
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002966:	4b1a      	ldr	r3, [pc, #104]	@ (80029d0 <HAL_GPIO_Init+0x300>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	43db      	mvns	r3, r3
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4013      	ands	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800298a:	4a11      	ldr	r2, [pc, #68]	@ (80029d0 <HAL_GPIO_Init+0x300>)
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	3301      	adds	r3, #1
 8002994:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	fa22 f303 	lsr.w	r3, r2, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f47f ae9d 	bne.w	80026e0 <HAL_GPIO_Init+0x10>
  }
}
 80029a6:	bf00      	nop
 80029a8:	bf00      	nop
 80029aa:	371c      	adds	r7, #28
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40010000 	.word	0x40010000
 80029bc:	48000400 	.word	0x48000400
 80029c0:	48000800 	.word	0x48000800
 80029c4:	48000c00 	.word	0x48000c00
 80029c8:	48001000 	.word	0x48001000
 80029cc:	48001400 	.word	0x48001400
 80029d0:	40010400 	.word	0x40010400

080029d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	807b      	strh	r3, [r7, #2]
 80029e0:	4613      	mov	r3, r2
 80029e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029e4:	787b      	ldrb	r3, [r7, #1]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029ea:	887a      	ldrh	r2, [r7, #2]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029f0:	e002      	b.n	80029f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029f2:	887a      	ldrh	r2, [r7, #2]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a0e:	4b08      	ldr	r3, [pc, #32]	@ (8002a30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a10:	695a      	ldr	r2, [r3, #20]
 8002a12:	88fb      	ldrh	r3, [r7, #6]
 8002a14:	4013      	ands	r3, r2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d006      	beq.n	8002a28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a1a:	4a05      	ldr	r2, [pc, #20]	@ (8002a30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a1c:	88fb      	ldrh	r3, [r7, #6]
 8002a1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a20:	88fb      	ldrh	r3, [r7, #6]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 f806 	bl	8002a34 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a28:	bf00      	nop
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40010400 	.word	0x40010400

08002a34 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e041      	b.n	8002ae0 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8002a64:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f245 5255 	movw	r2, #21845	@ 0x5555
 8002a6e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6852      	ldr	r2, [r2, #4]
 8002a78:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6892      	ldr	r2, [r2, #8]
 8002a82:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002a84:	f7ff f9fa 	bl	8001e7c <HAL_GetTick>
 8002a88:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002a8a:	e00f      	b.n	8002aac <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002a8c:	f7ff f9f6 	bl	8001e7c <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b31      	cmp	r3, #49	@ 0x31
 8002a98:	d908      	bls.n	8002aac <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e019      	b.n	8002ae0 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1e8      	bne.n	8002a8c <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d005      	beq.n	8002ad4 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	68d2      	ldr	r2, [r2, #12]
 8002ad0:	611a      	str	r2, [r3, #16]
 8002ad2:	e004      	b.n	8002ade <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8002adc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d141      	bne.n	8002b7a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002af6:	4b4b      	ldr	r3, [pc, #300]	@ (8002c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002afe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b02:	d131      	bne.n	8002b68 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b04:	4b47      	ldr	r3, [pc, #284]	@ (8002c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b0a:	4a46      	ldr	r2, [pc, #280]	@ (8002c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b10:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b14:	4b43      	ldr	r3, [pc, #268]	@ (8002c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b1c:	4a41      	ldr	r2, [pc, #260]	@ (8002c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b24:	4b40      	ldr	r3, [pc, #256]	@ (8002c28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2232      	movs	r2, #50	@ 0x32
 8002b2a:	fb02 f303 	mul.w	r3, r2, r3
 8002b2e:	4a3f      	ldr	r2, [pc, #252]	@ (8002c2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b30:	fba2 2303 	umull	r2, r3, r2, r3
 8002b34:	0c9b      	lsrs	r3, r3, #18
 8002b36:	3301      	adds	r3, #1
 8002b38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b3a:	e002      	b.n	8002b42 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b42:	4b38      	ldr	r3, [pc, #224]	@ (8002c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b4e:	d102      	bne.n	8002b56 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f2      	bne.n	8002b3c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b56:	4b33      	ldr	r3, [pc, #204]	@ (8002c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b62:	d158      	bne.n	8002c16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e057      	b.n	8002c18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b68:	4b2e      	ldr	r3, [pc, #184]	@ (8002c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b6e:	4a2d      	ldr	r2, [pc, #180]	@ (8002c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002b78:	e04d      	b.n	8002c16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b80:	d141      	bne.n	8002c06 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b82:	4b28      	ldr	r3, [pc, #160]	@ (8002c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b8e:	d131      	bne.n	8002bf4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b90:	4b24      	ldr	r3, [pc, #144]	@ (8002c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b96:	4a23      	ldr	r2, [pc, #140]	@ (8002c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b9c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ba0:	4b20      	ldr	r3, [pc, #128]	@ (8002c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ba8:	4a1e      	ldr	r2, [pc, #120]	@ (8002c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002baa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2232      	movs	r2, #50	@ 0x32
 8002bb6:	fb02 f303 	mul.w	r3, r2, r3
 8002bba:	4a1c      	ldr	r2, [pc, #112]	@ (8002c2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc0:	0c9b      	lsrs	r3, r3, #18
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bc6:	e002      	b.n	8002bce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bce:	4b15      	ldr	r3, [pc, #84]	@ (8002c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bda:	d102      	bne.n	8002be2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f2      	bne.n	8002bc8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002be2:	4b10      	ldr	r3, [pc, #64]	@ (8002c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bee:	d112      	bne.n	8002c16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e011      	b.n	8002c18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8002c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002c04:	e007      	b.n	8002c16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c06:	4b07      	ldr	r3, [pc, #28]	@ (8002c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c0e:	4a05      	ldr	r2, [pc, #20]	@ (8002c24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c10:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c14:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	40007000 	.word	0x40007000
 8002c28:	20000004 	.word	0x20000004
 8002c2c:	431bde83 	.word	0x431bde83

08002c30 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002c34:	4b05      	ldr	r3, [pc, #20]	@ (8002c4c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	4a04      	ldr	r2, [pc, #16]	@ (8002c4c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c3e:	6093      	str	r3, [r2, #8]
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40007000 	.word	0x40007000

08002c50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e2fe      	b.n	8003260 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d075      	beq.n	8002d5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c6e:	4b97      	ldr	r3, [pc, #604]	@ (8002ecc <HAL_RCC_OscConfig+0x27c>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 030c 	and.w	r3, r3, #12
 8002c76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c78:	4b94      	ldr	r3, [pc, #592]	@ (8002ecc <HAL_RCC_OscConfig+0x27c>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f003 0303 	and.w	r3, r3, #3
 8002c80:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	2b0c      	cmp	r3, #12
 8002c86:	d102      	bne.n	8002c8e <HAL_RCC_OscConfig+0x3e>
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	2b03      	cmp	r3, #3
 8002c8c:	d002      	beq.n	8002c94 <HAL_RCC_OscConfig+0x44>
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	2b08      	cmp	r3, #8
 8002c92:	d10b      	bne.n	8002cac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c94:	4b8d      	ldr	r3, [pc, #564]	@ (8002ecc <HAL_RCC_OscConfig+0x27c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d05b      	beq.n	8002d58 <HAL_RCC_OscConfig+0x108>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d157      	bne.n	8002d58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e2d9      	b.n	8003260 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cb4:	d106      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x74>
 8002cb6:	4b85      	ldr	r3, [pc, #532]	@ (8002ecc <HAL_RCC_OscConfig+0x27c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a84      	ldr	r2, [pc, #528]	@ (8002ecc <HAL_RCC_OscConfig+0x27c>)
 8002cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	e01d      	b.n	8002d00 <HAL_RCC_OscConfig+0xb0>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ccc:	d10c      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x98>
 8002cce:	4b7f      	ldr	r3, [pc, #508]	@ (8002ecc <HAL_RCC_OscConfig+0x27c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a7e      	ldr	r2, [pc, #504]	@ (8002ecc <HAL_RCC_OscConfig+0x27c>)
 8002cd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	4b7c      	ldr	r3, [pc, #496]	@ (8002ecc <HAL_RCC_OscConfig+0x27c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a7b      	ldr	r2, [pc, #492]	@ (8002ecc <HAL_RCC_OscConfig+0x27c>)
 8002ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	e00b      	b.n	8002d00 <HAL_RCC_OscConfig+0xb0>
 8002ce8:	4b78      	ldr	r3, [pc, #480]	@ (8002ecc <HAL_RCC_OscConfig+0x27c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a77      	ldr	r2, [pc, #476]	@ (8002ecc <HAL_RCC_OscConfig+0x27c>)
 8002cee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cf2:	6013      	str	r3, [r2, #0]
 8002cf4:	4b75      	ldr	r3, [pc, #468]	@ (8002ecc <HAL_RCC_OscConfig+0x27c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a74      	ldr	r2, [pc, #464]	@ (8002ecc <HAL_RCC_OscConfig+0x27c>)
 8002cfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d013      	beq.n	8002d30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d08:	f7ff f8b8 	bl	8001e7c <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d10:	f7ff f8b4 	bl	8001e7c <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b64      	cmp	r3, #100	@ 0x64
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e29e      	b.n	8003260 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d22:	4b6a      	ldr	r3, [pc, #424]	@ (8002ecc <HAL_RCC_OscConfig+0x27c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0f0      	beq.n	8002d10 <HAL_RCC_OscConfig+0xc0>
 8002d2e:	e014      	b.n	8002d5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d30:	f7ff f8a4 	bl	8001e7c <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d38:	f7ff f8a0 	bl	8001e7c <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b64      	cmp	r3, #100	@ 0x64
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e28a      	b.n	8003260 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d4a:	4b60      	ldr	r3, [pc, #384]	@ (8002ecc <HAL_RCC_OscConfig+0x27c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0xe8>
 8002d56:	e000      	b.n	8002d5a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d075      	beq.n	8002e52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d66:	4b59      	ldr	r3, [pc, #356]	@ (8002ecc <HAL_RCC_OscConfig+0x27c>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
 8002d6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d70:	4b56      	ldr	r3, [pc, #344]	@ (8002ecc <HAL_RCC_OscConfig+0x27c>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	2b0c      	cmp	r3, #12
 8002d7e:	d102      	bne.n	8002d86 <HAL_RCC_OscConfig+0x136>
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d002      	beq.n	8002d8c <HAL_RCC_OscConfig+0x13c>
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d11f      	bne.n	8002dcc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d8c:	4b4f      	ldr	r3, [pc, #316]	@ (8002ecc <HAL_RCC_OscConfig+0x27c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_RCC_OscConfig+0x154>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e25d      	b.n	8003260 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da4:	4b49      	ldr	r3, [pc, #292]	@ (8002ecc <HAL_RCC_OscConfig+0x27c>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	061b      	lsls	r3, r3, #24
 8002db2:	4946      	ldr	r1, [pc, #280]	@ (8002ecc <HAL_RCC_OscConfig+0x27c>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002db8:	4b45      	ldr	r3, [pc, #276]	@ (8002ed0 <HAL_RCC_OscConfig+0x280>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fe fb01 	bl	80013c4 <HAL_InitTick>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d043      	beq.n	8002e50 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e249      	b.n	8003260 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d023      	beq.n	8002e1c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dd4:	4b3d      	ldr	r3, [pc, #244]	@ (8002ecc <HAL_RCC_OscConfig+0x27c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a3c      	ldr	r2, [pc, #240]	@ (8002ecc <HAL_RCC_OscConfig+0x27c>)
 8002dda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de0:	f7ff f84c 	bl	8001e7c <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de8:	f7ff f848 	bl	8001e7c <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e232      	b.n	8003260 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dfa:	4b34      	ldr	r3, [pc, #208]	@ (8002ecc <HAL_RCC_OscConfig+0x27c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0f0      	beq.n	8002de8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e06:	4b31      	ldr	r3, [pc, #196]	@ (8002ecc <HAL_RCC_OscConfig+0x27c>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	061b      	lsls	r3, r3, #24
 8002e14:	492d      	ldr	r1, [pc, #180]	@ (8002ecc <HAL_RCC_OscConfig+0x27c>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	604b      	str	r3, [r1, #4]
 8002e1a:	e01a      	b.n	8002e52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002ecc <HAL_RCC_OscConfig+0x27c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a2a      	ldr	r2, [pc, #168]	@ (8002ecc <HAL_RCC_OscConfig+0x27c>)
 8002e22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e28:	f7ff f828 	bl	8001e7c <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e30:	f7ff f824 	bl	8001e7c <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e20e      	b.n	8003260 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e42:	4b22      	ldr	r3, [pc, #136]	@ (8002ecc <HAL_RCC_OscConfig+0x27c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0x1e0>
 8002e4e:	e000      	b.n	8002e52 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e50:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d041      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d01c      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e66:	4b19      	ldr	r3, [pc, #100]	@ (8002ecc <HAL_RCC_OscConfig+0x27c>)
 8002e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e6c:	4a17      	ldr	r2, [pc, #92]	@ (8002ecc <HAL_RCC_OscConfig+0x27c>)
 8002e6e:	f043 0301 	orr.w	r3, r3, #1
 8002e72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e76:	f7ff f801 	bl	8001e7c <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e7e:	f7fe fffd 	bl	8001e7c <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e1e7      	b.n	8003260 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e90:	4b0e      	ldr	r3, [pc, #56]	@ (8002ecc <HAL_RCC_OscConfig+0x27c>)
 8002e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0ef      	beq.n	8002e7e <HAL_RCC_OscConfig+0x22e>
 8002e9e:	e020      	b.n	8002ee2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8002ecc <HAL_RCC_OscConfig+0x27c>)
 8002ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ea6:	4a09      	ldr	r2, [pc, #36]	@ (8002ecc <HAL_RCC_OscConfig+0x27c>)
 8002ea8:	f023 0301 	bic.w	r3, r3, #1
 8002eac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb0:	f7fe ffe4 	bl	8001e7c <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002eb6:	e00d      	b.n	8002ed4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eb8:	f7fe ffe0 	bl	8001e7c <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d906      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e1ca      	b.n	8003260 <HAL_RCC_OscConfig+0x610>
 8002eca:	bf00      	nop
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ed4:	4b8c      	ldr	r3, [pc, #560]	@ (8003108 <HAL_RCC_OscConfig+0x4b8>)
 8002ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1ea      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 80a6 	beq.w	800303c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ef4:	4b84      	ldr	r3, [pc, #528]	@ (8003108 <HAL_RCC_OscConfig+0x4b8>)
 8002ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_RCC_OscConfig+0x2b4>
 8002f00:	2301      	movs	r3, #1
 8002f02:	e000      	b.n	8002f06 <HAL_RCC_OscConfig+0x2b6>
 8002f04:	2300      	movs	r3, #0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00d      	beq.n	8002f26 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f0a:	4b7f      	ldr	r3, [pc, #508]	@ (8003108 <HAL_RCC_OscConfig+0x4b8>)
 8002f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f0e:	4a7e      	ldr	r2, [pc, #504]	@ (8003108 <HAL_RCC_OscConfig+0x4b8>)
 8002f10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f14:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f16:	4b7c      	ldr	r3, [pc, #496]	@ (8003108 <HAL_RCC_OscConfig+0x4b8>)
 8002f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f22:	2301      	movs	r3, #1
 8002f24:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f26:	4b79      	ldr	r3, [pc, #484]	@ (800310c <HAL_RCC_OscConfig+0x4bc>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d118      	bne.n	8002f64 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f32:	4b76      	ldr	r3, [pc, #472]	@ (800310c <HAL_RCC_OscConfig+0x4bc>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a75      	ldr	r2, [pc, #468]	@ (800310c <HAL_RCC_OscConfig+0x4bc>)
 8002f38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f3e:	f7fe ff9d 	bl	8001e7c <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f46:	f7fe ff99 	bl	8001e7c <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e183      	b.n	8003260 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f58:	4b6c      	ldr	r3, [pc, #432]	@ (800310c <HAL_RCC_OscConfig+0x4bc>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0f0      	beq.n	8002f46 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d108      	bne.n	8002f7e <HAL_RCC_OscConfig+0x32e>
 8002f6c:	4b66      	ldr	r3, [pc, #408]	@ (8003108 <HAL_RCC_OscConfig+0x4b8>)
 8002f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f72:	4a65      	ldr	r2, [pc, #404]	@ (8003108 <HAL_RCC_OscConfig+0x4b8>)
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f7c:	e024      	b.n	8002fc8 <HAL_RCC_OscConfig+0x378>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b05      	cmp	r3, #5
 8002f84:	d110      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x358>
 8002f86:	4b60      	ldr	r3, [pc, #384]	@ (8003108 <HAL_RCC_OscConfig+0x4b8>)
 8002f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f8c:	4a5e      	ldr	r2, [pc, #376]	@ (8003108 <HAL_RCC_OscConfig+0x4b8>)
 8002f8e:	f043 0304 	orr.w	r3, r3, #4
 8002f92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f96:	4b5c      	ldr	r3, [pc, #368]	@ (8003108 <HAL_RCC_OscConfig+0x4b8>)
 8002f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f9c:	4a5a      	ldr	r2, [pc, #360]	@ (8003108 <HAL_RCC_OscConfig+0x4b8>)
 8002f9e:	f043 0301 	orr.w	r3, r3, #1
 8002fa2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fa6:	e00f      	b.n	8002fc8 <HAL_RCC_OscConfig+0x378>
 8002fa8:	4b57      	ldr	r3, [pc, #348]	@ (8003108 <HAL_RCC_OscConfig+0x4b8>)
 8002faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fae:	4a56      	ldr	r2, [pc, #344]	@ (8003108 <HAL_RCC_OscConfig+0x4b8>)
 8002fb0:	f023 0301 	bic.w	r3, r3, #1
 8002fb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fb8:	4b53      	ldr	r3, [pc, #332]	@ (8003108 <HAL_RCC_OscConfig+0x4b8>)
 8002fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fbe:	4a52      	ldr	r2, [pc, #328]	@ (8003108 <HAL_RCC_OscConfig+0x4b8>)
 8002fc0:	f023 0304 	bic.w	r3, r3, #4
 8002fc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d016      	beq.n	8002ffe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd0:	f7fe ff54 	bl	8001e7c <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fd6:	e00a      	b.n	8002fee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd8:	f7fe ff50 	bl	8001e7c <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e138      	b.n	8003260 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fee:	4b46      	ldr	r3, [pc, #280]	@ (8003108 <HAL_RCC_OscConfig+0x4b8>)
 8002ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0ed      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x388>
 8002ffc:	e015      	b.n	800302a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffe:	f7fe ff3d 	bl	8001e7c <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003004:	e00a      	b.n	800301c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003006:	f7fe ff39 	bl	8001e7c <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003014:	4293      	cmp	r3, r2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e121      	b.n	8003260 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800301c:	4b3a      	ldr	r3, [pc, #232]	@ (8003108 <HAL_RCC_OscConfig+0x4b8>)
 800301e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1ed      	bne.n	8003006 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800302a:	7ffb      	ldrb	r3, [r7, #31]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d105      	bne.n	800303c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003030:	4b35      	ldr	r3, [pc, #212]	@ (8003108 <HAL_RCC_OscConfig+0x4b8>)
 8003032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003034:	4a34      	ldr	r2, [pc, #208]	@ (8003108 <HAL_RCC_OscConfig+0x4b8>)
 8003036:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800303a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0320 	and.w	r3, r3, #32
 8003044:	2b00      	cmp	r3, #0
 8003046:	d03c      	beq.n	80030c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d01c      	beq.n	800308a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003050:	4b2d      	ldr	r3, [pc, #180]	@ (8003108 <HAL_RCC_OscConfig+0x4b8>)
 8003052:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003056:	4a2c      	ldr	r2, [pc, #176]	@ (8003108 <HAL_RCC_OscConfig+0x4b8>)
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003060:	f7fe ff0c 	bl	8001e7c <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003068:	f7fe ff08 	bl	8001e7c <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e0f2      	b.n	8003260 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800307a:	4b23      	ldr	r3, [pc, #140]	@ (8003108 <HAL_RCC_OscConfig+0x4b8>)
 800307c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0ef      	beq.n	8003068 <HAL_RCC_OscConfig+0x418>
 8003088:	e01b      	b.n	80030c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800308a:	4b1f      	ldr	r3, [pc, #124]	@ (8003108 <HAL_RCC_OscConfig+0x4b8>)
 800308c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003090:	4a1d      	ldr	r2, [pc, #116]	@ (8003108 <HAL_RCC_OscConfig+0x4b8>)
 8003092:	f023 0301 	bic.w	r3, r3, #1
 8003096:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309a:	f7fe feef 	bl	8001e7c <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030a2:	f7fe feeb 	bl	8001e7c <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e0d5      	b.n	8003260 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030b4:	4b14      	ldr	r3, [pc, #80]	@ (8003108 <HAL_RCC_OscConfig+0x4b8>)
 80030b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1ef      	bne.n	80030a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 80c9 	beq.w	800325e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003108 <HAL_RCC_OscConfig+0x4b8>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 030c 	and.w	r3, r3, #12
 80030d4:	2b0c      	cmp	r3, #12
 80030d6:	f000 8083 	beq.w	80031e0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d15e      	bne.n	80031a0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e2:	4b09      	ldr	r3, [pc, #36]	@ (8003108 <HAL_RCC_OscConfig+0x4b8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a08      	ldr	r2, [pc, #32]	@ (8003108 <HAL_RCC_OscConfig+0x4b8>)
 80030e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ee:	f7fe fec5 	bl	8001e7c <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f4:	e00c      	b.n	8003110 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f6:	f7fe fec1 	bl	8001e7c <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d905      	bls.n	8003110 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e0ab      	b.n	8003260 <HAL_RCC_OscConfig+0x610>
 8003108:	40021000 	.word	0x40021000
 800310c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003110:	4b55      	ldr	r3, [pc, #340]	@ (8003268 <HAL_RCC_OscConfig+0x618>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1ec      	bne.n	80030f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800311c:	4b52      	ldr	r3, [pc, #328]	@ (8003268 <HAL_RCC_OscConfig+0x618>)
 800311e:	68da      	ldr	r2, [r3, #12]
 8003120:	4b52      	ldr	r3, [pc, #328]	@ (800326c <HAL_RCC_OscConfig+0x61c>)
 8003122:	4013      	ands	r3, r2
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6a11      	ldr	r1, [r2, #32]
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800312c:	3a01      	subs	r2, #1
 800312e:	0112      	lsls	r2, r2, #4
 8003130:	4311      	orrs	r1, r2
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003136:	0212      	lsls	r2, r2, #8
 8003138:	4311      	orrs	r1, r2
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800313e:	0852      	lsrs	r2, r2, #1
 8003140:	3a01      	subs	r2, #1
 8003142:	0552      	lsls	r2, r2, #21
 8003144:	4311      	orrs	r1, r2
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800314a:	0852      	lsrs	r2, r2, #1
 800314c:	3a01      	subs	r2, #1
 800314e:	0652      	lsls	r2, r2, #25
 8003150:	4311      	orrs	r1, r2
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003156:	06d2      	lsls	r2, r2, #27
 8003158:	430a      	orrs	r2, r1
 800315a:	4943      	ldr	r1, [pc, #268]	@ (8003268 <HAL_RCC_OscConfig+0x618>)
 800315c:	4313      	orrs	r3, r2
 800315e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003160:	4b41      	ldr	r3, [pc, #260]	@ (8003268 <HAL_RCC_OscConfig+0x618>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a40      	ldr	r2, [pc, #256]	@ (8003268 <HAL_RCC_OscConfig+0x618>)
 8003166:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800316a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800316c:	4b3e      	ldr	r3, [pc, #248]	@ (8003268 <HAL_RCC_OscConfig+0x618>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	4a3d      	ldr	r2, [pc, #244]	@ (8003268 <HAL_RCC_OscConfig+0x618>)
 8003172:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003176:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003178:	f7fe fe80 	bl	8001e7c <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003180:	f7fe fe7c 	bl	8001e7c <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e066      	b.n	8003260 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003192:	4b35      	ldr	r3, [pc, #212]	@ (8003268 <HAL_RCC_OscConfig+0x618>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0f0      	beq.n	8003180 <HAL_RCC_OscConfig+0x530>
 800319e:	e05e      	b.n	800325e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a0:	4b31      	ldr	r3, [pc, #196]	@ (8003268 <HAL_RCC_OscConfig+0x618>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a30      	ldr	r2, [pc, #192]	@ (8003268 <HAL_RCC_OscConfig+0x618>)
 80031a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ac:	f7fe fe66 	bl	8001e7c <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b4:	f7fe fe62 	bl	8001e7c <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e04c      	b.n	8003260 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031c6:	4b28      	ldr	r3, [pc, #160]	@ (8003268 <HAL_RCC_OscConfig+0x618>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80031d2:	4b25      	ldr	r3, [pc, #148]	@ (8003268 <HAL_RCC_OscConfig+0x618>)
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	4924      	ldr	r1, [pc, #144]	@ (8003268 <HAL_RCC_OscConfig+0x618>)
 80031d8:	4b25      	ldr	r3, [pc, #148]	@ (8003270 <HAL_RCC_OscConfig+0x620>)
 80031da:	4013      	ands	r3, r2
 80031dc:	60cb      	str	r3, [r1, #12]
 80031de:	e03e      	b.n	800325e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e039      	b.n	8003260 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80031ec:	4b1e      	ldr	r3, [pc, #120]	@ (8003268 <HAL_RCC_OscConfig+0x618>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f003 0203 	and.w	r2, r3, #3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d12c      	bne.n	800325a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320a:	3b01      	subs	r3, #1
 800320c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320e:	429a      	cmp	r2, r3
 8003210:	d123      	bne.n	800325a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800321c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800321e:	429a      	cmp	r2, r3
 8003220:	d11b      	bne.n	800325a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800322e:	429a      	cmp	r2, r3
 8003230:	d113      	bne.n	800325a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323c:	085b      	lsrs	r3, r3, #1
 800323e:	3b01      	subs	r3, #1
 8003240:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003242:	429a      	cmp	r2, r3
 8003244:	d109      	bne.n	800325a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003250:	085b      	lsrs	r3, r3, #1
 8003252:	3b01      	subs	r3, #1
 8003254:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003256:	429a      	cmp	r2, r3
 8003258:	d001      	beq.n	800325e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3720      	adds	r7, #32
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40021000 	.word	0x40021000
 800326c:	019f800c 	.word	0x019f800c
 8003270:	feeefffc 	.word	0xfeeefffc

08003274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800327e:	2300      	movs	r3, #0
 8003280:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e11e      	b.n	80034ca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800328c:	4b91      	ldr	r3, [pc, #580]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 030f 	and.w	r3, r3, #15
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d910      	bls.n	80032bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329a:	4b8e      	ldr	r3, [pc, #568]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f023 020f 	bic.w	r2, r3, #15
 80032a2:	498c      	ldr	r1, [pc, #560]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032aa:	4b8a      	ldr	r3, [pc, #552]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d001      	beq.n	80032bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e106      	b.n	80034ca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d073      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b03      	cmp	r3, #3
 80032ce:	d129      	bne.n	8003324 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032d0:	4b81      	ldr	r3, [pc, #516]	@ (80034d8 <HAL_RCC_ClockConfig+0x264>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e0f4      	b.n	80034ca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80032e0:	f000 f9d0 	bl	8003684 <RCC_GetSysClockFreqFromPLLSource>
 80032e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	4a7c      	ldr	r2, [pc, #496]	@ (80034dc <HAL_RCC_ClockConfig+0x268>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d93f      	bls.n	800336e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80032ee:	4b7a      	ldr	r3, [pc, #488]	@ (80034d8 <HAL_RCC_ClockConfig+0x264>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003302:	2b00      	cmp	r3, #0
 8003304:	d033      	beq.n	800336e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800330a:	2b00      	cmp	r3, #0
 800330c:	d12f      	bne.n	800336e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800330e:	4b72      	ldr	r3, [pc, #456]	@ (80034d8 <HAL_RCC_ClockConfig+0x264>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003316:	4a70      	ldr	r2, [pc, #448]	@ (80034d8 <HAL_RCC_ClockConfig+0x264>)
 8003318:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800331c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800331e:	2380      	movs	r3, #128	@ 0x80
 8003320:	617b      	str	r3, [r7, #20]
 8003322:	e024      	b.n	800336e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b02      	cmp	r3, #2
 800332a:	d107      	bne.n	800333c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800332c:	4b6a      	ldr	r3, [pc, #424]	@ (80034d8 <HAL_RCC_ClockConfig+0x264>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d109      	bne.n	800334c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e0c6      	b.n	80034ca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800333c:	4b66      	ldr	r3, [pc, #408]	@ (80034d8 <HAL_RCC_ClockConfig+0x264>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e0be      	b.n	80034ca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800334c:	f000 f8ce 	bl	80034ec <HAL_RCC_GetSysClockFreq>
 8003350:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	4a61      	ldr	r2, [pc, #388]	@ (80034dc <HAL_RCC_ClockConfig+0x268>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d909      	bls.n	800336e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800335a:	4b5f      	ldr	r3, [pc, #380]	@ (80034d8 <HAL_RCC_ClockConfig+0x264>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003362:	4a5d      	ldr	r2, [pc, #372]	@ (80034d8 <HAL_RCC_ClockConfig+0x264>)
 8003364:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003368:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800336a:	2380      	movs	r3, #128	@ 0x80
 800336c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800336e:	4b5a      	ldr	r3, [pc, #360]	@ (80034d8 <HAL_RCC_ClockConfig+0x264>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f023 0203 	bic.w	r2, r3, #3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	4957      	ldr	r1, [pc, #348]	@ (80034d8 <HAL_RCC_ClockConfig+0x264>)
 800337c:	4313      	orrs	r3, r2
 800337e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003380:	f7fe fd7c 	bl	8001e7c <HAL_GetTick>
 8003384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003386:	e00a      	b.n	800339e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003388:	f7fe fd78 	bl	8001e7c <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003396:	4293      	cmp	r3, r2
 8003398:	d901      	bls.n	800339e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e095      	b.n	80034ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339e:	4b4e      	ldr	r3, [pc, #312]	@ (80034d8 <HAL_RCC_ClockConfig+0x264>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 020c 	and.w	r2, r3, #12
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d1eb      	bne.n	8003388 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d023      	beq.n	8003404 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d005      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033c8:	4b43      	ldr	r3, [pc, #268]	@ (80034d8 <HAL_RCC_ClockConfig+0x264>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	4a42      	ldr	r2, [pc, #264]	@ (80034d8 <HAL_RCC_ClockConfig+0x264>)
 80033ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80033d2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0308 	and.w	r3, r3, #8
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d007      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80033e0:	4b3d      	ldr	r3, [pc, #244]	@ (80034d8 <HAL_RCC_ClockConfig+0x264>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80033e8:	4a3b      	ldr	r2, [pc, #236]	@ (80034d8 <HAL_RCC_ClockConfig+0x264>)
 80033ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80033ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033f0:	4b39      	ldr	r3, [pc, #228]	@ (80034d8 <HAL_RCC_ClockConfig+0x264>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	4936      	ldr	r1, [pc, #216]	@ (80034d8 <HAL_RCC_ClockConfig+0x264>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	608b      	str	r3, [r1, #8]
 8003402:	e008      	b.n	8003416 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	2b80      	cmp	r3, #128	@ 0x80
 8003408:	d105      	bne.n	8003416 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800340a:	4b33      	ldr	r3, [pc, #204]	@ (80034d8 <HAL_RCC_ClockConfig+0x264>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	4a32      	ldr	r2, [pc, #200]	@ (80034d8 <HAL_RCC_ClockConfig+0x264>)
 8003410:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003414:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003416:	4b2f      	ldr	r3, [pc, #188]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d21d      	bcs.n	8003460 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003424:	4b2b      	ldr	r3, [pc, #172]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f023 020f 	bic.w	r2, r3, #15
 800342c:	4929      	ldr	r1, [pc, #164]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	4313      	orrs	r3, r2
 8003432:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003434:	f7fe fd22 	bl	8001e7c <HAL_GetTick>
 8003438:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800343a:	e00a      	b.n	8003452 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800343c:	f7fe fd1e 	bl	8001e7c <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800344a:	4293      	cmp	r3, r2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e03b      	b.n	80034ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003452:	4b20      	ldr	r3, [pc, #128]	@ (80034d4 <HAL_RCC_ClockConfig+0x260>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	429a      	cmp	r2, r3
 800345e:	d1ed      	bne.n	800343c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d008      	beq.n	800347e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800346c:	4b1a      	ldr	r3, [pc, #104]	@ (80034d8 <HAL_RCC_ClockConfig+0x264>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	4917      	ldr	r1, [pc, #92]	@ (80034d8 <HAL_RCC_ClockConfig+0x264>)
 800347a:	4313      	orrs	r3, r2
 800347c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d009      	beq.n	800349e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800348a:	4b13      	ldr	r3, [pc, #76]	@ (80034d8 <HAL_RCC_ClockConfig+0x264>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	490f      	ldr	r1, [pc, #60]	@ (80034d8 <HAL_RCC_ClockConfig+0x264>)
 800349a:	4313      	orrs	r3, r2
 800349c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800349e:	f000 f825 	bl	80034ec <HAL_RCC_GetSysClockFreq>
 80034a2:	4602      	mov	r2, r0
 80034a4:	4b0c      	ldr	r3, [pc, #48]	@ (80034d8 <HAL_RCC_ClockConfig+0x264>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	091b      	lsrs	r3, r3, #4
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	490c      	ldr	r1, [pc, #48]	@ (80034e0 <HAL_RCC_ClockConfig+0x26c>)
 80034b0:	5ccb      	ldrb	r3, [r1, r3]
 80034b2:	f003 031f 	and.w	r3, r3, #31
 80034b6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ba:	4a0a      	ldr	r2, [pc, #40]	@ (80034e4 <HAL_RCC_ClockConfig+0x270>)
 80034bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80034be:	4b0a      	ldr	r3, [pc, #40]	@ (80034e8 <HAL_RCC_ClockConfig+0x274>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fd ff7e 	bl	80013c4 <HAL_InitTick>
 80034c8:	4603      	mov	r3, r0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40022000 	.word	0x40022000
 80034d8:	40021000 	.word	0x40021000
 80034dc:	04c4b400 	.word	0x04c4b400
 80034e0:	08015754 	.word	0x08015754
 80034e4:	20000004 	.word	0x20000004
 80034e8:	20000008 	.word	0x20000008

080034ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80034f2:	4b2c      	ldr	r3, [pc, #176]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d102      	bne.n	8003504 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034fe:	4b2a      	ldr	r3, [pc, #168]	@ (80035a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003500:	613b      	str	r3, [r7, #16]
 8003502:	e047      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003504:	4b27      	ldr	r3, [pc, #156]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 030c 	and.w	r3, r3, #12
 800350c:	2b08      	cmp	r3, #8
 800350e:	d102      	bne.n	8003516 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003510:	4b26      	ldr	r3, [pc, #152]	@ (80035ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	e03e      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003516:	4b23      	ldr	r3, [pc, #140]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
 800351e:	2b0c      	cmp	r3, #12
 8003520:	d136      	bne.n	8003590 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003522:	4b20      	ldr	r3, [pc, #128]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800352c:	4b1d      	ldr	r3, [pc, #116]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	091b      	lsrs	r3, r3, #4
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	3301      	adds	r3, #1
 8003538:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2b03      	cmp	r3, #3
 800353e:	d10c      	bne.n	800355a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003540:	4a1a      	ldr	r2, [pc, #104]	@ (80035ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	fbb2 f3f3 	udiv	r3, r2, r3
 8003548:	4a16      	ldr	r2, [pc, #88]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800354a:	68d2      	ldr	r2, [r2, #12]
 800354c:	0a12      	lsrs	r2, r2, #8
 800354e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003552:	fb02 f303 	mul.w	r3, r2, r3
 8003556:	617b      	str	r3, [r7, #20]
      break;
 8003558:	e00c      	b.n	8003574 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800355a:	4a13      	ldr	r2, [pc, #76]	@ (80035a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003562:	4a10      	ldr	r2, [pc, #64]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003564:	68d2      	ldr	r2, [r2, #12]
 8003566:	0a12      	lsrs	r2, r2, #8
 8003568:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800356c:	fb02 f303 	mul.w	r3, r2, r3
 8003570:	617b      	str	r3, [r7, #20]
      break;
 8003572:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003574:	4b0b      	ldr	r3, [pc, #44]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	0e5b      	lsrs	r3, r3, #25
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	3301      	adds	r3, #1
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	fbb2 f3f3 	udiv	r3, r2, r3
 800358c:	613b      	str	r3, [r7, #16]
 800358e:	e001      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003594:	693b      	ldr	r3, [r7, #16]
}
 8003596:	4618      	mov	r0, r3
 8003598:	371c      	adds	r7, #28
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40021000 	.word	0x40021000
 80035a8:	00f42400 	.word	0x00f42400
 80035ac:	016e3600 	.word	0x016e3600

080035b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035b4:	4b03      	ldr	r3, [pc, #12]	@ (80035c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80035b6:	681b      	ldr	r3, [r3, #0]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	20000004 	.word	0x20000004

080035c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80035cc:	f7ff fff0 	bl	80035b0 <HAL_RCC_GetHCLKFreq>
 80035d0:	4602      	mov	r2, r0
 80035d2:	4b06      	ldr	r3, [pc, #24]	@ (80035ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	0a1b      	lsrs	r3, r3, #8
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	4904      	ldr	r1, [pc, #16]	@ (80035f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035de:	5ccb      	ldrb	r3, [r1, r3]
 80035e0:	f003 031f 	and.w	r3, r3, #31
 80035e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40021000 	.word	0x40021000
 80035f0:	08015764 	.word	0x08015764

080035f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035f8:	f7ff ffda 	bl	80035b0 <HAL_RCC_GetHCLKFreq>
 80035fc:	4602      	mov	r2, r0
 80035fe:	4b06      	ldr	r3, [pc, #24]	@ (8003618 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	0adb      	lsrs	r3, r3, #11
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	4904      	ldr	r1, [pc, #16]	@ (800361c <HAL_RCC_GetPCLK2Freq+0x28>)
 800360a:	5ccb      	ldrb	r3, [r1, r3]
 800360c:	f003 031f 	and.w	r3, r3, #31
 8003610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003614:	4618      	mov	r0, r3
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40021000 	.word	0x40021000
 800361c:	08015764 	.word	0x08015764

08003620 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	220f      	movs	r2, #15
 800362e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003630:	4b12      	ldr	r3, [pc, #72]	@ (800367c <HAL_RCC_GetClockConfig+0x5c>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f003 0203 	and.w	r2, r3, #3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800363c:	4b0f      	ldr	r3, [pc, #60]	@ (800367c <HAL_RCC_GetClockConfig+0x5c>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003648:	4b0c      	ldr	r3, [pc, #48]	@ (800367c <HAL_RCC_GetClockConfig+0x5c>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003654:	4b09      	ldr	r3, [pc, #36]	@ (800367c <HAL_RCC_GetClockConfig+0x5c>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	08db      	lsrs	r3, r3, #3
 800365a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003662:	4b07      	ldr	r3, [pc, #28]	@ (8003680 <HAL_RCC_GetClockConfig+0x60>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 020f 	and.w	r2, r3, #15
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	601a      	str	r2, [r3, #0]
}
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40021000 	.word	0x40021000
 8003680:	40022000 	.word	0x40022000

08003684 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800368a:	4b1e      	ldr	r3, [pc, #120]	@ (8003704 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003694:	4b1b      	ldr	r3, [pc, #108]	@ (8003704 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	3301      	adds	r3, #1
 80036a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	d10c      	bne.n	80036c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036a8:	4a17      	ldr	r2, [pc, #92]	@ (8003708 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b0:	4a14      	ldr	r2, [pc, #80]	@ (8003704 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036b2:	68d2      	ldr	r2, [r2, #12]
 80036b4:	0a12      	lsrs	r2, r2, #8
 80036b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036ba:	fb02 f303 	mul.w	r3, r2, r3
 80036be:	617b      	str	r3, [r7, #20]
    break;
 80036c0:	e00c      	b.n	80036dc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036c2:	4a12      	ldr	r2, [pc, #72]	@ (800370c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ca:	4a0e      	ldr	r2, [pc, #56]	@ (8003704 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036cc:	68d2      	ldr	r2, [r2, #12]
 80036ce:	0a12      	lsrs	r2, r2, #8
 80036d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036d4:	fb02 f303 	mul.w	r3, r2, r3
 80036d8:	617b      	str	r3, [r7, #20]
    break;
 80036da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036dc:	4b09      	ldr	r3, [pc, #36]	@ (8003704 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	0e5b      	lsrs	r3, r3, #25
 80036e2:	f003 0303 	and.w	r3, r3, #3
 80036e6:	3301      	adds	r3, #1
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80036f6:	687b      	ldr	r3, [r7, #4]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	371c      	adds	r7, #28
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	40021000 	.word	0x40021000
 8003708:	016e3600 	.word	0x016e3600
 800370c:	00f42400 	.word	0x00f42400

08003710 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003718:	2300      	movs	r3, #0
 800371a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800371c:	2300      	movs	r3, #0
 800371e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 8098 	beq.w	800385e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800372e:	2300      	movs	r3, #0
 8003730:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003732:	4b43      	ldr	r3, [pc, #268]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10d      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800373e:	4b40      	ldr	r3, [pc, #256]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003742:	4a3f      	ldr	r2, [pc, #252]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003748:	6593      	str	r3, [r2, #88]	@ 0x58
 800374a:	4b3d      	ldr	r3, [pc, #244]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800374c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800374e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003752:	60bb      	str	r3, [r7, #8]
 8003754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003756:	2301      	movs	r3, #1
 8003758:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800375a:	4b3a      	ldr	r3, [pc, #232]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a39      	ldr	r2, [pc, #228]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003764:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003766:	f7fe fb89 	bl	8001e7c <HAL_GetTick>
 800376a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800376c:	e009      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800376e:	f7fe fb85 	bl	8001e7c <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d902      	bls.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	74fb      	strb	r3, [r7, #19]
        break;
 8003780:	e005      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003782:	4b30      	ldr	r3, [pc, #192]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0ef      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800378e:	7cfb      	ldrb	r3, [r7, #19]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d159      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003794:	4b2a      	ldr	r3, [pc, #168]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800379a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800379e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d01e      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d019      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037b0:	4b23      	ldr	r3, [pc, #140]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037bc:	4b20      	ldr	r3, [pc, #128]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037c2:	4a1f      	ldr	r2, [pc, #124]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037cc:	4b1c      	ldr	r3, [pc, #112]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d2:	4a1b      	ldr	r2, [pc, #108]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037dc:	4a18      	ldr	r2, [pc, #96]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d016      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ee:	f7fe fb45 	bl	8001e7c <HAL_GetTick>
 80037f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037f4:	e00b      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f6:	f7fe fb41 	bl	8001e7c <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003804:	4293      	cmp	r3, r2
 8003806:	d902      	bls.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	74fb      	strb	r3, [r7, #19]
            break;
 800380c:	e006      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800380e:	4b0c      	ldr	r3, [pc, #48]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0ec      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800381c:	7cfb      	ldrb	r3, [r7, #19]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10b      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003822:	4b07      	ldr	r3, [pc, #28]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003828:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003830:	4903      	ldr	r1, [pc, #12]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003838:	e008      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800383a:	7cfb      	ldrb	r3, [r7, #19]
 800383c:	74bb      	strb	r3, [r7, #18]
 800383e:	e005      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003840:	40021000 	.word	0x40021000
 8003844:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003848:	7cfb      	ldrb	r3, [r7, #19]
 800384a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800384c:	7c7b      	ldrb	r3, [r7, #17]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d105      	bne.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003852:	4ba7      	ldr	r3, [pc, #668]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003856:	4aa6      	ldr	r2, [pc, #664]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003858:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800385c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800386a:	4ba1      	ldr	r3, [pc, #644]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800386c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003870:	f023 0203 	bic.w	r2, r3, #3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	499d      	ldr	r1, [pc, #628]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800387a:	4313      	orrs	r3, r2
 800387c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800388c:	4b98      	ldr	r3, [pc, #608]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800388e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003892:	f023 020c 	bic.w	r2, r3, #12
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	4995      	ldr	r1, [pc, #596]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038ae:	4b90      	ldr	r3, [pc, #576]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038b4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	498c      	ldr	r1, [pc, #560]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0308 	and.w	r3, r3, #8
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038d0:	4b87      	ldr	r3, [pc, #540]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	4984      	ldr	r1, [pc, #528]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0310 	and.w	r3, r3, #16
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038f2:	4b7f      	ldr	r3, [pc, #508]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	497b      	ldr	r1, [pc, #492]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0320 	and.w	r3, r3, #32
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003914:	4b76      	ldr	r3, [pc, #472]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800391a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	4973      	ldr	r1, [pc, #460]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003924:	4313      	orrs	r3, r2
 8003926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003936:	4b6e      	ldr	r3, [pc, #440]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800393c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	496a      	ldr	r1, [pc, #424]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003946:	4313      	orrs	r3, r2
 8003948:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003958:	4b65      	ldr	r3, [pc, #404]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800395a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800395e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	4962      	ldr	r1, [pc, #392]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003968:	4313      	orrs	r3, r2
 800396a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800397a:	4b5d      	ldr	r3, [pc, #372]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800397c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003980:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003988:	4959      	ldr	r1, [pc, #356]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800399c:	4b54      	ldr	r3, [pc, #336]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800399e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039a2:	f023 0203 	bic.w	r2, r3, #3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039aa:	4951      	ldr	r1, [pc, #324]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039be:	4b4c      	ldr	r3, [pc, #304]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039cc:	4948      	ldr	r1, [pc, #288]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d015      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039e0:	4b43      	ldr	r3, [pc, #268]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ee:	4940      	ldr	r1, [pc, #256]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039fe:	d105      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a00:	4b3b      	ldr	r3, [pc, #236]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	4a3a      	ldr	r2, [pc, #232]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a0a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d015      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a18:	4b35      	ldr	r3, [pc, #212]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a1e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a26:	4932      	ldr	r1, [pc, #200]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a36:	d105      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a38:	4b2d      	ldr	r3, [pc, #180]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	4a2c      	ldr	r2, [pc, #176]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a42:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d015      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a50:	4b27      	ldr	r3, [pc, #156]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a56:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a5e:	4924      	ldr	r1, [pc, #144]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a6e:	d105      	bne.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a70:	4b1f      	ldr	r3, [pc, #124]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	4a1e      	ldr	r2, [pc, #120]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a7a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d015      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a88:	4b19      	ldr	r3, [pc, #100]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a96:	4916      	ldr	r1, [pc, #88]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003aa6:	d105      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aa8:	4b11      	ldr	r3, [pc, #68]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	4a10      	ldr	r2, [pc, #64]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ab2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d019      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ac6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ace:	4908      	ldr	r1, [pc, #32]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ada:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ade:	d109      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ae0:	4b03      	ldr	r3, [pc, #12]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	4a02      	ldr	r2, [pc, #8]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003aea:	60d3      	str	r3, [r2, #12]
 8003aec:	e002      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003aee:	bf00      	nop
 8003af0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d015      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b00:	4b29      	ldr	r3, [pc, #164]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b06:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0e:	4926      	ldr	r1, [pc, #152]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b1e:	d105      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b20:	4b21      	ldr	r3, [pc, #132]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	4a20      	ldr	r2, [pc, #128]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b2a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d015      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003b38:	4b1b      	ldr	r3, [pc, #108]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b3e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b46:	4918      	ldr	r1, [pc, #96]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b56:	d105      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b58:	4b13      	ldr	r3, [pc, #76]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	4a12      	ldr	r2, [pc, #72]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b62:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d015      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b70:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b7e:	490a      	ldr	r1, [pc, #40]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b8e:	d105      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b90:	4b05      	ldr	r3, [pc, #20]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4a04      	ldr	r2, [pc, #16]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b9a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003b9c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	40021000 	.word	0x40021000

08003bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e049      	b.n	8003c52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d106      	bne.n	8003bd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7fd fe62 	bl	800189c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3304      	adds	r3, #4
 8003be8:	4619      	mov	r1, r3
 8003bea:	4610      	mov	r0, r2
 8003bec:	f000 fca6 	bl	800453c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
	...

08003c5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d001      	beq.n	8003c74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e054      	b.n	8003d1e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 0201 	orr.w	r2, r2, #1
 8003c8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a26      	ldr	r2, [pc, #152]	@ (8003d2c <HAL_TIM_Base_Start_IT+0xd0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d022      	beq.n	8003cdc <HAL_TIM_Base_Start_IT+0x80>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c9e:	d01d      	beq.n	8003cdc <HAL_TIM_Base_Start_IT+0x80>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a22      	ldr	r2, [pc, #136]	@ (8003d30 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d018      	beq.n	8003cdc <HAL_TIM_Base_Start_IT+0x80>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a21      	ldr	r2, [pc, #132]	@ (8003d34 <HAL_TIM_Base_Start_IT+0xd8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d013      	beq.n	8003cdc <HAL_TIM_Base_Start_IT+0x80>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a1f      	ldr	r2, [pc, #124]	@ (8003d38 <HAL_TIM_Base_Start_IT+0xdc>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00e      	beq.n	8003cdc <HAL_TIM_Base_Start_IT+0x80>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8003d3c <HAL_TIM_Base_Start_IT+0xe0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d009      	beq.n	8003cdc <HAL_TIM_Base_Start_IT+0x80>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a1c      	ldr	r2, [pc, #112]	@ (8003d40 <HAL_TIM_Base_Start_IT+0xe4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d004      	beq.n	8003cdc <HAL_TIM_Base_Start_IT+0x80>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a1b      	ldr	r2, [pc, #108]	@ (8003d44 <HAL_TIM_Base_Start_IT+0xe8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d115      	bne.n	8003d08 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	4b19      	ldr	r3, [pc, #100]	@ (8003d48 <HAL_TIM_Base_Start_IT+0xec>)
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2b06      	cmp	r3, #6
 8003cec:	d015      	beq.n	8003d1a <HAL_TIM_Base_Start_IT+0xbe>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cf4:	d011      	beq.n	8003d1a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f042 0201 	orr.w	r2, r2, #1
 8003d04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d06:	e008      	b.n	8003d1a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0201 	orr.w	r2, r2, #1
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	e000      	b.n	8003d1c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	40012c00 	.word	0x40012c00
 8003d30:	40000400 	.word	0x40000400
 8003d34:	40000800 	.word	0x40000800
 8003d38:	40000c00 	.word	0x40000c00
 8003d3c:	40013400 	.word	0x40013400
 8003d40:	40014000 	.word	0x40014000
 8003d44:	40015000 	.word	0x40015000
 8003d48:	00010007 	.word	0x00010007

08003d4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e049      	b.n	8003df2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d106      	bne.n	8003d78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7fd fdb6 	bl	80018e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3304      	adds	r3, #4
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	f000 fbd6 	bl	800453c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b084      	sub	sp, #16
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d020      	beq.n	8003e5e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d01b      	beq.n	8003e5e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f06f 0202 	mvn.w	r2, #2
 8003e2e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	f003 0303 	and.w	r3, r3, #3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 fb5b 	bl	8004500 <HAL_TIM_IC_CaptureCallback>
 8003e4a:	e005      	b.n	8003e58 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 fb4d 	bl	80044ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fb5e 	bl	8004514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d020      	beq.n	8003eaa <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d01b      	beq.n	8003eaa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f06f 0204 	mvn.w	r2, #4
 8003e7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 fb35 	bl	8004500 <HAL_TIM_IC_CaptureCallback>
 8003e96:	e005      	b.n	8003ea4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 fb27 	bl	80044ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fb38 	bl	8004514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f003 0308 	and.w	r3, r3, #8
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d020      	beq.n	8003ef6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f003 0308 	and.w	r3, r3, #8
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d01b      	beq.n	8003ef6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f06f 0208 	mvn.w	r2, #8
 8003ec6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2204      	movs	r2, #4
 8003ecc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	f003 0303 	and.w	r3, r3, #3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 fb0f 	bl	8004500 <HAL_TIM_IC_CaptureCallback>
 8003ee2:	e005      	b.n	8003ef0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 fb01 	bl	80044ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 fb12 	bl	8004514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	f003 0310 	and.w	r3, r3, #16
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d020      	beq.n	8003f42 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f003 0310 	and.w	r3, r3, #16
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d01b      	beq.n	8003f42 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f06f 0210 	mvn.w	r2, #16
 8003f12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2208      	movs	r2, #8
 8003f18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 fae9 	bl	8004500 <HAL_TIM_IC_CaptureCallback>
 8003f2e:	e005      	b.n	8003f3c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 fadb 	bl	80044ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 faec 	bl	8004514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00c      	beq.n	8003f66 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d007      	beq.n	8003f66 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f06f 0201 	mvn.w	r2, #1
 8003f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7fd f889 	bl	8001078 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d104      	bne.n	8003f7a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00c      	beq.n	8003f94 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d007      	beq.n	8003f94 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 ffee 	bl	8004f70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00c      	beq.n	8003fb8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d007      	beq.n	8003fb8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 ffe6 	bl	8004f84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00c      	beq.n	8003fdc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d007      	beq.n	8003fdc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 faa6 	bl	8004528 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	f003 0320 	and.w	r3, r3, #32
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00c      	beq.n	8004000 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f003 0320 	and.w	r3, r3, #32
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d007      	beq.n	8004000 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f06f 0220 	mvn.w	r2, #32
 8003ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 ffae 	bl	8004f5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00c      	beq.n	8004024 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d007      	beq.n	8004024 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800401c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 ffba 	bl	8004f98 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00c      	beq.n	8004048 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d007      	beq.n	8004048 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 ffb2 	bl	8004fac <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00c      	beq.n	800406c <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d007      	beq.n	800406c <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 ffaa 	bl	8004fc0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00c      	beq.n	8004090 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d007      	beq.n	8004090 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 ffa2 	bl	8004fd4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004090:	bf00      	nop
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d101      	bne.n	80040b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040b2:	2302      	movs	r3, #2
 80040b4:	e0ff      	b.n	80042b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b14      	cmp	r3, #20
 80040c2:	f200 80f0 	bhi.w	80042a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80040c6:	a201      	add	r2, pc, #4	@ (adr r2, 80040cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040cc:	08004121 	.word	0x08004121
 80040d0:	080042a7 	.word	0x080042a7
 80040d4:	080042a7 	.word	0x080042a7
 80040d8:	080042a7 	.word	0x080042a7
 80040dc:	08004161 	.word	0x08004161
 80040e0:	080042a7 	.word	0x080042a7
 80040e4:	080042a7 	.word	0x080042a7
 80040e8:	080042a7 	.word	0x080042a7
 80040ec:	080041a3 	.word	0x080041a3
 80040f0:	080042a7 	.word	0x080042a7
 80040f4:	080042a7 	.word	0x080042a7
 80040f8:	080042a7 	.word	0x080042a7
 80040fc:	080041e3 	.word	0x080041e3
 8004100:	080042a7 	.word	0x080042a7
 8004104:	080042a7 	.word	0x080042a7
 8004108:	080042a7 	.word	0x080042a7
 800410c:	08004225 	.word	0x08004225
 8004110:	080042a7 	.word	0x080042a7
 8004114:	080042a7 	.word	0x080042a7
 8004118:	080042a7 	.word	0x080042a7
 800411c:	08004265 	.word	0x08004265
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68b9      	ldr	r1, [r7, #8]
 8004126:	4618      	mov	r0, r3
 8004128:	f000 fabc 	bl	80046a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	699a      	ldr	r2, [r3, #24]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 0208 	orr.w	r2, r2, #8
 800413a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	699a      	ldr	r2, [r3, #24]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 0204 	bic.w	r2, r2, #4
 800414a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6999      	ldr	r1, [r3, #24]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	691a      	ldr	r2, [r3, #16]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	619a      	str	r2, [r3, #24]
      break;
 800415e:	e0a5      	b.n	80042ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68b9      	ldr	r1, [r7, #8]
 8004166:	4618      	mov	r0, r3
 8004168:	f000 fb36 	bl	80047d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	699a      	ldr	r2, [r3, #24]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800417a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699a      	ldr	r2, [r3, #24]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800418a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6999      	ldr	r1, [r3, #24]
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	021a      	lsls	r2, r3, #8
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	619a      	str	r2, [r3, #24]
      break;
 80041a0:	e084      	b.n	80042ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68b9      	ldr	r1, [r7, #8]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f000 fba9 	bl	8004900 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	69da      	ldr	r2, [r3, #28]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f042 0208 	orr.w	r2, r2, #8
 80041bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69da      	ldr	r2, [r3, #28]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0204 	bic.w	r2, r2, #4
 80041cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	69d9      	ldr	r1, [r3, #28]
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	691a      	ldr	r2, [r3, #16]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	61da      	str	r2, [r3, #28]
      break;
 80041e0:	e064      	b.n	80042ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68b9      	ldr	r1, [r7, #8]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 fc1b 	bl	8004a24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	69da      	ldr	r2, [r3, #28]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	69da      	ldr	r2, [r3, #28]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800420c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69d9      	ldr	r1, [r3, #28]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	021a      	lsls	r2, r3, #8
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	61da      	str	r2, [r3, #28]
      break;
 8004222:	e043      	b.n	80042ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68b9      	ldr	r1, [r7, #8]
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fc8e 	bl	8004b4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 0208 	orr.w	r2, r2, #8
 800423e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0204 	bic.w	r2, r2, #4
 800424e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	691a      	ldr	r2, [r3, #16]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004262:	e023      	b.n	80042ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68b9      	ldr	r1, [r7, #8]
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fcd8 	bl	8004c20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800427e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800428e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	021a      	lsls	r2, r3, #8
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80042a4:	e002      	b.n	80042ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	75fb      	strb	r3, [r7, #23]
      break;
 80042aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop

080042c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d101      	bne.n	80042dc <HAL_TIM_ConfigClockSource+0x1c>
 80042d8:	2302      	movs	r3, #2
 80042da:	e0f6      	b.n	80044ca <HAL_TIM_ConfigClockSource+0x20a>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80042fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80042fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004306:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a6f      	ldr	r2, [pc, #444]	@ (80044d4 <HAL_TIM_ConfigClockSource+0x214>)
 8004316:	4293      	cmp	r3, r2
 8004318:	f000 80c1 	beq.w	800449e <HAL_TIM_ConfigClockSource+0x1de>
 800431c:	4a6d      	ldr	r2, [pc, #436]	@ (80044d4 <HAL_TIM_ConfigClockSource+0x214>)
 800431e:	4293      	cmp	r3, r2
 8004320:	f200 80c6 	bhi.w	80044b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004324:	4a6c      	ldr	r2, [pc, #432]	@ (80044d8 <HAL_TIM_ConfigClockSource+0x218>)
 8004326:	4293      	cmp	r3, r2
 8004328:	f000 80b9 	beq.w	800449e <HAL_TIM_ConfigClockSource+0x1de>
 800432c:	4a6a      	ldr	r2, [pc, #424]	@ (80044d8 <HAL_TIM_ConfigClockSource+0x218>)
 800432e:	4293      	cmp	r3, r2
 8004330:	f200 80be 	bhi.w	80044b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004334:	4a69      	ldr	r2, [pc, #420]	@ (80044dc <HAL_TIM_ConfigClockSource+0x21c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	f000 80b1 	beq.w	800449e <HAL_TIM_ConfigClockSource+0x1de>
 800433c:	4a67      	ldr	r2, [pc, #412]	@ (80044dc <HAL_TIM_ConfigClockSource+0x21c>)
 800433e:	4293      	cmp	r3, r2
 8004340:	f200 80b6 	bhi.w	80044b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004344:	4a66      	ldr	r2, [pc, #408]	@ (80044e0 <HAL_TIM_ConfigClockSource+0x220>)
 8004346:	4293      	cmp	r3, r2
 8004348:	f000 80a9 	beq.w	800449e <HAL_TIM_ConfigClockSource+0x1de>
 800434c:	4a64      	ldr	r2, [pc, #400]	@ (80044e0 <HAL_TIM_ConfigClockSource+0x220>)
 800434e:	4293      	cmp	r3, r2
 8004350:	f200 80ae 	bhi.w	80044b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004354:	4a63      	ldr	r2, [pc, #396]	@ (80044e4 <HAL_TIM_ConfigClockSource+0x224>)
 8004356:	4293      	cmp	r3, r2
 8004358:	f000 80a1 	beq.w	800449e <HAL_TIM_ConfigClockSource+0x1de>
 800435c:	4a61      	ldr	r2, [pc, #388]	@ (80044e4 <HAL_TIM_ConfigClockSource+0x224>)
 800435e:	4293      	cmp	r3, r2
 8004360:	f200 80a6 	bhi.w	80044b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004364:	4a60      	ldr	r2, [pc, #384]	@ (80044e8 <HAL_TIM_ConfigClockSource+0x228>)
 8004366:	4293      	cmp	r3, r2
 8004368:	f000 8099 	beq.w	800449e <HAL_TIM_ConfigClockSource+0x1de>
 800436c:	4a5e      	ldr	r2, [pc, #376]	@ (80044e8 <HAL_TIM_ConfigClockSource+0x228>)
 800436e:	4293      	cmp	r3, r2
 8004370:	f200 809e 	bhi.w	80044b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004374:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004378:	f000 8091 	beq.w	800449e <HAL_TIM_ConfigClockSource+0x1de>
 800437c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004380:	f200 8096 	bhi.w	80044b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004384:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004388:	f000 8089 	beq.w	800449e <HAL_TIM_ConfigClockSource+0x1de>
 800438c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004390:	f200 808e 	bhi.w	80044b0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004394:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004398:	d03e      	beq.n	8004418 <HAL_TIM_ConfigClockSource+0x158>
 800439a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800439e:	f200 8087 	bhi.w	80044b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80043a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043a6:	f000 8086 	beq.w	80044b6 <HAL_TIM_ConfigClockSource+0x1f6>
 80043aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043ae:	d87f      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80043b0:	2b70      	cmp	r3, #112	@ 0x70
 80043b2:	d01a      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0x12a>
 80043b4:	2b70      	cmp	r3, #112	@ 0x70
 80043b6:	d87b      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80043b8:	2b60      	cmp	r3, #96	@ 0x60
 80043ba:	d050      	beq.n	800445e <HAL_TIM_ConfigClockSource+0x19e>
 80043bc:	2b60      	cmp	r3, #96	@ 0x60
 80043be:	d877      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80043c0:	2b50      	cmp	r3, #80	@ 0x50
 80043c2:	d03c      	beq.n	800443e <HAL_TIM_ConfigClockSource+0x17e>
 80043c4:	2b50      	cmp	r3, #80	@ 0x50
 80043c6:	d873      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80043c8:	2b40      	cmp	r3, #64	@ 0x40
 80043ca:	d058      	beq.n	800447e <HAL_TIM_ConfigClockSource+0x1be>
 80043cc:	2b40      	cmp	r3, #64	@ 0x40
 80043ce:	d86f      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80043d0:	2b30      	cmp	r3, #48	@ 0x30
 80043d2:	d064      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x1de>
 80043d4:	2b30      	cmp	r3, #48	@ 0x30
 80043d6:	d86b      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80043d8:	2b20      	cmp	r3, #32
 80043da:	d060      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x1de>
 80043dc:	2b20      	cmp	r3, #32
 80043de:	d867      	bhi.n	80044b0 <HAL_TIM_ConfigClockSource+0x1f0>
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d05c      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x1de>
 80043e4:	2b10      	cmp	r3, #16
 80043e6:	d05a      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x1de>
 80043e8:	e062      	b.n	80044b0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043fa:	f000 fcf9 	bl	8004df0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800440c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	609a      	str	r2, [r3, #8]
      break;
 8004416:	e04f      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004428:	f000 fce2 	bl	8004df0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800443a:	609a      	str	r2, [r3, #8]
      break;
 800443c:	e03c      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800444a:	461a      	mov	r2, r3
 800444c:	f000 fc54 	bl	8004cf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2150      	movs	r1, #80	@ 0x50
 8004456:	4618      	mov	r0, r3
 8004458:	f000 fcad 	bl	8004db6 <TIM_ITRx_SetConfig>
      break;
 800445c:	e02c      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800446a:	461a      	mov	r2, r3
 800446c:	f000 fc73 	bl	8004d56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2160      	movs	r1, #96	@ 0x60
 8004476:	4618      	mov	r0, r3
 8004478:	f000 fc9d 	bl	8004db6 <TIM_ITRx_SetConfig>
      break;
 800447c:	e01c      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800448a:	461a      	mov	r2, r3
 800448c:	f000 fc34 	bl	8004cf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2140      	movs	r1, #64	@ 0x40
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fc8d 	bl	8004db6 <TIM_ITRx_SetConfig>
      break;
 800449c:	e00c      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4619      	mov	r1, r3
 80044a8:	4610      	mov	r0, r2
 80044aa:	f000 fc84 	bl	8004db6 <TIM_ITRx_SetConfig>
      break;
 80044ae:	e003      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	73fb      	strb	r3, [r7, #15]
      break;
 80044b4:	e000      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80044b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	00100070 	.word	0x00100070
 80044d8:	00100060 	.word	0x00100060
 80044dc:	00100050 	.word	0x00100050
 80044e0:	00100040 	.word	0x00100040
 80044e4:	00100030 	.word	0x00100030
 80044e8:	00100020 	.word	0x00100020

080044ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a4c      	ldr	r2, [pc, #304]	@ (8004680 <TIM_Base_SetConfig+0x144>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d017      	beq.n	8004584 <TIM_Base_SetConfig+0x48>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800455a:	d013      	beq.n	8004584 <TIM_Base_SetConfig+0x48>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a49      	ldr	r2, [pc, #292]	@ (8004684 <TIM_Base_SetConfig+0x148>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d00f      	beq.n	8004584 <TIM_Base_SetConfig+0x48>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a48      	ldr	r2, [pc, #288]	@ (8004688 <TIM_Base_SetConfig+0x14c>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d00b      	beq.n	8004584 <TIM_Base_SetConfig+0x48>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a47      	ldr	r2, [pc, #284]	@ (800468c <TIM_Base_SetConfig+0x150>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d007      	beq.n	8004584 <TIM_Base_SetConfig+0x48>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a46      	ldr	r2, [pc, #280]	@ (8004690 <TIM_Base_SetConfig+0x154>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d003      	beq.n	8004584 <TIM_Base_SetConfig+0x48>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a45      	ldr	r2, [pc, #276]	@ (8004694 <TIM_Base_SetConfig+0x158>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d108      	bne.n	8004596 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800458a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	4313      	orrs	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a39      	ldr	r2, [pc, #228]	@ (8004680 <TIM_Base_SetConfig+0x144>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d023      	beq.n	80045e6 <TIM_Base_SetConfig+0xaa>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045a4:	d01f      	beq.n	80045e6 <TIM_Base_SetConfig+0xaa>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a36      	ldr	r2, [pc, #216]	@ (8004684 <TIM_Base_SetConfig+0x148>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d01b      	beq.n	80045e6 <TIM_Base_SetConfig+0xaa>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a35      	ldr	r2, [pc, #212]	@ (8004688 <TIM_Base_SetConfig+0x14c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d017      	beq.n	80045e6 <TIM_Base_SetConfig+0xaa>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a34      	ldr	r2, [pc, #208]	@ (800468c <TIM_Base_SetConfig+0x150>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d013      	beq.n	80045e6 <TIM_Base_SetConfig+0xaa>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a33      	ldr	r2, [pc, #204]	@ (8004690 <TIM_Base_SetConfig+0x154>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d00f      	beq.n	80045e6 <TIM_Base_SetConfig+0xaa>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a33      	ldr	r2, [pc, #204]	@ (8004698 <TIM_Base_SetConfig+0x15c>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d00b      	beq.n	80045e6 <TIM_Base_SetConfig+0xaa>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a32      	ldr	r2, [pc, #200]	@ (800469c <TIM_Base_SetConfig+0x160>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d007      	beq.n	80045e6 <TIM_Base_SetConfig+0xaa>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a31      	ldr	r2, [pc, #196]	@ (80046a0 <TIM_Base_SetConfig+0x164>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d003      	beq.n	80045e6 <TIM_Base_SetConfig+0xaa>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a2c      	ldr	r2, [pc, #176]	@ (8004694 <TIM_Base_SetConfig+0x158>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d108      	bne.n	80045f8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	4313      	orrs	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a18      	ldr	r2, [pc, #96]	@ (8004680 <TIM_Base_SetConfig+0x144>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d013      	beq.n	800464c <TIM_Base_SetConfig+0x110>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a1a      	ldr	r2, [pc, #104]	@ (8004690 <TIM_Base_SetConfig+0x154>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d00f      	beq.n	800464c <TIM_Base_SetConfig+0x110>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a1a      	ldr	r2, [pc, #104]	@ (8004698 <TIM_Base_SetConfig+0x15c>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d00b      	beq.n	800464c <TIM_Base_SetConfig+0x110>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a19      	ldr	r2, [pc, #100]	@ (800469c <TIM_Base_SetConfig+0x160>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d007      	beq.n	800464c <TIM_Base_SetConfig+0x110>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a18      	ldr	r2, [pc, #96]	@ (80046a0 <TIM_Base_SetConfig+0x164>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d003      	beq.n	800464c <TIM_Base_SetConfig+0x110>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a13      	ldr	r2, [pc, #76]	@ (8004694 <TIM_Base_SetConfig+0x158>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d103      	bne.n	8004654 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b01      	cmp	r3, #1
 8004664:	d105      	bne.n	8004672 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f023 0201 	bic.w	r2, r3, #1
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	611a      	str	r2, [r3, #16]
  }
}
 8004672:	bf00      	nop
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	40012c00 	.word	0x40012c00
 8004684:	40000400 	.word	0x40000400
 8004688:	40000800 	.word	0x40000800
 800468c:	40000c00 	.word	0x40000c00
 8004690:	40013400 	.word	0x40013400
 8004694:	40015000 	.word	0x40015000
 8004698:	40014000 	.word	0x40014000
 800469c:	40014400 	.word	0x40014400
 80046a0:	40014800 	.word	0x40014800

080046a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b087      	sub	sp, #28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	f023 0201 	bic.w	r2, r3, #1
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 0303 	bic.w	r3, r3, #3
 80046de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f023 0302 	bic.w	r3, r3, #2
 80046f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a30      	ldr	r2, [pc, #192]	@ (80047c0 <TIM_OC1_SetConfig+0x11c>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d013      	beq.n	800472c <TIM_OC1_SetConfig+0x88>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a2f      	ldr	r2, [pc, #188]	@ (80047c4 <TIM_OC1_SetConfig+0x120>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d00f      	beq.n	800472c <TIM_OC1_SetConfig+0x88>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a2e      	ldr	r2, [pc, #184]	@ (80047c8 <TIM_OC1_SetConfig+0x124>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d00b      	beq.n	800472c <TIM_OC1_SetConfig+0x88>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a2d      	ldr	r2, [pc, #180]	@ (80047cc <TIM_OC1_SetConfig+0x128>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d007      	beq.n	800472c <TIM_OC1_SetConfig+0x88>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a2c      	ldr	r2, [pc, #176]	@ (80047d0 <TIM_OC1_SetConfig+0x12c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d003      	beq.n	800472c <TIM_OC1_SetConfig+0x88>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a2b      	ldr	r2, [pc, #172]	@ (80047d4 <TIM_OC1_SetConfig+0x130>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d10c      	bne.n	8004746 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f023 0308 	bic.w	r3, r3, #8
 8004732:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	4313      	orrs	r3, r2
 800473c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f023 0304 	bic.w	r3, r3, #4
 8004744:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a1d      	ldr	r2, [pc, #116]	@ (80047c0 <TIM_OC1_SetConfig+0x11c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d013      	beq.n	8004776 <TIM_OC1_SetConfig+0xd2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a1c      	ldr	r2, [pc, #112]	@ (80047c4 <TIM_OC1_SetConfig+0x120>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00f      	beq.n	8004776 <TIM_OC1_SetConfig+0xd2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a1b      	ldr	r2, [pc, #108]	@ (80047c8 <TIM_OC1_SetConfig+0x124>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00b      	beq.n	8004776 <TIM_OC1_SetConfig+0xd2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a1a      	ldr	r2, [pc, #104]	@ (80047cc <TIM_OC1_SetConfig+0x128>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d007      	beq.n	8004776 <TIM_OC1_SetConfig+0xd2>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a19      	ldr	r2, [pc, #100]	@ (80047d0 <TIM_OC1_SetConfig+0x12c>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d003      	beq.n	8004776 <TIM_OC1_SetConfig+0xd2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a18      	ldr	r2, [pc, #96]	@ (80047d4 <TIM_OC1_SetConfig+0x130>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d111      	bne.n	800479a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800477c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004784:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	4313      	orrs	r3, r2
 800478e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	4313      	orrs	r3, r2
 8004798:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	621a      	str	r2, [r3, #32]
}
 80047b4:	bf00      	nop
 80047b6:	371c      	adds	r7, #28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	40012c00 	.word	0x40012c00
 80047c4:	40013400 	.word	0x40013400
 80047c8:	40014000 	.word	0x40014000
 80047cc:	40014400 	.word	0x40014400
 80047d0:	40014800 	.word	0x40014800
 80047d4:	40015000 	.word	0x40015000

080047d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	f023 0210 	bic.w	r2, r3, #16
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004806:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800480a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004812:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	021b      	lsls	r3, r3, #8
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	4313      	orrs	r3, r2
 800481e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f023 0320 	bic.w	r3, r3, #32
 8004826:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	011b      	lsls	r3, r3, #4
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	4313      	orrs	r3, r2
 8004832:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a2c      	ldr	r2, [pc, #176]	@ (80048e8 <TIM_OC2_SetConfig+0x110>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d007      	beq.n	800484c <TIM_OC2_SetConfig+0x74>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a2b      	ldr	r2, [pc, #172]	@ (80048ec <TIM_OC2_SetConfig+0x114>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d003      	beq.n	800484c <TIM_OC2_SetConfig+0x74>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a2a      	ldr	r2, [pc, #168]	@ (80048f0 <TIM_OC2_SetConfig+0x118>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d10d      	bne.n	8004868 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	011b      	lsls	r3, r3, #4
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	4313      	orrs	r3, r2
 800485e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004866:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a1f      	ldr	r2, [pc, #124]	@ (80048e8 <TIM_OC2_SetConfig+0x110>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d013      	beq.n	8004898 <TIM_OC2_SetConfig+0xc0>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a1e      	ldr	r2, [pc, #120]	@ (80048ec <TIM_OC2_SetConfig+0x114>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d00f      	beq.n	8004898 <TIM_OC2_SetConfig+0xc0>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a1e      	ldr	r2, [pc, #120]	@ (80048f4 <TIM_OC2_SetConfig+0x11c>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d00b      	beq.n	8004898 <TIM_OC2_SetConfig+0xc0>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a1d      	ldr	r2, [pc, #116]	@ (80048f8 <TIM_OC2_SetConfig+0x120>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d007      	beq.n	8004898 <TIM_OC2_SetConfig+0xc0>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a1c      	ldr	r2, [pc, #112]	@ (80048fc <TIM_OC2_SetConfig+0x124>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d003      	beq.n	8004898 <TIM_OC2_SetConfig+0xc0>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a17      	ldr	r2, [pc, #92]	@ (80048f0 <TIM_OC2_SetConfig+0x118>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d113      	bne.n	80048c0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800489e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80048a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	4313      	orrs	r3, r2
 80048be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	621a      	str	r2, [r3, #32]
}
 80048da:	bf00      	nop
 80048dc:	371c      	adds	r7, #28
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	40012c00 	.word	0x40012c00
 80048ec:	40013400 	.word	0x40013400
 80048f0:	40015000 	.word	0x40015000
 80048f4:	40014000 	.word	0x40014000
 80048f8:	40014400 	.word	0x40014400
 80048fc:	40014800 	.word	0x40014800

08004900 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004900:	b480      	push	{r7}
 8004902:	b087      	sub	sp, #28
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800492e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f023 0303 	bic.w	r3, r3, #3
 800493a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	4313      	orrs	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800494c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	021b      	lsls	r3, r3, #8
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	4313      	orrs	r3, r2
 8004958:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a2b      	ldr	r2, [pc, #172]	@ (8004a0c <TIM_OC3_SetConfig+0x10c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d007      	beq.n	8004972 <TIM_OC3_SetConfig+0x72>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a2a      	ldr	r2, [pc, #168]	@ (8004a10 <TIM_OC3_SetConfig+0x110>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d003      	beq.n	8004972 <TIM_OC3_SetConfig+0x72>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a29      	ldr	r2, [pc, #164]	@ (8004a14 <TIM_OC3_SetConfig+0x114>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d10d      	bne.n	800498e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004978:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	021b      	lsls	r3, r3, #8
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	4313      	orrs	r3, r2
 8004984:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800498c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a1e      	ldr	r2, [pc, #120]	@ (8004a0c <TIM_OC3_SetConfig+0x10c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d013      	beq.n	80049be <TIM_OC3_SetConfig+0xbe>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a1d      	ldr	r2, [pc, #116]	@ (8004a10 <TIM_OC3_SetConfig+0x110>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00f      	beq.n	80049be <TIM_OC3_SetConfig+0xbe>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004a18 <TIM_OC3_SetConfig+0x118>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00b      	beq.n	80049be <TIM_OC3_SetConfig+0xbe>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a1c      	ldr	r2, [pc, #112]	@ (8004a1c <TIM_OC3_SetConfig+0x11c>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d007      	beq.n	80049be <TIM_OC3_SetConfig+0xbe>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004a20 <TIM_OC3_SetConfig+0x120>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d003      	beq.n	80049be <TIM_OC3_SetConfig+0xbe>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a16      	ldr	r2, [pc, #88]	@ (8004a14 <TIM_OC3_SetConfig+0x114>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d113      	bne.n	80049e6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	621a      	str	r2, [r3, #32]
}
 8004a00:	bf00      	nop
 8004a02:	371c      	adds	r7, #28
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	40012c00 	.word	0x40012c00
 8004a10:	40013400 	.word	0x40013400
 8004a14:	40015000 	.word	0x40015000
 8004a18:	40014000 	.word	0x40014000
 8004a1c:	40014400 	.word	0x40014400
 8004a20:	40014800 	.word	0x40014800

08004a24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	021b      	lsls	r3, r3, #8
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	031b      	lsls	r3, r3, #12
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a2c      	ldr	r2, [pc, #176]	@ (8004b34 <TIM_OC4_SetConfig+0x110>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d007      	beq.n	8004a98 <TIM_OC4_SetConfig+0x74>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a2b      	ldr	r2, [pc, #172]	@ (8004b38 <TIM_OC4_SetConfig+0x114>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d003      	beq.n	8004a98 <TIM_OC4_SetConfig+0x74>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a2a      	ldr	r2, [pc, #168]	@ (8004b3c <TIM_OC4_SetConfig+0x118>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d10d      	bne.n	8004ab4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004a9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	031b      	lsls	r3, r3, #12
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ab2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a1f      	ldr	r2, [pc, #124]	@ (8004b34 <TIM_OC4_SetConfig+0x110>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d013      	beq.n	8004ae4 <TIM_OC4_SetConfig+0xc0>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a1e      	ldr	r2, [pc, #120]	@ (8004b38 <TIM_OC4_SetConfig+0x114>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d00f      	beq.n	8004ae4 <TIM_OC4_SetConfig+0xc0>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a1e      	ldr	r2, [pc, #120]	@ (8004b40 <TIM_OC4_SetConfig+0x11c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d00b      	beq.n	8004ae4 <TIM_OC4_SetConfig+0xc0>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a1d      	ldr	r2, [pc, #116]	@ (8004b44 <TIM_OC4_SetConfig+0x120>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d007      	beq.n	8004ae4 <TIM_OC4_SetConfig+0xc0>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a1c      	ldr	r2, [pc, #112]	@ (8004b48 <TIM_OC4_SetConfig+0x124>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d003      	beq.n	8004ae4 <TIM_OC4_SetConfig+0xc0>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a17      	ldr	r2, [pc, #92]	@ (8004b3c <TIM_OC4_SetConfig+0x118>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d113      	bne.n	8004b0c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004aea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004af2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	019b      	lsls	r3, r3, #6
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	019b      	lsls	r3, r3, #6
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	621a      	str	r2, [r3, #32]
}
 8004b26:	bf00      	nop
 8004b28:	371c      	adds	r7, #28
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	40012c00 	.word	0x40012c00
 8004b38:	40013400 	.word	0x40013400
 8004b3c:	40015000 	.word	0x40015000
 8004b40:	40014000 	.word	0x40014000
 8004b44:	40014400 	.word	0x40014400
 8004b48:	40014800 	.word	0x40014800

08004b4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004b90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	041b      	lsls	r3, r3, #16
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a19      	ldr	r2, [pc, #100]	@ (8004c08 <TIM_OC5_SetConfig+0xbc>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d013      	beq.n	8004bce <TIM_OC5_SetConfig+0x82>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a18      	ldr	r2, [pc, #96]	@ (8004c0c <TIM_OC5_SetConfig+0xc0>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d00f      	beq.n	8004bce <TIM_OC5_SetConfig+0x82>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a17      	ldr	r2, [pc, #92]	@ (8004c10 <TIM_OC5_SetConfig+0xc4>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d00b      	beq.n	8004bce <TIM_OC5_SetConfig+0x82>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a16      	ldr	r2, [pc, #88]	@ (8004c14 <TIM_OC5_SetConfig+0xc8>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d007      	beq.n	8004bce <TIM_OC5_SetConfig+0x82>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a15      	ldr	r2, [pc, #84]	@ (8004c18 <TIM_OC5_SetConfig+0xcc>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d003      	beq.n	8004bce <TIM_OC5_SetConfig+0x82>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a14      	ldr	r2, [pc, #80]	@ (8004c1c <TIM_OC5_SetConfig+0xd0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d109      	bne.n	8004be2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bd4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	021b      	lsls	r3, r3, #8
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	621a      	str	r2, [r3, #32]
}
 8004bfc:	bf00      	nop
 8004bfe:	371c      	adds	r7, #28
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	40012c00 	.word	0x40012c00
 8004c0c:	40013400 	.word	0x40013400
 8004c10:	40014000 	.word	0x40014000
 8004c14:	40014400 	.word	0x40014400
 8004c18:	40014800 	.word	0x40014800
 8004c1c:	40015000 	.word	0x40015000

08004c20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	021b      	lsls	r3, r3, #8
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004c66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	051b      	lsls	r3, r3, #20
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a1a      	ldr	r2, [pc, #104]	@ (8004ce0 <TIM_OC6_SetConfig+0xc0>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d013      	beq.n	8004ca4 <TIM_OC6_SetConfig+0x84>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a19      	ldr	r2, [pc, #100]	@ (8004ce4 <TIM_OC6_SetConfig+0xc4>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d00f      	beq.n	8004ca4 <TIM_OC6_SetConfig+0x84>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a18      	ldr	r2, [pc, #96]	@ (8004ce8 <TIM_OC6_SetConfig+0xc8>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d00b      	beq.n	8004ca4 <TIM_OC6_SetConfig+0x84>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a17      	ldr	r2, [pc, #92]	@ (8004cec <TIM_OC6_SetConfig+0xcc>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d007      	beq.n	8004ca4 <TIM_OC6_SetConfig+0x84>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a16      	ldr	r2, [pc, #88]	@ (8004cf0 <TIM_OC6_SetConfig+0xd0>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d003      	beq.n	8004ca4 <TIM_OC6_SetConfig+0x84>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a15      	ldr	r2, [pc, #84]	@ (8004cf4 <TIM_OC6_SetConfig+0xd4>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d109      	bne.n	8004cb8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004caa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	029b      	lsls	r3, r3, #10
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	621a      	str	r2, [r3, #32]
}
 8004cd2:	bf00      	nop
 8004cd4:	371c      	adds	r7, #28
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	40012c00 	.word	0x40012c00
 8004ce4:	40013400 	.word	0x40013400
 8004ce8:	40014000 	.word	0x40014000
 8004cec:	40014400 	.word	0x40014400
 8004cf0:	40014800 	.word	0x40014800
 8004cf4:	40015000 	.word	0x40015000

08004cf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	f023 0201 	bic.w	r2, r3, #1
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	011b      	lsls	r3, r3, #4
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f023 030a 	bic.w	r3, r3, #10
 8004d34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	621a      	str	r2, [r3, #32]
}
 8004d4a:	bf00      	nop
 8004d4c:	371c      	adds	r7, #28
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b087      	sub	sp, #28
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	60f8      	str	r0, [r7, #12]
 8004d5e:	60b9      	str	r1, [r7, #8]
 8004d60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	f023 0210 	bic.w	r2, r3, #16
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	031b      	lsls	r3, r3, #12
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d92:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	621a      	str	r2, [r3, #32]
}
 8004daa:	bf00      	nop
 8004dac:	371c      	adds	r7, #28
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b085      	sub	sp, #20
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004dcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	f043 0307 	orr.w	r3, r3, #7
 8004ddc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	609a      	str	r2, [r3, #8]
}
 8004de4:	bf00      	nop
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	021a      	lsls	r2, r3, #8
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	431a      	orrs	r2, r3
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	609a      	str	r2, [r3, #8]
}
 8004e24:	bf00      	nop
 8004e26:	371c      	adds	r7, #28
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d101      	bne.n	8004e48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e44:	2302      	movs	r3, #2
 8004e46:	e074      	b.n	8004f32 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a34      	ldr	r2, [pc, #208]	@ (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d009      	beq.n	8004e86 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a33      	ldr	r2, [pc, #204]	@ (8004f44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d004      	beq.n	8004e86 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a31      	ldr	r2, [pc, #196]	@ (8004f48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d108      	bne.n	8004e98 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004e8c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ea2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a21      	ldr	r2, [pc, #132]	@ (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d022      	beq.n	8004f06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ec8:	d01d      	beq.n	8004f06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a1f      	ldr	r2, [pc, #124]	@ (8004f4c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d018      	beq.n	8004f06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8004f50 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d013      	beq.n	8004f06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a1c      	ldr	r2, [pc, #112]	@ (8004f54 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d00e      	beq.n	8004f06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a15      	ldr	r2, [pc, #84]	@ (8004f44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d009      	beq.n	8004f06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a18      	ldr	r2, [pc, #96]	@ (8004f58 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d004      	beq.n	8004f06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a11      	ldr	r2, [pc, #68]	@ (8004f48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d10c      	bne.n	8004f20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	40012c00 	.word	0x40012c00
 8004f44:	40013400 	.word	0x40013400
 8004f48:	40015000 	.word	0x40015000
 8004f4c:	40000400 	.word	0x40000400
 8004f50:	40000800 	.word	0x40000800
 8004f54:	40000c00 	.word	0x40000c00
 8004f58:	40014000 	.word	0x40014000

08004f5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e042      	b.n	8005080 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005000:	2b00      	cmp	r3, #0
 8005002:	d106      	bne.n	8005012 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f7fc fd59 	bl	8001ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2224      	movs	r2, #36	@ 0x24
 8005016:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f022 0201 	bic.w	r2, r2, #1
 8005028:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502e:	2b00      	cmp	r3, #0
 8005030:	d002      	beq.n	8005038 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f001 f806 	bl	8006044 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 fd07 	bl	8005a4c <UART_SetConfig>
 800503e:	4603      	mov	r3, r0
 8005040:	2b01      	cmp	r3, #1
 8005042:	d101      	bne.n	8005048 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e01b      	b.n	8005080 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005056:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689a      	ldr	r2, [r3, #8]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005066:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0201 	orr.w	r2, r2, #1
 8005076:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f001 f885 	bl	8006188 <UART_CheckIdleState>
 800507e:	4603      	mov	r3, r0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b08a      	sub	sp, #40	@ 0x28
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	4613      	mov	r3, r2
 8005094:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800509c:	2b20      	cmp	r3, #32
 800509e:	d167      	bne.n	8005170 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d002      	beq.n	80050ac <HAL_UART_Transmit_DMA+0x24>
 80050a6:	88fb      	ldrh	r3, [r7, #6]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e060      	b.n	8005172 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	88fa      	ldrh	r2, [r7, #6]
 80050ba:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	88fa      	ldrh	r2, [r7, #6]
 80050c2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2221      	movs	r2, #33	@ 0x21
 80050d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d028      	beq.n	8005130 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050e2:	4a26      	ldr	r2, [pc, #152]	@ (800517c <HAL_UART_Transmit_DMA+0xf4>)
 80050e4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050ea:	4a25      	ldr	r2, [pc, #148]	@ (8005180 <HAL_UART_Transmit_DMA+0xf8>)
 80050ec:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050f2:	4a24      	ldr	r2, [pc, #144]	@ (8005184 <HAL_UART_Transmit_DMA+0xfc>)
 80050f4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050fa:	2200      	movs	r2, #0
 80050fc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005106:	4619      	mov	r1, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3328      	adds	r3, #40	@ 0x28
 800510e:	461a      	mov	r2, r3
 8005110:	88fb      	ldrh	r3, [r7, #6]
 8005112:	f7fd f847 	bl	80021a4 <HAL_DMA_Start_IT>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d009      	beq.n	8005130 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2210      	movs	r2, #16
 8005120:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2220      	movs	r2, #32
 8005128:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e020      	b.n	8005172 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2240      	movs	r2, #64	@ 0x40
 8005136:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3308      	adds	r3, #8
 800513e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	e853 3f00 	ldrex	r3, [r3]
 8005146:	613b      	str	r3, [r7, #16]
   return(result);
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800514e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3308      	adds	r3, #8
 8005156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005158:	623a      	str	r2, [r7, #32]
 800515a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515c:	69f9      	ldr	r1, [r7, #28]
 800515e:	6a3a      	ldr	r2, [r7, #32]
 8005160:	e841 2300 	strex	r3, r2, [r1]
 8005164:	61bb      	str	r3, [r7, #24]
   return(result);
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1e5      	bne.n	8005138 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800516c:	2300      	movs	r3, #0
 800516e:	e000      	b.n	8005172 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005170:	2302      	movs	r3, #2
  }
}
 8005172:	4618      	mov	r0, r3
 8005174:	3728      	adds	r7, #40	@ 0x28
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	08006653 	.word	0x08006653
 8005180:	080066ed 	.word	0x080066ed
 8005184:	08006873 	.word	0x08006873

08005188 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b08a      	sub	sp, #40	@ 0x28
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	4613      	mov	r3, r2
 8005194:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800519c:	2b20      	cmp	r3, #32
 800519e:	d137      	bne.n	8005210 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d002      	beq.n	80051ac <HAL_UART_Receive_DMA+0x24>
 80051a6:	88fb      	ldrh	r3, [r7, #6]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e030      	b.n	8005212 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a18      	ldr	r2, [pc, #96]	@ (800521c <HAL_UART_Receive_DMA+0x94>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d01f      	beq.n	8005200 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d018      	beq.n	8005200 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	e853 3f00 	ldrex	r3, [r3]
 80051da:	613b      	str	r3, [r7, #16]
   return(result);
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80051e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	461a      	mov	r2, r3
 80051ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ec:	623b      	str	r3, [r7, #32]
 80051ee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f0:	69f9      	ldr	r1, [r7, #28]
 80051f2:	6a3a      	ldr	r2, [r7, #32]
 80051f4:	e841 2300 	strex	r3, r2, [r1]
 80051f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1e6      	bne.n	80051ce <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005200:	88fb      	ldrh	r3, [r7, #6]
 8005202:	461a      	mov	r2, r3
 8005204:	68b9      	ldr	r1, [r7, #8]
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f001 f8d6 	bl	80063b8 <UART_Start_Receive_DMA>
 800520c:	4603      	mov	r3, r0
 800520e:	e000      	b.n	8005212 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005210:	2302      	movs	r3, #2
  }
}
 8005212:	4618      	mov	r0, r3
 8005214:	3728      	adds	r7, #40	@ 0x28
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	40008000 	.word	0x40008000

08005220 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b090      	sub	sp, #64	@ 0x40
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800522e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005236:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005242:	2b80      	cmp	r3, #128	@ 0x80
 8005244:	d139      	bne.n	80052ba <HAL_UART_DMAStop+0x9a>
 8005246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005248:	2b21      	cmp	r3, #33	@ 0x21
 800524a:	d136      	bne.n	80052ba <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	3308      	adds	r3, #8
 8005252:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	e853 3f00 	ldrex	r3, [r3]
 800525a:	61fb      	str	r3, [r7, #28]
   return(result);
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005262:	637b      	str	r3, [r7, #52]	@ 0x34
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	3308      	adds	r3, #8
 800526a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800526c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800526e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005270:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005272:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005274:	e841 2300 	strex	r3, r2, [r1]
 8005278:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800527a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1e5      	bne.n	800524c <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005284:	2b00      	cmp	r3, #0
 8005286:	d015      	beq.n	80052b4 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800528c:	4618      	mov	r0, r3
 800528e:	f7fd f804 	bl	800229a <HAL_DMA_Abort>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00d      	beq.n	80052b4 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800529c:	4618      	mov	r0, r3
 800529e:	f7fd f96b 	bl	8002578 <HAL_DMA_GetError>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b20      	cmp	r3, #32
 80052a6:	d105      	bne.n	80052b4 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2210      	movs	r2, #16
 80052ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e047      	b.n	8005344 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f001 f925 	bl	8006504 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c4:	2b40      	cmp	r3, #64	@ 0x40
 80052c6:	d13c      	bne.n	8005342 <HAL_UART_DMAStop+0x122>
 80052c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ca:	2b22      	cmp	r3, #34	@ 0x22
 80052cc:	d139      	bne.n	8005342 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3308      	adds	r3, #8
 80052d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	e853 3f00 	ldrex	r3, [r3]
 80052dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	3308      	adds	r3, #8
 80052ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052ee:	61ba      	str	r2, [r7, #24]
 80052f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f2:	6979      	ldr	r1, [r7, #20]
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	e841 2300 	strex	r3, r2, [r1]
 80052fa:	613b      	str	r3, [r7, #16]
   return(result);
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1e5      	bne.n	80052ce <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005308:	2b00      	cmp	r3, #0
 800530a:	d017      	beq.n	800533c <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005312:	4618      	mov	r0, r3
 8005314:	f7fc ffc1 	bl	800229a <HAL_DMA_Abort>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00e      	beq.n	800533c <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005324:	4618      	mov	r0, r3
 8005326:	f7fd f927 	bl	8002578 <HAL_DMA_GetError>
 800532a:	4603      	mov	r3, r0
 800532c:	2b20      	cmp	r3, #32
 800532e:	d105      	bne.n	800533c <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2210      	movs	r2, #16
 8005334:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e003      	b.n	8005344 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f001 f922 	bl	8006586 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3740      	adds	r7, #64	@ 0x40
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b0ba      	sub	sp, #232	@ 0xe8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005372:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005376:	f640 030f 	movw	r3, #2063	@ 0x80f
 800537a:	4013      	ands	r3, r2
 800537c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005380:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005384:	2b00      	cmp	r3, #0
 8005386:	d11b      	bne.n	80053c0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800538c:	f003 0320 	and.w	r3, r3, #32
 8005390:	2b00      	cmp	r3, #0
 8005392:	d015      	beq.n	80053c0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005398:	f003 0320 	and.w	r3, r3, #32
 800539c:	2b00      	cmp	r3, #0
 800539e:	d105      	bne.n	80053ac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80053a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d009      	beq.n	80053c0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 8300 	beq.w	80059b6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	4798      	blx	r3
      }
      return;
 80053be:	e2fa      	b.n	80059b6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80053c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 8123 	beq.w	8005610 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80053ca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80053ce:	4b8d      	ldr	r3, [pc, #564]	@ (8005604 <HAL_UART_IRQHandler+0x2b8>)
 80053d0:	4013      	ands	r3, r2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d106      	bne.n	80053e4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80053d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80053da:	4b8b      	ldr	r3, [pc, #556]	@ (8005608 <HAL_UART_IRQHandler+0x2bc>)
 80053dc:	4013      	ands	r3, r2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f000 8116 	beq.w	8005610 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d011      	beq.n	8005414 <HAL_UART_IRQHandler+0xc8>
 80053f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00b      	beq.n	8005414 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2201      	movs	r2, #1
 8005402:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800540a:	f043 0201 	orr.w	r2, r3, #1
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d011      	beq.n	8005444 <HAL_UART_IRQHandler+0xf8>
 8005420:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00b      	beq.n	8005444 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2202      	movs	r2, #2
 8005432:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800543a:	f043 0204 	orr.w	r2, r3, #4
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b00      	cmp	r3, #0
 800544e:	d011      	beq.n	8005474 <HAL_UART_IRQHandler+0x128>
 8005450:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00b      	beq.n	8005474 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2204      	movs	r2, #4
 8005462:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800546a:	f043 0202 	orr.w	r2, r3, #2
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005478:	f003 0308 	and.w	r3, r3, #8
 800547c:	2b00      	cmp	r3, #0
 800547e:	d017      	beq.n	80054b0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005484:	f003 0320 	and.w	r3, r3, #32
 8005488:	2b00      	cmp	r3, #0
 800548a:	d105      	bne.n	8005498 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800548c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005490:	4b5c      	ldr	r3, [pc, #368]	@ (8005604 <HAL_UART_IRQHandler+0x2b8>)
 8005492:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00b      	beq.n	80054b0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2208      	movs	r2, #8
 800549e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054a6:	f043 0208 	orr.w	r2, r3, #8
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80054b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d012      	beq.n	80054e2 <HAL_UART_IRQHandler+0x196>
 80054bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00c      	beq.n	80054e2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054d8:	f043 0220 	orr.w	r2, r3, #32
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 8266 	beq.w	80059ba <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80054ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054f2:	f003 0320 	and.w	r3, r3, #32
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d013      	beq.n	8005522 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80054fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054fe:	f003 0320 	and.w	r3, r3, #32
 8005502:	2b00      	cmp	r3, #0
 8005504:	d105      	bne.n	8005512 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800550a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d007      	beq.n	8005522 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005528:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005536:	2b40      	cmp	r3, #64	@ 0x40
 8005538:	d005      	beq.n	8005546 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800553a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800553e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005542:	2b00      	cmp	r3, #0
 8005544:	d054      	beq.n	80055f0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f001 f81d 	bl	8006586 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005556:	2b40      	cmp	r3, #64	@ 0x40
 8005558:	d146      	bne.n	80055e8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	3308      	adds	r3, #8
 8005560:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005564:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005568:	e853 3f00 	ldrex	r3, [r3]
 800556c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005570:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005574:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005578:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3308      	adds	r3, #8
 8005582:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005586:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800558a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005592:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005596:	e841 2300 	strex	r3, r2, [r1]
 800559a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800559e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1d9      	bne.n	800555a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d017      	beq.n	80055e0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055b6:	4a15      	ldr	r2, [pc, #84]	@ (800560c <HAL_UART_IRQHandler+0x2c0>)
 80055b8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7fc fec3 	bl	800234c <HAL_DMA_Abort_IT>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d019      	beq.n	8005600 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80055da:	4610      	mov	r0, r2
 80055dc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055de:	e00f      	b.n	8005600 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 fa1d 	bl	8005a20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e6:	e00b      	b.n	8005600 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 fa19 	bl	8005a20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ee:	e007      	b.n	8005600 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 fa15 	bl	8005a20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80055fe:	e1dc      	b.n	80059ba <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005600:	bf00      	nop
    return;
 8005602:	e1da      	b.n	80059ba <HAL_UART_IRQHandler+0x66e>
 8005604:	10000001 	.word	0x10000001
 8005608:	04000120 	.word	0x04000120
 800560c:	080068f3 	.word	0x080068f3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005614:	2b01      	cmp	r3, #1
 8005616:	f040 8170 	bne.w	80058fa <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800561a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800561e:	f003 0310 	and.w	r3, r3, #16
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 8169 	beq.w	80058fa <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800562c:	f003 0310 	and.w	r3, r3, #16
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 8162 	beq.w	80058fa <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2210      	movs	r2, #16
 800563c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005648:	2b40      	cmp	r3, #64	@ 0x40
 800564a:	f040 80d8 	bne.w	80057fe <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800565c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 80af 	beq.w	80057c4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800566c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005670:	429a      	cmp	r2, r3
 8005672:	f080 80a7 	bcs.w	80057c4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800567c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0320 	and.w	r3, r3, #32
 800568e:	2b00      	cmp	r3, #0
 8005690:	f040 8087 	bne.w	80057a2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80056a0:	e853 3f00 	ldrex	r3, [r3]
 80056a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80056a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80056ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	461a      	mov	r2, r3
 80056ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80056be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80056c2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80056ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80056ce:	e841 2300 	strex	r3, r2, [r1]
 80056d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80056d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1da      	bne.n	8005694 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	3308      	adds	r3, #8
 80056e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056e8:	e853 3f00 	ldrex	r3, [r3]
 80056ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80056ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056f0:	f023 0301 	bic.w	r3, r3, #1
 80056f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3308      	adds	r3, #8
 80056fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005702:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005706:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005708:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800570a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800570e:	e841 2300 	strex	r3, r2, [r1]
 8005712:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005714:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1e1      	bne.n	80056de <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	3308      	adds	r3, #8
 8005720:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005722:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005724:	e853 3f00 	ldrex	r3, [r3]
 8005728:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800572a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800572c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005730:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3308      	adds	r3, #8
 800573a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800573e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005740:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005742:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005744:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005746:	e841 2300 	strex	r3, r2, [r1]
 800574a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800574c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1e3      	bne.n	800571a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2220      	movs	r2, #32
 8005756:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005766:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005768:	e853 3f00 	ldrex	r3, [r3]
 800576c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800576e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005770:	f023 0310 	bic.w	r3, r3, #16
 8005774:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	461a      	mov	r2, r3
 800577e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005782:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005784:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005786:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005788:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800578a:	e841 2300 	strex	r3, r2, [r1]
 800578e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005790:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1e4      	bne.n	8005760 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800579c:	4618      	mov	r0, r3
 800579e:	f7fc fd7c 	bl	800229a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2202      	movs	r2, #2
 80057a6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	4619      	mov	r1, r3
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f939 	bl	8005a34 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80057c2:	e0fc      	b.n	80059be <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80057ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80057ce:	429a      	cmp	r2, r3
 80057d0:	f040 80f5 	bne.w	80059be <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0320 	and.w	r3, r3, #32
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	f040 80eb 	bne.w	80059be <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2202      	movs	r2, #2
 80057ec:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80057f4:	4619      	mov	r1, r3
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f91c 	bl	8005a34 <HAL_UARTEx_RxEventCallback>
      return;
 80057fc:	e0df      	b.n	80059be <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800580a:	b29b      	uxth	r3, r3
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005818:	b29b      	uxth	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	f000 80d1 	beq.w	80059c2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005820:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 80cc 	beq.w	80059c2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005832:	e853 3f00 	ldrex	r3, [r3]
 8005836:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800583a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800583e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	461a      	mov	r2, r3
 8005848:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800584c:	647b      	str	r3, [r7, #68]	@ 0x44
 800584e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005850:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005852:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005854:	e841 2300 	strex	r3, r2, [r1]
 8005858:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800585a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1e4      	bne.n	800582a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3308      	adds	r3, #8
 8005866:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586a:	e853 3f00 	ldrex	r3, [r3]
 800586e:	623b      	str	r3, [r7, #32]
   return(result);
 8005870:	6a3b      	ldr	r3, [r7, #32]
 8005872:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005876:	f023 0301 	bic.w	r3, r3, #1
 800587a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3308      	adds	r3, #8
 8005884:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005888:	633a      	str	r2, [r7, #48]	@ 0x30
 800588a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800588e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005890:	e841 2300 	strex	r3, r2, [r1]
 8005894:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1e1      	bne.n	8005860 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2220      	movs	r2, #32
 80058a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	e853 3f00 	ldrex	r3, [r3]
 80058bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f023 0310 	bic.w	r3, r3, #16
 80058c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	461a      	mov	r2, r3
 80058ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80058d2:	61fb      	str	r3, [r7, #28]
 80058d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d6:	69b9      	ldr	r1, [r7, #24]
 80058d8:	69fa      	ldr	r2, [r7, #28]
 80058da:	e841 2300 	strex	r3, r2, [r1]
 80058de:	617b      	str	r3, [r7, #20]
   return(result);
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1e4      	bne.n	80058b0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2202      	movs	r2, #2
 80058ea:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058f0:	4619      	mov	r1, r3
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f89e 	bl	8005a34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058f8:	e063      	b.n	80059c2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80058fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00e      	beq.n	8005924 <HAL_UART_IRQHandler+0x5d8>
 8005906:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800590a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d008      	beq.n	8005924 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800591a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f001 f88e 	bl	8006a3e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005922:	e051      	b.n	80059c8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800592c:	2b00      	cmp	r3, #0
 800592e:	d014      	beq.n	800595a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005934:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005938:	2b00      	cmp	r3, #0
 800593a:	d105      	bne.n	8005948 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800593c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005940:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d008      	beq.n	800595a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800594c:	2b00      	cmp	r3, #0
 800594e:	d03a      	beq.n	80059c6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	4798      	blx	r3
    }
    return;
 8005958:	e035      	b.n	80059c6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800595a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800595e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005962:	2b00      	cmp	r3, #0
 8005964:	d009      	beq.n	800597a <HAL_UART_IRQHandler+0x62e>
 8005966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800596a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 ffcf 	bl	8006916 <UART_EndTransmit_IT>
    return;
 8005978:	e026      	b.n	80059c8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800597a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800597e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d009      	beq.n	800599a <HAL_UART_IRQHandler+0x64e>
 8005986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800598a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f001 f867 	bl	8006a66 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005998:	e016      	b.n	80059c8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800599a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800599e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d010      	beq.n	80059c8 <HAL_UART_IRQHandler+0x67c>
 80059a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	da0c      	bge.n	80059c8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f001 f84f 	bl	8006a52 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80059b4:	e008      	b.n	80059c8 <HAL_UART_IRQHandler+0x67c>
      return;
 80059b6:	bf00      	nop
 80059b8:	e006      	b.n	80059c8 <HAL_UART_IRQHandler+0x67c>
    return;
 80059ba:	bf00      	nop
 80059bc:	e004      	b.n	80059c8 <HAL_UART_IRQHandler+0x67c>
      return;
 80059be:	bf00      	nop
 80059c0:	e002      	b.n	80059c8 <HAL_UART_IRQHandler+0x67c>
      return;
 80059c2:	bf00      	nop
 80059c4:	e000      	b.n	80059c8 <HAL_UART_IRQHandler+0x67c>
    return;
 80059c6:	bf00      	nop
  }
}
 80059c8:	37e8      	adds	r7, #232	@ 0xe8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop

080059d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a50:	b08c      	sub	sp, #48	@ 0x30
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	689a      	ldr	r2, [r3, #8]
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	431a      	orrs	r2, r3
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	431a      	orrs	r2, r3
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	69db      	ldr	r3, [r3, #28]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	4baa      	ldr	r3, [pc, #680]	@ (8005d24 <UART_SetConfig+0x2d8>)
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	6812      	ldr	r2, [r2, #0]
 8005a82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a84:	430b      	orrs	r3, r1
 8005a86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	68da      	ldr	r2, [r3, #12]
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a9f      	ldr	r2, [pc, #636]	@ (8005d28 <UART_SetConfig+0x2dc>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d004      	beq.n	8005ab8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005ac2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	6812      	ldr	r2, [r2, #0]
 8005aca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005acc:	430b      	orrs	r3, r1
 8005ace:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad6:	f023 010f 	bic.w	r1, r3, #15
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a90      	ldr	r2, [pc, #576]	@ (8005d2c <UART_SetConfig+0x2e0>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d125      	bne.n	8005b3c <UART_SetConfig+0xf0>
 8005af0:	4b8f      	ldr	r3, [pc, #572]	@ (8005d30 <UART_SetConfig+0x2e4>)
 8005af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005af6:	f003 0303 	and.w	r3, r3, #3
 8005afa:	2b03      	cmp	r3, #3
 8005afc:	d81a      	bhi.n	8005b34 <UART_SetConfig+0xe8>
 8005afe:	a201      	add	r2, pc, #4	@ (adr r2, 8005b04 <UART_SetConfig+0xb8>)
 8005b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b04:	08005b15 	.word	0x08005b15
 8005b08:	08005b25 	.word	0x08005b25
 8005b0c:	08005b1d 	.word	0x08005b1d
 8005b10:	08005b2d 	.word	0x08005b2d
 8005b14:	2301      	movs	r3, #1
 8005b16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b1a:	e116      	b.n	8005d4a <UART_SetConfig+0x2fe>
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b22:	e112      	b.n	8005d4a <UART_SetConfig+0x2fe>
 8005b24:	2304      	movs	r3, #4
 8005b26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b2a:	e10e      	b.n	8005d4a <UART_SetConfig+0x2fe>
 8005b2c:	2308      	movs	r3, #8
 8005b2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b32:	e10a      	b.n	8005d4a <UART_SetConfig+0x2fe>
 8005b34:	2310      	movs	r3, #16
 8005b36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b3a:	e106      	b.n	8005d4a <UART_SetConfig+0x2fe>
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a7c      	ldr	r2, [pc, #496]	@ (8005d34 <UART_SetConfig+0x2e8>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d138      	bne.n	8005bb8 <UART_SetConfig+0x16c>
 8005b46:	4b7a      	ldr	r3, [pc, #488]	@ (8005d30 <UART_SetConfig+0x2e4>)
 8005b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b4c:	f003 030c 	and.w	r3, r3, #12
 8005b50:	2b0c      	cmp	r3, #12
 8005b52:	d82d      	bhi.n	8005bb0 <UART_SetConfig+0x164>
 8005b54:	a201      	add	r2, pc, #4	@ (adr r2, 8005b5c <UART_SetConfig+0x110>)
 8005b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5a:	bf00      	nop
 8005b5c:	08005b91 	.word	0x08005b91
 8005b60:	08005bb1 	.word	0x08005bb1
 8005b64:	08005bb1 	.word	0x08005bb1
 8005b68:	08005bb1 	.word	0x08005bb1
 8005b6c:	08005ba1 	.word	0x08005ba1
 8005b70:	08005bb1 	.word	0x08005bb1
 8005b74:	08005bb1 	.word	0x08005bb1
 8005b78:	08005bb1 	.word	0x08005bb1
 8005b7c:	08005b99 	.word	0x08005b99
 8005b80:	08005bb1 	.word	0x08005bb1
 8005b84:	08005bb1 	.word	0x08005bb1
 8005b88:	08005bb1 	.word	0x08005bb1
 8005b8c:	08005ba9 	.word	0x08005ba9
 8005b90:	2300      	movs	r3, #0
 8005b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b96:	e0d8      	b.n	8005d4a <UART_SetConfig+0x2fe>
 8005b98:	2302      	movs	r3, #2
 8005b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b9e:	e0d4      	b.n	8005d4a <UART_SetConfig+0x2fe>
 8005ba0:	2304      	movs	r3, #4
 8005ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ba6:	e0d0      	b.n	8005d4a <UART_SetConfig+0x2fe>
 8005ba8:	2308      	movs	r3, #8
 8005baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bae:	e0cc      	b.n	8005d4a <UART_SetConfig+0x2fe>
 8005bb0:	2310      	movs	r3, #16
 8005bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bb6:	e0c8      	b.n	8005d4a <UART_SetConfig+0x2fe>
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a5e      	ldr	r2, [pc, #376]	@ (8005d38 <UART_SetConfig+0x2ec>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d125      	bne.n	8005c0e <UART_SetConfig+0x1c2>
 8005bc2:	4b5b      	ldr	r3, [pc, #364]	@ (8005d30 <UART_SetConfig+0x2e4>)
 8005bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bc8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005bcc:	2b30      	cmp	r3, #48	@ 0x30
 8005bce:	d016      	beq.n	8005bfe <UART_SetConfig+0x1b2>
 8005bd0:	2b30      	cmp	r3, #48	@ 0x30
 8005bd2:	d818      	bhi.n	8005c06 <UART_SetConfig+0x1ba>
 8005bd4:	2b20      	cmp	r3, #32
 8005bd6:	d00a      	beq.n	8005bee <UART_SetConfig+0x1a2>
 8005bd8:	2b20      	cmp	r3, #32
 8005bda:	d814      	bhi.n	8005c06 <UART_SetConfig+0x1ba>
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d002      	beq.n	8005be6 <UART_SetConfig+0x19a>
 8005be0:	2b10      	cmp	r3, #16
 8005be2:	d008      	beq.n	8005bf6 <UART_SetConfig+0x1aa>
 8005be4:	e00f      	b.n	8005c06 <UART_SetConfig+0x1ba>
 8005be6:	2300      	movs	r3, #0
 8005be8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bec:	e0ad      	b.n	8005d4a <UART_SetConfig+0x2fe>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bf4:	e0a9      	b.n	8005d4a <UART_SetConfig+0x2fe>
 8005bf6:	2304      	movs	r3, #4
 8005bf8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bfc:	e0a5      	b.n	8005d4a <UART_SetConfig+0x2fe>
 8005bfe:	2308      	movs	r3, #8
 8005c00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c04:	e0a1      	b.n	8005d4a <UART_SetConfig+0x2fe>
 8005c06:	2310      	movs	r3, #16
 8005c08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c0c:	e09d      	b.n	8005d4a <UART_SetConfig+0x2fe>
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a4a      	ldr	r2, [pc, #296]	@ (8005d3c <UART_SetConfig+0x2f0>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d125      	bne.n	8005c64 <UART_SetConfig+0x218>
 8005c18:	4b45      	ldr	r3, [pc, #276]	@ (8005d30 <UART_SetConfig+0x2e4>)
 8005c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c1e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005c22:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c24:	d016      	beq.n	8005c54 <UART_SetConfig+0x208>
 8005c26:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c28:	d818      	bhi.n	8005c5c <UART_SetConfig+0x210>
 8005c2a:	2b80      	cmp	r3, #128	@ 0x80
 8005c2c:	d00a      	beq.n	8005c44 <UART_SetConfig+0x1f8>
 8005c2e:	2b80      	cmp	r3, #128	@ 0x80
 8005c30:	d814      	bhi.n	8005c5c <UART_SetConfig+0x210>
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d002      	beq.n	8005c3c <UART_SetConfig+0x1f0>
 8005c36:	2b40      	cmp	r3, #64	@ 0x40
 8005c38:	d008      	beq.n	8005c4c <UART_SetConfig+0x200>
 8005c3a:	e00f      	b.n	8005c5c <UART_SetConfig+0x210>
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c42:	e082      	b.n	8005d4a <UART_SetConfig+0x2fe>
 8005c44:	2302      	movs	r3, #2
 8005c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c4a:	e07e      	b.n	8005d4a <UART_SetConfig+0x2fe>
 8005c4c:	2304      	movs	r3, #4
 8005c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c52:	e07a      	b.n	8005d4a <UART_SetConfig+0x2fe>
 8005c54:	2308      	movs	r3, #8
 8005c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c5a:	e076      	b.n	8005d4a <UART_SetConfig+0x2fe>
 8005c5c:	2310      	movs	r3, #16
 8005c5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c62:	e072      	b.n	8005d4a <UART_SetConfig+0x2fe>
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a35      	ldr	r2, [pc, #212]	@ (8005d40 <UART_SetConfig+0x2f4>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d12a      	bne.n	8005cc4 <UART_SetConfig+0x278>
 8005c6e:	4b30      	ldr	r3, [pc, #192]	@ (8005d30 <UART_SetConfig+0x2e4>)
 8005c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c7c:	d01a      	beq.n	8005cb4 <UART_SetConfig+0x268>
 8005c7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c82:	d81b      	bhi.n	8005cbc <UART_SetConfig+0x270>
 8005c84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c88:	d00c      	beq.n	8005ca4 <UART_SetConfig+0x258>
 8005c8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c8e:	d815      	bhi.n	8005cbc <UART_SetConfig+0x270>
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d003      	beq.n	8005c9c <UART_SetConfig+0x250>
 8005c94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c98:	d008      	beq.n	8005cac <UART_SetConfig+0x260>
 8005c9a:	e00f      	b.n	8005cbc <UART_SetConfig+0x270>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ca2:	e052      	b.n	8005d4a <UART_SetConfig+0x2fe>
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005caa:	e04e      	b.n	8005d4a <UART_SetConfig+0x2fe>
 8005cac:	2304      	movs	r3, #4
 8005cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cb2:	e04a      	b.n	8005d4a <UART_SetConfig+0x2fe>
 8005cb4:	2308      	movs	r3, #8
 8005cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cba:	e046      	b.n	8005d4a <UART_SetConfig+0x2fe>
 8005cbc:	2310      	movs	r3, #16
 8005cbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cc2:	e042      	b.n	8005d4a <UART_SetConfig+0x2fe>
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a17      	ldr	r2, [pc, #92]	@ (8005d28 <UART_SetConfig+0x2dc>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d13a      	bne.n	8005d44 <UART_SetConfig+0x2f8>
 8005cce:	4b18      	ldr	r3, [pc, #96]	@ (8005d30 <UART_SetConfig+0x2e4>)
 8005cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cd4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005cd8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005cdc:	d01a      	beq.n	8005d14 <UART_SetConfig+0x2c8>
 8005cde:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ce2:	d81b      	bhi.n	8005d1c <UART_SetConfig+0x2d0>
 8005ce4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ce8:	d00c      	beq.n	8005d04 <UART_SetConfig+0x2b8>
 8005cea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cee:	d815      	bhi.n	8005d1c <UART_SetConfig+0x2d0>
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d003      	beq.n	8005cfc <UART_SetConfig+0x2b0>
 8005cf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cf8:	d008      	beq.n	8005d0c <UART_SetConfig+0x2c0>
 8005cfa:	e00f      	b.n	8005d1c <UART_SetConfig+0x2d0>
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d02:	e022      	b.n	8005d4a <UART_SetConfig+0x2fe>
 8005d04:	2302      	movs	r3, #2
 8005d06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d0a:	e01e      	b.n	8005d4a <UART_SetConfig+0x2fe>
 8005d0c:	2304      	movs	r3, #4
 8005d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d12:	e01a      	b.n	8005d4a <UART_SetConfig+0x2fe>
 8005d14:	2308      	movs	r3, #8
 8005d16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d1a:	e016      	b.n	8005d4a <UART_SetConfig+0x2fe>
 8005d1c:	2310      	movs	r3, #16
 8005d1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d22:	e012      	b.n	8005d4a <UART_SetConfig+0x2fe>
 8005d24:	cfff69f3 	.word	0xcfff69f3
 8005d28:	40008000 	.word	0x40008000
 8005d2c:	40013800 	.word	0x40013800
 8005d30:	40021000 	.word	0x40021000
 8005d34:	40004400 	.word	0x40004400
 8005d38:	40004800 	.word	0x40004800
 8005d3c:	40004c00 	.word	0x40004c00
 8005d40:	40005000 	.word	0x40005000
 8005d44:	2310      	movs	r3, #16
 8005d46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4aae      	ldr	r2, [pc, #696]	@ (8006008 <UART_SetConfig+0x5bc>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	f040 8097 	bne.w	8005e84 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d56:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005d5a:	2b08      	cmp	r3, #8
 8005d5c:	d823      	bhi.n	8005da6 <UART_SetConfig+0x35a>
 8005d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d64 <UART_SetConfig+0x318>)
 8005d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d64:	08005d89 	.word	0x08005d89
 8005d68:	08005da7 	.word	0x08005da7
 8005d6c:	08005d91 	.word	0x08005d91
 8005d70:	08005da7 	.word	0x08005da7
 8005d74:	08005d97 	.word	0x08005d97
 8005d78:	08005da7 	.word	0x08005da7
 8005d7c:	08005da7 	.word	0x08005da7
 8005d80:	08005da7 	.word	0x08005da7
 8005d84:	08005d9f 	.word	0x08005d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d88:	f7fd fc1e 	bl	80035c8 <HAL_RCC_GetPCLK1Freq>
 8005d8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d8e:	e010      	b.n	8005db2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d90:	4b9e      	ldr	r3, [pc, #632]	@ (800600c <UART_SetConfig+0x5c0>)
 8005d92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d94:	e00d      	b.n	8005db2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d96:	f7fd fba9 	bl	80034ec <HAL_RCC_GetSysClockFreq>
 8005d9a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d9c:	e009      	b.n	8005db2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005da2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005da4:	e005      	b.n	8005db2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005db0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 8130 	beq.w	800601a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dbe:	4a94      	ldr	r2, [pc, #592]	@ (8006010 <UART_SetConfig+0x5c4>)
 8005dc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dcc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	005b      	lsls	r3, r3, #1
 8005dd6:	4413      	add	r3, r2
 8005dd8:	69ba      	ldr	r2, [r7, #24]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d305      	bcc.n	8005dea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d903      	bls.n	8005df2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005df0:	e113      	b.n	800601a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df4:	2200      	movs	r2, #0
 8005df6:	60bb      	str	r3, [r7, #8]
 8005df8:	60fa      	str	r2, [r7, #12]
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfe:	4a84      	ldr	r2, [pc, #528]	@ (8006010 <UART_SetConfig+0x5c4>)
 8005e00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	2200      	movs	r2, #0
 8005e08:	603b      	str	r3, [r7, #0]
 8005e0a:	607a      	str	r2, [r7, #4]
 8005e0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005e14:	f7fa fabc 	bl	8000390 <__aeabi_uldivmod>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	4610      	mov	r0, r2
 8005e1e:	4619      	mov	r1, r3
 8005e20:	f04f 0200 	mov.w	r2, #0
 8005e24:	f04f 0300 	mov.w	r3, #0
 8005e28:	020b      	lsls	r3, r1, #8
 8005e2a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e2e:	0202      	lsls	r2, r0, #8
 8005e30:	6979      	ldr	r1, [r7, #20]
 8005e32:	6849      	ldr	r1, [r1, #4]
 8005e34:	0849      	lsrs	r1, r1, #1
 8005e36:	2000      	movs	r0, #0
 8005e38:	460c      	mov	r4, r1
 8005e3a:	4605      	mov	r5, r0
 8005e3c:	eb12 0804 	adds.w	r8, r2, r4
 8005e40:	eb43 0905 	adc.w	r9, r3, r5
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	469a      	mov	sl, r3
 8005e4c:	4693      	mov	fp, r2
 8005e4e:	4652      	mov	r2, sl
 8005e50:	465b      	mov	r3, fp
 8005e52:	4640      	mov	r0, r8
 8005e54:	4649      	mov	r1, r9
 8005e56:	f7fa fa9b 	bl	8000390 <__aeabi_uldivmod>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	4613      	mov	r3, r2
 8005e60:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e62:	6a3b      	ldr	r3, [r7, #32]
 8005e64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e68:	d308      	bcc.n	8005e7c <UART_SetConfig+0x430>
 8005e6a:	6a3b      	ldr	r3, [r7, #32]
 8005e6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e70:	d204      	bcs.n	8005e7c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	6a3a      	ldr	r2, [r7, #32]
 8005e78:	60da      	str	r2, [r3, #12]
 8005e7a:	e0ce      	b.n	800601a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005e82:	e0ca      	b.n	800601a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	69db      	ldr	r3, [r3, #28]
 8005e88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e8c:	d166      	bne.n	8005f5c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005e8e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005e92:	2b08      	cmp	r3, #8
 8005e94:	d827      	bhi.n	8005ee6 <UART_SetConfig+0x49a>
 8005e96:	a201      	add	r2, pc, #4	@ (adr r2, 8005e9c <UART_SetConfig+0x450>)
 8005e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9c:	08005ec1 	.word	0x08005ec1
 8005ea0:	08005ec9 	.word	0x08005ec9
 8005ea4:	08005ed1 	.word	0x08005ed1
 8005ea8:	08005ee7 	.word	0x08005ee7
 8005eac:	08005ed7 	.word	0x08005ed7
 8005eb0:	08005ee7 	.word	0x08005ee7
 8005eb4:	08005ee7 	.word	0x08005ee7
 8005eb8:	08005ee7 	.word	0x08005ee7
 8005ebc:	08005edf 	.word	0x08005edf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ec0:	f7fd fb82 	bl	80035c8 <HAL_RCC_GetPCLK1Freq>
 8005ec4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ec6:	e014      	b.n	8005ef2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ec8:	f7fd fb94 	bl	80035f4 <HAL_RCC_GetPCLK2Freq>
 8005ecc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ece:	e010      	b.n	8005ef2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ed0:	4b4e      	ldr	r3, [pc, #312]	@ (800600c <UART_SetConfig+0x5c0>)
 8005ed2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ed4:	e00d      	b.n	8005ef2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ed6:	f7fd fb09 	bl	80034ec <HAL_RCC_GetSysClockFreq>
 8005eda:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005edc:	e009      	b.n	8005ef2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ede:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ee2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ee4:	e005      	b.n	8005ef2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005ef0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f000 8090 	beq.w	800601a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efe:	4a44      	ldr	r2, [pc, #272]	@ (8006010 <UART_SetConfig+0x5c4>)
 8005f00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f04:	461a      	mov	r2, r3
 8005f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f08:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f0c:	005a      	lsls	r2, r3, #1
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	085b      	lsrs	r3, r3, #1
 8005f14:	441a      	add	r2, r3
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f20:	6a3b      	ldr	r3, [r7, #32]
 8005f22:	2b0f      	cmp	r3, #15
 8005f24:	d916      	bls.n	8005f54 <UART_SetConfig+0x508>
 8005f26:	6a3b      	ldr	r3, [r7, #32]
 8005f28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f2c:	d212      	bcs.n	8005f54 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f2e:	6a3b      	ldr	r3, [r7, #32]
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	f023 030f 	bic.w	r3, r3, #15
 8005f36:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	085b      	lsrs	r3, r3, #1
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	f003 0307 	and.w	r3, r3, #7
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	8bfb      	ldrh	r3, [r7, #30]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	8bfa      	ldrh	r2, [r7, #30]
 8005f50:	60da      	str	r2, [r3, #12]
 8005f52:	e062      	b.n	800601a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005f5a:	e05e      	b.n	800601a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f5c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005f60:	2b08      	cmp	r3, #8
 8005f62:	d828      	bhi.n	8005fb6 <UART_SetConfig+0x56a>
 8005f64:	a201      	add	r2, pc, #4	@ (adr r2, 8005f6c <UART_SetConfig+0x520>)
 8005f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6a:	bf00      	nop
 8005f6c:	08005f91 	.word	0x08005f91
 8005f70:	08005f99 	.word	0x08005f99
 8005f74:	08005fa1 	.word	0x08005fa1
 8005f78:	08005fb7 	.word	0x08005fb7
 8005f7c:	08005fa7 	.word	0x08005fa7
 8005f80:	08005fb7 	.word	0x08005fb7
 8005f84:	08005fb7 	.word	0x08005fb7
 8005f88:	08005fb7 	.word	0x08005fb7
 8005f8c:	08005faf 	.word	0x08005faf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f90:	f7fd fb1a 	bl	80035c8 <HAL_RCC_GetPCLK1Freq>
 8005f94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f96:	e014      	b.n	8005fc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f98:	f7fd fb2c 	bl	80035f4 <HAL_RCC_GetPCLK2Freq>
 8005f9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f9e:	e010      	b.n	8005fc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800600c <UART_SetConfig+0x5c0>)
 8005fa2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fa4:	e00d      	b.n	8005fc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fa6:	f7fd faa1 	bl	80034ec <HAL_RCC_GetSysClockFreq>
 8005faa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fac:	e009      	b.n	8005fc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fb4:	e005      	b.n	8005fc2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005fc0:	bf00      	nop
    }

    if (pclk != 0U)
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d028      	beq.n	800601a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fcc:	4a10      	ldr	r2, [pc, #64]	@ (8006010 <UART_SetConfig+0x5c4>)
 8005fce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd6:	fbb3 f2f2 	udiv	r2, r3, r2
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	085b      	lsrs	r3, r3, #1
 8005fe0:	441a      	add	r2, r3
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fec:	6a3b      	ldr	r3, [r7, #32]
 8005fee:	2b0f      	cmp	r3, #15
 8005ff0:	d910      	bls.n	8006014 <UART_SetConfig+0x5c8>
 8005ff2:	6a3b      	ldr	r3, [r7, #32]
 8005ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ff8:	d20c      	bcs.n	8006014 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	60da      	str	r2, [r3, #12]
 8006004:	e009      	b.n	800601a <UART_SetConfig+0x5ce>
 8006006:	bf00      	nop
 8006008:	40008000 	.word	0x40008000
 800600c:	00f42400 	.word	0x00f42400
 8006010:	0801576c 	.word	0x0801576c
      }
      else
      {
        ret = HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	2201      	movs	r2, #1
 800601e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	2201      	movs	r2, #1
 8006026:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	2200      	movs	r2, #0
 800602e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	2200      	movs	r2, #0
 8006034:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006036:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800603a:	4618      	mov	r0, r3
 800603c:	3730      	adds	r7, #48	@ 0x30
 800603e:	46bd      	mov	sp, r7
 8006040:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006044 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006050:	f003 0308 	and.w	r3, r3, #8
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00a      	beq.n	800606e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	430a      	orrs	r2, r1
 800606c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00a      	beq.n	8006090 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006094:	f003 0302 	and.w	r3, r3, #2
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00a      	beq.n	80060b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	430a      	orrs	r2, r1
 80060b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b6:	f003 0304 	and.w	r3, r3, #4
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00a      	beq.n	80060d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	430a      	orrs	r2, r1
 80060d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d8:	f003 0310 	and.w	r3, r3, #16
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00a      	beq.n	80060f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	430a      	orrs	r2, r1
 80060f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060fa:	f003 0320 	and.w	r3, r3, #32
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00a      	beq.n	8006118 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	430a      	orrs	r2, r1
 8006116:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800611c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006120:	2b00      	cmp	r3, #0
 8006122:	d01a      	beq.n	800615a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800613e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006142:	d10a      	bne.n	800615a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	430a      	orrs	r2, r1
 8006158:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800615e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00a      	beq.n	800617c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	430a      	orrs	r2, r1
 800617a:	605a      	str	r2, [r3, #4]
  }
}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b098      	sub	sp, #96	@ 0x60
 800618c:	af02      	add	r7, sp, #8
 800618e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006198:	f7fb fe70 	bl	8001e7c <HAL_GetTick>
 800619c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0308 	and.w	r3, r3, #8
 80061a8:	2b08      	cmp	r3, #8
 80061aa:	d12f      	bne.n	800620c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061b4:	2200      	movs	r2, #0
 80061b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f88e 	bl	80062dc <UART_WaitOnFlagUntilTimeout>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d022      	beq.n	800620c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ce:	e853 3f00 	ldrex	r3, [r3]
 80061d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061da:	653b      	str	r3, [r7, #80]	@ 0x50
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	461a      	mov	r2, r3
 80061e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80061e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80061ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061ec:	e841 2300 	strex	r3, r2, [r1]
 80061f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80061f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1e6      	bne.n	80061c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2220      	movs	r2, #32
 80061fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e063      	b.n	80062d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 0304 	and.w	r3, r3, #4
 8006216:	2b04      	cmp	r3, #4
 8006218:	d149      	bne.n	80062ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800621a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006222:	2200      	movs	r2, #0
 8006224:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 f857 	bl	80062dc <UART_WaitOnFlagUntilTimeout>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d03c      	beq.n	80062ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623c:	e853 3f00 	ldrex	r3, [r3]
 8006240:	623b      	str	r3, [r7, #32]
   return(result);
 8006242:	6a3b      	ldr	r3, [r7, #32]
 8006244:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006248:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	461a      	mov	r2, r3
 8006250:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006252:	633b      	str	r3, [r7, #48]	@ 0x30
 8006254:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006256:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006258:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800625a:	e841 2300 	strex	r3, r2, [r1]
 800625e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1e6      	bne.n	8006234 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	3308      	adds	r3, #8
 800626c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	e853 3f00 	ldrex	r3, [r3]
 8006274:	60fb      	str	r3, [r7, #12]
   return(result);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f023 0301 	bic.w	r3, r3, #1
 800627c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	3308      	adds	r3, #8
 8006284:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006286:	61fa      	str	r2, [r7, #28]
 8006288:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628a:	69b9      	ldr	r1, [r7, #24]
 800628c:	69fa      	ldr	r2, [r7, #28]
 800628e:	e841 2300 	strex	r3, r2, [r1]
 8006292:	617b      	str	r3, [r7, #20]
   return(result);
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1e5      	bne.n	8006266 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2220      	movs	r2, #32
 800629e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e012      	b.n	80062d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2220      	movs	r2, #32
 80062b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2220      	movs	r2, #32
 80062ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3758      	adds	r7, #88	@ 0x58
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	603b      	str	r3, [r7, #0]
 80062e8:	4613      	mov	r3, r2
 80062ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062ec:	e04f      	b.n	800638e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062f4:	d04b      	beq.n	800638e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062f6:	f7fb fdc1 	bl	8001e7c <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	429a      	cmp	r2, r3
 8006304:	d302      	bcc.n	800630c <UART_WaitOnFlagUntilTimeout+0x30>
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d101      	bne.n	8006310 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e04e      	b.n	80063ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0304 	and.w	r3, r3, #4
 800631a:	2b00      	cmp	r3, #0
 800631c:	d037      	beq.n	800638e <UART_WaitOnFlagUntilTimeout+0xb2>
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	2b80      	cmp	r3, #128	@ 0x80
 8006322:	d034      	beq.n	800638e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	2b40      	cmp	r3, #64	@ 0x40
 8006328:	d031      	beq.n	800638e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	f003 0308 	and.w	r3, r3, #8
 8006334:	2b08      	cmp	r3, #8
 8006336:	d110      	bne.n	800635a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2208      	movs	r2, #8
 800633e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f000 f920 	bl	8006586 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2208      	movs	r2, #8
 800634a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e029      	b.n	80063ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	69db      	ldr	r3, [r3, #28]
 8006360:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006364:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006368:	d111      	bne.n	800638e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006372:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 f906 	bl	8006586 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2220      	movs	r2, #32
 800637e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e00f      	b.n	80063ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	69da      	ldr	r2, [r3, #28]
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	4013      	ands	r3, r2
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	429a      	cmp	r2, r3
 800639c:	bf0c      	ite	eq
 800639e:	2301      	moveq	r3, #1
 80063a0:	2300      	movne	r3, #0
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	461a      	mov	r2, r3
 80063a6:	79fb      	ldrb	r3, [r7, #7]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d0a0      	beq.n	80062ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
	...

080063b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b096      	sub	sp, #88	@ 0x58
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	4613      	mov	r3, r2
 80063c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	88fa      	ldrh	r2, [r7, #6]
 80063d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2222      	movs	r2, #34	@ 0x22
 80063e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d02d      	beq.n	800644a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063f4:	4a40      	ldr	r2, [pc, #256]	@ (80064f8 <UART_Start_Receive_DMA+0x140>)
 80063f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063fe:	4a3f      	ldr	r2, [pc, #252]	@ (80064fc <UART_Start_Receive_DMA+0x144>)
 8006400:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006408:	4a3d      	ldr	r2, [pc, #244]	@ (8006500 <UART_Start_Receive_DMA+0x148>)
 800640a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006412:	2200      	movs	r2, #0
 8006414:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	3324      	adds	r3, #36	@ 0x24
 8006422:	4619      	mov	r1, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006428:	461a      	mov	r2, r3
 800642a:	88fb      	ldrh	r3, [r7, #6]
 800642c:	f7fb feba 	bl	80021a4 <HAL_DMA_Start_IT>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d009      	beq.n	800644a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2210      	movs	r2, #16
 800643a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2220      	movs	r2, #32
 8006442:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e051      	b.n	80064ee <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d018      	beq.n	8006484 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800645a:	e853 3f00 	ldrex	r3, [r3]
 800645e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006462:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006466:	657b      	str	r3, [r7, #84]	@ 0x54
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	461a      	mov	r2, r3
 800646e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006470:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006472:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006474:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006476:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006478:	e841 2300 	strex	r3, r2, [r1]
 800647c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800647e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1e6      	bne.n	8006452 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	3308      	adds	r3, #8
 800648a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800648e:	e853 3f00 	ldrex	r3, [r3]
 8006492:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006496:	f043 0301 	orr.w	r3, r3, #1
 800649a:	653b      	str	r3, [r7, #80]	@ 0x50
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	3308      	adds	r3, #8
 80064a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80064a4:	637a      	str	r2, [r7, #52]	@ 0x34
 80064a6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80064aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80064ac:	e841 2300 	strex	r3, r2, [r1]
 80064b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80064b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1e5      	bne.n	8006484 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	3308      	adds	r3, #8
 80064be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	e853 3f00 	ldrex	r3, [r3]
 80064c6:	613b      	str	r3, [r7, #16]
   return(result);
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3308      	adds	r3, #8
 80064d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80064d8:	623a      	str	r2, [r7, #32]
 80064da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064dc:	69f9      	ldr	r1, [r7, #28]
 80064de:	6a3a      	ldr	r2, [r7, #32]
 80064e0:	e841 2300 	strex	r3, r2, [r1]
 80064e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1e5      	bne.n	80064b8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3758      	adds	r7, #88	@ 0x58
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	08006709 	.word	0x08006709
 80064fc:	08006835 	.word	0x08006835
 8006500:	08006873 	.word	0x08006873

08006504 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006504:	b480      	push	{r7}
 8006506:	b08f      	sub	sp, #60	@ 0x3c
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006512:	6a3b      	ldr	r3, [r7, #32]
 8006514:	e853 3f00 	ldrex	r3, [r3]
 8006518:	61fb      	str	r3, [r7, #28]
   return(result);
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006520:	637b      	str	r3, [r7, #52]	@ 0x34
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	461a      	mov	r2, r3
 8006528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800652a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800652c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006530:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006532:	e841 2300 	strex	r3, r2, [r1]
 8006536:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1e6      	bne.n	800650c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	3308      	adds	r3, #8
 8006544:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	e853 3f00 	ldrex	r3, [r3]
 800654c:	60bb      	str	r3, [r7, #8]
   return(result);
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006554:	633b      	str	r3, [r7, #48]	@ 0x30
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3308      	adds	r3, #8
 800655c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800655e:	61ba      	str	r2, [r7, #24]
 8006560:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006562:	6979      	ldr	r1, [r7, #20]
 8006564:	69ba      	ldr	r2, [r7, #24]
 8006566:	e841 2300 	strex	r3, r2, [r1]
 800656a:	613b      	str	r3, [r7, #16]
   return(result);
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1e5      	bne.n	800653e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2220      	movs	r2, #32
 8006576:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800657a:	bf00      	nop
 800657c:	373c      	adds	r7, #60	@ 0x3c
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006586:	b480      	push	{r7}
 8006588:	b095      	sub	sp, #84	@ 0x54
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006596:	e853 3f00 	ldrex	r3, [r3]
 800659a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800659c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	461a      	mov	r2, r3
 80065aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80065ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80065b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065b4:	e841 2300 	strex	r3, r2, [r1]
 80065b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1e6      	bne.n	800658e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	3308      	adds	r3, #8
 80065c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c8:	6a3b      	ldr	r3, [r7, #32]
 80065ca:	e853 3f00 	ldrex	r3, [r3]
 80065ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065d6:	f023 0301 	bic.w	r3, r3, #1
 80065da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	3308      	adds	r3, #8
 80065e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065ec:	e841 2300 	strex	r3, r2, [r1]
 80065f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80065f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1e3      	bne.n	80065c0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d118      	bne.n	8006632 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	e853 3f00 	ldrex	r3, [r3]
 800660c:	60bb      	str	r3, [r7, #8]
   return(result);
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	f023 0310 	bic.w	r3, r3, #16
 8006614:	647b      	str	r3, [r7, #68]	@ 0x44
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	461a      	mov	r2, r3
 800661c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800661e:	61bb      	str	r3, [r7, #24]
 8006620:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006622:	6979      	ldr	r1, [r7, #20]
 8006624:	69ba      	ldr	r2, [r7, #24]
 8006626:	e841 2300 	strex	r3, r2, [r1]
 800662a:	613b      	str	r3, [r7, #16]
   return(result);
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1e6      	bne.n	8006600 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2220      	movs	r2, #32
 8006636:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006646:	bf00      	nop
 8006648:	3754      	adds	r7, #84	@ 0x54
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b090      	sub	sp, #64	@ 0x40
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800665e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0320 	and.w	r3, r3, #32
 800666a:	2b00      	cmp	r3, #0
 800666c:	d137      	bne.n	80066de <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800666e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006670:	2200      	movs	r2, #0
 8006672:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	3308      	adds	r3, #8
 800667c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006680:	e853 3f00 	ldrex	r3, [r3]
 8006684:	623b      	str	r3, [r7, #32]
   return(result);
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800668c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800668e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3308      	adds	r3, #8
 8006694:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006696:	633a      	str	r2, [r7, #48]	@ 0x30
 8006698:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800669c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800669e:	e841 2300 	strex	r3, r2, [r1]
 80066a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1e5      	bne.n	8006676 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80066aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	e853 3f00 	ldrex	r3, [r3]
 80066b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066be:	637b      	str	r3, [r7, #52]	@ 0x34
 80066c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	461a      	mov	r2, r3
 80066c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066c8:	61fb      	str	r3, [r7, #28]
 80066ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066cc:	69b9      	ldr	r1, [r7, #24]
 80066ce:	69fa      	ldr	r2, [r7, #28]
 80066d0:	e841 2300 	strex	r3, r2, [r1]
 80066d4:	617b      	str	r3, [r7, #20]
   return(result);
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1e6      	bne.n	80066aa <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80066dc:	e002      	b.n	80066e4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80066de:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80066e0:	f7ff f976 	bl	80059d0 <HAL_UART_TxCpltCallback>
}
 80066e4:	bf00      	nop
 80066e6:	3740      	adds	r7, #64	@ 0x40
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f7ff f972 	bl	80059e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006700:	bf00      	nop
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b09c      	sub	sp, #112	@ 0x70
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006714:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0320 	and.w	r3, r3, #32
 8006720:	2b00      	cmp	r3, #0
 8006722:	d171      	bne.n	8006808 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006724:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006726:	2200      	movs	r2, #0
 8006728:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800672c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006732:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006734:	e853 3f00 	ldrex	r3, [r3]
 8006738:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800673a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800673c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006740:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006742:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	461a      	mov	r2, r3
 8006748:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800674a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800674c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006750:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006752:	e841 2300 	strex	r3, r2, [r1]
 8006756:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006758:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1e6      	bne.n	800672c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800675e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3308      	adds	r3, #8
 8006764:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006768:	e853 3f00 	ldrex	r3, [r3]
 800676c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800676e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006770:	f023 0301 	bic.w	r3, r3, #1
 8006774:	667b      	str	r3, [r7, #100]	@ 0x64
 8006776:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	3308      	adds	r3, #8
 800677c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800677e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006780:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006782:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006784:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006786:	e841 2300 	strex	r3, r2, [r1]
 800678a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800678c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1e5      	bne.n	800675e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006792:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	3308      	adds	r3, #8
 8006798:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679c:	e853 3f00 	ldrex	r3, [r3]
 80067a0:	623b      	str	r3, [r7, #32]
   return(result);
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80067aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	3308      	adds	r3, #8
 80067b0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80067b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80067b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067ba:	e841 2300 	strex	r3, r2, [r1]
 80067be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1e5      	bne.n	8006792 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80067c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067c8:	2220      	movs	r2, #32
 80067ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d118      	bne.n	8006808 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	e853 3f00 	ldrex	r3, [r3]
 80067e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f023 0310 	bic.w	r3, r3, #16
 80067ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	461a      	mov	r2, r3
 80067f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067f4:	61fb      	str	r3, [r7, #28]
 80067f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f8:	69b9      	ldr	r1, [r7, #24]
 80067fa:	69fa      	ldr	r2, [r7, #28]
 80067fc:	e841 2300 	strex	r3, r2, [r1]
 8006800:	617b      	str	r3, [r7, #20]
   return(result);
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1e6      	bne.n	80067d6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006808:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800680a:	2200      	movs	r2, #0
 800680c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800680e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006810:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006812:	2b01      	cmp	r3, #1
 8006814:	d107      	bne.n	8006826 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006816:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006818:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800681c:	4619      	mov	r1, r3
 800681e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006820:	f7ff f908 	bl	8005a34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006824:	e002      	b.n	800682c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006826:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006828:	f7ff f8e6 	bl	80059f8 <HAL_UART_RxCpltCallback>
}
 800682c:	bf00      	nop
 800682e:	3770      	adds	r7, #112	@ 0x70
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006840:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2201      	movs	r2, #1
 8006846:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800684c:	2b01      	cmp	r3, #1
 800684e:	d109      	bne.n	8006864 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006856:	085b      	lsrs	r3, r3, #1
 8006858:	b29b      	uxth	r3, r3
 800685a:	4619      	mov	r1, r3
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f7ff f8e9 	bl	8005a34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006862:	e002      	b.n	800686a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f7ff f8d1 	bl	8005a0c <HAL_UART_RxHalfCpltCallback>
}
 800686a:	bf00      	nop
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b086      	sub	sp, #24
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800687e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006886:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800688e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800689a:	2b80      	cmp	r3, #128	@ 0x80
 800689c:	d109      	bne.n	80068b2 <UART_DMAError+0x40>
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	2b21      	cmp	r3, #33	@ 0x21
 80068a2:	d106      	bne.n	80068b2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80068ac:	6978      	ldr	r0, [r7, #20]
 80068ae:	f7ff fe29 	bl	8006504 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068bc:	2b40      	cmp	r3, #64	@ 0x40
 80068be:	d109      	bne.n	80068d4 <UART_DMAError+0x62>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2b22      	cmp	r3, #34	@ 0x22
 80068c4:	d106      	bne.n	80068d4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80068ce:	6978      	ldr	r0, [r7, #20]
 80068d0:	f7ff fe59 	bl	8006586 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068da:	f043 0210 	orr.w	r2, r3, #16
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068e4:	6978      	ldr	r0, [r7, #20]
 80068e6:	f7ff f89b 	bl	8005a20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068ea:	bf00      	nop
 80068ec:	3718      	adds	r7, #24
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b084      	sub	sp, #16
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f7ff f889 	bl	8005a20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800690e:	bf00      	nop
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b088      	sub	sp, #32
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	e853 3f00 	ldrex	r3, [r3]
 800692a:	60bb      	str	r3, [r7, #8]
   return(result);
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006932:	61fb      	str	r3, [r7, #28]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	461a      	mov	r2, r3
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	61bb      	str	r3, [r7, #24]
 800693e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006940:	6979      	ldr	r1, [r7, #20]
 8006942:	69ba      	ldr	r2, [r7, #24]
 8006944:	e841 2300 	strex	r3, r2, [r1]
 8006948:	613b      	str	r3, [r7, #16]
   return(result);
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1e6      	bne.n	800691e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2220      	movs	r2, #32
 8006954:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f7ff f836 	bl	80059d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006964:	bf00      	nop
 8006966:	3720      	adds	r7, #32
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
 8006978:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d101      	bne.n	8006984 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e058      	b.n	8006a36 <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800698a:	2b00      	cmp	r3, #0
 800698c:	d106      	bne.n	800699c <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f7fb f894 	bl	8001ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2224      	movs	r2, #36	@ 0x24
 80069a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f022 0201 	bic.w	r2, r2, #1
 80069b2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d002      	beq.n	80069c2 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f7ff fb41 	bl	8006044 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f7ff f842 	bl	8005a4c <UART_SetConfig>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d101      	bne.n	80069d2 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e031      	b.n	8006a36 <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689a      	ldr	r2, [r3, #8]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069e0:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	055b      	lsls	r3, r3, #21
 80069fa:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	041b      	lsls	r3, r3, #16
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8006a10:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	6812      	ldr	r2, [r2, #0]
 8006a18:	6979      	ldr	r1, [r7, #20]
 8006a1a:	430b      	orrs	r3, r1
 8006a1c:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f042 0201 	orr.w	r2, r2, #1
 8006a2c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f7ff fbaa 	bl	8006188 <UART_CheckIdleState>
 8006a34:	4603      	mov	r3, r0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3718      	adds	r7, #24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b083      	sub	sp, #12
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006a46:	bf00      	nop
 8006a48:	370c      	adds	r7, #12
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr

08006a52 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b083      	sub	sp, #12
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006a5a:	bf00      	nop
 8006a5c:	370c      	adds	r7, #12
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr

08006a66 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006a66:	b480      	push	{r7}
 8006a68:	b083      	sub	sp, #12
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006a6e:	bf00      	nop
 8006a70:	370c      	adds	r7, #12
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b085      	sub	sp, #20
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d101      	bne.n	8006a90 <HAL_UARTEx_DisableFifoMode+0x16>
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	e027      	b.n	8006ae0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2224      	movs	r2, #36	@ 0x24
 8006a9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f022 0201 	bic.w	r2, r2, #1
 8006ab6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006abe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3714      	adds	r7, #20
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d101      	bne.n	8006b04 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006b00:	2302      	movs	r3, #2
 8006b02:	e02d      	b.n	8006b60 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2224      	movs	r2, #36	@ 0x24
 8006b10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f022 0201 	bic.w	r2, r2, #1
 8006b2a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	683a      	ldr	r2, [r7, #0]
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f84f 	bl	8006be4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2220      	movs	r2, #32
 8006b52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d101      	bne.n	8006b80 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	e02d      	b.n	8006bdc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2224      	movs	r2, #36	@ 0x24
 8006b8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f022 0201 	bic.w	r2, r2, #1
 8006ba6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	683a      	ldr	r2, [r7, #0]
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 f811 	bl	8006be4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d108      	bne.n	8006c06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006c04:	e031      	b.n	8006c6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006c06:	2308      	movs	r3, #8
 8006c08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006c0a:	2308      	movs	r3, #8
 8006c0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	0e5b      	lsrs	r3, r3, #25
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	f003 0307 	and.w	r3, r3, #7
 8006c1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	0f5b      	lsrs	r3, r3, #29
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	f003 0307 	and.w	r3, r3, #7
 8006c2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c2e:	7bbb      	ldrb	r3, [r7, #14]
 8006c30:	7b3a      	ldrb	r2, [r7, #12]
 8006c32:	4911      	ldr	r1, [pc, #68]	@ (8006c78 <UARTEx_SetNbDataToProcess+0x94>)
 8006c34:	5c8a      	ldrb	r2, [r1, r2]
 8006c36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006c3a:	7b3a      	ldrb	r2, [r7, #12]
 8006c3c:	490f      	ldr	r1, [pc, #60]	@ (8006c7c <UARTEx_SetNbDataToProcess+0x98>)
 8006c3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c40:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c44:	b29a      	uxth	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c4c:	7bfb      	ldrb	r3, [r7, #15]
 8006c4e:	7b7a      	ldrb	r2, [r7, #13]
 8006c50:	4909      	ldr	r1, [pc, #36]	@ (8006c78 <UARTEx_SetNbDataToProcess+0x94>)
 8006c52:	5c8a      	ldrb	r2, [r1, r2]
 8006c54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006c58:	7b7a      	ldrb	r2, [r7, #13]
 8006c5a:	4908      	ldr	r1, [pc, #32]	@ (8006c7c <UARTEx_SetNbDataToProcess+0x98>)
 8006c5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006c6a:	bf00      	nop
 8006c6c:	3714      	adds	r7, #20
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	08015784 	.word	0x08015784
 8006c7c:	0801578c 	.word	0x0801578c

08006c80 <__NVIC_SetPriority>:
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	4603      	mov	r3, r0
 8006c88:	6039      	str	r1, [r7, #0]
 8006c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	db0a      	blt.n	8006caa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	b2da      	uxtb	r2, r3
 8006c98:	490c      	ldr	r1, [pc, #48]	@ (8006ccc <__NVIC_SetPriority+0x4c>)
 8006c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c9e:	0112      	lsls	r2, r2, #4
 8006ca0:	b2d2      	uxtb	r2, r2
 8006ca2:	440b      	add	r3, r1
 8006ca4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006ca8:	e00a      	b.n	8006cc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	b2da      	uxtb	r2, r3
 8006cae:	4908      	ldr	r1, [pc, #32]	@ (8006cd0 <__NVIC_SetPriority+0x50>)
 8006cb0:	79fb      	ldrb	r3, [r7, #7]
 8006cb2:	f003 030f 	and.w	r3, r3, #15
 8006cb6:	3b04      	subs	r3, #4
 8006cb8:	0112      	lsls	r2, r2, #4
 8006cba:	b2d2      	uxtb	r2, r2
 8006cbc:	440b      	add	r3, r1
 8006cbe:	761a      	strb	r2, [r3, #24]
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	e000e100 	.word	0xe000e100
 8006cd0:	e000ed00 	.word	0xe000ed00

08006cd4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006cd8:	4b05      	ldr	r3, [pc, #20]	@ (8006cf0 <SysTick_Handler+0x1c>)
 8006cda:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006cdc:	f001 fd6e 	bl	80087bc <xTaskGetSchedulerState>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d001      	beq.n	8006cea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006ce6:	f002 fb67 	bl	80093b8 <xPortSysTickHandler>
  }
}
 8006cea:	bf00      	nop
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	e000e010 	.word	0xe000e010

08006cf4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	f06f 0004 	mvn.w	r0, #4
 8006cfe:	f7ff ffbf 	bl	8006c80 <__NVIC_SetPriority>
#endif
}
 8006d02:	bf00      	nop
 8006d04:	bd80      	pop	{r7, pc}
	...

08006d08 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d0e:	f3ef 8305 	mrs	r3, IPSR
 8006d12:	603b      	str	r3, [r7, #0]
  return(result);
 8006d14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d003      	beq.n	8006d22 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006d1a:	f06f 0305 	mvn.w	r3, #5
 8006d1e:	607b      	str	r3, [r7, #4]
 8006d20:	e00c      	b.n	8006d3c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006d22:	4b0a      	ldr	r3, [pc, #40]	@ (8006d4c <osKernelInitialize+0x44>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d105      	bne.n	8006d36 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006d2a:	4b08      	ldr	r3, [pc, #32]	@ (8006d4c <osKernelInitialize+0x44>)
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006d30:	2300      	movs	r3, #0
 8006d32:	607b      	str	r3, [r7, #4]
 8006d34:	e002      	b.n	8006d3c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006d36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006d3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006d3c:	687b      	ldr	r3, [r7, #4]
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	20004808 	.word	0x20004808

08006d50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d56:	f3ef 8305 	mrs	r3, IPSR
 8006d5a:	603b      	str	r3, [r7, #0]
  return(result);
 8006d5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d003      	beq.n	8006d6a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006d62:	f06f 0305 	mvn.w	r3, #5
 8006d66:	607b      	str	r3, [r7, #4]
 8006d68:	e010      	b.n	8006d8c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8006d98 <osKernelStart+0x48>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d109      	bne.n	8006d86 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006d72:	f7ff ffbf 	bl	8006cf4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006d76:	4b08      	ldr	r3, [pc, #32]	@ (8006d98 <osKernelStart+0x48>)
 8006d78:	2202      	movs	r2, #2
 8006d7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006d7c:	f001 f892 	bl	8007ea4 <vTaskStartScheduler>
      stat = osOK;
 8006d80:	2300      	movs	r3, #0
 8006d82:	607b      	str	r3, [r7, #4]
 8006d84:	e002      	b.n	8006d8c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006d86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006d8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006d8c:	687b      	ldr	r3, [r7, #4]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3708      	adds	r7, #8
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	20004808 	.word	0x20004808

08006d9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b08e      	sub	sp, #56	@ 0x38
 8006da0:	af04      	add	r7, sp, #16
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006da8:	2300      	movs	r3, #0
 8006daa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dac:	f3ef 8305 	mrs	r3, IPSR
 8006db0:	617b      	str	r3, [r7, #20]
  return(result);
 8006db2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d17e      	bne.n	8006eb6 <osThreadNew+0x11a>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d07b      	beq.n	8006eb6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006dbe:	2380      	movs	r3, #128	@ 0x80
 8006dc0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006dc2:	2318      	movs	r3, #24
 8006dc4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006dca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006dce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d045      	beq.n	8006e62 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d002      	beq.n	8006de4 <osThreadNew+0x48>
        name = attr->name;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d002      	beq.n	8006df2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d008      	beq.n	8006e0a <osThreadNew+0x6e>
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	2b38      	cmp	r3, #56	@ 0x38
 8006dfc:	d805      	bhi.n	8006e0a <osThreadNew+0x6e>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d001      	beq.n	8006e0e <osThreadNew+0x72>
        return (NULL);
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	e054      	b.n	8006eb8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d003      	beq.n	8006e1e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	089b      	lsrs	r3, r3, #2
 8006e1c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00e      	beq.n	8006e44 <osThreadNew+0xa8>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	2ba7      	cmp	r3, #167	@ 0xa7
 8006e2c:	d90a      	bls.n	8006e44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d006      	beq.n	8006e44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d002      	beq.n	8006e44 <osThreadNew+0xa8>
        mem = 1;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	61bb      	str	r3, [r7, #24]
 8006e42:	e010      	b.n	8006e66 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10c      	bne.n	8006e66 <osThreadNew+0xca>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d108      	bne.n	8006e66 <osThreadNew+0xca>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d104      	bne.n	8006e66 <osThreadNew+0xca>
          mem = 0;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	61bb      	str	r3, [r7, #24]
 8006e60:	e001      	b.n	8006e66 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006e62:	2300      	movs	r3, #0
 8006e64:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d110      	bne.n	8006e8e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e74:	9202      	str	r2, [sp, #8]
 8006e76:	9301      	str	r3, [sp, #4]
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	6a3a      	ldr	r2, [r7, #32]
 8006e80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f000 fe1a 	bl	8007abc <xTaskCreateStatic>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	613b      	str	r3, [r7, #16]
 8006e8c:	e013      	b.n	8006eb6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d110      	bne.n	8006eb6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	f107 0310 	add.w	r3, r7, #16
 8006e9c:	9301      	str	r3, [sp, #4]
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 fe68 	bl	8007b7c <xTaskCreate>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d001      	beq.n	8006eb6 <osThreadNew+0x11a>
            hTask = NULL;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006eb6:	693b      	ldr	r3, [r7, #16]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3728      	adds	r7, #40	@ 0x28
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ec8:	f3ef 8305 	mrs	r3, IPSR
 8006ecc:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ece:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d003      	beq.n	8006edc <osDelay+0x1c>
    stat = osErrorISR;
 8006ed4:	f06f 0305 	mvn.w	r3, #5
 8006ed8:	60fb      	str	r3, [r7, #12]
 8006eda:	e007      	b.n	8006eec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006edc:	2300      	movs	r3, #0
 8006ede:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d002      	beq.n	8006eec <osDelay+0x2c>
      vTaskDelay(ticks);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 ffa6 	bl	8007e38 <vTaskDelay>
    }
  }

  return (stat);
 8006eec:	68fb      	ldr	r3, [r7, #12]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
	...

08006ef8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4a07      	ldr	r2, [pc, #28]	@ (8006f24 <vApplicationGetIdleTaskMemory+0x2c>)
 8006f08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	4a06      	ldr	r2, [pc, #24]	@ (8006f28 <vApplicationGetIdleTaskMemory+0x30>)
 8006f0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2280      	movs	r2, #128	@ 0x80
 8006f14:	601a      	str	r2, [r3, #0]
}
 8006f16:	bf00      	nop
 8006f18:	3714      	adds	r7, #20
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	2000480c 	.word	0x2000480c
 8006f28:	200048b4 	.word	0x200048b4

08006f2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	4a07      	ldr	r2, [pc, #28]	@ (8006f58 <vApplicationGetTimerTaskMemory+0x2c>)
 8006f3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	4a06      	ldr	r2, [pc, #24]	@ (8006f5c <vApplicationGetTimerTaskMemory+0x30>)
 8006f42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006f4a:	601a      	str	r2, [r3, #0]
}
 8006f4c:	bf00      	nop
 8006f4e:	3714      	adds	r7, #20
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr
 8006f58:	20004ab4 	.word	0x20004ab4
 8006f5c:	20004b5c 	.word	0x20004b5c

08006f60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f103 0208 	add.w	r2, r3, #8
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f103 0208 	add.w	r2, r3, #8
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f103 0208 	add.w	r2, r3, #8
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006fae:	bf00      	nop
 8006fb0:	370c      	adds	r7, #12
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr

08006fba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b085      	sub	sp, #20
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
 8006fc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	689a      	ldr	r2, [r3, #8]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	683a      	ldr	r2, [r7, #0]
 8006fde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	1c5a      	adds	r2, r3, #1
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	601a      	str	r2, [r3, #0]
}
 8006ff6:	bf00      	nop
 8006ff8:	3714      	adds	r7, #20
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007002:	b480      	push	{r7}
 8007004:	b085      	sub	sp, #20
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
 800700a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007018:	d103      	bne.n	8007022 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	60fb      	str	r3, [r7, #12]
 8007020:	e00c      	b.n	800703c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	3308      	adds	r3, #8
 8007026:	60fb      	str	r3, [r7, #12]
 8007028:	e002      	b.n	8007030 <vListInsert+0x2e>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	60fb      	str	r3, [r7, #12]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	429a      	cmp	r2, r3
 800703a:	d2f6      	bcs.n	800702a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	683a      	ldr	r2, [r7, #0]
 800704a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	683a      	ldr	r2, [r7, #0]
 8007056:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	1c5a      	adds	r2, r3, #1
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	601a      	str	r2, [r3, #0]
}
 8007068:	bf00      	nop
 800706a:	3714      	adds	r7, #20
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	6892      	ldr	r2, [r2, #8]
 800708a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	6852      	ldr	r2, [r2, #4]
 8007094:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	429a      	cmp	r2, r3
 800709e:	d103      	bne.n	80070a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	689a      	ldr	r2, [r3, #8]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	1e5a      	subs	r2, r3, #1
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3714      	adds	r7, #20
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10b      	bne.n	80070f4 <xQueueGenericReset+0x2c>
	__asm volatile
 80070dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e0:	f383 8811 	msr	BASEPRI, r3
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	f3bf 8f4f 	dsb	sy
 80070ec:	60bb      	str	r3, [r7, #8]
}
 80070ee:	bf00      	nop
 80070f0:	bf00      	nop
 80070f2:	e7fd      	b.n	80070f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80070f4:	f002 f8d0 	bl	8009298 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007100:	68f9      	ldr	r1, [r7, #12]
 8007102:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007104:	fb01 f303 	mul.w	r3, r1, r3
 8007108:	441a      	add	r2, r3
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007124:	3b01      	subs	r3, #1
 8007126:	68f9      	ldr	r1, [r7, #12]
 8007128:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800712a:	fb01 f303 	mul.w	r3, r1, r3
 800712e:	441a      	add	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	22ff      	movs	r2, #255	@ 0xff
 8007138:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	22ff      	movs	r2, #255	@ 0xff
 8007140:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d114      	bne.n	8007174 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d01a      	beq.n	8007188 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	3310      	adds	r3, #16
 8007156:	4618      	mov	r0, r3
 8007158:	f001 f942 	bl	80083e0 <xTaskRemoveFromEventList>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d012      	beq.n	8007188 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007162:	4b0d      	ldr	r3, [pc, #52]	@ (8007198 <xQueueGenericReset+0xd0>)
 8007164:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007168:	601a      	str	r2, [r3, #0]
 800716a:	f3bf 8f4f 	dsb	sy
 800716e:	f3bf 8f6f 	isb	sy
 8007172:	e009      	b.n	8007188 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	3310      	adds	r3, #16
 8007178:	4618      	mov	r0, r3
 800717a:	f7ff fef1 	bl	8006f60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	3324      	adds	r3, #36	@ 0x24
 8007182:	4618      	mov	r0, r3
 8007184:	f7ff feec 	bl	8006f60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007188:	f002 f8b8 	bl	80092fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800718c:	2301      	movs	r3, #1
}
 800718e:	4618      	mov	r0, r3
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	e000ed04 	.word	0xe000ed04

0800719c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800719c:	b580      	push	{r7, lr}
 800719e:	b08e      	sub	sp, #56	@ 0x38
 80071a0:	af02      	add	r7, sp, #8
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
 80071a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d10b      	bne.n	80071c8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80071b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b4:	f383 8811 	msr	BASEPRI, r3
 80071b8:	f3bf 8f6f 	isb	sy
 80071bc:	f3bf 8f4f 	dsb	sy
 80071c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80071c2:	bf00      	nop
 80071c4:	bf00      	nop
 80071c6:	e7fd      	b.n	80071c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10b      	bne.n	80071e6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80071e0:	bf00      	nop
 80071e2:	bf00      	nop
 80071e4:	e7fd      	b.n	80071e2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d002      	beq.n	80071f2 <xQueueGenericCreateStatic+0x56>
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <xQueueGenericCreateStatic+0x5a>
 80071f2:	2301      	movs	r3, #1
 80071f4:	e000      	b.n	80071f8 <xQueueGenericCreateStatic+0x5c>
 80071f6:	2300      	movs	r3, #0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10b      	bne.n	8007214 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80071fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	623b      	str	r3, [r7, #32]
}
 800720e:	bf00      	nop
 8007210:	bf00      	nop
 8007212:	e7fd      	b.n	8007210 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d102      	bne.n	8007220 <xQueueGenericCreateStatic+0x84>
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d101      	bne.n	8007224 <xQueueGenericCreateStatic+0x88>
 8007220:	2301      	movs	r3, #1
 8007222:	e000      	b.n	8007226 <xQueueGenericCreateStatic+0x8a>
 8007224:	2300      	movs	r3, #0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d10b      	bne.n	8007242 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800722a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800722e:	f383 8811 	msr	BASEPRI, r3
 8007232:	f3bf 8f6f 	isb	sy
 8007236:	f3bf 8f4f 	dsb	sy
 800723a:	61fb      	str	r3, [r7, #28]
}
 800723c:	bf00      	nop
 800723e:	bf00      	nop
 8007240:	e7fd      	b.n	800723e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007242:	2350      	movs	r3, #80	@ 0x50
 8007244:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	2b50      	cmp	r3, #80	@ 0x50
 800724a:	d00b      	beq.n	8007264 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800724c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	61bb      	str	r3, [r7, #24]
}
 800725e:	bf00      	nop
 8007260:	bf00      	nop
 8007262:	e7fd      	b.n	8007260 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007264:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800726a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00d      	beq.n	800728c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007272:	2201      	movs	r2, #1
 8007274:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007278:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800727c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	4613      	mov	r3, r2
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	68b9      	ldr	r1, [r7, #8]
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	f000 f805 	bl	8007296 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800728c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800728e:	4618      	mov	r0, r3
 8007290:	3730      	adds	r7, #48	@ 0x30
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b084      	sub	sp, #16
 800729a:	af00      	add	r7, sp, #0
 800729c:	60f8      	str	r0, [r7, #12]
 800729e:	60b9      	str	r1, [r7, #8]
 80072a0:	607a      	str	r2, [r7, #4]
 80072a2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d103      	bne.n	80072b2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	69ba      	ldr	r2, [r7, #24]
 80072ae:	601a      	str	r2, [r3, #0]
 80072b0:	e002      	b.n	80072b8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80072c4:	2101      	movs	r1, #1
 80072c6:	69b8      	ldr	r0, [r7, #24]
 80072c8:	f7ff fefe 	bl	80070c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	78fa      	ldrb	r2, [r7, #3]
 80072d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80072d4:	bf00      	nop
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b08e      	sub	sp, #56	@ 0x38
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
 80072e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80072ea:	2300      	movs	r3, #0
 80072ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80072f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10b      	bne.n	8007310 <xQueueGenericSend+0x34>
	__asm volatile
 80072f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072fc:	f383 8811 	msr	BASEPRI, r3
 8007300:	f3bf 8f6f 	isb	sy
 8007304:	f3bf 8f4f 	dsb	sy
 8007308:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800730a:	bf00      	nop
 800730c:	bf00      	nop
 800730e:	e7fd      	b.n	800730c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d103      	bne.n	800731e <xQueueGenericSend+0x42>
 8007316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800731a:	2b00      	cmp	r3, #0
 800731c:	d101      	bne.n	8007322 <xQueueGenericSend+0x46>
 800731e:	2301      	movs	r3, #1
 8007320:	e000      	b.n	8007324 <xQueueGenericSend+0x48>
 8007322:	2300      	movs	r3, #0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10b      	bne.n	8007340 <xQueueGenericSend+0x64>
	__asm volatile
 8007328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800732c:	f383 8811 	msr	BASEPRI, r3
 8007330:	f3bf 8f6f 	isb	sy
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800733a:	bf00      	nop
 800733c:	bf00      	nop
 800733e:	e7fd      	b.n	800733c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	2b02      	cmp	r3, #2
 8007344:	d103      	bne.n	800734e <xQueueGenericSend+0x72>
 8007346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800734a:	2b01      	cmp	r3, #1
 800734c:	d101      	bne.n	8007352 <xQueueGenericSend+0x76>
 800734e:	2301      	movs	r3, #1
 8007350:	e000      	b.n	8007354 <xQueueGenericSend+0x78>
 8007352:	2300      	movs	r3, #0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d10b      	bne.n	8007370 <xQueueGenericSend+0x94>
	__asm volatile
 8007358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800735c:	f383 8811 	msr	BASEPRI, r3
 8007360:	f3bf 8f6f 	isb	sy
 8007364:	f3bf 8f4f 	dsb	sy
 8007368:	623b      	str	r3, [r7, #32]
}
 800736a:	bf00      	nop
 800736c:	bf00      	nop
 800736e:	e7fd      	b.n	800736c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007370:	f001 fa24 	bl	80087bc <xTaskGetSchedulerState>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d102      	bne.n	8007380 <xQueueGenericSend+0xa4>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d101      	bne.n	8007384 <xQueueGenericSend+0xa8>
 8007380:	2301      	movs	r3, #1
 8007382:	e000      	b.n	8007386 <xQueueGenericSend+0xaa>
 8007384:	2300      	movs	r3, #0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10b      	bne.n	80073a2 <xQueueGenericSend+0xc6>
	__asm volatile
 800738a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800738e:	f383 8811 	msr	BASEPRI, r3
 8007392:	f3bf 8f6f 	isb	sy
 8007396:	f3bf 8f4f 	dsb	sy
 800739a:	61fb      	str	r3, [r7, #28]
}
 800739c:	bf00      	nop
 800739e:	bf00      	nop
 80073a0:	e7fd      	b.n	800739e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073a2:	f001 ff79 	bl	8009298 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d302      	bcc.n	80073b8 <xQueueGenericSend+0xdc>
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d129      	bne.n	800740c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073b8:	683a      	ldr	r2, [r7, #0]
 80073ba:	68b9      	ldr	r1, [r7, #8]
 80073bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073be:	f000 fa0f 	bl	80077e0 <prvCopyDataToQueue>
 80073c2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d010      	beq.n	80073ee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ce:	3324      	adds	r3, #36	@ 0x24
 80073d0:	4618      	mov	r0, r3
 80073d2:	f001 f805 	bl	80083e0 <xTaskRemoveFromEventList>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d013      	beq.n	8007404 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80073dc:	4b3f      	ldr	r3, [pc, #252]	@ (80074dc <xQueueGenericSend+0x200>)
 80073de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073e2:	601a      	str	r2, [r3, #0]
 80073e4:	f3bf 8f4f 	dsb	sy
 80073e8:	f3bf 8f6f 	isb	sy
 80073ec:	e00a      	b.n	8007404 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80073ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d007      	beq.n	8007404 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80073f4:	4b39      	ldr	r3, [pc, #228]	@ (80074dc <xQueueGenericSend+0x200>)
 80073f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073fa:	601a      	str	r2, [r3, #0]
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007404:	f001 ff7a 	bl	80092fc <vPortExitCritical>
				return pdPASS;
 8007408:	2301      	movs	r3, #1
 800740a:	e063      	b.n	80074d4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d103      	bne.n	800741a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007412:	f001 ff73 	bl	80092fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007416:	2300      	movs	r3, #0
 8007418:	e05c      	b.n	80074d4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800741a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800741c:	2b00      	cmp	r3, #0
 800741e:	d106      	bne.n	800742e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007420:	f107 0314 	add.w	r3, r7, #20
 8007424:	4618      	mov	r0, r3
 8007426:	f001 f867 	bl	80084f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800742a:	2301      	movs	r3, #1
 800742c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800742e:	f001 ff65 	bl	80092fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007432:	f000 fda7 	bl	8007f84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007436:	f001 ff2f 	bl	8009298 <vPortEnterCritical>
 800743a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007440:	b25b      	sxtb	r3, r3
 8007442:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007446:	d103      	bne.n	8007450 <xQueueGenericSend+0x174>
 8007448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744a:	2200      	movs	r2, #0
 800744c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007452:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007456:	b25b      	sxtb	r3, r3
 8007458:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800745c:	d103      	bne.n	8007466 <xQueueGenericSend+0x18a>
 800745e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007460:	2200      	movs	r2, #0
 8007462:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007466:	f001 ff49 	bl	80092fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800746a:	1d3a      	adds	r2, r7, #4
 800746c:	f107 0314 	add.w	r3, r7, #20
 8007470:	4611      	mov	r1, r2
 8007472:	4618      	mov	r0, r3
 8007474:	f001 f856 	bl	8008524 <xTaskCheckForTimeOut>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d124      	bne.n	80074c8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800747e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007480:	f000 faa6 	bl	80079d0 <prvIsQueueFull>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d018      	beq.n	80074bc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800748a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748c:	3310      	adds	r3, #16
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	4611      	mov	r1, r2
 8007492:	4618      	mov	r0, r3
 8007494:	f000 ff52 	bl	800833c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007498:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800749a:	f000 fa31 	bl	8007900 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800749e:	f000 fd7f 	bl	8007fa0 <xTaskResumeAll>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f47f af7c 	bne.w	80073a2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80074aa:	4b0c      	ldr	r3, [pc, #48]	@ (80074dc <xQueueGenericSend+0x200>)
 80074ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074b0:	601a      	str	r2, [r3, #0]
 80074b2:	f3bf 8f4f 	dsb	sy
 80074b6:	f3bf 8f6f 	isb	sy
 80074ba:	e772      	b.n	80073a2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80074bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074be:	f000 fa1f 	bl	8007900 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074c2:	f000 fd6d 	bl	8007fa0 <xTaskResumeAll>
 80074c6:	e76c      	b.n	80073a2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80074c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074ca:	f000 fa19 	bl	8007900 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074ce:	f000 fd67 	bl	8007fa0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80074d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3738      	adds	r7, #56	@ 0x38
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	e000ed04 	.word	0xe000ed04

080074e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b090      	sub	sp, #64	@ 0x40
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	607a      	str	r2, [r7, #4]
 80074ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80074f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10b      	bne.n	8007510 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80074f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074fc:	f383 8811 	msr	BASEPRI, r3
 8007500:	f3bf 8f6f 	isb	sy
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800750a:	bf00      	nop
 800750c:	bf00      	nop
 800750e:	e7fd      	b.n	800750c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d103      	bne.n	800751e <xQueueGenericSendFromISR+0x3e>
 8007516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <xQueueGenericSendFromISR+0x42>
 800751e:	2301      	movs	r3, #1
 8007520:	e000      	b.n	8007524 <xQueueGenericSendFromISR+0x44>
 8007522:	2300      	movs	r3, #0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d10b      	bne.n	8007540 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800752c:	f383 8811 	msr	BASEPRI, r3
 8007530:	f3bf 8f6f 	isb	sy
 8007534:	f3bf 8f4f 	dsb	sy
 8007538:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800753a:	bf00      	nop
 800753c:	bf00      	nop
 800753e:	e7fd      	b.n	800753c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	2b02      	cmp	r3, #2
 8007544:	d103      	bne.n	800754e <xQueueGenericSendFromISR+0x6e>
 8007546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800754a:	2b01      	cmp	r3, #1
 800754c:	d101      	bne.n	8007552 <xQueueGenericSendFromISR+0x72>
 800754e:	2301      	movs	r3, #1
 8007550:	e000      	b.n	8007554 <xQueueGenericSendFromISR+0x74>
 8007552:	2300      	movs	r3, #0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10b      	bne.n	8007570 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800755c:	f383 8811 	msr	BASEPRI, r3
 8007560:	f3bf 8f6f 	isb	sy
 8007564:	f3bf 8f4f 	dsb	sy
 8007568:	623b      	str	r3, [r7, #32]
}
 800756a:	bf00      	nop
 800756c:	bf00      	nop
 800756e:	e7fd      	b.n	800756c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007570:	f001 ff72 	bl	8009458 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007574:	f3ef 8211 	mrs	r2, BASEPRI
 8007578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800757c:	f383 8811 	msr	BASEPRI, r3
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	61fa      	str	r2, [r7, #28]
 800758a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800758c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800758e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007592:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007598:	429a      	cmp	r2, r3
 800759a:	d302      	bcc.n	80075a2 <xQueueGenericSendFromISR+0xc2>
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	2b02      	cmp	r3, #2
 80075a0:	d12f      	bne.n	8007602 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80075a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075b2:	683a      	ldr	r2, [r7, #0]
 80075b4:	68b9      	ldr	r1, [r7, #8]
 80075b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80075b8:	f000 f912 	bl	80077e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80075bc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80075c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80075c4:	d112      	bne.n	80075ec <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d016      	beq.n	80075fc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075d0:	3324      	adds	r3, #36	@ 0x24
 80075d2:	4618      	mov	r0, r3
 80075d4:	f000 ff04 	bl	80083e0 <xTaskRemoveFromEventList>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00e      	beq.n	80075fc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00b      	beq.n	80075fc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	601a      	str	r2, [r3, #0]
 80075ea:	e007      	b.n	80075fc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80075ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80075f0:	3301      	adds	r3, #1
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	b25a      	sxtb	r2, r3
 80075f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80075fc:	2301      	movs	r3, #1
 80075fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007600:	e001      	b.n	8007606 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007602:	2300      	movs	r3, #0
 8007604:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007608:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007610:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007614:	4618      	mov	r0, r3
 8007616:	3740      	adds	r7, #64	@ 0x40
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b08c      	sub	sp, #48	@ 0x30
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007628:	2300      	movs	r3, #0
 800762a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007632:	2b00      	cmp	r3, #0
 8007634:	d10b      	bne.n	800764e <xQueueReceive+0x32>
	__asm volatile
 8007636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800763a:	f383 8811 	msr	BASEPRI, r3
 800763e:	f3bf 8f6f 	isb	sy
 8007642:	f3bf 8f4f 	dsb	sy
 8007646:	623b      	str	r3, [r7, #32]
}
 8007648:	bf00      	nop
 800764a:	bf00      	nop
 800764c:	e7fd      	b.n	800764a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d103      	bne.n	800765c <xQueueReceive+0x40>
 8007654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007658:	2b00      	cmp	r3, #0
 800765a:	d101      	bne.n	8007660 <xQueueReceive+0x44>
 800765c:	2301      	movs	r3, #1
 800765e:	e000      	b.n	8007662 <xQueueReceive+0x46>
 8007660:	2300      	movs	r3, #0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10b      	bne.n	800767e <xQueueReceive+0x62>
	__asm volatile
 8007666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800766a:	f383 8811 	msr	BASEPRI, r3
 800766e:	f3bf 8f6f 	isb	sy
 8007672:	f3bf 8f4f 	dsb	sy
 8007676:	61fb      	str	r3, [r7, #28]
}
 8007678:	bf00      	nop
 800767a:	bf00      	nop
 800767c:	e7fd      	b.n	800767a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800767e:	f001 f89d 	bl	80087bc <xTaskGetSchedulerState>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d102      	bne.n	800768e <xQueueReceive+0x72>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d101      	bne.n	8007692 <xQueueReceive+0x76>
 800768e:	2301      	movs	r3, #1
 8007690:	e000      	b.n	8007694 <xQueueReceive+0x78>
 8007692:	2300      	movs	r3, #0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10b      	bne.n	80076b0 <xQueueReceive+0x94>
	__asm volatile
 8007698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	61bb      	str	r3, [r7, #24]
}
 80076aa:	bf00      	nop
 80076ac:	bf00      	nop
 80076ae:	e7fd      	b.n	80076ac <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80076b0:	f001 fdf2 	bl	8009298 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d01f      	beq.n	8007700 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80076c0:	68b9      	ldr	r1, [r7, #8]
 80076c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076c4:	f000 f8f6 	bl	80078b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80076c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ca:	1e5a      	subs	r2, r3, #1
 80076cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ce:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00f      	beq.n	80076f8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076da:	3310      	adds	r3, #16
 80076dc:	4618      	mov	r0, r3
 80076de:	f000 fe7f 	bl	80083e0 <xTaskRemoveFromEventList>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d007      	beq.n	80076f8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80076e8:	4b3c      	ldr	r3, [pc, #240]	@ (80077dc <xQueueReceive+0x1c0>)
 80076ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076ee:	601a      	str	r2, [r3, #0]
 80076f0:	f3bf 8f4f 	dsb	sy
 80076f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80076f8:	f001 fe00 	bl	80092fc <vPortExitCritical>
				return pdPASS;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e069      	b.n	80077d4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d103      	bne.n	800770e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007706:	f001 fdf9 	bl	80092fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800770a:	2300      	movs	r3, #0
 800770c:	e062      	b.n	80077d4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800770e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007710:	2b00      	cmp	r3, #0
 8007712:	d106      	bne.n	8007722 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007714:	f107 0310 	add.w	r3, r7, #16
 8007718:	4618      	mov	r0, r3
 800771a:	f000 feed 	bl	80084f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800771e:	2301      	movs	r3, #1
 8007720:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007722:	f001 fdeb 	bl	80092fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007726:	f000 fc2d 	bl	8007f84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800772a:	f001 fdb5 	bl	8009298 <vPortEnterCritical>
 800772e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007730:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007734:	b25b      	sxtb	r3, r3
 8007736:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800773a:	d103      	bne.n	8007744 <xQueueReceive+0x128>
 800773c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800773e:	2200      	movs	r2, #0
 8007740:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007746:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800774a:	b25b      	sxtb	r3, r3
 800774c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007750:	d103      	bne.n	800775a <xQueueReceive+0x13e>
 8007752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007754:	2200      	movs	r2, #0
 8007756:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800775a:	f001 fdcf 	bl	80092fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800775e:	1d3a      	adds	r2, r7, #4
 8007760:	f107 0310 	add.w	r3, r7, #16
 8007764:	4611      	mov	r1, r2
 8007766:	4618      	mov	r0, r3
 8007768:	f000 fedc 	bl	8008524 <xTaskCheckForTimeOut>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d123      	bne.n	80077ba <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007772:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007774:	f000 f916 	bl	80079a4 <prvIsQueueEmpty>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d017      	beq.n	80077ae <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800777e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007780:	3324      	adds	r3, #36	@ 0x24
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	4611      	mov	r1, r2
 8007786:	4618      	mov	r0, r3
 8007788:	f000 fdd8 	bl	800833c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800778c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800778e:	f000 f8b7 	bl	8007900 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007792:	f000 fc05 	bl	8007fa0 <xTaskResumeAll>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d189      	bne.n	80076b0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800779c:	4b0f      	ldr	r3, [pc, #60]	@ (80077dc <xQueueReceive+0x1c0>)
 800779e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077a2:	601a      	str	r2, [r3, #0]
 80077a4:	f3bf 8f4f 	dsb	sy
 80077a8:	f3bf 8f6f 	isb	sy
 80077ac:	e780      	b.n	80076b0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80077ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077b0:	f000 f8a6 	bl	8007900 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077b4:	f000 fbf4 	bl	8007fa0 <xTaskResumeAll>
 80077b8:	e77a      	b.n	80076b0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80077ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077bc:	f000 f8a0 	bl	8007900 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077c0:	f000 fbee 	bl	8007fa0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077c6:	f000 f8ed 	bl	80079a4 <prvIsQueueEmpty>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f43f af6f 	beq.w	80076b0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80077d2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3730      	adds	r7, #48	@ 0x30
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	e000ed04 	.word	0xe000ed04

080077e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80077ec:	2300      	movs	r3, #0
 80077ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10d      	bne.n	800781a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d14d      	bne.n	80078a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	4618      	mov	r0, r3
 800780c:	f000 fff4 	bl	80087f8 <xTaskPriorityDisinherit>
 8007810:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	609a      	str	r2, [r3, #8]
 8007818:	e043      	b.n	80078a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d119      	bne.n	8007854 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6858      	ldr	r0, [r3, #4]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007828:	461a      	mov	r2, r3
 800782a:	68b9      	ldr	r1, [r7, #8]
 800782c:	f00d f85f 	bl	80148ee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	685a      	ldr	r2, [r3, #4]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007838:	441a      	add	r2, r3
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	685a      	ldr	r2, [r3, #4]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	429a      	cmp	r2, r3
 8007848:	d32b      	bcc.n	80078a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	605a      	str	r2, [r3, #4]
 8007852:	e026      	b.n	80078a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	68d8      	ldr	r0, [r3, #12]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800785c:	461a      	mov	r2, r3
 800785e:	68b9      	ldr	r1, [r7, #8]
 8007860:	f00d f845 	bl	80148ee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	68da      	ldr	r2, [r3, #12]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800786c:	425b      	negs	r3, r3
 800786e:	441a      	add	r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	68da      	ldr	r2, [r3, #12]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	429a      	cmp	r2, r3
 800787e:	d207      	bcs.n	8007890 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	689a      	ldr	r2, [r3, #8]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007888:	425b      	negs	r3, r3
 800788a:	441a      	add	r2, r3
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2b02      	cmp	r3, #2
 8007894:	d105      	bne.n	80078a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	3b01      	subs	r3, #1
 80078a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	1c5a      	adds	r2, r3, #1
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80078aa:	697b      	ldr	r3, [r7, #20]
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3718      	adds	r7, #24
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d018      	beq.n	80078f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	68da      	ldr	r2, [r3, #12]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ce:	441a      	add	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	68da      	ldr	r2, [r3, #12]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d303      	bcc.n	80078e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	68d9      	ldr	r1, [r3, #12]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078f0:	461a      	mov	r2, r3
 80078f2:	6838      	ldr	r0, [r7, #0]
 80078f4:	f00c fffb 	bl	80148ee <memcpy>
	}
}
 80078f8:	bf00      	nop
 80078fa:	3708      	adds	r7, #8
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007908:	f001 fcc6 	bl	8009298 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007912:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007914:	e011      	b.n	800793a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800791a:	2b00      	cmp	r3, #0
 800791c:	d012      	beq.n	8007944 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	3324      	adds	r3, #36	@ 0x24
 8007922:	4618      	mov	r0, r3
 8007924:	f000 fd5c 	bl	80083e0 <xTaskRemoveFromEventList>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d001      	beq.n	8007932 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800792e:	f000 fe5d 	bl	80085ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007932:	7bfb      	ldrb	r3, [r7, #15]
 8007934:	3b01      	subs	r3, #1
 8007936:	b2db      	uxtb	r3, r3
 8007938:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800793a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800793e:	2b00      	cmp	r3, #0
 8007940:	dce9      	bgt.n	8007916 <prvUnlockQueue+0x16>
 8007942:	e000      	b.n	8007946 <prvUnlockQueue+0x46>
					break;
 8007944:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	22ff      	movs	r2, #255	@ 0xff
 800794a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800794e:	f001 fcd5 	bl	80092fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007952:	f001 fca1 	bl	8009298 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800795c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800795e:	e011      	b.n	8007984 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d012      	beq.n	800798e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	3310      	adds	r3, #16
 800796c:	4618      	mov	r0, r3
 800796e:	f000 fd37 	bl	80083e0 <xTaskRemoveFromEventList>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d001      	beq.n	800797c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007978:	f000 fe38 	bl	80085ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800797c:	7bbb      	ldrb	r3, [r7, #14]
 800797e:	3b01      	subs	r3, #1
 8007980:	b2db      	uxtb	r3, r3
 8007982:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007984:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007988:	2b00      	cmp	r3, #0
 800798a:	dce9      	bgt.n	8007960 <prvUnlockQueue+0x60>
 800798c:	e000      	b.n	8007990 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800798e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	22ff      	movs	r2, #255	@ 0xff
 8007994:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007998:	f001 fcb0 	bl	80092fc <vPortExitCritical>
}
 800799c:	bf00      	nop
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079ac:	f001 fc74 	bl	8009298 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d102      	bne.n	80079be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80079b8:	2301      	movs	r3, #1
 80079ba:	60fb      	str	r3, [r7, #12]
 80079bc:	e001      	b.n	80079c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80079be:	2300      	movs	r3, #0
 80079c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079c2:	f001 fc9b 	bl	80092fc <vPortExitCritical>

	return xReturn;
 80079c6:	68fb      	ldr	r3, [r7, #12]
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079d8:	f001 fc5e 	bl	8009298 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d102      	bne.n	80079ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80079e8:	2301      	movs	r3, #1
 80079ea:	60fb      	str	r3, [r7, #12]
 80079ec:	e001      	b.n	80079f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80079ee:	2300      	movs	r3, #0
 80079f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079f2:	f001 fc83 	bl	80092fc <vPortExitCritical>

	return xReturn;
 80079f6:	68fb      	ldr	r3, [r7, #12]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	60fb      	str	r3, [r7, #12]
 8007a0e:	e014      	b.n	8007a3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007a10:	4a0f      	ldr	r2, [pc, #60]	@ (8007a50 <vQueueAddToRegistry+0x50>)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d10b      	bne.n	8007a34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007a1c:	490c      	ldr	r1, [pc, #48]	@ (8007a50 <vQueueAddToRegistry+0x50>)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	683a      	ldr	r2, [r7, #0]
 8007a22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007a26:	4a0a      	ldr	r2, [pc, #40]	@ (8007a50 <vQueueAddToRegistry+0x50>)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	00db      	lsls	r3, r3, #3
 8007a2c:	4413      	add	r3, r2
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007a32:	e006      	b.n	8007a42 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	3301      	adds	r3, #1
 8007a38:	60fb      	str	r3, [r7, #12]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2b07      	cmp	r3, #7
 8007a3e:	d9e7      	bls.n	8007a10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007a40:	bf00      	nop
 8007a42:	bf00      	nop
 8007a44:	3714      	adds	r7, #20
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	20004f5c 	.word	0x20004f5c

08007a54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007a64:	f001 fc18 	bl	8009298 <vPortEnterCritical>
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a6e:	b25b      	sxtb	r3, r3
 8007a70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a74:	d103      	bne.n	8007a7e <vQueueWaitForMessageRestricted+0x2a>
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a84:	b25b      	sxtb	r3, r3
 8007a86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a8a:	d103      	bne.n	8007a94 <vQueueWaitForMessageRestricted+0x40>
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a94:	f001 fc32 	bl	80092fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d106      	bne.n	8007aae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	3324      	adds	r3, #36	@ 0x24
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	68b9      	ldr	r1, [r7, #8]
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f000 fc6d 	bl	8008388 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007aae:	6978      	ldr	r0, [r7, #20]
 8007ab0:	f7ff ff26 	bl	8007900 <prvUnlockQueue>
	}
 8007ab4:	bf00      	nop
 8007ab6:	3718      	adds	r7, #24
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b08e      	sub	sp, #56	@ 0x38
 8007ac0:	af04      	add	r7, sp, #16
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
 8007ac8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10b      	bne.n	8007ae8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad4:	f383 8811 	msr	BASEPRI, r3
 8007ad8:	f3bf 8f6f 	isb	sy
 8007adc:	f3bf 8f4f 	dsb	sy
 8007ae0:	623b      	str	r3, [r7, #32]
}
 8007ae2:	bf00      	nop
 8007ae4:	bf00      	nop
 8007ae6:	e7fd      	b.n	8007ae4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10b      	bne.n	8007b06 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af2:	f383 8811 	msr	BASEPRI, r3
 8007af6:	f3bf 8f6f 	isb	sy
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	61fb      	str	r3, [r7, #28]
}
 8007b00:	bf00      	nop
 8007b02:	bf00      	nop
 8007b04:	e7fd      	b.n	8007b02 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007b06:	23a8      	movs	r3, #168	@ 0xa8
 8007b08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	2ba8      	cmp	r3, #168	@ 0xa8
 8007b0e:	d00b      	beq.n	8007b28 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b14:	f383 8811 	msr	BASEPRI, r3
 8007b18:	f3bf 8f6f 	isb	sy
 8007b1c:	f3bf 8f4f 	dsb	sy
 8007b20:	61bb      	str	r3, [r7, #24]
}
 8007b22:	bf00      	nop
 8007b24:	bf00      	nop
 8007b26:	e7fd      	b.n	8007b24 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007b28:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d01e      	beq.n	8007b6e <xTaskCreateStatic+0xb2>
 8007b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d01b      	beq.n	8007b6e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b38:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b3e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b42:	2202      	movs	r2, #2
 8007b44:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007b48:	2300      	movs	r3, #0
 8007b4a:	9303      	str	r3, [sp, #12]
 8007b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b4e:	9302      	str	r3, [sp, #8]
 8007b50:	f107 0314 	add.w	r3, r7, #20
 8007b54:	9301      	str	r3, [sp, #4]
 8007b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b58:	9300      	str	r3, [sp, #0]
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	68b9      	ldr	r1, [r7, #8]
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f000 f851 	bl	8007c08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b66:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007b68:	f000 f8f6 	bl	8007d58 <prvAddNewTaskToReadyList>
 8007b6c:	e001      	b.n	8007b72 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007b72:	697b      	ldr	r3, [r7, #20]
	}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3728      	adds	r7, #40	@ 0x28
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b08c      	sub	sp, #48	@ 0x30
 8007b80:	af04      	add	r7, sp, #16
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	603b      	str	r3, [r7, #0]
 8007b88:	4613      	mov	r3, r2
 8007b8a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007b8c:	88fb      	ldrh	r3, [r7, #6]
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4618      	mov	r0, r3
 8007b92:	f001 fca3 	bl	80094dc <pvPortMalloc>
 8007b96:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00e      	beq.n	8007bbc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007b9e:	20a8      	movs	r0, #168	@ 0xa8
 8007ba0:	f001 fc9c 	bl	80094dc <pvPortMalloc>
 8007ba4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d003      	beq.n	8007bb4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	631a      	str	r2, [r3, #48]	@ 0x30
 8007bb2:	e005      	b.n	8007bc0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007bb4:	6978      	ldr	r0, [r7, #20]
 8007bb6:	f001 fd5f 	bl	8009678 <vPortFree>
 8007bba:	e001      	b.n	8007bc0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d017      	beq.n	8007bf6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007bce:	88fa      	ldrh	r2, [r7, #6]
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	9303      	str	r3, [sp, #12]
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	9302      	str	r3, [sp, #8]
 8007bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bda:	9301      	str	r3, [sp, #4]
 8007bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	68b9      	ldr	r1, [r7, #8]
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f000 f80f 	bl	8007c08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bea:	69f8      	ldr	r0, [r7, #28]
 8007bec:	f000 f8b4 	bl	8007d58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	61bb      	str	r3, [r7, #24]
 8007bf4:	e002      	b.n	8007bfc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007bf6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007bfa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007bfc:	69bb      	ldr	r3, [r7, #24]
	}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3720      	adds	r7, #32
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
	...

08007c08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b088      	sub	sp, #32
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
 8007c14:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c18:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	461a      	mov	r2, r3
 8007c20:	21a5      	movs	r1, #165	@ 0xa5
 8007c22:	f00c fd71 	bl	8014708 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007c30:	3b01      	subs	r3, #1
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	4413      	add	r3, r2
 8007c36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	f023 0307 	bic.w	r3, r3, #7
 8007c3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	f003 0307 	and.w	r3, r3, #7
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00b      	beq.n	8007c62 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c4e:	f383 8811 	msr	BASEPRI, r3
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	f3bf 8f4f 	dsb	sy
 8007c5a:	617b      	str	r3, [r7, #20]
}
 8007c5c:	bf00      	nop
 8007c5e:	bf00      	nop
 8007c60:	e7fd      	b.n	8007c5e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d01f      	beq.n	8007ca8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c68:	2300      	movs	r3, #0
 8007c6a:	61fb      	str	r3, [r7, #28]
 8007c6c:	e012      	b.n	8007c94 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	4413      	add	r3, r2
 8007c74:	7819      	ldrb	r1, [r3, #0]
 8007c76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	3334      	adds	r3, #52	@ 0x34
 8007c7e:	460a      	mov	r2, r1
 8007c80:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007c82:	68ba      	ldr	r2, [r7, #8]
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	4413      	add	r3, r2
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d006      	beq.n	8007c9c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	3301      	adds	r3, #1
 8007c92:	61fb      	str	r3, [r7, #28]
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	2b0f      	cmp	r3, #15
 8007c98:	d9e9      	bls.n	8007c6e <prvInitialiseNewTask+0x66>
 8007c9a:	e000      	b.n	8007c9e <prvInitialiseNewTask+0x96>
			{
				break;
 8007c9c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007ca6:	e003      	b.n	8007cb0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007caa:	2200      	movs	r2, #0
 8007cac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb2:	2b37      	cmp	r3, #55	@ 0x37
 8007cb4:	d901      	bls.n	8007cba <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007cb6:	2337      	movs	r3, #55	@ 0x37
 8007cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cbe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cc4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc8:	2200      	movs	r2, #0
 8007cca:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cce:	3304      	adds	r3, #4
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7ff f965 	bl	8006fa0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd8:	3318      	adds	r3, #24
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7ff f960 	bl	8006fa0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ce4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cf4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d08:	3354      	adds	r3, #84	@ 0x54
 8007d0a:	224c      	movs	r2, #76	@ 0x4c
 8007d0c:	2100      	movs	r1, #0
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f00c fcfa 	bl	8014708 <memset>
 8007d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d16:	4a0d      	ldr	r2, [pc, #52]	@ (8007d4c <prvInitialiseNewTask+0x144>)
 8007d18:	659a      	str	r2, [r3, #88]	@ 0x58
 8007d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1c:	4a0c      	ldr	r2, [pc, #48]	@ (8007d50 <prvInitialiseNewTask+0x148>)
 8007d1e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d22:	4a0c      	ldr	r2, [pc, #48]	@ (8007d54 <prvInitialiseNewTask+0x14c>)
 8007d24:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d26:	683a      	ldr	r2, [r7, #0]
 8007d28:	68f9      	ldr	r1, [r7, #12]
 8007d2a:	69b8      	ldr	r0, [r7, #24]
 8007d2c:	f001 f982 	bl	8009034 <pxPortInitialiseStack>
 8007d30:	4602      	mov	r2, r0
 8007d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d34:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d002      	beq.n	8007d42 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d42:	bf00      	nop
 8007d44:	3720      	adds	r7, #32
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	2000abf0 	.word	0x2000abf0
 8007d50:	2000ac58 	.word	0x2000ac58
 8007d54:	2000acc0 	.word	0x2000acc0

08007d58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007d60:	f001 fa9a 	bl	8009298 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d64:	4b2d      	ldr	r3, [pc, #180]	@ (8007e1c <prvAddNewTaskToReadyList+0xc4>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	4a2c      	ldr	r2, [pc, #176]	@ (8007e1c <prvAddNewTaskToReadyList+0xc4>)
 8007d6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007d6e:	4b2c      	ldr	r3, [pc, #176]	@ (8007e20 <prvAddNewTaskToReadyList+0xc8>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d109      	bne.n	8007d8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d76:	4a2a      	ldr	r2, [pc, #168]	@ (8007e20 <prvAddNewTaskToReadyList+0xc8>)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d7c:	4b27      	ldr	r3, [pc, #156]	@ (8007e1c <prvAddNewTaskToReadyList+0xc4>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d110      	bne.n	8007da6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d84:	f000 fc56 	bl	8008634 <prvInitialiseTaskLists>
 8007d88:	e00d      	b.n	8007da6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d8a:	4b26      	ldr	r3, [pc, #152]	@ (8007e24 <prvAddNewTaskToReadyList+0xcc>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d109      	bne.n	8007da6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d92:	4b23      	ldr	r3, [pc, #140]	@ (8007e20 <prvAddNewTaskToReadyList+0xc8>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d802      	bhi.n	8007da6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007da0:	4a1f      	ldr	r2, [pc, #124]	@ (8007e20 <prvAddNewTaskToReadyList+0xc8>)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007da6:	4b20      	ldr	r3, [pc, #128]	@ (8007e28 <prvAddNewTaskToReadyList+0xd0>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	3301      	adds	r3, #1
 8007dac:	4a1e      	ldr	r2, [pc, #120]	@ (8007e28 <prvAddNewTaskToReadyList+0xd0>)
 8007dae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007db0:	4b1d      	ldr	r3, [pc, #116]	@ (8007e28 <prvAddNewTaskToReadyList+0xd0>)
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8007e2c <prvAddNewTaskToReadyList+0xd4>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d903      	bls.n	8007dcc <prvAddNewTaskToReadyList+0x74>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dc8:	4a18      	ldr	r2, [pc, #96]	@ (8007e2c <prvAddNewTaskToReadyList+0xd4>)
 8007dca:	6013      	str	r3, [r2, #0]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	4413      	add	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	4a15      	ldr	r2, [pc, #84]	@ (8007e30 <prvAddNewTaskToReadyList+0xd8>)
 8007dda:	441a      	add	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	3304      	adds	r3, #4
 8007de0:	4619      	mov	r1, r3
 8007de2:	4610      	mov	r0, r2
 8007de4:	f7ff f8e9 	bl	8006fba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007de8:	f001 fa88 	bl	80092fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007dec:	4b0d      	ldr	r3, [pc, #52]	@ (8007e24 <prvAddNewTaskToReadyList+0xcc>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00e      	beq.n	8007e12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007df4:	4b0a      	ldr	r3, [pc, #40]	@ (8007e20 <prvAddNewTaskToReadyList+0xc8>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d207      	bcs.n	8007e12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e02:	4b0c      	ldr	r3, [pc, #48]	@ (8007e34 <prvAddNewTaskToReadyList+0xdc>)
 8007e04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e08:	601a      	str	r2, [r3, #0]
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e12:	bf00      	nop
 8007e14:	3708      	adds	r7, #8
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	20005470 	.word	0x20005470
 8007e20:	20004f9c 	.word	0x20004f9c
 8007e24:	2000547c 	.word	0x2000547c
 8007e28:	2000548c 	.word	0x2000548c
 8007e2c:	20005478 	.word	0x20005478
 8007e30:	20004fa0 	.word	0x20004fa0
 8007e34:	e000ed04 	.word	0xe000ed04

08007e38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007e40:	2300      	movs	r3, #0
 8007e42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d018      	beq.n	8007e7c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007e4a:	4b14      	ldr	r3, [pc, #80]	@ (8007e9c <vTaskDelay+0x64>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00b      	beq.n	8007e6a <vTaskDelay+0x32>
	__asm volatile
 8007e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e56:	f383 8811 	msr	BASEPRI, r3
 8007e5a:	f3bf 8f6f 	isb	sy
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	60bb      	str	r3, [r7, #8]
}
 8007e64:	bf00      	nop
 8007e66:	bf00      	nop
 8007e68:	e7fd      	b.n	8007e66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007e6a:	f000 f88b 	bl	8007f84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007e6e:	2100      	movs	r1, #0
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fd31 	bl	80088d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e76:	f000 f893 	bl	8007fa0 <xTaskResumeAll>
 8007e7a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d107      	bne.n	8007e92 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007e82:	4b07      	ldr	r3, [pc, #28]	@ (8007ea0 <vTaskDelay+0x68>)
 8007e84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e88:	601a      	str	r2, [r3, #0]
 8007e8a:	f3bf 8f4f 	dsb	sy
 8007e8e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e92:	bf00      	nop
 8007e94:	3710      	adds	r7, #16
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	20005498 	.word	0x20005498
 8007ea0:	e000ed04 	.word	0xe000ed04

08007ea4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b08a      	sub	sp, #40	@ 0x28
 8007ea8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007eb2:	463a      	mov	r2, r7
 8007eb4:	1d39      	adds	r1, r7, #4
 8007eb6:	f107 0308 	add.w	r3, r7, #8
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7ff f81c 	bl	8006ef8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007ec0:	6839      	ldr	r1, [r7, #0]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	68ba      	ldr	r2, [r7, #8]
 8007ec6:	9202      	str	r2, [sp, #8]
 8007ec8:	9301      	str	r3, [sp, #4]
 8007eca:	2300      	movs	r3, #0
 8007ecc:	9300      	str	r3, [sp, #0]
 8007ece:	2300      	movs	r3, #0
 8007ed0:	460a      	mov	r2, r1
 8007ed2:	4924      	ldr	r1, [pc, #144]	@ (8007f64 <vTaskStartScheduler+0xc0>)
 8007ed4:	4824      	ldr	r0, [pc, #144]	@ (8007f68 <vTaskStartScheduler+0xc4>)
 8007ed6:	f7ff fdf1 	bl	8007abc <xTaskCreateStatic>
 8007eda:	4603      	mov	r3, r0
 8007edc:	4a23      	ldr	r2, [pc, #140]	@ (8007f6c <vTaskStartScheduler+0xc8>)
 8007ede:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ee0:	4b22      	ldr	r3, [pc, #136]	@ (8007f6c <vTaskStartScheduler+0xc8>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d002      	beq.n	8007eee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	617b      	str	r3, [r7, #20]
 8007eec:	e001      	b.n	8007ef2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d102      	bne.n	8007efe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007ef8:	f000 fd42 	bl	8008980 <xTimerCreateTimerTask>
 8007efc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d11b      	bne.n	8007f3c <vTaskStartScheduler+0x98>
	__asm volatile
 8007f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f08:	f383 8811 	msr	BASEPRI, r3
 8007f0c:	f3bf 8f6f 	isb	sy
 8007f10:	f3bf 8f4f 	dsb	sy
 8007f14:	613b      	str	r3, [r7, #16]
}
 8007f16:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007f18:	4b15      	ldr	r3, [pc, #84]	@ (8007f70 <vTaskStartScheduler+0xcc>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	3354      	adds	r3, #84	@ 0x54
 8007f1e:	4a15      	ldr	r2, [pc, #84]	@ (8007f74 <vTaskStartScheduler+0xd0>)
 8007f20:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f22:	4b15      	ldr	r3, [pc, #84]	@ (8007f78 <vTaskStartScheduler+0xd4>)
 8007f24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f2a:	4b14      	ldr	r3, [pc, #80]	@ (8007f7c <vTaskStartScheduler+0xd8>)
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007f30:	4b13      	ldr	r3, [pc, #76]	@ (8007f80 <vTaskStartScheduler+0xdc>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007f36:	f001 f90b 	bl	8009150 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007f3a:	e00f      	b.n	8007f5c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f42:	d10b      	bne.n	8007f5c <vTaskStartScheduler+0xb8>
	__asm volatile
 8007f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f48:	f383 8811 	msr	BASEPRI, r3
 8007f4c:	f3bf 8f6f 	isb	sy
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	60fb      	str	r3, [r7, #12]
}
 8007f56:	bf00      	nop
 8007f58:	bf00      	nop
 8007f5a:	e7fd      	b.n	8007f58 <vTaskStartScheduler+0xb4>
}
 8007f5c:	bf00      	nop
 8007f5e:	3718      	adds	r7, #24
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	080156fc 	.word	0x080156fc
 8007f68:	08008605 	.word	0x08008605
 8007f6c:	20005494 	.word	0x20005494
 8007f70:	20004f9c 	.word	0x20004f9c
 8007f74:	20000034 	.word	0x20000034
 8007f78:	20005490 	.word	0x20005490
 8007f7c:	2000547c 	.word	0x2000547c
 8007f80:	20005474 	.word	0x20005474

08007f84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007f84:	b480      	push	{r7}
 8007f86:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007f88:	4b04      	ldr	r3, [pc, #16]	@ (8007f9c <vTaskSuspendAll+0x18>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	4a03      	ldr	r2, [pc, #12]	@ (8007f9c <vTaskSuspendAll+0x18>)
 8007f90:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007f92:	bf00      	nop
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr
 8007f9c:	20005498 	.word	0x20005498

08007fa0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007faa:	2300      	movs	r3, #0
 8007fac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007fae:	4b42      	ldr	r3, [pc, #264]	@ (80080b8 <xTaskResumeAll+0x118>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10b      	bne.n	8007fce <xTaskResumeAll+0x2e>
	__asm volatile
 8007fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fba:	f383 8811 	msr	BASEPRI, r3
 8007fbe:	f3bf 8f6f 	isb	sy
 8007fc2:	f3bf 8f4f 	dsb	sy
 8007fc6:	603b      	str	r3, [r7, #0]
}
 8007fc8:	bf00      	nop
 8007fca:	bf00      	nop
 8007fcc:	e7fd      	b.n	8007fca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007fce:	f001 f963 	bl	8009298 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007fd2:	4b39      	ldr	r3, [pc, #228]	@ (80080b8 <xTaskResumeAll+0x118>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	4a37      	ldr	r2, [pc, #220]	@ (80080b8 <xTaskResumeAll+0x118>)
 8007fda:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fdc:	4b36      	ldr	r3, [pc, #216]	@ (80080b8 <xTaskResumeAll+0x118>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d162      	bne.n	80080aa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007fe4:	4b35      	ldr	r3, [pc, #212]	@ (80080bc <xTaskResumeAll+0x11c>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d05e      	beq.n	80080aa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007fec:	e02f      	b.n	800804e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fee:	4b34      	ldr	r3, [pc, #208]	@ (80080c0 <xTaskResumeAll+0x120>)
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	3318      	adds	r3, #24
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7ff f83a 	bl	8007074 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	3304      	adds	r3, #4
 8008004:	4618      	mov	r0, r3
 8008006:	f7ff f835 	bl	8007074 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800800e:	4b2d      	ldr	r3, [pc, #180]	@ (80080c4 <xTaskResumeAll+0x124>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	429a      	cmp	r2, r3
 8008014:	d903      	bls.n	800801e <xTaskResumeAll+0x7e>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800801a:	4a2a      	ldr	r2, [pc, #168]	@ (80080c4 <xTaskResumeAll+0x124>)
 800801c:	6013      	str	r3, [r2, #0]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008022:	4613      	mov	r3, r2
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	4413      	add	r3, r2
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4a27      	ldr	r2, [pc, #156]	@ (80080c8 <xTaskResumeAll+0x128>)
 800802c:	441a      	add	r2, r3
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	3304      	adds	r3, #4
 8008032:	4619      	mov	r1, r3
 8008034:	4610      	mov	r0, r2
 8008036:	f7fe ffc0 	bl	8006fba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800803e:	4b23      	ldr	r3, [pc, #140]	@ (80080cc <xTaskResumeAll+0x12c>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008044:	429a      	cmp	r2, r3
 8008046:	d302      	bcc.n	800804e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008048:	4b21      	ldr	r3, [pc, #132]	@ (80080d0 <xTaskResumeAll+0x130>)
 800804a:	2201      	movs	r2, #1
 800804c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800804e:	4b1c      	ldr	r3, [pc, #112]	@ (80080c0 <xTaskResumeAll+0x120>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1cb      	bne.n	8007fee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d001      	beq.n	8008060 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800805c:	f000 fb8e 	bl	800877c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008060:	4b1c      	ldr	r3, [pc, #112]	@ (80080d4 <xTaskResumeAll+0x134>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d010      	beq.n	800808e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800806c:	f000 f846 	bl	80080fc <xTaskIncrementTick>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d002      	beq.n	800807c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008076:	4b16      	ldr	r3, [pc, #88]	@ (80080d0 <xTaskResumeAll+0x130>)
 8008078:	2201      	movs	r2, #1
 800807a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	3b01      	subs	r3, #1
 8008080:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d1f1      	bne.n	800806c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008088:	4b12      	ldr	r3, [pc, #72]	@ (80080d4 <xTaskResumeAll+0x134>)
 800808a:	2200      	movs	r2, #0
 800808c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800808e:	4b10      	ldr	r3, [pc, #64]	@ (80080d0 <xTaskResumeAll+0x130>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d009      	beq.n	80080aa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008096:	2301      	movs	r3, #1
 8008098:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800809a:	4b0f      	ldr	r3, [pc, #60]	@ (80080d8 <xTaskResumeAll+0x138>)
 800809c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080a0:	601a      	str	r2, [r3, #0]
 80080a2:	f3bf 8f4f 	dsb	sy
 80080a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80080aa:	f001 f927 	bl	80092fc <vPortExitCritical>

	return xAlreadyYielded;
 80080ae:	68bb      	ldr	r3, [r7, #8]
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	20005498 	.word	0x20005498
 80080bc:	20005470 	.word	0x20005470
 80080c0:	20005430 	.word	0x20005430
 80080c4:	20005478 	.word	0x20005478
 80080c8:	20004fa0 	.word	0x20004fa0
 80080cc:	20004f9c 	.word	0x20004f9c
 80080d0:	20005484 	.word	0x20005484
 80080d4:	20005480 	.word	0x20005480
 80080d8:	e000ed04 	.word	0xe000ed04

080080dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80080e2:	4b05      	ldr	r3, [pc, #20]	@ (80080f8 <xTaskGetTickCount+0x1c>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80080e8:	687b      	ldr	r3, [r7, #4]
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	370c      	adds	r7, #12
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
 80080f6:	bf00      	nop
 80080f8:	20005474 	.word	0x20005474

080080fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b086      	sub	sp, #24
 8008100:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008102:	2300      	movs	r3, #0
 8008104:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008106:	4b4f      	ldr	r3, [pc, #316]	@ (8008244 <xTaskIncrementTick+0x148>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2b00      	cmp	r3, #0
 800810c:	f040 8090 	bne.w	8008230 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008110:	4b4d      	ldr	r3, [pc, #308]	@ (8008248 <xTaskIncrementTick+0x14c>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	3301      	adds	r3, #1
 8008116:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008118:	4a4b      	ldr	r2, [pc, #300]	@ (8008248 <xTaskIncrementTick+0x14c>)
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d121      	bne.n	8008168 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008124:	4b49      	ldr	r3, [pc, #292]	@ (800824c <xTaskIncrementTick+0x150>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00b      	beq.n	8008146 <xTaskIncrementTick+0x4a>
	__asm volatile
 800812e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008132:	f383 8811 	msr	BASEPRI, r3
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	603b      	str	r3, [r7, #0]
}
 8008140:	bf00      	nop
 8008142:	bf00      	nop
 8008144:	e7fd      	b.n	8008142 <xTaskIncrementTick+0x46>
 8008146:	4b41      	ldr	r3, [pc, #260]	@ (800824c <xTaskIncrementTick+0x150>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	60fb      	str	r3, [r7, #12]
 800814c:	4b40      	ldr	r3, [pc, #256]	@ (8008250 <xTaskIncrementTick+0x154>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a3e      	ldr	r2, [pc, #248]	@ (800824c <xTaskIncrementTick+0x150>)
 8008152:	6013      	str	r3, [r2, #0]
 8008154:	4a3e      	ldr	r2, [pc, #248]	@ (8008250 <xTaskIncrementTick+0x154>)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	6013      	str	r3, [r2, #0]
 800815a:	4b3e      	ldr	r3, [pc, #248]	@ (8008254 <xTaskIncrementTick+0x158>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	3301      	adds	r3, #1
 8008160:	4a3c      	ldr	r2, [pc, #240]	@ (8008254 <xTaskIncrementTick+0x158>)
 8008162:	6013      	str	r3, [r2, #0]
 8008164:	f000 fb0a 	bl	800877c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008168:	4b3b      	ldr	r3, [pc, #236]	@ (8008258 <xTaskIncrementTick+0x15c>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	693a      	ldr	r2, [r7, #16]
 800816e:	429a      	cmp	r2, r3
 8008170:	d349      	bcc.n	8008206 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008172:	4b36      	ldr	r3, [pc, #216]	@ (800824c <xTaskIncrementTick+0x150>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d104      	bne.n	8008186 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800817c:	4b36      	ldr	r3, [pc, #216]	@ (8008258 <xTaskIncrementTick+0x15c>)
 800817e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008182:	601a      	str	r2, [r3, #0]
					break;
 8008184:	e03f      	b.n	8008206 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008186:	4b31      	ldr	r3, [pc, #196]	@ (800824c <xTaskIncrementTick+0x150>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008196:	693a      	ldr	r2, [r7, #16]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	429a      	cmp	r2, r3
 800819c:	d203      	bcs.n	80081a6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800819e:	4a2e      	ldr	r2, [pc, #184]	@ (8008258 <xTaskIncrementTick+0x15c>)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80081a4:	e02f      	b.n	8008206 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	3304      	adds	r3, #4
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7fe ff62 	bl	8007074 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d004      	beq.n	80081c2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	3318      	adds	r3, #24
 80081bc:	4618      	mov	r0, r3
 80081be:	f7fe ff59 	bl	8007074 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081c6:	4b25      	ldr	r3, [pc, #148]	@ (800825c <xTaskIncrementTick+0x160>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d903      	bls.n	80081d6 <xTaskIncrementTick+0xda>
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d2:	4a22      	ldr	r2, [pc, #136]	@ (800825c <xTaskIncrementTick+0x160>)
 80081d4:	6013      	str	r3, [r2, #0]
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081da:	4613      	mov	r3, r2
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	4413      	add	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4a1f      	ldr	r2, [pc, #124]	@ (8008260 <xTaskIncrementTick+0x164>)
 80081e4:	441a      	add	r2, r3
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	3304      	adds	r3, #4
 80081ea:	4619      	mov	r1, r3
 80081ec:	4610      	mov	r0, r2
 80081ee:	f7fe fee4 	bl	8006fba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081f6:	4b1b      	ldr	r3, [pc, #108]	@ (8008264 <xTaskIncrementTick+0x168>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d3b8      	bcc.n	8008172 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008200:	2301      	movs	r3, #1
 8008202:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008204:	e7b5      	b.n	8008172 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008206:	4b17      	ldr	r3, [pc, #92]	@ (8008264 <xTaskIncrementTick+0x168>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800820c:	4914      	ldr	r1, [pc, #80]	@ (8008260 <xTaskIncrementTick+0x164>)
 800820e:	4613      	mov	r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4413      	add	r3, r2
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	440b      	add	r3, r1
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2b01      	cmp	r3, #1
 800821c:	d901      	bls.n	8008222 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800821e:	2301      	movs	r3, #1
 8008220:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008222:	4b11      	ldr	r3, [pc, #68]	@ (8008268 <xTaskIncrementTick+0x16c>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d007      	beq.n	800823a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800822a:	2301      	movs	r3, #1
 800822c:	617b      	str	r3, [r7, #20]
 800822e:	e004      	b.n	800823a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008230:	4b0e      	ldr	r3, [pc, #56]	@ (800826c <xTaskIncrementTick+0x170>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	3301      	adds	r3, #1
 8008236:	4a0d      	ldr	r2, [pc, #52]	@ (800826c <xTaskIncrementTick+0x170>)
 8008238:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800823a:	697b      	ldr	r3, [r7, #20]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3718      	adds	r7, #24
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	20005498 	.word	0x20005498
 8008248:	20005474 	.word	0x20005474
 800824c:	20005428 	.word	0x20005428
 8008250:	2000542c 	.word	0x2000542c
 8008254:	20005488 	.word	0x20005488
 8008258:	20005490 	.word	0x20005490
 800825c:	20005478 	.word	0x20005478
 8008260:	20004fa0 	.word	0x20004fa0
 8008264:	20004f9c 	.word	0x20004f9c
 8008268:	20005484 	.word	0x20005484
 800826c:	20005480 	.word	0x20005480

08008270 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008276:	4b2b      	ldr	r3, [pc, #172]	@ (8008324 <vTaskSwitchContext+0xb4>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d003      	beq.n	8008286 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800827e:	4b2a      	ldr	r3, [pc, #168]	@ (8008328 <vTaskSwitchContext+0xb8>)
 8008280:	2201      	movs	r2, #1
 8008282:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008284:	e047      	b.n	8008316 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008286:	4b28      	ldr	r3, [pc, #160]	@ (8008328 <vTaskSwitchContext+0xb8>)
 8008288:	2200      	movs	r2, #0
 800828a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800828c:	4b27      	ldr	r3, [pc, #156]	@ (800832c <vTaskSwitchContext+0xbc>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	60fb      	str	r3, [r7, #12]
 8008292:	e011      	b.n	80082b8 <vTaskSwitchContext+0x48>
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10b      	bne.n	80082b2 <vTaskSwitchContext+0x42>
	__asm volatile
 800829a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800829e:	f383 8811 	msr	BASEPRI, r3
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	f3bf 8f4f 	dsb	sy
 80082aa:	607b      	str	r3, [r7, #4]
}
 80082ac:	bf00      	nop
 80082ae:	bf00      	nop
 80082b0:	e7fd      	b.n	80082ae <vTaskSwitchContext+0x3e>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	3b01      	subs	r3, #1
 80082b6:	60fb      	str	r3, [r7, #12]
 80082b8:	491d      	ldr	r1, [pc, #116]	@ (8008330 <vTaskSwitchContext+0xc0>)
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	4613      	mov	r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4413      	add	r3, r2
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	440b      	add	r3, r1
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d0e3      	beq.n	8008294 <vTaskSwitchContext+0x24>
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	4613      	mov	r3, r2
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	4413      	add	r3, r2
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	4a16      	ldr	r2, [pc, #88]	@ (8008330 <vTaskSwitchContext+0xc0>)
 80082d8:	4413      	add	r3, r2
 80082da:	60bb      	str	r3, [r7, #8]
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	685a      	ldr	r2, [r3, #4]
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	605a      	str	r2, [r3, #4]
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	685a      	ldr	r2, [r3, #4]
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	3308      	adds	r3, #8
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d104      	bne.n	80082fc <vTaskSwitchContext+0x8c>
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	685a      	ldr	r2, [r3, #4]
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	605a      	str	r2, [r3, #4]
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	4a0c      	ldr	r2, [pc, #48]	@ (8008334 <vTaskSwitchContext+0xc4>)
 8008304:	6013      	str	r3, [r2, #0]
 8008306:	4a09      	ldr	r2, [pc, #36]	@ (800832c <vTaskSwitchContext+0xbc>)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800830c:	4b09      	ldr	r3, [pc, #36]	@ (8008334 <vTaskSwitchContext+0xc4>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	3354      	adds	r3, #84	@ 0x54
 8008312:	4a09      	ldr	r2, [pc, #36]	@ (8008338 <vTaskSwitchContext+0xc8>)
 8008314:	6013      	str	r3, [r2, #0]
}
 8008316:	bf00      	nop
 8008318:	3714      	adds	r7, #20
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	20005498 	.word	0x20005498
 8008328:	20005484 	.word	0x20005484
 800832c:	20005478 	.word	0x20005478
 8008330:	20004fa0 	.word	0x20004fa0
 8008334:	20004f9c 	.word	0x20004f9c
 8008338:	20000034 	.word	0x20000034

0800833c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d10b      	bne.n	8008364 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800834c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008350:	f383 8811 	msr	BASEPRI, r3
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	f3bf 8f4f 	dsb	sy
 800835c:	60fb      	str	r3, [r7, #12]
}
 800835e:	bf00      	nop
 8008360:	bf00      	nop
 8008362:	e7fd      	b.n	8008360 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008364:	4b07      	ldr	r3, [pc, #28]	@ (8008384 <vTaskPlaceOnEventList+0x48>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	3318      	adds	r3, #24
 800836a:	4619      	mov	r1, r3
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f7fe fe48 	bl	8007002 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008372:	2101      	movs	r1, #1
 8008374:	6838      	ldr	r0, [r7, #0]
 8008376:	f000 faaf 	bl	80088d8 <prvAddCurrentTaskToDelayedList>
}
 800837a:	bf00      	nop
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	20004f9c 	.word	0x20004f9c

08008388 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d10b      	bne.n	80083b2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800839a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800839e:	f383 8811 	msr	BASEPRI, r3
 80083a2:	f3bf 8f6f 	isb	sy
 80083a6:	f3bf 8f4f 	dsb	sy
 80083aa:	617b      	str	r3, [r7, #20]
}
 80083ac:	bf00      	nop
 80083ae:	bf00      	nop
 80083b0:	e7fd      	b.n	80083ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80083b2:	4b0a      	ldr	r3, [pc, #40]	@ (80083dc <vTaskPlaceOnEventListRestricted+0x54>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	3318      	adds	r3, #24
 80083b8:	4619      	mov	r1, r3
 80083ba:	68f8      	ldr	r0, [r7, #12]
 80083bc:	f7fe fdfd 	bl	8006fba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d002      	beq.n	80083cc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80083c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80083ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80083cc:	6879      	ldr	r1, [r7, #4]
 80083ce:	68b8      	ldr	r0, [r7, #8]
 80083d0:	f000 fa82 	bl	80088d8 <prvAddCurrentTaskToDelayedList>
	}
 80083d4:	bf00      	nop
 80083d6:	3718      	adds	r7, #24
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	20004f9c 	.word	0x20004f9c

080083e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b086      	sub	sp, #24
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d10b      	bne.n	800840e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80083f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083fa:	f383 8811 	msr	BASEPRI, r3
 80083fe:	f3bf 8f6f 	isb	sy
 8008402:	f3bf 8f4f 	dsb	sy
 8008406:	60fb      	str	r3, [r7, #12]
}
 8008408:	bf00      	nop
 800840a:	bf00      	nop
 800840c:	e7fd      	b.n	800840a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	3318      	adds	r3, #24
 8008412:	4618      	mov	r0, r3
 8008414:	f7fe fe2e 	bl	8007074 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008418:	4b1d      	ldr	r3, [pc, #116]	@ (8008490 <xTaskRemoveFromEventList+0xb0>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d11d      	bne.n	800845c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	3304      	adds	r3, #4
 8008424:	4618      	mov	r0, r3
 8008426:	f7fe fe25 	bl	8007074 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800842e:	4b19      	ldr	r3, [pc, #100]	@ (8008494 <xTaskRemoveFromEventList+0xb4>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	429a      	cmp	r2, r3
 8008434:	d903      	bls.n	800843e <xTaskRemoveFromEventList+0x5e>
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800843a:	4a16      	ldr	r2, [pc, #88]	@ (8008494 <xTaskRemoveFromEventList+0xb4>)
 800843c:	6013      	str	r3, [r2, #0]
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008442:	4613      	mov	r3, r2
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	4413      	add	r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	4a13      	ldr	r2, [pc, #76]	@ (8008498 <xTaskRemoveFromEventList+0xb8>)
 800844c:	441a      	add	r2, r3
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	3304      	adds	r3, #4
 8008452:	4619      	mov	r1, r3
 8008454:	4610      	mov	r0, r2
 8008456:	f7fe fdb0 	bl	8006fba <vListInsertEnd>
 800845a:	e005      	b.n	8008468 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	3318      	adds	r3, #24
 8008460:	4619      	mov	r1, r3
 8008462:	480e      	ldr	r0, [pc, #56]	@ (800849c <xTaskRemoveFromEventList+0xbc>)
 8008464:	f7fe fda9 	bl	8006fba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800846c:	4b0c      	ldr	r3, [pc, #48]	@ (80084a0 <xTaskRemoveFromEventList+0xc0>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008472:	429a      	cmp	r2, r3
 8008474:	d905      	bls.n	8008482 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008476:	2301      	movs	r3, #1
 8008478:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800847a:	4b0a      	ldr	r3, [pc, #40]	@ (80084a4 <xTaskRemoveFromEventList+0xc4>)
 800847c:	2201      	movs	r2, #1
 800847e:	601a      	str	r2, [r3, #0]
 8008480:	e001      	b.n	8008486 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008482:	2300      	movs	r3, #0
 8008484:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008486:	697b      	ldr	r3, [r7, #20]
}
 8008488:	4618      	mov	r0, r3
 800848a:	3718      	adds	r7, #24
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}
 8008490:	20005498 	.word	0x20005498
 8008494:	20005478 	.word	0x20005478
 8008498:	20004fa0 	.word	0x20004fa0
 800849c:	20005430 	.word	0x20005430
 80084a0:	20004f9c 	.word	0x20004f9c
 80084a4:	20005484 	.word	0x20005484

080084a8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d10b      	bne.n	80084ce <vTaskSetTimeOutState+0x26>
	__asm volatile
 80084b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ba:	f383 8811 	msr	BASEPRI, r3
 80084be:	f3bf 8f6f 	isb	sy
 80084c2:	f3bf 8f4f 	dsb	sy
 80084c6:	60fb      	str	r3, [r7, #12]
}
 80084c8:	bf00      	nop
 80084ca:	bf00      	nop
 80084cc:	e7fd      	b.n	80084ca <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 80084ce:	f000 fee3 	bl	8009298 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80084d2:	4b07      	ldr	r3, [pc, #28]	@ (80084f0 <vTaskSetTimeOutState+0x48>)
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80084da:	4b06      	ldr	r3, [pc, #24]	@ (80084f4 <vTaskSetTimeOutState+0x4c>)
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80084e2:	f000 ff0b 	bl	80092fc <vPortExitCritical>
}
 80084e6:	bf00      	nop
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	20005488 	.word	0x20005488
 80084f4:	20005474 	.word	0x20005474

080084f8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008500:	4b06      	ldr	r3, [pc, #24]	@ (800851c <vTaskInternalSetTimeOutState+0x24>)
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008508:	4b05      	ldr	r3, [pc, #20]	@ (8008520 <vTaskInternalSetTimeOutState+0x28>)
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	605a      	str	r2, [r3, #4]
}
 8008510:	bf00      	nop
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr
 800851c:	20005488 	.word	0x20005488
 8008520:	20005474 	.word	0x20005474

08008524 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b088      	sub	sp, #32
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10b      	bne.n	800854c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008538:	f383 8811 	msr	BASEPRI, r3
 800853c:	f3bf 8f6f 	isb	sy
 8008540:	f3bf 8f4f 	dsb	sy
 8008544:	613b      	str	r3, [r7, #16]
}
 8008546:	bf00      	nop
 8008548:	bf00      	nop
 800854a:	e7fd      	b.n	8008548 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d10b      	bne.n	800856a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008556:	f383 8811 	msr	BASEPRI, r3
 800855a:	f3bf 8f6f 	isb	sy
 800855e:	f3bf 8f4f 	dsb	sy
 8008562:	60fb      	str	r3, [r7, #12]
}
 8008564:	bf00      	nop
 8008566:	bf00      	nop
 8008568:	e7fd      	b.n	8008566 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800856a:	f000 fe95 	bl	8009298 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800856e:	4b1d      	ldr	r3, [pc, #116]	@ (80085e4 <xTaskCheckForTimeOut+0xc0>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	69ba      	ldr	r2, [r7, #24]
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008586:	d102      	bne.n	800858e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008588:	2300      	movs	r3, #0
 800858a:	61fb      	str	r3, [r7, #28]
 800858c:	e023      	b.n	80085d6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	4b15      	ldr	r3, [pc, #84]	@ (80085e8 <xTaskCheckForTimeOut+0xc4>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	429a      	cmp	r2, r3
 8008598:	d007      	beq.n	80085aa <xTaskCheckForTimeOut+0x86>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	69ba      	ldr	r2, [r7, #24]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d302      	bcc.n	80085aa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80085a4:	2301      	movs	r3, #1
 80085a6:	61fb      	str	r3, [r7, #28]
 80085a8:	e015      	b.n	80085d6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	697a      	ldr	r2, [r7, #20]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d20b      	bcs.n	80085cc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	1ad2      	subs	r2, r2, r3
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f7ff ff99 	bl	80084f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80085c6:	2300      	movs	r3, #0
 80085c8:	61fb      	str	r3, [r7, #28]
 80085ca:	e004      	b.n	80085d6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	2200      	movs	r2, #0
 80085d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80085d2:	2301      	movs	r3, #1
 80085d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80085d6:	f000 fe91 	bl	80092fc <vPortExitCritical>

	return xReturn;
 80085da:	69fb      	ldr	r3, [r7, #28]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3720      	adds	r7, #32
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	20005474 	.word	0x20005474
 80085e8:	20005488 	.word	0x20005488

080085ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80085ec:	b480      	push	{r7}
 80085ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80085f0:	4b03      	ldr	r3, [pc, #12]	@ (8008600 <vTaskMissedYield+0x14>)
 80085f2:	2201      	movs	r2, #1
 80085f4:	601a      	str	r2, [r3, #0]
}
 80085f6:	bf00      	nop
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	20005484 	.word	0x20005484

08008604 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800860c:	f000 f852 	bl	80086b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008610:	4b06      	ldr	r3, [pc, #24]	@ (800862c <prvIdleTask+0x28>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2b01      	cmp	r3, #1
 8008616:	d9f9      	bls.n	800860c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008618:	4b05      	ldr	r3, [pc, #20]	@ (8008630 <prvIdleTask+0x2c>)
 800861a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800861e:	601a      	str	r2, [r3, #0]
 8008620:	f3bf 8f4f 	dsb	sy
 8008624:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008628:	e7f0      	b.n	800860c <prvIdleTask+0x8>
 800862a:	bf00      	nop
 800862c:	20004fa0 	.word	0x20004fa0
 8008630:	e000ed04 	.word	0xe000ed04

08008634 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800863a:	2300      	movs	r3, #0
 800863c:	607b      	str	r3, [r7, #4]
 800863e:	e00c      	b.n	800865a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	4613      	mov	r3, r2
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	4413      	add	r3, r2
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	4a12      	ldr	r2, [pc, #72]	@ (8008694 <prvInitialiseTaskLists+0x60>)
 800864c:	4413      	add	r3, r2
 800864e:	4618      	mov	r0, r3
 8008650:	f7fe fc86 	bl	8006f60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	3301      	adds	r3, #1
 8008658:	607b      	str	r3, [r7, #4]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2b37      	cmp	r3, #55	@ 0x37
 800865e:	d9ef      	bls.n	8008640 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008660:	480d      	ldr	r0, [pc, #52]	@ (8008698 <prvInitialiseTaskLists+0x64>)
 8008662:	f7fe fc7d 	bl	8006f60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008666:	480d      	ldr	r0, [pc, #52]	@ (800869c <prvInitialiseTaskLists+0x68>)
 8008668:	f7fe fc7a 	bl	8006f60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800866c:	480c      	ldr	r0, [pc, #48]	@ (80086a0 <prvInitialiseTaskLists+0x6c>)
 800866e:	f7fe fc77 	bl	8006f60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008672:	480c      	ldr	r0, [pc, #48]	@ (80086a4 <prvInitialiseTaskLists+0x70>)
 8008674:	f7fe fc74 	bl	8006f60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008678:	480b      	ldr	r0, [pc, #44]	@ (80086a8 <prvInitialiseTaskLists+0x74>)
 800867a:	f7fe fc71 	bl	8006f60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800867e:	4b0b      	ldr	r3, [pc, #44]	@ (80086ac <prvInitialiseTaskLists+0x78>)
 8008680:	4a05      	ldr	r2, [pc, #20]	@ (8008698 <prvInitialiseTaskLists+0x64>)
 8008682:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008684:	4b0a      	ldr	r3, [pc, #40]	@ (80086b0 <prvInitialiseTaskLists+0x7c>)
 8008686:	4a05      	ldr	r2, [pc, #20]	@ (800869c <prvInitialiseTaskLists+0x68>)
 8008688:	601a      	str	r2, [r3, #0]
}
 800868a:	bf00      	nop
 800868c:	3708      	adds	r7, #8
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	20004fa0 	.word	0x20004fa0
 8008698:	20005400 	.word	0x20005400
 800869c:	20005414 	.word	0x20005414
 80086a0:	20005430 	.word	0x20005430
 80086a4:	20005444 	.word	0x20005444
 80086a8:	2000545c 	.word	0x2000545c
 80086ac:	20005428 	.word	0x20005428
 80086b0:	2000542c 	.word	0x2000542c

080086b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086ba:	e019      	b.n	80086f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80086bc:	f000 fdec 	bl	8009298 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086c0:	4b10      	ldr	r3, [pc, #64]	@ (8008704 <prvCheckTasksWaitingTermination+0x50>)
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	3304      	adds	r3, #4
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7fe fcd1 	bl	8007074 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80086d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008708 <prvCheckTasksWaitingTermination+0x54>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	3b01      	subs	r3, #1
 80086d8:	4a0b      	ldr	r2, [pc, #44]	@ (8008708 <prvCheckTasksWaitingTermination+0x54>)
 80086da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80086dc:	4b0b      	ldr	r3, [pc, #44]	@ (800870c <prvCheckTasksWaitingTermination+0x58>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	3b01      	subs	r3, #1
 80086e2:	4a0a      	ldr	r2, [pc, #40]	@ (800870c <prvCheckTasksWaitingTermination+0x58>)
 80086e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80086e6:	f000 fe09 	bl	80092fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 f810 	bl	8008710 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086f0:	4b06      	ldr	r3, [pc, #24]	@ (800870c <prvCheckTasksWaitingTermination+0x58>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1e1      	bne.n	80086bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80086f8:	bf00      	nop
 80086fa:	bf00      	nop
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	20005444 	.word	0x20005444
 8008708:	20005470 	.word	0x20005470
 800870c:	20005458 	.word	0x20005458

08008710 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	3354      	adds	r3, #84	@ 0x54
 800871c:	4618      	mov	r0, r3
 800871e:	f00c f81d 	bl	801475c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008728:	2b00      	cmp	r3, #0
 800872a:	d108      	bne.n	800873e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008730:	4618      	mov	r0, r3
 8008732:	f000 ffa1 	bl	8009678 <vPortFree>
				vPortFree( pxTCB );
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 ff9e 	bl	8009678 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800873c:	e019      	b.n	8008772 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008744:	2b01      	cmp	r3, #1
 8008746:	d103      	bne.n	8008750 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 ff95 	bl	8009678 <vPortFree>
	}
 800874e:	e010      	b.n	8008772 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008756:	2b02      	cmp	r3, #2
 8008758:	d00b      	beq.n	8008772 <prvDeleteTCB+0x62>
	__asm volatile
 800875a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800875e:	f383 8811 	msr	BASEPRI, r3
 8008762:	f3bf 8f6f 	isb	sy
 8008766:	f3bf 8f4f 	dsb	sy
 800876a:	60fb      	str	r3, [r7, #12]
}
 800876c:	bf00      	nop
 800876e:	bf00      	nop
 8008770:	e7fd      	b.n	800876e <prvDeleteTCB+0x5e>
	}
 8008772:	bf00      	nop
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
	...

0800877c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008782:	4b0c      	ldr	r3, [pc, #48]	@ (80087b4 <prvResetNextTaskUnblockTime+0x38>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d104      	bne.n	8008796 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800878c:	4b0a      	ldr	r3, [pc, #40]	@ (80087b8 <prvResetNextTaskUnblockTime+0x3c>)
 800878e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008792:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008794:	e008      	b.n	80087a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008796:	4b07      	ldr	r3, [pc, #28]	@ (80087b4 <prvResetNextTaskUnblockTime+0x38>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	4a04      	ldr	r2, [pc, #16]	@ (80087b8 <prvResetNextTaskUnblockTime+0x3c>)
 80087a6:	6013      	str	r3, [r2, #0]
}
 80087a8:	bf00      	nop
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr
 80087b4:	20005428 	.word	0x20005428
 80087b8:	20005490 	.word	0x20005490

080087bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80087c2:	4b0b      	ldr	r3, [pc, #44]	@ (80087f0 <xTaskGetSchedulerState+0x34>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d102      	bne.n	80087d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80087ca:	2301      	movs	r3, #1
 80087cc:	607b      	str	r3, [r7, #4]
 80087ce:	e008      	b.n	80087e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087d0:	4b08      	ldr	r3, [pc, #32]	@ (80087f4 <xTaskGetSchedulerState+0x38>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d102      	bne.n	80087de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80087d8:	2302      	movs	r3, #2
 80087da:	607b      	str	r3, [r7, #4]
 80087dc:	e001      	b.n	80087e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80087de:	2300      	movs	r3, #0
 80087e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80087e2:	687b      	ldr	r3, [r7, #4]
	}
 80087e4:	4618      	mov	r0, r3
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr
 80087f0:	2000547c 	.word	0x2000547c
 80087f4:	20005498 	.word	0x20005498

080087f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b086      	sub	sp, #24
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008804:	2300      	movs	r3, #0
 8008806:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d058      	beq.n	80088c0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800880e:	4b2f      	ldr	r3, [pc, #188]	@ (80088cc <xTaskPriorityDisinherit+0xd4>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	693a      	ldr	r2, [r7, #16]
 8008814:	429a      	cmp	r2, r3
 8008816:	d00b      	beq.n	8008830 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800881c:	f383 8811 	msr	BASEPRI, r3
 8008820:	f3bf 8f6f 	isb	sy
 8008824:	f3bf 8f4f 	dsb	sy
 8008828:	60fb      	str	r3, [r7, #12]
}
 800882a:	bf00      	nop
 800882c:	bf00      	nop
 800882e:	e7fd      	b.n	800882c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008834:	2b00      	cmp	r3, #0
 8008836:	d10b      	bne.n	8008850 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800883c:	f383 8811 	msr	BASEPRI, r3
 8008840:	f3bf 8f6f 	isb	sy
 8008844:	f3bf 8f4f 	dsb	sy
 8008848:	60bb      	str	r3, [r7, #8]
}
 800884a:	bf00      	nop
 800884c:	bf00      	nop
 800884e:	e7fd      	b.n	800884c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008854:	1e5a      	subs	r2, r3, #1
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008862:	429a      	cmp	r2, r3
 8008864:	d02c      	beq.n	80088c0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800886a:	2b00      	cmp	r3, #0
 800886c:	d128      	bne.n	80088c0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	3304      	adds	r3, #4
 8008872:	4618      	mov	r0, r3
 8008874:	f7fe fbfe 	bl	8007074 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008884:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008890:	4b0f      	ldr	r3, [pc, #60]	@ (80088d0 <xTaskPriorityDisinherit+0xd8>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	429a      	cmp	r2, r3
 8008896:	d903      	bls.n	80088a0 <xTaskPriorityDisinherit+0xa8>
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800889c:	4a0c      	ldr	r2, [pc, #48]	@ (80088d0 <xTaskPriorityDisinherit+0xd8>)
 800889e:	6013      	str	r3, [r2, #0]
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088a4:	4613      	mov	r3, r2
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	4413      	add	r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4a09      	ldr	r2, [pc, #36]	@ (80088d4 <xTaskPriorityDisinherit+0xdc>)
 80088ae:	441a      	add	r2, r3
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	3304      	adds	r3, #4
 80088b4:	4619      	mov	r1, r3
 80088b6:	4610      	mov	r0, r2
 80088b8:	f7fe fb7f 	bl	8006fba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80088bc:	2301      	movs	r3, #1
 80088be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80088c0:	697b      	ldr	r3, [r7, #20]
	}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3718      	adds	r7, #24
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	20004f9c 	.word	0x20004f9c
 80088d0:	20005478 	.word	0x20005478
 80088d4:	20004fa0 	.word	0x20004fa0

080088d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80088e2:	4b21      	ldr	r3, [pc, #132]	@ (8008968 <prvAddCurrentTaskToDelayedList+0x90>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088e8:	4b20      	ldr	r3, [pc, #128]	@ (800896c <prvAddCurrentTaskToDelayedList+0x94>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	3304      	adds	r3, #4
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7fe fbc0 	bl	8007074 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088fa:	d10a      	bne.n	8008912 <prvAddCurrentTaskToDelayedList+0x3a>
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d007      	beq.n	8008912 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008902:	4b1a      	ldr	r3, [pc, #104]	@ (800896c <prvAddCurrentTaskToDelayedList+0x94>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	3304      	adds	r3, #4
 8008908:	4619      	mov	r1, r3
 800890a:	4819      	ldr	r0, [pc, #100]	@ (8008970 <prvAddCurrentTaskToDelayedList+0x98>)
 800890c:	f7fe fb55 	bl	8006fba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008910:	e026      	b.n	8008960 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4413      	add	r3, r2
 8008918:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800891a:	4b14      	ldr	r3, [pc, #80]	@ (800896c <prvAddCurrentTaskToDelayedList+0x94>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008922:	68ba      	ldr	r2, [r7, #8]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	429a      	cmp	r2, r3
 8008928:	d209      	bcs.n	800893e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800892a:	4b12      	ldr	r3, [pc, #72]	@ (8008974 <prvAddCurrentTaskToDelayedList+0x9c>)
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	4b0f      	ldr	r3, [pc, #60]	@ (800896c <prvAddCurrentTaskToDelayedList+0x94>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	3304      	adds	r3, #4
 8008934:	4619      	mov	r1, r3
 8008936:	4610      	mov	r0, r2
 8008938:	f7fe fb63 	bl	8007002 <vListInsert>
}
 800893c:	e010      	b.n	8008960 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800893e:	4b0e      	ldr	r3, [pc, #56]	@ (8008978 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	4b0a      	ldr	r3, [pc, #40]	@ (800896c <prvAddCurrentTaskToDelayedList+0x94>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	3304      	adds	r3, #4
 8008948:	4619      	mov	r1, r3
 800894a:	4610      	mov	r0, r2
 800894c:	f7fe fb59 	bl	8007002 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008950:	4b0a      	ldr	r3, [pc, #40]	@ (800897c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	68ba      	ldr	r2, [r7, #8]
 8008956:	429a      	cmp	r2, r3
 8008958:	d202      	bcs.n	8008960 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800895a:	4a08      	ldr	r2, [pc, #32]	@ (800897c <prvAddCurrentTaskToDelayedList+0xa4>)
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	6013      	str	r3, [r2, #0]
}
 8008960:	bf00      	nop
 8008962:	3710      	adds	r7, #16
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}
 8008968:	20005474 	.word	0x20005474
 800896c:	20004f9c 	.word	0x20004f9c
 8008970:	2000545c 	.word	0x2000545c
 8008974:	2000542c 	.word	0x2000542c
 8008978:	20005428 	.word	0x20005428
 800897c:	20005490 	.word	0x20005490

08008980 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b08a      	sub	sp, #40	@ 0x28
 8008984:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008986:	2300      	movs	r3, #0
 8008988:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800898a:	f000 fb13 	bl	8008fb4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800898e:	4b1d      	ldr	r3, [pc, #116]	@ (8008a04 <xTimerCreateTimerTask+0x84>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d021      	beq.n	80089da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008996:	2300      	movs	r3, #0
 8008998:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800899a:	2300      	movs	r3, #0
 800899c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800899e:	1d3a      	adds	r2, r7, #4
 80089a0:	f107 0108 	add.w	r1, r7, #8
 80089a4:	f107 030c 	add.w	r3, r7, #12
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7fe fabf 	bl	8006f2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80089ae:	6879      	ldr	r1, [r7, #4]
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	9202      	str	r2, [sp, #8]
 80089b6:	9301      	str	r3, [sp, #4]
 80089b8:	2302      	movs	r3, #2
 80089ba:	9300      	str	r3, [sp, #0]
 80089bc:	2300      	movs	r3, #0
 80089be:	460a      	mov	r2, r1
 80089c0:	4911      	ldr	r1, [pc, #68]	@ (8008a08 <xTimerCreateTimerTask+0x88>)
 80089c2:	4812      	ldr	r0, [pc, #72]	@ (8008a0c <xTimerCreateTimerTask+0x8c>)
 80089c4:	f7ff f87a 	bl	8007abc <xTaskCreateStatic>
 80089c8:	4603      	mov	r3, r0
 80089ca:	4a11      	ldr	r2, [pc, #68]	@ (8008a10 <xTimerCreateTimerTask+0x90>)
 80089cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80089ce:	4b10      	ldr	r3, [pc, #64]	@ (8008a10 <xTimerCreateTimerTask+0x90>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d001      	beq.n	80089da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80089d6:	2301      	movs	r3, #1
 80089d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d10b      	bne.n	80089f8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80089e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	613b      	str	r3, [r7, #16]
}
 80089f2:	bf00      	nop
 80089f4:	bf00      	nop
 80089f6:	e7fd      	b.n	80089f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80089f8:	697b      	ldr	r3, [r7, #20]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3718      	adds	r7, #24
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	200054cc 	.word	0x200054cc
 8008a08:	08015704 	.word	0x08015704
 8008a0c:	08008b4d 	.word	0x08008b4d
 8008a10:	200054d0 	.word	0x200054d0

08008a14 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b08a      	sub	sp, #40	@ 0x28
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
 8008a20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008a22:	2300      	movs	r3, #0
 8008a24:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d10b      	bne.n	8008a44 <xTimerGenericCommand+0x30>
	__asm volatile
 8008a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a30:	f383 8811 	msr	BASEPRI, r3
 8008a34:	f3bf 8f6f 	isb	sy
 8008a38:	f3bf 8f4f 	dsb	sy
 8008a3c:	623b      	str	r3, [r7, #32]
}
 8008a3e:	bf00      	nop
 8008a40:	bf00      	nop
 8008a42:	e7fd      	b.n	8008a40 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008a44:	4b19      	ldr	r3, [pc, #100]	@ (8008aac <xTimerGenericCommand+0x98>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d02a      	beq.n	8008aa2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	2b05      	cmp	r3, #5
 8008a5c:	dc18      	bgt.n	8008a90 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008a5e:	f7ff fead 	bl	80087bc <xTaskGetSchedulerState>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d109      	bne.n	8008a7c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008a68:	4b10      	ldr	r3, [pc, #64]	@ (8008aac <xTimerGenericCommand+0x98>)
 8008a6a:	6818      	ldr	r0, [r3, #0]
 8008a6c:	f107 0110 	add.w	r1, r7, #16
 8008a70:	2300      	movs	r3, #0
 8008a72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a74:	f7fe fc32 	bl	80072dc <xQueueGenericSend>
 8008a78:	6278      	str	r0, [r7, #36]	@ 0x24
 8008a7a:	e012      	b.n	8008aa2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8008aac <xTimerGenericCommand+0x98>)
 8008a7e:	6818      	ldr	r0, [r3, #0]
 8008a80:	f107 0110 	add.w	r1, r7, #16
 8008a84:	2300      	movs	r3, #0
 8008a86:	2200      	movs	r2, #0
 8008a88:	f7fe fc28 	bl	80072dc <xQueueGenericSend>
 8008a8c:	6278      	str	r0, [r7, #36]	@ 0x24
 8008a8e:	e008      	b.n	8008aa2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008a90:	4b06      	ldr	r3, [pc, #24]	@ (8008aac <xTimerGenericCommand+0x98>)
 8008a92:	6818      	ldr	r0, [r3, #0]
 8008a94:	f107 0110 	add.w	r1, r7, #16
 8008a98:	2300      	movs	r3, #0
 8008a9a:	683a      	ldr	r2, [r7, #0]
 8008a9c:	f7fe fd20 	bl	80074e0 <xQueueGenericSendFromISR>
 8008aa0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3728      	adds	r7, #40	@ 0x28
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	200054cc 	.word	0x200054cc

08008ab0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b088      	sub	sp, #32
 8008ab4:	af02      	add	r7, sp, #8
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008aba:	4b23      	ldr	r3, [pc, #140]	@ (8008b48 <prvProcessExpiredTimer+0x98>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	3304      	adds	r3, #4
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f7fe fad3 	bl	8007074 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ad4:	f003 0304 	and.w	r3, r3, #4
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d023      	beq.n	8008b24 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	699a      	ldr	r2, [r3, #24]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	18d1      	adds	r1, r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	683a      	ldr	r2, [r7, #0]
 8008ae8:	6978      	ldr	r0, [r7, #20]
 8008aea:	f000 f8d5 	bl	8008c98 <prvInsertTimerInActiveList>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d020      	beq.n	8008b36 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008af4:	2300      	movs	r3, #0
 8008af6:	9300      	str	r3, [sp, #0]
 8008af8:	2300      	movs	r3, #0
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	2100      	movs	r1, #0
 8008afe:	6978      	ldr	r0, [r7, #20]
 8008b00:	f7ff ff88 	bl	8008a14 <xTimerGenericCommand>
 8008b04:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d114      	bne.n	8008b36 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b10:	f383 8811 	msr	BASEPRI, r3
 8008b14:	f3bf 8f6f 	isb	sy
 8008b18:	f3bf 8f4f 	dsb	sy
 8008b1c:	60fb      	str	r3, [r7, #12]
}
 8008b1e:	bf00      	nop
 8008b20:	bf00      	nop
 8008b22:	e7fd      	b.n	8008b20 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b2a:	f023 0301 	bic.w	r3, r3, #1
 8008b2e:	b2da      	uxtb	r2, r3
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	6a1b      	ldr	r3, [r3, #32]
 8008b3a:	6978      	ldr	r0, [r7, #20]
 8008b3c:	4798      	blx	r3
}
 8008b3e:	bf00      	nop
 8008b40:	3718      	adds	r7, #24
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	200054c4 	.word	0x200054c4

08008b4c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b54:	f107 0308 	add.w	r3, r7, #8
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f000 f859 	bl	8008c10 <prvGetNextExpireTime>
 8008b5e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	4619      	mov	r1, r3
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f000 f805 	bl	8008b74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008b6a:	f000 f8d7 	bl	8008d1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b6e:	bf00      	nop
 8008b70:	e7f0      	b.n	8008b54 <prvTimerTask+0x8>
	...

08008b74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008b7e:	f7ff fa01 	bl	8007f84 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b82:	f107 0308 	add.w	r3, r7, #8
 8008b86:	4618      	mov	r0, r3
 8008b88:	f000 f866 	bl	8008c58 <prvSampleTimeNow>
 8008b8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d130      	bne.n	8008bf6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d10a      	bne.n	8008bb0 <prvProcessTimerOrBlockTask+0x3c>
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d806      	bhi.n	8008bb0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008ba2:	f7ff f9fd 	bl	8007fa0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008ba6:	68f9      	ldr	r1, [r7, #12]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f7ff ff81 	bl	8008ab0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008bae:	e024      	b.n	8008bfa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d008      	beq.n	8008bc8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008bb6:	4b13      	ldr	r3, [pc, #76]	@ (8008c04 <prvProcessTimerOrBlockTask+0x90>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <prvProcessTimerOrBlockTask+0x50>
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e000      	b.n	8008bc6 <prvProcessTimerOrBlockTask+0x52>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8008c08 <prvProcessTimerOrBlockTask+0x94>)
 8008bca:	6818      	ldr	r0, [r3, #0]
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	683a      	ldr	r2, [r7, #0]
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	f7fe ff3d 	bl	8007a54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008bda:	f7ff f9e1 	bl	8007fa0 <xTaskResumeAll>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d10a      	bne.n	8008bfa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008be4:	4b09      	ldr	r3, [pc, #36]	@ (8008c0c <prvProcessTimerOrBlockTask+0x98>)
 8008be6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bea:	601a      	str	r2, [r3, #0]
 8008bec:	f3bf 8f4f 	dsb	sy
 8008bf0:	f3bf 8f6f 	isb	sy
}
 8008bf4:	e001      	b.n	8008bfa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008bf6:	f7ff f9d3 	bl	8007fa0 <xTaskResumeAll>
}
 8008bfa:	bf00      	nop
 8008bfc:	3710      	adds	r7, #16
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	200054c8 	.word	0x200054c8
 8008c08:	200054cc 	.word	0x200054cc
 8008c0c:	e000ed04 	.word	0xe000ed04

08008c10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008c18:	4b0e      	ldr	r3, [pc, #56]	@ (8008c54 <prvGetNextExpireTime+0x44>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d101      	bne.n	8008c26 <prvGetNextExpireTime+0x16>
 8008c22:	2201      	movs	r2, #1
 8008c24:	e000      	b.n	8008c28 <prvGetNextExpireTime+0x18>
 8008c26:	2200      	movs	r2, #0
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d105      	bne.n	8008c40 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c34:	4b07      	ldr	r3, [pc, #28]	@ (8008c54 <prvGetNextExpireTime+0x44>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	60fb      	str	r3, [r7, #12]
 8008c3e:	e001      	b.n	8008c44 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008c40:	2300      	movs	r3, #0
 8008c42:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008c44:	68fb      	ldr	r3, [r7, #12]
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3714      	adds	r7, #20
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	200054c4 	.word	0x200054c4

08008c58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008c60:	f7ff fa3c 	bl	80080dc <xTaskGetTickCount>
 8008c64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008c66:	4b0b      	ldr	r3, [pc, #44]	@ (8008c94 <prvSampleTimeNow+0x3c>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d205      	bcs.n	8008c7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008c70:	f000 f93a 	bl	8008ee8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	601a      	str	r2, [r3, #0]
 8008c7a:	e002      	b.n	8008c82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008c82:	4a04      	ldr	r2, [pc, #16]	@ (8008c94 <prvSampleTimeNow+0x3c>)
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008c88:	68fb      	ldr	r3, [r7, #12]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	200054d4 	.word	0x200054d4

08008c98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b086      	sub	sp, #24
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	607a      	str	r2, [r7, #4]
 8008ca4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	68ba      	ldr	r2, [r7, #8]
 8008cae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d812      	bhi.n	8008ce4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	1ad2      	subs	r2, r2, r3
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	699b      	ldr	r3, [r3, #24]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d302      	bcc.n	8008cd2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	617b      	str	r3, [r7, #20]
 8008cd0:	e01b      	b.n	8008d0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008cd2:	4b10      	ldr	r3, [pc, #64]	@ (8008d14 <prvInsertTimerInActiveList+0x7c>)
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	3304      	adds	r3, #4
 8008cda:	4619      	mov	r1, r3
 8008cdc:	4610      	mov	r0, r2
 8008cde:	f7fe f990 	bl	8007002 <vListInsert>
 8008ce2:	e012      	b.n	8008d0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d206      	bcs.n	8008cfa <prvInsertTimerInActiveList+0x62>
 8008cec:	68ba      	ldr	r2, [r7, #8]
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d302      	bcc.n	8008cfa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	617b      	str	r3, [r7, #20]
 8008cf8:	e007      	b.n	8008d0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cfa:	4b07      	ldr	r3, [pc, #28]	@ (8008d18 <prvInsertTimerInActiveList+0x80>)
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	3304      	adds	r3, #4
 8008d02:	4619      	mov	r1, r3
 8008d04:	4610      	mov	r0, r2
 8008d06:	f7fe f97c 	bl	8007002 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008d0a:	697b      	ldr	r3, [r7, #20]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3718      	adds	r7, #24
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	200054c8 	.word	0x200054c8
 8008d18:	200054c4 	.word	0x200054c4

08008d1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b08e      	sub	sp, #56	@ 0x38
 8008d20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d22:	e0ce      	b.n	8008ec2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	da19      	bge.n	8008d5e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008d2a:	1d3b      	adds	r3, r7, #4
 8008d2c:	3304      	adds	r3, #4
 8008d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d10b      	bne.n	8008d4e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d3a:	f383 8811 	msr	BASEPRI, r3
 8008d3e:	f3bf 8f6f 	isb	sy
 8008d42:	f3bf 8f4f 	dsb	sy
 8008d46:	61fb      	str	r3, [r7, #28]
}
 8008d48:	bf00      	nop
 8008d4a:	bf00      	nop
 8008d4c:	e7fd      	b.n	8008d4a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d54:	6850      	ldr	r0, [r2, #4]
 8008d56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d58:	6892      	ldr	r2, [r2, #8]
 8008d5a:	4611      	mov	r1, r2
 8008d5c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f2c0 80ae 	blt.w	8008ec2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d6c:	695b      	ldr	r3, [r3, #20]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d004      	beq.n	8008d7c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d74:	3304      	adds	r3, #4
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7fe f97c 	bl	8007074 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d7c:	463b      	mov	r3, r7
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7ff ff6a 	bl	8008c58 <prvSampleTimeNow>
 8008d84:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2b09      	cmp	r3, #9
 8008d8a:	f200 8097 	bhi.w	8008ebc <prvProcessReceivedCommands+0x1a0>
 8008d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d94 <prvProcessReceivedCommands+0x78>)
 8008d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d94:	08008dbd 	.word	0x08008dbd
 8008d98:	08008dbd 	.word	0x08008dbd
 8008d9c:	08008dbd 	.word	0x08008dbd
 8008da0:	08008e33 	.word	0x08008e33
 8008da4:	08008e47 	.word	0x08008e47
 8008da8:	08008e93 	.word	0x08008e93
 8008dac:	08008dbd 	.word	0x08008dbd
 8008db0:	08008dbd 	.word	0x08008dbd
 8008db4:	08008e33 	.word	0x08008e33
 8008db8:	08008e47 	.word	0x08008e47
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dbe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008dc2:	f043 0301 	orr.w	r3, r3, #1
 8008dc6:	b2da      	uxtb	r2, r3
 8008dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008dce:	68ba      	ldr	r2, [r7, #8]
 8008dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	18d1      	adds	r1, r2, r3
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ddc:	f7ff ff5c 	bl	8008c98 <prvInsertTimerInActiveList>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d06c      	beq.n	8008ec0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de8:	6a1b      	ldr	r3, [r3, #32]
 8008dea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008dec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008df4:	f003 0304 	and.w	r3, r3, #4
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d061      	beq.n	8008ec0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008dfc:	68ba      	ldr	r2, [r7, #8]
 8008dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	441a      	add	r2, r3
 8008e04:	2300      	movs	r3, #0
 8008e06:	9300      	str	r3, [sp, #0]
 8008e08:	2300      	movs	r3, #0
 8008e0a:	2100      	movs	r1, #0
 8008e0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e0e:	f7ff fe01 	bl	8008a14 <xTimerGenericCommand>
 8008e12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008e14:	6a3b      	ldr	r3, [r7, #32]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d152      	bne.n	8008ec0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e1e:	f383 8811 	msr	BASEPRI, r3
 8008e22:	f3bf 8f6f 	isb	sy
 8008e26:	f3bf 8f4f 	dsb	sy
 8008e2a:	61bb      	str	r3, [r7, #24]
}
 8008e2c:	bf00      	nop
 8008e2e:	bf00      	nop
 8008e30:	e7fd      	b.n	8008e2e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e38:	f023 0301 	bic.w	r3, r3, #1
 8008e3c:	b2da      	uxtb	r2, r3
 8008e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e40:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008e44:	e03d      	b.n	8008ec2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e4c:	f043 0301 	orr.w	r3, r3, #1
 8008e50:	b2da      	uxtb	r2, r3
 8008e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e54:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008e58:	68ba      	ldr	r2, [r7, #8]
 8008e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e5c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e60:	699b      	ldr	r3, [r3, #24]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d10b      	bne.n	8008e7e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e6a:	f383 8811 	msr	BASEPRI, r3
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	f3bf 8f4f 	dsb	sy
 8008e76:	617b      	str	r3, [r7, #20]
}
 8008e78:	bf00      	nop
 8008e7a:	bf00      	nop
 8008e7c:	e7fd      	b.n	8008e7a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e80:	699a      	ldr	r2, [r3, #24]
 8008e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e84:	18d1      	adds	r1, r2, r3
 8008e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e8c:	f7ff ff04 	bl	8008c98 <prvInsertTimerInActiveList>
					break;
 8008e90:	e017      	b.n	8008ec2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e98:	f003 0302 	and.w	r3, r3, #2
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d103      	bne.n	8008ea8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008ea0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ea2:	f000 fbe9 	bl	8009678 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008ea6:	e00c      	b.n	8008ec2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eaa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008eae:	f023 0301 	bic.w	r3, r3, #1
 8008eb2:	b2da      	uxtb	r2, r3
 8008eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008eba:	e002      	b.n	8008ec2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008ebc:	bf00      	nop
 8008ebe:	e000      	b.n	8008ec2 <prvProcessReceivedCommands+0x1a6>
					break;
 8008ec0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008ec2:	4b08      	ldr	r3, [pc, #32]	@ (8008ee4 <prvProcessReceivedCommands+0x1c8>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	1d39      	adds	r1, r7, #4
 8008ec8:	2200      	movs	r2, #0
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fe fba6 	bl	800761c <xQueueReceive>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f47f af26 	bne.w	8008d24 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008ed8:	bf00      	nop
 8008eda:	bf00      	nop
 8008edc:	3730      	adds	r7, #48	@ 0x30
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	200054cc 	.word	0x200054cc

08008ee8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b088      	sub	sp, #32
 8008eec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008eee:	e049      	b.n	8008f84 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ef0:	4b2e      	ldr	r3, [pc, #184]	@ (8008fac <prvSwitchTimerLists+0xc4>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008efa:	4b2c      	ldr	r3, [pc, #176]	@ (8008fac <prvSwitchTimerLists+0xc4>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	3304      	adds	r3, #4
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7fe f8b3 	bl	8007074 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	6a1b      	ldr	r3, [r3, #32]
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f1c:	f003 0304 	and.w	r3, r3, #4
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d02f      	beq.n	8008f84 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	699b      	ldr	r3, [r3, #24]
 8008f28:	693a      	ldr	r2, [r7, #16]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008f2e:	68ba      	ldr	r2, [r7, #8]
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d90e      	bls.n	8008f54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	68ba      	ldr	r2, [r7, #8]
 8008f3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f42:	4b1a      	ldr	r3, [pc, #104]	@ (8008fac <prvSwitchTimerLists+0xc4>)
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	3304      	adds	r3, #4
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	4610      	mov	r0, r2
 8008f4e:	f7fe f858 	bl	8007002 <vListInsert>
 8008f52:	e017      	b.n	8008f84 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f54:	2300      	movs	r3, #0
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	2300      	movs	r3, #0
 8008f5a:	693a      	ldr	r2, [r7, #16]
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	68f8      	ldr	r0, [r7, #12]
 8008f60:	f7ff fd58 	bl	8008a14 <xTimerGenericCommand>
 8008f64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d10b      	bne.n	8008f84 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f70:	f383 8811 	msr	BASEPRI, r3
 8008f74:	f3bf 8f6f 	isb	sy
 8008f78:	f3bf 8f4f 	dsb	sy
 8008f7c:	603b      	str	r3, [r7, #0]
}
 8008f7e:	bf00      	nop
 8008f80:	bf00      	nop
 8008f82:	e7fd      	b.n	8008f80 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f84:	4b09      	ldr	r3, [pc, #36]	@ (8008fac <prvSwitchTimerLists+0xc4>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d1b0      	bne.n	8008ef0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008f8e:	4b07      	ldr	r3, [pc, #28]	@ (8008fac <prvSwitchTimerLists+0xc4>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008f94:	4b06      	ldr	r3, [pc, #24]	@ (8008fb0 <prvSwitchTimerLists+0xc8>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a04      	ldr	r2, [pc, #16]	@ (8008fac <prvSwitchTimerLists+0xc4>)
 8008f9a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008f9c:	4a04      	ldr	r2, [pc, #16]	@ (8008fb0 <prvSwitchTimerLists+0xc8>)
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	6013      	str	r3, [r2, #0]
}
 8008fa2:	bf00      	nop
 8008fa4:	3718      	adds	r7, #24
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	200054c4 	.word	0x200054c4
 8008fb0:	200054c8 	.word	0x200054c8

08008fb4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008fba:	f000 f96d 	bl	8009298 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008fbe:	4b15      	ldr	r3, [pc, #84]	@ (8009014 <prvCheckForValidListAndQueue+0x60>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d120      	bne.n	8009008 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008fc6:	4814      	ldr	r0, [pc, #80]	@ (8009018 <prvCheckForValidListAndQueue+0x64>)
 8008fc8:	f7fd ffca 	bl	8006f60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008fcc:	4813      	ldr	r0, [pc, #76]	@ (800901c <prvCheckForValidListAndQueue+0x68>)
 8008fce:	f7fd ffc7 	bl	8006f60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008fd2:	4b13      	ldr	r3, [pc, #76]	@ (8009020 <prvCheckForValidListAndQueue+0x6c>)
 8008fd4:	4a10      	ldr	r2, [pc, #64]	@ (8009018 <prvCheckForValidListAndQueue+0x64>)
 8008fd6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008fd8:	4b12      	ldr	r3, [pc, #72]	@ (8009024 <prvCheckForValidListAndQueue+0x70>)
 8008fda:	4a10      	ldr	r2, [pc, #64]	@ (800901c <prvCheckForValidListAndQueue+0x68>)
 8008fdc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008fde:	2300      	movs	r3, #0
 8008fe0:	9300      	str	r3, [sp, #0]
 8008fe2:	4b11      	ldr	r3, [pc, #68]	@ (8009028 <prvCheckForValidListAndQueue+0x74>)
 8008fe4:	4a11      	ldr	r2, [pc, #68]	@ (800902c <prvCheckForValidListAndQueue+0x78>)
 8008fe6:	2110      	movs	r1, #16
 8008fe8:	200a      	movs	r0, #10
 8008fea:	f7fe f8d7 	bl	800719c <xQueueGenericCreateStatic>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	4a08      	ldr	r2, [pc, #32]	@ (8009014 <prvCheckForValidListAndQueue+0x60>)
 8008ff2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008ff4:	4b07      	ldr	r3, [pc, #28]	@ (8009014 <prvCheckForValidListAndQueue+0x60>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d005      	beq.n	8009008 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008ffc:	4b05      	ldr	r3, [pc, #20]	@ (8009014 <prvCheckForValidListAndQueue+0x60>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	490b      	ldr	r1, [pc, #44]	@ (8009030 <prvCheckForValidListAndQueue+0x7c>)
 8009002:	4618      	mov	r0, r3
 8009004:	f7fe fcfc 	bl	8007a00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009008:	f000 f978 	bl	80092fc <vPortExitCritical>
}
 800900c:	bf00      	nop
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	200054cc 	.word	0x200054cc
 8009018:	2000549c 	.word	0x2000549c
 800901c:	200054b0 	.word	0x200054b0
 8009020:	200054c4 	.word	0x200054c4
 8009024:	200054c8 	.word	0x200054c8
 8009028:	20005578 	.word	0x20005578
 800902c:	200054d8 	.word	0x200054d8
 8009030:	0801570c 	.word	0x0801570c

08009034 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009034:	b480      	push	{r7}
 8009036:	b085      	sub	sp, #20
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	3b04      	subs	r3, #4
 8009044:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800904c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	3b04      	subs	r3, #4
 8009052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	f023 0201 	bic.w	r2, r3, #1
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	3b04      	subs	r3, #4
 8009062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009064:	4a0c      	ldr	r2, [pc, #48]	@ (8009098 <pxPortInitialiseStack+0x64>)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	3b14      	subs	r3, #20
 800906e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	3b04      	subs	r3, #4
 800907a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f06f 0202 	mvn.w	r2, #2
 8009082:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	3b20      	subs	r3, #32
 8009088:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800908a:	68fb      	ldr	r3, [r7, #12]
}
 800908c:	4618      	mov	r0, r3
 800908e:	3714      	adds	r7, #20
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr
 8009098:	0800909d 	.word	0x0800909d

0800909c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800909c:	b480      	push	{r7}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80090a2:	2300      	movs	r3, #0
 80090a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80090a6:	4b13      	ldr	r3, [pc, #76]	@ (80090f4 <prvTaskExitError+0x58>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80090ae:	d00b      	beq.n	80090c8 <prvTaskExitError+0x2c>
	__asm volatile
 80090b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090b4:	f383 8811 	msr	BASEPRI, r3
 80090b8:	f3bf 8f6f 	isb	sy
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	60fb      	str	r3, [r7, #12]
}
 80090c2:	bf00      	nop
 80090c4:	bf00      	nop
 80090c6:	e7fd      	b.n	80090c4 <prvTaskExitError+0x28>
	__asm volatile
 80090c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090cc:	f383 8811 	msr	BASEPRI, r3
 80090d0:	f3bf 8f6f 	isb	sy
 80090d4:	f3bf 8f4f 	dsb	sy
 80090d8:	60bb      	str	r3, [r7, #8]
}
 80090da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80090dc:	bf00      	nop
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d0fc      	beq.n	80090de <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80090e4:	bf00      	nop
 80090e6:	bf00      	nop
 80090e8:	3714      	adds	r7, #20
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	20000010 	.word	0x20000010
	...

08009100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009100:	4b07      	ldr	r3, [pc, #28]	@ (8009120 <pxCurrentTCBConst2>)
 8009102:	6819      	ldr	r1, [r3, #0]
 8009104:	6808      	ldr	r0, [r1, #0]
 8009106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800910a:	f380 8809 	msr	PSP, r0
 800910e:	f3bf 8f6f 	isb	sy
 8009112:	f04f 0000 	mov.w	r0, #0
 8009116:	f380 8811 	msr	BASEPRI, r0
 800911a:	4770      	bx	lr
 800911c:	f3af 8000 	nop.w

08009120 <pxCurrentTCBConst2>:
 8009120:	20004f9c 	.word	0x20004f9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009124:	bf00      	nop
 8009126:	bf00      	nop

08009128 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009128:	4808      	ldr	r0, [pc, #32]	@ (800914c <prvPortStartFirstTask+0x24>)
 800912a:	6800      	ldr	r0, [r0, #0]
 800912c:	6800      	ldr	r0, [r0, #0]
 800912e:	f380 8808 	msr	MSP, r0
 8009132:	f04f 0000 	mov.w	r0, #0
 8009136:	f380 8814 	msr	CONTROL, r0
 800913a:	b662      	cpsie	i
 800913c:	b661      	cpsie	f
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	f3bf 8f6f 	isb	sy
 8009146:	df00      	svc	0
 8009148:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800914a:	bf00      	nop
 800914c:	e000ed08 	.word	0xe000ed08

08009150 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b086      	sub	sp, #24
 8009154:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009156:	4b47      	ldr	r3, [pc, #284]	@ (8009274 <xPortStartScheduler+0x124>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a47      	ldr	r2, [pc, #284]	@ (8009278 <xPortStartScheduler+0x128>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d10b      	bne.n	8009178 <xPortStartScheduler+0x28>
	__asm volatile
 8009160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009164:	f383 8811 	msr	BASEPRI, r3
 8009168:	f3bf 8f6f 	isb	sy
 800916c:	f3bf 8f4f 	dsb	sy
 8009170:	613b      	str	r3, [r7, #16]
}
 8009172:	bf00      	nop
 8009174:	bf00      	nop
 8009176:	e7fd      	b.n	8009174 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009178:	4b3e      	ldr	r3, [pc, #248]	@ (8009274 <xPortStartScheduler+0x124>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a3f      	ldr	r2, [pc, #252]	@ (800927c <xPortStartScheduler+0x12c>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d10b      	bne.n	800919a <xPortStartScheduler+0x4a>
	__asm volatile
 8009182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009186:	f383 8811 	msr	BASEPRI, r3
 800918a:	f3bf 8f6f 	isb	sy
 800918e:	f3bf 8f4f 	dsb	sy
 8009192:	60fb      	str	r3, [r7, #12]
}
 8009194:	bf00      	nop
 8009196:	bf00      	nop
 8009198:	e7fd      	b.n	8009196 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800919a:	4b39      	ldr	r3, [pc, #228]	@ (8009280 <xPortStartScheduler+0x130>)
 800919c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	22ff      	movs	r2, #255	@ 0xff
 80091aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80091b4:	78fb      	ldrb	r3, [r7, #3]
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80091bc:	b2da      	uxtb	r2, r3
 80091be:	4b31      	ldr	r3, [pc, #196]	@ (8009284 <xPortStartScheduler+0x134>)
 80091c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80091c2:	4b31      	ldr	r3, [pc, #196]	@ (8009288 <xPortStartScheduler+0x138>)
 80091c4:	2207      	movs	r2, #7
 80091c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091c8:	e009      	b.n	80091de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80091ca:	4b2f      	ldr	r3, [pc, #188]	@ (8009288 <xPortStartScheduler+0x138>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	3b01      	subs	r3, #1
 80091d0:	4a2d      	ldr	r2, [pc, #180]	@ (8009288 <xPortStartScheduler+0x138>)
 80091d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80091d4:	78fb      	ldrb	r3, [r7, #3]
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	005b      	lsls	r3, r3, #1
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091de:	78fb      	ldrb	r3, [r7, #3]
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091e6:	2b80      	cmp	r3, #128	@ 0x80
 80091e8:	d0ef      	beq.n	80091ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80091ea:	4b27      	ldr	r3, [pc, #156]	@ (8009288 <xPortStartScheduler+0x138>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f1c3 0307 	rsb	r3, r3, #7
 80091f2:	2b04      	cmp	r3, #4
 80091f4:	d00b      	beq.n	800920e <xPortStartScheduler+0xbe>
	__asm volatile
 80091f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091fa:	f383 8811 	msr	BASEPRI, r3
 80091fe:	f3bf 8f6f 	isb	sy
 8009202:	f3bf 8f4f 	dsb	sy
 8009206:	60bb      	str	r3, [r7, #8]
}
 8009208:	bf00      	nop
 800920a:	bf00      	nop
 800920c:	e7fd      	b.n	800920a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800920e:	4b1e      	ldr	r3, [pc, #120]	@ (8009288 <xPortStartScheduler+0x138>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	021b      	lsls	r3, r3, #8
 8009214:	4a1c      	ldr	r2, [pc, #112]	@ (8009288 <xPortStartScheduler+0x138>)
 8009216:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009218:	4b1b      	ldr	r3, [pc, #108]	@ (8009288 <xPortStartScheduler+0x138>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009220:	4a19      	ldr	r2, [pc, #100]	@ (8009288 <xPortStartScheduler+0x138>)
 8009222:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	b2da      	uxtb	r2, r3
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800922c:	4b17      	ldr	r3, [pc, #92]	@ (800928c <xPortStartScheduler+0x13c>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a16      	ldr	r2, [pc, #88]	@ (800928c <xPortStartScheduler+0x13c>)
 8009232:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009236:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009238:	4b14      	ldr	r3, [pc, #80]	@ (800928c <xPortStartScheduler+0x13c>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a13      	ldr	r2, [pc, #76]	@ (800928c <xPortStartScheduler+0x13c>)
 800923e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009242:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009244:	f000 f8da 	bl	80093fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009248:	4b11      	ldr	r3, [pc, #68]	@ (8009290 <xPortStartScheduler+0x140>)
 800924a:	2200      	movs	r2, #0
 800924c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800924e:	f000 f8f9 	bl	8009444 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009252:	4b10      	ldr	r3, [pc, #64]	@ (8009294 <xPortStartScheduler+0x144>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a0f      	ldr	r2, [pc, #60]	@ (8009294 <xPortStartScheduler+0x144>)
 8009258:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800925c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800925e:	f7ff ff63 	bl	8009128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009262:	f7ff f805 	bl	8008270 <vTaskSwitchContext>
	prvTaskExitError();
 8009266:	f7ff ff19 	bl	800909c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3718      	adds	r7, #24
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	e000ed00 	.word	0xe000ed00
 8009278:	410fc271 	.word	0x410fc271
 800927c:	410fc270 	.word	0x410fc270
 8009280:	e000e400 	.word	0xe000e400
 8009284:	200055c8 	.word	0x200055c8
 8009288:	200055cc 	.word	0x200055cc
 800928c:	e000ed20 	.word	0xe000ed20
 8009290:	20000010 	.word	0x20000010
 8009294:	e000ef34 	.word	0xe000ef34

08009298 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
	__asm volatile
 800929e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092a2:	f383 8811 	msr	BASEPRI, r3
 80092a6:	f3bf 8f6f 	isb	sy
 80092aa:	f3bf 8f4f 	dsb	sy
 80092ae:	607b      	str	r3, [r7, #4]
}
 80092b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80092b2:	4b10      	ldr	r3, [pc, #64]	@ (80092f4 <vPortEnterCritical+0x5c>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	3301      	adds	r3, #1
 80092b8:	4a0e      	ldr	r2, [pc, #56]	@ (80092f4 <vPortEnterCritical+0x5c>)
 80092ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80092bc:	4b0d      	ldr	r3, [pc, #52]	@ (80092f4 <vPortEnterCritical+0x5c>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d110      	bne.n	80092e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80092c4:	4b0c      	ldr	r3, [pc, #48]	@ (80092f8 <vPortEnterCritical+0x60>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d00b      	beq.n	80092e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80092ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092d2:	f383 8811 	msr	BASEPRI, r3
 80092d6:	f3bf 8f6f 	isb	sy
 80092da:	f3bf 8f4f 	dsb	sy
 80092de:	603b      	str	r3, [r7, #0]
}
 80092e0:	bf00      	nop
 80092e2:	bf00      	nop
 80092e4:	e7fd      	b.n	80092e2 <vPortEnterCritical+0x4a>
	}
}
 80092e6:	bf00      	nop
 80092e8:	370c      	adds	r7, #12
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop
 80092f4:	20000010 	.word	0x20000010
 80092f8:	e000ed04 	.word	0xe000ed04

080092fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009302:	4b12      	ldr	r3, [pc, #72]	@ (800934c <vPortExitCritical+0x50>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d10b      	bne.n	8009322 <vPortExitCritical+0x26>
	__asm volatile
 800930a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800930e:	f383 8811 	msr	BASEPRI, r3
 8009312:	f3bf 8f6f 	isb	sy
 8009316:	f3bf 8f4f 	dsb	sy
 800931a:	607b      	str	r3, [r7, #4]
}
 800931c:	bf00      	nop
 800931e:	bf00      	nop
 8009320:	e7fd      	b.n	800931e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009322:	4b0a      	ldr	r3, [pc, #40]	@ (800934c <vPortExitCritical+0x50>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	3b01      	subs	r3, #1
 8009328:	4a08      	ldr	r2, [pc, #32]	@ (800934c <vPortExitCritical+0x50>)
 800932a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800932c:	4b07      	ldr	r3, [pc, #28]	@ (800934c <vPortExitCritical+0x50>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d105      	bne.n	8009340 <vPortExitCritical+0x44>
 8009334:	2300      	movs	r3, #0
 8009336:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	f383 8811 	msr	BASEPRI, r3
}
 800933e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009340:	bf00      	nop
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr
 800934c:	20000010 	.word	0x20000010

08009350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009350:	f3ef 8009 	mrs	r0, PSP
 8009354:	f3bf 8f6f 	isb	sy
 8009358:	4b15      	ldr	r3, [pc, #84]	@ (80093b0 <pxCurrentTCBConst>)
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	f01e 0f10 	tst.w	lr, #16
 8009360:	bf08      	it	eq
 8009362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800936a:	6010      	str	r0, [r2, #0]
 800936c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009370:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009374:	f380 8811 	msr	BASEPRI, r0
 8009378:	f3bf 8f4f 	dsb	sy
 800937c:	f3bf 8f6f 	isb	sy
 8009380:	f7fe ff76 	bl	8008270 <vTaskSwitchContext>
 8009384:	f04f 0000 	mov.w	r0, #0
 8009388:	f380 8811 	msr	BASEPRI, r0
 800938c:	bc09      	pop	{r0, r3}
 800938e:	6819      	ldr	r1, [r3, #0]
 8009390:	6808      	ldr	r0, [r1, #0]
 8009392:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009396:	f01e 0f10 	tst.w	lr, #16
 800939a:	bf08      	it	eq
 800939c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80093a0:	f380 8809 	msr	PSP, r0
 80093a4:	f3bf 8f6f 	isb	sy
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	f3af 8000 	nop.w

080093b0 <pxCurrentTCBConst>:
 80093b0:	20004f9c 	.word	0x20004f9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80093b4:	bf00      	nop
 80093b6:	bf00      	nop

080093b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
	__asm volatile
 80093be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093c2:	f383 8811 	msr	BASEPRI, r3
 80093c6:	f3bf 8f6f 	isb	sy
 80093ca:	f3bf 8f4f 	dsb	sy
 80093ce:	607b      	str	r3, [r7, #4]
}
 80093d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80093d2:	f7fe fe93 	bl	80080fc <xTaskIncrementTick>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d003      	beq.n	80093e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80093dc:	4b06      	ldr	r3, [pc, #24]	@ (80093f8 <xPortSysTickHandler+0x40>)
 80093de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093e2:	601a      	str	r2, [r3, #0]
 80093e4:	2300      	movs	r3, #0
 80093e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	f383 8811 	msr	BASEPRI, r3
}
 80093ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80093f0:	bf00      	nop
 80093f2:	3708      	adds	r7, #8
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	e000ed04 	.word	0xe000ed04

080093fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80093fc:	b480      	push	{r7}
 80093fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009400:	4b0b      	ldr	r3, [pc, #44]	@ (8009430 <vPortSetupTimerInterrupt+0x34>)
 8009402:	2200      	movs	r2, #0
 8009404:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009406:	4b0b      	ldr	r3, [pc, #44]	@ (8009434 <vPortSetupTimerInterrupt+0x38>)
 8009408:	2200      	movs	r2, #0
 800940a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800940c:	4b0a      	ldr	r3, [pc, #40]	@ (8009438 <vPortSetupTimerInterrupt+0x3c>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a0a      	ldr	r2, [pc, #40]	@ (800943c <vPortSetupTimerInterrupt+0x40>)
 8009412:	fba2 2303 	umull	r2, r3, r2, r3
 8009416:	099b      	lsrs	r3, r3, #6
 8009418:	4a09      	ldr	r2, [pc, #36]	@ (8009440 <vPortSetupTimerInterrupt+0x44>)
 800941a:	3b01      	subs	r3, #1
 800941c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800941e:	4b04      	ldr	r3, [pc, #16]	@ (8009430 <vPortSetupTimerInterrupt+0x34>)
 8009420:	2207      	movs	r2, #7
 8009422:	601a      	str	r2, [r3, #0]
}
 8009424:	bf00      	nop
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr
 800942e:	bf00      	nop
 8009430:	e000e010 	.word	0xe000e010
 8009434:	e000e018 	.word	0xe000e018
 8009438:	20000004 	.word	0x20000004
 800943c:	10624dd3 	.word	0x10624dd3
 8009440:	e000e014 	.word	0xe000e014

08009444 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009444:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009454 <vPortEnableVFP+0x10>
 8009448:	6801      	ldr	r1, [r0, #0]
 800944a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800944e:	6001      	str	r1, [r0, #0]
 8009450:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009452:	bf00      	nop
 8009454:	e000ed88 	.word	0xe000ed88

08009458 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800945e:	f3ef 8305 	mrs	r3, IPSR
 8009462:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2b0f      	cmp	r3, #15
 8009468:	d915      	bls.n	8009496 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800946a:	4a18      	ldr	r2, [pc, #96]	@ (80094cc <vPortValidateInterruptPriority+0x74>)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	4413      	add	r3, r2
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009474:	4b16      	ldr	r3, [pc, #88]	@ (80094d0 <vPortValidateInterruptPriority+0x78>)
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	7afa      	ldrb	r2, [r7, #11]
 800947a:	429a      	cmp	r2, r3
 800947c:	d20b      	bcs.n	8009496 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800947e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009482:	f383 8811 	msr	BASEPRI, r3
 8009486:	f3bf 8f6f 	isb	sy
 800948a:	f3bf 8f4f 	dsb	sy
 800948e:	607b      	str	r3, [r7, #4]
}
 8009490:	bf00      	nop
 8009492:	bf00      	nop
 8009494:	e7fd      	b.n	8009492 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009496:	4b0f      	ldr	r3, [pc, #60]	@ (80094d4 <vPortValidateInterruptPriority+0x7c>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800949e:	4b0e      	ldr	r3, [pc, #56]	@ (80094d8 <vPortValidateInterruptPriority+0x80>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d90b      	bls.n	80094be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80094a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094aa:	f383 8811 	msr	BASEPRI, r3
 80094ae:	f3bf 8f6f 	isb	sy
 80094b2:	f3bf 8f4f 	dsb	sy
 80094b6:	603b      	str	r3, [r7, #0]
}
 80094b8:	bf00      	nop
 80094ba:	bf00      	nop
 80094bc:	e7fd      	b.n	80094ba <vPortValidateInterruptPriority+0x62>
	}
 80094be:	bf00      	nop
 80094c0:	3714      	adds	r7, #20
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr
 80094ca:	bf00      	nop
 80094cc:	e000e3f0 	.word	0xe000e3f0
 80094d0:	200055c8 	.word	0x200055c8
 80094d4:	e000ed0c 	.word	0xe000ed0c
 80094d8:	200055cc 	.word	0x200055cc

080094dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b08a      	sub	sp, #40	@ 0x28
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80094e4:	2300      	movs	r3, #0
 80094e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80094e8:	f7fe fd4c 	bl	8007f84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80094ec:	4b5c      	ldr	r3, [pc, #368]	@ (8009660 <pvPortMalloc+0x184>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d101      	bne.n	80094f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80094f4:	f000 f924 	bl	8009740 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80094f8:	4b5a      	ldr	r3, [pc, #360]	@ (8009664 <pvPortMalloc+0x188>)
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4013      	ands	r3, r2
 8009500:	2b00      	cmp	r3, #0
 8009502:	f040 8095 	bne.w	8009630 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d01e      	beq.n	800954a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800950c:	2208      	movs	r2, #8
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4413      	add	r3, r2
 8009512:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f003 0307 	and.w	r3, r3, #7
 800951a:	2b00      	cmp	r3, #0
 800951c:	d015      	beq.n	800954a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f023 0307 	bic.w	r3, r3, #7
 8009524:	3308      	adds	r3, #8
 8009526:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f003 0307 	and.w	r3, r3, #7
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00b      	beq.n	800954a <pvPortMalloc+0x6e>
	__asm volatile
 8009532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009536:	f383 8811 	msr	BASEPRI, r3
 800953a:	f3bf 8f6f 	isb	sy
 800953e:	f3bf 8f4f 	dsb	sy
 8009542:	617b      	str	r3, [r7, #20]
}
 8009544:	bf00      	nop
 8009546:	bf00      	nop
 8009548:	e7fd      	b.n	8009546 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d06f      	beq.n	8009630 <pvPortMalloc+0x154>
 8009550:	4b45      	ldr	r3, [pc, #276]	@ (8009668 <pvPortMalloc+0x18c>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	429a      	cmp	r2, r3
 8009558:	d86a      	bhi.n	8009630 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800955a:	4b44      	ldr	r3, [pc, #272]	@ (800966c <pvPortMalloc+0x190>)
 800955c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800955e:	4b43      	ldr	r3, [pc, #268]	@ (800966c <pvPortMalloc+0x190>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009564:	e004      	b.n	8009570 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009568:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800956a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	429a      	cmp	r2, r3
 8009578:	d903      	bls.n	8009582 <pvPortMalloc+0xa6>
 800957a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d1f1      	bne.n	8009566 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009582:	4b37      	ldr	r3, [pc, #220]	@ (8009660 <pvPortMalloc+0x184>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009588:	429a      	cmp	r2, r3
 800958a:	d051      	beq.n	8009630 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800958c:	6a3b      	ldr	r3, [r7, #32]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2208      	movs	r2, #8
 8009592:	4413      	add	r3, r2
 8009594:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	6a3b      	ldr	r3, [r7, #32]
 800959c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800959e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a0:	685a      	ldr	r2, [r3, #4]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	1ad2      	subs	r2, r2, r3
 80095a6:	2308      	movs	r3, #8
 80095a8:	005b      	lsls	r3, r3, #1
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d920      	bls.n	80095f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80095ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4413      	add	r3, r2
 80095b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	f003 0307 	and.w	r3, r3, #7
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00b      	beq.n	80095d8 <pvPortMalloc+0xfc>
	__asm volatile
 80095c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095c4:	f383 8811 	msr	BASEPRI, r3
 80095c8:	f3bf 8f6f 	isb	sy
 80095cc:	f3bf 8f4f 	dsb	sy
 80095d0:	613b      	str	r3, [r7, #16]
}
 80095d2:	bf00      	nop
 80095d4:	bf00      	nop
 80095d6:	e7fd      	b.n	80095d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80095d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095da:	685a      	ldr	r2, [r3, #4]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	1ad2      	subs	r2, r2, r3
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80095e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80095ea:	69b8      	ldr	r0, [r7, #24]
 80095ec:	f000 f90a 	bl	8009804 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80095f0:	4b1d      	ldr	r3, [pc, #116]	@ (8009668 <pvPortMalloc+0x18c>)
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	1ad3      	subs	r3, r2, r3
 80095fa:	4a1b      	ldr	r2, [pc, #108]	@ (8009668 <pvPortMalloc+0x18c>)
 80095fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80095fe:	4b1a      	ldr	r3, [pc, #104]	@ (8009668 <pvPortMalloc+0x18c>)
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	4b1b      	ldr	r3, [pc, #108]	@ (8009670 <pvPortMalloc+0x194>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	429a      	cmp	r2, r3
 8009608:	d203      	bcs.n	8009612 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800960a:	4b17      	ldr	r3, [pc, #92]	@ (8009668 <pvPortMalloc+0x18c>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a18      	ldr	r2, [pc, #96]	@ (8009670 <pvPortMalloc+0x194>)
 8009610:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009614:	685a      	ldr	r2, [r3, #4]
 8009616:	4b13      	ldr	r3, [pc, #76]	@ (8009664 <pvPortMalloc+0x188>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	431a      	orrs	r2, r3
 800961c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800961e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009622:	2200      	movs	r2, #0
 8009624:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009626:	4b13      	ldr	r3, [pc, #76]	@ (8009674 <pvPortMalloc+0x198>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	3301      	adds	r3, #1
 800962c:	4a11      	ldr	r2, [pc, #68]	@ (8009674 <pvPortMalloc+0x198>)
 800962e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009630:	f7fe fcb6 	bl	8007fa0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009634:	69fb      	ldr	r3, [r7, #28]
 8009636:	f003 0307 	and.w	r3, r3, #7
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00b      	beq.n	8009656 <pvPortMalloc+0x17a>
	__asm volatile
 800963e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009642:	f383 8811 	msr	BASEPRI, r3
 8009646:	f3bf 8f6f 	isb	sy
 800964a:	f3bf 8f4f 	dsb	sy
 800964e:	60fb      	str	r3, [r7, #12]
}
 8009650:	bf00      	nop
 8009652:	bf00      	nop
 8009654:	e7fd      	b.n	8009652 <pvPortMalloc+0x176>
	return pvReturn;
 8009656:	69fb      	ldr	r3, [r7, #28]
}
 8009658:	4618      	mov	r0, r3
 800965a:	3728      	adds	r7, #40	@ 0x28
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	200061d8 	.word	0x200061d8
 8009664:	200061ec 	.word	0x200061ec
 8009668:	200061dc 	.word	0x200061dc
 800966c:	200061d0 	.word	0x200061d0
 8009670:	200061e0 	.word	0x200061e0
 8009674:	200061e4 	.word	0x200061e4

08009678 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b086      	sub	sp, #24
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d04f      	beq.n	800972a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800968a:	2308      	movs	r3, #8
 800968c:	425b      	negs	r3, r3
 800968e:	697a      	ldr	r2, [r7, #20]
 8009690:	4413      	add	r3, r2
 8009692:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	685a      	ldr	r2, [r3, #4]
 800969c:	4b25      	ldr	r3, [pc, #148]	@ (8009734 <vPortFree+0xbc>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4013      	ands	r3, r2
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d10b      	bne.n	80096be <vPortFree+0x46>
	__asm volatile
 80096a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096aa:	f383 8811 	msr	BASEPRI, r3
 80096ae:	f3bf 8f6f 	isb	sy
 80096b2:	f3bf 8f4f 	dsb	sy
 80096b6:	60fb      	str	r3, [r7, #12]
}
 80096b8:	bf00      	nop
 80096ba:	bf00      	nop
 80096bc:	e7fd      	b.n	80096ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d00b      	beq.n	80096de <vPortFree+0x66>
	__asm volatile
 80096c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ca:	f383 8811 	msr	BASEPRI, r3
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	f3bf 8f4f 	dsb	sy
 80096d6:	60bb      	str	r3, [r7, #8]
}
 80096d8:	bf00      	nop
 80096da:	bf00      	nop
 80096dc:	e7fd      	b.n	80096da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	685a      	ldr	r2, [r3, #4]
 80096e2:	4b14      	ldr	r3, [pc, #80]	@ (8009734 <vPortFree+0xbc>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4013      	ands	r3, r2
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d01e      	beq.n	800972a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d11a      	bne.n	800972a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	685a      	ldr	r2, [r3, #4]
 80096f8:	4b0e      	ldr	r3, [pc, #56]	@ (8009734 <vPortFree+0xbc>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	43db      	mvns	r3, r3
 80096fe:	401a      	ands	r2, r3
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009704:	f7fe fc3e 	bl	8007f84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	685a      	ldr	r2, [r3, #4]
 800970c:	4b0a      	ldr	r3, [pc, #40]	@ (8009738 <vPortFree+0xc0>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4413      	add	r3, r2
 8009712:	4a09      	ldr	r2, [pc, #36]	@ (8009738 <vPortFree+0xc0>)
 8009714:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009716:	6938      	ldr	r0, [r7, #16]
 8009718:	f000 f874 	bl	8009804 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800971c:	4b07      	ldr	r3, [pc, #28]	@ (800973c <vPortFree+0xc4>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	3301      	adds	r3, #1
 8009722:	4a06      	ldr	r2, [pc, #24]	@ (800973c <vPortFree+0xc4>)
 8009724:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009726:	f7fe fc3b 	bl	8007fa0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800972a:	bf00      	nop
 800972c:	3718      	adds	r7, #24
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	200061ec 	.word	0x200061ec
 8009738:	200061dc 	.word	0x200061dc
 800973c:	200061e8 	.word	0x200061e8

08009740 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009740:	b480      	push	{r7}
 8009742:	b085      	sub	sp, #20
 8009744:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009746:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800974a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800974c:	4b27      	ldr	r3, [pc, #156]	@ (80097ec <prvHeapInit+0xac>)
 800974e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f003 0307 	and.w	r3, r3, #7
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00c      	beq.n	8009774 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	3307      	adds	r3, #7
 800975e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f023 0307 	bic.w	r3, r3, #7
 8009766:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009768:	68ba      	ldr	r2, [r7, #8]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	1ad3      	subs	r3, r2, r3
 800976e:	4a1f      	ldr	r2, [pc, #124]	@ (80097ec <prvHeapInit+0xac>)
 8009770:	4413      	add	r3, r2
 8009772:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009778:	4a1d      	ldr	r2, [pc, #116]	@ (80097f0 <prvHeapInit+0xb0>)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800977e:	4b1c      	ldr	r3, [pc, #112]	@ (80097f0 <prvHeapInit+0xb0>)
 8009780:	2200      	movs	r2, #0
 8009782:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	68ba      	ldr	r2, [r7, #8]
 8009788:	4413      	add	r3, r2
 800978a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800978c:	2208      	movs	r2, #8
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	1a9b      	subs	r3, r3, r2
 8009792:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f023 0307 	bic.w	r3, r3, #7
 800979a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	4a15      	ldr	r2, [pc, #84]	@ (80097f4 <prvHeapInit+0xb4>)
 80097a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80097a2:	4b14      	ldr	r3, [pc, #80]	@ (80097f4 <prvHeapInit+0xb4>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2200      	movs	r2, #0
 80097a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80097aa:	4b12      	ldr	r3, [pc, #72]	@ (80097f4 <prvHeapInit+0xb4>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2200      	movs	r2, #0
 80097b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	68fa      	ldr	r2, [r7, #12]
 80097ba:	1ad2      	subs	r2, r2, r3
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80097c0:	4b0c      	ldr	r3, [pc, #48]	@ (80097f4 <prvHeapInit+0xb4>)
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	4a0a      	ldr	r2, [pc, #40]	@ (80097f8 <prvHeapInit+0xb8>)
 80097ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	4a09      	ldr	r2, [pc, #36]	@ (80097fc <prvHeapInit+0xbc>)
 80097d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80097d8:	4b09      	ldr	r3, [pc, #36]	@ (8009800 <prvHeapInit+0xc0>)
 80097da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80097de:	601a      	str	r2, [r3, #0]
}
 80097e0:	bf00      	nop
 80097e2:	3714      	adds	r7, #20
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr
 80097ec:	200055d0 	.word	0x200055d0
 80097f0:	200061d0 	.word	0x200061d0
 80097f4:	200061d8 	.word	0x200061d8
 80097f8:	200061e0 	.word	0x200061e0
 80097fc:	200061dc 	.word	0x200061dc
 8009800:	200061ec 	.word	0x200061ec

08009804 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009804:	b480      	push	{r7}
 8009806:	b085      	sub	sp, #20
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800980c:	4b28      	ldr	r3, [pc, #160]	@ (80098b0 <prvInsertBlockIntoFreeList+0xac>)
 800980e:	60fb      	str	r3, [r7, #12]
 8009810:	e002      	b.n	8009818 <prvInsertBlockIntoFreeList+0x14>
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	60fb      	str	r3, [r7, #12]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	429a      	cmp	r2, r3
 8009820:	d8f7      	bhi.n	8009812 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	68ba      	ldr	r2, [r7, #8]
 800982c:	4413      	add	r3, r2
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	429a      	cmp	r2, r3
 8009832:	d108      	bne.n	8009846 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	685a      	ldr	r2, [r3, #4]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	441a      	add	r2, r3
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	68ba      	ldr	r2, [r7, #8]
 8009850:	441a      	add	r2, r3
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	429a      	cmp	r2, r3
 8009858:	d118      	bne.n	800988c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	4b15      	ldr	r3, [pc, #84]	@ (80098b4 <prvInsertBlockIntoFreeList+0xb0>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	429a      	cmp	r2, r3
 8009864:	d00d      	beq.n	8009882 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	685a      	ldr	r2, [r3, #4]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	441a      	add	r2, r3
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	601a      	str	r2, [r3, #0]
 8009880:	e008      	b.n	8009894 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009882:	4b0c      	ldr	r3, [pc, #48]	@ (80098b4 <prvInsertBlockIntoFreeList+0xb0>)
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	601a      	str	r2, [r3, #0]
 800988a:	e003      	b.n	8009894 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009894:	68fa      	ldr	r2, [r7, #12]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	429a      	cmp	r2, r3
 800989a:	d002      	beq.n	80098a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098a2:	bf00      	nop
 80098a4:	3714      	adds	r7, #20
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr
 80098ae:	bf00      	nop
 80098b0:	200061d0 	.word	0x200061d0
 80098b4:	200061d8 	.word	0x200061d8

080098b8 <rcl_get_zero_initialized_init_options>:
 80098b8:	2000      	movs	r0, #0
 80098ba:	4770      	bx	lr

080098bc <rcl_init_options_init>:
 80098bc:	b084      	sub	sp, #16
 80098be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098c0:	b097      	sub	sp, #92	@ 0x5c
 80098c2:	ae1d      	add	r6, sp, #116	@ 0x74
 80098c4:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 80098c8:	2800      	cmp	r0, #0
 80098ca:	d058      	beq.n	800997e <rcl_init_options_init+0xc2>
 80098cc:	6803      	ldr	r3, [r0, #0]
 80098ce:	4605      	mov	r5, r0
 80098d0:	b133      	cbz	r3, 80098e0 <rcl_init_options_init+0x24>
 80098d2:	2464      	movs	r4, #100	@ 0x64
 80098d4:	4620      	mov	r0, r4
 80098d6:	b017      	add	sp, #92	@ 0x5c
 80098d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80098dc:	b004      	add	sp, #16
 80098de:	4770      	bx	lr
 80098e0:	4630      	mov	r0, r6
 80098e2:	f000 ff8f 	bl	800a804 <rcutils_allocator_is_valid>
 80098e6:	2800      	cmp	r0, #0
 80098e8:	d049      	beq.n	800997e <rcl_init_options_init+0xc2>
 80098ea:	46b4      	mov	ip, r6
 80098ec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80098f0:	ac11      	add	r4, sp, #68	@ 0x44
 80098f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80098f4:	f8dc 3000 	ldr.w	r3, [ip]
 80098f8:	6023      	str	r3, [r4, #0]
 80098fa:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80098fc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80098fe:	2050      	movs	r0, #80	@ 0x50
 8009900:	4798      	blx	r3
 8009902:	4604      	mov	r4, r0
 8009904:	6028      	str	r0, [r5, #0]
 8009906:	2800      	cmp	r0, #0
 8009908:	d03b      	beq.n	8009982 <rcl_init_options_init+0xc6>
 800990a:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800990e:	4686      	mov	lr, r0
 8009910:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009914:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009918:	f8dc 3000 	ldr.w	r3, [ip]
 800991c:	f8ce 3000 	str.w	r3, [lr]
 8009920:	a802      	add	r0, sp, #8
 8009922:	f001 f801 	bl	800a928 <rmw_get_zero_initialized_init_options>
 8009926:	f10d 0e08 	add.w	lr, sp, #8
 800992a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800992e:	f104 0c18 	add.w	ip, r4, #24
 8009932:	682f      	ldr	r7, [r5, #0]
 8009934:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009938:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800993c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009940:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009944:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009948:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800994c:	ac20      	add	r4, sp, #128	@ 0x80
 800994e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8009952:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009956:	e88d 0003 	stmia.w	sp, {r0, r1}
 800995a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800995e:	f107 0018 	add.w	r0, r7, #24
 8009962:	f001 f80b 	bl	800a97c <rmw_init_options_init>
 8009966:	4604      	mov	r4, r0
 8009968:	2800      	cmp	r0, #0
 800996a:	d0b3      	beq.n	80098d4 <rcl_init_options_init+0x18>
 800996c:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800996e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009970:	6828      	ldr	r0, [r5, #0]
 8009972:	4798      	blx	r3
 8009974:	4620      	mov	r0, r4
 8009976:	f005 f819 	bl	800e9ac <rcl_convert_rmw_ret_to_rcl_ret>
 800997a:	4604      	mov	r4, r0
 800997c:	e7aa      	b.n	80098d4 <rcl_init_options_init+0x18>
 800997e:	240b      	movs	r4, #11
 8009980:	e7a8      	b.n	80098d4 <rcl_init_options_init+0x18>
 8009982:	240a      	movs	r4, #10
 8009984:	e7a6      	b.n	80098d4 <rcl_init_options_init+0x18>
 8009986:	bf00      	nop

08009988 <rcl_init_options_fini>:
 8009988:	b530      	push	{r4, r5, lr}
 800998a:	b087      	sub	sp, #28
 800998c:	b1f0      	cbz	r0, 80099cc <rcl_init_options_fini+0x44>
 800998e:	6803      	ldr	r3, [r0, #0]
 8009990:	4604      	mov	r4, r0
 8009992:	b1db      	cbz	r3, 80099cc <rcl_init_options_fini+0x44>
 8009994:	469c      	mov	ip, r3
 8009996:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800999a:	f10d 0e04 	add.w	lr, sp, #4
 800999e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80099a2:	f8dc 3000 	ldr.w	r3, [ip]
 80099a6:	f8ce 3000 	str.w	r3, [lr]
 80099aa:	a801      	add	r0, sp, #4
 80099ac:	f000 ff2a 	bl	800a804 <rcutils_allocator_is_valid>
 80099b0:	b160      	cbz	r0, 80099cc <rcl_init_options_fini+0x44>
 80099b2:	6820      	ldr	r0, [r4, #0]
 80099b4:	3018      	adds	r0, #24
 80099b6:	f001 f891 	bl	800aadc <rmw_init_options_fini>
 80099ba:	4605      	mov	r5, r0
 80099bc:	b950      	cbnz	r0, 80099d4 <rcl_init_options_fini+0x4c>
 80099be:	6820      	ldr	r0, [r4, #0]
 80099c0:	9b02      	ldr	r3, [sp, #8]
 80099c2:	9905      	ldr	r1, [sp, #20]
 80099c4:	4798      	blx	r3
 80099c6:	4628      	mov	r0, r5
 80099c8:	b007      	add	sp, #28
 80099ca:	bd30      	pop	{r4, r5, pc}
 80099cc:	250b      	movs	r5, #11
 80099ce:	4628      	mov	r0, r5
 80099d0:	b007      	add	sp, #28
 80099d2:	bd30      	pop	{r4, r5, pc}
 80099d4:	f004 ffea 	bl	800e9ac <rcl_convert_rmw_ret_to_rcl_ret>
 80099d8:	4605      	mov	r5, r0
 80099da:	e7f8      	b.n	80099ce <rcl_init_options_fini+0x46>

080099dc <rcl_init_options_copy>:
 80099dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e0:	b094      	sub	sp, #80	@ 0x50
 80099e2:	2800      	cmp	r0, #0
 80099e4:	d058      	beq.n	8009a98 <rcl_init_options_copy+0xbc>
 80099e6:	4604      	mov	r4, r0
 80099e8:	6800      	ldr	r0, [r0, #0]
 80099ea:	2800      	cmp	r0, #0
 80099ec:	d054      	beq.n	8009a98 <rcl_init_options_copy+0xbc>
 80099ee:	460e      	mov	r6, r1
 80099f0:	f000 ff08 	bl	800a804 <rcutils_allocator_is_valid>
 80099f4:	2800      	cmp	r0, #0
 80099f6:	d04f      	beq.n	8009a98 <rcl_init_options_copy+0xbc>
 80099f8:	2e00      	cmp	r6, #0
 80099fa:	d04d      	beq.n	8009a98 <rcl_init_options_copy+0xbc>
 80099fc:	6833      	ldr	r3, [r6, #0]
 80099fe:	b123      	cbz	r3, 8009a0a <rcl_init_options_copy+0x2e>
 8009a00:	2464      	movs	r4, #100	@ 0x64
 8009a02:	4620      	mov	r0, r4
 8009a04:	b014      	add	sp, #80	@ 0x50
 8009a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a0a:	6827      	ldr	r7, [r4, #0]
 8009a0c:	46bc      	mov	ip, r7
 8009a0e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009a12:	ad0f      	add	r5, sp, #60	@ 0x3c
 8009a14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009a16:	f8dc 3000 	ldr.w	r3, [ip]
 8009a1a:	f8d7 8000 	ldr.w	r8, [r7]
 8009a1e:	602b      	str	r3, [r5, #0]
 8009a20:	4619      	mov	r1, r3
 8009a22:	2050      	movs	r0, #80	@ 0x50
 8009a24:	47c0      	blx	r8
 8009a26:	4605      	mov	r5, r0
 8009a28:	6030      	str	r0, [r6, #0]
 8009a2a:	b3d0      	cbz	r0, 8009aa2 <rcl_init_options_copy+0xc6>
 8009a2c:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8009a30:	4686      	mov	lr, r0
 8009a32:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009a36:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009a3a:	f8dc 3000 	ldr.w	r3, [ip]
 8009a3e:	f8ce 3000 	str.w	r3, [lr]
 8009a42:	4668      	mov	r0, sp
 8009a44:	f000 ff70 	bl	800a928 <rmw_get_zero_initialized_init_options>
 8009a48:	46ee      	mov	lr, sp
 8009a4a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009a4e:	f105 0c18 	add.w	ip, r5, #24
 8009a52:	6824      	ldr	r4, [r4, #0]
 8009a54:	6835      	ldr	r5, [r6, #0]
 8009a56:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009a5a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009a5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009a62:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009a66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009a6a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8009a6e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8009a72:	f104 0018 	add.w	r0, r4, #24
 8009a76:	f105 0118 	add.w	r1, r5, #24
 8009a7a:	f000 ffe7 	bl	800aa4c <rmw_init_options_copy>
 8009a7e:	4604      	mov	r4, r0
 8009a80:	2800      	cmp	r0, #0
 8009a82:	d0be      	beq.n	8009a02 <rcl_init_options_copy+0x26>
 8009a84:	f000 fecc 	bl	800a820 <rcutils_get_error_string>
 8009a88:	f000 fee2 	bl	800a850 <rcutils_reset_error>
 8009a8c:	4630      	mov	r0, r6
 8009a8e:	f7ff ff7b 	bl	8009988 <rcl_init_options_fini>
 8009a92:	b140      	cbz	r0, 8009aa6 <rcl_init_options_copy+0xca>
 8009a94:	4604      	mov	r4, r0
 8009a96:	e7b4      	b.n	8009a02 <rcl_init_options_copy+0x26>
 8009a98:	240b      	movs	r4, #11
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	b014      	add	sp, #80	@ 0x50
 8009a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009aa2:	240a      	movs	r4, #10
 8009aa4:	e7ad      	b.n	8009a02 <rcl_init_options_copy+0x26>
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	b014      	add	sp, #80	@ 0x50
 8009aaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009aae:	f004 bf7d 	b.w	800e9ac <rcl_convert_rmw_ret_to_rcl_ret>
 8009ab2:	bf00      	nop

08009ab4 <rcl_init_options_set_domain_id>:
 8009ab4:	b120      	cbz	r0, 8009ac0 <rcl_init_options_set_domain_id+0xc>
 8009ab6:	6803      	ldr	r3, [r0, #0]
 8009ab8:	b113      	cbz	r3, 8009ac0 <rcl_init_options_set_domain_id+0xc>
 8009aba:	6259      	str	r1, [r3, #36]	@ 0x24
 8009abc:	2000      	movs	r0, #0
 8009abe:	4770      	bx	lr
 8009ac0:	200b      	movs	r0, #11
 8009ac2:	4770      	bx	lr

08009ac4 <_rclc_check_for_new_data>:
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	d046      	beq.n	8009b56 <_rclc_check_for_new_data+0x92>
 8009ac8:	b510      	push	{r4, lr}
 8009aca:	7802      	ldrb	r2, [r0, #0]
 8009acc:	b084      	sub	sp, #16
 8009ace:	4603      	mov	r3, r0
 8009ad0:	2a0a      	cmp	r2, #10
 8009ad2:	d842      	bhi.n	8009b5a <_rclc_check_for_new_data+0x96>
 8009ad4:	e8df f002 	tbb	[pc, r2]
 8009ad8:	14181212 	.word	0x14181212
 8009adc:	06060614 	.word	0x06060614
 8009ae0:	2e1a      	.short	0x2e1a
 8009ae2:	16          	.byte	0x16
 8009ae3:	00          	.byte	0x00
 8009ae4:	6a0a      	ldr	r2, [r1, #32]
 8009ae6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009ae8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009aec:	2000      	movs	r0, #0
 8009aee:	1a12      	subs	r2, r2, r0
 8009af0:	bf18      	it	ne
 8009af2:	2201      	movne	r2, #1
 8009af4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8009af8:	b004      	add	sp, #16
 8009afa:	bd10      	pop	{r4, pc}
 8009afc:	680a      	ldr	r2, [r1, #0]
 8009afe:	e7f2      	b.n	8009ae6 <_rclc_check_for_new_data+0x22>
 8009b00:	698a      	ldr	r2, [r1, #24]
 8009b02:	e7f0      	b.n	8009ae6 <_rclc_check_for_new_data+0x22>
 8009b04:	688a      	ldr	r2, [r1, #8]
 8009b06:	e7ee      	b.n	8009ae6 <_rclc_check_for_new_data+0x22>
 8009b08:	690a      	ldr	r2, [r1, #16]
 8009b0a:	e7ec      	b.n	8009ae6 <_rclc_check_for_new_data+0x22>
 8009b0c:	685c      	ldr	r4, [r3, #4]
 8009b0e:	4608      	mov	r0, r1
 8009b10:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 8009b14:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 8009b18:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 8009b1c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8009b20:	9300      	str	r3, [sp, #0]
 8009b22:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 8009b26:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 8009b2a:	f104 0110 	add.w	r1, r4, #16
 8009b2e:	f006 fdab 	bl	8010688 <rcl_action_client_wait_set_get_entities_ready>
 8009b32:	e7e1      	b.n	8009af8 <_rclc_check_for_new_data+0x34>
 8009b34:	685c      	ldr	r4, [r3, #4]
 8009b36:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 8009b3a:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 8009b3e:	e9cd 3200 	strd	r3, r2, [sp]
 8009b42:	4608      	mov	r0, r1
 8009b44:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8009b48:	f104 0220 	add.w	r2, r4, #32
 8009b4c:	f104 0110 	add.w	r1, r4, #16
 8009b50:	f006 ffb2 	bl	8010ab8 <rcl_action_server_wait_set_get_entities_ready>
 8009b54:	e7d0      	b.n	8009af8 <_rclc_check_for_new_data+0x34>
 8009b56:	200b      	movs	r0, #11
 8009b58:	4770      	bx	lr
 8009b5a:	2001      	movs	r0, #1
 8009b5c:	e7cc      	b.n	8009af8 <_rclc_check_for_new_data+0x34>
 8009b5e:	bf00      	nop

08009b60 <_rclc_take_new_data>:
 8009b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b62:	b09b      	sub	sp, #108	@ 0x6c
 8009b64:	2800      	cmp	r0, #0
 8009b66:	f000 8088 	beq.w	8009c7a <_rclc_take_new_data+0x11a>
 8009b6a:	7803      	ldrb	r3, [r0, #0]
 8009b6c:	4604      	mov	r4, r0
 8009b6e:	2b0a      	cmp	r3, #10
 8009b70:	f200 8167 	bhi.w	8009e42 <_rclc_take_new_data+0x2e2>
 8009b74:	e8df f003 	tbb	[pc, r3]
 8009b78:	44152d2d 	.word	0x44152d2d
 8009b7c:	19191944 	.word	0x19191944
 8009b80:	065a      	.short	0x065a
 8009b82:	15          	.byte	0x15
 8009b83:	00          	.byte	0x00
 8009b84:	6840      	ldr	r0, [r0, #4]
 8009b86:	f890 3020 	ldrb.w	r3, [r0, #32]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	f040 80b2 	bne.w	8009cf4 <_rclc_take_new_data+0x194>
 8009b90:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f040 80e4 	bne.w	8009d62 <_rclc_take_new_data+0x202>
 8009b9a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d16f      	bne.n	8009c82 <_rclc_take_new_data+0x122>
 8009ba2:	2500      	movs	r5, #0
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	b01b      	add	sp, #108	@ 0x6c
 8009ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009baa:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009bac:	6a0b      	ldr	r3, [r1, #32]
 8009bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d0f5      	beq.n	8009ba2 <_rclc_take_new_data+0x42>
 8009bb6:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8009bba:	f104 0110 	add.w	r1, r4, #16
 8009bbe:	f005 fb1d 	bl	800f1fc <rcl_take_request>
 8009bc2:	4605      	mov	r5, r0
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	d0ec      	beq.n	8009ba2 <_rclc_take_new_data+0x42>
 8009bc8:	f240 2359 	movw	r3, #601	@ 0x259
 8009bcc:	4298      	cmp	r0, r3
 8009bce:	d013      	beq.n	8009bf8 <_rclc_take_new_data+0x98>
 8009bd0:	e029      	b.n	8009c26 <_rclc_take_new_data+0xc6>
 8009bd2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009bd4:	680b      	ldr	r3, [r1, #0]
 8009bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d0e1      	beq.n	8009ba2 <_rclc_take_new_data+0x42>
 8009bde:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8009be2:	2300      	movs	r3, #0
 8009be4:	aa0a      	add	r2, sp, #40	@ 0x28
 8009be6:	f005 fb6b 	bl	800f2c0 <rcl_take>
 8009bea:	4605      	mov	r5, r0
 8009bec:	2800      	cmp	r0, #0
 8009bee:	d0d9      	beq.n	8009ba4 <_rclc_take_new_data+0x44>
 8009bf0:	f240 1391 	movw	r3, #401	@ 0x191
 8009bf4:	4298      	cmp	r0, r3
 8009bf6:	d116      	bne.n	8009c26 <_rclc_take_new_data+0xc6>
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 8009bfe:	e7d1      	b.n	8009ba4 <_rclc_take_new_data+0x44>
 8009c00:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009c02:	698b      	ldr	r3, [r1, #24]
 8009c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d0ca      	beq.n	8009ba2 <_rclc_take_new_data+0x42>
 8009c0c:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8009c10:	f104 0110 	add.w	r1, r4, #16
 8009c14:	f004 fe78 	bl	800e908 <rcl_take_response>
 8009c18:	4605      	mov	r5, r0
 8009c1a:	2800      	cmp	r0, #0
 8009c1c:	d0c1      	beq.n	8009ba2 <_rclc_take_new_data+0x42>
 8009c1e:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8009c22:	4298      	cmp	r0, r3
 8009c24:	d0be      	beq.n	8009ba4 <_rclc_take_new_data+0x44>
 8009c26:	f000 fe13 	bl	800a850 <rcutils_reset_error>
 8009c2a:	e7bb      	b.n	8009ba4 <_rclc_take_new_data+0x44>
 8009c2c:	6840      	ldr	r0, [r0, #4]
 8009c2e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d17d      	bne.n	8009d32 <_rclc_take_new_data+0x1d2>
 8009c36:	69c3      	ldr	r3, [r0, #28]
 8009c38:	b11b      	cbz	r3, 8009c42 <_rclc_take_new_data+0xe2>
 8009c3a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d144      	bne.n	8009ccc <_rclc_take_new_data+0x16c>
 8009c42:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	f040 80ac 	bne.w	8009da4 <_rclc_take_new_data+0x244>
 8009c4c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d0a6      	beq.n	8009ba2 <_rclc_take_new_data+0x42>
 8009c54:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8009c56:	a90a      	add	r1, sp, #40	@ 0x28
 8009c58:	3010      	adds	r0, #16
 8009c5a:	f006 fbed 	bl	8010438 <rcl_action_take_result_response>
 8009c5e:	4605      	mov	r5, r0
 8009c60:	2800      	cmp	r0, #0
 8009c62:	d1e0      	bne.n	8009c26 <_rclc_take_new_data+0xc6>
 8009c64:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009c68:	6860      	ldr	r0, [r4, #4]
 8009c6a:	f007 f849 	bl	8010d00 <rclc_action_find_handle_by_result_request_sequence_number>
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	d098      	beq.n	8009ba4 <_rclc_take_new_data+0x44>
 8009c72:	2301      	movs	r3, #1
 8009c74:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 8009c78:	e794      	b.n	8009ba4 <_rclc_take_new_data+0x44>
 8009c7a:	250b      	movs	r5, #11
 8009c7c:	4628      	mov	r0, r5
 8009c7e:	b01b      	add	sp, #108	@ 0x6c
 8009c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c82:	ae04      	add	r6, sp, #16
 8009c84:	aa0a      	add	r2, sp, #40	@ 0x28
 8009c86:	3010      	adds	r0, #16
 8009c88:	4631      	mov	r1, r6
 8009c8a:	f006 fe49 	bl	8010920 <rcl_action_take_cancel_request>
 8009c8e:	4605      	mov	r5, r0
 8009c90:	2800      	cmp	r0, #0
 8009c92:	d1c8      	bne.n	8009c26 <_rclc_take_new_data+0xc6>
 8009c94:	6860      	ldr	r0, [r4, #4]
 8009c96:	a90a      	add	r1, sp, #40	@ 0x28
 8009c98:	f006 fff0 	bl	8010c7c <rclc_action_find_goal_handle_by_uuid>
 8009c9c:	4607      	mov	r7, r0
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	f000 80bb 	beq.w	8009e1a <_rclc_take_new_data+0x2ba>
 8009ca4:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8009ca8:	2101      	movs	r1, #1
 8009caa:	f006 ff71 	bl	8010b90 <rcl_action_transition_goal_state>
 8009cae:	2803      	cmp	r0, #3
 8009cb0:	4684      	mov	ip, r0
 8009cb2:	f040 80a7 	bne.w	8009e04 <_rclc_take_new_data+0x2a4>
 8009cb6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009cb8:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8009cbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009cbe:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009cc2:	e884 0003 	stmia.w	r4, {r0, r1}
 8009cc6:	f887 c008 	strb.w	ip, [r7, #8]
 8009cca:	e76b      	b.n	8009ba4 <_rclc_take_new_data+0x44>
 8009ccc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009cce:	3010      	adds	r0, #16
 8009cd0:	f006 fc32 	bl	8010538 <rcl_action_take_feedback>
 8009cd4:	4605      	mov	r5, r0
 8009cd6:	2800      	cmp	r0, #0
 8009cd8:	d1a5      	bne.n	8009c26 <_rclc_take_new_data+0xc6>
 8009cda:	6860      	ldr	r0, [r4, #4]
 8009cdc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009cde:	f006 ffcd 	bl	8010c7c <rclc_action_find_goal_handle_by_uuid>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2800      	cmp	r0, #0
 8009ce6:	f000 80a3 	beq.w	8009e30 <_rclc_take_new_data+0x2d0>
 8009cea:	2201      	movs	r2, #1
 8009cec:	6860      	ldr	r0, [r4, #4]
 8009cee:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8009cf2:	e7a6      	b.n	8009c42 <_rclc_take_new_data+0xe2>
 8009cf4:	f006 ff9c 	bl	8010c30 <rclc_action_take_goal_handle>
 8009cf8:	4606      	mov	r6, r0
 8009cfa:	6860      	ldr	r0, [r4, #4]
 8009cfc:	2e00      	cmp	r6, #0
 8009cfe:	f43f af47 	beq.w	8009b90 <_rclc_take_new_data+0x30>
 8009d02:	6070      	str	r0, [r6, #4]
 8009d04:	69f2      	ldr	r2, [r6, #28]
 8009d06:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 8009d0a:	3010      	adds	r0, #16
 8009d0c:	f006 fd50 	bl	80107b0 <rcl_action_take_goal_request>
 8009d10:	4605      	mov	r5, r0
 8009d12:	2800      	cmp	r0, #0
 8009d14:	f040 808e 	bne.w	8009e34 <_rclc_take_new_data+0x2d4>
 8009d18:	69f7      	ldr	r7, [r6, #28]
 8009d1a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009d1c:	7235      	strb	r5, [r6, #8]
 8009d1e:	f8c6 0009 	str.w	r0, [r6, #9]
 8009d22:	f8c6 100d 	str.w	r1, [r6, #13]
 8009d26:	6860      	ldr	r0, [r4, #4]
 8009d28:	f8c6 2011 	str.w	r2, [r6, #17]
 8009d2c:	f8c6 3015 	str.w	r3, [r6, #21]
 8009d30:	e72e      	b.n	8009b90 <_rclc_take_new_data+0x30>
 8009d32:	aa04      	add	r2, sp, #16
 8009d34:	a90a      	add	r1, sp, #40	@ 0x28
 8009d36:	3010      	adds	r0, #16
 8009d38:	f006 fb06 	bl	8010348 <rcl_action_take_goal_response>
 8009d3c:	4605      	mov	r5, r0
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	f47f af71 	bne.w	8009c26 <_rclc_take_new_data+0xc6>
 8009d44:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009d48:	6860      	ldr	r0, [r4, #4]
 8009d4a:	f006 ffc7 	bl	8010cdc <rclc_action_find_handle_by_goal_request_sequence_number>
 8009d4e:	b130      	cbz	r0, 8009d5e <_rclc_take_new_data+0x1fe>
 8009d50:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009d54:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8009d58:	2201      	movs	r2, #1
 8009d5a:	f880 2020 	strb.w	r2, [r0, #32]
 8009d5e:	6860      	ldr	r0, [r4, #4]
 8009d60:	e769      	b.n	8009c36 <_rclc_take_new_data+0xd6>
 8009d62:	aa04      	add	r2, sp, #16
 8009d64:	3010      	adds	r0, #16
 8009d66:	a90a      	add	r1, sp, #40	@ 0x28
 8009d68:	f006 fd9a 	bl	80108a0 <rcl_action_take_result_request>
 8009d6c:	4605      	mov	r5, r0
 8009d6e:	2800      	cmp	r0, #0
 8009d70:	f47f af59 	bne.w	8009c26 <_rclc_take_new_data+0xc6>
 8009d74:	6860      	ldr	r0, [r4, #4]
 8009d76:	a904      	add	r1, sp, #16
 8009d78:	f006 ff80 	bl	8010c7c <rclc_action_find_goal_handle_by_uuid>
 8009d7c:	4607      	mov	r7, r0
 8009d7e:	b160      	cbz	r0, 8009d9a <_rclc_take_new_data+0x23a>
 8009d80:	ad0a      	add	r5, sp, #40	@ 0x28
 8009d82:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 8009d86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009d88:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009d8a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009d8e:	f04f 0c02 	mov.w	ip, #2
 8009d92:	e886 0003 	stmia.w	r6, {r0, r1}
 8009d96:	f887 c008 	strb.w	ip, [r7, #8]
 8009d9a:	6860      	ldr	r0, [r4, #4]
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 8009da2:	e6fa      	b.n	8009b9a <_rclc_take_new_data+0x3a>
 8009da4:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8009da8:	a90a      	add	r1, sp, #40	@ 0x28
 8009daa:	3010      	adds	r0, #16
 8009dac:	f006 fb84 	bl	80104b8 <rcl_action_take_cancel_response>
 8009db0:	4605      	mov	r5, r0
 8009db2:	2800      	cmp	r0, #0
 8009db4:	f47f af37 	bne.w	8009c26 <_rclc_take_new_data+0xc6>
 8009db8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009dbc:	6860      	ldr	r0, [r4, #4]
 8009dbe:	f006 ffb1 	bl	8010d24 <rclc_action_find_handle_by_cancel_request_sequence_number>
 8009dc2:	4606      	mov	r6, r0
 8009dc4:	6860      	ldr	r0, [r4, #4]
 8009dc6:	2e00      	cmp	r6, #0
 8009dc8:	f43f af40 	beq.w	8009c4c <_rclc_take_new_data+0xec>
 8009dcc:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009dce:	2701      	movs	r7, #1
 8009dd0:	84b7      	strh	r7, [r6, #36]	@ 0x24
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	f43f af3a 	beq.w	8009c4c <_rclc_take_new_data+0xec>
 8009dd8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009dda:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8009dde:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009de2:	f006 ff4b 	bl	8010c7c <rclc_action_find_goal_handle_by_uuid>
 8009de6:	b138      	cbz	r0, 8009df8 <_rclc_take_new_data+0x298>
 8009de8:	6860      	ldr	r0, [r4, #4]
 8009dea:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009dec:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 8009df0:	3501      	adds	r5, #1
 8009df2:	42ab      	cmp	r3, r5
 8009df4:	d8f0      	bhi.n	8009dd8 <_rclc_take_new_data+0x278>
 8009df6:	e729      	b.n	8009c4c <_rclc_take_new_data+0xec>
 8009df8:	6860      	ldr	r0, [r4, #4]
 8009dfa:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009dfc:	3501      	adds	r5, #1
 8009dfe:	42ab      	cmp	r3, r5
 8009e00:	d8ea      	bhi.n	8009dd8 <_rclc_take_new_data+0x278>
 8009e02:	e723      	b.n	8009c4c <_rclc_take_new_data+0xec>
 8009e04:	ab06      	add	r3, sp, #24
 8009e06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009e08:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009e0c:	2103      	movs	r1, #3
 8009e0e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009e12:	6860      	ldr	r0, [r4, #4]
 8009e14:	f006 fffc 	bl	8010e10 <rclc_action_server_goal_cancel_reject>
 8009e18:	e6c4      	b.n	8009ba4 <_rclc_take_new_data+0x44>
 8009e1a:	ab06      	add	r3, sp, #24
 8009e1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009e1e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009e22:	2102      	movs	r1, #2
 8009e24:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009e28:	6860      	ldr	r0, [r4, #4]
 8009e2a:	f006 fff1 	bl	8010e10 <rclc_action_server_goal_cancel_reject>
 8009e2e:	e6b9      	b.n	8009ba4 <_rclc_take_new_data+0x44>
 8009e30:	6860      	ldr	r0, [r4, #4]
 8009e32:	e706      	b.n	8009c42 <_rclc_take_new_data+0xe2>
 8009e34:	6860      	ldr	r0, [r4, #4]
 8009e36:	4631      	mov	r1, r6
 8009e38:	f006 ff0a 	bl	8010c50 <rclc_action_remove_used_goal_handle>
 8009e3c:	f000 fd08 	bl	800a850 <rcutils_reset_error>
 8009e40:	e6b0      	b.n	8009ba4 <_rclc_take_new_data+0x44>
 8009e42:	2501      	movs	r5, #1
 8009e44:	e6ae      	b.n	8009ba4 <_rclc_take_new_data+0x44>
 8009e46:	bf00      	nop

08009e48 <_rclc_execute.part.0>:
 8009e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e4a:	7803      	ldrb	r3, [r0, #0]
 8009e4c:	b087      	sub	sp, #28
 8009e4e:	4604      	mov	r4, r0
 8009e50:	2b0a      	cmp	r3, #10
 8009e52:	f200 8136 	bhi.w	800a0c2 <_rclc_execute.part.0+0x27a>
 8009e56:	e8df f003 	tbb	[pc, r3]
 8009e5a:	435e      	.short	0x435e
 8009e5c:	06a1664f 	.word	0x06a1664f
 8009e60:	6c1e0606 	.word	0x6c1e0606
 8009e64:	59          	.byte	0x59
 8009e65:	00          	.byte	0x00
 8009e66:	2b06      	cmp	r3, #6
 8009e68:	f000 8122 	beq.w	800a0b0 <_rclc_execute.part.0+0x268>
 8009e6c:	2b07      	cmp	r3, #7
 8009e6e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009e70:	f040 8118 	bne.w	800a0a4 <_rclc_execute.part.0+0x25c>
 8009e74:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 8009e78:	6880      	ldr	r0, [r0, #8]
 8009e7a:	4798      	blx	r3
 8009e7c:	f104 0110 	add.w	r1, r4, #16
 8009e80:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8009e82:	6860      	ldr	r0, [r4, #4]
 8009e84:	f005 f9fa 	bl	800f27c <rcl_send_response>
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	d033      	beq.n	8009ef4 <_rclc_execute.part.0+0xac>
 8009e8c:	9005      	str	r0, [sp, #20]
 8009e8e:	f000 fcdf 	bl	800a850 <rcutils_reset_error>
 8009e92:	9805      	ldr	r0, [sp, #20]
 8009e94:	e02e      	b.n	8009ef4 <_rclc_execute.part.0+0xac>
 8009e96:	6840      	ldr	r0, [r0, #4]
 8009e98:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f000 8086 	beq.w	8009fae <_rclc_execute.part.0+0x166>
 8009ea2:	2600      	movs	r6, #0
 8009ea4:	2701      	movs	r7, #1
 8009ea6:	e004      	b.n	8009eb2 <_rclc_execute.part.0+0x6a>
 8009ea8:	f006 fe9c 	bl	8010be4 <rclc_action_send_result_request>
 8009eac:	b998      	cbnz	r0, 8009ed6 <_rclc_execute.part.0+0x8e>
 8009eae:	722f      	strb	r7, [r5, #8]
 8009eb0:	6860      	ldr	r0, [r4, #4]
 8009eb2:	f006 ff49 	bl	8010d48 <rclc_action_find_first_handle_with_goal_response>
 8009eb6:	4605      	mov	r5, r0
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	d077      	beq.n	8009fac <_rclc_execute.part.0+0x164>
 8009ebc:	6863      	ldr	r3, [r4, #4]
 8009ebe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009ec0:	699b      	ldr	r3, [r3, #24]
 8009ec2:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 8009ec6:	f885 6020 	strb.w	r6, [r5, #32]
 8009eca:	4798      	blx	r3
 8009ecc:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 8009ed0:	4628      	mov	r0, r5
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d1e8      	bne.n	8009ea8 <_rclc_execute.part.0+0x60>
 8009ed6:	6860      	ldr	r0, [r4, #4]
 8009ed8:	4629      	mov	r1, r5
 8009eda:	f006 feb9 	bl	8010c50 <rclc_action_remove_used_goal_handle>
 8009ede:	e7e7      	b.n	8009eb0 <_rclc_execute.part.0+0x68>
 8009ee0:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8009ee4:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 8009ee8:	2d00      	cmp	r5, #0
 8009eea:	f000 80c9 	beq.w	800a080 <_rclc_execute.part.0+0x238>
 8009eee:	6880      	ldr	r0, [r0, #8]
 8009ef0:	4798      	blx	r3
 8009ef2:	2000      	movs	r0, #0
 8009ef4:	b007      	add	sp, #28
 8009ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ef8:	6840      	ldr	r0, [r0, #4]
 8009efa:	f005 fae5 	bl	800f4c8 <rcl_timer_call>
 8009efe:	f240 3321 	movw	r3, #801	@ 0x321
 8009f02:	4298      	cmp	r0, r3
 8009f04:	d004      	beq.n	8009f10 <_rclc_execute.part.0+0xc8>
 8009f06:	2800      	cmp	r0, #0
 8009f08:	d0f4      	beq.n	8009ef4 <_rclc_execute.part.0+0xac>
 8009f0a:	e7bf      	b.n	8009e8c <_rclc_execute.part.0+0x44>
 8009f0c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009f0e:	4798      	blx	r3
 8009f10:	2000      	movs	r0, #0
 8009f12:	b007      	add	sp, #28
 8009f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f16:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8009f1a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009f1c:	b925      	cbnz	r5, 8009f28 <_rclc_execute.part.0+0xe0>
 8009f1e:	4628      	mov	r0, r5
 8009f20:	4798      	blx	r3
 8009f22:	4628      	mov	r0, r5
 8009f24:	e7e6      	b.n	8009ef4 <_rclc_execute.part.0+0xac>
 8009f26:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009f28:	68a0      	ldr	r0, [r4, #8]
 8009f2a:	4798      	blx	r3
 8009f2c:	2000      	movs	r0, #0
 8009f2e:	b007      	add	sp, #28
 8009f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f32:	6840      	ldr	r0, [r0, #4]
 8009f34:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8009f38:	bb3b      	cbnz	r3, 8009f8a <_rclc_execute.part.0+0x142>
 8009f3a:	f890 3020 	ldrb.w	r3, [r0, #32]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d07b      	beq.n	800a03a <_rclc_execute.part.0+0x1f2>
 8009f42:	f640 0634 	movw	r6, #2100	@ 0x834
 8009f46:	2701      	movs	r7, #1
 8009f48:	e007      	b.n	8009f5a <_rclc_execute.part.0+0x112>
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	f006 ff14 	bl	8010d78 <rclc_action_server_response_goal_request>
 8009f50:	6860      	ldr	r0, [r4, #4]
 8009f52:	4629      	mov	r1, r5
 8009f54:	f006 fe7c 	bl	8010c50 <rclc_action_remove_used_goal_handle>
 8009f58:	6860      	ldr	r0, [r4, #4]
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	f006 fea6 	bl	8010cac <rclc_action_find_first_handle_by_status>
 8009f60:	4605      	mov	r5, r0
 8009f62:	2800      	cmp	r0, #0
 8009f64:	d066      	beq.n	800a034 <_rclc_execute.part.0+0x1ec>
 8009f66:	6863      	ldr	r3, [r4, #4]
 8009f68:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009f6a:	699b      	ldr	r3, [r3, #24]
 8009f6c:	4798      	blx	r3
 8009f6e:	42b0      	cmp	r0, r6
 8009f70:	f04f 0100 	mov.w	r1, #0
 8009f74:	d1e9      	bne.n	8009f4a <_rclc_execute.part.0+0x102>
 8009f76:	2101      	movs	r1, #1
 8009f78:	4628      	mov	r0, r5
 8009f7a:	f006 fefd 	bl	8010d78 <rclc_action_server_response_goal_request>
 8009f7e:	722f      	strb	r7, [r5, #8]
 8009f80:	e7ea      	b.n	8009f58 <_rclc_execute.part.0+0x110>
 8009f82:	6848      	ldr	r0, [r1, #4]
 8009f84:	f006 fe64 	bl	8010c50 <rclc_action_remove_used_goal_handle>
 8009f88:	6860      	ldr	r0, [r4, #4]
 8009f8a:	f006 fe9b 	bl	8010cc4 <rclc_action_find_first_terminated_handle>
 8009f8e:	4601      	mov	r1, r0
 8009f90:	2800      	cmp	r0, #0
 8009f92:	d1f6      	bne.n	8009f82 <_rclc_execute.part.0+0x13a>
 8009f94:	6860      	ldr	r0, [r4, #4]
 8009f96:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8009f9a:	e7ce      	b.n	8009f3a <_rclc_execute.part.0+0xf2>
 8009f9c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009f9e:	6880      	ldr	r0, [r0, #8]
 8009fa0:	f104 0110 	add.w	r1, r4, #16
 8009fa4:	4798      	blx	r3
 8009fa6:	2000      	movs	r0, #0
 8009fa8:	b007      	add	sp, #28
 8009faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fac:	6860      	ldr	r0, [r4, #4]
 8009fae:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009fb2:	b18b      	cbz	r3, 8009fd8 <_rclc_execute.part.0+0x190>
 8009fb4:	68c5      	ldr	r5, [r0, #12]
 8009fb6:	b32d      	cbz	r5, 800a004 <_rclc_execute.part.0+0x1bc>
 8009fb8:	2600      	movs	r6, #0
 8009fba:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8009fbe:	b143      	cbz	r3, 8009fd2 <_rclc_execute.part.0+0x18a>
 8009fc0:	69c3      	ldr	r3, [r0, #28]
 8009fc2:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 8009fc6:	b123      	cbz	r3, 8009fd2 <_rclc_execute.part.0+0x18a>
 8009fc8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009fca:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009fcc:	4628      	mov	r0, r5
 8009fce:	4798      	blx	r3
 8009fd0:	6860      	ldr	r0, [r4, #4]
 8009fd2:	682d      	ldr	r5, [r5, #0]
 8009fd4:	2d00      	cmp	r5, #0
 8009fd6:	d1f0      	bne.n	8009fba <_rclc_execute.part.0+0x172>
 8009fd8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8009fdc:	b193      	cbz	r3, 800a004 <_rclc_execute.part.0+0x1bc>
 8009fde:	68c5      	ldr	r5, [r0, #12]
 8009fe0:	b185      	cbz	r5, 800a004 <_rclc_execute.part.0+0x1bc>
 8009fe2:	2600      	movs	r6, #0
 8009fe4:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8009fe8:	b14b      	cbz	r3, 8009ffe <_rclc_execute.part.0+0x1b6>
 8009fea:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009fec:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 8009ff0:	b12b      	cbz	r3, 8009ffe <_rclc_execute.part.0+0x1b6>
 8009ff2:	4628      	mov	r0, r5
 8009ff4:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8009ff8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009ffa:	4798      	blx	r3
 8009ffc:	6860      	ldr	r0, [r4, #4]
 8009ffe:	682d      	ldr	r5, [r5, #0]
 800a000:	2d00      	cmp	r5, #0
 800a002:	d1ef      	bne.n	8009fe4 <_rclc_execute.part.0+0x19c>
 800a004:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d081      	beq.n	8009f10 <_rclc_execute.part.0+0xc8>
 800a00c:	2700      	movs	r7, #0
 800a00e:	e00b      	b.n	800a028 <_rclc_execute.part.0+0x1e0>
 800a010:	6863      	ldr	r3, [r4, #4]
 800a012:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a014:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a016:	6a1e      	ldr	r6, [r3, #32]
 800a018:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800a01c:	47b0      	blx	r6
 800a01e:	6860      	ldr	r0, [r4, #4]
 800a020:	4629      	mov	r1, r5
 800a022:	f006 fe15 	bl	8010c50 <rclc_action_remove_used_goal_handle>
 800a026:	6860      	ldr	r0, [r4, #4]
 800a028:	f006 fe9a 	bl	8010d60 <rclc_action_find_first_handle_with_result_response>
 800a02c:	4605      	mov	r5, r0
 800a02e:	2800      	cmp	r0, #0
 800a030:	d1ee      	bne.n	800a010 <_rclc_execute.part.0+0x1c8>
 800a032:	e76d      	b.n	8009f10 <_rclc_execute.part.0+0xc8>
 800a034:	6860      	ldr	r0, [r4, #4]
 800a036:	f880 5020 	strb.w	r5, [r0, #32]
 800a03a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800a03e:	2b00      	cmp	r3, #0
 800a040:	f43f af66 	beq.w	8009f10 <_rclc_execute.part.0+0xc8>
 800a044:	68c5      	ldr	r5, [r0, #12]
 800a046:	b1b5      	cbz	r5, 800a076 <_rclc_execute.part.0+0x22e>
 800a048:	2602      	movs	r6, #2
 800a04a:	e001      	b.n	800a050 <_rclc_execute.part.0+0x208>
 800a04c:	682d      	ldr	r5, [r5, #0]
 800a04e:	b195      	cbz	r5, 800a076 <_rclc_execute.part.0+0x22e>
 800a050:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800a054:	2b03      	cmp	r3, #3
 800a056:	d1f9      	bne.n	800a04c <_rclc_execute.part.0+0x204>
 800a058:	69c3      	ldr	r3, [r0, #28]
 800a05a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a05c:	4628      	mov	r0, r5
 800a05e:	4798      	blx	r3
 800a060:	4603      	mov	r3, r0
 800a062:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800a066:	4628      	mov	r0, r5
 800a068:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800a06c:	b163      	cbz	r3, 800a088 <_rclc_execute.part.0+0x240>
 800a06e:	f006 fea3 	bl	8010db8 <rclc_action_server_goal_cancel_accept>
 800a072:	6860      	ldr	r0, [r4, #4]
 800a074:	e7ea      	b.n	800a04c <_rclc_execute.part.0+0x204>
 800a076:	2300      	movs	r3, #0
 800a078:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800a07c:	4618      	mov	r0, r3
 800a07e:	e739      	b.n	8009ef4 <_rclc_execute.part.0+0xac>
 800a080:	4628      	mov	r0, r5
 800a082:	4798      	blx	r3
 800a084:	4628      	mov	r0, r5
 800a086:	e735      	b.n	8009ef4 <_rclc_execute.part.0+0xac>
 800a088:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800a08a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800a08e:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800a092:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a096:	6860      	ldr	r0, [r4, #4]
 800a098:	2101      	movs	r1, #1
 800a09a:	f006 feb9 	bl	8010e10 <rclc_action_server_goal_cancel_reject>
 800a09e:	722e      	strb	r6, [r5, #8]
 800a0a0:	6860      	ldr	r0, [r4, #4]
 800a0a2:	e7d3      	b.n	800a04c <_rclc_execute.part.0+0x204>
 800a0a4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800a0a6:	6880      	ldr	r0, [r0, #8]
 800a0a8:	4798      	blx	r3
 800a0aa:	f104 0110 	add.w	r1, r4, #16
 800a0ae:	e6e7      	b.n	8009e80 <_rclc_execute.part.0+0x38>
 800a0b0:	f100 0110 	add.w	r1, r0, #16
 800a0b4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a0b6:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800a0b8:	6880      	ldr	r0, [r0, #8]
 800a0ba:	9105      	str	r1, [sp, #20]
 800a0bc:	4798      	blx	r3
 800a0be:	9905      	ldr	r1, [sp, #20]
 800a0c0:	e6de      	b.n	8009e80 <_rclc_execute.part.0+0x38>
 800a0c2:	2001      	movs	r0, #1
 800a0c4:	e716      	b.n	8009ef4 <_rclc_execute.part.0+0xac>
 800a0c6:	bf00      	nop

0800a0c8 <rclc_executor_trigger_any>:
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	d03f      	beq.n	800a14c <rclc_executor_trigger_any+0x84>
 800a0cc:	2900      	cmp	r1, #0
 800a0ce:	d03e      	beq.n	800a14e <rclc_executor_trigger_any+0x86>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	d037      	beq.n	800a14c <rclc_executor_trigger_any+0x84>
 800a0dc:	b430      	push	{r4, r5}
 800a0de:	f893 c000 	ldrb.w	ip, [r3]
 800a0e2:	f1bc 0f08 	cmp.w	ip, #8
 800a0e6:	d11e      	bne.n	800a126 <rclc_executor_trigger_any+0x5e>
 800a0e8:	685c      	ldr	r4, [r3, #4]
 800a0ea:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800a0ec:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800a0f0:	d105      	bne.n	800a0fe <rclc_executor_trigger_any+0x36>
 800a0f2:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800a0f6:	b910      	cbnz	r0, 800a0fe <rclc_executor_trigger_any+0x36>
 800a0f8:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800a0fc:	b128      	cbz	r0, 800a10a <rclc_executor_trigger_any+0x42>
 800a0fe:	bc30      	pop	{r4, r5}
 800a100:	4770      	bx	lr
 800a102:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800a106:	2800      	cmp	r0, #0
 800a108:	d1f9      	bne.n	800a0fe <rclc_executor_trigger_any+0x36>
 800a10a:	3201      	adds	r2, #1
 800a10c:	4291      	cmp	r1, r2
 800a10e:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800a112:	d018      	beq.n	800a146 <rclc_executor_trigger_any+0x7e>
 800a114:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800a118:	2800      	cmp	r0, #0
 800a11a:	d0f0      	beq.n	800a0fe <rclc_executor_trigger_any+0x36>
 800a11c:	f893 c000 	ldrb.w	ip, [r3]
 800a120:	f1bc 0f08 	cmp.w	ip, #8
 800a124:	d0e0      	beq.n	800a0e8 <rclc_executor_trigger_any+0x20>
 800a126:	f1bc 0f09 	cmp.w	ip, #9
 800a12a:	d1ea      	bne.n	800a102 <rclc_executor_trigger_any+0x3a>
 800a12c:	685c      	ldr	r4, [r3, #4]
 800a12e:	6a25      	ldr	r5, [r4, #32]
 800a130:	2d00      	cmp	r5, #0
 800a132:	d1e4      	bne.n	800a0fe <rclc_executor_trigger_any+0x36>
 800a134:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800a138:	2800      	cmp	r0, #0
 800a13a:	d1e0      	bne.n	800a0fe <rclc_executor_trigger_any+0x36>
 800a13c:	3201      	adds	r2, #1
 800a13e:	4291      	cmp	r1, r2
 800a140:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800a144:	d1e6      	bne.n	800a114 <rclc_executor_trigger_any+0x4c>
 800a146:	2000      	movs	r0, #0
 800a148:	bc30      	pop	{r4, r5}
 800a14a:	4770      	bx	lr
 800a14c:	4770      	bx	lr
 800a14e:	4608      	mov	r0, r1
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop

0800a154 <rclc_executor_get_zero_initialized_executor>:
 800a154:	b510      	push	{r4, lr}
 800a156:	4903      	ldr	r1, [pc, #12]	@ (800a164 <rclc_executor_get_zero_initialized_executor+0x10>)
 800a158:	4604      	mov	r4, r0
 800a15a:	2288      	movs	r2, #136	@ 0x88
 800a15c:	f00a fbc7 	bl	80148ee <memcpy>
 800a160:	4620      	mov	r0, r4
 800a162:	bd10      	pop	{r4, pc}
 800a164:	08015798 	.word	0x08015798

0800a168 <rclc_executor_init>:
 800a168:	2800      	cmp	r0, #0
 800a16a:	d05f      	beq.n	800a22c <rclc_executor_init+0xc4>
 800a16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a170:	460c      	mov	r4, r1
 800a172:	b0b0      	sub	sp, #192	@ 0xc0
 800a174:	2900      	cmp	r1, #0
 800a176:	d051      	beq.n	800a21c <rclc_executor_init+0xb4>
 800a178:	4605      	mov	r5, r0
 800a17a:	4618      	mov	r0, r3
 800a17c:	4616      	mov	r6, r2
 800a17e:	461f      	mov	r7, r3
 800a180:	f000 fb40 	bl	800a804 <rcutils_allocator_is_valid>
 800a184:	2800      	cmp	r0, #0
 800a186:	d049      	beq.n	800a21c <rclc_executor_init+0xb4>
 800a188:	2e00      	cmp	r6, #0
 800a18a:	d047      	beq.n	800a21c <rclc_executor_init+0xb4>
 800a18c:	492c      	ldr	r1, [pc, #176]	@ (800a240 <rclc_executor_init+0xd8>)
 800a18e:	2288      	movs	r2, #136	@ 0x88
 800a190:	a80e      	add	r0, sp, #56	@ 0x38
 800a192:	f00a fbac 	bl	80148ee <memcpy>
 800a196:	a90e      	add	r1, sp, #56	@ 0x38
 800a198:	2288      	movs	r2, #136	@ 0x88
 800a19a:	4628      	mov	r0, r5
 800a19c:	f00a fba7 	bl	80148ee <memcpy>
 800a1a0:	602c      	str	r4, [r5, #0]
 800a1a2:	4668      	mov	r0, sp
 800a1a4:	60ae      	str	r6, [r5, #8]
 800a1a6:	466c      	mov	r4, sp
 800a1a8:	f005 fb00 	bl	800f7ac <rcl_get_zero_initialized_wait_set>
 800a1ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a1ae:	f105 0c14 	add.w	ip, r5, #20
 800a1b2:	f8d7 8000 	ldr.w	r8, [r7]
 800a1b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a1ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a1bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a1c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a1c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a1c6:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800a238 <rclc_executor_init+0xd0>
 800a1ca:	6823      	ldr	r3, [r4, #0]
 800a1cc:	f8cc 3000 	str.w	r3, [ip]
 800a1d0:	6939      	ldr	r1, [r7, #16]
 800a1d2:	612f      	str	r7, [r5, #16]
 800a1d4:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800a1d8:	01b0      	lsls	r0, r6, #6
 800a1da:	47c0      	blx	r8
 800a1dc:	6068      	str	r0, [r5, #4]
 800a1de:	b338      	cbz	r0, 800a230 <rclc_executor_init+0xc8>
 800a1e0:	2400      	movs	r4, #0
 800a1e2:	e000      	b.n	800a1e6 <rclc_executor_init+0x7e>
 800a1e4:	6868      	ldr	r0, [r5, #4]
 800a1e6:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800a1ea:	4631      	mov	r1, r6
 800a1ec:	3401      	adds	r4, #1
 800a1ee:	f000 fa3f 	bl	800a670 <rclc_executor_handle_init>
 800a1f2:	42a6      	cmp	r6, r4
 800a1f4:	d1f6      	bne.n	800a1e4 <rclc_executor_init+0x7c>
 800a1f6:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800a1fa:	f000 fa2f 	bl	800a65c <rclc_executor_handle_counters_zero_init>
 800a1fe:	4a11      	ldr	r2, [pc, #68]	@ (800a244 <rclc_executor_init+0xdc>)
 800a200:	686b      	ldr	r3, [r5, #4]
 800a202:	2000      	movs	r0, #0
 800a204:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800a208:	b163      	cbz	r3, 800a224 <rclc_executor_init+0xbc>
 800a20a:	692b      	ldr	r3, [r5, #16]
 800a20c:	b153      	cbz	r3, 800a224 <rclc_executor_init+0xbc>
 800a20e:	68ab      	ldr	r3, [r5, #8]
 800a210:	b143      	cbz	r3, 800a224 <rclc_executor_init+0xbc>
 800a212:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800a216:	b030      	add	sp, #192	@ 0xc0
 800a218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a21c:	200b      	movs	r0, #11
 800a21e:	b030      	add	sp, #192	@ 0xc0
 800a220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a224:	4618      	mov	r0, r3
 800a226:	b030      	add	sp, #192	@ 0xc0
 800a228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a22c:	200b      	movs	r0, #11
 800a22e:	4770      	bx	lr
 800a230:	200a      	movs	r0, #10
 800a232:	e7f4      	b.n	800a21e <rclc_executor_init+0xb6>
 800a234:	f3af 8000 	nop.w
 800a238:	3b9aca00 	.word	0x3b9aca00
 800a23c:	00000000 	.word	0x00000000
 800a240:	08015798 	.word	0x08015798
 800a244:	0800a0c9 	.word	0x0800a0c9

0800a248 <rclc_executor_prepare>:
 800a248:	2800      	cmp	r0, #0
 800a24a:	d044      	beq.n	800a2d6 <rclc_executor_prepare+0x8e>
 800a24c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a24e:	f100 0514 	add.w	r5, r0, #20
 800a252:	b09b      	sub	sp, #108	@ 0x6c
 800a254:	4604      	mov	r4, r0
 800a256:	4628      	mov	r0, r5
 800a258:	f005 fabc 	bl	800f7d4 <rcl_wait_set_is_valid>
 800a25c:	b110      	cbz	r0, 800a264 <rclc_executor_prepare+0x1c>
 800a25e:	2000      	movs	r0, #0
 800a260:	b01b      	add	sp, #108	@ 0x6c
 800a262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a264:	4628      	mov	r0, r5
 800a266:	f005 fabb 	bl	800f7e0 <rcl_wait_set_fini>
 800a26a:	2800      	cmp	r0, #0
 800a26c:	d130      	bne.n	800a2d0 <rclc_executor_prepare+0x88>
 800a26e:	a80c      	add	r0, sp, #48	@ 0x30
 800a270:	f005 fa9c 	bl	800f7ac <rcl_get_zero_initialized_wait_set>
 800a274:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800a278:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a27c:	46ae      	mov	lr, r5
 800a27e:	6927      	ldr	r7, [r4, #16]
 800a280:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a284:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a288:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a28c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a290:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a294:	f8dc 3000 	ldr.w	r3, [ip]
 800a298:	f8ce 3000 	str.w	r3, [lr]
 800a29c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a29e:	ae04      	add	r6, sp, #16
 800a2a0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	6822      	ldr	r2, [r4, #0]
 800a2a6:	6033      	str	r3, [r6, #0]
 800a2a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a2aa:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800a2ac:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800a2b0:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800a2b4:	e9cd 2100 	strd	r2, r1, [sp]
 800a2b8:	4628      	mov	r0, r5
 800a2ba:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800a2bc:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a2be:	f005 fd8d 	bl	800fddc <rcl_wait_set_init>
 800a2c2:	2800      	cmp	r0, #0
 800a2c4:	d0cc      	beq.n	800a260 <rclc_executor_prepare+0x18>
 800a2c6:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a2c8:	f000 fac2 	bl	800a850 <rcutils_reset_error>
 800a2cc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a2ce:	e7c7      	b.n	800a260 <rclc_executor_prepare+0x18>
 800a2d0:	f000 fabe 	bl	800a850 <rcutils_reset_error>
 800a2d4:	e7cb      	b.n	800a26e <rclc_executor_prepare+0x26>
 800a2d6:	200b      	movs	r0, #11
 800a2d8:	4770      	bx	lr
 800a2da:	bf00      	nop

0800a2dc <rclc_executor_spin_some.part.0>:
 800a2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2e0:	f100 0614 	add.w	r6, r0, #20
 800a2e4:	b083      	sub	sp, #12
 800a2e6:	4691      	mov	r9, r2
 800a2e8:	4698      	mov	r8, r3
 800a2ea:	4605      	mov	r5, r0
 800a2ec:	f7ff ffac 	bl	800a248 <rclc_executor_prepare>
 800a2f0:	4630      	mov	r0, r6
 800a2f2:	f005 fb41 	bl	800f978 <rcl_wait_set_clear>
 800a2f6:	4607      	mov	r7, r0
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	f040 80ed 	bne.w	800a4d8 <rclc_executor_spin_some.part.0+0x1fc>
 800a2fe:	68ab      	ldr	r3, [r5, #8]
 800a300:	4604      	mov	r4, r0
 800a302:	b303      	cbz	r3, 800a346 <rclc_executor_spin_some.part.0+0x6a>
 800a304:	6869      	ldr	r1, [r5, #4]
 800a306:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800a30a:	01a2      	lsls	r2, r4, #6
 800a30c:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800a310:	b1cb      	cbz	r3, 800a346 <rclc_executor_spin_some.part.0+0x6a>
 800a312:	5c8b      	ldrb	r3, [r1, r2]
 800a314:	2b0a      	cmp	r3, #10
 800a316:	f200 80d8 	bhi.w	800a4ca <rclc_executor_spin_some.part.0+0x1ee>
 800a31a:	e8df f003 	tbb	[pc, r3]
 800a31e:	9c9c      	.short	0x9c9c
 800a320:	068c8ca7 	.word	0x068c8ca7
 800a324:	bdc90606 	.word	0xbdc90606
 800a328:	b2          	.byte	0xb2
 800a329:	00          	.byte	0x00
 800a32a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a32e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a332:	4630      	mov	r0, r6
 800a334:	f005 fe68 	bl	8010008 <rcl_wait_set_add_service>
 800a338:	2800      	cmp	r0, #0
 800a33a:	f040 8086 	bne.w	800a44a <rclc_executor_spin_some.part.0+0x16e>
 800a33e:	68ab      	ldr	r3, [r5, #8]
 800a340:	3401      	adds	r4, #1
 800a342:	429c      	cmp	r4, r3
 800a344:	d3de      	bcc.n	800a304 <rclc_executor_spin_some.part.0+0x28>
 800a346:	4643      	mov	r3, r8
 800a348:	464a      	mov	r2, r9
 800a34a:	4630      	mov	r0, r6
 800a34c:	f005 fe88 	bl	8010060 <rcl_wait>
 800a350:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800a354:	2b00      	cmp	r3, #0
 800a356:	f000 80c7 	beq.w	800a4e8 <rclc_executor_spin_some.part.0+0x20c>
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	f040 80b5 	bne.w	800a4ca <rclc_executor_spin_some.part.0+0x1ee>
 800a360:	68ab      	ldr	r3, [r5, #8]
 800a362:	2b00      	cmp	r3, #0
 800a364:	f000 8159 	beq.w	800a61a <rclc_executor_spin_some.part.0+0x33e>
 800a368:	2400      	movs	r4, #0
 800a36a:	46a0      	mov	r8, r4
 800a36c:	f240 1991 	movw	r9, #401	@ 0x191
 800a370:	e00a      	b.n	800a388 <rclc_executor_spin_some.part.0+0xac>
 800a372:	f7ff fba7 	bl	8009ac4 <_rclc_check_for_new_data>
 800a376:	4604      	mov	r4, r0
 800a378:	b110      	cbz	r0, 800a380 <rclc_executor_spin_some.part.0+0xa4>
 800a37a:	4548      	cmp	r0, r9
 800a37c:	f040 80b2 	bne.w	800a4e4 <rclc_executor_spin_some.part.0+0x208>
 800a380:	68ab      	ldr	r3, [r5, #8]
 800a382:	4598      	cmp	r8, r3
 800a384:	f080 8126 	bcs.w	800a5d4 <rclc_executor_spin_some.part.0+0x2f8>
 800a388:	686a      	ldr	r2, [r5, #4]
 800a38a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800a38e:	4631      	mov	r1, r6
 800a390:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800a394:	f108 0801 	add.w	r8, r8, #1
 800a398:	f1bc 0f00 	cmp.w	ip, #0
 800a39c:	d1e9      	bne.n	800a372 <rclc_executor_spin_some.part.0+0x96>
 800a39e:	4619      	mov	r1, r3
 800a3a0:	4610      	mov	r0, r2
 800a3a2:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800a3a6:	4798      	blx	r3
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	f000 809b 	beq.w	800a4e4 <rclc_executor_spin_some.part.0+0x208>
 800a3ae:	68ab      	ldr	r3, [r5, #8]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	f000 8097 	beq.w	800a4e4 <rclc_executor_spin_some.part.0+0x208>
 800a3b6:	f04f 0800 	mov.w	r8, #0
 800a3ba:	f240 1991 	movw	r9, #401	@ 0x191
 800a3be:	e009      	b.n	800a3d4 <rclc_executor_spin_some.part.0+0xf8>
 800a3c0:	f7ff fbce 	bl	8009b60 <_rclc_take_new_data>
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	b110      	cbz	r0, 800a3ce <rclc_executor_spin_some.part.0+0xf2>
 800a3c8:	4548      	cmp	r0, r9
 800a3ca:	f040 808b 	bne.w	800a4e4 <rclc_executor_spin_some.part.0+0x208>
 800a3ce:	68ab      	ldr	r3, [r5, #8]
 800a3d0:	4598      	cmp	r8, r3
 800a3d2:	d209      	bcs.n	800a3e8 <rclc_executor_spin_some.part.0+0x10c>
 800a3d4:	6868      	ldr	r0, [r5, #4]
 800a3d6:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800a3da:	4631      	mov	r1, r6
 800a3dc:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800a3e0:	f108 0801 	add.w	r8, r8, #1
 800a3e4:	2a00      	cmp	r2, #0
 800a3e6:	d1eb      	bne.n	800a3c0 <rclc_executor_spin_some.part.0+0xe4>
 800a3e8:	2600      	movs	r6, #0
 800a3ea:	b97b      	cbnz	r3, 800a40c <rclc_executor_spin_some.part.0+0x130>
 800a3ec:	e07a      	b.n	800a4e4 <rclc_executor_spin_some.part.0+0x208>
 800a3ee:	f812 200c 	ldrb.w	r2, [r2, ip]
 800a3f2:	2a08      	cmp	r2, #8
 800a3f4:	f000 80fd 	beq.w	800a5f2 <rclc_executor_spin_some.part.0+0x316>
 800a3f8:	2a09      	cmp	r2, #9
 800a3fa:	f000 80ef 	beq.w	800a5dc <rclc_executor_spin_some.part.0+0x300>
 800a3fe:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800a402:	b98a      	cbnz	r2, 800a428 <rclc_executor_spin_some.part.0+0x14c>
 800a404:	3601      	adds	r6, #1
 800a406:	429e      	cmp	r6, r3
 800a408:	d262      	bcs.n	800a4d0 <rclc_executor_spin_some.part.0+0x1f4>
 800a40a:	2400      	movs	r4, #0
 800a40c:	686a      	ldr	r2, [r5, #4]
 800a40e:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800a412:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800a416:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800a41a:	2900      	cmp	r1, #0
 800a41c:	d062      	beq.n	800a4e4 <rclc_executor_spin_some.part.0+0x208>
 800a41e:	7841      	ldrb	r1, [r0, #1]
 800a420:	2900      	cmp	r1, #0
 800a422:	d0e4      	beq.n	800a3ee <rclc_executor_spin_some.part.0+0x112>
 800a424:	2901      	cmp	r1, #1
 800a426:	d1ed      	bne.n	800a404 <rclc_executor_spin_some.part.0+0x128>
 800a428:	f7ff fd0e 	bl	8009e48 <_rclc_execute.part.0>
 800a42c:	2800      	cmp	r0, #0
 800a42e:	f040 80b6 	bne.w	800a59e <rclc_executor_spin_some.part.0+0x2c2>
 800a432:	68ab      	ldr	r3, [r5, #8]
 800a434:	e7e6      	b.n	800a404 <rclc_executor_spin_some.part.0+0x128>
 800a436:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a43a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a43e:	4630      	mov	r0, r6
 800a440:	f005 fdb6 	bl	800ffb0 <rcl_wait_set_add_client>
 800a444:	2800      	cmp	r0, #0
 800a446:	f43f af7a 	beq.w	800a33e <rclc_executor_spin_some.part.0+0x62>
 800a44a:	9001      	str	r0, [sp, #4]
 800a44c:	f000 fa00 	bl	800a850 <rcutils_reset_error>
 800a450:	9801      	ldr	r0, [sp, #4]
 800a452:	4607      	mov	r7, r0
 800a454:	e03c      	b.n	800a4d0 <rclc_executor_spin_some.part.0+0x1f4>
 800a456:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a45a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a45e:	4630      	mov	r0, r6
 800a460:	f005 fa5e 	bl	800f920 <rcl_wait_set_add_subscription>
 800a464:	2800      	cmp	r0, #0
 800a466:	f43f af6a 	beq.w	800a33e <rclc_executor_spin_some.part.0+0x62>
 800a46a:	e7ee      	b.n	800a44a <rclc_executor_spin_some.part.0+0x16e>
 800a46c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a470:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a474:	4630      	mov	r0, r6
 800a476:	f005 fd6b 	bl	800ff50 <rcl_wait_set_add_timer>
 800a47a:	2800      	cmp	r0, #0
 800a47c:	f43f af5f 	beq.w	800a33e <rclc_executor_spin_some.part.0+0x62>
 800a480:	e7e3      	b.n	800a44a <rclc_executor_spin_some.part.0+0x16e>
 800a482:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a486:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a48a:	4630      	mov	r0, r6
 800a48c:	f005 fd34 	bl	800fef8 <rcl_wait_set_add_guard_condition>
 800a490:	2800      	cmp	r0, #0
 800a492:	f43f af54 	beq.w	800a33e <rclc_executor_spin_some.part.0+0x62>
 800a496:	e7d8      	b.n	800a44a <rclc_executor_spin_some.part.0+0x16e>
 800a498:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a49c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a4a0:	3110      	adds	r1, #16
 800a4a2:	4630      	mov	r0, r6
 800a4a4:	f006 fab4 	bl	8010a10 <rcl_action_wait_set_add_action_server>
 800a4a8:	2800      	cmp	r0, #0
 800a4aa:	f43f af48 	beq.w	800a33e <rclc_executor_spin_some.part.0+0x62>
 800a4ae:	e7cc      	b.n	800a44a <rclc_executor_spin_some.part.0+0x16e>
 800a4b0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a4b4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a4b8:	3110      	adds	r1, #16
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	4630      	mov	r0, r6
 800a4be:	f006 f87f 	bl	80105c0 <rcl_action_wait_set_add_action_client>
 800a4c2:	2800      	cmp	r0, #0
 800a4c4:	f43f af3b 	beq.w	800a33e <rclc_executor_spin_some.part.0+0x62>
 800a4c8:	e7bf      	b.n	800a44a <rclc_executor_spin_some.part.0+0x16e>
 800a4ca:	f000 f9c1 	bl	800a850 <rcutils_reset_error>
 800a4ce:	2701      	movs	r7, #1
 800a4d0:	4638      	mov	r0, r7
 800a4d2:	b003      	add	sp, #12
 800a4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4d8:	f000 f9ba 	bl	800a850 <rcutils_reset_error>
 800a4dc:	4638      	mov	r0, r7
 800a4de:	b003      	add	sp, #12
 800a4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4e4:	4627      	mov	r7, r4
 800a4e6:	e7f3      	b.n	800a4d0 <rclc_executor_spin_some.part.0+0x1f4>
 800a4e8:	68ab      	ldr	r3, [r5, #8]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f000 8092 	beq.w	800a614 <rclc_executor_spin_some.part.0+0x338>
 800a4f0:	2400      	movs	r4, #0
 800a4f2:	46a0      	mov	r8, r4
 800a4f4:	f240 1991 	movw	r9, #401	@ 0x191
 800a4f8:	e008      	b.n	800a50c <rclc_executor_spin_some.part.0+0x230>
 800a4fa:	f7ff fae3 	bl	8009ac4 <_rclc_check_for_new_data>
 800a4fe:	4604      	mov	r4, r0
 800a500:	b108      	cbz	r0, 800a506 <rclc_executor_spin_some.part.0+0x22a>
 800a502:	4548      	cmp	r0, r9
 800a504:	d1ee      	bne.n	800a4e4 <rclc_executor_spin_some.part.0+0x208>
 800a506:	68ab      	ldr	r3, [r5, #8]
 800a508:	4598      	cmp	r8, r3
 800a50a:	d265      	bcs.n	800a5d8 <rclc_executor_spin_some.part.0+0x2fc>
 800a50c:	686a      	ldr	r2, [r5, #4]
 800a50e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800a512:	4631      	mov	r1, r6
 800a514:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800a518:	f108 0801 	add.w	r8, r8, #1
 800a51c:	f1bc 0f00 	cmp.w	ip, #0
 800a520:	d1eb      	bne.n	800a4fa <rclc_executor_spin_some.part.0+0x21e>
 800a522:	4619      	mov	r1, r3
 800a524:	4610      	mov	r0, r2
 800a526:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800a52a:	4798      	blx	r3
 800a52c:	2800      	cmp	r0, #0
 800a52e:	d0d9      	beq.n	800a4e4 <rclc_executor_spin_some.part.0+0x208>
 800a530:	68ab      	ldr	r3, [r5, #8]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d0d6      	beq.n	800a4e4 <rclc_executor_spin_some.part.0+0x208>
 800a536:	f04f 0800 	mov.w	r8, #0
 800a53a:	f240 1991 	movw	r9, #401	@ 0x191
 800a53e:	f240 2a59 	movw	sl, #601	@ 0x259
 800a542:	e00e      	b.n	800a562 <rclc_executor_spin_some.part.0+0x286>
 800a544:	f813 300b 	ldrb.w	r3, [r3, fp]
 800a548:	2b08      	cmp	r3, #8
 800a54a:	d033      	beq.n	800a5b4 <rclc_executor_spin_some.part.0+0x2d8>
 800a54c:	2b09      	cmp	r3, #9
 800a54e:	d028      	beq.n	800a5a2 <rclc_executor_spin_some.part.0+0x2c6>
 800a550:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800a554:	b9fb      	cbnz	r3, 800a596 <rclc_executor_spin_some.part.0+0x2ba>
 800a556:	68ab      	ldr	r3, [r5, #8]
 800a558:	f108 0801 	add.w	r8, r8, #1
 800a55c:	4598      	cmp	r8, r3
 800a55e:	d2b7      	bcs.n	800a4d0 <rclc_executor_spin_some.part.0+0x1f4>
 800a560:	2400      	movs	r4, #0
 800a562:	6868      	ldr	r0, [r5, #4]
 800a564:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800a568:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800a56c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800a570:	2b00      	cmp	r3, #0
 800a572:	d0b7      	beq.n	800a4e4 <rclc_executor_spin_some.part.0+0x208>
 800a574:	4631      	mov	r1, r6
 800a576:	f7ff faf3 	bl	8009b60 <_rclc_take_new_data>
 800a57a:	b118      	cbz	r0, 800a584 <rclc_executor_spin_some.part.0+0x2a8>
 800a57c:	4548      	cmp	r0, r9
 800a57e:	d001      	beq.n	800a584 <rclc_executor_spin_some.part.0+0x2a8>
 800a580:	4550      	cmp	r0, sl
 800a582:	d10c      	bne.n	800a59e <rclc_executor_spin_some.part.0+0x2c2>
 800a584:	686b      	ldr	r3, [r5, #4]
 800a586:	eb13 000b 	adds.w	r0, r3, fp
 800a58a:	d021      	beq.n	800a5d0 <rclc_executor_spin_some.part.0+0x2f4>
 800a58c:	7842      	ldrb	r2, [r0, #1]
 800a58e:	2a00      	cmp	r2, #0
 800a590:	d0d8      	beq.n	800a544 <rclc_executor_spin_some.part.0+0x268>
 800a592:	2a01      	cmp	r2, #1
 800a594:	d1df      	bne.n	800a556 <rclc_executor_spin_some.part.0+0x27a>
 800a596:	f7ff fc57 	bl	8009e48 <_rclc_execute.part.0>
 800a59a:	2800      	cmp	r0, #0
 800a59c:	d0db      	beq.n	800a556 <rclc_executor_spin_some.part.0+0x27a>
 800a59e:	4607      	mov	r7, r0
 800a5a0:	e796      	b.n	800a4d0 <rclc_executor_spin_some.part.0+0x1f4>
 800a5a2:	6843      	ldr	r3, [r0, #4]
 800a5a4:	6a1a      	ldr	r2, [r3, #32]
 800a5a6:	2a00      	cmp	r2, #0
 800a5a8:	d1f5      	bne.n	800a596 <rclc_executor_spin_some.part.0+0x2ba>
 800a5aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d0d1      	beq.n	800a556 <rclc_executor_spin_some.part.0+0x27a>
 800a5b2:	e7f0      	b.n	800a596 <rclc_executor_spin_some.part.0+0x2ba>
 800a5b4:	6843      	ldr	r3, [r0, #4]
 800a5b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a5b8:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800a5bc:	d1eb      	bne.n	800a596 <rclc_executor_spin_some.part.0+0x2ba>
 800a5be:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800a5c2:	2a00      	cmp	r2, #0
 800a5c4:	d1e7      	bne.n	800a596 <rclc_executor_spin_some.part.0+0x2ba>
 800a5c6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d0c3      	beq.n	800a556 <rclc_executor_spin_some.part.0+0x27a>
 800a5ce:	e7e2      	b.n	800a596 <rclc_executor_spin_some.part.0+0x2ba>
 800a5d0:	270b      	movs	r7, #11
 800a5d2:	e77d      	b.n	800a4d0 <rclc_executor_spin_some.part.0+0x1f4>
 800a5d4:	686a      	ldr	r2, [r5, #4]
 800a5d6:	e6e2      	b.n	800a39e <rclc_executor_spin_some.part.0+0xc2>
 800a5d8:	686a      	ldr	r2, [r5, #4]
 800a5da:	e7a2      	b.n	800a522 <rclc_executor_spin_some.part.0+0x246>
 800a5dc:	6842      	ldr	r2, [r0, #4]
 800a5de:	6a11      	ldr	r1, [r2, #32]
 800a5e0:	2900      	cmp	r1, #0
 800a5e2:	f47f af21 	bne.w	800a428 <rclc_executor_spin_some.part.0+0x14c>
 800a5e6:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800a5ea:	2a00      	cmp	r2, #0
 800a5ec:	f43f af0a 	beq.w	800a404 <rclc_executor_spin_some.part.0+0x128>
 800a5f0:	e71a      	b.n	800a428 <rclc_executor_spin_some.part.0+0x14c>
 800a5f2:	6842      	ldr	r2, [r0, #4]
 800a5f4:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800a5f6:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800a5fa:	f47f af15 	bne.w	800a428 <rclc_executor_spin_some.part.0+0x14c>
 800a5fe:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800a602:	2900      	cmp	r1, #0
 800a604:	f47f af10 	bne.w	800a428 <rclc_executor_spin_some.part.0+0x14c>
 800a608:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800a60c:	2a00      	cmp	r2, #0
 800a60e:	f43f aef9 	beq.w	800a404 <rclc_executor_spin_some.part.0+0x128>
 800a612:	e709      	b.n	800a428 <rclc_executor_spin_some.part.0+0x14c>
 800a614:	686a      	ldr	r2, [r5, #4]
 800a616:	461c      	mov	r4, r3
 800a618:	e783      	b.n	800a522 <rclc_executor_spin_some.part.0+0x246>
 800a61a:	686a      	ldr	r2, [r5, #4]
 800a61c:	461c      	mov	r4, r3
 800a61e:	e6be      	b.n	800a39e <rclc_executor_spin_some.part.0+0xc2>

0800a620 <rclc_executor_spin>:
 800a620:	b1d0      	cbz	r0, 800a658 <rclc_executor_spin+0x38>
 800a622:	b510      	push	{r4, lr}
 800a624:	4604      	mov	r4, r0
 800a626:	b082      	sub	sp, #8
 800a628:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800a62c:	6820      	ldr	r0, [r4, #0]
 800a62e:	e9cd 2300 	strd	r2, r3, [sp]
 800a632:	f004 f9d9 	bl	800e9e8 <rcl_context_is_valid>
 800a636:	4601      	mov	r1, r0
 800a638:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a63c:	4620      	mov	r0, r4
 800a63e:	b131      	cbz	r1, 800a64e <rclc_executor_spin+0x2e>
 800a640:	f7ff fe4c 	bl	800a2dc <rclc_executor_spin_some.part.0>
 800a644:	f030 0302 	bics.w	r3, r0, #2
 800a648:	d0ee      	beq.n	800a628 <rclc_executor_spin+0x8>
 800a64a:	b002      	add	sp, #8
 800a64c:	bd10      	pop	{r4, pc}
 800a64e:	f000 f8ff 	bl	800a850 <rcutils_reset_error>
 800a652:	2001      	movs	r0, #1
 800a654:	b002      	add	sp, #8
 800a656:	bd10      	pop	{r4, pc}
 800a658:	200b      	movs	r0, #11
 800a65a:	4770      	bx	lr

0800a65c <rclc_executor_handle_counters_zero_init>:
 800a65c:	b130      	cbz	r0, 800a66c <rclc_executor_handle_counters_zero_init+0x10>
 800a65e:	b508      	push	{r3, lr}
 800a660:	2220      	movs	r2, #32
 800a662:	2100      	movs	r1, #0
 800a664:	f00a f850 	bl	8014708 <memset>
 800a668:	2000      	movs	r0, #0
 800a66a:	bd08      	pop	{r3, pc}
 800a66c:	200b      	movs	r0, #11
 800a66e:	4770      	bx	lr

0800a670 <rclc_executor_handle_init>:
 800a670:	b168      	cbz	r0, 800a68e <rclc_executor_handle_init+0x1e>
 800a672:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800a698 <rclc_executor_handle_init+0x28>
 800a676:	2300      	movs	r3, #0
 800a678:	220b      	movs	r2, #11
 800a67a:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800a67e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800a682:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800a686:	8002      	strh	r2, [r0, #0]
 800a688:	8703      	strh	r3, [r0, #56]	@ 0x38
 800a68a:	4618      	mov	r0, r3
 800a68c:	4770      	bx	lr
 800a68e:	200b      	movs	r0, #11
 800a690:	4770      	bx	lr
 800a692:	bf00      	nop
 800a694:	f3af 8000 	nop.w
	...

0800a6a0 <rclc_support_init_with_options>:
 800a6a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a6a4:	b083      	sub	sp, #12
 800a6a6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a6a8:	b340      	cbz	r0, 800a6fc <rclc_support_init_with_options+0x5c>
 800a6aa:	461d      	mov	r5, r3
 800a6ac:	b333      	cbz	r3, 800a6fc <rclc_support_init_with_options+0x5c>
 800a6ae:	b32e      	cbz	r6, 800a6fc <rclc_support_init_with_options+0x5c>
 800a6b0:	46e9      	mov	r9, sp
 800a6b2:	4604      	mov	r4, r0
 800a6b4:	4648      	mov	r0, r9
 800a6b6:	460f      	mov	r7, r1
 800a6b8:	4690      	mov	r8, r2
 800a6ba:	f004 f98b 	bl	800e9d4 <rcl_get_zero_initialized_context>
 800a6be:	e899 0003 	ldmia.w	r9, {r0, r1}
 800a6c2:	462a      	mov	r2, r5
 800a6c4:	e884 0003 	stmia.w	r4, {r0, r1}
 800a6c8:	4623      	mov	r3, r4
 800a6ca:	4641      	mov	r1, r8
 800a6cc:	4638      	mov	r0, r7
 800a6ce:	f004 f9f1 	bl	800eab4 <rcl_init>
 800a6d2:	4605      	mov	r5, r0
 800a6d4:	b960      	cbnz	r0, 800a6f0 <rclc_support_init_with_options+0x50>
 800a6d6:	60a6      	str	r6, [r4, #8]
 800a6d8:	4632      	mov	r2, r6
 800a6da:	f104 010c 	add.w	r1, r4, #12
 800a6de:	2003      	movs	r0, #3
 800a6e0:	f004 fe6e 	bl	800f3c0 <rcl_clock_init>
 800a6e4:	4605      	mov	r5, r0
 800a6e6:	b918      	cbnz	r0, 800a6f0 <rclc_support_init_with_options+0x50>
 800a6e8:	4628      	mov	r0, r5
 800a6ea:	b003      	add	sp, #12
 800a6ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6f0:	f000 f8ae 	bl	800a850 <rcutils_reset_error>
 800a6f4:	4628      	mov	r0, r5
 800a6f6:	b003      	add	sp, #12
 800a6f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6fc:	250b      	movs	r5, #11
 800a6fe:	4628      	mov	r0, r5
 800a700:	b003      	add	sp, #12
 800a702:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a706:	bf00      	nop

0800a708 <rclc_node_init_default>:
 800a708:	b3b8      	cbz	r0, 800a77a <rclc_node_init_default+0x72>
 800a70a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a70e:	460d      	mov	r5, r1
 800a710:	b0a1      	sub	sp, #132	@ 0x84
 800a712:	b329      	cbz	r1, 800a760 <rclc_node_init_default+0x58>
 800a714:	4616      	mov	r6, r2
 800a716:	b31a      	cbz	r2, 800a760 <rclc_node_init_default+0x58>
 800a718:	461f      	mov	r7, r3
 800a71a:	b30b      	cbz	r3, 800a760 <rclc_node_init_default+0x58>
 800a71c:	f10d 0810 	add.w	r8, sp, #16
 800a720:	4604      	mov	r4, r0
 800a722:	4640      	mov	r0, r8
 800a724:	f004 faec 	bl	800ed00 <rcl_get_zero_initialized_node>
 800a728:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a72c:	f10d 0918 	add.w	r9, sp, #24
 800a730:	e884 0003 	stmia.w	r4, {r0, r1}
 800a734:	4648      	mov	r0, r9
 800a736:	f004 fc33 	bl	800efa0 <rcl_node_get_default_options>
 800a73a:	4640      	mov	r0, r8
 800a73c:	f004 fae0 	bl	800ed00 <rcl_get_zero_initialized_node>
 800a740:	f8cd 9000 	str.w	r9, [sp]
 800a744:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a748:	463b      	mov	r3, r7
 800a74a:	e884 0003 	stmia.w	r4, {r0, r1}
 800a74e:	4632      	mov	r2, r6
 800a750:	4629      	mov	r1, r5
 800a752:	4620      	mov	r0, r4
 800a754:	f004 fade 	bl	800ed14 <rcl_node_init>
 800a758:	b930      	cbnz	r0, 800a768 <rclc_node_init_default+0x60>
 800a75a:	b021      	add	sp, #132	@ 0x84
 800a75c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a760:	200b      	movs	r0, #11
 800a762:	b021      	add	sp, #132	@ 0x84
 800a764:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a768:	9003      	str	r0, [sp, #12]
 800a76a:	f000 f871 	bl	800a850 <rcutils_reset_error>
 800a76e:	f000 f86f 	bl	800a850 <rcutils_reset_error>
 800a772:	9803      	ldr	r0, [sp, #12]
 800a774:	b021      	add	sp, #132	@ 0x84
 800a776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a77a:	200b      	movs	r0, #11
 800a77c:	4770      	bx	lr
 800a77e:	bf00      	nop

0800a780 <__default_zero_allocate>:
 800a780:	f009 bbd8 	b.w	8013f34 <calloc>

0800a784 <__default_reallocate>:
 800a784:	f009 bd64 	b.w	8014250 <realloc>

0800a788 <__default_deallocate>:
 800a788:	f009 bc40 	b.w	801400c <free>

0800a78c <__default_allocate>:
 800a78c:	f009 bc36 	b.w	8013ffc <malloc>

0800a790 <rcutils_get_zero_initialized_allocator>:
 800a790:	b510      	push	{r4, lr}
 800a792:	4c05      	ldr	r4, [pc, #20]	@ (800a7a8 <rcutils_get_zero_initialized_allocator+0x18>)
 800a794:	4686      	mov	lr, r0
 800a796:	4684      	mov	ip, r0
 800a798:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a79a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a79e:	6823      	ldr	r3, [r4, #0]
 800a7a0:	f8cc 3000 	str.w	r3, [ip]
 800a7a4:	4670      	mov	r0, lr
 800a7a6:	bd10      	pop	{r4, pc}
 800a7a8:	08015820 	.word	0x08015820

0800a7ac <rcutils_set_default_allocator>:
 800a7ac:	b1a8      	cbz	r0, 800a7da <rcutils_set_default_allocator+0x2e>
 800a7ae:	6802      	ldr	r2, [r0, #0]
 800a7b0:	b1a2      	cbz	r2, 800a7dc <rcutils_set_default_allocator+0x30>
 800a7b2:	6841      	ldr	r1, [r0, #4]
 800a7b4:	b1a1      	cbz	r1, 800a7e0 <rcutils_set_default_allocator+0x34>
 800a7b6:	b410      	push	{r4}
 800a7b8:	68c4      	ldr	r4, [r0, #12]
 800a7ba:	b164      	cbz	r4, 800a7d6 <rcutils_set_default_allocator+0x2a>
 800a7bc:	6880      	ldr	r0, [r0, #8]
 800a7be:	b138      	cbz	r0, 800a7d0 <rcutils_set_default_allocator+0x24>
 800a7c0:	4b08      	ldr	r3, [pc, #32]	@ (800a7e4 <rcutils_set_default_allocator+0x38>)
 800a7c2:	601a      	str	r2, [r3, #0]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800a7ca:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800a7ce:	2001      	movs	r0, #1
 800a7d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7d4:	4770      	bx	lr
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	e7fa      	b.n	800a7d0 <rcutils_set_default_allocator+0x24>
 800a7da:	4770      	bx	lr
 800a7dc:	4610      	mov	r0, r2
 800a7de:	4770      	bx	lr
 800a7e0:	4608      	mov	r0, r1
 800a7e2:	4770      	bx	lr
 800a7e4:	20000014 	.word	0x20000014

0800a7e8 <rcutils_get_default_allocator>:
 800a7e8:	b510      	push	{r4, lr}
 800a7ea:	4c05      	ldr	r4, [pc, #20]	@ (800a800 <rcutils_get_default_allocator+0x18>)
 800a7ec:	4686      	mov	lr, r0
 800a7ee:	4684      	mov	ip, r0
 800a7f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a7f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a7f6:	6823      	ldr	r3, [r4, #0]
 800a7f8:	f8cc 3000 	str.w	r3, [ip]
 800a7fc:	4670      	mov	r0, lr
 800a7fe:	bd10      	pop	{r4, pc}
 800a800:	20000014 	.word	0x20000014

0800a804 <rcutils_allocator_is_valid>:
 800a804:	b158      	cbz	r0, 800a81e <rcutils_allocator_is_valid+0x1a>
 800a806:	6803      	ldr	r3, [r0, #0]
 800a808:	b143      	cbz	r3, 800a81c <rcutils_allocator_is_valid+0x18>
 800a80a:	6843      	ldr	r3, [r0, #4]
 800a80c:	b133      	cbz	r3, 800a81c <rcutils_allocator_is_valid+0x18>
 800a80e:	68c3      	ldr	r3, [r0, #12]
 800a810:	b123      	cbz	r3, 800a81c <rcutils_allocator_is_valid+0x18>
 800a812:	6880      	ldr	r0, [r0, #8]
 800a814:	3800      	subs	r0, #0
 800a816:	bf18      	it	ne
 800a818:	2001      	movne	r0, #1
 800a81a:	4770      	bx	lr
 800a81c:	4618      	mov	r0, r3
 800a81e:	4770      	bx	lr

0800a820 <rcutils_get_error_string>:
 800a820:	4b06      	ldr	r3, [pc, #24]	@ (800a83c <rcutils_get_error_string+0x1c>)
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	b13b      	cbz	r3, 800a836 <rcutils_get_error_string+0x16>
 800a826:	4b06      	ldr	r3, [pc, #24]	@ (800a840 <rcutils_get_error_string+0x20>)
 800a828:	781a      	ldrb	r2, [r3, #0]
 800a82a:	b90a      	cbnz	r2, 800a830 <rcutils_get_error_string+0x10>
 800a82c:	2201      	movs	r2, #1
 800a82e:	701a      	strb	r2, [r3, #0]
 800a830:	4b04      	ldr	r3, [pc, #16]	@ (800a844 <rcutils_get_error_string+0x24>)
 800a832:	7818      	ldrb	r0, [r3, #0]
 800a834:	4770      	bx	lr
 800a836:	4b04      	ldr	r3, [pc, #16]	@ (800a848 <rcutils_get_error_string+0x28>)
 800a838:	7818      	ldrb	r0, [r3, #0]
 800a83a:	4770      	bx	lr
 800a83c:	200061f0 	.word	0x200061f0
 800a840:	20006209 	.word	0x20006209
 800a844:	20006208 	.word	0x20006208
 800a848:	08015834 	.word	0x08015834
 800a84c:	00000000 	.word	0x00000000

0800a850 <rcutils_reset_error>:
 800a850:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800a870 <rcutils_reset_error+0x20>
 800a854:	4a08      	ldr	r2, [pc, #32]	@ (800a878 <rcutils_reset_error+0x28>)
 800a856:	4809      	ldr	r0, [pc, #36]	@ (800a87c <rcutils_reset_error+0x2c>)
 800a858:	4909      	ldr	r1, [pc, #36]	@ (800a880 <rcutils_reset_error+0x30>)
 800a85a:	2300      	movs	r3, #0
 800a85c:	8013      	strh	r3, [r2, #0]
 800a85e:	ed82 7b02 	vstr	d7, [r2, #8]
 800a862:	4a08      	ldr	r2, [pc, #32]	@ (800a884 <rcutils_reset_error+0x34>)
 800a864:	7003      	strb	r3, [r0, #0]
 800a866:	700b      	strb	r3, [r1, #0]
 800a868:	7013      	strb	r3, [r2, #0]
 800a86a:	4770      	bx	lr
 800a86c:	f3af 8000 	nop.w
	...
 800a878:	200061f8 	.word	0x200061f8
 800a87c:	20006209 	.word	0x20006209
 800a880:	20006208 	.word	0x20006208
 800a884:	200061f0 	.word	0x200061f0

0800a888 <rcutils_system_time_now>:
 800a888:	b308      	cbz	r0, 800a8ce <rcutils_system_time_now+0x46>
 800a88a:	b570      	push	{r4, r5, r6, lr}
 800a88c:	b084      	sub	sp, #16
 800a88e:	4604      	mov	r4, r0
 800a890:	4669      	mov	r1, sp
 800a892:	2001      	movs	r0, #1
 800a894:	f7f6 fcf4 	bl	8001280 <clock_gettime>
 800a898:	e9dd 3500 	ldrd	r3, r5, [sp]
 800a89c:	2d00      	cmp	r5, #0
 800a89e:	db13      	blt.n	800a8c8 <rcutils_system_time_now+0x40>
 800a8a0:	9902      	ldr	r1, [sp, #8]
 800a8a2:	2900      	cmp	r1, #0
 800a8a4:	db0d      	blt.n	800a8c2 <rcutils_system_time_now+0x3a>
 800a8a6:	4e0b      	ldr	r6, [pc, #44]	@ (800a8d4 <rcutils_system_time_now+0x4c>)
 800a8a8:	fba3 3206 	umull	r3, r2, r3, r6
 800a8ac:	185b      	adds	r3, r3, r1
 800a8ae:	fb06 2205 	mla	r2, r6, r5, r2
 800a8b2:	f04f 0000 	mov.w	r0, #0
 800a8b6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800a8ba:	e9c4 3200 	strd	r3, r2, [r4]
 800a8be:	b004      	add	sp, #16
 800a8c0:	bd70      	pop	{r4, r5, r6, pc}
 800a8c2:	ea53 0205 	orrs.w	r2, r3, r5
 800a8c6:	d1ee      	bne.n	800a8a6 <rcutils_system_time_now+0x1e>
 800a8c8:	2002      	movs	r0, #2
 800a8ca:	b004      	add	sp, #16
 800a8cc:	bd70      	pop	{r4, r5, r6, pc}
 800a8ce:	200b      	movs	r0, #11
 800a8d0:	4770      	bx	lr
 800a8d2:	bf00      	nop
 800a8d4:	3b9aca00 	.word	0x3b9aca00

0800a8d8 <rcutils_steady_time_now>:
 800a8d8:	b308      	cbz	r0, 800a91e <rcutils_steady_time_now+0x46>
 800a8da:	b570      	push	{r4, r5, r6, lr}
 800a8dc:	b084      	sub	sp, #16
 800a8de:	4604      	mov	r4, r0
 800a8e0:	4669      	mov	r1, sp
 800a8e2:	2000      	movs	r0, #0
 800a8e4:	f7f6 fccc 	bl	8001280 <clock_gettime>
 800a8e8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800a8ec:	2d00      	cmp	r5, #0
 800a8ee:	db13      	blt.n	800a918 <rcutils_steady_time_now+0x40>
 800a8f0:	9902      	ldr	r1, [sp, #8]
 800a8f2:	2900      	cmp	r1, #0
 800a8f4:	db0d      	blt.n	800a912 <rcutils_steady_time_now+0x3a>
 800a8f6:	4e0b      	ldr	r6, [pc, #44]	@ (800a924 <rcutils_steady_time_now+0x4c>)
 800a8f8:	fba3 3206 	umull	r3, r2, r3, r6
 800a8fc:	185b      	adds	r3, r3, r1
 800a8fe:	fb06 2205 	mla	r2, r6, r5, r2
 800a902:	f04f 0000 	mov.w	r0, #0
 800a906:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800a90a:	e9c4 3200 	strd	r3, r2, [r4]
 800a90e:	b004      	add	sp, #16
 800a910:	bd70      	pop	{r4, r5, r6, pc}
 800a912:	ea53 0205 	orrs.w	r2, r3, r5
 800a916:	d1ee      	bne.n	800a8f6 <rcutils_steady_time_now+0x1e>
 800a918:	2002      	movs	r0, #2
 800a91a:	b004      	add	sp, #16
 800a91c:	bd70      	pop	{r4, r5, r6, pc}
 800a91e:	200b      	movs	r0, #11
 800a920:	4770      	bx	lr
 800a922:	bf00      	nop
 800a924:	3b9aca00 	.word	0x3b9aca00

0800a928 <rmw_get_zero_initialized_init_options>:
 800a928:	b510      	push	{r4, lr}
 800a92a:	2238      	movs	r2, #56	@ 0x38
 800a92c:	4604      	mov	r4, r0
 800a92e:	2100      	movs	r1, #0
 800a930:	f009 feea 	bl	8014708 <memset>
 800a934:	f104 0010 	add.w	r0, r4, #16
 800a938:	f000 f806 	bl	800a948 <rmw_get_default_security_options>
 800a93c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a940:	60e3      	str	r3, [r4, #12]
 800a942:	4620      	mov	r0, r4
 800a944:	bd10      	pop	{r4, pc}
 800a946:	bf00      	nop

0800a948 <rmw_get_default_security_options>:
 800a948:	2200      	movs	r2, #0
 800a94a:	7002      	strb	r2, [r0, #0]
 800a94c:	6042      	str	r2, [r0, #4]
 800a94e:	4770      	bx	lr

0800a950 <rmw_uros_set_custom_transport>:
 800a950:	b470      	push	{r4, r5, r6}
 800a952:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800a956:	b162      	cbz	r2, 800a972 <rmw_uros_set_custom_transport+0x22>
 800a958:	b15b      	cbz	r3, 800a972 <rmw_uros_set_custom_transport+0x22>
 800a95a:	b155      	cbz	r5, 800a972 <rmw_uros_set_custom_transport+0x22>
 800a95c:	b14e      	cbz	r6, 800a972 <rmw_uros_set_custom_transport+0x22>
 800a95e:	4c06      	ldr	r4, [pc, #24]	@ (800a978 <rmw_uros_set_custom_transport+0x28>)
 800a960:	7020      	strb	r0, [r4, #0]
 800a962:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800a966:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a96a:	6166      	str	r6, [r4, #20]
 800a96c:	2000      	movs	r0, #0
 800a96e:	bc70      	pop	{r4, r5, r6}
 800a970:	4770      	bx	lr
 800a972:	200b      	movs	r0, #11
 800a974:	bc70      	pop	{r4, r5, r6}
 800a976:	4770      	bx	lr
 800a978:	2000620c 	.word	0x2000620c

0800a97c <rmw_init_options_init>:
 800a97c:	b084      	sub	sp, #16
 800a97e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a980:	b083      	sub	sp, #12
 800a982:	ad09      	add	r5, sp, #36	@ 0x24
 800a984:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800a988:	b130      	cbz	r0, 800a998 <rmw_init_options_init+0x1c>
 800a98a:	4604      	mov	r4, r0
 800a98c:	4628      	mov	r0, r5
 800a98e:	f7ff ff39 	bl	800a804 <rcutils_allocator_is_valid>
 800a992:	b108      	cbz	r0, 800a998 <rmw_init_options_init+0x1c>
 800a994:	68a6      	ldr	r6, [r4, #8]
 800a996:	b12e      	cbz	r6, 800a9a4 <rmw_init_options_init+0x28>
 800a998:	200b      	movs	r0, #11
 800a99a:	b003      	add	sp, #12
 800a99c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a9a0:	b004      	add	sp, #16
 800a9a2:	4770      	bx	lr
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	e9c4 2300 	strd	r2, r3, [r4]
 800a9ac:	4b22      	ldr	r3, [pc, #136]	@ (800aa38 <rmw_init_options_init+0xbc>)
 800a9ae:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800aa48 <rmw_init_options_init+0xcc>
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	60a3      	str	r3, [r4, #8]
 800a9b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a9b8:	f104 0c20 	add.w	ip, r4, #32
 800a9bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a9c0:	466f      	mov	r7, sp
 800a9c2:	682b      	ldr	r3, [r5, #0]
 800a9c4:	f8cc 3000 	str.w	r3, [ip]
 800a9c8:	4638      	mov	r0, r7
 800a9ca:	f8c4 e01c 	str.w	lr, [r4, #28]
 800a9ce:	60e6      	str	r6, [r4, #12]
 800a9d0:	f7ff ffba 	bl	800a948 <rmw_get_default_security_options>
 800a9d4:	e897 0003 	ldmia.w	r7, {r0, r1}
 800a9d8:	f104 0310 	add.w	r3, r4, #16
 800a9dc:	e883 0003 	stmia.w	r3, {r0, r1}
 800a9e0:	2203      	movs	r2, #3
 800a9e2:	4816      	ldr	r0, [pc, #88]	@ (800aa3c <rmw_init_options_init+0xc0>)
 800a9e4:	4916      	ldr	r1, [pc, #88]	@ (800aa40 <rmw_init_options_init+0xc4>)
 800a9e6:	7626      	strb	r6, [r4, #24]
 800a9e8:	f000 fd6a 	bl	800b4c0 <rmw_uxrce_init_init_options_impl_memory>
 800a9ec:	4813      	ldr	r0, [pc, #76]	@ (800aa3c <rmw_init_options_init+0xc0>)
 800a9ee:	f006 fe47 	bl	8011680 <get_memory>
 800a9f2:	b1f0      	cbz	r0, 800aa32 <rmw_init_options_init+0xb6>
 800a9f4:	4a13      	ldr	r2, [pc, #76]	@ (800aa44 <rmw_init_options_init+0xc8>)
 800a9f6:	6883      	ldr	r3, [r0, #8]
 800a9f8:	6851      	ldr	r1, [r2, #4]
 800a9fa:	7810      	ldrb	r0, [r2, #0]
 800a9fc:	6363      	str	r3, [r4, #52]	@ 0x34
 800a9fe:	7418      	strb	r0, [r3, #16]
 800aa00:	6159      	str	r1, [r3, #20]
 800aa02:	68d1      	ldr	r1, [r2, #12]
 800aa04:	61d9      	str	r1, [r3, #28]
 800aa06:	6911      	ldr	r1, [r2, #16]
 800aa08:	6219      	str	r1, [r3, #32]
 800aa0a:	6951      	ldr	r1, [r2, #20]
 800aa0c:	6892      	ldr	r2, [r2, #8]
 800aa0e:	619a      	str	r2, [r3, #24]
 800aa10:	6259      	str	r1, [r3, #36]	@ 0x24
 800aa12:	f003 f8cb 	bl	800dbac <uxr_nanos>
 800aa16:	f009 fbaf 	bl	8014178 <srand>
 800aa1a:	f009 fbdb 	bl	80141d4 <rand>
 800aa1e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aa20:	6298      	str	r0, [r3, #40]	@ 0x28
 800aa22:	2800      	cmp	r0, #0
 800aa24:	d0f9      	beq.n	800aa1a <rmw_init_options_init+0x9e>
 800aa26:	2000      	movs	r0, #0
 800aa28:	b003      	add	sp, #12
 800aa2a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800aa2e:	b004      	add	sp, #16
 800aa30:	4770      	bx	lr
 800aa32:	2001      	movs	r0, #1
 800aa34:	e7b1      	b.n	800a99a <rmw_init_options_init+0x1e>
 800aa36:	bf00      	nop
 800aa38:	08015fac 	.word	0x08015fac
 800aa3c:	2000ab24 	.word	0x2000ab24
 800aa40:	200063c0 	.word	0x200063c0
 800aa44:	2000620c 	.word	0x2000620c
 800aa48:	08015838 	.word	0x08015838

0800aa4c <rmw_init_options_copy>:
 800aa4c:	b570      	push	{r4, r5, r6, lr}
 800aa4e:	b158      	cbz	r0, 800aa68 <rmw_init_options_copy+0x1c>
 800aa50:	460d      	mov	r5, r1
 800aa52:	b149      	cbz	r1, 800aa68 <rmw_init_options_copy+0x1c>
 800aa54:	4604      	mov	r4, r0
 800aa56:	6880      	ldr	r0, [r0, #8]
 800aa58:	b120      	cbz	r0, 800aa64 <rmw_init_options_copy+0x18>
 800aa5a:	4b1e      	ldr	r3, [pc, #120]	@ (800aad4 <rmw_init_options_copy+0x88>)
 800aa5c:	6819      	ldr	r1, [r3, #0]
 800aa5e:	f7f5 fbdf 	bl	8000220 <strcmp>
 800aa62:	bb90      	cbnz	r0, 800aaca <rmw_init_options_copy+0x7e>
 800aa64:	68ab      	ldr	r3, [r5, #8]
 800aa66:	b113      	cbz	r3, 800aa6e <rmw_init_options_copy+0x22>
 800aa68:	250b      	movs	r5, #11
 800aa6a:	4628      	mov	r0, r5
 800aa6c:	bd70      	pop	{r4, r5, r6, pc}
 800aa6e:	4623      	mov	r3, r4
 800aa70:	462a      	mov	r2, r5
 800aa72:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800aa76:	f8d3 c000 	ldr.w	ip, [r3]
 800aa7a:	6858      	ldr	r0, [r3, #4]
 800aa7c:	6899      	ldr	r1, [r3, #8]
 800aa7e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800aa82:	f8c2 e00c 	str.w	lr, [r2, #12]
 800aa86:	3310      	adds	r3, #16
 800aa88:	42b3      	cmp	r3, r6
 800aa8a:	f8c2 c000 	str.w	ip, [r2]
 800aa8e:	6050      	str	r0, [r2, #4]
 800aa90:	6091      	str	r1, [r2, #8]
 800aa92:	f102 0210 	add.w	r2, r2, #16
 800aa96:	d1ee      	bne.n	800aa76 <rmw_init_options_copy+0x2a>
 800aa98:	6819      	ldr	r1, [r3, #0]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	480e      	ldr	r0, [pc, #56]	@ (800aad8 <rmw_init_options_copy+0x8c>)
 800aa9e:	6053      	str	r3, [r2, #4]
 800aaa0:	6011      	str	r1, [r2, #0]
 800aaa2:	f006 fded 	bl	8011680 <get_memory>
 800aaa6:	b198      	cbz	r0, 800aad0 <rmw_init_options_copy+0x84>
 800aaa8:	6883      	ldr	r3, [r0, #8]
 800aaaa:	636b      	str	r3, [r5, #52]	@ 0x34
 800aaac:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800aaae:	f102 0c10 	add.w	ip, r2, #16
 800aab2:	f103 0410 	add.w	r4, r3, #16
 800aab6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aaba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aabc:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800aac0:	2500      	movs	r5, #0
 800aac2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aac6:	4628      	mov	r0, r5
 800aac8:	bd70      	pop	{r4, r5, r6, pc}
 800aaca:	250c      	movs	r5, #12
 800aacc:	4628      	mov	r0, r5
 800aace:	bd70      	pop	{r4, r5, r6, pc}
 800aad0:	2501      	movs	r5, #1
 800aad2:	e7ca      	b.n	800aa6a <rmw_init_options_copy+0x1e>
 800aad4:	08015fac 	.word	0x08015fac
 800aad8:	2000ab24 	.word	0x2000ab24

0800aadc <rmw_init_options_fini>:
 800aadc:	2800      	cmp	r0, #0
 800aade:	d03d      	beq.n	800ab5c <rmw_init_options_fini+0x80>
 800aae0:	b510      	push	{r4, lr}
 800aae2:	4604      	mov	r4, r0
 800aae4:	b08e      	sub	sp, #56	@ 0x38
 800aae6:	3020      	adds	r0, #32
 800aae8:	f7ff fe8c 	bl	800a804 <rcutils_allocator_is_valid>
 800aaec:	b360      	cbz	r0, 800ab48 <rmw_init_options_fini+0x6c>
 800aaee:	68a0      	ldr	r0, [r4, #8]
 800aaf0:	b120      	cbz	r0, 800aafc <rmw_init_options_fini+0x20>
 800aaf2:	4b1c      	ldr	r3, [pc, #112]	@ (800ab64 <rmw_init_options_fini+0x88>)
 800aaf4:	6819      	ldr	r1, [r3, #0]
 800aaf6:	f7f5 fb93 	bl	8000220 <strcmp>
 800aafa:	bb68      	cbnz	r0, 800ab58 <rmw_init_options_fini+0x7c>
 800aafc:	4b1a      	ldr	r3, [pc, #104]	@ (800ab68 <rmw_init_options_fini+0x8c>)
 800aafe:	6819      	ldr	r1, [r3, #0]
 800ab00:	b331      	cbz	r1, 800ab50 <rmw_init_options_fini+0x74>
 800ab02:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800ab04:	e001      	b.n	800ab0a <rmw_init_options_fini+0x2e>
 800ab06:	6849      	ldr	r1, [r1, #4]
 800ab08:	b311      	cbz	r1, 800ab50 <rmw_init_options_fini+0x74>
 800ab0a:	688b      	ldr	r3, [r1, #8]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d1fa      	bne.n	800ab06 <rmw_init_options_fini+0x2a>
 800ab10:	4815      	ldr	r0, [pc, #84]	@ (800ab68 <rmw_init_options_fini+0x8c>)
 800ab12:	f006 fdc5 	bl	80116a0 <put_memory>
 800ab16:	4668      	mov	r0, sp
 800ab18:	f7ff ff06 	bl	800a928 <rmw_get_zero_initialized_init_options>
 800ab1c:	46ee      	mov	lr, sp
 800ab1e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ab22:	46a4      	mov	ip, r4
 800ab24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ab28:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ab2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ab30:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ab34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ab38:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ab3c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ab40:	2300      	movs	r3, #0
 800ab42:	4618      	mov	r0, r3
 800ab44:	b00e      	add	sp, #56	@ 0x38
 800ab46:	bd10      	pop	{r4, pc}
 800ab48:	230b      	movs	r3, #11
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	b00e      	add	sp, #56	@ 0x38
 800ab4e:	bd10      	pop	{r4, pc}
 800ab50:	2301      	movs	r3, #1
 800ab52:	4618      	mov	r0, r3
 800ab54:	b00e      	add	sp, #56	@ 0x38
 800ab56:	bd10      	pop	{r4, pc}
 800ab58:	230c      	movs	r3, #12
 800ab5a:	e7f2      	b.n	800ab42 <rmw_init_options_fini+0x66>
 800ab5c:	230b      	movs	r3, #11
 800ab5e:	4618      	mov	r0, r3
 800ab60:	4770      	bx	lr
 800ab62:	bf00      	nop
 800ab64:	08015fac 	.word	0x08015fac
 800ab68:	2000ab24 	.word	0x2000ab24

0800ab6c <rmw_init>:
 800ab6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab70:	b083      	sub	sp, #12
 800ab72:	2800      	cmp	r0, #0
 800ab74:	f000 80d3 	beq.w	800ad1e <rmw_init+0x1b2>
 800ab78:	460e      	mov	r6, r1
 800ab7a:	2900      	cmp	r1, #0
 800ab7c:	f000 80cf 	beq.w	800ad1e <rmw_init+0x1b2>
 800ab80:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ab82:	4605      	mov	r5, r0
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	f000 80ca 	beq.w	800ad1e <rmw_init+0x1b2>
 800ab8a:	4b78      	ldr	r3, [pc, #480]	@ (800ad6c <rmw_init+0x200>)
 800ab8c:	6880      	ldr	r0, [r0, #8]
 800ab8e:	681f      	ldr	r7, [r3, #0]
 800ab90:	b128      	cbz	r0, 800ab9e <rmw_init+0x32>
 800ab92:	4639      	mov	r1, r7
 800ab94:	f7f5 fb44 	bl	8000220 <strcmp>
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	f040 80ca 	bne.w	800ad32 <rmw_init+0x1c6>
 800ab9e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aba2:	4c73      	ldr	r4, [pc, #460]	@ (800ad70 <rmw_init+0x204>)
 800aba4:	4973      	ldr	r1, [pc, #460]	@ (800ad74 <rmw_init+0x208>)
 800aba6:	4874      	ldr	r0, [pc, #464]	@ (800ad78 <rmw_init+0x20c>)
 800aba8:	60b7      	str	r7, [r6, #8]
 800abaa:	e9c6 2300 	strd	r2, r3, [r6]
 800abae:	68eb      	ldr	r3, [r5, #12]
 800abb0:	64b3      	str	r3, [r6, #72]	@ 0x48
 800abb2:	2201      	movs	r2, #1
 800abb4:	f000 fc24 	bl	800b400 <rmw_uxrce_init_session_memory>
 800abb8:	4620      	mov	r0, r4
 800abba:	4970      	ldr	r1, [pc, #448]	@ (800ad7c <rmw_init+0x210>)
 800abbc:	2204      	movs	r2, #4
 800abbe:	f000 fc5f 	bl	800b480 <rmw_uxrce_init_static_input_buffer_memory>
 800abc2:	f04f 0800 	mov.w	r8, #0
 800abc6:	486c      	ldr	r0, [pc, #432]	@ (800ad78 <rmw_init+0x20c>)
 800abc8:	f884 800d 	strb.w	r8, [r4, #13]
 800abcc:	f006 fd58 	bl	8011680 <get_memory>
 800abd0:	2800      	cmp	r0, #0
 800abd2:	f000 80a9 	beq.w	800ad28 <rmw_init+0x1bc>
 800abd6:	6884      	ldr	r4, [r0, #8]
 800abd8:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800abda:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800abdc:	f890 c010 	ldrb.w	ip, [r0, #16]
 800abe0:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800abe4:	9101      	str	r1, [sp, #4]
 800abe6:	6a00      	ldr	r0, [r0, #32]
 800abe8:	9000      	str	r0, [sp, #0]
 800abea:	f104 0910 	add.w	r9, r4, #16
 800abee:	4661      	mov	r1, ip
 800abf0:	4648      	mov	r0, r9
 800abf2:	f000 ff5f 	bl	800bab4 <uxr_set_custom_transport_callbacks>
 800abf6:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800abfa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800abfe:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800ac02:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800ac06:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800ac0a:	495d      	ldr	r1, [pc, #372]	@ (800ad80 <rmw_init+0x214>)
 800ac0c:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800ac10:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800ac14:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800ac18:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800ac1c:	4859      	ldr	r0, [pc, #356]	@ (800ad84 <rmw_init+0x218>)
 800ac1e:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800ac22:	2201      	movs	r2, #1
 800ac24:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800ac26:	f000 fbcb 	bl	800b3c0 <rmw_uxrce_init_node_memory>
 800ac2a:	4957      	ldr	r1, [pc, #348]	@ (800ad88 <rmw_init+0x21c>)
 800ac2c:	4857      	ldr	r0, [pc, #348]	@ (800ad8c <rmw_init+0x220>)
 800ac2e:	2205      	movs	r2, #5
 800ac30:	f000 fba6 	bl	800b380 <rmw_uxrce_init_subscription_memory>
 800ac34:	4956      	ldr	r1, [pc, #344]	@ (800ad90 <rmw_init+0x224>)
 800ac36:	4857      	ldr	r0, [pc, #348]	@ (800ad94 <rmw_init+0x228>)
 800ac38:	220a      	movs	r2, #10
 800ac3a:	f000 fb81 	bl	800b340 <rmw_uxrce_init_publisher_memory>
 800ac3e:	4956      	ldr	r1, [pc, #344]	@ (800ad98 <rmw_init+0x22c>)
 800ac40:	4856      	ldr	r0, [pc, #344]	@ (800ad9c <rmw_init+0x230>)
 800ac42:	2201      	movs	r2, #1
 800ac44:	f000 fb3c 	bl	800b2c0 <rmw_uxrce_init_service_memory>
 800ac48:	4955      	ldr	r1, [pc, #340]	@ (800ada0 <rmw_init+0x234>)
 800ac4a:	4856      	ldr	r0, [pc, #344]	@ (800ada4 <rmw_init+0x238>)
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	f000 fb57 	bl	800b300 <rmw_uxrce_init_client_memory>
 800ac52:	4955      	ldr	r1, [pc, #340]	@ (800ada8 <rmw_init+0x23c>)
 800ac54:	4855      	ldr	r0, [pc, #340]	@ (800adac <rmw_init+0x240>)
 800ac56:	220f      	movs	r2, #15
 800ac58:	f000 fbf2 	bl	800b440 <rmw_uxrce_init_topic_memory>
 800ac5c:	4954      	ldr	r1, [pc, #336]	@ (800adb0 <rmw_init+0x244>)
 800ac5e:	4855      	ldr	r0, [pc, #340]	@ (800adb4 <rmw_init+0x248>)
 800ac60:	2203      	movs	r2, #3
 800ac62:	f000 fc2d 	bl	800b4c0 <rmw_uxrce_init_init_options_impl_memory>
 800ac66:	4954      	ldr	r1, [pc, #336]	@ (800adb8 <rmw_init+0x24c>)
 800ac68:	4854      	ldr	r0, [pc, #336]	@ (800adbc <rmw_init+0x250>)
 800ac6a:	2204      	movs	r2, #4
 800ac6c:	f000 fc48 	bl	800b500 <rmw_uxrce_init_wait_set_memory>
 800ac70:	4953      	ldr	r1, [pc, #332]	@ (800adc0 <rmw_init+0x254>)
 800ac72:	4854      	ldr	r0, [pc, #336]	@ (800adc4 <rmw_init+0x258>)
 800ac74:	2204      	movs	r2, #4
 800ac76:	f000 fc63 	bl	800b540 <rmw_uxrce_init_guard_condition_memory>
 800ac7a:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800ac7c:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800ac7e:	4642      	mov	r2, r8
 800ac80:	f000 fae6 	bl	800b250 <rmw_uxrce_transport_init>
 800ac84:	4607      	mov	r7, r0
 800ac86:	2800      	cmp	r0, #0
 800ac88:	d158      	bne.n	800ad3c <rmw_init+0x1d0>
 800ac8a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800ac8c:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800ac90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ac92:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800ac96:	4628      	mov	r0, r5
 800ac98:	f001 f906 	bl	800bea8 <uxr_init_session>
 800ac9c:	494a      	ldr	r1, [pc, #296]	@ (800adc8 <rmw_init+0x25c>)
 800ac9e:	4622      	mov	r2, r4
 800aca0:	4628      	mov	r0, r5
 800aca2:	f001 f925 	bl	800bef0 <uxr_set_topic_callback>
 800aca6:	4949      	ldr	r1, [pc, #292]	@ (800adcc <rmw_init+0x260>)
 800aca8:	463a      	mov	r2, r7
 800acaa:	4628      	mov	r0, r5
 800acac:	f001 f91c 	bl	800bee8 <uxr_set_status_callback>
 800acb0:	4947      	ldr	r1, [pc, #284]	@ (800add0 <rmw_init+0x264>)
 800acb2:	463a      	mov	r2, r7
 800acb4:	4628      	mov	r0, r5
 800acb6:	f001 f91f 	bl	800bef8 <uxr_set_request_callback>
 800acba:	4946      	ldr	r1, [pc, #280]	@ (800add4 <rmw_init+0x268>)
 800acbc:	463a      	mov	r2, r7
 800acbe:	4628      	mov	r0, r5
 800acc0:	f001 f91e 	bl	800bf00 <uxr_set_reply_callback>
 800acc4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800acc8:	2304      	movs	r3, #4
 800acca:	0092      	lsls	r2, r2, #2
 800accc:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800acd0:	4628      	mov	r0, r5
 800acd2:	f001 f953 	bl	800bf7c <uxr_create_input_reliable_stream>
 800acd6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800acda:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800acde:	0092      	lsls	r2, r2, #2
 800ace0:	2304      	movs	r3, #4
 800ace2:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800ace6:	4628      	mov	r0, r5
 800ace8:	f001 f920 	bl	800bf2c <uxr_create_output_reliable_stream>
 800acec:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800acf0:	4628      	mov	r0, r5
 800acf2:	f001 f93d 	bl	800bf70 <uxr_create_input_best_effort_stream>
 800acf6:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800acfa:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800acfe:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800ad02:	3114      	adds	r1, #20
 800ad04:	4628      	mov	r0, r5
 800ad06:	f001 f8ff 	bl	800bf08 <uxr_create_output_best_effort_stream>
 800ad0a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800ad0e:	4628      	mov	r0, r5
 800ad10:	f001 fede 	bl	800cad0 <uxr_create_session>
 800ad14:	b1f8      	cbz	r0, 800ad56 <rmw_init+0x1ea>
 800ad16:	4638      	mov	r0, r7
 800ad18:	b003      	add	sp, #12
 800ad1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad1e:	270b      	movs	r7, #11
 800ad20:	4638      	mov	r0, r7
 800ad22:	b003      	add	sp, #12
 800ad24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad28:	2701      	movs	r7, #1
 800ad2a:	4638      	mov	r0, r7
 800ad2c:	b003      	add	sp, #12
 800ad2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad32:	270c      	movs	r7, #12
 800ad34:	4638      	mov	r0, r7
 800ad36:	b003      	add	sp, #12
 800ad38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad3c:	4648      	mov	r0, r9
 800ad3e:	f000 fefb 	bl	800bb38 <uxr_close_custom_transport>
 800ad42:	480d      	ldr	r0, [pc, #52]	@ (800ad78 <rmw_init+0x20c>)
 800ad44:	4621      	mov	r1, r4
 800ad46:	f006 fcab 	bl	80116a0 <put_memory>
 800ad4a:	4638      	mov	r0, r7
 800ad4c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800ad50:	b003      	add	sp, #12
 800ad52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad56:	4648      	mov	r0, r9
 800ad58:	f000 feee 	bl	800bb38 <uxr_close_custom_transport>
 800ad5c:	4806      	ldr	r0, [pc, #24]	@ (800ad78 <rmw_init+0x20c>)
 800ad5e:	4621      	mov	r1, r4
 800ad60:	f006 fc9e 	bl	80116a0 <put_memory>
 800ad64:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800ad66:	2701      	movs	r7, #1
 800ad68:	e7d5      	b.n	800ad16 <rmw_init+0x1aa>
 800ad6a:	bf00      	nop
 800ad6c:	08015fac 	.word	0x08015fac
 800ad70:	2000ab74 	.word	0x2000ab74
 800ad74:	20006e20 	.word	0x20006e20
 800ad78:	2000ab64 	.word	0x2000ab64
 800ad7c:	200083c8 	.word	0x200083c8
 800ad80:	20006444 	.word	0x20006444
 800ad84:	2000ab34 	.word	0x2000ab34
 800ad88:	2000a4c8 	.word	0x2000a4c8
 800ad8c:	2000ab84 	.word	0x2000ab84
 800ad90:	200064e8 	.word	0x200064e8
 800ad94:	2000ab44 	.word	0x2000ab44
 800ad98:	20006d58 	.word	0x20006d58
 800ad9c:	2000ab54 	.word	0x2000ab54
 800ada0:	20006278 	.word	0x20006278
 800ada4:	20006264 	.word	0x20006264
 800ada8:	2000a900 	.word	0x2000a900
 800adac:	2000ab94 	.word	0x2000ab94
 800adb0:	200063c0 	.word	0x200063c0
 800adb4:	2000ab24 	.word	0x2000ab24
 800adb8:	2000aaa4 	.word	0x2000aaa4
 800adbc:	2000aba4 	.word	0x2000aba4
 800adc0:	20006340 	.word	0x20006340
 800adc4:	2000ab14 	.word	0x2000ab14
 800adc8:	080114b9 	.word	0x080114b9
 800adcc:	080114b1 	.word	0x080114b1
 800add0:	08011551 	.word	0x08011551
 800add4:	080115ed 	.word	0x080115ed

0800add8 <rmw_context_fini>:
 800add8:	4b17      	ldr	r3, [pc, #92]	@ (800ae38 <rmw_context_fini+0x60>)
 800adda:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800addc:	b570      	push	{r4, r5, r6, lr}
 800adde:	681c      	ldr	r4, [r3, #0]
 800ade0:	4605      	mov	r5, r0
 800ade2:	b334      	cbz	r4, 800ae32 <rmw_context_fini+0x5a>
 800ade4:	2600      	movs	r6, #0
 800ade6:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800adea:	6902      	ldr	r2, [r0, #16]
 800adec:	428a      	cmp	r2, r1
 800adee:	d018      	beq.n	800ae22 <rmw_context_fini+0x4a>
 800adf0:	2c00      	cmp	r4, #0
 800adf2:	d1f8      	bne.n	800ade6 <rmw_context_fini+0xe>
 800adf4:	b189      	cbz	r1, 800ae1a <rmw_context_fini+0x42>
 800adf6:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800adfa:	789b      	ldrb	r3, [r3, #2]
 800adfc:	2b01      	cmp	r3, #1
 800adfe:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800ae02:	bf14      	ite	ne
 800ae04:	210a      	movne	r1, #10
 800ae06:	2100      	moveq	r1, #0
 800ae08:	f001 fe3a 	bl	800ca80 <uxr_delete_session_retries>
 800ae0c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800ae0e:	f000 fbb7 	bl	800b580 <rmw_uxrce_fini_session_memory>
 800ae12:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800ae14:	3010      	adds	r0, #16
 800ae16:	f000 fe8f 	bl	800bb38 <uxr_close_custom_transport>
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800ae1e:	4630      	mov	r0, r6
 800ae20:	bd70      	pop	{r4, r5, r6, pc}
 800ae22:	3018      	adds	r0, #24
 800ae24:	f000 f89c 	bl	800af60 <rmw_destroy_node>
 800ae28:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800ae2a:	4606      	mov	r6, r0
 800ae2c:	2c00      	cmp	r4, #0
 800ae2e:	d1da      	bne.n	800ade6 <rmw_context_fini+0xe>
 800ae30:	e7e0      	b.n	800adf4 <rmw_context_fini+0x1c>
 800ae32:	4626      	mov	r6, r4
 800ae34:	e7de      	b.n	800adf4 <rmw_context_fini+0x1c>
 800ae36:	bf00      	nop
 800ae38:	2000ab34 	.word	0x2000ab34

0800ae3c <create_node>:
 800ae3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae40:	b083      	sub	sp, #12
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d05f      	beq.n	800af06 <create_node+0xca>
 800ae46:	4606      	mov	r6, r0
 800ae48:	4835      	ldr	r0, [pc, #212]	@ (800af20 <create_node+0xe4>)
 800ae4a:	460f      	mov	r7, r1
 800ae4c:	4690      	mov	r8, r2
 800ae4e:	461d      	mov	r5, r3
 800ae50:	f006 fc16 	bl	8011680 <get_memory>
 800ae54:	2800      	cmp	r0, #0
 800ae56:	d056      	beq.n	800af06 <create_node+0xca>
 800ae58:	6884      	ldr	r4, [r0, #8]
 800ae5a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800ae5c:	6123      	str	r3, [r4, #16]
 800ae5e:	f006 fc77 	bl	8011750 <rmw_get_implementation_identifier>
 800ae62:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800ae66:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800ae6a:	f8c4 9020 	str.w	r9, [r4, #32]
 800ae6e:	4630      	mov	r0, r6
 800ae70:	f7f5 f9e0 	bl	8000234 <strlen>
 800ae74:	1c42      	adds	r2, r0, #1
 800ae76:	2a3c      	cmp	r2, #60	@ 0x3c
 800ae78:	f104 0518 	add.w	r5, r4, #24
 800ae7c:	d840      	bhi.n	800af00 <create_node+0xc4>
 800ae7e:	4648      	mov	r0, r9
 800ae80:	4631      	mov	r1, r6
 800ae82:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800ae86:	f009 fd32 	bl	80148ee <memcpy>
 800ae8a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800ae8e:	4638      	mov	r0, r7
 800ae90:	f7f5 f9d0 	bl	8000234 <strlen>
 800ae94:	1c42      	adds	r2, r0, #1
 800ae96:	2a3c      	cmp	r2, #60	@ 0x3c
 800ae98:	d832      	bhi.n	800af00 <create_node+0xc4>
 800ae9a:	4639      	mov	r1, r7
 800ae9c:	4648      	mov	r0, r9
 800ae9e:	f009 fd26 	bl	80148ee <memcpy>
 800aea2:	6923      	ldr	r3, [r4, #16]
 800aea4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aea8:	2101      	movs	r1, #1
 800aeaa:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800aeae:	1842      	adds	r2, r0, r1
 800aeb0:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800aeb4:	f000 fe44 	bl	800bb40 <uxr_object_id>
 800aeb8:	6160      	str	r0, [r4, #20]
 800aeba:	783b      	ldrb	r3, [r7, #0]
 800aebc:	2b2f      	cmp	r3, #47	@ 0x2f
 800aebe:	d127      	bne.n	800af10 <create_node+0xd4>
 800aec0:	787b      	ldrb	r3, [r7, #1]
 800aec2:	bb2b      	cbnz	r3, 800af10 <create_node+0xd4>
 800aec4:	4a17      	ldr	r2, [pc, #92]	@ (800af24 <create_node+0xe8>)
 800aec6:	4818      	ldr	r0, [pc, #96]	@ (800af28 <create_node+0xec>)
 800aec8:	4633      	mov	r3, r6
 800aeca:	213c      	movs	r1, #60	@ 0x3c
 800aecc:	f009 fb42 	bl	8014554 <sniprintf>
 800aed0:	6920      	ldr	r0, [r4, #16]
 800aed2:	4915      	ldr	r1, [pc, #84]	@ (800af28 <create_node+0xec>)
 800aed4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800aed8:	9100      	str	r1, [sp, #0]
 800aeda:	2106      	movs	r1, #6
 800aedc:	9101      	str	r1, [sp, #4]
 800aede:	6811      	ldr	r1, [r2, #0]
 800aee0:	6962      	ldr	r2, [r4, #20]
 800aee2:	fa1f f388 	uxth.w	r3, r8
 800aee6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800aeea:	f000 fd35 	bl	800b958 <uxr_buffer_create_participant_bin>
 800aeee:	4602      	mov	r2, r0
 800aef0:	6920      	ldr	r0, [r4, #16]
 800aef2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800aef6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800aefa:	f000 fcb7 	bl	800b86c <run_xrce_session>
 800aefe:	b918      	cbnz	r0, 800af08 <create_node+0xcc>
 800af00:	4628      	mov	r0, r5
 800af02:	f000 fb43 	bl	800b58c <rmw_uxrce_fini_node_memory>
 800af06:	2500      	movs	r5, #0
 800af08:	4628      	mov	r0, r5
 800af0a:	b003      	add	sp, #12
 800af0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af10:	4a06      	ldr	r2, [pc, #24]	@ (800af2c <create_node+0xf0>)
 800af12:	9600      	str	r6, [sp, #0]
 800af14:	463b      	mov	r3, r7
 800af16:	213c      	movs	r1, #60	@ 0x3c
 800af18:	4803      	ldr	r0, [pc, #12]	@ (800af28 <create_node+0xec>)
 800af1a:	f009 fb1b 	bl	8014554 <sniprintf>
 800af1e:	e7d7      	b.n	800aed0 <create_node+0x94>
 800af20:	2000ab34 	.word	0x2000ab34
 800af24:	08015a68 	.word	0x08015a68
 800af28:	20006228 	.word	0x20006228
 800af2c:	0801583c 	.word	0x0801583c

0800af30 <rmw_create_node>:
 800af30:	b199      	cbz	r1, 800af5a <rmw_create_node+0x2a>
 800af32:	780b      	ldrb	r3, [r1, #0]
 800af34:	468c      	mov	ip, r1
 800af36:	b183      	cbz	r3, 800af5a <rmw_create_node+0x2a>
 800af38:	b410      	push	{r4}
 800af3a:	4614      	mov	r4, r2
 800af3c:	b14a      	cbz	r2, 800af52 <rmw_create_node+0x22>
 800af3e:	7813      	ldrb	r3, [r2, #0]
 800af40:	b13b      	cbz	r3, 800af52 <rmw_create_node+0x22>
 800af42:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800af44:	4603      	mov	r3, r0
 800af46:	4621      	mov	r1, r4
 800af48:	4660      	mov	r0, ip
 800af4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af4e:	f7ff bf75 	b.w	800ae3c <create_node>
 800af52:	2000      	movs	r0, #0
 800af54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af58:	4770      	bx	lr
 800af5a:	2000      	movs	r0, #0
 800af5c:	4770      	bx	lr
 800af5e:	bf00      	nop

0800af60 <rmw_destroy_node>:
 800af60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af62:	b328      	cbz	r0, 800afb0 <rmw_destroy_node+0x50>
 800af64:	4607      	mov	r7, r0
 800af66:	6800      	ldr	r0, [r0, #0]
 800af68:	b120      	cbz	r0, 800af74 <rmw_destroy_node+0x14>
 800af6a:	4b36      	ldr	r3, [pc, #216]	@ (800b044 <rmw_destroy_node+0xe4>)
 800af6c:	6819      	ldr	r1, [r3, #0]
 800af6e:	f7f5 f957 	bl	8000220 <strcmp>
 800af72:	b9e8      	cbnz	r0, 800afb0 <rmw_destroy_node+0x50>
 800af74:	687d      	ldr	r5, [r7, #4]
 800af76:	b1dd      	cbz	r5, 800afb0 <rmw_destroy_node+0x50>
 800af78:	4b33      	ldr	r3, [pc, #204]	@ (800b048 <rmw_destroy_node+0xe8>)
 800af7a:	681c      	ldr	r4, [r3, #0]
 800af7c:	2c00      	cmp	r4, #0
 800af7e:	d05f      	beq.n	800b040 <rmw_destroy_node+0xe0>
 800af80:	2600      	movs	r6, #0
 800af82:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800af86:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800af8a:	429d      	cmp	r5, r3
 800af8c:	d013      	beq.n	800afb6 <rmw_destroy_node+0x56>
 800af8e:	2c00      	cmp	r4, #0
 800af90:	d1f7      	bne.n	800af82 <rmw_destroy_node+0x22>
 800af92:	4b2e      	ldr	r3, [pc, #184]	@ (800b04c <rmw_destroy_node+0xec>)
 800af94:	681c      	ldr	r4, [r3, #0]
 800af96:	b1c4      	cbz	r4, 800afca <rmw_destroy_node+0x6a>
 800af98:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800af9c:	6a0b      	ldr	r3, [r1, #32]
 800af9e:	429d      	cmp	r5, r3
 800afa0:	d1f9      	bne.n	800af96 <rmw_destroy_node+0x36>
 800afa2:	317c      	adds	r1, #124	@ 0x7c
 800afa4:	4638      	mov	r0, r7
 800afa6:	f000 f8f3 	bl	800b190 <rmw_destroy_subscription>
 800afaa:	2801      	cmp	r0, #1
 800afac:	4606      	mov	r6, r0
 800afae:	d1f2      	bne.n	800af96 <rmw_destroy_node+0x36>
 800afb0:	2601      	movs	r6, #1
 800afb2:	4630      	mov	r0, r6
 800afb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afb6:	3184      	adds	r1, #132	@ 0x84
 800afb8:	4638      	mov	r0, r7
 800afba:	f000 f853 	bl	800b064 <rmw_destroy_publisher>
 800afbe:	2801      	cmp	r0, #1
 800afc0:	4606      	mov	r6, r0
 800afc2:	d0f5      	beq.n	800afb0 <rmw_destroy_node+0x50>
 800afc4:	2c00      	cmp	r4, #0
 800afc6:	d1dc      	bne.n	800af82 <rmw_destroy_node+0x22>
 800afc8:	e7e3      	b.n	800af92 <rmw_destroy_node+0x32>
 800afca:	4b21      	ldr	r3, [pc, #132]	@ (800b050 <rmw_destroy_node+0xf0>)
 800afcc:	681c      	ldr	r4, [r3, #0]
 800afce:	b16c      	cbz	r4, 800afec <rmw_destroy_node+0x8c>
 800afd0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800afd4:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800afd6:	429d      	cmp	r5, r3
 800afd8:	d1f9      	bne.n	800afce <rmw_destroy_node+0x6e>
 800afda:	317c      	adds	r1, #124	@ 0x7c
 800afdc:	4638      	mov	r0, r7
 800afde:	f000 f893 	bl	800b108 <rmw_destroy_service>
 800afe2:	2801      	cmp	r0, #1
 800afe4:	4606      	mov	r6, r0
 800afe6:	d0e3      	beq.n	800afb0 <rmw_destroy_node+0x50>
 800afe8:	2c00      	cmp	r4, #0
 800afea:	d1f1      	bne.n	800afd0 <rmw_destroy_node+0x70>
 800afec:	4b19      	ldr	r3, [pc, #100]	@ (800b054 <rmw_destroy_node+0xf4>)
 800afee:	681c      	ldr	r4, [r3, #0]
 800aff0:	b16c      	cbz	r4, 800b00e <rmw_destroy_node+0xae>
 800aff2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800aff6:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800aff8:	429d      	cmp	r5, r3
 800affa:	d1f9      	bne.n	800aff0 <rmw_destroy_node+0x90>
 800affc:	317c      	adds	r1, #124	@ 0x7c
 800affe:	4638      	mov	r0, r7
 800b000:	f006 fb62 	bl	80116c8 <rmw_destroy_client>
 800b004:	2801      	cmp	r0, #1
 800b006:	4606      	mov	r6, r0
 800b008:	d0d2      	beq.n	800afb0 <rmw_destroy_node+0x50>
 800b00a:	2c00      	cmp	r4, #0
 800b00c:	d1f1      	bne.n	800aff2 <rmw_destroy_node+0x92>
 800b00e:	6928      	ldr	r0, [r5, #16]
 800b010:	696a      	ldr	r2, [r5, #20]
 800b012:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800b016:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b01a:	6819      	ldr	r1, [r3, #0]
 800b01c:	f000 fc50 	bl	800b8c0 <uxr_buffer_delete_entity>
 800b020:	4602      	mov	r2, r0
 800b022:	6928      	ldr	r0, [r5, #16]
 800b024:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800b028:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800b02c:	f000 fc1e 	bl	800b86c <run_xrce_session>
 800b030:	2800      	cmp	r0, #0
 800b032:	bf08      	it	eq
 800b034:	2602      	moveq	r6, #2
 800b036:	4638      	mov	r0, r7
 800b038:	f000 faa8 	bl	800b58c <rmw_uxrce_fini_node_memory>
 800b03c:	4630      	mov	r0, r6
 800b03e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b040:	4626      	mov	r6, r4
 800b042:	e7a6      	b.n	800af92 <rmw_destroy_node+0x32>
 800b044:	08015fac 	.word	0x08015fac
 800b048:	2000ab44 	.word	0x2000ab44
 800b04c:	2000ab84 	.word	0x2000ab84
 800b050:	2000ab54 	.word	0x2000ab54
 800b054:	20006264 	.word	0x20006264

0800b058 <rmw_node_get_graph_guard_condition>:
 800b058:	6843      	ldr	r3, [r0, #4]
 800b05a:	6918      	ldr	r0, [r3, #16]
 800b05c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800b060:	4770      	bx	lr
 800b062:	bf00      	nop

0800b064 <rmw_destroy_publisher>:
 800b064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b066:	b128      	cbz	r0, 800b074 <rmw_destroy_publisher+0x10>
 800b068:	4604      	mov	r4, r0
 800b06a:	6800      	ldr	r0, [r0, #0]
 800b06c:	460d      	mov	r5, r1
 800b06e:	f000 fc19 	bl	800b8a4 <is_uxrce_rmw_identifier_valid>
 800b072:	b910      	cbnz	r0, 800b07a <rmw_destroy_publisher+0x16>
 800b074:	2401      	movs	r4, #1
 800b076:	4620      	mov	r0, r4
 800b078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b07a:	6863      	ldr	r3, [r4, #4]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d0f9      	beq.n	800b074 <rmw_destroy_publisher+0x10>
 800b080:	2d00      	cmp	r5, #0
 800b082:	d0f7      	beq.n	800b074 <rmw_destroy_publisher+0x10>
 800b084:	6828      	ldr	r0, [r5, #0]
 800b086:	f000 fc0d 	bl	800b8a4 <is_uxrce_rmw_identifier_valid>
 800b08a:	2800      	cmp	r0, #0
 800b08c:	d0f2      	beq.n	800b074 <rmw_destroy_publisher+0x10>
 800b08e:	686c      	ldr	r4, [r5, #4]
 800b090:	2c00      	cmp	r4, #0
 800b092:	d0ef      	beq.n	800b074 <rmw_destroy_publisher+0x10>
 800b094:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800b096:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800b09a:	f006 fb5f 	bl	801175c <destroy_topic>
 800b09e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800b0a2:	6962      	ldr	r2, [r4, #20]
 800b0a4:	6918      	ldr	r0, [r3, #16]
 800b0a6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800b0aa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b0ae:	6819      	ldr	r1, [r3, #0]
 800b0b0:	f000 fc06 	bl	800b8c0 <uxr_buffer_delete_entity>
 800b0b4:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800b0b8:	6922      	ldr	r2, [r4, #16]
 800b0ba:	691b      	ldr	r3, [r3, #16]
 800b0bc:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800b0c0:	4604      	mov	r4, r0
 800b0c2:	6809      	ldr	r1, [r1, #0]
 800b0c4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800b0c8:	f000 fbfa 	bl	800b8c0 <uxr_buffer_delete_entity>
 800b0cc:	693e      	ldr	r6, [r7, #16]
 800b0ce:	4622      	mov	r2, r4
 800b0d0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800b0d4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800b0d8:	4604      	mov	r4, r0
 800b0da:	4630      	mov	r0, r6
 800b0dc:	f000 fbc6 	bl	800b86c <run_xrce_session>
 800b0e0:	693e      	ldr	r6, [r7, #16]
 800b0e2:	4622      	mov	r2, r4
 800b0e4:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800b0e8:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800b0ec:	4604      	mov	r4, r0
 800b0ee:	4630      	mov	r0, r6
 800b0f0:	f000 fbbc 	bl	800b86c <run_xrce_session>
 800b0f4:	b12c      	cbz	r4, 800b102 <rmw_destroy_publisher+0x9e>
 800b0f6:	b120      	cbz	r0, 800b102 <rmw_destroy_publisher+0x9e>
 800b0f8:	2400      	movs	r4, #0
 800b0fa:	4628      	mov	r0, r5
 800b0fc:	f000 fa5e 	bl	800b5bc <rmw_uxrce_fini_publisher_memory>
 800b100:	e7b9      	b.n	800b076 <rmw_destroy_publisher+0x12>
 800b102:	2402      	movs	r4, #2
 800b104:	e7f9      	b.n	800b0fa <rmw_destroy_publisher+0x96>
 800b106:	bf00      	nop

0800b108 <rmw_destroy_service>:
 800b108:	b570      	push	{r4, r5, r6, lr}
 800b10a:	b128      	cbz	r0, 800b118 <rmw_destroy_service+0x10>
 800b10c:	4604      	mov	r4, r0
 800b10e:	6800      	ldr	r0, [r0, #0]
 800b110:	460d      	mov	r5, r1
 800b112:	f000 fbc7 	bl	800b8a4 <is_uxrce_rmw_identifier_valid>
 800b116:	b910      	cbnz	r0, 800b11e <rmw_destroy_service+0x16>
 800b118:	2401      	movs	r4, #1
 800b11a:	4620      	mov	r0, r4
 800b11c:	bd70      	pop	{r4, r5, r6, pc}
 800b11e:	6863      	ldr	r3, [r4, #4]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d0f9      	beq.n	800b118 <rmw_destroy_service+0x10>
 800b124:	2d00      	cmp	r5, #0
 800b126:	d0f7      	beq.n	800b118 <rmw_destroy_service+0x10>
 800b128:	6828      	ldr	r0, [r5, #0]
 800b12a:	f000 fbbb 	bl	800b8a4 <is_uxrce_rmw_identifier_valid>
 800b12e:	2800      	cmp	r0, #0
 800b130:	d0f2      	beq.n	800b118 <rmw_destroy_service+0x10>
 800b132:	686e      	ldr	r6, [r5, #4]
 800b134:	2e00      	cmp	r6, #0
 800b136:	d0ef      	beq.n	800b118 <rmw_destroy_service+0x10>
 800b138:	6864      	ldr	r4, [r4, #4]
 800b13a:	6932      	ldr	r2, [r6, #16]
 800b13c:	6920      	ldr	r0, [r4, #16]
 800b13e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800b142:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b146:	6819      	ldr	r1, [r3, #0]
 800b148:	f000 fd2a 	bl	800bba0 <uxr_buffer_cancel_data>
 800b14c:	4602      	mov	r2, r0
 800b14e:	6920      	ldr	r0, [r4, #16]
 800b150:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800b154:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800b158:	f000 fb88 	bl	800b86c <run_xrce_session>
 800b15c:	6920      	ldr	r0, [r4, #16]
 800b15e:	6932      	ldr	r2, [r6, #16]
 800b160:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800b164:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b168:	6819      	ldr	r1, [r3, #0]
 800b16a:	f000 fba9 	bl	800b8c0 <uxr_buffer_delete_entity>
 800b16e:	4602      	mov	r2, r0
 800b170:	6920      	ldr	r0, [r4, #16]
 800b172:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800b176:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800b17a:	f000 fb77 	bl	800b86c <run_xrce_session>
 800b17e:	2800      	cmp	r0, #0
 800b180:	4628      	mov	r0, r5
 800b182:	bf14      	ite	ne
 800b184:	2400      	movne	r4, #0
 800b186:	2402      	moveq	r4, #2
 800b188:	f000 fa44 	bl	800b614 <rmw_uxrce_fini_service_memory>
 800b18c:	e7c5      	b.n	800b11a <rmw_destroy_service+0x12>
 800b18e:	bf00      	nop

0800b190 <rmw_destroy_subscription>:
 800b190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b192:	b128      	cbz	r0, 800b1a0 <rmw_destroy_subscription+0x10>
 800b194:	4604      	mov	r4, r0
 800b196:	6800      	ldr	r0, [r0, #0]
 800b198:	460d      	mov	r5, r1
 800b19a:	f000 fb83 	bl	800b8a4 <is_uxrce_rmw_identifier_valid>
 800b19e:	b910      	cbnz	r0, 800b1a6 <rmw_destroy_subscription+0x16>
 800b1a0:	2401      	movs	r4, #1
 800b1a2:	4620      	mov	r0, r4
 800b1a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1a6:	6863      	ldr	r3, [r4, #4]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d0f9      	beq.n	800b1a0 <rmw_destroy_subscription+0x10>
 800b1ac:	2d00      	cmp	r5, #0
 800b1ae:	d0f7      	beq.n	800b1a0 <rmw_destroy_subscription+0x10>
 800b1b0:	6828      	ldr	r0, [r5, #0]
 800b1b2:	f000 fb77 	bl	800b8a4 <is_uxrce_rmw_identifier_valid>
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	d0f2      	beq.n	800b1a0 <rmw_destroy_subscription+0x10>
 800b1ba:	686c      	ldr	r4, [r5, #4]
 800b1bc:	2c00      	cmp	r4, #0
 800b1be:	d0ef      	beq.n	800b1a0 <rmw_destroy_subscription+0x10>
 800b1c0:	6a26      	ldr	r6, [r4, #32]
 800b1c2:	6962      	ldr	r2, [r4, #20]
 800b1c4:	6930      	ldr	r0, [r6, #16]
 800b1c6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800b1ca:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b1ce:	6819      	ldr	r1, [r3, #0]
 800b1d0:	f000 fce6 	bl	800bba0 <uxr_buffer_cancel_data>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	6930      	ldr	r0, [r6, #16]
 800b1d8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800b1dc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800b1e0:	f000 fb44 	bl	800b86c <run_xrce_session>
 800b1e4:	69e0      	ldr	r0, [r4, #28]
 800b1e6:	f006 fab9 	bl	801175c <destroy_topic>
 800b1ea:	6a23      	ldr	r3, [r4, #32]
 800b1ec:	6962      	ldr	r2, [r4, #20]
 800b1ee:	6918      	ldr	r0, [r3, #16]
 800b1f0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800b1f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b1f8:	6819      	ldr	r1, [r3, #0]
 800b1fa:	f000 fb61 	bl	800b8c0 <uxr_buffer_delete_entity>
 800b1fe:	6a23      	ldr	r3, [r4, #32]
 800b200:	6922      	ldr	r2, [r4, #16]
 800b202:	691b      	ldr	r3, [r3, #16]
 800b204:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800b208:	4604      	mov	r4, r0
 800b20a:	6809      	ldr	r1, [r1, #0]
 800b20c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800b210:	f000 fb56 	bl	800b8c0 <uxr_buffer_delete_entity>
 800b214:	6937      	ldr	r7, [r6, #16]
 800b216:	4622      	mov	r2, r4
 800b218:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800b21c:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800b220:	4604      	mov	r4, r0
 800b222:	4638      	mov	r0, r7
 800b224:	f000 fb22 	bl	800b86c <run_xrce_session>
 800b228:	6936      	ldr	r6, [r6, #16]
 800b22a:	4622      	mov	r2, r4
 800b22c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800b230:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800b234:	4604      	mov	r4, r0
 800b236:	4630      	mov	r0, r6
 800b238:	f000 fb18 	bl	800b86c <run_xrce_session>
 800b23c:	b12c      	cbz	r4, 800b24a <rmw_destroy_subscription+0xba>
 800b23e:	b120      	cbz	r0, 800b24a <rmw_destroy_subscription+0xba>
 800b240:	2400      	movs	r4, #0
 800b242:	4628      	mov	r0, r5
 800b244:	f000 f9d0 	bl	800b5e8 <rmw_uxrce_fini_subscription_memory>
 800b248:	e7ab      	b.n	800b1a2 <rmw_destroy_subscription+0x12>
 800b24a:	2402      	movs	r4, #2
 800b24c:	e7f9      	b.n	800b242 <rmw_destroy_subscription+0xb2>
 800b24e:	bf00      	nop

0800b250 <rmw_uxrce_transport_init>:
 800b250:	b508      	push	{r3, lr}
 800b252:	b108      	cbz	r0, 800b258 <rmw_uxrce_transport_init+0x8>
 800b254:	f100 0210 	add.w	r2, r0, #16
 800b258:	b139      	cbz	r1, 800b26a <rmw_uxrce_transport_init+0x1a>
 800b25a:	6949      	ldr	r1, [r1, #20]
 800b25c:	4610      	mov	r0, r2
 800b25e:	f000 fc37 	bl	800bad0 <uxr_init_custom_transport>
 800b262:	f080 0001 	eor.w	r0, r0, #1
 800b266:	b2c0      	uxtb	r0, r0
 800b268:	bd08      	pop	{r3, pc}
 800b26a:	4b04      	ldr	r3, [pc, #16]	@ (800b27c <rmw_uxrce_transport_init+0x2c>)
 800b26c:	4610      	mov	r0, r2
 800b26e:	6859      	ldr	r1, [r3, #4]
 800b270:	f000 fc2e 	bl	800bad0 <uxr_init_custom_transport>
 800b274:	f080 0001 	eor.w	r0, r0, #1
 800b278:	b2c0      	uxtb	r0, r0
 800b27a:	bd08      	pop	{r3, pc}
 800b27c:	2000620c 	.word	0x2000620c

0800b280 <rmw_uros_epoch_nanos>:
 800b280:	4b05      	ldr	r3, [pc, #20]	@ (800b298 <rmw_uros_epoch_nanos+0x18>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	b123      	cbz	r3, 800b290 <rmw_uros_epoch_nanos+0x10>
 800b286:	6898      	ldr	r0, [r3, #8]
 800b288:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b28c:	f000 be92 	b.w	800bfb4 <uxr_epoch_nanos>
 800b290:	2000      	movs	r0, #0
 800b292:	2100      	movs	r1, #0
 800b294:	4770      	bx	lr
 800b296:	bf00      	nop
 800b298:	2000ab64 	.word	0x2000ab64

0800b29c <rmw_uros_sync_session>:
 800b29c:	b508      	push	{r3, lr}
 800b29e:	4b07      	ldr	r3, [pc, #28]	@ (800b2bc <rmw_uros_sync_session+0x20>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	b14b      	cbz	r3, 800b2b8 <rmw_uros_sync_session+0x1c>
 800b2a4:	4601      	mov	r1, r0
 800b2a6:	6898      	ldr	r0, [r3, #8]
 800b2a8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b2ac:	f001 fac4 	bl	800c838 <uxr_sync_session>
 800b2b0:	f080 0001 	eor.w	r0, r0, #1
 800b2b4:	b2c0      	uxtb	r0, r0
 800b2b6:	bd08      	pop	{r3, pc}
 800b2b8:	2001      	movs	r0, #1
 800b2ba:	bd08      	pop	{r3, pc}
 800b2bc:	2000ab64 	.word	0x2000ab64

0800b2c0 <rmw_uxrce_init_service_memory>:
 800b2c0:	b1e2      	cbz	r2, 800b2fc <rmw_uxrce_init_service_memory+0x3c>
 800b2c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2c6:	7b05      	ldrb	r5, [r0, #12]
 800b2c8:	4606      	mov	r6, r0
 800b2ca:	b9ad      	cbnz	r5, 800b2f8 <rmw_uxrce_init_service_memory+0x38>
 800b2cc:	23c8      	movs	r3, #200	@ 0xc8
 800b2ce:	e9c0 5500 	strd	r5, r5, [r0]
 800b2d2:	6083      	str	r3, [r0, #8]
 800b2d4:	f240 1301 	movw	r3, #257	@ 0x101
 800b2d8:	4617      	mov	r7, r2
 800b2da:	8183      	strh	r3, [r0, #12]
 800b2dc:	460c      	mov	r4, r1
 800b2de:	46a8      	mov	r8, r5
 800b2e0:	4621      	mov	r1, r4
 800b2e2:	4630      	mov	r0, r6
 800b2e4:	3501      	adds	r5, #1
 800b2e6:	f006 f9db 	bl	80116a0 <put_memory>
 800b2ea:	42af      	cmp	r7, r5
 800b2ec:	60a4      	str	r4, [r4, #8]
 800b2ee:	f884 800c 	strb.w	r8, [r4, #12]
 800b2f2:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800b2f6:	d1f3      	bne.n	800b2e0 <rmw_uxrce_init_service_memory+0x20>
 800b2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2fc:	4770      	bx	lr
 800b2fe:	bf00      	nop

0800b300 <rmw_uxrce_init_client_memory>:
 800b300:	b1e2      	cbz	r2, 800b33c <rmw_uxrce_init_client_memory+0x3c>
 800b302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b306:	7b05      	ldrb	r5, [r0, #12]
 800b308:	4606      	mov	r6, r0
 800b30a:	b9ad      	cbnz	r5, 800b338 <rmw_uxrce_init_client_memory+0x38>
 800b30c:	23c8      	movs	r3, #200	@ 0xc8
 800b30e:	e9c0 5500 	strd	r5, r5, [r0]
 800b312:	6083      	str	r3, [r0, #8]
 800b314:	f240 1301 	movw	r3, #257	@ 0x101
 800b318:	4617      	mov	r7, r2
 800b31a:	8183      	strh	r3, [r0, #12]
 800b31c:	460c      	mov	r4, r1
 800b31e:	46a8      	mov	r8, r5
 800b320:	4621      	mov	r1, r4
 800b322:	4630      	mov	r0, r6
 800b324:	3501      	adds	r5, #1
 800b326:	f006 f9bb 	bl	80116a0 <put_memory>
 800b32a:	42af      	cmp	r7, r5
 800b32c:	60a4      	str	r4, [r4, #8]
 800b32e:	f884 800c 	strb.w	r8, [r4, #12]
 800b332:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800b336:	d1f3      	bne.n	800b320 <rmw_uxrce_init_client_memory+0x20>
 800b338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b33c:	4770      	bx	lr
 800b33e:	bf00      	nop

0800b340 <rmw_uxrce_init_publisher_memory>:
 800b340:	b1e2      	cbz	r2, 800b37c <rmw_uxrce_init_publisher_memory+0x3c>
 800b342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b346:	7b05      	ldrb	r5, [r0, #12]
 800b348:	4606      	mov	r6, r0
 800b34a:	b9ad      	cbnz	r5, 800b378 <rmw_uxrce_init_publisher_memory+0x38>
 800b34c:	23d8      	movs	r3, #216	@ 0xd8
 800b34e:	e9c0 5500 	strd	r5, r5, [r0]
 800b352:	6083      	str	r3, [r0, #8]
 800b354:	f240 1301 	movw	r3, #257	@ 0x101
 800b358:	4617      	mov	r7, r2
 800b35a:	8183      	strh	r3, [r0, #12]
 800b35c:	460c      	mov	r4, r1
 800b35e:	46a8      	mov	r8, r5
 800b360:	4621      	mov	r1, r4
 800b362:	4630      	mov	r0, r6
 800b364:	3501      	adds	r5, #1
 800b366:	f006 f99b 	bl	80116a0 <put_memory>
 800b36a:	42af      	cmp	r7, r5
 800b36c:	60a4      	str	r4, [r4, #8]
 800b36e:	f884 800c 	strb.w	r8, [r4, #12]
 800b372:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800b376:	d1f3      	bne.n	800b360 <rmw_uxrce_init_publisher_memory+0x20>
 800b378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b37c:	4770      	bx	lr
 800b37e:	bf00      	nop

0800b380 <rmw_uxrce_init_subscription_memory>:
 800b380:	b1e2      	cbz	r2, 800b3bc <rmw_uxrce_init_subscription_memory+0x3c>
 800b382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b386:	7b05      	ldrb	r5, [r0, #12]
 800b388:	4606      	mov	r6, r0
 800b38a:	b9ad      	cbnz	r5, 800b3b8 <rmw_uxrce_init_subscription_memory+0x38>
 800b38c:	23d8      	movs	r3, #216	@ 0xd8
 800b38e:	e9c0 5500 	strd	r5, r5, [r0]
 800b392:	6083      	str	r3, [r0, #8]
 800b394:	f240 1301 	movw	r3, #257	@ 0x101
 800b398:	4617      	mov	r7, r2
 800b39a:	8183      	strh	r3, [r0, #12]
 800b39c:	460c      	mov	r4, r1
 800b39e:	46a8      	mov	r8, r5
 800b3a0:	4621      	mov	r1, r4
 800b3a2:	4630      	mov	r0, r6
 800b3a4:	3501      	adds	r5, #1
 800b3a6:	f006 f97b 	bl	80116a0 <put_memory>
 800b3aa:	42af      	cmp	r7, r5
 800b3ac:	60a4      	str	r4, [r4, #8]
 800b3ae:	f884 800c 	strb.w	r8, [r4, #12]
 800b3b2:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800b3b6:	d1f3      	bne.n	800b3a0 <rmw_uxrce_init_subscription_memory+0x20>
 800b3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3bc:	4770      	bx	lr
 800b3be:	bf00      	nop

0800b3c0 <rmw_uxrce_init_node_memory>:
 800b3c0:	b1e2      	cbz	r2, 800b3fc <rmw_uxrce_init_node_memory+0x3c>
 800b3c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3c6:	7b05      	ldrb	r5, [r0, #12]
 800b3c8:	4606      	mov	r6, r0
 800b3ca:	b9ad      	cbnz	r5, 800b3f8 <rmw_uxrce_init_node_memory+0x38>
 800b3cc:	23a4      	movs	r3, #164	@ 0xa4
 800b3ce:	e9c0 5500 	strd	r5, r5, [r0]
 800b3d2:	6083      	str	r3, [r0, #8]
 800b3d4:	f240 1301 	movw	r3, #257	@ 0x101
 800b3d8:	4617      	mov	r7, r2
 800b3da:	8183      	strh	r3, [r0, #12]
 800b3dc:	460c      	mov	r4, r1
 800b3de:	46a8      	mov	r8, r5
 800b3e0:	4621      	mov	r1, r4
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	3501      	adds	r5, #1
 800b3e6:	f006 f95b 	bl	80116a0 <put_memory>
 800b3ea:	42af      	cmp	r7, r5
 800b3ec:	60a4      	str	r4, [r4, #8]
 800b3ee:	f884 800c 	strb.w	r8, [r4, #12]
 800b3f2:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800b3f6:	d1f3      	bne.n	800b3e0 <rmw_uxrce_init_node_memory+0x20>
 800b3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3fc:	4770      	bx	lr
 800b3fe:	bf00      	nop

0800b400 <rmw_uxrce_init_session_memory>:
 800b400:	b1ea      	cbz	r2, 800b43e <rmw_uxrce_init_session_memory+0x3e>
 800b402:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b406:	7b05      	ldrb	r5, [r0, #12]
 800b408:	4606      	mov	r6, r0
 800b40a:	b9b5      	cbnz	r5, 800b43a <rmw_uxrce_init_session_memory+0x3a>
 800b40c:	e9c0 5500 	strd	r5, r5, [r0]
 800b410:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800b414:	f240 1301 	movw	r3, #257	@ 0x101
 800b418:	4617      	mov	r7, r2
 800b41a:	f8c0 8008 	str.w	r8, [r0, #8]
 800b41e:	460c      	mov	r4, r1
 800b420:	8183      	strh	r3, [r0, #12]
 800b422:	46a9      	mov	r9, r5
 800b424:	4621      	mov	r1, r4
 800b426:	4630      	mov	r0, r6
 800b428:	3501      	adds	r5, #1
 800b42a:	f006 f939 	bl	80116a0 <put_memory>
 800b42e:	42af      	cmp	r7, r5
 800b430:	60a4      	str	r4, [r4, #8]
 800b432:	f884 900c 	strb.w	r9, [r4, #12]
 800b436:	4444      	add	r4, r8
 800b438:	d1f4      	bne.n	800b424 <rmw_uxrce_init_session_memory+0x24>
 800b43a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b43e:	4770      	bx	lr

0800b440 <rmw_uxrce_init_topic_memory>:
 800b440:	b1e2      	cbz	r2, 800b47c <rmw_uxrce_init_topic_memory+0x3c>
 800b442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b446:	7b05      	ldrb	r5, [r0, #12]
 800b448:	4606      	mov	r6, r0
 800b44a:	b9ad      	cbnz	r5, 800b478 <rmw_uxrce_init_topic_memory+0x38>
 800b44c:	231c      	movs	r3, #28
 800b44e:	e9c0 5500 	strd	r5, r5, [r0]
 800b452:	6083      	str	r3, [r0, #8]
 800b454:	f240 1301 	movw	r3, #257	@ 0x101
 800b458:	4617      	mov	r7, r2
 800b45a:	8183      	strh	r3, [r0, #12]
 800b45c:	460c      	mov	r4, r1
 800b45e:	46a8      	mov	r8, r5
 800b460:	4621      	mov	r1, r4
 800b462:	4630      	mov	r0, r6
 800b464:	3501      	adds	r5, #1
 800b466:	f006 f91b 	bl	80116a0 <put_memory>
 800b46a:	42af      	cmp	r7, r5
 800b46c:	60a4      	str	r4, [r4, #8]
 800b46e:	f884 800c 	strb.w	r8, [r4, #12]
 800b472:	f104 041c 	add.w	r4, r4, #28
 800b476:	d1f3      	bne.n	800b460 <rmw_uxrce_init_topic_memory+0x20>
 800b478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b47c:	4770      	bx	lr
 800b47e:	bf00      	nop

0800b480 <rmw_uxrce_init_static_input_buffer_memory>:
 800b480:	b1ea      	cbz	r2, 800b4be <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800b482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b486:	7b05      	ldrb	r5, [r0, #12]
 800b488:	4606      	mov	r6, r0
 800b48a:	b9b5      	cbnz	r5, 800b4ba <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800b48c:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800b490:	e9c0 5500 	strd	r5, r5, [r0]
 800b494:	6083      	str	r3, [r0, #8]
 800b496:	f240 1301 	movw	r3, #257	@ 0x101
 800b49a:	4617      	mov	r7, r2
 800b49c:	8183      	strh	r3, [r0, #12]
 800b49e:	460c      	mov	r4, r1
 800b4a0:	46a8      	mov	r8, r5
 800b4a2:	4621      	mov	r1, r4
 800b4a4:	4630      	mov	r0, r6
 800b4a6:	3501      	adds	r5, #1
 800b4a8:	f006 f8fa 	bl	80116a0 <put_memory>
 800b4ac:	42af      	cmp	r7, r5
 800b4ae:	60a4      	str	r4, [r4, #8]
 800b4b0:	f884 800c 	strb.w	r8, [r4, #12]
 800b4b4:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800b4b8:	d1f3      	bne.n	800b4a2 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800b4ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4be:	4770      	bx	lr

0800b4c0 <rmw_uxrce_init_init_options_impl_memory>:
 800b4c0:	b1e2      	cbz	r2, 800b4fc <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800b4c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4c6:	7b05      	ldrb	r5, [r0, #12]
 800b4c8:	4606      	mov	r6, r0
 800b4ca:	b9ad      	cbnz	r5, 800b4f8 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800b4cc:	232c      	movs	r3, #44	@ 0x2c
 800b4ce:	e9c0 5500 	strd	r5, r5, [r0]
 800b4d2:	6083      	str	r3, [r0, #8]
 800b4d4:	f240 1301 	movw	r3, #257	@ 0x101
 800b4d8:	4617      	mov	r7, r2
 800b4da:	8183      	strh	r3, [r0, #12]
 800b4dc:	460c      	mov	r4, r1
 800b4de:	46a8      	mov	r8, r5
 800b4e0:	4621      	mov	r1, r4
 800b4e2:	4630      	mov	r0, r6
 800b4e4:	3501      	adds	r5, #1
 800b4e6:	f006 f8db 	bl	80116a0 <put_memory>
 800b4ea:	42af      	cmp	r7, r5
 800b4ec:	60a4      	str	r4, [r4, #8]
 800b4ee:	f884 800c 	strb.w	r8, [r4, #12]
 800b4f2:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800b4f6:	d1f3      	bne.n	800b4e0 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800b4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4fc:	4770      	bx	lr
 800b4fe:	bf00      	nop

0800b500 <rmw_uxrce_init_wait_set_memory>:
 800b500:	b1e2      	cbz	r2, 800b53c <rmw_uxrce_init_wait_set_memory+0x3c>
 800b502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b506:	7b05      	ldrb	r5, [r0, #12]
 800b508:	4606      	mov	r6, r0
 800b50a:	b9ad      	cbnz	r5, 800b538 <rmw_uxrce_init_wait_set_memory+0x38>
 800b50c:	231c      	movs	r3, #28
 800b50e:	e9c0 5500 	strd	r5, r5, [r0]
 800b512:	6083      	str	r3, [r0, #8]
 800b514:	f240 1301 	movw	r3, #257	@ 0x101
 800b518:	4617      	mov	r7, r2
 800b51a:	8183      	strh	r3, [r0, #12]
 800b51c:	460c      	mov	r4, r1
 800b51e:	46a8      	mov	r8, r5
 800b520:	4621      	mov	r1, r4
 800b522:	4630      	mov	r0, r6
 800b524:	3501      	adds	r5, #1
 800b526:	f006 f8bb 	bl	80116a0 <put_memory>
 800b52a:	42af      	cmp	r7, r5
 800b52c:	60a4      	str	r4, [r4, #8]
 800b52e:	f884 800c 	strb.w	r8, [r4, #12]
 800b532:	f104 041c 	add.w	r4, r4, #28
 800b536:	d1f3      	bne.n	800b520 <rmw_uxrce_init_wait_set_memory+0x20>
 800b538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop

0800b540 <rmw_uxrce_init_guard_condition_memory>:
 800b540:	b1e2      	cbz	r2, 800b57c <rmw_uxrce_init_guard_condition_memory+0x3c>
 800b542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b546:	7b05      	ldrb	r5, [r0, #12]
 800b548:	4606      	mov	r6, r0
 800b54a:	b9ad      	cbnz	r5, 800b578 <rmw_uxrce_init_guard_condition_memory+0x38>
 800b54c:	2320      	movs	r3, #32
 800b54e:	e9c0 5500 	strd	r5, r5, [r0]
 800b552:	6083      	str	r3, [r0, #8]
 800b554:	f240 1301 	movw	r3, #257	@ 0x101
 800b558:	4617      	mov	r7, r2
 800b55a:	8183      	strh	r3, [r0, #12]
 800b55c:	460c      	mov	r4, r1
 800b55e:	46a8      	mov	r8, r5
 800b560:	4621      	mov	r1, r4
 800b562:	4630      	mov	r0, r6
 800b564:	3501      	adds	r5, #1
 800b566:	f006 f89b 	bl	80116a0 <put_memory>
 800b56a:	42af      	cmp	r7, r5
 800b56c:	60a4      	str	r4, [r4, #8]
 800b56e:	f884 800c 	strb.w	r8, [r4, #12]
 800b572:	f104 0420 	add.w	r4, r4, #32
 800b576:	d1f3      	bne.n	800b560 <rmw_uxrce_init_guard_condition_memory+0x20>
 800b578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b57c:	4770      	bx	lr
 800b57e:	bf00      	nop

0800b580 <rmw_uxrce_fini_session_memory>:
 800b580:	4601      	mov	r1, r0
 800b582:	4801      	ldr	r0, [pc, #4]	@ (800b588 <rmw_uxrce_fini_session_memory+0x8>)
 800b584:	f006 b88c 	b.w	80116a0 <put_memory>
 800b588:	2000ab64 	.word	0x2000ab64

0800b58c <rmw_uxrce_fini_node_memory>:
 800b58c:	b538      	push	{r3, r4, r5, lr}
 800b58e:	4604      	mov	r4, r0
 800b590:	6800      	ldr	r0, [r0, #0]
 800b592:	b128      	cbz	r0, 800b5a0 <rmw_uxrce_fini_node_memory+0x14>
 800b594:	4b07      	ldr	r3, [pc, #28]	@ (800b5b4 <rmw_uxrce_fini_node_memory+0x28>)
 800b596:	6819      	ldr	r1, [r3, #0]
 800b598:	f7f4 fe42 	bl	8000220 <strcmp>
 800b59c:	b940      	cbnz	r0, 800b5b0 <rmw_uxrce_fini_node_memory+0x24>
 800b59e:	6020      	str	r0, [r4, #0]
 800b5a0:	6861      	ldr	r1, [r4, #4]
 800b5a2:	b129      	cbz	r1, 800b5b0 <rmw_uxrce_fini_node_memory+0x24>
 800b5a4:	2500      	movs	r5, #0
 800b5a6:	4804      	ldr	r0, [pc, #16]	@ (800b5b8 <rmw_uxrce_fini_node_memory+0x2c>)
 800b5a8:	610d      	str	r5, [r1, #16]
 800b5aa:	f006 f879 	bl	80116a0 <put_memory>
 800b5ae:	6065      	str	r5, [r4, #4]
 800b5b0:	bd38      	pop	{r3, r4, r5, pc}
 800b5b2:	bf00      	nop
 800b5b4:	08015fac 	.word	0x08015fac
 800b5b8:	2000ab34 	.word	0x2000ab34

0800b5bc <rmw_uxrce_fini_publisher_memory>:
 800b5bc:	b510      	push	{r4, lr}
 800b5be:	4604      	mov	r4, r0
 800b5c0:	6800      	ldr	r0, [r0, #0]
 800b5c2:	b128      	cbz	r0, 800b5d0 <rmw_uxrce_fini_publisher_memory+0x14>
 800b5c4:	4b06      	ldr	r3, [pc, #24]	@ (800b5e0 <rmw_uxrce_fini_publisher_memory+0x24>)
 800b5c6:	6819      	ldr	r1, [r3, #0]
 800b5c8:	f7f4 fe2a 	bl	8000220 <strcmp>
 800b5cc:	b938      	cbnz	r0, 800b5de <rmw_uxrce_fini_publisher_memory+0x22>
 800b5ce:	6020      	str	r0, [r4, #0]
 800b5d0:	6861      	ldr	r1, [r4, #4]
 800b5d2:	b121      	cbz	r1, 800b5de <rmw_uxrce_fini_publisher_memory+0x22>
 800b5d4:	4803      	ldr	r0, [pc, #12]	@ (800b5e4 <rmw_uxrce_fini_publisher_memory+0x28>)
 800b5d6:	f006 f863 	bl	80116a0 <put_memory>
 800b5da:	2300      	movs	r3, #0
 800b5dc:	6063      	str	r3, [r4, #4]
 800b5de:	bd10      	pop	{r4, pc}
 800b5e0:	08015fac 	.word	0x08015fac
 800b5e4:	2000ab44 	.word	0x2000ab44

0800b5e8 <rmw_uxrce_fini_subscription_memory>:
 800b5e8:	b510      	push	{r4, lr}
 800b5ea:	4604      	mov	r4, r0
 800b5ec:	6800      	ldr	r0, [r0, #0]
 800b5ee:	b128      	cbz	r0, 800b5fc <rmw_uxrce_fini_subscription_memory+0x14>
 800b5f0:	4b06      	ldr	r3, [pc, #24]	@ (800b60c <rmw_uxrce_fini_subscription_memory+0x24>)
 800b5f2:	6819      	ldr	r1, [r3, #0]
 800b5f4:	f7f4 fe14 	bl	8000220 <strcmp>
 800b5f8:	b938      	cbnz	r0, 800b60a <rmw_uxrce_fini_subscription_memory+0x22>
 800b5fa:	6020      	str	r0, [r4, #0]
 800b5fc:	6861      	ldr	r1, [r4, #4]
 800b5fe:	b121      	cbz	r1, 800b60a <rmw_uxrce_fini_subscription_memory+0x22>
 800b600:	4803      	ldr	r0, [pc, #12]	@ (800b610 <rmw_uxrce_fini_subscription_memory+0x28>)
 800b602:	f006 f84d 	bl	80116a0 <put_memory>
 800b606:	2300      	movs	r3, #0
 800b608:	6063      	str	r3, [r4, #4]
 800b60a:	bd10      	pop	{r4, pc}
 800b60c:	08015fac 	.word	0x08015fac
 800b610:	2000ab84 	.word	0x2000ab84

0800b614 <rmw_uxrce_fini_service_memory>:
 800b614:	b510      	push	{r4, lr}
 800b616:	4604      	mov	r4, r0
 800b618:	6800      	ldr	r0, [r0, #0]
 800b61a:	b128      	cbz	r0, 800b628 <rmw_uxrce_fini_service_memory+0x14>
 800b61c:	4b06      	ldr	r3, [pc, #24]	@ (800b638 <rmw_uxrce_fini_service_memory+0x24>)
 800b61e:	6819      	ldr	r1, [r3, #0]
 800b620:	f7f4 fdfe 	bl	8000220 <strcmp>
 800b624:	b938      	cbnz	r0, 800b636 <rmw_uxrce_fini_service_memory+0x22>
 800b626:	6020      	str	r0, [r4, #0]
 800b628:	6861      	ldr	r1, [r4, #4]
 800b62a:	b121      	cbz	r1, 800b636 <rmw_uxrce_fini_service_memory+0x22>
 800b62c:	4803      	ldr	r0, [pc, #12]	@ (800b63c <rmw_uxrce_fini_service_memory+0x28>)
 800b62e:	f006 f837 	bl	80116a0 <put_memory>
 800b632:	2300      	movs	r3, #0
 800b634:	6063      	str	r3, [r4, #4]
 800b636:	bd10      	pop	{r4, pc}
 800b638:	08015fac 	.word	0x08015fac
 800b63c:	2000ab54 	.word	0x2000ab54

0800b640 <rmw_uxrce_fini_client_memory>:
 800b640:	b510      	push	{r4, lr}
 800b642:	4604      	mov	r4, r0
 800b644:	6800      	ldr	r0, [r0, #0]
 800b646:	b128      	cbz	r0, 800b654 <rmw_uxrce_fini_client_memory+0x14>
 800b648:	4b06      	ldr	r3, [pc, #24]	@ (800b664 <rmw_uxrce_fini_client_memory+0x24>)
 800b64a:	6819      	ldr	r1, [r3, #0]
 800b64c:	f7f4 fde8 	bl	8000220 <strcmp>
 800b650:	b938      	cbnz	r0, 800b662 <rmw_uxrce_fini_client_memory+0x22>
 800b652:	6020      	str	r0, [r4, #0]
 800b654:	6861      	ldr	r1, [r4, #4]
 800b656:	b121      	cbz	r1, 800b662 <rmw_uxrce_fini_client_memory+0x22>
 800b658:	4803      	ldr	r0, [pc, #12]	@ (800b668 <rmw_uxrce_fini_client_memory+0x28>)
 800b65a:	f006 f821 	bl	80116a0 <put_memory>
 800b65e:	2300      	movs	r3, #0
 800b660:	6063      	str	r3, [r4, #4]
 800b662:	bd10      	pop	{r4, pc}
 800b664:	08015fac 	.word	0x08015fac
 800b668:	20006264 	.word	0x20006264

0800b66c <rmw_uxrce_fini_topic_memory>:
 800b66c:	b510      	push	{r4, lr}
 800b66e:	4604      	mov	r4, r0
 800b670:	4621      	mov	r1, r4
 800b672:	4803      	ldr	r0, [pc, #12]	@ (800b680 <rmw_uxrce_fini_topic_memory+0x14>)
 800b674:	f006 f814 	bl	80116a0 <put_memory>
 800b678:	2300      	movs	r3, #0
 800b67a:	61a3      	str	r3, [r4, #24]
 800b67c:	bd10      	pop	{r4, pc}
 800b67e:	bf00      	nop
 800b680:	2000ab94 	.word	0x2000ab94

0800b684 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800b684:	b082      	sub	sp, #8
 800b686:	b530      	push	{r4, r5, lr}
 800b688:	4925      	ldr	r1, [pc, #148]	@ (800b720 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800b68a:	680d      	ldr	r5, [r1, #0]
 800b68c:	ac03      	add	r4, sp, #12
 800b68e:	e884 000c 	stmia.w	r4, {r2, r3}
 800b692:	461c      	mov	r4, r3
 800b694:	2d00      	cmp	r5, #0
 800b696:	d041      	beq.n	800b71c <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800b698:	462b      	mov	r3, r5
 800b69a:	2100      	movs	r1, #0
 800b69c:	689a      	ldr	r2, [r3, #8]
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800b6a4:	4290      	cmp	r0, r2
 800b6a6:	bf08      	it	eq
 800b6a8:	3101      	addeq	r1, #1
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d1f6      	bne.n	800b69c <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800b6ae:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800b6b2:	2b02      	cmp	r3, #2
 800b6b4:	d029      	beq.n	800b70a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800b6b6:	d907      	bls.n	800b6c8 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800b6b8:	2b03      	cmp	r3, #3
 800b6ba:	d005      	beq.n	800b6c8 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800b6bc:	2100      	movs	r1, #0
 800b6be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6c2:	4608      	mov	r0, r1
 800b6c4:	b002      	add	sp, #8
 800b6c6:	4770      	bx	lr
 800b6c8:	b314      	cbz	r4, 800b710 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800b6ca:	428c      	cmp	r4, r1
 800b6cc:	d820      	bhi.n	800b710 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800b6ce:	2d00      	cmp	r5, #0
 800b6d0:	d0f4      	beq.n	800b6bc <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800b6d2:	2100      	movs	r1, #0
 800b6d4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800b6d8:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800b6dc:	e002      	b.n	800b6e4 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800b6de:	686d      	ldr	r5, [r5, #4]
 800b6e0:	2d00      	cmp	r5, #0
 800b6e2:	d0ec      	beq.n	800b6be <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800b6e4:	68ab      	ldr	r3, [r5, #8]
 800b6e6:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800b6ea:	4290      	cmp	r0, r2
 800b6ec:	d1f7      	bne.n	800b6de <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800b6ee:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800b6f2:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800b6f6:	4562      	cmp	r2, ip
 800b6f8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800b6fc:	eb73 0e04 	sbcs.w	lr, r3, r4
 800b700:	daed      	bge.n	800b6de <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800b702:	4694      	mov	ip, r2
 800b704:	461c      	mov	r4, r3
 800b706:	4629      	mov	r1, r5
 800b708:	e7e9      	b.n	800b6de <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800b70a:	b10c      	cbz	r4, 800b710 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800b70c:	428c      	cmp	r4, r1
 800b70e:	d9d5      	bls.n	800b6bc <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800b710:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b714:	4802      	ldr	r0, [pc, #8]	@ (800b720 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800b716:	b002      	add	sp, #8
 800b718:	f005 bfb2 	b.w	8011680 <get_memory>
 800b71c:	4629      	mov	r1, r5
 800b71e:	e7c6      	b.n	800b6ae <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800b720:	2000ab74 	.word	0x2000ab74

0800b724 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800b724:	4b11      	ldr	r3, [pc, #68]	@ (800b76c <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	b530      	push	{r4, r5, lr}
 800b72a:	b1e3      	cbz	r3, 800b766 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800b72c:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800b730:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800b734:	2400      	movs	r4, #0
 800b736:	e001      	b.n	800b73c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	b193      	cbz	r3, 800b762 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800b73c:	689a      	ldr	r2, [r3, #8]
 800b73e:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800b742:	4288      	cmp	r0, r1
 800b744:	d1f8      	bne.n	800b738 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800b746:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800b74a:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800b74e:	4571      	cmp	r1, lr
 800b750:	eb72 050c 	sbcs.w	r5, r2, ip
 800b754:	daf0      	bge.n	800b738 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800b756:	461c      	mov	r4, r3
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	468e      	mov	lr, r1
 800b75c:	4694      	mov	ip, r2
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d1ec      	bne.n	800b73c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800b762:	4620      	mov	r0, r4
 800b764:	bd30      	pop	{r4, r5, pc}
 800b766:	461c      	mov	r4, r3
 800b768:	4620      	mov	r0, r4
 800b76a:	bd30      	pop	{r4, r5, pc}
 800b76c:	2000ab74 	.word	0x2000ab74

0800b770 <rmw_uxrce_clean_expired_static_input_buffer>:
 800b770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b774:	4b3c      	ldr	r3, [pc, #240]	@ (800b868 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800b776:	ed2d 8b06 	vpush	{d8-d10}
 800b77a:	681f      	ldr	r7, [r3, #0]
 800b77c:	b08d      	sub	sp, #52	@ 0x34
 800b77e:	f7ff fd7f 	bl	800b280 <rmw_uros_epoch_nanos>
 800b782:	2f00      	cmp	r7, #0
 800b784:	d05d      	beq.n	800b842 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800b786:	46b8      	mov	r8, r7
 800b788:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800b850 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800b78c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800b790:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800b794:	2b04      	cmp	r3, #4
 800b796:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800b858 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800b79a:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800b860 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800b79e:	4681      	mov	r9, r0
 800b7a0:	468a      	mov	sl, r1
 800b7a2:	ac04      	add	r4, sp, #16
 800b7a4:	d03f      	beq.n	800b826 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800b7a6:	2b05      	cmp	r3, #5
 800b7a8:	d044      	beq.n	800b834 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800b7aa:	2b03      	cmp	r3, #3
 800b7ac:	d03b      	beq.n	800b826 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800b7ae:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b7b2:	ed8d ab06 	vstr	d10, [sp, #24]
 800b7b6:	ed8d 8b08 	vstr	d8, [sp, #32]
 800b7ba:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800b7be:	ab08      	add	r3, sp, #32
 800b7c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b7c2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b7c6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b7ca:	f005 fca5 	bl	8011118 <rmw_time_equal>
 800b7ce:	b118      	cbz	r0, 800b7d8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800b7d0:	ed8d 9b04 	vstr	d9, [sp, #16]
 800b7d4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b7d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800b7dc:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800b7e0:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800b7e4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800b7e8:	f005 fcea 	bl	80111c0 <rmw_time_total_nsec>
 800b7ec:	1830      	adds	r0, r6, r0
 800b7ee:	eb47 0101 	adc.w	r1, r7, r1
 800b7f2:	4548      	cmp	r0, r9
 800b7f4:	eb71 030a 	sbcs.w	r3, r1, sl
 800b7f8:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800b7fc:	db05      	blt.n	800b80a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800b7fe:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800b802:	4591      	cmp	r9, r2
 800b804:	eb7a 0303 	sbcs.w	r3, sl, r3
 800b808:	da03      	bge.n	800b812 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800b80a:	4817      	ldr	r0, [pc, #92]	@ (800b868 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800b80c:	4641      	mov	r1, r8
 800b80e:	f005 ff47 	bl	80116a0 <put_memory>
 800b812:	f1bb 0f00 	cmp.w	fp, #0
 800b816:	d014      	beq.n	800b842 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800b818:	46d8      	mov	r8, fp
 800b81a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800b81e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800b822:	2b04      	cmp	r3, #4
 800b824:	d1bf      	bne.n	800b7a6 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800b826:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800b82a:	3340      	adds	r3, #64	@ 0x40
 800b82c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b82e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b832:	e7c0      	b.n	800b7b6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800b834:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800b838:	3348      	adds	r3, #72	@ 0x48
 800b83a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b83c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b840:	e7b9      	b.n	800b7b6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800b842:	b00d      	add	sp, #52	@ 0x34
 800b844:	ecbd 8b06 	vpop	{d8-d10}
 800b848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b84c:	f3af 8000 	nop.w
	...
 800b858:	00000001 	.word	0x00000001
 800b85c:	00000000 	.word	0x00000000
 800b860:	0000001e 	.word	0x0000001e
 800b864:	00000000 	.word	0x00000000
 800b868:	2000ab74 	.word	0x2000ab74

0800b86c <run_xrce_session>:
 800b86c:	b510      	push	{r4, lr}
 800b86e:	788c      	ldrb	r4, [r1, #2]
 800b870:	b086      	sub	sp, #24
 800b872:	2c01      	cmp	r4, #1
 800b874:	f8ad 200e 	strh.w	r2, [sp, #14]
 800b878:	d00c      	beq.n	800b894 <run_xrce_session+0x28>
 800b87a:	4619      	mov	r1, r3
 800b87c:	2301      	movs	r3, #1
 800b87e:	9300      	str	r3, [sp, #0]
 800b880:	f10d 020e 	add.w	r2, sp, #14
 800b884:	f10d 0317 	add.w	r3, sp, #23
 800b888:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b88c:	f000 ff82 	bl	800c794 <uxr_run_session_until_all_status>
 800b890:	b006      	add	sp, #24
 800b892:	bd10      	pop	{r4, pc}
 800b894:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b898:	f000 fb96 	bl	800bfc8 <uxr_flash_output_streams>
 800b89c:	4620      	mov	r0, r4
 800b89e:	b006      	add	sp, #24
 800b8a0:	bd10      	pop	{r4, pc}
 800b8a2:	bf00      	nop

0800b8a4 <is_uxrce_rmw_identifier_valid>:
 800b8a4:	b510      	push	{r4, lr}
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	b140      	cbz	r0, 800b8bc <is_uxrce_rmw_identifier_valid+0x18>
 800b8aa:	f005 ff51 	bl	8011750 <rmw_get_implementation_identifier>
 800b8ae:	4601      	mov	r1, r0
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	f7f4 fcb5 	bl	8000220 <strcmp>
 800b8b6:	fab0 f080 	clz	r0, r0
 800b8ba:	0940      	lsrs	r0, r0, #5
 800b8bc:	bd10      	pop	{r4, pc}
 800b8be:	bf00      	nop

0800b8c0 <uxr_buffer_delete_entity>:
 800b8c0:	b510      	push	{r4, lr}
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	b08e      	sub	sp, #56	@ 0x38
 800b8c6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b8ca:	2303      	movs	r3, #3
 800b8cc:	9300      	str	r3, [sp, #0]
 800b8ce:	2204      	movs	r2, #4
 800b8d0:	ab06      	add	r3, sp, #24
 800b8d2:	4604      	mov	r4, r0
 800b8d4:	9103      	str	r1, [sp, #12]
 800b8d6:	f001 f9d9 	bl	800cc8c <uxr_prepare_stream_to_write_submessage>
 800b8da:	b918      	cbnz	r0, 800b8e4 <uxr_buffer_delete_entity+0x24>
 800b8dc:	4604      	mov	r4, r0
 800b8de:	4620      	mov	r0, r4
 800b8e0:	b00e      	add	sp, #56	@ 0x38
 800b8e2:	bd10      	pop	{r4, pc}
 800b8e4:	9902      	ldr	r1, [sp, #8]
 800b8e6:	aa05      	add	r2, sp, #20
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	f001 fb05 	bl	800cef8 <uxr_init_base_object_request>
 800b8ee:	a905      	add	r1, sp, #20
 800b8f0:	4604      	mov	r4, r0
 800b8f2:	a806      	add	r0, sp, #24
 800b8f4:	f002 fe22 	bl	800e53c <uxr_serialize_DELETE_Payload>
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	b00e      	add	sp, #56	@ 0x38
 800b8fc:	bd10      	pop	{r4, pc}
 800b8fe:	bf00      	nop

0800b900 <uxr_common_create_entity>:
 800b900:	b510      	push	{r4, lr}
 800b902:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800b906:	b08c      	sub	sp, #48	@ 0x30
 800b908:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800b90c:	f1bc 0f01 	cmp.w	ip, #1
 800b910:	bf0c      	ite	eq
 800b912:	f003 0201 	andeq.w	r2, r3, #1
 800b916:	2200      	movne	r2, #0
 800b918:	330e      	adds	r3, #14
 800b91a:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800b91e:	9101      	str	r1, [sp, #4]
 800b920:	441a      	add	r2, r3
 800b922:	2301      	movs	r3, #1
 800b924:	9300      	str	r3, [sp, #0]
 800b926:	9903      	ldr	r1, [sp, #12]
 800b928:	ab04      	add	r3, sp, #16
 800b92a:	b292      	uxth	r2, r2
 800b92c:	4604      	mov	r4, r0
 800b92e:	f001 f9ad 	bl	800cc8c <uxr_prepare_stream_to_write_submessage>
 800b932:	b918      	cbnz	r0, 800b93c <uxr_common_create_entity+0x3c>
 800b934:	4604      	mov	r4, r0
 800b936:	4620      	mov	r0, r4
 800b938:	b00c      	add	sp, #48	@ 0x30
 800b93a:	bd10      	pop	{r4, pc}
 800b93c:	9902      	ldr	r1, [sp, #8]
 800b93e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b940:	4620      	mov	r0, r4
 800b942:	f001 fad9 	bl	800cef8 <uxr_init_base_object_request>
 800b946:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b948:	4604      	mov	r4, r0
 800b94a:	a804      	add	r0, sp, #16
 800b94c:	f002 fd52 	bl	800e3f4 <uxr_serialize_CREATE_Payload>
 800b950:	4620      	mov	r0, r4
 800b952:	b00c      	add	sp, #48	@ 0x30
 800b954:	bd10      	pop	{r4, pc}
 800b956:	bf00      	nop

0800b958 <uxr_buffer_create_participant_bin>:
 800b958:	b570      	push	{r4, r5, r6, lr}
 800b95a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800b95e:	ac11      	add	r4, sp, #68	@ 0x44
 800b960:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800b964:	2303      	movs	r3, #3
 800b966:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800b96a:	7223      	strb	r3, [r4, #8]
 800b96c:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800b96e:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800b972:	2201      	movs	r2, #1
 800b974:	2100      	movs	r1, #0
 800b976:	4605      	mov	r5, r0
 800b978:	7122      	strb	r2, [r4, #4]
 800b97a:	f88d 1014 	strb.w	r1, [sp, #20]
 800b97e:	b1cb      	cbz	r3, 800b9b4 <uxr_buffer_create_participant_bin+0x5c>
 800b980:	f88d 201c 	strb.w	r2, [sp, #28]
 800b984:	9308      	str	r3, [sp, #32]
 800b986:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b98a:	a915      	add	r1, sp, #84	@ 0x54
 800b98c:	a809      	add	r0, sp, #36	@ 0x24
 800b98e:	f007 fb49 	bl	8013024 <ucdr_init_buffer>
 800b992:	a905      	add	r1, sp, #20
 800b994:	a809      	add	r0, sp, #36	@ 0x24
 800b996:	f002 fb51 	bl	800e03c <uxr_serialize_OBJK_DomainParticipant_Binary>
 800b99a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b99c:	9600      	str	r6, [sp, #0]
 800b99e:	9401      	str	r4, [sp, #4]
 800b9a0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b9a4:	60e3      	str	r3, [r4, #12]
 800b9a6:	4628      	mov	r0, r5
 800b9a8:	b29b      	uxth	r3, r3
 800b9aa:	f7ff ffa9 	bl	800b900 <uxr_common_create_entity>
 800b9ae:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800b9b2:	bd70      	pop	{r4, r5, r6, pc}
 800b9b4:	f88d 301c 	strb.w	r3, [sp, #28]
 800b9b8:	e7e5      	b.n	800b986 <uxr_buffer_create_participant_bin+0x2e>
 800b9ba:	bf00      	nop

0800b9bc <get_custom_error>:
 800b9bc:	4b01      	ldr	r3, [pc, #4]	@ (800b9c4 <get_custom_error+0x8>)
 800b9be:	7818      	ldrb	r0, [r3, #0]
 800b9c0:	4770      	bx	lr
 800b9c2:	bf00      	nop
 800b9c4:	2000abb4 	.word	0x2000abb4

0800b9c8 <recv_custom_msg>:
 800b9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9cc:	4693      	mov	fp, r2
 800b9ce:	b089      	sub	sp, #36	@ 0x24
 800b9d0:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800b9d4:	9305      	str	r3, [sp, #20]
 800b9d6:	468a      	mov	sl, r1
 800b9d8:	2100      	movs	r1, #0
 800b9da:	4604      	mov	r4, r0
 800b9dc:	f88d 101e 	strb.w	r1, [sp, #30]
 800b9e0:	b322      	cbz	r2, 800ba2c <recv_custom_msg+0x64>
 800b9e2:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800b9e6:	f10d 081f 	add.w	r8, sp, #31
 800b9ea:	af05      	add	r7, sp, #20
 800b9ec:	f10d 061e 	add.w	r6, sp, #30
 800b9f0:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800b9f4:	e002      	b.n	800b9fc <recv_custom_msg+0x34>
 800b9f6:	9b05      	ldr	r3, [sp, #20]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	dd0f      	ble.n	800ba1c <recv_custom_msg+0x54>
 800b9fc:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800ba00:	4623      	mov	r3, r4
 800ba02:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800ba06:	e9cd 5600 	strd	r5, r6, [sp]
 800ba0a:	4622      	mov	r2, r4
 800ba0c:	4648      	mov	r0, r9
 800ba0e:	f001 fca1 	bl	800d354 <uxr_read_framed_msg>
 800ba12:	2800      	cmp	r0, #0
 800ba14:	d0ef      	beq.n	800b9f6 <recv_custom_msg+0x2e>
 800ba16:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800ba1a:	b1b3      	cbz	r3, 800ba4a <recv_custom_msg+0x82>
 800ba1c:	4b0f      	ldr	r3, [pc, #60]	@ (800ba5c <recv_custom_msg+0x94>)
 800ba1e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800ba22:	701a      	strb	r2, [r3, #0]
 800ba24:	2000      	movs	r0, #0
 800ba26:	b009      	add	sp, #36	@ 0x24
 800ba28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba2c:	f10d 021f 	add.w	r2, sp, #31
 800ba30:	9200      	str	r2, [sp, #0]
 800ba32:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800ba36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ba3a:	4601      	mov	r1, r0
 800ba3c:	47a8      	blx	r5
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	d0ec      	beq.n	800ba1c <recv_custom_msg+0x54>
 800ba42:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d1e8      	bne.n	800ba1c <recv_custom_msg+0x54>
 800ba4a:	f8cb 0000 	str.w	r0, [fp]
 800ba4e:	2001      	movs	r0, #1
 800ba50:	f8ca 4000 	str.w	r4, [sl]
 800ba54:	b009      	add	sp, #36	@ 0x24
 800ba56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba5a:	bf00      	nop
 800ba5c:	2000abb4 	.word	0x2000abb4

0800ba60 <send_custom_msg>:
 800ba60:	b530      	push	{r4, r5, lr}
 800ba62:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800ba66:	b087      	sub	sp, #28
 800ba68:	4615      	mov	r5, r2
 800ba6a:	b974      	cbnz	r4, 800ba8a <send_custom_msg+0x2a>
 800ba6c:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800ba70:	f10d 0317 	add.w	r3, sp, #23
 800ba74:	47a0      	blx	r4
 800ba76:	b108      	cbz	r0, 800ba7c <send_custom_msg+0x1c>
 800ba78:	42a8      	cmp	r0, r5
 800ba7a:	d015      	beq.n	800baa8 <send_custom_msg+0x48>
 800ba7c:	4b0c      	ldr	r3, [pc, #48]	@ (800bab0 <send_custom_msg+0x50>)
 800ba7e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800ba82:	701a      	strb	r2, [r3, #0]
 800ba84:	2000      	movs	r0, #0
 800ba86:	b007      	add	sp, #28
 800ba88:	bd30      	pop	{r4, r5, pc}
 800ba8a:	460b      	mov	r3, r1
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	f10d 0117 	add.w	r1, sp, #23
 800ba92:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800ba96:	4602      	mov	r2, r0
 800ba98:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800ba9c:	9500      	str	r5, [sp, #0]
 800ba9e:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800baa2:	f001 fa5f 	bl	800cf64 <uxr_write_framed_msg>
 800baa6:	e7e6      	b.n	800ba76 <send_custom_msg+0x16>
 800baa8:	2001      	movs	r0, #1
 800baaa:	b007      	add	sp, #28
 800baac:	bd30      	pop	{r4, r5, pc}
 800baae:	bf00      	nop
 800bab0:	2000abb4 	.word	0x2000abb4

0800bab4 <uxr_set_custom_transport_callbacks>:
 800bab4:	b410      	push	{r4}
 800bab6:	9c01      	ldr	r4, [sp, #4]
 800bab8:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800babc:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800bac0:	9b02      	ldr	r3, [sp, #8]
 800bac2:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800bac6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800baca:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800bace:	4770      	bx	lr

0800bad0 <uxr_init_custom_transport>:
 800bad0:	b538      	push	{r3, r4, r5, lr}
 800bad2:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800bad6:	b303      	cbz	r3, 800bb1a <uxr_init_custom_transport+0x4a>
 800bad8:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800badc:	4604      	mov	r4, r0
 800bade:	b1e2      	cbz	r2, 800bb1a <uxr_init_custom_transport+0x4a>
 800bae0:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800bae4:	b1ca      	cbz	r2, 800bb1a <uxr_init_custom_transport+0x4a>
 800bae6:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800baea:	b1b2      	cbz	r2, 800bb1a <uxr_init_custom_transport+0x4a>
 800baec:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800baf0:	4798      	blx	r3
 800baf2:	4605      	mov	r5, r0
 800baf4:	b188      	cbz	r0, 800bb1a <uxr_init_custom_transport+0x4a>
 800baf6:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800bafa:	b98b      	cbnz	r3, 800bb20 <uxr_init_custom_transport+0x50>
 800bafc:	490b      	ldr	r1, [pc, #44]	@ (800bb2c <uxr_init_custom_transport+0x5c>)
 800bafe:	4b0c      	ldr	r3, [pc, #48]	@ (800bb30 <uxr_init_custom_transport+0x60>)
 800bb00:	4a0c      	ldr	r2, [pc, #48]	@ (800bb34 <uxr_init_custom_transport+0x64>)
 800bb02:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800bb06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bb0a:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800bb0e:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800bb12:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800bb16:	4628      	mov	r0, r5
 800bb18:	bd38      	pop	{r3, r4, r5, pc}
 800bb1a:	2500      	movs	r5, #0
 800bb1c:	4628      	mov	r0, r5
 800bb1e:	bd38      	pop	{r3, r4, r5, pc}
 800bb20:	2100      	movs	r1, #0
 800bb22:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800bb26:	f001 fa17 	bl	800cf58 <uxr_init_framing_io>
 800bb2a:	e7e7      	b.n	800bafc <uxr_init_custom_transport+0x2c>
 800bb2c:	0800ba61 	.word	0x0800ba61
 800bb30:	0800b9c9 	.word	0x0800b9c9
 800bb34:	0800b9bd 	.word	0x0800b9bd

0800bb38 <uxr_close_custom_transport>:
 800bb38:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800bb3c:	4718      	bx	r3
 800bb3e:	bf00      	nop

0800bb40 <uxr_object_id>:
 800bb40:	b082      	sub	sp, #8
 800bb42:	2300      	movs	r3, #0
 800bb44:	f88d 1006 	strb.w	r1, [sp, #6]
 800bb48:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bb4c:	f360 030f 	bfi	r3, r0, #0, #16
 800bb50:	f362 431f 	bfi	r3, r2, #16, #16
 800bb54:	4618      	mov	r0, r3
 800bb56:	b002      	add	sp, #8
 800bb58:	4770      	bx	lr
 800bb5a:	bf00      	nop

0800bb5c <uxr_object_id_from_raw>:
 800bb5c:	7843      	ldrb	r3, [r0, #1]
 800bb5e:	7801      	ldrb	r1, [r0, #0]
 800bb60:	b082      	sub	sp, #8
 800bb62:	f003 020f 	and.w	r2, r3, #15
 800bb66:	f88d 2006 	strb.w	r2, [sp, #6]
 800bb6a:	091b      	lsrs	r3, r3, #4
 800bb6c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bb70:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800bb74:	2000      	movs	r0, #0
 800bb76:	f363 000f 	bfi	r0, r3, #0, #16
 800bb7a:	f362 401f 	bfi	r0, r2, #16, #16
 800bb7e:	b002      	add	sp, #8
 800bb80:	4770      	bx	lr
 800bb82:	bf00      	nop

0800bb84 <uxr_object_id_to_raw>:
 800bb84:	4602      	mov	r2, r0
 800bb86:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800bb90:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800bb94:	f881 c000 	strb.w	ip, [r1]
 800bb98:	7048      	strb	r0, [r1, #1]
 800bb9a:	b002      	add	sp, #8
 800bb9c:	4770      	bx	lr
 800bb9e:	bf00      	nop

0800bba0 <uxr_buffer_cancel_data>:
 800bba0:	b510      	push	{r4, lr}
 800bba2:	b094      	sub	sp, #80	@ 0x50
 800bba4:	2300      	movs	r3, #0
 800bba6:	9202      	str	r2, [sp, #8]
 800bba8:	9205      	str	r2, [sp, #20]
 800bbaa:	9301      	str	r3, [sp, #4]
 800bbac:	2201      	movs	r2, #1
 800bbae:	f8ad 301c 	strh.w	r3, [sp, #28]
 800bbb2:	f88d 301e 	strb.w	r3, [sp, #30]
 800bbb6:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800bbba:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800bbbe:	2308      	movs	r3, #8
 800bbc0:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800bbc4:	9300      	str	r3, [sp, #0]
 800bbc6:	2210      	movs	r2, #16
 800bbc8:	ab0c      	add	r3, sp, #48	@ 0x30
 800bbca:	4604      	mov	r4, r0
 800bbcc:	9103      	str	r1, [sp, #12]
 800bbce:	f001 f85d 	bl	800cc8c <uxr_prepare_stream_to_write_submessage>
 800bbd2:	b918      	cbnz	r0, 800bbdc <uxr_buffer_cancel_data+0x3c>
 800bbd4:	4604      	mov	r4, r0
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	b014      	add	sp, #80	@ 0x50
 800bbda:	bd10      	pop	{r4, pc}
 800bbdc:	9905      	ldr	r1, [sp, #20]
 800bbde:	aa06      	add	r2, sp, #24
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	f001 f989 	bl	800cef8 <uxr_init_base_object_request>
 800bbe6:	a906      	add	r1, sp, #24
 800bbe8:	4604      	mov	r4, r0
 800bbea:	a80c      	add	r0, sp, #48	@ 0x30
 800bbec:	f002 fd50 	bl	800e690 <uxr_serialize_READ_DATA_Payload>
 800bbf0:	4620      	mov	r0, r4
 800bbf2:	b014      	add	sp, #80	@ 0x50
 800bbf4:	bd10      	pop	{r4, pc}
 800bbf6:	bf00      	nop

0800bbf8 <read_submessage_format>:
 800bbf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bbfc:	b095      	sub	sp, #84	@ 0x54
 800bbfe:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800bc02:	b113      	cbz	r3, 800bc0a <read_submessage_format+0x12>
 800bc04:	b015      	add	sp, #84	@ 0x54
 800bc06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc0a:	460c      	mov	r4, r1
 800bc0c:	4615      	mov	r5, r2
 800bc0e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800bc12:	4607      	mov	r7, r0
 800bc14:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800bc16:	9004      	str	r0, [sp, #16]
 800bc18:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800bc1a:	9005      	str	r0, [sp, #20]
 800bc1c:	1a52      	subs	r2, r2, r1
 800bc1e:	a80c      	add	r0, sp, #48	@ 0x30
 800bc20:	4699      	mov	r9, r3
 800bc22:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800bc26:	f007 f9fd 	bl	8013024 <ucdr_init_buffer>
 800bc2a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800bc2e:	a80c      	add	r0, sp, #48	@ 0x30
 800bc30:	f007 f9cc 	bl	8012fcc <ucdr_set_on_full_buffer_callback>
 800bc34:	69e2      	ldr	r2, [r4, #28]
 800bc36:	b19a      	cbz	r2, 800bc60 <read_submessage_format+0x68>
 800bc38:	f1b8 0f07 	cmp.w	r8, #7
 800bc3c:	f882 9014 	strb.w	r9, [r2, #20]
 800bc40:	d040      	beq.n	800bcc4 <read_submessage_format+0xcc>
 800bc42:	f1b8 0f08 	cmp.w	r8, #8
 800bc46:	d02e      	beq.n	800bca6 <read_submessage_format+0xae>
 800bc48:	f1b8 0f06 	cmp.w	r8, #6
 800bc4c:	d011      	beq.n	800bc72 <read_submessage_format+0x7a>
 800bc4e:	2301      	movs	r3, #1
 800bc50:	7513      	strb	r3, [r2, #20]
 800bc52:	4629      	mov	r1, r5
 800bc54:	4620      	mov	r0, r4
 800bc56:	f007 fa35 	bl	80130c4 <ucdr_advance_buffer>
 800bc5a:	b015      	add	sp, #84	@ 0x54
 800bc5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc60:	f1b8 0f07 	cmp.w	r8, #7
 800bc64:	d02e      	beq.n	800bcc4 <read_submessage_format+0xcc>
 800bc66:	f1b8 0f08 	cmp.w	r8, #8
 800bc6a:	d01c      	beq.n	800bca6 <read_submessage_format+0xae>
 800bc6c:	f1b8 0f06 	cmp.w	r8, #6
 800bc70:	d1ef      	bne.n	800bc52 <read_submessage_format+0x5a>
 800bc72:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800bc76:	f1b8 0f00 	cmp.w	r8, #0
 800bc7a:	d011      	beq.n	800bca0 <read_submessage_format+0xa8>
 800bc7c:	ab0c      	add	r3, sp, #48	@ 0x30
 800bc7e:	e9cd 3500 	strd	r3, r5, [sp]
 800bc82:	2306      	movs	r3, #6
 800bc84:	f88d 3016 	strb.w	r3, [sp, #22]
 800bc88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bc8c:	9302      	str	r3, [sp, #8]
 800bc8e:	4632      	mov	r2, r6
 800bc90:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800bc94:	4638      	mov	r0, r7
 800bc96:	47c0      	blx	r8
 800bc98:	2301      	movs	r3, #1
 800bc9a:	69e2      	ldr	r2, [r4, #28]
 800bc9c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800bca0:	2a00      	cmp	r2, #0
 800bca2:	d1d4      	bne.n	800bc4e <read_submessage_format+0x56>
 800bca4:	e7d5      	b.n	800bc52 <read_submessage_format+0x5a>
 800bca6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d0f8      	beq.n	800bca0 <read_submessage_format+0xa8>
 800bcae:	a906      	add	r1, sp, #24
 800bcb0:	a80c      	add	r0, sp, #48	@ 0x30
 800bcb2:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800bcb6:	f002 fdbf 	bl	800e838 <uxr_deserialize_SampleIdentity>
 800bcba:	b9a0      	cbnz	r0, 800bce6 <read_submessage_format+0xee>
 800bcbc:	69e2      	ldr	r2, [r4, #28]
 800bcbe:	2a00      	cmp	r2, #0
 800bcc0:	d1c5      	bne.n	800bc4e <read_submessage_format+0x56>
 800bcc2:	e7c6      	b.n	800bc52 <read_submessage_format+0x5a>
 800bcc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bcc8:	b13b      	cbz	r3, 800bcda <read_submessage_format+0xe2>
 800bcca:	a906      	add	r1, sp, #24
 800bccc:	a80c      	add	r0, sp, #48	@ 0x30
 800bcce:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800bcd2:	f002 fa77 	bl	800e1c4 <uxr_deserialize_BaseObjectRequest>
 800bcd6:	bb60      	cbnz	r0, 800bd32 <read_submessage_format+0x13a>
 800bcd8:	69e2      	ldr	r2, [r4, #28]
 800bcda:	68a3      	ldr	r3, [r4, #8]
 800bcdc:	442b      	add	r3, r5
 800bcde:	60a3      	str	r3, [r4, #8]
 800bce0:	2a00      	cmp	r2, #0
 800bce2:	d1b4      	bne.n	800bc4e <read_submessage_format+0x56>
 800bce4:	e7b5      	b.n	800bc52 <read_submessage_format+0x5a>
 800bce6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800bcea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bcec:	1a52      	subs	r2, r2, r1
 800bcee:	eba8 0803 	sub.w	r8, r8, r3
 800bcf2:	a80c      	add	r0, sp, #48	@ 0x30
 800bcf4:	f007 f996 	bl	8013024 <ucdr_init_buffer>
 800bcf8:	44a8      	add	r8, r5
 800bcfa:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800bcfe:	a80c      	add	r0, sp, #48	@ 0x30
 800bd00:	f007 f964 	bl	8012fcc <ucdr_set_on_full_buffer_callback>
 800bd04:	fa1f f888 	uxth.w	r8, r8
 800bd08:	ab0c      	add	r3, sp, #48	@ 0x30
 800bd0a:	9300      	str	r3, [sp, #0]
 800bd0c:	f8cd 8004 	str.w	r8, [sp, #4]
 800bd10:	2108      	movs	r1, #8
 800bd12:	f88d 1016 	strb.w	r1, [sp, #22]
 800bd16:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800bd1a:	9102      	str	r1, [sp, #8]
 800bd1c:	ab06      	add	r3, sp, #24
 800bd1e:	4632      	mov	r2, r6
 800bd20:	9905      	ldr	r1, [sp, #20]
 800bd22:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800bd26:	4638      	mov	r0, r7
 800bd28:	47b0      	blx	r6
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800bd30:	e7c4      	b.n	800bcbc <read_submessage_format+0xc4>
 800bd32:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800bd36:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bd38:	1a52      	subs	r2, r2, r1
 800bd3a:	a80c      	add	r0, sp, #48	@ 0x30
 800bd3c:	eba8 0803 	sub.w	r8, r8, r3
 800bd40:	f007 f970 	bl	8013024 <ucdr_init_buffer>
 800bd44:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800bd48:	a80c      	add	r0, sp, #48	@ 0x30
 800bd4a:	f007 f93f 	bl	8012fcc <ucdr_set_on_full_buffer_callback>
 800bd4e:	ab0c      	add	r3, sp, #48	@ 0x30
 800bd50:	9300      	str	r3, [sp, #0]
 800bd52:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800bd56:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800bd5a:	44a8      	add	r8, r5
 800bd5c:	fa1f f888 	uxth.w	r8, r8
 800bd60:	f8cd 8004 	str.w	r8, [sp, #4]
 800bd64:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800bd68:	2107      	movs	r1, #7
 800bd6a:	f88d 1016 	strb.w	r1, [sp, #22]
 800bd6e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800bd72:	9102      	str	r1, [sp, #8]
 800bd74:	4632      	mov	r2, r6
 800bd76:	b29b      	uxth	r3, r3
 800bd78:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800bd7c:	9905      	ldr	r1, [sp, #20]
 800bd7e:	4638      	mov	r0, r7
 800bd80:	47b0      	blx	r6
 800bd82:	2301      	movs	r3, #1
 800bd84:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800bd88:	e7a6      	b.n	800bcd8 <read_submessage_format+0xe0>
 800bd8a:	bf00      	nop

0800bd8c <on_get_fragmentation_info>:
 800bd8c:	b500      	push	{lr}
 800bd8e:	b08b      	sub	sp, #44	@ 0x2c
 800bd90:	4601      	mov	r1, r0
 800bd92:	2204      	movs	r2, #4
 800bd94:	a802      	add	r0, sp, #8
 800bd96:	f007 f945 	bl	8013024 <ucdr_init_buffer>
 800bd9a:	f10d 0305 	add.w	r3, sp, #5
 800bd9e:	f10d 0206 	add.w	r2, sp, #6
 800bda2:	a901      	add	r1, sp, #4
 800bda4:	a802      	add	r0, sp, #8
 800bda6:	f001 febb 	bl	800db20 <uxr_read_submessage_header>
 800bdaa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bdae:	2b0d      	cmp	r3, #13
 800bdb0:	d003      	beq.n	800bdba <on_get_fragmentation_info+0x2e>
 800bdb2:	2000      	movs	r0, #0
 800bdb4:	b00b      	add	sp, #44	@ 0x2c
 800bdb6:	f85d fb04 	ldr.w	pc, [sp], #4
 800bdba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bdbe:	f013 0f02 	tst.w	r3, #2
 800bdc2:	bf14      	ite	ne
 800bdc4:	2002      	movne	r0, #2
 800bdc6:	2001      	moveq	r0, #1
 800bdc8:	b00b      	add	sp, #44	@ 0x2c
 800bdca:	f85d fb04 	ldr.w	pc, [sp], #4
 800bdce:	bf00      	nop

0800bdd0 <read_submessage_get_info>:
 800bdd0:	b570      	push	{r4, r5, r6, lr}
 800bdd2:	2500      	movs	r5, #0
 800bdd4:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800bdd8:	4604      	mov	r4, r0
 800bdda:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800bdde:	460e      	mov	r6, r1
 800bde0:	a810      	add	r0, sp, #64	@ 0x40
 800bde2:	4629      	mov	r1, r5
 800bde4:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800bde8:	f008 fc8e 	bl	8014708 <memset>
 800bdec:	a903      	add	r1, sp, #12
 800bdee:	4630      	mov	r0, r6
 800bdf0:	f002 fb90 	bl	800e514 <uxr_deserialize_GET_INFO_Payload>
 800bdf4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800bdf8:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	f001 f873 	bl	800cee8 <uxr_session_header_offset>
 800be02:	462b      	mov	r3, r5
 800be04:	9000      	str	r0, [sp, #0]
 800be06:	220c      	movs	r2, #12
 800be08:	a905      	add	r1, sp, #20
 800be0a:	a808      	add	r0, sp, #32
 800be0c:	f007 f8f8 	bl	8013000 <ucdr_init_buffer_origin_offset>
 800be10:	a910      	add	r1, sp, #64	@ 0x40
 800be12:	a808      	add	r0, sp, #32
 800be14:	f002 fbf0 	bl	800e5f8 <uxr_serialize_INFO_Payload>
 800be18:	9b08      	ldr	r3, [sp, #32]
 800be1a:	462a      	mov	r2, r5
 800be1c:	4629      	mov	r1, r5
 800be1e:	4620      	mov	r0, r4
 800be20:	f001 f80c 	bl	800ce3c <uxr_stamp_session_header>
 800be24:	a808      	add	r0, sp, #32
 800be26:	f007 f929 	bl	801307c <ucdr_buffer_length>
 800be2a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800be2c:	4602      	mov	r2, r0
 800be2e:	a905      	add	r1, sp, #20
 800be30:	e9d3 0400 	ldrd	r0, r4, [r3]
 800be34:	47a0      	blx	r4
 800be36:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800be3a:	bd70      	pop	{r4, r5, r6, pc}

0800be3c <write_submessage_acknack.isra.0>:
 800be3c:	b570      	push	{r4, r5, r6, lr}
 800be3e:	b092      	sub	sp, #72	@ 0x48
 800be40:	4605      	mov	r5, r0
 800be42:	460e      	mov	r6, r1
 800be44:	4614      	mov	r4, r2
 800be46:	f001 f84f 	bl	800cee8 <uxr_session_header_offset>
 800be4a:	a905      	add	r1, sp, #20
 800be4c:	9000      	str	r0, [sp, #0]
 800be4e:	2300      	movs	r3, #0
 800be50:	a80a      	add	r0, sp, #40	@ 0x28
 800be52:	2211      	movs	r2, #17
 800be54:	f007 f8d4 	bl	8013000 <ucdr_init_buffer_origin_offset>
 800be58:	2218      	movs	r2, #24
 800be5a:	fb02 5404 	mla	r4, r2, r4, r5
 800be5e:	2300      	movs	r3, #0
 800be60:	2205      	movs	r2, #5
 800be62:	3450      	adds	r4, #80	@ 0x50
 800be64:	210a      	movs	r1, #10
 800be66:	a80a      	add	r0, sp, #40	@ 0x28
 800be68:	f001 fe40 	bl	800daec <uxr_buffer_submessage_header>
 800be6c:	a903      	add	r1, sp, #12
 800be6e:	4620      	mov	r0, r4
 800be70:	f007 fb5a 	bl	8013528 <uxr_compute_acknack>
 800be74:	ba40      	rev16	r0, r0
 800be76:	f8ad 000e 	strh.w	r0, [sp, #14]
 800be7a:	a903      	add	r1, sp, #12
 800be7c:	a80a      	add	r0, sp, #40	@ 0x28
 800be7e:	f88d 6010 	strb.w	r6, [sp, #16]
 800be82:	f002 fc29 	bl	800e6d8 <uxr_serialize_ACKNACK_Payload>
 800be86:	2200      	movs	r2, #0
 800be88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be8a:	4611      	mov	r1, r2
 800be8c:	4628      	mov	r0, r5
 800be8e:	f000 ffd5 	bl	800ce3c <uxr_stamp_session_header>
 800be92:	a80a      	add	r0, sp, #40	@ 0x28
 800be94:	f007 f8f2 	bl	801307c <ucdr_buffer_length>
 800be98:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800be9a:	4602      	mov	r2, r0
 800be9c:	a905      	add	r1, sp, #20
 800be9e:	e9d3 0400 	ldrd	r0, r4, [r3]
 800bea2:	47a0      	blx	r4
 800bea4:	b012      	add	sp, #72	@ 0x48
 800bea6:	bd70      	pop	{r4, r5, r6, pc}

0800bea8 <uxr_init_session>:
 800bea8:	b510      	push	{r4, lr}
 800beaa:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800bee0 <uxr_init_session+0x38>
 800beae:	2300      	movs	r3, #0
 800beb0:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800beb4:	4604      	mov	r4, r0
 800beb6:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800beba:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800bebe:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800bec2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800bec6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800beca:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800bece:	2181      	movs	r1, #129	@ 0x81
 800bed0:	f000 ff20 	bl	800cd14 <uxr_init_session_info>
 800bed4:	f104 0008 	add.w	r0, r4, #8
 800bed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bedc:	f001 bd22 	b.w	800d924 <uxr_init_stream_storage>
	...

0800bee8 <uxr_set_status_callback>:
 800bee8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800beec:	4770      	bx	lr
 800beee:	bf00      	nop

0800bef0 <uxr_set_topic_callback>:
 800bef0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800bef4:	4770      	bx	lr
 800bef6:	bf00      	nop

0800bef8 <uxr_set_request_callback>:
 800bef8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800befc:	4770      	bx	lr
 800befe:	bf00      	nop

0800bf00 <uxr_set_reply_callback>:
 800bf00:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800bf04:	4770      	bx	lr
 800bf06:	bf00      	nop

0800bf08 <uxr_create_output_best_effort_stream>:
 800bf08:	b510      	push	{r4, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	e9cd 2100 	strd	r2, r1, [sp]
 800bf10:	4604      	mov	r4, r0
 800bf12:	f000 ffe9 	bl	800cee8 <uxr_session_header_offset>
 800bf16:	e9dd 2100 	ldrd	r2, r1, [sp]
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	f104 0008 	add.w	r0, r4, #8
 800bf20:	b004      	add	sp, #16
 800bf22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf26:	f001 bd47 	b.w	800d9b8 <uxr_add_output_best_effort_buffer>
 800bf2a:	bf00      	nop

0800bf2c <uxr_create_output_reliable_stream>:
 800bf2c:	b510      	push	{r4, lr}
 800bf2e:	b088      	sub	sp, #32
 800bf30:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800bf34:	4604      	mov	r4, r0
 800bf36:	9303      	str	r3, [sp, #12]
 800bf38:	f000 ffd6 	bl	800cee8 <uxr_session_header_offset>
 800bf3c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800bf40:	9000      	str	r0, [sp, #0]
 800bf42:	9905      	ldr	r1, [sp, #20]
 800bf44:	f104 0008 	add.w	r0, r4, #8
 800bf48:	f001 fd4a 	bl	800d9e0 <uxr_add_output_reliable_buffer>
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	b2c3      	uxtb	r3, r0
 800bf50:	f363 0207 	bfi	r2, r3, #0, #8
 800bf54:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800bf58:	f363 220f 	bfi	r2, r3, #8, #8
 800bf5c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800bf60:	f363 4217 	bfi	r2, r3, #16, #8
 800bf64:	0e03      	lsrs	r3, r0, #24
 800bf66:	f363 621f 	bfi	r2, r3, #24, #8
 800bf6a:	4610      	mov	r0, r2
 800bf6c:	b008      	add	sp, #32
 800bf6e:	bd10      	pop	{r4, pc}

0800bf70 <uxr_create_input_best_effort_stream>:
 800bf70:	b082      	sub	sp, #8
 800bf72:	3008      	adds	r0, #8
 800bf74:	b002      	add	sp, #8
 800bf76:	f001 bd4d 	b.w	800da14 <uxr_add_input_best_effort_buffer>
 800bf7a:	bf00      	nop

0800bf7c <uxr_create_input_reliable_stream>:
 800bf7c:	b510      	push	{r4, lr}
 800bf7e:	b084      	sub	sp, #16
 800bf80:	4c0b      	ldr	r4, [pc, #44]	@ (800bfb0 <uxr_create_input_reliable_stream+0x34>)
 800bf82:	9400      	str	r4, [sp, #0]
 800bf84:	3008      	adds	r0, #8
 800bf86:	f001 fd5b 	bl	800da40 <uxr_add_input_reliable_buffer>
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	b2c3      	uxtb	r3, r0
 800bf8e:	f363 0207 	bfi	r2, r3, #0, #8
 800bf92:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800bf96:	f363 220f 	bfi	r2, r3, #8, #8
 800bf9a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800bf9e:	f363 4217 	bfi	r2, r3, #16, #8
 800bfa2:	0e03      	lsrs	r3, r0, #24
 800bfa4:	f363 621f 	bfi	r2, r3, #24, #8
 800bfa8:	4610      	mov	r0, r2
 800bfaa:	b004      	add	sp, #16
 800bfac:	bd10      	pop	{r4, pc}
 800bfae:	bf00      	nop
 800bfb0:	0800bd8d 	.word	0x0800bd8d

0800bfb4 <uxr_epoch_nanos>:
 800bfb4:	b510      	push	{r4, lr}
 800bfb6:	4604      	mov	r4, r0
 800bfb8:	f001 fdf8 	bl	800dbac <uxr_nanos>
 800bfbc:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800bfc0:	1ac0      	subs	r0, r0, r3
 800bfc2:	eb61 0102 	sbc.w	r1, r1, r2
 800bfc6:	bd10      	pop	{r4, pc}

0800bfc8 <uxr_flash_output_streams>:
 800bfc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfcc:	7e03      	ldrb	r3, [r0, #24]
 800bfce:	b084      	sub	sp, #16
 800bfd0:	4604      	mov	r4, r0
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d035      	beq.n	800c042 <uxr_flash_output_streams+0x7a>
 800bfd6:	f04f 0900 	mov.w	r9, #0
 800bfda:	4648      	mov	r0, r9
 800bfdc:	f10d 0802 	add.w	r8, sp, #2
 800bfe0:	af03      	add	r7, sp, #12
 800bfe2:	ae02      	add	r6, sp, #8
 800bfe4:	e006      	b.n	800bff4 <uxr_flash_output_streams+0x2c>
 800bfe6:	7e23      	ldrb	r3, [r4, #24]
 800bfe8:	f109 0901 	add.w	r9, r9, #1
 800bfec:	fa5f f089 	uxtb.w	r0, r9
 800bff0:	4283      	cmp	r3, r0
 800bff2:	d926      	bls.n	800c042 <uxr_flash_output_streams+0x7a>
 800bff4:	2201      	movs	r2, #1
 800bff6:	4611      	mov	r1, r2
 800bff8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800bffc:	f001 fc3e 	bl	800d87c <uxr_stream_id>
 800c000:	3508      	adds	r5, #8
 800c002:	4684      	mov	ip, r0
 800c004:	4643      	mov	r3, r8
 800c006:	463a      	mov	r2, r7
 800c008:	4631      	mov	r1, r6
 800c00a:	4628      	mov	r0, r5
 800c00c:	f8cd c004 	str.w	ip, [sp, #4]
 800c010:	f007 fb10 	bl	8013634 <uxr_prepare_best_effort_buffer_to_send>
 800c014:	2800      	cmp	r0, #0
 800c016:	d0e6      	beq.n	800bfe6 <uxr_flash_output_streams+0x1e>
 800c018:	9b02      	ldr	r3, [sp, #8]
 800c01a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800c01e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800c022:	4620      	mov	r0, r4
 800c024:	f000 ff0a 	bl	800ce3c <uxr_stamp_session_header>
 800c028:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c02a:	9a03      	ldr	r2, [sp, #12]
 800c02c:	685d      	ldr	r5, [r3, #4]
 800c02e:	6818      	ldr	r0, [r3, #0]
 800c030:	9902      	ldr	r1, [sp, #8]
 800c032:	47a8      	blx	r5
 800c034:	f109 0901 	add.w	r9, r9, #1
 800c038:	7e23      	ldrb	r3, [r4, #24]
 800c03a:	fa5f f089 	uxtb.w	r0, r9
 800c03e:	4283      	cmp	r3, r0
 800c040:	d8d8      	bhi.n	800bff4 <uxr_flash_output_streams+0x2c>
 800c042:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800c046:	b38b      	cbz	r3, 800c0ac <uxr_flash_output_streams+0xe4>
 800c048:	f04f 0900 	mov.w	r9, #0
 800c04c:	f10d 0802 	add.w	r8, sp, #2
 800c050:	af03      	add	r7, sp, #12
 800c052:	ae02      	add	r6, sp, #8
 800c054:	4648      	mov	r0, r9
 800c056:	2201      	movs	r2, #1
 800c058:	2102      	movs	r1, #2
 800c05a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800c05e:	f001 fc0d 	bl	800d87c <uxr_stream_id>
 800c062:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800c066:	3520      	adds	r5, #32
 800c068:	9001      	str	r0, [sp, #4]
 800c06a:	e00d      	b.n	800c088 <uxr_flash_output_streams+0xc0>
 800c06c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800c070:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800c074:	9b02      	ldr	r3, [sp, #8]
 800c076:	f000 fee1 	bl	800ce3c <uxr_stamp_session_header>
 800c07a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c07c:	9a03      	ldr	r2, [sp, #12]
 800c07e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800c082:	9902      	ldr	r1, [sp, #8]
 800c084:	6818      	ldr	r0, [r3, #0]
 800c086:	47d0      	blx	sl
 800c088:	4643      	mov	r3, r8
 800c08a:	463a      	mov	r2, r7
 800c08c:	4631      	mov	r1, r6
 800c08e:	4628      	mov	r0, r5
 800c090:	f007 fcee 	bl	8013a70 <uxr_prepare_next_reliable_buffer_to_send>
 800c094:	4603      	mov	r3, r0
 800c096:	4620      	mov	r0, r4
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d1e7      	bne.n	800c06c <uxr_flash_output_streams+0xa4>
 800c09c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800c0a0:	f109 0901 	add.w	r9, r9, #1
 800c0a4:	fa5f f089 	uxtb.w	r0, r9
 800c0a8:	4283      	cmp	r3, r0
 800c0aa:	d8d4      	bhi.n	800c056 <uxr_flash_output_streams+0x8e>
 800c0ac:	b004      	add	sp, #16
 800c0ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0b2:	bf00      	nop

0800c0b4 <read_submessage_info>:
 800c0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0b8:	460d      	mov	r5, r1
 800c0ba:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800c0be:	4669      	mov	r1, sp
 800c0c0:	4607      	mov	r7, r0
 800c0c2:	4628      	mov	r0, r5
 800c0c4:	f002 f934 	bl	800e330 <uxr_deserialize_BaseObjectReply>
 800c0c8:	a902      	add	r1, sp, #8
 800c0ca:	4604      	mov	r4, r0
 800c0cc:	4628      	mov	r0, r5
 800c0ce:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800c0d2:	f005 ffe3 	bl	801209c <ucdr_deserialize_bool>
 800c0d6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c0da:	4004      	ands	r4, r0
 800c0dc:	b2e4      	uxtb	r4, r4
 800c0de:	b95b      	cbnz	r3, 800c0f8 <read_submessage_info+0x44>
 800c0e0:	a987      	add	r1, sp, #540	@ 0x21c
 800c0e2:	4628      	mov	r0, r5
 800c0e4:	f005 ffda 	bl	801209c <ucdr_deserialize_bool>
 800c0e8:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800c0ec:	4606      	mov	r6, r0
 800c0ee:	b94b      	cbnz	r3, 800c104 <read_submessage_info+0x50>
 800c0f0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800c0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0f8:	a903      	add	r1, sp, #12
 800c0fa:	4628      	mov	r0, r5
 800c0fc:	f001 ffc0 	bl	800e080 <uxr_deserialize_ObjectVariant>
 800c100:	4004      	ands	r4, r0
 800c102:	e7ed      	b.n	800c0e0 <read_submessage_info+0x2c>
 800c104:	a988      	add	r1, sp, #544	@ 0x220
 800c106:	4628      	mov	r0, r5
 800c108:	f005 fff6 	bl	80120f8 <ucdr_deserialize_uint8_t>
 800c10c:	4234      	tst	r4, r6
 800c10e:	d0ef      	beq.n	800c0f0 <read_submessage_info+0x3c>
 800c110:	2800      	cmp	r0, #0
 800c112:	d0ed      	beq.n	800c0f0 <read_submessage_info+0x3c>
 800c114:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800c118:	2b0d      	cmp	r3, #13
 800c11a:	d1e9      	bne.n	800c0f0 <read_submessage_info+0x3c>
 800c11c:	a98a      	add	r1, sp, #552	@ 0x228
 800c11e:	4628      	mov	r0, r5
 800c120:	f006 fd90 	bl	8012c44 <ucdr_deserialize_int16_t>
 800c124:	b140      	cbz	r0, 800c138 <read_submessage_info+0x84>
 800c126:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	dd07      	ble.n	800c13e <read_submessage_info+0x8a>
 800c12e:	f1b8 0f00 	cmp.w	r8, #0
 800c132:	bf14      	ite	ne
 800c134:	2001      	movne	r0, #1
 800c136:	2002      	moveq	r0, #2
 800c138:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800c13c:	e7d8      	b.n	800c0f0 <read_submessage_info+0x3c>
 800c13e:	2000      	movs	r0, #0
 800c140:	e7fa      	b.n	800c138 <read_submessage_info+0x84>
 800c142:	bf00      	nop

0800c144 <read_submessage_list>:
 800c144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c148:	b097      	sub	sp, #92	@ 0x5c
 800c14a:	4ec1      	ldr	r6, [pc, #772]	@ (800c450 <read_submessage_list+0x30c>)
 800c14c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c14e:	4604      	mov	r4, r0
 800c150:	460d      	mov	r5, r1
 800c152:	f04f 0801 	mov.w	r8, #1
 800c156:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800c15a:	aa0c      	add	r2, sp, #48	@ 0x30
 800c15c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800c160:	4628      	mov	r0, r5
 800c162:	f001 fcdd 	bl	800db20 <uxr_read_submessage_header>
 800c166:	2800      	cmp	r0, #0
 800c168:	f000 813e 	beq.w	800c3e8 <read_submessage_list+0x2a4>
 800c16c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800c170:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800c174:	3b02      	subs	r3, #2
 800c176:	2b0d      	cmp	r3, #13
 800c178:	d8ed      	bhi.n	800c156 <read_submessage_list+0x12>
 800c17a:	a101      	add	r1, pc, #4	@ (adr r1, 800c180 <read_submessage_list+0x3c>)
 800c17c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c180:	0800c3df 	.word	0x0800c3df
 800c184:	0800c157 	.word	0x0800c157
 800c188:	0800c3cf 	.word	0x0800c3cf
 800c18c:	0800c36d 	.word	0x0800c36d
 800c190:	0800c363 	.word	0x0800c363
 800c194:	0800c157 	.word	0x0800c157
 800c198:	0800c157 	.word	0x0800c157
 800c19c:	0800c2c3 	.word	0x0800c2c3
 800c1a0:	0800c253 	.word	0x0800c253
 800c1a4:	0800c213 	.word	0x0800c213
 800c1a8:	0800c157 	.word	0x0800c157
 800c1ac:	0800c157 	.word	0x0800c157
 800c1b0:	0800c157 	.word	0x0800c157
 800c1b4:	0800c1b9 	.word	0x0800c1b9
 800c1b8:	a910      	add	r1, sp, #64	@ 0x40
 800c1ba:	4628      	mov	r0, r5
 800c1bc:	f002 faea 	bl	800e794 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800c1c0:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800c1c4:	f1b9 0f00 	cmp.w	r9, #0
 800c1c8:	f000 8116 	beq.w	800c3f8 <read_submessage_list+0x2b4>
 800c1cc:	f001 fcee 	bl	800dbac <uxr_nanos>
 800c1d0:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800c1d2:	4602      	mov	r2, r0
 800c1d4:	460b      	mov	r3, r1
 800c1d6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800c1d8:	2100      	movs	r1, #0
 800c1da:	468c      	mov	ip, r1
 800c1dc:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800c1e0:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800c1e4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800c1e6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800c1e8:	468c      	mov	ip, r1
 800c1ea:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800c1ee:	46e2      	mov	sl, ip
 800c1f0:	46bc      	mov	ip, r7
 800c1f2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800c1f6:	fbc0 7106 	smlal	r7, r1, r0, r6
 800c1fa:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800c1fe:	e9cd 7100 	strd	r7, r1, [sp]
 800c202:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800c206:	9106      	str	r1, [sp, #24]
 800c208:	4620      	mov	r0, r4
 800c20a:	47c8      	blx	r9
 800c20c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800c210:	e7a1      	b.n	800c156 <read_submessage_list+0x12>
 800c212:	a910      	add	r1, sp, #64	@ 0x40
 800c214:	4628      	mov	r0, r5
 800c216:	f002 fa9d 	bl	800e754 <uxr_deserialize_HEARTBEAT_Payload>
 800c21a:	2100      	movs	r1, #0
 800c21c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800c220:	f001 fb56 	bl	800d8d0 <uxr_stream_id_from_raw>
 800c224:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800c228:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c22a:	4639      	mov	r1, r7
 800c22c:	f104 0008 	add.w	r0, r4, #8
 800c230:	f001 fc3c 	bl	800daac <uxr_get_input_reliable_stream>
 800c234:	2800      	cmp	r0, #0
 800c236:	d08e      	beq.n	800c156 <read_submessage_list+0x12>
 800c238:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800c23c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800c240:	f007 f966 	bl	8013510 <uxr_process_heartbeat>
 800c244:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800c248:	463a      	mov	r2, r7
 800c24a:	4620      	mov	r0, r4
 800c24c:	f7ff fdf6 	bl	800be3c <write_submessage_acknack.isra.0>
 800c250:	e781      	b.n	800c156 <read_submessage_list+0x12>
 800c252:	a910      	add	r1, sp, #64	@ 0x40
 800c254:	4628      	mov	r0, r5
 800c256:	f002 fa55 	bl	800e704 <uxr_deserialize_ACKNACK_Payload>
 800c25a:	2100      	movs	r1, #0
 800c25c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800c260:	f001 fb36 	bl	800d8d0 <uxr_stream_id_from_raw>
 800c264:	900d      	str	r0, [sp, #52]	@ 0x34
 800c266:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800c26a:	f104 0008 	add.w	r0, r4, #8
 800c26e:	f001 fc09 	bl	800da84 <uxr_get_output_reliable_stream>
 800c272:	4607      	mov	r7, r0
 800c274:	2800      	cmp	r0, #0
 800c276:	f43f af6e 	beq.w	800c156 <read_submessage_list+0x12>
 800c27a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800c27e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800c282:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800c286:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800c28a:	b289      	uxth	r1, r1
 800c28c:	f007 fc9a 	bl	8013bc4 <uxr_process_acknack>
 800c290:	4638      	mov	r0, r7
 800c292:	f007 fc57 	bl	8013b44 <uxr_begin_output_nack_buffer_it>
 800c296:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800c29a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800c29e:	e006      	b.n	800c2ae <read_submessage_list+0x16a>
 800c2a0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c2a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c2a4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800c2a8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c2aa:	6818      	ldr	r0, [r3, #0]
 800c2ac:	47c8      	blx	r9
 800c2ae:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800c2b2:	aa0f      	add	r2, sp, #60	@ 0x3c
 800c2b4:	4651      	mov	r1, sl
 800c2b6:	4638      	mov	r0, r7
 800c2b8:	f007 fc46 	bl	8013b48 <uxr_next_reliable_nack_buffer_to_send>
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	d1ef      	bne.n	800c2a0 <read_submessage_list+0x15c>
 800c2c0:	e749      	b.n	800c156 <read_submessage_list+0x12>
 800c2c2:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800c2c6:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800c2ca:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800c2ce:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800c2d2:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800c2d6:	4651      	mov	r1, sl
 800c2d8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800c2dc:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800c2e0:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800c2e4:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800c2e8:	4628      	mov	r0, r5
 800c2ea:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800c2ee:	f001 ff69 	bl	800e1c4 <uxr_deserialize_BaseObjectRequest>
 800c2f2:	4650      	mov	r0, sl
 800c2f4:	a90f      	add	r1, sp, #60	@ 0x3c
 800c2f6:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800c2fa:	f000 fe1b 	bl	800cf34 <uxr_parse_base_object_request>
 800c2fe:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800c302:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c304:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800c308:	9110      	str	r1, [sp, #64]	@ 0x40
 800c30a:	3f04      	subs	r7, #4
 800c30c:	f009 090e 	and.w	r9, r9, #14
 800c310:	b2bf      	uxth	r7, r7
 800c312:	f1bb 0f00 	cmp.w	fp, #0
 800c316:	d006      	beq.n	800c326 <read_submessage_list+0x1e2>
 800c318:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800c31c:	9300      	str	r3, [sp, #0]
 800c31e:	4652      	mov	r2, sl
 800c320:	2300      	movs	r3, #0
 800c322:	4620      	mov	r0, r4
 800c324:	47d8      	blx	fp
 800c326:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800c328:	b16a      	cbz	r2, 800c346 <read_submessage_list+0x202>
 800c32a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800c32c:	2100      	movs	r1, #0
 800c32e:	3802      	subs	r0, #2
 800c330:	e002      	b.n	800c338 <read_submessage_list+0x1f4>
 800c332:	3101      	adds	r1, #1
 800c334:	4291      	cmp	r1, r2
 800c336:	d006      	beq.n	800c346 <read_submessage_list+0x202>
 800c338:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800c33c:	4553      	cmp	r3, sl
 800c33e:	d1f8      	bne.n	800c332 <read_submessage_list+0x1ee>
 800c340:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800c342:	2200      	movs	r2, #0
 800c344:	545a      	strb	r2, [r3, r1]
 800c346:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800c34a:	9102      	str	r1, [sp, #8]
 800c34c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c34e:	9101      	str	r1, [sp, #4]
 800c350:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800c352:	9100      	str	r1, [sp, #0]
 800c354:	464b      	mov	r3, r9
 800c356:	463a      	mov	r2, r7
 800c358:	4629      	mov	r1, r5
 800c35a:	4620      	mov	r0, r4
 800c35c:	f7ff fc4c 	bl	800bbf8 <read_submessage_format>
 800c360:	e6f9      	b.n	800c156 <read_submessage_list+0x12>
 800c362:	4629      	mov	r1, r5
 800c364:	4620      	mov	r0, r4
 800c366:	f7ff fea5 	bl	800c0b4 <read_submessage_info>
 800c36a:	e6f4      	b.n	800c156 <read_submessage_list+0x12>
 800c36c:	2a00      	cmp	r2, #0
 800c36e:	d03e      	beq.n	800c3ee <read_submessage_list+0x2aa>
 800c370:	a910      	add	r1, sp, #64	@ 0x40
 800c372:	4628      	mov	r0, r5
 800c374:	f002 f922 	bl	800e5bc <uxr_deserialize_STATUS_Payload>
 800c378:	a90e      	add	r1, sp, #56	@ 0x38
 800c37a:	aa0d      	add	r2, sp, #52	@ 0x34
 800c37c:	a810      	add	r0, sp, #64	@ 0x40
 800c37e:	f000 fdd9 	bl	800cf34 <uxr_parse_base_object_request>
 800c382:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800c386:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c388:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800c38c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800c390:	910f      	str	r1, [sp, #60]	@ 0x3c
 800c392:	f1ba 0f00 	cmp.w	sl, #0
 800c396:	d006      	beq.n	800c3a6 <read_submessage_list+0x262>
 800c398:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800c39c:	9300      	str	r3, [sp, #0]
 800c39e:	463a      	mov	r2, r7
 800c3a0:	464b      	mov	r3, r9
 800c3a2:	4620      	mov	r0, r4
 800c3a4:	47d0      	blx	sl
 800c3a6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800c3a8:	2a00      	cmp	r2, #0
 800c3aa:	f43f aed4 	beq.w	800c156 <read_submessage_list+0x12>
 800c3ae:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800c3b0:	2100      	movs	r1, #0
 800c3b2:	3802      	subs	r0, #2
 800c3b4:	e003      	b.n	800c3be <read_submessage_list+0x27a>
 800c3b6:	3101      	adds	r1, #1
 800c3b8:	4291      	cmp	r1, r2
 800c3ba:	f43f aecc 	beq.w	800c156 <read_submessage_list+0x12>
 800c3be:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800c3c2:	42bb      	cmp	r3, r7
 800c3c4:	d1f7      	bne.n	800c3b6 <read_submessage_list+0x272>
 800c3c6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800c3c8:	f803 9001 	strb.w	r9, [r3, r1]
 800c3cc:	e6c3      	b.n	800c156 <read_submessage_list+0x12>
 800c3ce:	2a00      	cmp	r2, #0
 800c3d0:	f47f aec1 	bne.w	800c156 <read_submessage_list+0x12>
 800c3d4:	4629      	mov	r1, r5
 800c3d6:	4620      	mov	r0, r4
 800c3d8:	f000 fcf2 	bl	800cdc0 <uxr_read_create_session_status>
 800c3dc:	e6bb      	b.n	800c156 <read_submessage_list+0x12>
 800c3de:	4629      	mov	r1, r5
 800c3e0:	4620      	mov	r0, r4
 800c3e2:	f7ff fcf5 	bl	800bdd0 <read_submessage_get_info>
 800c3e6:	e6b6      	b.n	800c156 <read_submessage_list+0x12>
 800c3e8:	b017      	add	sp, #92	@ 0x5c
 800c3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3ee:	4629      	mov	r1, r5
 800c3f0:	4620      	mov	r0, r4
 800c3f2:	f000 fcf1 	bl	800cdd8 <uxr_read_delete_session_status>
 800c3f6:	e6ae      	b.n	800c156 <read_submessage_list+0x12>
 800c3f8:	f001 fbd8 	bl	800dbac <uxr_nanos>
 800c3fc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c3fe:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800c400:	464f      	mov	r7, r9
 800c402:	fbc3 2706 	smlal	r2, r7, r3, r6
 800c406:	1812      	adds	r2, r2, r0
 800c408:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c40a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800c40c:	eb47 0101 	adc.w	r1, r7, r1
 800c410:	464f      	mov	r7, r9
 800c412:	fbc3 0706 	smlal	r0, r7, r3, r6
 800c416:	463b      	mov	r3, r7
 800c418:	4684      	mov	ip, r0
 800c41a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800c41e:	fbc7 0906 	smlal	r0, r9, r7, r6
 800c422:	eb1c 0c00 	adds.w	ip, ip, r0
 800c426:	464f      	mov	r7, r9
 800c428:	eb43 0307 	adc.w	r3, r3, r7
 800c42c:	ebb2 0c0c 	subs.w	ip, r2, ip
 800c430:	eb61 0303 	sbc.w	r3, r1, r3
 800c434:	0fda      	lsrs	r2, r3, #31
 800c436:	eb12 020c 	adds.w	r2, r2, ip
 800c43a:	f143 0300 	adc.w	r3, r3, #0
 800c43e:	0852      	lsrs	r2, r2, #1
 800c440:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800c444:	105b      	asrs	r3, r3, #1
 800c446:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800c44a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800c44e:	e6dd      	b.n	800c20c <read_submessage_list+0xc8>
 800c450:	3b9aca00 	.word	0x3b9aca00

0800c454 <listen_message_reliably>:
 800c454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c458:	1e0b      	subs	r3, r1, #0
 800c45a:	b09d      	sub	sp, #116	@ 0x74
 800c45c:	bfb8      	it	lt
 800c45e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800c462:	4680      	mov	r8, r0
 800c464:	9305      	str	r3, [sp, #20]
 800c466:	f001 fb87 	bl	800db78 <uxr_millis>
 800c46a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800c46e:	4681      	mov	r9, r0
 800c470:	2a00      	cmp	r2, #0
 800c472:	f000 80a1 	beq.w	800c5b8 <listen_message_reliably+0x164>
 800c476:	2600      	movs	r6, #0
 800c478:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800c47c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800c480:	9303      	str	r3, [sp, #12]
 800c482:	4630      	mov	r0, r6
 800c484:	460f      	mov	r7, r1
 800c486:	e00f      	b.n	800c4a8 <listen_message_reliably+0x54>
 800c488:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800c48c:	9903      	ldr	r1, [sp, #12]
 800c48e:	455a      	cmp	r2, fp
 800c490:	f106 0601 	add.w	r6, r6, #1
 800c494:	eb73 0101 	sbcs.w	r1, r3, r1
 800c498:	b2f0      	uxtb	r0, r6
 800c49a:	da01      	bge.n	800c4a0 <listen_message_reliably+0x4c>
 800c49c:	4693      	mov	fp, r2
 800c49e:	9303      	str	r3, [sp, #12]
 800c4a0:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800c4a4:	4283      	cmp	r3, r0
 800c4a6:	d960      	bls.n	800c56a <listen_message_reliably+0x116>
 800c4a8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800c4ac:	2102      	movs	r1, #2
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	f001 f9e4 	bl	800d87c <uxr_stream_id>
 800c4b4:	00e4      	lsls	r4, r4, #3
 800c4b6:	f104 0520 	add.w	r5, r4, #32
 800c4ba:	4445      	add	r5, r8
 800c4bc:	4601      	mov	r1, r0
 800c4be:	463b      	mov	r3, r7
 800c4c0:	464a      	mov	r2, r9
 800c4c2:	4628      	mov	r0, r5
 800c4c4:	9109      	str	r1, [sp, #36]	@ 0x24
 800c4c6:	f007 fb13 	bl	8013af0 <uxr_update_output_stream_heartbeat_timestamp>
 800c4ca:	eb08 0304 	add.w	r3, r8, r4
 800c4ce:	2800      	cmp	r0, #0
 800c4d0:	d0da      	beq.n	800c488 <listen_message_reliably+0x34>
 800c4d2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800c4d6:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800c4da:	9304      	str	r3, [sp, #16]
 800c4dc:	4640      	mov	r0, r8
 800c4de:	f000 fd03 	bl	800cee8 <uxr_session_header_offset>
 800c4e2:	3501      	adds	r5, #1
 800c4e4:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800c4e8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800c4ec:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	2211      	movs	r2, #17
 800c4f4:	9000      	str	r0, [sp, #0]
 800c4f6:	a90c      	add	r1, sp, #48	@ 0x30
 800c4f8:	4650      	mov	r0, sl
 800c4fa:	f006 fd81 	bl	8013000 <ucdr_init_buffer_origin_offset>
 800c4fe:	2300      	movs	r3, #0
 800c500:	2205      	movs	r2, #5
 800c502:	210b      	movs	r1, #11
 800c504:	4650      	mov	r0, sl
 800c506:	f001 faf1 	bl	800daec <uxr_buffer_submessage_header>
 800c50a:	8968      	ldrh	r0, [r5, #10]
 800c50c:	2101      	movs	r1, #1
 800c50e:	f007 fb91 	bl	8013c34 <uxr_seq_num_add>
 800c512:	892b      	ldrh	r3, [r5, #8]
 800c514:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800c518:	4602      	mov	r2, r0
 800c51a:	9b04      	ldr	r3, [sp, #16]
 800c51c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800c520:	a90a      	add	r1, sp, #40	@ 0x28
 800c522:	4650      	mov	r0, sl
 800c524:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800c528:	f002 f900 	bl	800e72c <uxr_serialize_HEARTBEAT_Payload>
 800c52c:	2200      	movs	r2, #0
 800c52e:	4611      	mov	r1, r2
 800c530:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c532:	4640      	mov	r0, r8
 800c534:	f000 fc82 	bl	800ce3c <uxr_stamp_session_header>
 800c538:	4650      	mov	r0, sl
 800c53a:	f006 fd9f 	bl	801307c <ucdr_buffer_length>
 800c53e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800c542:	4602      	mov	r2, r0
 800c544:	a90c      	add	r1, sp, #48	@ 0x30
 800c546:	e9d3 0500 	ldrd	r0, r5, [r3]
 800c54a:	4444      	add	r4, r8
 800c54c:	47a8      	blx	r5
 800c54e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800c552:	9903      	ldr	r1, [sp, #12]
 800c554:	455a      	cmp	r2, fp
 800c556:	f106 0601 	add.w	r6, r6, #1
 800c55a:	eb73 0101 	sbcs.w	r1, r3, r1
 800c55e:	b2f0      	uxtb	r0, r6
 800c560:	db9c      	blt.n	800c49c <listen_message_reliably+0x48>
 800c562:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800c566:	4283      	cmp	r3, r0
 800c568:	d89e      	bhi.n	800c4a8 <listen_message_reliably+0x54>
 800c56a:	9a03      	ldr	r2, [sp, #12]
 800c56c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800c570:	429a      	cmp	r2, r3
 800c572:	bf08      	it	eq
 800c574:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800c578:	d01e      	beq.n	800c5b8 <listen_message_reliably+0x164>
 800c57a:	ebab 0309 	sub.w	r3, fp, r9
 800c57e:	9905      	ldr	r1, [sp, #20]
 800c580:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800c584:	2b00      	cmp	r3, #0
 800c586:	bf08      	it	eq
 800c588:	2301      	moveq	r3, #1
 800c58a:	4299      	cmp	r1, r3
 800c58c:	bfa8      	it	ge
 800c58e:	4619      	movge	r1, r3
 800c590:	6894      	ldr	r4, [r2, #8]
 800c592:	6810      	ldr	r0, [r2, #0]
 800c594:	4689      	mov	r9, r1
 800c596:	460b      	mov	r3, r1
 800c598:	aa08      	add	r2, sp, #32
 800c59a:	a907      	add	r1, sp, #28
 800c59c:	47a0      	blx	r4
 800c59e:	b968      	cbnz	r0, 800c5bc <listen_message_reliably+0x168>
 800c5a0:	9b05      	ldr	r3, [sp, #20]
 800c5a2:	eba3 0309 	sub.w	r3, r3, r9
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	9305      	str	r3, [sp, #20]
 800c5aa:	f73f af5c 	bgt.w	800c466 <listen_message_reliably+0x12>
 800c5ae:	4604      	mov	r4, r0
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	b01d      	add	sp, #116	@ 0x74
 800c5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5b8:	9b05      	ldr	r3, [sp, #20]
 800c5ba:	e7e0      	b.n	800c57e <listen_message_reliably+0x12a>
 800c5bc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800c5c0:	4604      	mov	r4, r0
 800c5c2:	a80c      	add	r0, sp, #48	@ 0x30
 800c5c4:	f006 fd2e 	bl	8013024 <ucdr_init_buffer>
 800c5c8:	2500      	movs	r5, #0
 800c5ca:	f10d 031a 	add.w	r3, sp, #26
 800c5ce:	aa06      	add	r2, sp, #24
 800c5d0:	a90c      	add	r1, sp, #48	@ 0x30
 800c5d2:	4640      	mov	r0, r8
 800c5d4:	f88d 5018 	strb.w	r5, [sp, #24]
 800c5d8:	f000 fc44 	bl	800ce64 <uxr_read_session_header>
 800c5dc:	b918      	cbnz	r0, 800c5e6 <listen_message_reliably+0x192>
 800c5de:	4620      	mov	r0, r4
 800c5e0:	b01d      	add	sp, #116	@ 0x74
 800c5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5e6:	4629      	mov	r1, r5
 800c5e8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800c5ec:	f001 f970 	bl	800d8d0 <uxr_stream_id_from_raw>
 800c5f0:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800c5f4:	2d01      	cmp	r5, #1
 800c5f6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800c5fa:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800c5fe:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800c602:	d04b      	beq.n	800c69c <listen_message_reliably+0x248>
 800c604:	2d02      	cmp	r5, #2
 800c606:	d00f      	beq.n	800c628 <listen_message_reliably+0x1d4>
 800c608:	2d00      	cmp	r5, #0
 800c60a:	d1e8      	bne.n	800c5de <listen_message_reliably+0x18a>
 800c60c:	4629      	mov	r1, r5
 800c60e:	4628      	mov	r0, r5
 800c610:	f001 f95e 	bl	800d8d0 <uxr_stream_id_from_raw>
 800c614:	a90c      	add	r1, sp, #48	@ 0x30
 800c616:	4602      	mov	r2, r0
 800c618:	4640      	mov	r0, r8
 800c61a:	920a      	str	r2, [sp, #40]	@ 0x28
 800c61c:	f7ff fd92 	bl	800c144 <read_submessage_list>
 800c620:	4620      	mov	r0, r4
 800c622:	b01d      	add	sp, #116	@ 0x74
 800c624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c628:	4631      	mov	r1, r6
 800c62a:	f108 0008 	add.w	r0, r8, #8
 800c62e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800c632:	f001 fa3b 	bl	800daac <uxr_get_input_reliable_stream>
 800c636:	4607      	mov	r7, r0
 800c638:	b338      	cbz	r0, 800c68a <listen_message_reliably+0x236>
 800c63a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c63c:	9203      	str	r2, [sp, #12]
 800c63e:	a80c      	add	r0, sp, #48	@ 0x30
 800c640:	f006 fd20 	bl	8013084 <ucdr_buffer_remaining>
 800c644:	4603      	mov	r3, r0
 800c646:	f10d 0019 	add.w	r0, sp, #25
 800c64a:	9000      	str	r0, [sp, #0]
 800c64c:	9a03      	ldr	r2, [sp, #12]
 800c64e:	4651      	mov	r1, sl
 800c650:	4638      	mov	r0, r7
 800c652:	f006 fe63 	bl	801331c <uxr_receive_reliable_message>
 800c656:	b1c0      	cbz	r0, 800c68a <listen_message_reliably+0x236>
 800c658:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800c65c:	b393      	cbz	r3, 800c6c4 <listen_message_reliably+0x270>
 800c65e:	ad14      	add	r5, sp, #80	@ 0x50
 800c660:	f04f 0a02 	mov.w	sl, #2
 800c664:	e00a      	b.n	800c67c <listen_message_reliably+0x228>
 800c666:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800c66a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800c66e:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800c672:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c674:	4629      	mov	r1, r5
 800c676:	4640      	mov	r0, r8
 800c678:	f7ff fd64 	bl	800c144 <read_submessage_list>
 800c67c:	2204      	movs	r2, #4
 800c67e:	4629      	mov	r1, r5
 800c680:	4638      	mov	r0, r7
 800c682:	f006 fecb 	bl	801341c <uxr_next_input_reliable_buffer_available>
 800c686:	2800      	cmp	r0, #0
 800c688:	d1ed      	bne.n	800c666 <listen_message_reliably+0x212>
 800c68a:	4640      	mov	r0, r8
 800c68c:	4632      	mov	r2, r6
 800c68e:	4649      	mov	r1, r9
 800c690:	f7ff fbd4 	bl	800be3c <write_submessage_acknack.isra.0>
 800c694:	4620      	mov	r0, r4
 800c696:	b01d      	add	sp, #116	@ 0x74
 800c698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c69c:	4631      	mov	r1, r6
 800c69e:	f108 0008 	add.w	r0, r8, #8
 800c6a2:	f001 f9f9 	bl	800da98 <uxr_get_input_best_effort_stream>
 800c6a6:	2800      	cmp	r0, #0
 800c6a8:	d099      	beq.n	800c5de <listen_message_reliably+0x18a>
 800c6aa:	4651      	mov	r1, sl
 800c6ac:	f006 fda2 	bl	80131f4 <uxr_receive_best_effort_message>
 800c6b0:	2800      	cmp	r0, #0
 800c6b2:	d094      	beq.n	800c5de <listen_message_reliably+0x18a>
 800c6b4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800c6b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c6ba:	a90c      	add	r1, sp, #48	@ 0x30
 800c6bc:	4640      	mov	r0, r8
 800c6be:	f7ff fd41 	bl	800c144 <read_submessage_list>
 800c6c2:	e78c      	b.n	800c5de <listen_message_reliably+0x18a>
 800c6c4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800c6c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c6ca:	a90c      	add	r1, sp, #48	@ 0x30
 800c6cc:	4640      	mov	r0, r8
 800c6ce:	f7ff fd39 	bl	800c144 <read_submessage_list>
 800c6d2:	e7c4      	b.n	800c65e <listen_message_reliably+0x20a>

0800c6d4 <uxr_run_session_timeout>:
 800c6d4:	b570      	push	{r4, r5, r6, lr}
 800c6d6:	4604      	mov	r4, r0
 800c6d8:	460d      	mov	r5, r1
 800c6da:	f001 fa4d 	bl	800db78 <uxr_millis>
 800c6de:	4606      	mov	r6, r0
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	f7ff fc71 	bl	800bfc8 <uxr_flash_output_streams>
 800c6e6:	4629      	mov	r1, r5
 800c6e8:	4620      	mov	r0, r4
 800c6ea:	f7ff feb3 	bl	800c454 <listen_message_reliably>
 800c6ee:	f001 fa43 	bl	800db78 <uxr_millis>
 800c6f2:	1b83      	subs	r3, r0, r6
 800c6f4:	1ae9      	subs	r1, r5, r3
 800c6f6:	2900      	cmp	r1, #0
 800c6f8:	dcf6      	bgt.n	800c6e8 <uxr_run_session_timeout+0x14>
 800c6fa:	f104 0008 	add.w	r0, r4, #8
 800c6fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c702:	f001 b9dd 	b.w	800dac0 <uxr_output_streams_confirmed>
 800c706:	bf00      	nop

0800c708 <uxr_run_session_until_data>:
 800c708:	b570      	push	{r4, r5, r6, lr}
 800c70a:	4604      	mov	r4, r0
 800c70c:	460d      	mov	r5, r1
 800c70e:	f001 fa33 	bl	800db78 <uxr_millis>
 800c712:	4606      	mov	r6, r0
 800c714:	4620      	mov	r0, r4
 800c716:	f7ff fc57 	bl	800bfc8 <uxr_flash_output_streams>
 800c71a:	2300      	movs	r3, #0
 800c71c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800c720:	4629      	mov	r1, r5
 800c722:	e005      	b.n	800c730 <uxr_run_session_until_data+0x28>
 800c724:	f001 fa28 	bl	800db78 <uxr_millis>
 800c728:	1b83      	subs	r3, r0, r6
 800c72a:	1ae9      	subs	r1, r5, r3
 800c72c:	2900      	cmp	r1, #0
 800c72e:	dd07      	ble.n	800c740 <uxr_run_session_until_data+0x38>
 800c730:	4620      	mov	r0, r4
 800c732:	f7ff fe8f 	bl	800c454 <listen_message_reliably>
 800c736:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800c73a:	2800      	cmp	r0, #0
 800c73c:	d0f2      	beq.n	800c724 <uxr_run_session_until_data+0x1c>
 800c73e:	bd70      	pop	{r4, r5, r6, pc}
 800c740:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800c744:	bd70      	pop	{r4, r5, r6, pc}
 800c746:	bf00      	nop

0800c748 <uxr_run_session_until_confirm_delivery>:
 800c748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c74c:	4606      	mov	r6, r0
 800c74e:	460d      	mov	r5, r1
 800c750:	f001 fa12 	bl	800db78 <uxr_millis>
 800c754:	4607      	mov	r7, r0
 800c756:	4630      	mov	r0, r6
 800c758:	f7ff fc36 	bl	800bfc8 <uxr_flash_output_streams>
 800c75c:	2d00      	cmp	r5, #0
 800c75e:	f106 0808 	add.w	r8, r6, #8
 800c762:	bfa8      	it	ge
 800c764:	462c      	movge	r4, r5
 800c766:	da07      	bge.n	800c778 <uxr_run_session_until_confirm_delivery+0x30>
 800c768:	e00e      	b.n	800c788 <uxr_run_session_until_confirm_delivery+0x40>
 800c76a:	f7ff fe73 	bl	800c454 <listen_message_reliably>
 800c76e:	f001 fa03 	bl	800db78 <uxr_millis>
 800c772:	1bc3      	subs	r3, r0, r7
 800c774:	1aec      	subs	r4, r5, r3
 800c776:	d407      	bmi.n	800c788 <uxr_run_session_until_confirm_delivery+0x40>
 800c778:	4640      	mov	r0, r8
 800c77a:	f001 f9a1 	bl	800dac0 <uxr_output_streams_confirmed>
 800c77e:	4603      	mov	r3, r0
 800c780:	4621      	mov	r1, r4
 800c782:	4630      	mov	r0, r6
 800c784:	2b00      	cmp	r3, #0
 800c786:	d0f0      	beq.n	800c76a <uxr_run_session_until_confirm_delivery+0x22>
 800c788:	4640      	mov	r0, r8
 800c78a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c78e:	f001 b997 	b.w	800dac0 <uxr_output_streams_confirmed>
 800c792:	bf00      	nop

0800c794 <uxr_run_session_until_all_status>:
 800c794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c798:	9c08      	ldr	r4, [sp, #32]
 800c79a:	4606      	mov	r6, r0
 800c79c:	460f      	mov	r7, r1
 800c79e:	4691      	mov	r9, r2
 800c7a0:	461d      	mov	r5, r3
 800c7a2:	f7ff fc11 	bl	800bfc8 <uxr_flash_output_streams>
 800c7a6:	b124      	cbz	r4, 800c7b2 <uxr_run_session_until_all_status+0x1e>
 800c7a8:	4622      	mov	r2, r4
 800c7aa:	21ff      	movs	r1, #255	@ 0xff
 800c7ac:	4628      	mov	r0, r5
 800c7ae:	f007 ffab 	bl	8014708 <memset>
 800c7b2:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800c7b6:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800c7b8:	f001 f9de 	bl	800db78 <uxr_millis>
 800c7bc:	3d01      	subs	r5, #1
 800c7be:	f1a9 0902 	sub.w	r9, r9, #2
 800c7c2:	4680      	mov	r8, r0
 800c7c4:	4639      	mov	r1, r7
 800c7c6:	4630      	mov	r0, r6
 800c7c8:	f7ff fe44 	bl	800c454 <listen_message_reliably>
 800c7cc:	f001 f9d4 	bl	800db78 <uxr_millis>
 800c7d0:	eba0 0008 	sub.w	r0, r0, r8
 800c7d4:	1a39      	subs	r1, r7, r0
 800c7d6:	b344      	cbz	r4, 800c82a <uxr_run_session_until_all_status+0x96>
 800c7d8:	4628      	mov	r0, r5
 800c7da:	46ac      	mov	ip, r5
 800c7dc:	2301      	movs	r3, #1
 800c7de:	e002      	b.n	800c7e6 <uxr_run_session_until_all_status+0x52>
 800c7e0:	42a3      	cmp	r3, r4
 800c7e2:	d20d      	bcs.n	800c800 <uxr_run_session_until_all_status+0x6c>
 800c7e4:	3301      	adds	r3, #1
 800c7e6:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800c7ea:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800c7ee:	d1f7      	bne.n	800c7e0 <uxr_run_session_until_all_status+0x4c>
 800c7f0:	42a3      	cmp	r3, r4
 800c7f2:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800c7f6:	d213      	bcs.n	800c820 <uxr_run_session_until_all_status+0x8c>
 800c7f8:	2a00      	cmp	r2, #0
 800c7fa:	d0f3      	beq.n	800c7e4 <uxr_run_session_until_all_status+0x50>
 800c7fc:	2900      	cmp	r1, #0
 800c7fe:	dce2      	bgt.n	800c7c6 <uxr_run_session_until_all_status+0x32>
 800c800:	2300      	movs	r3, #0
 800c802:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800c804:	442c      	add	r4, r5
 800c806:	e001      	b.n	800c80c <uxr_run_session_until_all_status+0x78>
 800c808:	2b01      	cmp	r3, #1
 800c80a:	d812      	bhi.n	800c832 <uxr_run_session_until_all_status+0x9e>
 800c80c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800c810:	4284      	cmp	r4, r0
 800c812:	d1f9      	bne.n	800c808 <uxr_run_session_until_all_status+0x74>
 800c814:	2b01      	cmp	r3, #1
 800c816:	bf8c      	ite	hi
 800c818:	2000      	movhi	r0, #0
 800c81a:	2001      	movls	r0, #1
 800c81c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c820:	2900      	cmp	r1, #0
 800c822:	dded      	ble.n	800c800 <uxr_run_session_until_all_status+0x6c>
 800c824:	2a00      	cmp	r2, #0
 800c826:	d1ce      	bne.n	800c7c6 <uxr_run_session_until_all_status+0x32>
 800c828:	e7ea      	b.n	800c800 <uxr_run_session_until_all_status+0x6c>
 800c82a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800c82c:	2001      	movs	r0, #1
 800c82e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c832:	2000      	movs	r0, #0
 800c834:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800c838 <uxr_sync_session>:
 800c838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c83a:	b093      	sub	sp, #76	@ 0x4c
 800c83c:	4604      	mov	r4, r0
 800c83e:	460d      	mov	r5, r1
 800c840:	f000 fb52 	bl	800cee8 <uxr_session_header_offset>
 800c844:	2214      	movs	r2, #20
 800c846:	eb0d 0102 	add.w	r1, sp, r2
 800c84a:	9000      	str	r0, [sp, #0]
 800c84c:	2300      	movs	r3, #0
 800c84e:	a80a      	add	r0, sp, #40	@ 0x28
 800c850:	f006 fbd6 	bl	8013000 <ucdr_init_buffer_origin_offset>
 800c854:	2300      	movs	r3, #0
 800c856:	2208      	movs	r2, #8
 800c858:	210e      	movs	r1, #14
 800c85a:	a80a      	add	r0, sp, #40	@ 0x28
 800c85c:	f001 f946 	bl	800daec <uxr_buffer_submessage_header>
 800c860:	f001 f9a4 	bl	800dbac <uxr_nanos>
 800c864:	a31c      	add	r3, pc, #112	@ (adr r3, 800c8d8 <uxr_sync_session+0xa0>)
 800c866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86a:	460e      	mov	r6, r1
 800c86c:	4607      	mov	r7, r0
 800c86e:	f7f3 fd3f 	bl	80002f0 <__aeabi_ldivmod>
 800c872:	4631      	mov	r1, r6
 800c874:	9003      	str	r0, [sp, #12]
 800c876:	a318      	add	r3, pc, #96	@ (adr r3, 800c8d8 <uxr_sync_session+0xa0>)
 800c878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c87c:	4638      	mov	r0, r7
 800c87e:	f7f3 fd37 	bl	80002f0 <__aeabi_ldivmod>
 800c882:	a903      	add	r1, sp, #12
 800c884:	a80a      	add	r0, sp, #40	@ 0x28
 800c886:	9204      	str	r2, [sp, #16]
 800c888:	f001 ff76 	bl	800e778 <uxr_serialize_TIMESTAMP_Payload>
 800c88c:	2200      	movs	r2, #0
 800c88e:	4611      	mov	r1, r2
 800c890:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c892:	4620      	mov	r0, r4
 800c894:	f000 fad2 	bl	800ce3c <uxr_stamp_session_header>
 800c898:	a80a      	add	r0, sp, #40	@ 0x28
 800c89a:	f006 fbef 	bl	801307c <ucdr_buffer_length>
 800c89e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c8a0:	4602      	mov	r2, r0
 800c8a2:	a905      	add	r1, sp, #20
 800c8a4:	e9d3 0600 	ldrd	r0, r6, [r3]
 800c8a8:	47b0      	blx	r6
 800c8aa:	f001 f965 	bl	800db78 <uxr_millis>
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	4606      	mov	r6, r0
 800c8b2:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 800c8b6:	4629      	mov	r1, r5
 800c8b8:	e000      	b.n	800c8bc <uxr_sync_session+0x84>
 800c8ba:	b950      	cbnz	r0, 800c8d2 <uxr_sync_session+0x9a>
 800c8bc:	4620      	mov	r0, r4
 800c8be:	f7ff fdc9 	bl	800c454 <listen_message_reliably>
 800c8c2:	f001 f959 	bl	800db78 <uxr_millis>
 800c8c6:	1b83      	subs	r3, r0, r6
 800c8c8:	1ae9      	subs	r1, r5, r3
 800c8ca:	2900      	cmp	r1, #0
 800c8cc:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 800c8d0:	dcf3      	bgt.n	800c8ba <uxr_sync_session+0x82>
 800c8d2:	b013      	add	sp, #76	@ 0x4c
 800c8d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8d6:	bf00      	nop
 800c8d8:	3b9aca00 	.word	0x3b9aca00
 800c8dc:	00000000 	.word	0x00000000

0800c8e0 <wait_session_status>:
 800c8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e4:	4604      	mov	r4, r0
 800c8e6:	b09d      	sub	sp, #116	@ 0x74
 800c8e8:	20ff      	movs	r0, #255	@ 0xff
 800c8ea:	7160      	strb	r0, [r4, #5]
 800c8ec:	9303      	str	r3, [sp, #12]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	f000 80b6 	beq.w	800ca60 <wait_session_status+0x180>
 800c8f4:	468a      	mov	sl, r1
 800c8f6:	4691      	mov	r9, r2
 800c8f8:	f04f 0b00 	mov.w	fp, #0
 800c8fc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c8fe:	464a      	mov	r2, r9
 800c900:	e9d3 0500 	ldrd	r0, r5, [r3]
 800c904:	4651      	mov	r1, sl
 800c906:	47a8      	blx	r5
 800c908:	f001 f936 	bl	800db78 <uxr_millis>
 800c90c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c910:	4605      	mov	r5, r0
 800c912:	e009      	b.n	800c928 <wait_session_status+0x48>
 800c914:	f001 f930 	bl	800db78 <uxr_millis>
 800c918:	1b40      	subs	r0, r0, r5
 800c91a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800c91e:	2b00      	cmp	r3, #0
 800c920:	dd40      	ble.n	800c9a4 <wait_session_status+0xc4>
 800c922:	7960      	ldrb	r0, [r4, #5]
 800c924:	28ff      	cmp	r0, #255	@ 0xff
 800c926:	d145      	bne.n	800c9b4 <wait_session_status+0xd4>
 800c928:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800c92a:	a908      	add	r1, sp, #32
 800c92c:	6896      	ldr	r6, [r2, #8]
 800c92e:	6810      	ldr	r0, [r2, #0]
 800c930:	aa09      	add	r2, sp, #36	@ 0x24
 800c932:	47b0      	blx	r6
 800c934:	2800      	cmp	r0, #0
 800c936:	d0ed      	beq.n	800c914 <wait_session_status+0x34>
 800c938:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800c93c:	a80c      	add	r0, sp, #48	@ 0x30
 800c93e:	f006 fb71 	bl	8013024 <ucdr_init_buffer>
 800c942:	2600      	movs	r6, #0
 800c944:	f10d 031e 	add.w	r3, sp, #30
 800c948:	aa07      	add	r2, sp, #28
 800c94a:	a90c      	add	r1, sp, #48	@ 0x30
 800c94c:	4620      	mov	r0, r4
 800c94e:	f88d 601c 	strb.w	r6, [sp, #28]
 800c952:	f000 fa87 	bl	800ce64 <uxr_read_session_header>
 800c956:	2800      	cmp	r0, #0
 800c958:	d0dc      	beq.n	800c914 <wait_session_status+0x34>
 800c95a:	4631      	mov	r1, r6
 800c95c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800c960:	f000 ffb6 	bl	800d8d0 <uxr_stream_id_from_raw>
 800c964:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800c968:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800c96c:	9302      	str	r3, [sp, #8]
 800c96e:	2f01      	cmp	r7, #1
 800c970:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800c974:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800c978:	d05c      	beq.n	800ca34 <wait_session_status+0x154>
 800c97a:	2f02      	cmp	r7, #2
 800c97c:	d020      	beq.n	800c9c0 <wait_session_status+0xe0>
 800c97e:	2f00      	cmp	r7, #0
 800c980:	d1c8      	bne.n	800c914 <wait_session_status+0x34>
 800c982:	4639      	mov	r1, r7
 800c984:	4638      	mov	r0, r7
 800c986:	f000 ffa3 	bl	800d8d0 <uxr_stream_id_from_raw>
 800c98a:	a90c      	add	r1, sp, #48	@ 0x30
 800c98c:	4602      	mov	r2, r0
 800c98e:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c990:	4620      	mov	r0, r4
 800c992:	f7ff fbd7 	bl	800c144 <read_submessage_list>
 800c996:	f001 f8ef 	bl	800db78 <uxr_millis>
 800c99a:	1b40      	subs	r0, r0, r5
 800c99c:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	dcbe      	bgt.n	800c922 <wait_session_status+0x42>
 800c9a4:	9b03      	ldr	r3, [sp, #12]
 800c9a6:	7960      	ldrb	r0, [r4, #5]
 800c9a8:	f10b 0b01 	add.w	fp, fp, #1
 800c9ac:	455b      	cmp	r3, fp
 800c9ae:	d001      	beq.n	800c9b4 <wait_session_status+0xd4>
 800c9b0:	28ff      	cmp	r0, #255	@ 0xff
 800c9b2:	d0a3      	beq.n	800c8fc <wait_session_status+0x1c>
 800c9b4:	38ff      	subs	r0, #255	@ 0xff
 800c9b6:	bf18      	it	ne
 800c9b8:	2001      	movne	r0, #1
 800c9ba:	b01d      	add	sp, #116	@ 0x74
 800c9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9c0:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800c9c4:	9304      	str	r3, [sp, #16]
 800c9c6:	4631      	mov	r1, r6
 800c9c8:	f104 0008 	add.w	r0, r4, #8
 800c9cc:	f001 f86e 	bl	800daac <uxr_get_input_reliable_stream>
 800c9d0:	4680      	mov	r8, r0
 800c9d2:	b348      	cbz	r0, 800ca28 <wait_session_status+0x148>
 800c9d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c9d6:	9205      	str	r2, [sp, #20]
 800c9d8:	a80c      	add	r0, sp, #48	@ 0x30
 800c9da:	f006 fb53 	bl	8013084 <ucdr_buffer_remaining>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	f10d 001d 	add.w	r0, sp, #29
 800c9e4:	9000      	str	r0, [sp, #0]
 800c9e6:	9a05      	ldr	r2, [sp, #20]
 800c9e8:	9902      	ldr	r1, [sp, #8]
 800c9ea:	4640      	mov	r0, r8
 800c9ec:	f006 fc96 	bl	801331c <uxr_receive_reliable_message>
 800c9f0:	b1d0      	cbz	r0, 800ca28 <wait_session_status+0x148>
 800c9f2:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d03a      	beq.n	800ca70 <wait_session_status+0x190>
 800c9fa:	9f04      	ldr	r7, [sp, #16]
 800c9fc:	e00a      	b.n	800ca14 <wait_session_status+0x134>
 800c9fe:	f04f 0302 	mov.w	r3, #2
 800ca02:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800ca06:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800ca0a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800ca0e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ca10:	f7ff fb98 	bl	800c144 <read_submessage_list>
 800ca14:	a914      	add	r1, sp, #80	@ 0x50
 800ca16:	2204      	movs	r2, #4
 800ca18:	4640      	mov	r0, r8
 800ca1a:	f006 fcff 	bl	801341c <uxr_next_input_reliable_buffer_available>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	a914      	add	r1, sp, #80	@ 0x50
 800ca22:	4620      	mov	r0, r4
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d1ea      	bne.n	800c9fe <wait_session_status+0x11e>
 800ca28:	9904      	ldr	r1, [sp, #16]
 800ca2a:	4632      	mov	r2, r6
 800ca2c:	4620      	mov	r0, r4
 800ca2e:	f7ff fa05 	bl	800be3c <write_submessage_acknack.isra.0>
 800ca32:	e76f      	b.n	800c914 <wait_session_status+0x34>
 800ca34:	4631      	mov	r1, r6
 800ca36:	f104 0008 	add.w	r0, r4, #8
 800ca3a:	f001 f82d 	bl	800da98 <uxr_get_input_best_effort_stream>
 800ca3e:	2800      	cmp	r0, #0
 800ca40:	f43f af68 	beq.w	800c914 <wait_session_status+0x34>
 800ca44:	9902      	ldr	r1, [sp, #8]
 800ca46:	f006 fbd5 	bl	80131f4 <uxr_receive_best_effort_message>
 800ca4a:	2800      	cmp	r0, #0
 800ca4c:	f43f af62 	beq.w	800c914 <wait_session_status+0x34>
 800ca50:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800ca54:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ca56:	a90c      	add	r1, sp, #48	@ 0x30
 800ca58:	4620      	mov	r0, r4
 800ca5a:	f7ff fb73 	bl	800c144 <read_submessage_list>
 800ca5e:	e759      	b.n	800c914 <wait_session_status+0x34>
 800ca60:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ca62:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ca66:	47a0      	blx	r4
 800ca68:	2001      	movs	r0, #1
 800ca6a:	b01d      	add	sp, #116	@ 0x74
 800ca6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca70:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800ca74:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ca76:	a90c      	add	r1, sp, #48	@ 0x30
 800ca78:	4620      	mov	r0, r4
 800ca7a:	f7ff fb63 	bl	800c144 <read_submessage_list>
 800ca7e:	e7bc      	b.n	800c9fa <wait_session_status+0x11a>

0800ca80 <uxr_delete_session_retries>:
 800ca80:	b530      	push	{r4, r5, lr}
 800ca82:	b08f      	sub	sp, #60	@ 0x3c
 800ca84:	4604      	mov	r4, r0
 800ca86:	460d      	mov	r5, r1
 800ca88:	f000 fa2e 	bl	800cee8 <uxr_session_header_offset>
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	2210      	movs	r2, #16
 800ca90:	9000      	str	r0, [sp, #0]
 800ca92:	a902      	add	r1, sp, #8
 800ca94:	a806      	add	r0, sp, #24
 800ca96:	f006 fab3 	bl	8013000 <ucdr_init_buffer_origin_offset>
 800ca9a:	a906      	add	r1, sp, #24
 800ca9c:	4620      	mov	r0, r4
 800ca9e:	f000 f973 	bl	800cd88 <uxr_buffer_delete_session>
 800caa2:	2200      	movs	r2, #0
 800caa4:	4611      	mov	r1, r2
 800caa6:	9b06      	ldr	r3, [sp, #24]
 800caa8:	4620      	mov	r0, r4
 800caaa:	f000 f9c7 	bl	800ce3c <uxr_stamp_session_header>
 800caae:	a806      	add	r0, sp, #24
 800cab0:	f006 fae4 	bl	801307c <ucdr_buffer_length>
 800cab4:	462b      	mov	r3, r5
 800cab6:	4602      	mov	r2, r0
 800cab8:	a902      	add	r1, sp, #8
 800caba:	4620      	mov	r0, r4
 800cabc:	f7ff ff10 	bl	800c8e0 <wait_session_status>
 800cac0:	b118      	cbz	r0, 800caca <uxr_delete_session_retries+0x4a>
 800cac2:	7960      	ldrb	r0, [r4, #5]
 800cac4:	fab0 f080 	clz	r0, r0
 800cac8:	0940      	lsrs	r0, r0, #5
 800caca:	b00f      	add	sp, #60	@ 0x3c
 800cacc:	bd30      	pop	{r4, r5, pc}
 800cace:	bf00      	nop

0800cad0 <uxr_create_session>:
 800cad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cad4:	f100 0b08 	add.w	fp, r0, #8
 800cad8:	b0ab      	sub	sp, #172	@ 0xac
 800cada:	4604      	mov	r4, r0
 800cadc:	4658      	mov	r0, fp
 800cade:	f000 ff2b 	bl	800d938 <uxr_reset_stream_storage>
 800cae2:	4620      	mov	r0, r4
 800cae4:	f000 fa00 	bl	800cee8 <uxr_session_header_offset>
 800cae8:	2300      	movs	r3, #0
 800caea:	9000      	str	r0, [sp, #0]
 800caec:	221c      	movs	r2, #28
 800caee:	a90b      	add	r1, sp, #44	@ 0x2c
 800caf0:	a812      	add	r0, sp, #72	@ 0x48
 800caf2:	f006 fa85 	bl	8013000 <ucdr_init_buffer_origin_offset>
 800caf6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800caf8:	8a1a      	ldrh	r2, [r3, #16]
 800cafa:	3a04      	subs	r2, #4
 800cafc:	b292      	uxth	r2, r2
 800cafe:	a912      	add	r1, sp, #72	@ 0x48
 800cb00:	4620      	mov	r0, r4
 800cb02:	f000 f917 	bl	800cd34 <uxr_buffer_create_session>
 800cb06:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800cb08:	4620      	mov	r0, r4
 800cb0a:	f000 f983 	bl	800ce14 <uxr_stamp_create_session_header>
 800cb0e:	a812      	add	r0, sp, #72	@ 0x48
 800cb10:	f006 fab4 	bl	801307c <ucdr_buffer_length>
 800cb14:	23ff      	movs	r3, #255	@ 0xff
 800cb16:	7163      	strb	r3, [r4, #5]
 800cb18:	230a      	movs	r3, #10
 800cb1a:	46da      	mov	sl, fp
 800cb1c:	9303      	str	r3, [sp, #12]
 800cb1e:	4683      	mov	fp, r0
 800cb20:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800cb22:	465a      	mov	r2, fp
 800cb24:	e9d3 0500 	ldrd	r0, r5, [r3]
 800cb28:	a90b      	add	r1, sp, #44	@ 0x2c
 800cb2a:	47a8      	blx	r5
 800cb2c:	f001 f824 	bl	800db78 <uxr_millis>
 800cb30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800cb34:	4605      	mov	r5, r0
 800cb36:	e009      	b.n	800cb4c <uxr_create_session+0x7c>
 800cb38:	f001 f81e 	bl	800db78 <uxr_millis>
 800cb3c:	1b40      	subs	r0, r0, r5
 800cb3e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	7962      	ldrb	r2, [r4, #5]
 800cb46:	dd38      	ble.n	800cbba <uxr_create_session+0xea>
 800cb48:	2aff      	cmp	r2, #255	@ 0xff
 800cb4a:	d13c      	bne.n	800cbc6 <uxr_create_session+0xf6>
 800cb4c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800cb4e:	a907      	add	r1, sp, #28
 800cb50:	6896      	ldr	r6, [r2, #8]
 800cb52:	6810      	ldr	r0, [r2, #0]
 800cb54:	aa08      	add	r2, sp, #32
 800cb56:	47b0      	blx	r6
 800cb58:	2800      	cmp	r0, #0
 800cb5a:	d0ed      	beq.n	800cb38 <uxr_create_session+0x68>
 800cb5c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800cb60:	a81a      	add	r0, sp, #104	@ 0x68
 800cb62:	f006 fa5f 	bl	8013024 <ucdr_init_buffer>
 800cb66:	2600      	movs	r6, #0
 800cb68:	f10d 031a 	add.w	r3, sp, #26
 800cb6c:	aa06      	add	r2, sp, #24
 800cb6e:	a91a      	add	r1, sp, #104	@ 0x68
 800cb70:	4620      	mov	r0, r4
 800cb72:	f88d 6018 	strb.w	r6, [sp, #24]
 800cb76:	f000 f975 	bl	800ce64 <uxr_read_session_header>
 800cb7a:	2800      	cmp	r0, #0
 800cb7c:	d0dc      	beq.n	800cb38 <uxr_create_session+0x68>
 800cb7e:	4631      	mov	r1, r6
 800cb80:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800cb84:	f000 fea4 	bl	800d8d0 <uxr_stream_id_from_raw>
 800cb88:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800cb8c:	2e01      	cmp	r6, #1
 800cb8e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800cb92:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800cb96:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800cb9a:	d053      	beq.n	800cc44 <uxr_create_session+0x174>
 800cb9c:	2e02      	cmp	r6, #2
 800cb9e:	d018      	beq.n	800cbd2 <uxr_create_session+0x102>
 800cba0:	2e00      	cmp	r6, #0
 800cba2:	d1c9      	bne.n	800cb38 <uxr_create_session+0x68>
 800cba4:	4631      	mov	r1, r6
 800cba6:	4630      	mov	r0, r6
 800cba8:	f000 fe92 	bl	800d8d0 <uxr_stream_id_from_raw>
 800cbac:	a91a      	add	r1, sp, #104	@ 0x68
 800cbae:	4602      	mov	r2, r0
 800cbb0:	900a      	str	r0, [sp, #40]	@ 0x28
 800cbb2:	4620      	mov	r0, r4
 800cbb4:	f7ff fac6 	bl	800c144 <read_submessage_list>
 800cbb8:	e7be      	b.n	800cb38 <uxr_create_session+0x68>
 800cbba:	9b03      	ldr	r3, [sp, #12]
 800cbbc:	3b01      	subs	r3, #1
 800cbbe:	9303      	str	r3, [sp, #12]
 800cbc0:	d001      	beq.n	800cbc6 <uxr_create_session+0xf6>
 800cbc2:	2aff      	cmp	r2, #255	@ 0xff
 800cbc4:	d0ac      	beq.n	800cb20 <uxr_create_session+0x50>
 800cbc6:	2a00      	cmp	r2, #0
 800cbc8:	d051      	beq.n	800cc6e <uxr_create_session+0x19e>
 800cbca:	2000      	movs	r0, #0
 800cbcc:	b02b      	add	sp, #172	@ 0xac
 800cbce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbd2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800cbd6:	9304      	str	r3, [sp, #16]
 800cbd8:	4639      	mov	r1, r7
 800cbda:	4650      	mov	r0, sl
 800cbdc:	f000 ff66 	bl	800daac <uxr_get_input_reliable_stream>
 800cbe0:	4680      	mov	r8, r0
 800cbe2:	b348      	cbz	r0, 800cc38 <uxr_create_session+0x168>
 800cbe4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cbe6:	9205      	str	r2, [sp, #20]
 800cbe8:	a81a      	add	r0, sp, #104	@ 0x68
 800cbea:	f006 fa4b 	bl	8013084 <ucdr_buffer_remaining>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	f10d 0019 	add.w	r0, sp, #25
 800cbf4:	9000      	str	r0, [sp, #0]
 800cbf6:	9a05      	ldr	r2, [sp, #20]
 800cbf8:	4649      	mov	r1, r9
 800cbfa:	4640      	mov	r0, r8
 800cbfc:	f006 fb8e 	bl	801331c <uxr_receive_reliable_message>
 800cc00:	b1d0      	cbz	r0, 800cc38 <uxr_create_session+0x168>
 800cc02:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d038      	beq.n	800cc7c <uxr_create_session+0x1ac>
 800cc0a:	9e04      	ldr	r6, [sp, #16]
 800cc0c:	e00a      	b.n	800cc24 <uxr_create_session+0x154>
 800cc0e:	f04f 0302 	mov.w	r3, #2
 800cc12:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800cc16:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800cc1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cc1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cc20:	f7ff fa90 	bl	800c144 <read_submessage_list>
 800cc24:	a922      	add	r1, sp, #136	@ 0x88
 800cc26:	2204      	movs	r2, #4
 800cc28:	4640      	mov	r0, r8
 800cc2a:	f006 fbf7 	bl	801341c <uxr_next_input_reliable_buffer_available>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	a922      	add	r1, sp, #136	@ 0x88
 800cc32:	4620      	mov	r0, r4
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d1ea      	bne.n	800cc0e <uxr_create_session+0x13e>
 800cc38:	9904      	ldr	r1, [sp, #16]
 800cc3a:	463a      	mov	r2, r7
 800cc3c:	4620      	mov	r0, r4
 800cc3e:	f7ff f8fd 	bl	800be3c <write_submessage_acknack.isra.0>
 800cc42:	e779      	b.n	800cb38 <uxr_create_session+0x68>
 800cc44:	4639      	mov	r1, r7
 800cc46:	4650      	mov	r0, sl
 800cc48:	f000 ff26 	bl	800da98 <uxr_get_input_best_effort_stream>
 800cc4c:	2800      	cmp	r0, #0
 800cc4e:	f43f af73 	beq.w	800cb38 <uxr_create_session+0x68>
 800cc52:	4649      	mov	r1, r9
 800cc54:	f006 face 	bl	80131f4 <uxr_receive_best_effort_message>
 800cc58:	2800      	cmp	r0, #0
 800cc5a:	f43f af6d 	beq.w	800cb38 <uxr_create_session+0x68>
 800cc5e:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800cc62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cc64:	a91a      	add	r1, sp, #104	@ 0x68
 800cc66:	4620      	mov	r0, r4
 800cc68:	f7ff fa6c 	bl	800c144 <read_submessage_list>
 800cc6c:	e764      	b.n	800cb38 <uxr_create_session+0x68>
 800cc6e:	4650      	mov	r0, sl
 800cc70:	f000 fe62 	bl	800d938 <uxr_reset_stream_storage>
 800cc74:	2001      	movs	r0, #1
 800cc76:	b02b      	add	sp, #172	@ 0xac
 800cc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc7c:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800cc80:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cc82:	a91a      	add	r1, sp, #104	@ 0x68
 800cc84:	4620      	mov	r0, r4
 800cc86:	f7ff fa5d 	bl	800c144 <read_submessage_list>
 800cc8a:	e7be      	b.n	800cc0a <uxr_create_session+0x13a>

0800cc8c <uxr_prepare_stream_to_write_submessage>:
 800cc8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc90:	b082      	sub	sp, #8
 800cc92:	4682      	mov	sl, r0
 800cc94:	4610      	mov	r0, r2
 800cc96:	4615      	mov	r5, r2
 800cc98:	461e      	mov	r6, r3
 800cc9a:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800cc9e:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800cca2:	9101      	str	r1, [sp, #4]
 800cca4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800cca8:	f000 ff60 	bl	800db6c <uxr_submessage_padding>
 800ccac:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ccb0:	f105 0904 	add.w	r9, r5, #4
 800ccb4:	2b01      	cmp	r3, #1
 800ccb6:	4481      	add	r9, r0
 800ccb8:	d01d      	beq.n	800ccf6 <uxr_prepare_stream_to_write_submessage+0x6a>
 800ccba:	2b02      	cmp	r3, #2
 800ccbc:	d116      	bne.n	800ccec <uxr_prepare_stream_to_write_submessage+0x60>
 800ccbe:	4621      	mov	r1, r4
 800ccc0:	f10a 0008 	add.w	r0, sl, #8
 800ccc4:	f000 fede 	bl	800da84 <uxr_get_output_reliable_stream>
 800ccc8:	4604      	mov	r4, r0
 800ccca:	b158      	cbz	r0, 800cce4 <uxr_prepare_stream_to_write_submessage+0x58>
 800cccc:	4649      	mov	r1, r9
 800ccce:	4632      	mov	r2, r6
 800ccd0:	f006 fd60 	bl	8013794 <uxr_prepare_reliable_buffer_to_write>
 800ccd4:	4604      	mov	r4, r0
 800ccd6:	b12c      	cbz	r4, 800cce4 <uxr_prepare_stream_to_write_submessage+0x58>
 800ccd8:	4643      	mov	r3, r8
 800ccda:	b2aa      	uxth	r2, r5
 800ccdc:	4639      	mov	r1, r7
 800ccde:	4630      	mov	r0, r6
 800cce0:	f000 ff04 	bl	800daec <uxr_buffer_submessage_header>
 800cce4:	4620      	mov	r0, r4
 800cce6:	b002      	add	sp, #8
 800cce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccec:	2400      	movs	r4, #0
 800ccee:	4620      	mov	r0, r4
 800ccf0:	b002      	add	sp, #8
 800ccf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccf6:	4621      	mov	r1, r4
 800ccf8:	f10a 0008 	add.w	r0, sl, #8
 800ccfc:	f000 feba 	bl	800da74 <uxr_get_output_best_effort_stream>
 800cd00:	4604      	mov	r4, r0
 800cd02:	2800      	cmp	r0, #0
 800cd04:	d0ee      	beq.n	800cce4 <uxr_prepare_stream_to_write_submessage+0x58>
 800cd06:	4649      	mov	r1, r9
 800cd08:	4632      	mov	r2, r6
 800cd0a:	f006 fc73 	bl	80135f4 <uxr_prepare_best_effort_buffer_to_write>
 800cd0e:	4604      	mov	r4, r0
 800cd10:	e7e1      	b.n	800ccd6 <uxr_prepare_stream_to_write_submessage+0x4a>
 800cd12:	bf00      	nop

0800cd14 <uxr_init_session_info>:
 800cd14:	0e13      	lsrs	r3, r2, #24
 800cd16:	7043      	strb	r3, [r0, #1]
 800cd18:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800cd1c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800cd20:	7001      	strb	r1, [r0, #0]
 800cd22:	70c3      	strb	r3, [r0, #3]
 800cd24:	2109      	movs	r1, #9
 800cd26:	23ff      	movs	r3, #255	@ 0xff
 800cd28:	f880 c002 	strb.w	ip, [r0, #2]
 800cd2c:	7102      	strb	r2, [r0, #4]
 800cd2e:	80c1      	strh	r1, [r0, #6]
 800cd30:	7143      	strb	r3, [r0, #5]
 800cd32:	4770      	bx	lr

0800cd34 <uxr_buffer_create_session>:
 800cd34:	b530      	push	{r4, r5, lr}
 800cd36:	b089      	sub	sp, #36	@ 0x24
 800cd38:	2300      	movs	r3, #0
 800cd3a:	4d12      	ldr	r5, [pc, #72]	@ (800cd84 <uxr_buffer_create_session+0x50>)
 800cd3c:	9307      	str	r3, [sp, #28]
 800cd3e:	f8ad 201c 	strh.w	r2, [sp, #28]
 800cd42:	2201      	movs	r2, #1
 800cd44:	9301      	str	r3, [sp, #4]
 800cd46:	80c2      	strh	r2, [r0, #6]
 800cd48:	f88d 2004 	strb.w	r2, [sp, #4]
 800cd4c:	682a      	ldr	r2, [r5, #0]
 800cd4e:	9200      	str	r2, [sp, #0]
 800cd50:	88aa      	ldrh	r2, [r5, #4]
 800cd52:	f8ad 2006 	strh.w	r2, [sp, #6]
 800cd56:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800cd5a:	9202      	str	r2, [sp, #8]
 800cd5c:	460c      	mov	r4, r1
 800cd5e:	7802      	ldrb	r2, [r0, #0]
 800cd60:	9303      	str	r3, [sp, #12]
 800cd62:	4619      	mov	r1, r3
 800cd64:	f88d 200c 	strb.w	r2, [sp, #12]
 800cd68:	4620      	mov	r0, r4
 800cd6a:	2210      	movs	r2, #16
 800cd6c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800cd70:	9306      	str	r3, [sp, #24]
 800cd72:	f000 febb 	bl	800daec <uxr_buffer_submessage_header>
 800cd76:	4669      	mov	r1, sp
 800cd78:	4620      	mov	r0, r4
 800cd7a:	f001 fb39 	bl	800e3f0 <uxr_serialize_CREATE_CLIENT_Payload>
 800cd7e:	b009      	add	sp, #36	@ 0x24
 800cd80:	bd30      	pop	{r4, r5, pc}
 800cd82:	bf00      	nop
 800cd84:	08015714 	.word	0x08015714

0800cd88 <uxr_buffer_delete_session>:
 800cd88:	b510      	push	{r4, lr}
 800cd8a:	4b0c      	ldr	r3, [pc, #48]	@ (800cdbc <uxr_buffer_delete_session+0x34>)
 800cd8c:	b082      	sub	sp, #8
 800cd8e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800cd92:	f8ad c006 	strh.w	ip, [sp, #6]
 800cd96:	460c      	mov	r4, r1
 800cd98:	2202      	movs	r2, #2
 800cd9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cd9e:	80c2      	strh	r2, [r0, #6]
 800cda0:	f8ad 3004 	strh.w	r3, [sp, #4]
 800cda4:	2204      	movs	r2, #4
 800cda6:	2300      	movs	r3, #0
 800cda8:	2103      	movs	r1, #3
 800cdaa:	4620      	mov	r0, r4
 800cdac:	f000 fe9e 	bl	800daec <uxr_buffer_submessage_header>
 800cdb0:	a901      	add	r1, sp, #4
 800cdb2:	4620      	mov	r0, r4
 800cdb4:	f001 fbc2 	bl	800e53c <uxr_serialize_DELETE_Payload>
 800cdb8:	b002      	add	sp, #8
 800cdba:	bd10      	pop	{r4, pc}
 800cdbc:	08015714 	.word	0x08015714

0800cdc0 <uxr_read_create_session_status>:
 800cdc0:	b510      	push	{r4, lr}
 800cdc2:	b088      	sub	sp, #32
 800cdc4:	4604      	mov	r4, r0
 800cdc6:	4608      	mov	r0, r1
 800cdc8:	a901      	add	r1, sp, #4
 800cdca:	f001 fbc7 	bl	800e55c <uxr_deserialize_STATUS_AGENT_Payload>
 800cdce:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cdd2:	7163      	strb	r3, [r4, #5]
 800cdd4:	b008      	add	sp, #32
 800cdd6:	bd10      	pop	{r4, pc}

0800cdd8 <uxr_read_delete_session_status>:
 800cdd8:	b510      	push	{r4, lr}
 800cdda:	4604      	mov	r4, r0
 800cddc:	b084      	sub	sp, #16
 800cdde:	4608      	mov	r0, r1
 800cde0:	a902      	add	r1, sp, #8
 800cde2:	f001 fbeb 	bl	800e5bc <uxr_deserialize_STATUS_Payload>
 800cde6:	88e3      	ldrh	r3, [r4, #6]
 800cde8:	2b02      	cmp	r3, #2
 800cdea:	d001      	beq.n	800cdf0 <uxr_read_delete_session_status+0x18>
 800cdec:	b004      	add	sp, #16
 800cdee:	bd10      	pop	{r4, pc}
 800cdf0:	f10d 000a 	add.w	r0, sp, #10
 800cdf4:	f7fe feb2 	bl	800bb5c <uxr_object_id_from_raw>
 800cdf8:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800cdfc:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800ce00:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ce04:	b29b      	uxth	r3, r3
 800ce06:	2b02      	cmp	r3, #2
 800ce08:	bf04      	itt	eq
 800ce0a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800ce0e:	7163      	strbeq	r3, [r4, #5]
 800ce10:	b004      	add	sp, #16
 800ce12:	bd10      	pop	{r4, pc}

0800ce14 <uxr_stamp_create_session_header>:
 800ce14:	b510      	push	{r4, lr}
 800ce16:	2208      	movs	r2, #8
 800ce18:	b08a      	sub	sp, #40	@ 0x28
 800ce1a:	4604      	mov	r4, r0
 800ce1c:	eb0d 0002 	add.w	r0, sp, r2
 800ce20:	f006 f900 	bl	8013024 <ucdr_init_buffer>
 800ce24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce28:	9400      	str	r4, [sp, #0]
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	461a      	mov	r2, r3
 800ce2e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800ce32:	a802      	add	r0, sp, #8
 800ce34:	f000 fed0 	bl	800dbd8 <uxr_serialize_message_header>
 800ce38:	b00a      	add	sp, #40	@ 0x28
 800ce3a:	bd10      	pop	{r4, pc}

0800ce3c <uxr_stamp_session_header>:
 800ce3c:	b530      	push	{r4, r5, lr}
 800ce3e:	b08d      	sub	sp, #52	@ 0x34
 800ce40:	4604      	mov	r4, r0
 800ce42:	460d      	mov	r5, r1
 800ce44:	9203      	str	r2, [sp, #12]
 800ce46:	4619      	mov	r1, r3
 800ce48:	a804      	add	r0, sp, #16
 800ce4a:	2208      	movs	r2, #8
 800ce4c:	f006 f8ea 	bl	8013024 <ucdr_init_buffer>
 800ce50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce54:	9b03      	ldr	r3, [sp, #12]
 800ce56:	9400      	str	r4, [sp, #0]
 800ce58:	462a      	mov	r2, r5
 800ce5a:	a804      	add	r0, sp, #16
 800ce5c:	f000 febc 	bl	800dbd8 <uxr_serialize_message_header>
 800ce60:	b00d      	add	sp, #52	@ 0x34
 800ce62:	bd30      	pop	{r4, r5, pc}

0800ce64 <uxr_read_session_header>:
 800ce64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce68:	4607      	mov	r7, r0
 800ce6a:	b084      	sub	sp, #16
 800ce6c:	4608      	mov	r0, r1
 800ce6e:	460c      	mov	r4, r1
 800ce70:	4615      	mov	r5, r2
 800ce72:	461e      	mov	r6, r3
 800ce74:	f006 f906 	bl	8013084 <ucdr_buffer_remaining>
 800ce78:	2808      	cmp	r0, #8
 800ce7a:	d803      	bhi.n	800ce84 <uxr_read_session_header+0x20>
 800ce7c:	2000      	movs	r0, #0
 800ce7e:	b004      	add	sp, #16
 800ce80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce84:	f10d 080c 	add.w	r8, sp, #12
 800ce88:	4633      	mov	r3, r6
 800ce8a:	462a      	mov	r2, r5
 800ce8c:	f8cd 8000 	str.w	r8, [sp]
 800ce90:	4620      	mov	r0, r4
 800ce92:	f10d 010b 	add.w	r1, sp, #11
 800ce96:	f000 febd 	bl	800dc14 <uxr_deserialize_message_header>
 800ce9a:	783a      	ldrb	r2, [r7, #0]
 800ce9c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800cea0:	4293      	cmp	r3, r2
 800cea2:	d1eb      	bne.n	800ce7c <uxr_read_session_header+0x18>
 800cea4:	061b      	lsls	r3, r3, #24
 800cea6:	d41c      	bmi.n	800cee2 <uxr_read_session_header+0x7e>
 800cea8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800ceac:	787b      	ldrb	r3, [r7, #1]
 800ceae:	429a      	cmp	r2, r3
 800ceb0:	d003      	beq.n	800ceba <uxr_read_session_header+0x56>
 800ceb2:	2001      	movs	r0, #1
 800ceb4:	f080 0001 	eor.w	r0, r0, #1
 800ceb8:	e7e1      	b.n	800ce7e <uxr_read_session_header+0x1a>
 800ceba:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800cebe:	78bb      	ldrb	r3, [r7, #2]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	f107 0102 	add.w	r1, r7, #2
 800cec6:	d1f4      	bne.n	800ceb2 <uxr_read_session_header+0x4e>
 800cec8:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800cecc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d1ee      	bne.n	800ceb2 <uxr_read_session_header+0x4e>
 800ced4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800ced8:	784b      	ldrb	r3, [r1, #1]
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d1e9      	bne.n	800ceb2 <uxr_read_session_header+0x4e>
 800cede:	2000      	movs	r0, #0
 800cee0:	e7e8      	b.n	800ceb4 <uxr_read_session_header+0x50>
 800cee2:	2001      	movs	r0, #1
 800cee4:	e7cb      	b.n	800ce7e <uxr_read_session_header+0x1a>
 800cee6:	bf00      	nop

0800cee8 <uxr_session_header_offset>:
 800cee8:	f990 3000 	ldrsb.w	r3, [r0]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	bfac      	ite	ge
 800cef0:	2008      	movge	r0, #8
 800cef2:	2004      	movlt	r0, #4
 800cef4:	4770      	bx	lr
 800cef6:	bf00      	nop

0800cef8 <uxr_init_base_object_request>:
 800cef8:	b510      	push	{r4, lr}
 800cefa:	88c3      	ldrh	r3, [r0, #6]
 800cefc:	b082      	sub	sp, #8
 800cefe:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800cf02:	9101      	str	r1, [sp, #4]
 800cf04:	f1a3 010a 	sub.w	r1, r3, #10
 800cf08:	b289      	uxth	r1, r1
 800cf0a:	42a1      	cmp	r1, r4
 800cf0c:	d80e      	bhi.n	800cf2c <uxr_init_base_object_request+0x34>
 800cf0e:	3301      	adds	r3, #1
 800cf10:	b29c      	uxth	r4, r3
 800cf12:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800cf16:	b2db      	uxtb	r3, r3
 800cf18:	80c4      	strh	r4, [r0, #6]
 800cf1a:	9801      	ldr	r0, [sp, #4]
 800cf1c:	7011      	strb	r1, [r2, #0]
 800cf1e:	7053      	strb	r3, [r2, #1]
 800cf20:	1c91      	adds	r1, r2, #2
 800cf22:	f7fe fe2f 	bl	800bb84 <uxr_object_id_to_raw>
 800cf26:	4620      	mov	r0, r4
 800cf28:	b002      	add	sp, #8
 800cf2a:	bd10      	pop	{r4, pc}
 800cf2c:	230a      	movs	r3, #10
 800cf2e:	2100      	movs	r1, #0
 800cf30:	461c      	mov	r4, r3
 800cf32:	e7f1      	b.n	800cf18 <uxr_init_base_object_request+0x20>

0800cf34 <uxr_parse_base_object_request>:
 800cf34:	b570      	push	{r4, r5, r6, lr}
 800cf36:	4604      	mov	r4, r0
 800cf38:	3002      	adds	r0, #2
 800cf3a:	460d      	mov	r5, r1
 800cf3c:	4616      	mov	r6, r2
 800cf3e:	f7fe fe0d 	bl	800bb5c <uxr_object_id_from_raw>
 800cf42:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800cf46:	8028      	strh	r0, [r5, #0]
 800cf48:	806b      	strh	r3, [r5, #2]
 800cf4a:	7822      	ldrb	r2, [r4, #0]
 800cf4c:	7863      	ldrb	r3, [r4, #1]
 800cf4e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800cf52:	8033      	strh	r3, [r6, #0]
 800cf54:	bd70      	pop	{r4, r5, r6, pc}
 800cf56:	bf00      	nop

0800cf58 <uxr_init_framing_io>:
 800cf58:	2300      	movs	r3, #0
 800cf5a:	7041      	strb	r1, [r0, #1]
 800cf5c:	7003      	strb	r3, [r0, #0]
 800cf5e:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800cf60:	4770      	bx	lr
 800cf62:	bf00      	nop

0800cf64 <uxr_write_framed_msg>:
 800cf64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf68:	4617      	mov	r7, r2
 800cf6a:	7842      	ldrb	r2, [r0, #1]
 800cf6c:	b083      	sub	sp, #12
 800cf6e:	460e      	mov	r6, r1
 800cf70:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 800cf74:	469a      	mov	sl, r3
 800cf76:	2901      	cmp	r1, #1
 800cf78:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 800cf7c:	4604      	mov	r4, r0
 800cf7e:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 800cf82:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800cf86:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 800cf8a:	f240 8137 	bls.w	800d1fc <uxr_write_framed_msg+0x298>
 800cf8e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800cf92:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 800cf96:	2901      	cmp	r1, #1
 800cf98:	f04f 0202 	mov.w	r2, #2
 800cf9c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800cfa0:	f240 808f 	bls.w	800d0c2 <uxr_write_framed_msg+0x15e>
 800cfa4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cfa6:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 800cfaa:	b2dd      	uxtb	r5, r3
 800cfac:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800cfb0:	2203      	movs	r2, #3
 800cfb2:	2901      	cmp	r1, #1
 800cfb4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800cfb8:	f240 809a 	bls.w	800d0f0 <uxr_write_framed_msg+0x18c>
 800cfbc:	18a1      	adds	r1, r4, r2
 800cfbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cfc0:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800cfc4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800cfc8:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800cfcc:	3201      	adds	r2, #1
 800cfce:	2801      	cmp	r0, #1
 800cfd0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800cfd4:	f240 80a0 	bls.w	800d118 <uxr_write_framed_msg+0x1b4>
 800cfd8:	18a0      	adds	r0, r4, r2
 800cfda:	3201      	adds	r2, #1
 800cfdc:	b2d2      	uxtb	r2, r2
 800cfde:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800cfe2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	f000 80a9 	beq.w	800d13e <uxr_write_framed_msg+0x1da>
 800cfec:	f04f 0900 	mov.w	r9, #0
 800cff0:	46c8      	mov	r8, r9
 800cff2:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800cff6:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800cffa:	2901      	cmp	r1, #1
 800cffc:	f240 80c3 	bls.w	800d186 <uxr_write_framed_msg+0x222>
 800d000:	2a29      	cmp	r2, #41	@ 0x29
 800d002:	f200 809f 	bhi.w	800d144 <uxr_write_framed_msg+0x1e0>
 800d006:	18a1      	adds	r1, r4, r2
 800d008:	3201      	adds	r2, #1
 800d00a:	b2d2      	uxtb	r2, r2
 800d00c:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800d010:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800d014:	ea89 0303 	eor.w	r3, r9, r3
 800d018:	498c      	ldr	r1, [pc, #560]	@ (800d24c <uxr_write_framed_msg+0x2e8>)
 800d01a:	b2db      	uxtb	r3, r3
 800d01c:	f108 0801 	add.w	r8, r8, #1
 800d020:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d024:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 800d028:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d02a:	4543      	cmp	r3, r8
 800d02c:	d8e1      	bhi.n	800cff2 <uxr_write_framed_msg+0x8e>
 800d02e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800d032:	fa5f f889 	uxtb.w	r8, r9
 800d036:	9301      	str	r3, [sp, #4]
 800d038:	f04f 0900 	mov.w	r9, #0
 800d03c:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 800d040:	fa5f f18a 	uxtb.w	r1, sl
 800d044:	2901      	cmp	r1, #1
 800d046:	d921      	bls.n	800d08c <uxr_write_framed_msg+0x128>
 800d048:	2a29      	cmp	r2, #41	@ 0x29
 800d04a:	f240 80af 	bls.w	800d1ac <uxr_write_framed_msg+0x248>
 800d04e:	2500      	movs	r5, #0
 800d050:	e000      	b.n	800d054 <uxr_write_framed_msg+0xf0>
 800d052:	b160      	cbz	r0, 800d06e <uxr_write_framed_msg+0x10a>
 800d054:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800d058:	1b52      	subs	r2, r2, r5
 800d05a:	465b      	mov	r3, fp
 800d05c:	4421      	add	r1, r4
 800d05e:	4638      	mov	r0, r7
 800d060:	47b0      	blx	r6
 800d062:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800d066:	4405      	add	r5, r0
 800d068:	4295      	cmp	r5, r2
 800d06a:	d3f2      	bcc.n	800d052 <uxr_write_framed_msg+0xee>
 800d06c:	d003      	beq.n	800d076 <uxr_write_framed_msg+0x112>
 800d06e:	2000      	movs	r0, #0
 800d070:	b003      	add	sp, #12
 800d072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d076:	fa5f f18a 	uxtb.w	r1, sl
 800d07a:	f04f 0300 	mov.w	r3, #0
 800d07e:	2901      	cmp	r1, #1
 800d080:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800d084:	f04f 0200 	mov.w	r2, #0
 800d088:	f200 8090 	bhi.w	800d1ac <uxr_write_framed_msg+0x248>
 800d08c:	1c51      	adds	r1, r2, #1
 800d08e:	b2c9      	uxtb	r1, r1
 800d090:	2929      	cmp	r1, #41	@ 0x29
 800d092:	d8dc      	bhi.n	800d04e <uxr_write_framed_msg+0xea>
 800d094:	18a5      	adds	r5, r4, r2
 800d096:	4421      	add	r1, r4
 800d098:	3202      	adds	r2, #2
 800d09a:	f088 0820 	eor.w	r8, r8, #32
 800d09e:	4648      	mov	r0, r9
 800d0a0:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 800d0a4:	b2d2      	uxtb	r2, r2
 800d0a6:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800d0aa:	f04f 0901 	mov.w	r9, #1
 800d0ae:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800d0b2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800d0b6:	2800      	cmp	r0, #0
 800d0b8:	f040 8085 	bne.w	800d1c6 <uxr_write_framed_msg+0x262>
 800d0bc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d0c0:	e7bc      	b.n	800d03c <uxr_write_framed_msg+0xd8>
 800d0c2:	4611      	mov	r1, r2
 800d0c4:	f04f 0c03 	mov.w	ip, #3
 800d0c8:	2204      	movs	r2, #4
 800d0ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d0cc:	4421      	add	r1, r4
 800d0ce:	b2dd      	uxtb	r5, r3
 800d0d0:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 800d0d4:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 800d0d8:	44a4      	add	ip, r4
 800d0da:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800d0de:	f080 0020 	eor.w	r0, r0, #32
 800d0e2:	2901      	cmp	r1, #1
 800d0e4:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 800d0e8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800d0ec:	f63f af66 	bhi.w	800cfbc <uxr_write_framed_msg+0x58>
 800d0f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d0f2:	18a0      	adds	r0, r4, r2
 800d0f4:	f085 0520 	eor.w	r5, r5, #32
 800d0f8:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800d0fc:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800d100:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800d104:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 800d108:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800d10c:	3202      	adds	r2, #2
 800d10e:	2801      	cmp	r0, #1
 800d110:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800d114:	f63f af60 	bhi.w	800cfd8 <uxr_write_framed_msg+0x74>
 800d118:	1c50      	adds	r0, r2, #1
 800d11a:	18a5      	adds	r5, r4, r2
 800d11c:	fa54 f080 	uxtab	r0, r4, r0
 800d120:	3202      	adds	r2, #2
 800d122:	f081 0120 	eor.w	r1, r1, #32
 800d126:	b2d2      	uxtb	r2, r2
 800d128:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800d12c:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 800d130:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800d134:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800d138:	2b00      	cmp	r3, #0
 800d13a:	f47f af57 	bne.w	800cfec <uxr_write_framed_msg+0x88>
 800d13e:	9301      	str	r3, [sp, #4]
 800d140:	4698      	mov	r8, r3
 800d142:	e779      	b.n	800d038 <uxr_write_framed_msg+0xd4>
 800d144:	2500      	movs	r5, #0
 800d146:	e001      	b.n	800d14c <uxr_write_framed_msg+0x1e8>
 800d148:	2800      	cmp	r0, #0
 800d14a:	d090      	beq.n	800d06e <uxr_write_framed_msg+0x10a>
 800d14c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800d150:	1b52      	subs	r2, r2, r5
 800d152:	465b      	mov	r3, fp
 800d154:	4421      	add	r1, r4
 800d156:	4638      	mov	r0, r7
 800d158:	47b0      	blx	r6
 800d15a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800d15e:	4405      	add	r5, r0
 800d160:	4295      	cmp	r5, r2
 800d162:	d3f1      	bcc.n	800d148 <uxr_write_framed_msg+0x1e4>
 800d164:	d183      	bne.n	800d06e <uxr_write_framed_msg+0x10a>
 800d166:	f04f 0300 	mov.w	r3, #0
 800d16a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800d16e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d170:	4543      	cmp	r3, r8
 800d172:	d964      	bls.n	800d23e <uxr_write_framed_msg+0x2da>
 800d174:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800d178:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800d17c:	2901      	cmp	r1, #1
 800d17e:	f04f 0200 	mov.w	r2, #0
 800d182:	f63f af3d 	bhi.w	800d000 <uxr_write_framed_msg+0x9c>
 800d186:	1c51      	adds	r1, r2, #1
 800d188:	b2c9      	uxtb	r1, r1
 800d18a:	2929      	cmp	r1, #41	@ 0x29
 800d18c:	d8da      	bhi.n	800d144 <uxr_write_framed_msg+0x1e0>
 800d18e:	18a0      	adds	r0, r4, r2
 800d190:	4421      	add	r1, r4
 800d192:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 800d196:	3202      	adds	r2, #2
 800d198:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 800d19c:	b2d2      	uxtb	r2, r2
 800d19e:	f083 0020 	eor.w	r0, r3, #32
 800d1a2:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800d1a6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800d1aa:	e733      	b.n	800d014 <uxr_write_framed_msg+0xb0>
 800d1ac:	18a1      	adds	r1, r4, r2
 800d1ae:	3201      	adds	r2, #1
 800d1b0:	4648      	mov	r0, r9
 800d1b2:	b2d2      	uxtb	r2, r2
 800d1b4:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800d1b8:	f04f 0901 	mov.w	r9, #1
 800d1bc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800d1c0:	2800      	cmp	r0, #0
 800d1c2:	f43f af7b 	beq.w	800d0bc <uxr_write_framed_msg+0x158>
 800d1c6:	2500      	movs	r5, #0
 800d1c8:	e002      	b.n	800d1d0 <uxr_write_framed_msg+0x26c>
 800d1ca:	2800      	cmp	r0, #0
 800d1cc:	f43f af4f 	beq.w	800d06e <uxr_write_framed_msg+0x10a>
 800d1d0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800d1d4:	1b52      	subs	r2, r2, r5
 800d1d6:	465b      	mov	r3, fp
 800d1d8:	4421      	add	r1, r4
 800d1da:	4638      	mov	r0, r7
 800d1dc:	47b0      	blx	r6
 800d1de:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800d1e2:	4405      	add	r5, r0
 800d1e4:	4295      	cmp	r5, r2
 800d1e6:	d3f0      	bcc.n	800d1ca <uxr_write_framed_msg+0x266>
 800d1e8:	f47f af41 	bne.w	800d06e <uxr_write_framed_msg+0x10a>
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800d1f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d1f4:	b298      	uxth	r0, r3
 800d1f6:	b003      	add	sp, #12
 800d1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1fc:	217d      	movs	r1, #125	@ 0x7d
 800d1fe:	f082 0220 	eor.w	r2, r2, #32
 800d202:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 800d206:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800d20a:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 800d20e:	2901      	cmp	r1, #1
 800d210:	f04f 0203 	mov.w	r2, #3
 800d214:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800d218:	d804      	bhi.n	800d224 <uxr_write_framed_msg+0x2c0>
 800d21a:	4611      	mov	r1, r2
 800d21c:	f04f 0c04 	mov.w	ip, #4
 800d220:	2205      	movs	r2, #5
 800d222:	e752      	b.n	800d0ca <uxr_write_framed_msg+0x166>
 800d224:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d226:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 800d22a:	b2dd      	uxtb	r5, r3
 800d22c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800d230:	2204      	movs	r2, #4
 800d232:	2901      	cmp	r1, #1
 800d234:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800d238:	f63f aec0 	bhi.w	800cfbc <uxr_write_framed_msg+0x58>
 800d23c:	e758      	b.n	800d0f0 <uxr_write_framed_msg+0x18c>
 800d23e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800d242:	fa5f f889 	uxtb.w	r8, r9
 800d246:	9301      	str	r3, [sp, #4]
 800d248:	2200      	movs	r2, #0
 800d24a:	e6f5      	b.n	800d038 <uxr_write_framed_msg+0xd4>
 800d24c:	08015844 	.word	0x08015844

0800d250 <uxr_framing_read_transport>:
 800d250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d254:	4604      	mov	r4, r0
 800d256:	b083      	sub	sp, #12
 800d258:	461f      	mov	r7, r3
 800d25a:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800d25e:	4689      	mov	r9, r1
 800d260:	4692      	mov	sl, r2
 800d262:	f000 fc89 	bl	800db78 <uxr_millis>
 800d266:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800d26a:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800d26e:	42b3      	cmp	r3, r6
 800d270:	4680      	mov	r8, r0
 800d272:	d061      	beq.n	800d338 <uxr_framing_read_transport+0xe8>
 800d274:	d81c      	bhi.n	800d2b0 <uxr_framing_read_transport+0x60>
 800d276:	1e75      	subs	r5, r6, #1
 800d278:	1aed      	subs	r5, r5, r3
 800d27a:	b2ed      	uxtb	r5, r5
 800d27c:	2600      	movs	r6, #0
 800d27e:	455d      	cmp	r5, fp
 800d280:	d81f      	bhi.n	800d2c2 <uxr_framing_read_transport+0x72>
 800d282:	19ab      	adds	r3, r5, r6
 800d284:	455b      	cmp	r3, fp
 800d286:	bf84      	itt	hi
 800d288:	ebab 0605 	subhi.w	r6, fp, r5
 800d28c:	b2f6      	uxtbhi	r6, r6
 800d28e:	b9ed      	cbnz	r5, 800d2cc <uxr_framing_read_transport+0x7c>
 800d290:	f04f 0b00 	mov.w	fp, #0
 800d294:	f000 fc70 	bl	800db78 <uxr_millis>
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	eba0 0808 	sub.w	r8, r0, r8
 800d29e:	eba3 0308 	sub.w	r3, r3, r8
 800d2a2:	4658      	mov	r0, fp
 800d2a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d2a8:	603b      	str	r3, [r7, #0]
 800d2aa:	b003      	add	sp, #12
 800d2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2b0:	2e00      	cmp	r6, #0
 800d2b2:	d049      	beq.n	800d348 <uxr_framing_read_transport+0xf8>
 800d2b4:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 800d2b8:	b2ed      	uxtb	r5, r5
 800d2ba:	3e01      	subs	r6, #1
 800d2bc:	455d      	cmp	r5, fp
 800d2be:	b2f6      	uxtb	r6, r6
 800d2c0:	d9df      	bls.n	800d282 <uxr_framing_read_transport+0x32>
 800d2c2:	fa5f f58b 	uxtb.w	r5, fp
 800d2c6:	2600      	movs	r6, #0
 800d2c8:	2d00      	cmp	r5, #0
 800d2ca:	d0e1      	beq.n	800d290 <uxr_framing_read_transport+0x40>
 800d2cc:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800d2d0:	3102      	adds	r1, #2
 800d2d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d2d4:	9300      	str	r3, [sp, #0]
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	4421      	add	r1, r4
 800d2da:	462a      	mov	r2, r5
 800d2dc:	4650      	mov	r0, sl
 800d2de:	47c8      	blx	r9
 800d2e0:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800d2e4:	4a1a      	ldr	r2, [pc, #104]	@ (800d350 <uxr_framing_read_transport+0x100>)
 800d2e6:	4403      	add	r3, r0
 800d2e8:	0859      	lsrs	r1, r3, #1
 800d2ea:	fba2 2101 	umull	r2, r1, r2, r1
 800d2ee:	0889      	lsrs	r1, r1, #2
 800d2f0:	222a      	movs	r2, #42	@ 0x2a
 800d2f2:	fb02 3111 	mls	r1, r2, r1, r3
 800d2f6:	4683      	mov	fp, r0
 800d2f8:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800d2fc:	2800      	cmp	r0, #0
 800d2fe:	d0c7      	beq.n	800d290 <uxr_framing_read_transport+0x40>
 800d300:	42a8      	cmp	r0, r5
 800d302:	d1c7      	bne.n	800d294 <uxr_framing_read_transport+0x44>
 800d304:	2e00      	cmp	r6, #0
 800d306:	d0c5      	beq.n	800d294 <uxr_framing_read_transport+0x44>
 800d308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d30a:	9300      	str	r3, [sp, #0]
 800d30c:	3102      	adds	r1, #2
 800d30e:	4632      	mov	r2, r6
 800d310:	4421      	add	r1, r4
 800d312:	2300      	movs	r3, #0
 800d314:	4650      	mov	r0, sl
 800d316:	47c8      	blx	r9
 800d318:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800d31c:	4a0c      	ldr	r2, [pc, #48]	@ (800d350 <uxr_framing_read_transport+0x100>)
 800d31e:	180b      	adds	r3, r1, r0
 800d320:	0859      	lsrs	r1, r3, #1
 800d322:	fba2 1201 	umull	r1, r2, r2, r1
 800d326:	0892      	lsrs	r2, r2, #2
 800d328:	212a      	movs	r1, #42	@ 0x2a
 800d32a:	fb01 3312 	mls	r3, r1, r2, r3
 800d32e:	eb00 0b05 	add.w	fp, r0, r5
 800d332:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800d336:	e7ad      	b.n	800d294 <uxr_framing_read_transport+0x44>
 800d338:	2600      	movs	r6, #0
 800d33a:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800d33e:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800d340:	d9bf      	bls.n	800d2c2 <uxr_framing_read_transport+0x72>
 800d342:	2102      	movs	r1, #2
 800d344:	2529      	movs	r5, #41	@ 0x29
 800d346:	e7c4      	b.n	800d2d2 <uxr_framing_read_transport+0x82>
 800d348:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 800d34c:	b2ed      	uxtb	r5, r5
 800d34e:	e796      	b.n	800d27e <uxr_framing_read_transport+0x2e>
 800d350:	30c30c31 	.word	0x30c30c31

0800d354 <uxr_read_framed_msg>:
 800d354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d358:	461e      	mov	r6, r3
 800d35a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 800d35e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800d362:	429d      	cmp	r5, r3
 800d364:	b083      	sub	sp, #12
 800d366:	4604      	mov	r4, r0
 800d368:	4688      	mov	r8, r1
 800d36a:	4691      	mov	r9, r2
 800d36c:	f000 8188 	beq.w	800d680 <uxr_read_framed_msg+0x32c>
 800d370:	7823      	ldrb	r3, [r4, #0]
 800d372:	4dc1      	ldr	r5, [pc, #772]	@ (800d678 <uxr_read_framed_msg+0x324>)
 800d374:	4fc1      	ldr	r7, [pc, #772]	@ (800d67c <uxr_read_framed_msg+0x328>)
 800d376:	2b07      	cmp	r3, #7
 800d378:	d8fd      	bhi.n	800d376 <uxr_read_framed_msg+0x22>
 800d37a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d37e:	0115      	.short	0x0115
 800d380:	00d600f6 	.word	0x00d600f6
 800d384:	009000b9 	.word	0x009000b9
 800d388:	0030004d 	.word	0x0030004d
 800d38c:	0008      	.short	0x0008
 800d38e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800d392:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800d396:	4299      	cmp	r1, r3
 800d398:	f000 814a 	beq.w	800d630 <uxr_read_framed_msg+0x2dc>
 800d39c:	18e2      	adds	r2, r4, r3
 800d39e:	7892      	ldrb	r2, [r2, #2]
 800d3a0:	2a7d      	cmp	r2, #125	@ 0x7d
 800d3a2:	f000 8199 	beq.w	800d6d8 <uxr_read_framed_msg+0x384>
 800d3a6:	3301      	adds	r3, #1
 800d3a8:	0858      	lsrs	r0, r3, #1
 800d3aa:	fba5 1000 	umull	r1, r0, r5, r0
 800d3ae:	0880      	lsrs	r0, r0, #2
 800d3b0:	212a      	movs	r1, #42	@ 0x2a
 800d3b2:	fb01 3310 	mls	r3, r1, r0, r3
 800d3b6:	2a7e      	cmp	r2, #126	@ 0x7e
 800d3b8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800d3bc:	f000 8252 	beq.w	800d864 <uxr_read_framed_msg+0x510>
 800d3c0:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800d3c2:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 800d3c4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800d3c8:	b29b      	uxth	r3, r3
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	4299      	cmp	r1, r3
 800d3ce:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800d3d0:	7022      	strb	r2, [r4, #0]
 800d3d2:	f000 8179 	beq.w	800d6c8 <uxr_read_framed_msg+0x374>
 800d3d6:	2000      	movs	r0, #0
 800d3d8:	b003      	add	sp, #12
 800d3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3de:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800d3e2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800d3e6:	4299      	cmp	r1, r3
 800d3e8:	f000 8131 	beq.w	800d64e <uxr_read_framed_msg+0x2fa>
 800d3ec:	18e2      	adds	r2, r4, r3
 800d3ee:	7890      	ldrb	r0, [r2, #2]
 800d3f0:	287d      	cmp	r0, #125	@ 0x7d
 800d3f2:	f000 8190 	beq.w	800d716 <uxr_read_framed_msg+0x3c2>
 800d3f6:	3301      	adds	r3, #1
 800d3f8:	085a      	lsrs	r2, r3, #1
 800d3fa:	fba5 1202 	umull	r1, r2, r5, r2
 800d3fe:	0892      	lsrs	r2, r2, #2
 800d400:	212a      	movs	r1, #42	@ 0x2a
 800d402:	fb01 3312 	mls	r3, r1, r2, r3
 800d406:	287e      	cmp	r0, #126	@ 0x7e
 800d408:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800d40c:	f000 821a 	beq.w	800d844 <uxr_read_framed_msg+0x4f0>
 800d410:	2307      	movs	r3, #7
 800d412:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800d414:	7023      	strb	r3, [r4, #0]
 800d416:	e7ae      	b.n	800d376 <uxr_read_framed_msg+0x22>
 800d418:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800d41a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800d41e:	459e      	cmp	lr, r3
 800d420:	d938      	bls.n	800d494 <uxr_read_framed_msg+0x140>
 800d422:	ee07 8a90 	vmov	s15, r8
 800d426:	212a      	movs	r1, #42	@ 0x2a
 800d428:	e020      	b.n	800d46c <uxr_read_framed_msg+0x118>
 800d42a:	f89b c002 	ldrb.w	ip, [fp, #2]
 800d42e:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 800d432:	f000 80d4 	beq.w	800d5de <uxr_read_framed_msg+0x28a>
 800d436:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800d43a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800d43e:	f000 8219 	beq.w	800d874 <uxr_read_framed_msg+0x520>
 800d442:	f806 c003 	strb.w	ip, [r6, r3]
 800d446:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 800d44a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800d44c:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800d450:	ea8a 000c 	eor.w	r0, sl, ip
 800d454:	b2c0      	uxtb	r0, r0
 800d456:	3301      	adds	r3, #1
 800d458:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 800d45c:	b29b      	uxth	r3, r3
 800d45e:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 800d462:	4573      	cmp	r3, lr
 800d464:	8663      	strh	r3, [r4, #50]	@ 0x32
 800d466:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800d468:	f080 8120 	bcs.w	800d6ac <uxr_read_framed_msg+0x358>
 800d46c:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800d470:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800d474:	f100 0c01 	add.w	ip, r0, #1
 800d478:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800d47c:	fba5 8202 	umull	r8, r2, r5, r2
 800d480:	0892      	lsrs	r2, r2, #2
 800d482:	4582      	cmp	sl, r0
 800d484:	eb04 0b00 	add.w	fp, r4, r0
 800d488:	fb01 c212 	mls	r2, r1, r2, ip
 800d48c:	d1cd      	bne.n	800d42a <uxr_read_framed_msg+0xd6>
 800d48e:	ee17 8a90 	vmov	r8, s15
 800d492:	459e      	cmp	lr, r3
 800d494:	f040 8111 	bne.w	800d6ba <uxr_read_framed_msg+0x366>
 800d498:	2306      	movs	r3, #6
 800d49a:	7023      	strb	r3, [r4, #0]
 800d49c:	e76b      	b.n	800d376 <uxr_read_framed_msg+0x22>
 800d49e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800d4a2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800d4a6:	4298      	cmp	r0, r3
 800d4a8:	f000 80c2 	beq.w	800d630 <uxr_read_framed_msg+0x2dc>
 800d4ac:	18e2      	adds	r2, r4, r3
 800d4ae:	7891      	ldrb	r1, [r2, #2]
 800d4b0:	297d      	cmp	r1, #125	@ 0x7d
 800d4b2:	f000 814c 	beq.w	800d74e <uxr_read_framed_msg+0x3fa>
 800d4b6:	3301      	adds	r3, #1
 800d4b8:	085a      	lsrs	r2, r3, #1
 800d4ba:	fba5 0202 	umull	r0, r2, r5, r2
 800d4be:	0892      	lsrs	r2, r2, #2
 800d4c0:	202a      	movs	r0, #42	@ 0x2a
 800d4c2:	fb00 3312 	mls	r3, r0, r2, r3
 800d4c6:	297e      	cmp	r1, #126	@ 0x7e
 800d4c8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800d4cc:	f000 81ca 	beq.w	800d864 <uxr_read_framed_msg+0x510>
 800d4d0:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800d4d2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800d4d6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d4d8:	b29b      	uxth	r3, r3
 800d4da:	2000      	movs	r0, #0
 800d4dc:	428b      	cmp	r3, r1
 800d4de:	8623      	strh	r3, [r4, #48]	@ 0x30
 800d4e0:	8660      	strh	r0, [r4, #50]	@ 0x32
 800d4e2:	86e0      	strh	r0, [r4, #54]	@ 0x36
 800d4e4:	f240 80df 	bls.w	800d6a6 <uxr_read_framed_msg+0x352>
 800d4e8:	7020      	strb	r0, [r4, #0]
 800d4ea:	b003      	add	sp, #12
 800d4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4f0:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800d4f4:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800d4f8:	4299      	cmp	r1, r3
 800d4fa:	f000 80a8 	beq.w	800d64e <uxr_read_framed_msg+0x2fa>
 800d4fe:	18e2      	adds	r2, r4, r3
 800d500:	7890      	ldrb	r0, [r2, #2]
 800d502:	287d      	cmp	r0, #125	@ 0x7d
 800d504:	f000 8164 	beq.w	800d7d0 <uxr_read_framed_msg+0x47c>
 800d508:	3301      	adds	r3, #1
 800d50a:	085a      	lsrs	r2, r3, #1
 800d50c:	fba5 1202 	umull	r1, r2, r5, r2
 800d510:	0892      	lsrs	r2, r2, #2
 800d512:	212a      	movs	r1, #42	@ 0x2a
 800d514:	fb01 3312 	mls	r3, r1, r2, r3
 800d518:	287e      	cmp	r0, #126	@ 0x7e
 800d51a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800d51e:	f000 8191 	beq.w	800d844 <uxr_read_framed_msg+0x4f0>
 800d522:	2304      	movs	r3, #4
 800d524:	8620      	strh	r0, [r4, #48]	@ 0x30
 800d526:	7023      	strb	r3, [r4, #0]
 800d528:	e725      	b.n	800d376 <uxr_read_framed_msg+0x22>
 800d52a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800d52e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800d532:	4290      	cmp	r0, r2
 800d534:	f000 80b3 	beq.w	800d69e <uxr_read_framed_msg+0x34a>
 800d538:	18a3      	adds	r3, r4, r2
 800d53a:	7899      	ldrb	r1, [r3, #2]
 800d53c:	297d      	cmp	r1, #125	@ 0x7d
 800d53e:	f000 8164 	beq.w	800d80a <uxr_read_framed_msg+0x4b6>
 800d542:	3201      	adds	r2, #1
 800d544:	0850      	lsrs	r0, r2, #1
 800d546:	fba5 3000 	umull	r3, r0, r5, r0
 800d54a:	0880      	lsrs	r0, r0, #2
 800d54c:	232a      	movs	r3, #42	@ 0x2a
 800d54e:	fb03 2210 	mls	r2, r3, r0, r2
 800d552:	297e      	cmp	r1, #126	@ 0x7e
 800d554:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800d558:	f000 8188 	beq.w	800d86c <uxr_read_framed_msg+0x518>
 800d55c:	7863      	ldrb	r3, [r4, #1]
 800d55e:	428b      	cmp	r3, r1
 800d560:	bf0c      	ite	eq
 800d562:	2303      	moveq	r3, #3
 800d564:	2300      	movne	r3, #0
 800d566:	7023      	strb	r3, [r4, #0]
 800d568:	e705      	b.n	800d376 <uxr_read_framed_msg+0x22>
 800d56a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800d56e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800d572:	2200      	movs	r2, #0
 800d574:	4299      	cmp	r1, r3
 800d576:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 800d57a:	d06c      	beq.n	800d656 <uxr_read_framed_msg+0x302>
 800d57c:	18e2      	adds	r2, r4, r3
 800d57e:	7890      	ldrb	r0, [r2, #2]
 800d580:	287d      	cmp	r0, #125	@ 0x7d
 800d582:	f000 8101 	beq.w	800d788 <uxr_read_framed_msg+0x434>
 800d586:	3301      	adds	r3, #1
 800d588:	085a      	lsrs	r2, r3, #1
 800d58a:	fba5 1202 	umull	r1, r2, r5, r2
 800d58e:	0892      	lsrs	r2, r2, #2
 800d590:	212a      	movs	r1, #42	@ 0x2a
 800d592:	fb01 3312 	mls	r3, r1, r2, r3
 800d596:	287e      	cmp	r0, #126	@ 0x7e
 800d598:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800d59c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800d5a0:	d059      	beq.n	800d656 <uxr_read_framed_msg+0x302>
 800d5a2:	2302      	movs	r3, #2
 800d5a4:	7023      	strb	r3, [r4, #0]
 800d5a6:	e6e6      	b.n	800d376 <uxr_read_framed_msg+0x22>
 800d5a8:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800d5ac:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800d5b0:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 800d5b4:	1c51      	adds	r1, r2, #1
 800d5b6:	084b      	lsrs	r3, r1, #1
 800d5b8:	fba5 c303 	umull	ip, r3, r5, r3
 800d5bc:	089b      	lsrs	r3, r3, #2
 800d5be:	fb0e 1313 	mls	r3, lr, r3, r1
 800d5c2:	4592      	cmp	sl, r2
 800d5c4:	eb04 0002 	add.w	r0, r4, r2
 800d5c8:	b2da      	uxtb	r2, r3
 800d5ca:	f43f af04 	beq.w	800d3d6 <uxr_read_framed_msg+0x82>
 800d5ce:	7883      	ldrb	r3, [r0, #2]
 800d5d0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800d5d4:	2b7e      	cmp	r3, #126	@ 0x7e
 800d5d6:	d1ed      	bne.n	800d5b4 <uxr_read_framed_msg+0x260>
 800d5d8:	2301      	movs	r3, #1
 800d5da:	7023      	strb	r3, [r4, #0]
 800d5dc:	e6cb      	b.n	800d376 <uxr_read_framed_msg+0x22>
 800d5de:	f100 0c01 	add.w	ip, r0, #1
 800d5e2:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800d5e6:	fba5 8202 	umull	r8, r2, r5, r2
 800d5ea:	0892      	lsrs	r2, r2, #2
 800d5ec:	fb01 c212 	mls	r2, r1, r2, ip
 800d5f0:	eb04 0c02 	add.w	ip, r4, r2
 800d5f4:	b2d2      	uxtb	r2, r2
 800d5f6:	4592      	cmp	sl, r2
 800d5f8:	f100 0002 	add.w	r0, r0, #2
 800d5fc:	f43f af47 	beq.w	800d48e <uxr_read_framed_msg+0x13a>
 800d600:	0842      	lsrs	r2, r0, #1
 800d602:	f89c a002 	ldrb.w	sl, [ip, #2]
 800d606:	fba5 8202 	umull	r8, r2, r5, r2
 800d60a:	0892      	lsrs	r2, r2, #2
 800d60c:	fb01 0012 	mls	r0, r1, r2, r0
 800d610:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 800d614:	f08a 0c20 	eor.w	ip, sl, #32
 800d618:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 800d61c:	f47f af11 	bne.w	800d442 <uxr_read_framed_msg+0xee>
 800d620:	459e      	cmp	lr, r3
 800d622:	ee17 8a90 	vmov	r8, s15
 800d626:	f43f af37 	beq.w	800d498 <uxr_read_framed_msg+0x144>
 800d62a:	2301      	movs	r3, #1
 800d62c:	7023      	strb	r3, [r4, #0]
 800d62e:	e6a2      	b.n	800d376 <uxr_read_framed_msg+0x22>
 800d630:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d632:	9300      	str	r3, [sp, #0]
 800d634:	2301      	movs	r3, #1
 800d636:	9301      	str	r3, [sp, #4]
 800d638:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d63a:	464a      	mov	r2, r9
 800d63c:	4641      	mov	r1, r8
 800d63e:	4620      	mov	r0, r4
 800d640:	f7ff fe06 	bl	800d250 <uxr_framing_read_transport>
 800d644:	2800      	cmp	r0, #0
 800d646:	f43f aec6 	beq.w	800d3d6 <uxr_read_framed_msg+0x82>
 800d64a:	7823      	ldrb	r3, [r4, #0]
 800d64c:	e693      	b.n	800d376 <uxr_read_framed_msg+0x22>
 800d64e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d650:	9300      	str	r3, [sp, #0]
 800d652:	2302      	movs	r3, #2
 800d654:	e7ef      	b.n	800d636 <uxr_read_framed_msg+0x2e2>
 800d656:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d658:	9300      	str	r3, [sp, #0]
 800d65a:	2304      	movs	r3, #4
 800d65c:	9301      	str	r3, [sp, #4]
 800d65e:	464a      	mov	r2, r9
 800d660:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d662:	4641      	mov	r1, r8
 800d664:	4620      	mov	r0, r4
 800d666:	f7ff fdf3 	bl	800d250 <uxr_framing_read_transport>
 800d66a:	2800      	cmp	r0, #0
 800d66c:	d1ed      	bne.n	800d64a <uxr_read_framed_msg+0x2f6>
 800d66e:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800d672:	2b7e      	cmp	r3, #126	@ 0x7e
 800d674:	d0e9      	beq.n	800d64a <uxr_read_framed_msg+0x2f6>
 800d676:	e6ae      	b.n	800d3d6 <uxr_read_framed_msg+0x82>
 800d678:	30c30c31 	.word	0x30c30c31
 800d67c:	08015844 	.word	0x08015844
 800d680:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d682:	9300      	str	r3, [sp, #0]
 800d684:	2305      	movs	r3, #5
 800d686:	9301      	str	r3, [sp, #4]
 800d688:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d68a:	f7ff fde1 	bl	800d250 <uxr_framing_read_transport>
 800d68e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800d692:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800d696:	429a      	cmp	r2, r3
 800d698:	f43f ae9d 	beq.w	800d3d6 <uxr_read_framed_msg+0x82>
 800d69c:	e668      	b.n	800d370 <uxr_read_framed_msg+0x1c>
 800d69e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6a0:	9300      	str	r3, [sp, #0]
 800d6a2:	2303      	movs	r3, #3
 800d6a4:	e7c7      	b.n	800d636 <uxr_read_framed_msg+0x2e2>
 800d6a6:	2305      	movs	r3, #5
 800d6a8:	7023      	strb	r3, [r4, #0]
 800d6aa:	e664      	b.n	800d376 <uxr_read_framed_msg+0x22>
 800d6ac:	ee17 8a90 	vmov	r8, s15
 800d6b0:	f43f aef2 	beq.w	800d498 <uxr_read_framed_msg+0x144>
 800d6b4:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800d6b8:	d08e      	beq.n	800d5d8 <uxr_read_framed_msg+0x284>
 800d6ba:	ebae 0303 	sub.w	r3, lr, r3
 800d6be:	3302      	adds	r3, #2
 800d6c0:	9301      	str	r3, [sp, #4]
 800d6c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6c4:	9300      	str	r3, [sp, #0]
 800d6c6:	e7b7      	b.n	800d638 <uxr_read_framed_msg+0x2e4>
 800d6c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d6ca:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800d6ce:	7013      	strb	r3, [r2, #0]
 800d6d0:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 800d6d2:	b003      	add	sp, #12
 800d6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6d8:	f103 0c01 	add.w	ip, r3, #1
 800d6dc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800d6e0:	fba5 0202 	umull	r0, r2, r5, r2
 800d6e4:	0892      	lsrs	r2, r2, #2
 800d6e6:	202a      	movs	r0, #42	@ 0x2a
 800d6e8:	fb00 c212 	mls	r2, r0, r2, ip
 800d6ec:	fa5f fc82 	uxtb.w	ip, r2
 800d6f0:	4561      	cmp	r1, ip
 800d6f2:	d09d      	beq.n	800d630 <uxr_read_framed_msg+0x2dc>
 800d6f4:	3302      	adds	r3, #2
 800d6f6:	4422      	add	r2, r4
 800d6f8:	0859      	lsrs	r1, r3, #1
 800d6fa:	7892      	ldrb	r2, [r2, #2]
 800d6fc:	fba5 c101 	umull	ip, r1, r5, r1
 800d700:	0889      	lsrs	r1, r1, #2
 800d702:	fb00 3311 	mls	r3, r0, r1, r3
 800d706:	2a7e      	cmp	r2, #126	@ 0x7e
 800d708:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800d70c:	f000 80aa 	beq.w	800d864 <uxr_read_framed_msg+0x510>
 800d710:	f082 0220 	eor.w	r2, r2, #32
 800d714:	e654      	b.n	800d3c0 <uxr_read_framed_msg+0x6c>
 800d716:	1c58      	adds	r0, r3, #1
 800d718:	0842      	lsrs	r2, r0, #1
 800d71a:	fba5 c202 	umull	ip, r2, r5, r2
 800d71e:	0892      	lsrs	r2, r2, #2
 800d720:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800d724:	fb0c 0212 	mls	r2, ip, r2, r0
 800d728:	b2d0      	uxtb	r0, r2
 800d72a:	4281      	cmp	r1, r0
 800d72c:	d08f      	beq.n	800d64e <uxr_read_framed_msg+0x2fa>
 800d72e:	4422      	add	r2, r4
 800d730:	3302      	adds	r3, #2
 800d732:	7890      	ldrb	r0, [r2, #2]
 800d734:	085a      	lsrs	r2, r3, #1
 800d736:	fba5 1202 	umull	r1, r2, r5, r2
 800d73a:	0892      	lsrs	r2, r2, #2
 800d73c:	fb0c 3312 	mls	r3, ip, r2, r3
 800d740:	287e      	cmp	r0, #126	@ 0x7e
 800d742:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800d746:	d07d      	beq.n	800d844 <uxr_read_framed_msg+0x4f0>
 800d748:	f080 0020 	eor.w	r0, r0, #32
 800d74c:	e660      	b.n	800d410 <uxr_read_framed_msg+0xbc>
 800d74e:	1c59      	adds	r1, r3, #1
 800d750:	084a      	lsrs	r2, r1, #1
 800d752:	fba5 c202 	umull	ip, r2, r5, r2
 800d756:	0892      	lsrs	r2, r2, #2
 800d758:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800d75c:	fb0c 1212 	mls	r2, ip, r2, r1
 800d760:	b2d1      	uxtb	r1, r2
 800d762:	4288      	cmp	r0, r1
 800d764:	f43f af64 	beq.w	800d630 <uxr_read_framed_msg+0x2dc>
 800d768:	4422      	add	r2, r4
 800d76a:	3302      	adds	r3, #2
 800d76c:	7891      	ldrb	r1, [r2, #2]
 800d76e:	085a      	lsrs	r2, r3, #1
 800d770:	fba5 0202 	umull	r0, r2, r5, r2
 800d774:	0892      	lsrs	r2, r2, #2
 800d776:	fb0c 3312 	mls	r3, ip, r2, r3
 800d77a:	297e      	cmp	r1, #126	@ 0x7e
 800d77c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800d780:	d070      	beq.n	800d864 <uxr_read_framed_msg+0x510>
 800d782:	f081 0120 	eor.w	r1, r1, #32
 800d786:	e6a3      	b.n	800d4d0 <uxr_read_framed_msg+0x17c>
 800d788:	f103 0c01 	add.w	ip, r3, #1
 800d78c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800d790:	fba5 0202 	umull	r0, r2, r5, r2
 800d794:	0892      	lsrs	r2, r2, #2
 800d796:	202a      	movs	r0, #42	@ 0x2a
 800d798:	fb00 c212 	mls	r2, r0, r2, ip
 800d79c:	fa5f fc82 	uxtb.w	ip, r2
 800d7a0:	4561      	cmp	r1, ip
 800d7a2:	f43f af58 	beq.w	800d656 <uxr_read_framed_msg+0x302>
 800d7a6:	4422      	add	r2, r4
 800d7a8:	3302      	adds	r3, #2
 800d7aa:	7891      	ldrb	r1, [r2, #2]
 800d7ac:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800d7b0:	085a      	lsrs	r2, r3, #1
 800d7b2:	fba5 c202 	umull	ip, r2, r5, r2
 800d7b6:	0892      	lsrs	r2, r2, #2
 800d7b8:	fb00 3312 	mls	r3, r0, r2, r3
 800d7bc:	297e      	cmp	r1, #126	@ 0x7e
 800d7be:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800d7c2:	f43f af48 	beq.w	800d656 <uxr_read_framed_msg+0x302>
 800d7c6:	f081 0120 	eor.w	r1, r1, #32
 800d7ca:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800d7ce:	e6e8      	b.n	800d5a2 <uxr_read_framed_msg+0x24e>
 800d7d0:	1c58      	adds	r0, r3, #1
 800d7d2:	0842      	lsrs	r2, r0, #1
 800d7d4:	fba5 c202 	umull	ip, r2, r5, r2
 800d7d8:	0892      	lsrs	r2, r2, #2
 800d7da:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800d7de:	fb0c 0212 	mls	r2, ip, r2, r0
 800d7e2:	b2d0      	uxtb	r0, r2
 800d7e4:	4281      	cmp	r1, r0
 800d7e6:	f43f af32 	beq.w	800d64e <uxr_read_framed_msg+0x2fa>
 800d7ea:	4422      	add	r2, r4
 800d7ec:	3302      	adds	r3, #2
 800d7ee:	7890      	ldrb	r0, [r2, #2]
 800d7f0:	085a      	lsrs	r2, r3, #1
 800d7f2:	fba5 1202 	umull	r1, r2, r5, r2
 800d7f6:	0892      	lsrs	r2, r2, #2
 800d7f8:	fb0c 3312 	mls	r3, ip, r2, r3
 800d7fc:	287e      	cmp	r0, #126	@ 0x7e
 800d7fe:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800d802:	d01f      	beq.n	800d844 <uxr_read_framed_msg+0x4f0>
 800d804:	f080 0020 	eor.w	r0, r0, #32
 800d808:	e68b      	b.n	800d522 <uxr_read_framed_msg+0x1ce>
 800d80a:	1c51      	adds	r1, r2, #1
 800d80c:	084b      	lsrs	r3, r1, #1
 800d80e:	fba5 c303 	umull	ip, r3, r5, r3
 800d812:	089b      	lsrs	r3, r3, #2
 800d814:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800d818:	fb0c 1313 	mls	r3, ip, r3, r1
 800d81c:	b2d9      	uxtb	r1, r3
 800d81e:	4288      	cmp	r0, r1
 800d820:	f43f af3d 	beq.w	800d69e <uxr_read_framed_msg+0x34a>
 800d824:	3202      	adds	r2, #2
 800d826:	4423      	add	r3, r4
 800d828:	0850      	lsrs	r0, r2, #1
 800d82a:	789b      	ldrb	r3, [r3, #2]
 800d82c:	fba5 1000 	umull	r1, r0, r5, r0
 800d830:	0880      	lsrs	r0, r0, #2
 800d832:	fb0c 2210 	mls	r2, ip, r0, r2
 800d836:	2b7e      	cmp	r3, #126	@ 0x7e
 800d838:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800d83c:	d016      	beq.n	800d86c <uxr_read_framed_msg+0x518>
 800d83e:	f083 0120 	eor.w	r1, r3, #32
 800d842:	e68b      	b.n	800d55c <uxr_read_framed_msg+0x208>
 800d844:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d846:	9300      	str	r3, [sp, #0]
 800d848:	2302      	movs	r3, #2
 800d84a:	9301      	str	r3, [sp, #4]
 800d84c:	464a      	mov	r2, r9
 800d84e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d850:	4641      	mov	r1, r8
 800d852:	4620      	mov	r0, r4
 800d854:	f7ff fcfc 	bl	800d250 <uxr_framing_read_transport>
 800d858:	2800      	cmp	r0, #0
 800d85a:	f47f aef6 	bne.w	800d64a <uxr_read_framed_msg+0x2f6>
 800d85e:	2301      	movs	r3, #1
 800d860:	7023      	strb	r3, [r4, #0]
 800d862:	e588      	b.n	800d376 <uxr_read_framed_msg+0x22>
 800d864:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d866:	9300      	str	r3, [sp, #0]
 800d868:	2301      	movs	r3, #1
 800d86a:	e7ee      	b.n	800d84a <uxr_read_framed_msg+0x4f6>
 800d86c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d86e:	9300      	str	r3, [sp, #0]
 800d870:	2303      	movs	r3, #3
 800d872:	e7ea      	b.n	800d84a <uxr_read_framed_msg+0x4f6>
 800d874:	ee17 8a90 	vmov	r8, s15
 800d878:	e6ae      	b.n	800d5d8 <uxr_read_framed_msg+0x284>
 800d87a:	bf00      	nop

0800d87c <uxr_stream_id>:
 800d87c:	2901      	cmp	r1, #1
 800d87e:	b082      	sub	sp, #8
 800d880:	d01d      	beq.n	800d8be <uxr_stream_id+0x42>
 800d882:	2902      	cmp	r1, #2
 800d884:	f04f 0c00 	mov.w	ip, #0
 800d888:	d01e      	beq.n	800d8c8 <uxr_stream_id+0x4c>
 800d88a:	2300      	movs	r3, #0
 800d88c:	f36c 0307 	bfi	r3, ip, #0, #8
 800d890:	f360 230f 	bfi	r3, r0, #8, #8
 800d894:	f361 4317 	bfi	r3, r1, #16, #8
 800d898:	f362 631f 	bfi	r3, r2, #24, #8
 800d89c:	b2da      	uxtb	r2, r3
 800d89e:	2000      	movs	r0, #0
 800d8a0:	f362 0007 	bfi	r0, r2, #0, #8
 800d8a4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800d8a8:	f362 200f 	bfi	r0, r2, #8, #8
 800d8ac:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800d8b0:	f362 4017 	bfi	r0, r2, #16, #8
 800d8b4:	0e1b      	lsrs	r3, r3, #24
 800d8b6:	f363 601f 	bfi	r0, r3, #24, #8
 800d8ba:	b002      	add	sp, #8
 800d8bc:	4770      	bx	lr
 800d8be:	f100 0c01 	add.w	ip, r0, #1
 800d8c2:	fa5f fc8c 	uxtb.w	ip, ip
 800d8c6:	e7e0      	b.n	800d88a <uxr_stream_id+0xe>
 800d8c8:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800d8cc:	e7dd      	b.n	800d88a <uxr_stream_id+0xe>
 800d8ce:	bf00      	nop

0800d8d0 <uxr_stream_id_from_raw>:
 800d8d0:	b082      	sub	sp, #8
 800d8d2:	b130      	cbz	r0, 800d8e2 <uxr_stream_id_from_raw+0x12>
 800d8d4:	0603      	lsls	r3, r0, #24
 800d8d6:	d420      	bmi.n	800d91a <uxr_stream_id_from_raw+0x4a>
 800d8d8:	1e42      	subs	r2, r0, #1
 800d8da:	b2d2      	uxtb	r2, r2
 800d8dc:	f04f 0c01 	mov.w	ip, #1
 800d8e0:	e001      	b.n	800d8e6 <uxr_stream_id_from_raw+0x16>
 800d8e2:	4684      	mov	ip, r0
 800d8e4:	4602      	mov	r2, r0
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	f360 0307 	bfi	r3, r0, #0, #8
 800d8ec:	f362 230f 	bfi	r3, r2, #8, #8
 800d8f0:	f36c 4317 	bfi	r3, ip, #16, #8
 800d8f4:	f361 631f 	bfi	r3, r1, #24, #8
 800d8f8:	b2da      	uxtb	r2, r3
 800d8fa:	2000      	movs	r0, #0
 800d8fc:	f362 0007 	bfi	r0, r2, #0, #8
 800d900:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800d904:	f362 200f 	bfi	r0, r2, #8, #8
 800d908:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800d90c:	f362 4017 	bfi	r0, r2, #16, #8
 800d910:	0e1b      	lsrs	r3, r3, #24
 800d912:	f363 601f 	bfi	r0, r3, #24, #8
 800d916:	b002      	add	sp, #8
 800d918:	4770      	bx	lr
 800d91a:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800d91e:	f04f 0c02 	mov.w	ip, #2
 800d922:	e7e0      	b.n	800d8e6 <uxr_stream_id_from_raw+0x16>

0800d924 <uxr_init_stream_storage>:
 800d924:	2300      	movs	r3, #0
 800d926:	7403      	strb	r3, [r0, #16]
 800d928:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800d92c:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800d930:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800d934:	4770      	bx	lr
 800d936:	bf00      	nop

0800d938 <uxr_reset_stream_storage>:
 800d938:	b570      	push	{r4, r5, r6, lr}
 800d93a:	7c03      	ldrb	r3, [r0, #16]
 800d93c:	4604      	mov	r4, r0
 800d93e:	b153      	cbz	r3, 800d956 <uxr_reset_stream_storage+0x1e>
 800d940:	4606      	mov	r6, r0
 800d942:	2500      	movs	r5, #0
 800d944:	4630      	mov	r0, r6
 800d946:	f005 fe4f 	bl	80135e8 <uxr_reset_output_best_effort_stream>
 800d94a:	7c23      	ldrb	r3, [r4, #16]
 800d94c:	3501      	adds	r5, #1
 800d94e:	42ab      	cmp	r3, r5
 800d950:	f106 0610 	add.w	r6, r6, #16
 800d954:	d8f6      	bhi.n	800d944 <uxr_reset_stream_storage+0xc>
 800d956:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d95a:	b163      	cbz	r3, 800d976 <uxr_reset_stream_storage+0x3e>
 800d95c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d960:	2500      	movs	r5, #0
 800d962:	4630      	mov	r0, r6
 800d964:	f005 fc42 	bl	80131ec <uxr_reset_input_best_effort_stream>
 800d968:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d96c:	3501      	adds	r5, #1
 800d96e:	42ab      	cmp	r3, r5
 800d970:	f106 0602 	add.w	r6, r6, #2
 800d974:	d8f5      	bhi.n	800d962 <uxr_reset_stream_storage+0x2a>
 800d976:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800d97a:	b163      	cbz	r3, 800d996 <uxr_reset_stream_storage+0x5e>
 800d97c:	f104 0618 	add.w	r6, r4, #24
 800d980:	2500      	movs	r5, #0
 800d982:	4630      	mov	r0, r6
 800d984:	f005 fedc 	bl	8013740 <uxr_reset_output_reliable_stream>
 800d988:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800d98c:	3501      	adds	r5, #1
 800d98e:	42ab      	cmp	r3, r5
 800d990:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800d994:	d8f5      	bhi.n	800d982 <uxr_reset_stream_storage+0x4a>
 800d996:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800d99a:	b163      	cbz	r3, 800d9b6 <uxr_reset_stream_storage+0x7e>
 800d99c:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800d9a0:	2500      	movs	r5, #0
 800d9a2:	4630      	mov	r0, r6
 800d9a4:	f005 fc96 	bl	80132d4 <uxr_reset_input_reliable_stream>
 800d9a8:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800d9ac:	3501      	adds	r5, #1
 800d9ae:	42ab      	cmp	r3, r5
 800d9b0:	f106 0618 	add.w	r6, r6, #24
 800d9b4:	d8f5      	bhi.n	800d9a2 <uxr_reset_stream_storage+0x6a>
 800d9b6:	bd70      	pop	{r4, r5, r6, pc}

0800d9b8 <uxr_add_output_best_effort_buffer>:
 800d9b8:	b510      	push	{r4, lr}
 800d9ba:	7c04      	ldrb	r4, [r0, #16]
 800d9bc:	f104 0c01 	add.w	ip, r4, #1
 800d9c0:	b082      	sub	sp, #8
 800d9c2:	f880 c010 	strb.w	ip, [r0, #16]
 800d9c6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800d9ca:	f005 fe03 	bl	80135d4 <uxr_init_output_best_effort_stream>
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	4611      	mov	r1, r2
 800d9d2:	4620      	mov	r0, r4
 800d9d4:	b002      	add	sp, #8
 800d9d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9da:	f7ff bf4f 	b.w	800d87c <uxr_stream_id>
 800d9de:	bf00      	nop

0800d9e0 <uxr_add_output_reliable_buffer>:
 800d9e0:	b510      	push	{r4, lr}
 800d9e2:	b084      	sub	sp, #16
 800d9e4:	4684      	mov	ip, r0
 800d9e6:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d9ea:	9000      	str	r0, [sp, #0]
 800d9ec:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800d9f0:	2028      	movs	r0, #40	@ 0x28
 800d9f2:	fb00 c004 	mla	r0, r0, r4, ip
 800d9f6:	f104 0e01 	add.w	lr, r4, #1
 800d9fa:	3018      	adds	r0, #24
 800d9fc:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800da00:	f005 fe66 	bl	80136d0 <uxr_init_output_reliable_stream>
 800da04:	2201      	movs	r2, #1
 800da06:	2102      	movs	r1, #2
 800da08:	4620      	mov	r0, r4
 800da0a:	b004      	add	sp, #16
 800da0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da10:	f7ff bf34 	b.w	800d87c <uxr_stream_id>

0800da14 <uxr_add_input_best_effort_buffer>:
 800da14:	b510      	push	{r4, lr}
 800da16:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800da1a:	4603      	mov	r3, r0
 800da1c:	1c62      	adds	r2, r4, #1
 800da1e:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800da22:	b082      	sub	sp, #8
 800da24:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800da28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800da2c:	f005 fbda 	bl	80131e4 <uxr_init_input_best_effort_stream>
 800da30:	2200      	movs	r2, #0
 800da32:	2101      	movs	r1, #1
 800da34:	4620      	mov	r0, r4
 800da36:	b002      	add	sp, #8
 800da38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da3c:	f7ff bf1e 	b.w	800d87c <uxr_stream_id>

0800da40 <uxr_add_input_reliable_buffer>:
 800da40:	b510      	push	{r4, lr}
 800da42:	b084      	sub	sp, #16
 800da44:	4684      	mov	ip, r0
 800da46:	9806      	ldr	r0, [sp, #24]
 800da48:	9000      	str	r0, [sp, #0]
 800da4a:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800da4e:	2018      	movs	r0, #24
 800da50:	fb00 c004 	mla	r0, r0, r4, ip
 800da54:	f104 0e01 	add.w	lr, r4, #1
 800da58:	3048      	adds	r0, #72	@ 0x48
 800da5a:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800da5e:	f005 fc0d 	bl	801327c <uxr_init_input_reliable_stream>
 800da62:	2200      	movs	r2, #0
 800da64:	2102      	movs	r1, #2
 800da66:	4620      	mov	r0, r4
 800da68:	b004      	add	sp, #16
 800da6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da6e:	f7ff bf05 	b.w	800d87c <uxr_stream_id>
 800da72:	bf00      	nop

0800da74 <uxr_get_output_best_effort_stream>:
 800da74:	7c03      	ldrb	r3, [r0, #16]
 800da76:	428b      	cmp	r3, r1
 800da78:	bf8c      	ite	hi
 800da7a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800da7e:	2000      	movls	r0, #0
 800da80:	4770      	bx	lr
 800da82:	bf00      	nop

0800da84 <uxr_get_output_reliable_stream>:
 800da84:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800da88:	428b      	cmp	r3, r1
 800da8a:	bf83      	ittte	hi
 800da8c:	2328      	movhi	r3, #40	@ 0x28
 800da8e:	fb03 0001 	mlahi	r0, r3, r1, r0
 800da92:	3018      	addhi	r0, #24
 800da94:	2000      	movls	r0, #0
 800da96:	4770      	bx	lr

0800da98 <uxr_get_input_best_effort_stream>:
 800da98:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800da9c:	428b      	cmp	r3, r1
 800da9e:	bf86      	itte	hi
 800daa0:	3121      	addhi	r1, #33	@ 0x21
 800daa2:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800daa6:	2000      	movls	r0, #0
 800daa8:	4770      	bx	lr
 800daaa:	bf00      	nop

0800daac <uxr_get_input_reliable_stream>:
 800daac:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800dab0:	428b      	cmp	r3, r1
 800dab2:	bf83      	ittte	hi
 800dab4:	2318      	movhi	r3, #24
 800dab6:	fb03 0001 	mlahi	r0, r3, r1, r0
 800daba:	3048      	addhi	r0, #72	@ 0x48
 800dabc:	2000      	movls	r0, #0
 800dabe:	4770      	bx	lr

0800dac0 <uxr_output_streams_confirmed>:
 800dac0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800dac4:	b183      	cbz	r3, 800dae8 <uxr_output_streams_confirmed+0x28>
 800dac6:	b570      	push	{r4, r5, r6, lr}
 800dac8:	4606      	mov	r6, r0
 800daca:	f100 0518 	add.w	r5, r0, #24
 800dace:	2400      	movs	r4, #0
 800dad0:	e001      	b.n	800dad6 <uxr_output_streams_confirmed+0x16>
 800dad2:	3528      	adds	r5, #40	@ 0x28
 800dad4:	b138      	cbz	r0, 800dae6 <uxr_output_streams_confirmed+0x26>
 800dad6:	4628      	mov	r0, r5
 800dad8:	f006 f8a2 	bl	8013c20 <uxr_is_output_up_to_date>
 800dadc:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800dae0:	3401      	adds	r4, #1
 800dae2:	42a3      	cmp	r3, r4
 800dae4:	d8f5      	bhi.n	800dad2 <uxr_output_streams_confirmed+0x12>
 800dae6:	bd70      	pop	{r4, r5, r6, pc}
 800dae8:	2001      	movs	r0, #1
 800daea:	4770      	bx	lr

0800daec <uxr_buffer_submessage_header>:
 800daec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daee:	4604      	mov	r4, r0
 800daf0:	460e      	mov	r6, r1
 800daf2:	2104      	movs	r1, #4
 800daf4:	4615      	mov	r5, r2
 800daf6:	461f      	mov	r7, r3
 800daf8:	f005 faae 	bl	8013058 <ucdr_align_to>
 800dafc:	2301      	movs	r3, #1
 800dafe:	ea47 0203 	orr.w	r2, r7, r3
 800db02:	4631      	mov	r1, r6
 800db04:	7523      	strb	r3, [r4, #20]
 800db06:	4620      	mov	r0, r4
 800db08:	462b      	mov	r3, r5
 800db0a:	f000 f8a3 	bl	800dc54 <uxr_serialize_submessage_header>
 800db0e:	4620      	mov	r0, r4
 800db10:	f005 fab8 	bl	8013084 <ucdr_buffer_remaining>
 800db14:	42a8      	cmp	r0, r5
 800db16:	bf34      	ite	cc
 800db18:	2000      	movcc	r0, #0
 800db1a:	2001      	movcs	r0, #1
 800db1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db1e:	bf00      	nop

0800db20 <uxr_read_submessage_header>:
 800db20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db24:	4604      	mov	r4, r0
 800db26:	460d      	mov	r5, r1
 800db28:	2104      	movs	r1, #4
 800db2a:	4616      	mov	r6, r2
 800db2c:	4698      	mov	r8, r3
 800db2e:	f005 fa93 	bl	8013058 <ucdr_align_to>
 800db32:	4620      	mov	r0, r4
 800db34:	f005 faa6 	bl	8013084 <ucdr_buffer_remaining>
 800db38:	2803      	cmp	r0, #3
 800db3a:	bf8c      	ite	hi
 800db3c:	2701      	movhi	r7, #1
 800db3e:	2700      	movls	r7, #0
 800db40:	d802      	bhi.n	800db48 <uxr_read_submessage_header+0x28>
 800db42:	4638      	mov	r0, r7
 800db44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db48:	4633      	mov	r3, r6
 800db4a:	4642      	mov	r2, r8
 800db4c:	4620      	mov	r0, r4
 800db4e:	4629      	mov	r1, r5
 800db50:	f000 f894 	bl	800dc7c <uxr_deserialize_submessage_header>
 800db54:	f898 3000 	ldrb.w	r3, [r8]
 800db58:	f003 0201 	and.w	r2, r3, #1
 800db5c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800db60:	f888 3000 	strb.w	r3, [r8]
 800db64:	7522      	strb	r2, [r4, #20]
 800db66:	4638      	mov	r0, r7
 800db68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800db6c <uxr_submessage_padding>:
 800db6c:	f010 0003 	ands.w	r0, r0, #3
 800db70:	bf18      	it	ne
 800db72:	f1c0 0004 	rsbne	r0, r0, #4
 800db76:	4770      	bx	lr

0800db78 <uxr_millis>:
 800db78:	b510      	push	{r4, lr}
 800db7a:	b084      	sub	sp, #16
 800db7c:	4669      	mov	r1, sp
 800db7e:	2001      	movs	r0, #1
 800db80:	f7f3 fb7e 	bl	8001280 <clock_gettime>
 800db84:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800db88:	4906      	ldr	r1, [pc, #24]	@ (800dba4 <uxr_millis+0x2c>)
 800db8a:	fba0 0301 	umull	r0, r3, r0, r1
 800db8e:	1900      	adds	r0, r0, r4
 800db90:	fb01 3102 	mla	r1, r1, r2, r3
 800db94:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800db98:	4a03      	ldr	r2, [pc, #12]	@ (800dba8 <uxr_millis+0x30>)
 800db9a:	2300      	movs	r3, #0
 800db9c:	f7f2 fba8 	bl	80002f0 <__aeabi_ldivmod>
 800dba0:	b004      	add	sp, #16
 800dba2:	bd10      	pop	{r4, pc}
 800dba4:	3b9aca00 	.word	0x3b9aca00
 800dba8:	000f4240 	.word	0x000f4240

0800dbac <uxr_nanos>:
 800dbac:	b510      	push	{r4, lr}
 800dbae:	b084      	sub	sp, #16
 800dbb0:	4669      	mov	r1, sp
 800dbb2:	2001      	movs	r0, #1
 800dbb4:	f7f3 fb64 	bl	8001280 <clock_gettime>
 800dbb8:	4a06      	ldr	r2, [pc, #24]	@ (800dbd4 <uxr_nanos+0x28>)
 800dbba:	9800      	ldr	r0, [sp, #0]
 800dbbc:	9902      	ldr	r1, [sp, #8]
 800dbbe:	9c01      	ldr	r4, [sp, #4]
 800dbc0:	fba0 0302 	umull	r0, r3, r0, r2
 800dbc4:	1840      	adds	r0, r0, r1
 800dbc6:	fb02 3304 	mla	r3, r2, r4, r3
 800dbca:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800dbce:	b004      	add	sp, #16
 800dbd0:	bd10      	pop	{r4, pc}
 800dbd2:	bf00      	nop
 800dbd4:	3b9aca00 	.word	0x3b9aca00

0800dbd8 <uxr_serialize_message_header>:
 800dbd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbda:	b083      	sub	sp, #12
 800dbdc:	4616      	mov	r6, r2
 800dbde:	4604      	mov	r4, r0
 800dbe0:	9301      	str	r3, [sp, #4]
 800dbe2:	460d      	mov	r5, r1
 800dbe4:	9f08      	ldr	r7, [sp, #32]
 800dbe6:	f004 fa71 	bl	80120cc <ucdr_serialize_uint8_t>
 800dbea:	4631      	mov	r1, r6
 800dbec:	4620      	mov	r0, r4
 800dbee:	f004 fa6d 	bl	80120cc <ucdr_serialize_uint8_t>
 800dbf2:	9a01      	ldr	r2, [sp, #4]
 800dbf4:	2101      	movs	r1, #1
 800dbf6:	4620      	mov	r0, r4
 800dbf8:	f004 fb14 	bl	8012224 <ucdr_serialize_endian_uint16_t>
 800dbfc:	062b      	lsls	r3, r5, #24
 800dbfe:	d501      	bpl.n	800dc04 <uxr_serialize_message_header+0x2c>
 800dc00:	b003      	add	sp, #12
 800dc02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc04:	2204      	movs	r2, #4
 800dc06:	4639      	mov	r1, r7
 800dc08:	4620      	mov	r0, r4
 800dc0a:	b003      	add	sp, #12
 800dc0c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800dc10:	f004 b966 	b.w	8011ee0 <ucdr_serialize_array_uint8_t>

0800dc14 <uxr_deserialize_message_header>:
 800dc14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc16:	b083      	sub	sp, #12
 800dc18:	4616      	mov	r6, r2
 800dc1a:	4604      	mov	r4, r0
 800dc1c:	9301      	str	r3, [sp, #4]
 800dc1e:	460d      	mov	r5, r1
 800dc20:	9f08      	ldr	r7, [sp, #32]
 800dc22:	f004 fa69 	bl	80120f8 <ucdr_deserialize_uint8_t>
 800dc26:	4631      	mov	r1, r6
 800dc28:	4620      	mov	r0, r4
 800dc2a:	f004 fa65 	bl	80120f8 <ucdr_deserialize_uint8_t>
 800dc2e:	9a01      	ldr	r2, [sp, #4]
 800dc30:	2101      	movs	r1, #1
 800dc32:	4620      	mov	r0, r4
 800dc34:	f004 fbea 	bl	801240c <ucdr_deserialize_endian_uint16_t>
 800dc38:	f995 3000 	ldrsb.w	r3, [r5]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	da01      	bge.n	800dc44 <uxr_deserialize_message_header+0x30>
 800dc40:	b003      	add	sp, #12
 800dc42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc44:	2204      	movs	r2, #4
 800dc46:	4639      	mov	r1, r7
 800dc48:	4620      	mov	r0, r4
 800dc4a:	b003      	add	sp, #12
 800dc4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800dc50:	f004 b9aa 	b.w	8011fa8 <ucdr_deserialize_array_uint8_t>

0800dc54 <uxr_serialize_submessage_header>:
 800dc54:	b530      	push	{r4, r5, lr}
 800dc56:	b083      	sub	sp, #12
 800dc58:	4615      	mov	r5, r2
 800dc5a:	4604      	mov	r4, r0
 800dc5c:	9301      	str	r3, [sp, #4]
 800dc5e:	f004 fa35 	bl	80120cc <ucdr_serialize_uint8_t>
 800dc62:	4629      	mov	r1, r5
 800dc64:	4620      	mov	r0, r4
 800dc66:	f004 fa31 	bl	80120cc <ucdr_serialize_uint8_t>
 800dc6a:	9a01      	ldr	r2, [sp, #4]
 800dc6c:	2101      	movs	r1, #1
 800dc6e:	4620      	mov	r0, r4
 800dc70:	b003      	add	sp, #12
 800dc72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc76:	f004 bad5 	b.w	8012224 <ucdr_serialize_endian_uint16_t>
 800dc7a:	bf00      	nop

0800dc7c <uxr_deserialize_submessage_header>:
 800dc7c:	b530      	push	{r4, r5, lr}
 800dc7e:	b083      	sub	sp, #12
 800dc80:	4615      	mov	r5, r2
 800dc82:	4604      	mov	r4, r0
 800dc84:	9301      	str	r3, [sp, #4]
 800dc86:	f004 fa37 	bl	80120f8 <ucdr_deserialize_uint8_t>
 800dc8a:	4629      	mov	r1, r5
 800dc8c:	4620      	mov	r0, r4
 800dc8e:	f004 fa33 	bl	80120f8 <ucdr_deserialize_uint8_t>
 800dc92:	9a01      	ldr	r2, [sp, #4]
 800dc94:	2101      	movs	r1, #1
 800dc96:	4620      	mov	r0, r4
 800dc98:	b003      	add	sp, #12
 800dc9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc9e:	f004 bbb5 	b.w	801240c <ucdr_deserialize_endian_uint16_t>
 800dca2:	bf00      	nop

0800dca4 <uxr_serialize_CLIENT_Representation>:
 800dca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dca8:	2204      	movs	r2, #4
 800dcaa:	460e      	mov	r6, r1
 800dcac:	4605      	mov	r5, r0
 800dcae:	f004 f917 	bl	8011ee0 <ucdr_serialize_array_uint8_t>
 800dcb2:	2202      	movs	r2, #2
 800dcb4:	4607      	mov	r7, r0
 800dcb6:	1d31      	adds	r1, r6, #4
 800dcb8:	4628      	mov	r0, r5
 800dcba:	f004 f911 	bl	8011ee0 <ucdr_serialize_array_uint8_t>
 800dcbe:	4038      	ands	r0, r7
 800dcc0:	2202      	movs	r2, #2
 800dcc2:	1db1      	adds	r1, r6, #6
 800dcc4:	b2c7      	uxtb	r7, r0
 800dcc6:	4628      	mov	r0, r5
 800dcc8:	f004 f90a 	bl	8011ee0 <ucdr_serialize_array_uint8_t>
 800dccc:	2204      	movs	r2, #4
 800dcce:	4007      	ands	r7, r0
 800dcd0:	f106 0108 	add.w	r1, r6, #8
 800dcd4:	4628      	mov	r0, r5
 800dcd6:	f004 f903 	bl	8011ee0 <ucdr_serialize_array_uint8_t>
 800dcda:	7b31      	ldrb	r1, [r6, #12]
 800dcdc:	4007      	ands	r7, r0
 800dcde:	4628      	mov	r0, r5
 800dce0:	f004 f9f4 	bl	80120cc <ucdr_serialize_uint8_t>
 800dce4:	7b71      	ldrb	r1, [r6, #13]
 800dce6:	4007      	ands	r7, r0
 800dce8:	4628      	mov	r0, r5
 800dcea:	f004 f9c1 	bl	8012070 <ucdr_serialize_bool>
 800dcee:	7b73      	ldrb	r3, [r6, #13]
 800dcf0:	ea07 0800 	and.w	r8, r7, r0
 800dcf4:	b93b      	cbnz	r3, 800dd06 <uxr_serialize_CLIENT_Representation+0x62>
 800dcf6:	8bb1      	ldrh	r1, [r6, #28]
 800dcf8:	4628      	mov	r0, r5
 800dcfa:	f004 fa13 	bl	8012124 <ucdr_serialize_uint16_t>
 800dcfe:	ea08 0000 	and.w	r0, r8, r0
 800dd02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd06:	6931      	ldr	r1, [r6, #16]
 800dd08:	4628      	mov	r0, r5
 800dd0a:	f004 fbf5 	bl	80124f8 <ucdr_serialize_uint32_t>
 800dd0e:	6933      	ldr	r3, [r6, #16]
 800dd10:	b1e3      	cbz	r3, 800dd4c <uxr_serialize_CLIENT_Representation+0xa8>
 800dd12:	b1c0      	cbz	r0, 800dd46 <uxr_serialize_CLIENT_Representation+0xa2>
 800dd14:	4637      	mov	r7, r6
 800dd16:	f04f 0900 	mov.w	r9, #0
 800dd1a:	e001      	b.n	800dd20 <uxr_serialize_CLIENT_Representation+0x7c>
 800dd1c:	3708      	adds	r7, #8
 800dd1e:	b194      	cbz	r4, 800dd46 <uxr_serialize_CLIENT_Representation+0xa2>
 800dd20:	6979      	ldr	r1, [r7, #20]
 800dd22:	4628      	mov	r0, r5
 800dd24:	f005 fa46 	bl	80131b4 <ucdr_serialize_string>
 800dd28:	69b9      	ldr	r1, [r7, #24]
 800dd2a:	4604      	mov	r4, r0
 800dd2c:	4628      	mov	r0, r5
 800dd2e:	f005 fa41 	bl	80131b4 <ucdr_serialize_string>
 800dd32:	6933      	ldr	r3, [r6, #16]
 800dd34:	f109 0901 	add.w	r9, r9, #1
 800dd38:	4004      	ands	r4, r0
 800dd3a:	4599      	cmp	r9, r3
 800dd3c:	b2e4      	uxtb	r4, r4
 800dd3e:	d3ed      	bcc.n	800dd1c <uxr_serialize_CLIENT_Representation+0x78>
 800dd40:	ea08 0804 	and.w	r8, r8, r4
 800dd44:	e7d7      	b.n	800dcf6 <uxr_serialize_CLIENT_Representation+0x52>
 800dd46:	f04f 0800 	mov.w	r8, #0
 800dd4a:	e7d4      	b.n	800dcf6 <uxr_serialize_CLIENT_Representation+0x52>
 800dd4c:	ea08 0800 	and.w	r8, r8, r0
 800dd50:	e7d1      	b.n	800dcf6 <uxr_serialize_CLIENT_Representation+0x52>
 800dd52:	bf00      	nop

0800dd54 <uxr_deserialize_CLIENT_Representation>:
 800dd54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd58:	2204      	movs	r2, #4
 800dd5a:	460c      	mov	r4, r1
 800dd5c:	4605      	mov	r5, r0
 800dd5e:	f004 f923 	bl	8011fa8 <ucdr_deserialize_array_uint8_t>
 800dd62:	2202      	movs	r2, #2
 800dd64:	4607      	mov	r7, r0
 800dd66:	1d21      	adds	r1, r4, #4
 800dd68:	4628      	mov	r0, r5
 800dd6a:	f004 f91d 	bl	8011fa8 <ucdr_deserialize_array_uint8_t>
 800dd6e:	4038      	ands	r0, r7
 800dd70:	2202      	movs	r2, #2
 800dd72:	1da1      	adds	r1, r4, #6
 800dd74:	b2c6      	uxtb	r6, r0
 800dd76:	4628      	mov	r0, r5
 800dd78:	f004 f916 	bl	8011fa8 <ucdr_deserialize_array_uint8_t>
 800dd7c:	2204      	movs	r2, #4
 800dd7e:	4006      	ands	r6, r0
 800dd80:	f104 0108 	add.w	r1, r4, #8
 800dd84:	4628      	mov	r0, r5
 800dd86:	f004 f90f 	bl	8011fa8 <ucdr_deserialize_array_uint8_t>
 800dd8a:	f104 010c 	add.w	r1, r4, #12
 800dd8e:	4006      	ands	r6, r0
 800dd90:	4628      	mov	r0, r5
 800dd92:	f004 f9b1 	bl	80120f8 <ucdr_deserialize_uint8_t>
 800dd96:	f104 010d 	add.w	r1, r4, #13
 800dd9a:	ea06 0700 	and.w	r7, r6, r0
 800dd9e:	4628      	mov	r0, r5
 800dda0:	f004 f97c 	bl	801209c <ucdr_deserialize_bool>
 800dda4:	7b63      	ldrb	r3, [r4, #13]
 800dda6:	4007      	ands	r7, r0
 800dda8:	b93b      	cbnz	r3, 800ddba <uxr_deserialize_CLIENT_Representation+0x66>
 800ddaa:	f104 011c 	add.w	r1, r4, #28
 800ddae:	4628      	mov	r0, r5
 800ddb0:	f004 fab8 	bl	8012324 <ucdr_deserialize_uint16_t>
 800ddb4:	4038      	ands	r0, r7
 800ddb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddba:	f104 0110 	add.w	r1, r4, #16
 800ddbe:	4628      	mov	r0, r5
 800ddc0:	f004 fcca 	bl	8012758 <ucdr_deserialize_uint32_t>
 800ddc4:	6923      	ldr	r3, [r4, #16]
 800ddc6:	2b01      	cmp	r3, #1
 800ddc8:	d903      	bls.n	800ddd2 <uxr_deserialize_CLIENT_Representation+0x7e>
 800ddca:	2301      	movs	r3, #1
 800ddcc:	75ab      	strb	r3, [r5, #22]
 800ddce:	2700      	movs	r7, #0
 800ddd0:	e7eb      	b.n	800ddaa <uxr_deserialize_CLIENT_Representation+0x56>
 800ddd2:	b30b      	cbz	r3, 800de18 <uxr_deserialize_CLIENT_Representation+0xc4>
 800ddd4:	2800      	cmp	r0, #0
 800ddd6:	d0fa      	beq.n	800ddce <uxr_deserialize_CLIENT_Representation+0x7a>
 800ddd8:	46a0      	mov	r8, r4
 800ddda:	f04f 0900 	mov.w	r9, #0
 800ddde:	e001      	b.n	800dde4 <uxr_deserialize_CLIENT_Representation+0x90>
 800dde0:	2e00      	cmp	r6, #0
 800dde2:	d0f4      	beq.n	800ddce <uxr_deserialize_CLIENT_Representation+0x7a>
 800dde4:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800dde8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ddec:	4628      	mov	r0, r5
 800ddee:	f005 f9f1 	bl	80131d4 <ucdr_deserialize_string>
 800ddf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ddf6:	4606      	mov	r6, r0
 800ddf8:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800ddfc:	4628      	mov	r0, r5
 800ddfe:	f005 f9e9 	bl	80131d4 <ucdr_deserialize_string>
 800de02:	6923      	ldr	r3, [r4, #16]
 800de04:	f109 0901 	add.w	r9, r9, #1
 800de08:	4006      	ands	r6, r0
 800de0a:	4599      	cmp	r9, r3
 800de0c:	f108 0808 	add.w	r8, r8, #8
 800de10:	b2f6      	uxtb	r6, r6
 800de12:	d3e5      	bcc.n	800dde0 <uxr_deserialize_CLIENT_Representation+0x8c>
 800de14:	4037      	ands	r7, r6
 800de16:	e7c8      	b.n	800ddaa <uxr_deserialize_CLIENT_Representation+0x56>
 800de18:	4007      	ands	r7, r0
 800de1a:	e7c6      	b.n	800ddaa <uxr_deserialize_CLIENT_Representation+0x56>

0800de1c <uxr_serialize_AGENT_Representation>:
 800de1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de20:	2204      	movs	r2, #4
 800de22:	460f      	mov	r7, r1
 800de24:	4605      	mov	r5, r0
 800de26:	f004 f85b 	bl	8011ee0 <ucdr_serialize_array_uint8_t>
 800de2a:	2202      	movs	r2, #2
 800de2c:	4604      	mov	r4, r0
 800de2e:	1d39      	adds	r1, r7, #4
 800de30:	4628      	mov	r0, r5
 800de32:	f004 f855 	bl	8011ee0 <ucdr_serialize_array_uint8_t>
 800de36:	4020      	ands	r0, r4
 800de38:	2202      	movs	r2, #2
 800de3a:	1db9      	adds	r1, r7, #6
 800de3c:	b2c4      	uxtb	r4, r0
 800de3e:	4628      	mov	r0, r5
 800de40:	f004 f84e 	bl	8011ee0 <ucdr_serialize_array_uint8_t>
 800de44:	7a39      	ldrb	r1, [r7, #8]
 800de46:	4004      	ands	r4, r0
 800de48:	4628      	mov	r0, r5
 800de4a:	f004 f911 	bl	8012070 <ucdr_serialize_bool>
 800de4e:	7a3b      	ldrb	r3, [r7, #8]
 800de50:	ea00 0804 	and.w	r8, r0, r4
 800de54:	b913      	cbnz	r3, 800de5c <uxr_serialize_AGENT_Representation+0x40>
 800de56:	4640      	mov	r0, r8
 800de58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de5c:	68f9      	ldr	r1, [r7, #12]
 800de5e:	4628      	mov	r0, r5
 800de60:	f004 fb4a 	bl	80124f8 <ucdr_serialize_uint32_t>
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	b303      	cbz	r3, 800deaa <uxr_serialize_AGENT_Representation+0x8e>
 800de68:	b1d0      	cbz	r0, 800dea0 <uxr_serialize_AGENT_Representation+0x84>
 800de6a:	463e      	mov	r6, r7
 800de6c:	f04f 0900 	mov.w	r9, #0
 800de70:	e001      	b.n	800de76 <uxr_serialize_AGENT_Representation+0x5a>
 800de72:	3608      	adds	r6, #8
 800de74:	b1a4      	cbz	r4, 800dea0 <uxr_serialize_AGENT_Representation+0x84>
 800de76:	6931      	ldr	r1, [r6, #16]
 800de78:	4628      	mov	r0, r5
 800de7a:	f005 f99b 	bl	80131b4 <ucdr_serialize_string>
 800de7e:	6971      	ldr	r1, [r6, #20]
 800de80:	4604      	mov	r4, r0
 800de82:	4628      	mov	r0, r5
 800de84:	f005 f996 	bl	80131b4 <ucdr_serialize_string>
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	f109 0901 	add.w	r9, r9, #1
 800de8e:	4004      	ands	r4, r0
 800de90:	4599      	cmp	r9, r3
 800de92:	b2e4      	uxtb	r4, r4
 800de94:	d3ed      	bcc.n	800de72 <uxr_serialize_AGENT_Representation+0x56>
 800de96:	ea08 0804 	and.w	r8, r8, r4
 800de9a:	4640      	mov	r0, r8
 800de9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dea0:	f04f 0800 	mov.w	r8, #0
 800dea4:	4640      	mov	r0, r8
 800dea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800deaa:	ea08 0800 	and.w	r8, r8, r0
 800deae:	e7d2      	b.n	800de56 <uxr_serialize_AGENT_Representation+0x3a>

0800deb0 <uxr_serialize_DATAWRITER_Representation>:
 800deb0:	b570      	push	{r4, r5, r6, lr}
 800deb2:	460d      	mov	r5, r1
 800deb4:	7809      	ldrb	r1, [r1, #0]
 800deb6:	4606      	mov	r6, r0
 800deb8:	f004 f908 	bl	80120cc <ucdr_serialize_uint8_t>
 800debc:	4604      	mov	r4, r0
 800debe:	b130      	cbz	r0, 800dece <uxr_serialize_DATAWRITER_Representation+0x1e>
 800dec0:	782b      	ldrb	r3, [r5, #0]
 800dec2:	2b02      	cmp	r3, #2
 800dec4:	d00c      	beq.n	800dee0 <uxr_serialize_DATAWRITER_Representation+0x30>
 800dec6:	2b03      	cmp	r3, #3
 800dec8:	d010      	beq.n	800deec <uxr_serialize_DATAWRITER_Representation+0x3c>
 800deca:	2b01      	cmp	r3, #1
 800decc:	d008      	beq.n	800dee0 <uxr_serialize_DATAWRITER_Representation+0x30>
 800dece:	2202      	movs	r2, #2
 800ded0:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800ded4:	4630      	mov	r0, r6
 800ded6:	f004 f803 	bl	8011ee0 <ucdr_serialize_array_uint8_t>
 800deda:	4020      	ands	r0, r4
 800dedc:	b2c0      	uxtb	r0, r0
 800dede:	bd70      	pop	{r4, r5, r6, pc}
 800dee0:	6869      	ldr	r1, [r5, #4]
 800dee2:	4630      	mov	r0, r6
 800dee4:	f005 f966 	bl	80131b4 <ucdr_serialize_string>
 800dee8:	4604      	mov	r4, r0
 800deea:	e7f0      	b.n	800dece <uxr_serialize_DATAWRITER_Representation+0x1e>
 800deec:	4629      	mov	r1, r5
 800deee:	4630      	mov	r0, r6
 800def0:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800def4:	3104      	adds	r1, #4
 800def6:	f005 f931 	bl	801315c <ucdr_serialize_sequence_uint8_t>
 800defa:	4604      	mov	r4, r0
 800defc:	e7e7      	b.n	800dece <uxr_serialize_DATAWRITER_Representation+0x1e>
 800defe:	bf00      	nop

0800df00 <uxr_serialize_ObjectVariant.part.0>:
 800df00:	b570      	push	{r4, r5, r6, lr}
 800df02:	780b      	ldrb	r3, [r1, #0]
 800df04:	3b01      	subs	r3, #1
 800df06:	460c      	mov	r4, r1
 800df08:	4605      	mov	r5, r0
 800df0a:	2b0d      	cmp	r3, #13
 800df0c:	d854      	bhi.n	800dfb8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800df0e:	e8df f003 	tbb	[pc, r3]
 800df12:	0730      	.short	0x0730
 800df14:	07071b1b 	.word	0x07071b1b
 800df18:	0c530707 	.word	0x0c530707
 800df1c:	494e0c0c 	.word	0x494e0c0c
 800df20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800df24:	3104      	adds	r1, #4
 800df26:	f7ff bfc3 	b.w	800deb0 <uxr_serialize_DATAWRITER_Representation>
 800df2a:	7909      	ldrb	r1, [r1, #4]
 800df2c:	f004 f8ce 	bl	80120cc <ucdr_serialize_uint8_t>
 800df30:	b1e8      	cbz	r0, 800df6e <uxr_serialize_ObjectVariant.part.0+0x6e>
 800df32:	7923      	ldrb	r3, [r4, #4]
 800df34:	2b01      	cmp	r3, #1
 800df36:	d001      	beq.n	800df3c <uxr_serialize_ObjectVariant.part.0+0x3c>
 800df38:	2b02      	cmp	r3, #2
 800df3a:	d13d      	bne.n	800dfb8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800df3c:	68a1      	ldr	r1, [r4, #8]
 800df3e:	4628      	mov	r0, r5
 800df40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800df44:	f005 b936 	b.w	80131b4 <ucdr_serialize_string>
 800df48:	7909      	ldrb	r1, [r1, #4]
 800df4a:	f004 f8bf 	bl	80120cc <ucdr_serialize_uint8_t>
 800df4e:	4606      	mov	r6, r0
 800df50:	b120      	cbz	r0, 800df5c <uxr_serialize_ObjectVariant.part.0+0x5c>
 800df52:	7923      	ldrb	r3, [r4, #4]
 800df54:	2b02      	cmp	r3, #2
 800df56:	d039      	beq.n	800dfcc <uxr_serialize_ObjectVariant.part.0+0xcc>
 800df58:	2b03      	cmp	r3, #3
 800df5a:	d02f      	beq.n	800dfbc <uxr_serialize_ObjectVariant.part.0+0xbc>
 800df5c:	2202      	movs	r2, #2
 800df5e:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800df62:	4628      	mov	r0, r5
 800df64:	f003 ffbc 	bl	8011ee0 <ucdr_serialize_array_uint8_t>
 800df68:	4030      	ands	r0, r6
 800df6a:	b2c0      	uxtb	r0, r0
 800df6c:	bd70      	pop	{r4, r5, r6, pc}
 800df6e:	2000      	movs	r0, #0
 800df70:	bd70      	pop	{r4, r5, r6, pc}
 800df72:	7909      	ldrb	r1, [r1, #4]
 800df74:	f004 f8aa 	bl	80120cc <ucdr_serialize_uint8_t>
 800df78:	4606      	mov	r6, r0
 800df7a:	b158      	cbz	r0, 800df94 <uxr_serialize_ObjectVariant.part.0+0x94>
 800df7c:	7923      	ldrb	r3, [r4, #4]
 800df7e:	2b02      	cmp	r3, #2
 800df80:	d003      	beq.n	800df8a <uxr_serialize_ObjectVariant.part.0+0x8a>
 800df82:	2b03      	cmp	r3, #3
 800df84:	d028      	beq.n	800dfd8 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800df86:	2b01      	cmp	r3, #1
 800df88:	d104      	bne.n	800df94 <uxr_serialize_ObjectVariant.part.0+0x94>
 800df8a:	68a1      	ldr	r1, [r4, #8]
 800df8c:	4628      	mov	r0, r5
 800df8e:	f005 f911 	bl	80131b4 <ucdr_serialize_string>
 800df92:	4606      	mov	r6, r0
 800df94:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800df98:	4628      	mov	r0, r5
 800df9a:	f004 fdd3 	bl	8012b44 <ucdr_serialize_int16_t>
 800df9e:	4030      	ands	r0, r6
 800dfa0:	b2c0      	uxtb	r0, r0
 800dfa2:	bd70      	pop	{r4, r5, r6, pc}
 800dfa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dfa8:	3104      	adds	r1, #4
 800dfaa:	f7ff be7b 	b.w	800dca4 <uxr_serialize_CLIENT_Representation>
 800dfae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dfb2:	3104      	adds	r1, #4
 800dfb4:	f7ff bf32 	b.w	800de1c <uxr_serialize_AGENT_Representation>
 800dfb8:	2001      	movs	r0, #1
 800dfba:	bd70      	pop	{r4, r5, r6, pc}
 800dfbc:	68a2      	ldr	r2, [r4, #8]
 800dfbe:	f104 010c 	add.w	r1, r4, #12
 800dfc2:	4628      	mov	r0, r5
 800dfc4:	f005 f8ca 	bl	801315c <ucdr_serialize_sequence_uint8_t>
 800dfc8:	4606      	mov	r6, r0
 800dfca:	e7c7      	b.n	800df5c <uxr_serialize_ObjectVariant.part.0+0x5c>
 800dfcc:	68a1      	ldr	r1, [r4, #8]
 800dfce:	4628      	mov	r0, r5
 800dfd0:	f005 f8f0 	bl	80131b4 <ucdr_serialize_string>
 800dfd4:	4606      	mov	r6, r0
 800dfd6:	e7c1      	b.n	800df5c <uxr_serialize_ObjectVariant.part.0+0x5c>
 800dfd8:	68a2      	ldr	r2, [r4, #8]
 800dfda:	f104 010c 	add.w	r1, r4, #12
 800dfde:	4628      	mov	r0, r5
 800dfe0:	f005 f8bc 	bl	801315c <ucdr_serialize_sequence_uint8_t>
 800dfe4:	4606      	mov	r6, r0
 800dfe6:	e7d5      	b.n	800df94 <uxr_serialize_ObjectVariant.part.0+0x94>

0800dfe8 <uxr_deserialize_DATAWRITER_Representation>:
 800dfe8:	b570      	push	{r4, r5, r6, lr}
 800dfea:	4606      	mov	r6, r0
 800dfec:	460d      	mov	r5, r1
 800dfee:	f004 f883 	bl	80120f8 <ucdr_deserialize_uint8_t>
 800dff2:	4604      	mov	r4, r0
 800dff4:	b130      	cbz	r0, 800e004 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800dff6:	782b      	ldrb	r3, [r5, #0]
 800dff8:	2b02      	cmp	r3, #2
 800dffa:	d00c      	beq.n	800e016 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800dffc:	2b03      	cmp	r3, #3
 800dffe:	d012      	beq.n	800e026 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800e000:	2b01      	cmp	r3, #1
 800e002:	d008      	beq.n	800e016 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800e004:	2202      	movs	r2, #2
 800e006:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800e00a:	4630      	mov	r0, r6
 800e00c:	f003 ffcc 	bl	8011fa8 <ucdr_deserialize_array_uint8_t>
 800e010:	4020      	ands	r0, r4
 800e012:	b2c0      	uxtb	r0, r0
 800e014:	bd70      	pop	{r4, r5, r6, pc}
 800e016:	6869      	ldr	r1, [r5, #4]
 800e018:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e01c:	4630      	mov	r0, r6
 800e01e:	f005 f8d9 	bl	80131d4 <ucdr_deserialize_string>
 800e022:	4604      	mov	r4, r0
 800e024:	e7ee      	b.n	800e004 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800e026:	1d2b      	adds	r3, r5, #4
 800e028:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e02c:	f105 0108 	add.w	r1, r5, #8
 800e030:	4630      	mov	r0, r6
 800e032:	f005 f8a5 	bl	8013180 <ucdr_deserialize_sequence_uint8_t>
 800e036:	4604      	mov	r4, r0
 800e038:	e7e4      	b.n	800e004 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800e03a:	bf00      	nop

0800e03c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800e03c:	b570      	push	{r4, r5, r6, lr}
 800e03e:	460d      	mov	r5, r1
 800e040:	7809      	ldrb	r1, [r1, #0]
 800e042:	4606      	mov	r6, r0
 800e044:	f004 f814 	bl	8012070 <ucdr_serialize_bool>
 800e048:	782b      	ldrb	r3, [r5, #0]
 800e04a:	4604      	mov	r4, r0
 800e04c:	b94b      	cbnz	r3, 800e062 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800e04e:	7a29      	ldrb	r1, [r5, #8]
 800e050:	4630      	mov	r0, r6
 800e052:	f004 f80d 	bl	8012070 <ucdr_serialize_bool>
 800e056:	7a2b      	ldrb	r3, [r5, #8]
 800e058:	4004      	ands	r4, r0
 800e05a:	b2e4      	uxtb	r4, r4
 800e05c:	b943      	cbnz	r3, 800e070 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800e05e:	4620      	mov	r0, r4
 800e060:	bd70      	pop	{r4, r5, r6, pc}
 800e062:	6869      	ldr	r1, [r5, #4]
 800e064:	4630      	mov	r0, r6
 800e066:	f005 f8a5 	bl	80131b4 <ucdr_serialize_string>
 800e06a:	4004      	ands	r4, r0
 800e06c:	b2e4      	uxtb	r4, r4
 800e06e:	e7ee      	b.n	800e04e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800e070:	68e9      	ldr	r1, [r5, #12]
 800e072:	4630      	mov	r0, r6
 800e074:	f005 f89e 	bl	80131b4 <ucdr_serialize_string>
 800e078:	4004      	ands	r4, r0
 800e07a:	4620      	mov	r0, r4
 800e07c:	bd70      	pop	{r4, r5, r6, pc}
 800e07e:	bf00      	nop

0800e080 <uxr_deserialize_ObjectVariant>:
 800e080:	b570      	push	{r4, r5, r6, lr}
 800e082:	4605      	mov	r5, r0
 800e084:	460e      	mov	r6, r1
 800e086:	f004 f837 	bl	80120f8 <ucdr_deserialize_uint8_t>
 800e08a:	b168      	cbz	r0, 800e0a8 <uxr_deserialize_ObjectVariant+0x28>
 800e08c:	7833      	ldrb	r3, [r6, #0]
 800e08e:	3b01      	subs	r3, #1
 800e090:	4604      	mov	r4, r0
 800e092:	2b0d      	cmp	r3, #13
 800e094:	d809      	bhi.n	800e0aa <uxr_deserialize_ObjectVariant+0x2a>
 800e096:	e8df f003 	tbb	[pc, r3]
 800e09a:	0a41      	.short	0x0a41
 800e09c:	0a0a2323 	.word	0x0a0a2323
 800e0a0:	10080a0a 	.word	0x10080a0a
 800e0a4:	565c1010 	.word	0x565c1010
 800e0a8:	2400      	movs	r4, #0
 800e0aa:	4620      	mov	r0, r4
 800e0ac:	bd70      	pop	{r4, r5, r6, pc}
 800e0ae:	1d31      	adds	r1, r6, #4
 800e0b0:	4628      	mov	r0, r5
 800e0b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e0b6:	f7ff bf97 	b.w	800dfe8 <uxr_deserialize_DATAWRITER_Representation>
 800e0ba:	1d31      	adds	r1, r6, #4
 800e0bc:	4628      	mov	r0, r5
 800e0be:	f004 f81b 	bl	80120f8 <ucdr_deserialize_uint8_t>
 800e0c2:	2800      	cmp	r0, #0
 800e0c4:	d0f0      	beq.n	800e0a8 <uxr_deserialize_ObjectVariant+0x28>
 800e0c6:	7933      	ldrb	r3, [r6, #4]
 800e0c8:	2b01      	cmp	r3, #1
 800e0ca:	d001      	beq.n	800e0d0 <uxr_deserialize_ObjectVariant+0x50>
 800e0cc:	2b02      	cmp	r3, #2
 800e0ce:	d1ec      	bne.n	800e0aa <uxr_deserialize_ObjectVariant+0x2a>
 800e0d0:	68b1      	ldr	r1, [r6, #8]
 800e0d2:	4628      	mov	r0, r5
 800e0d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e0d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e0dc:	f005 b87a 	b.w	80131d4 <ucdr_deserialize_string>
 800e0e0:	1d31      	adds	r1, r6, #4
 800e0e2:	4628      	mov	r0, r5
 800e0e4:	f004 f808 	bl	80120f8 <ucdr_deserialize_uint8_t>
 800e0e8:	4604      	mov	r4, r0
 800e0ea:	b170      	cbz	r0, 800e10a <uxr_deserialize_ObjectVariant+0x8a>
 800e0ec:	7933      	ldrb	r3, [r6, #4]
 800e0ee:	2b02      	cmp	r3, #2
 800e0f0:	d04c      	beq.n	800e18c <uxr_deserialize_ObjectVariant+0x10c>
 800e0f2:	2b03      	cmp	r3, #3
 800e0f4:	d109      	bne.n	800e10a <uxr_deserialize_ObjectVariant+0x8a>
 800e0f6:	f106 0308 	add.w	r3, r6, #8
 800e0fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e0fe:	f106 010c 	add.w	r1, r6, #12
 800e102:	4628      	mov	r0, r5
 800e104:	f005 f83c 	bl	8013180 <ucdr_deserialize_sequence_uint8_t>
 800e108:	4604      	mov	r4, r0
 800e10a:	2202      	movs	r2, #2
 800e10c:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800e110:	4628      	mov	r0, r5
 800e112:	f003 ff49 	bl	8011fa8 <ucdr_deserialize_array_uint8_t>
 800e116:	4020      	ands	r0, r4
 800e118:	b2c4      	uxtb	r4, r0
 800e11a:	e7c6      	b.n	800e0aa <uxr_deserialize_ObjectVariant+0x2a>
 800e11c:	1d31      	adds	r1, r6, #4
 800e11e:	4628      	mov	r0, r5
 800e120:	f003 ffea 	bl	80120f8 <ucdr_deserialize_uint8_t>
 800e124:	4604      	mov	r4, r0
 800e126:	b130      	cbz	r0, 800e136 <uxr_deserialize_ObjectVariant+0xb6>
 800e128:	7933      	ldrb	r3, [r6, #4]
 800e12a:	2b02      	cmp	r3, #2
 800e12c:	d036      	beq.n	800e19c <uxr_deserialize_ObjectVariant+0x11c>
 800e12e:	2b03      	cmp	r3, #3
 800e130:	d03c      	beq.n	800e1ac <uxr_deserialize_ObjectVariant+0x12c>
 800e132:	2b01      	cmp	r3, #1
 800e134:	d032      	beq.n	800e19c <uxr_deserialize_ObjectVariant+0x11c>
 800e136:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800e13a:	4628      	mov	r0, r5
 800e13c:	f004 fd82 	bl	8012c44 <ucdr_deserialize_int16_t>
 800e140:	4020      	ands	r0, r4
 800e142:	b2c4      	uxtb	r4, r0
 800e144:	e7b1      	b.n	800e0aa <uxr_deserialize_ObjectVariant+0x2a>
 800e146:	1d31      	adds	r1, r6, #4
 800e148:	4628      	mov	r0, r5
 800e14a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e14e:	f7ff be01 	b.w	800dd54 <uxr_deserialize_CLIENT_Representation>
 800e152:	2204      	movs	r2, #4
 800e154:	18b1      	adds	r1, r6, r2
 800e156:	4628      	mov	r0, r5
 800e158:	f003 ff26 	bl	8011fa8 <ucdr_deserialize_array_uint8_t>
 800e15c:	2202      	movs	r2, #2
 800e15e:	f106 0108 	add.w	r1, r6, #8
 800e162:	4604      	mov	r4, r0
 800e164:	4628      	mov	r0, r5
 800e166:	f003 ff1f 	bl	8011fa8 <ucdr_deserialize_array_uint8_t>
 800e16a:	2202      	movs	r2, #2
 800e16c:	4004      	ands	r4, r0
 800e16e:	f106 010a 	add.w	r1, r6, #10
 800e172:	4628      	mov	r0, r5
 800e174:	f003 ff18 	bl	8011fa8 <ucdr_deserialize_array_uint8_t>
 800e178:	b2e4      	uxtb	r4, r4
 800e17a:	4603      	mov	r3, r0
 800e17c:	f106 010c 	add.w	r1, r6, #12
 800e180:	4628      	mov	r0, r5
 800e182:	401c      	ands	r4, r3
 800e184:	f003 ff8a 	bl	801209c <ucdr_deserialize_bool>
 800e188:	4004      	ands	r4, r0
 800e18a:	e78e      	b.n	800e0aa <uxr_deserialize_ObjectVariant+0x2a>
 800e18c:	68b1      	ldr	r1, [r6, #8]
 800e18e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e192:	4628      	mov	r0, r5
 800e194:	f005 f81e 	bl	80131d4 <ucdr_deserialize_string>
 800e198:	4604      	mov	r4, r0
 800e19a:	e7b6      	b.n	800e10a <uxr_deserialize_ObjectVariant+0x8a>
 800e19c:	68b1      	ldr	r1, [r6, #8]
 800e19e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e1a2:	4628      	mov	r0, r5
 800e1a4:	f005 f816 	bl	80131d4 <ucdr_deserialize_string>
 800e1a8:	4604      	mov	r4, r0
 800e1aa:	e7c4      	b.n	800e136 <uxr_deserialize_ObjectVariant+0xb6>
 800e1ac:	f106 0308 	add.w	r3, r6, #8
 800e1b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e1b4:	f106 010c 	add.w	r1, r6, #12
 800e1b8:	4628      	mov	r0, r5
 800e1ba:	f004 ffe1 	bl	8013180 <ucdr_deserialize_sequence_uint8_t>
 800e1be:	4604      	mov	r4, r0
 800e1c0:	e7b9      	b.n	800e136 <uxr_deserialize_ObjectVariant+0xb6>
 800e1c2:	bf00      	nop

0800e1c4 <uxr_deserialize_BaseObjectRequest>:
 800e1c4:	b570      	push	{r4, r5, r6, lr}
 800e1c6:	2202      	movs	r2, #2
 800e1c8:	4605      	mov	r5, r0
 800e1ca:	460e      	mov	r6, r1
 800e1cc:	f003 feec 	bl	8011fa8 <ucdr_deserialize_array_uint8_t>
 800e1d0:	2202      	movs	r2, #2
 800e1d2:	4604      	mov	r4, r0
 800e1d4:	18b1      	adds	r1, r6, r2
 800e1d6:	4628      	mov	r0, r5
 800e1d8:	f003 fee6 	bl	8011fa8 <ucdr_deserialize_array_uint8_t>
 800e1dc:	4020      	ands	r0, r4
 800e1de:	b2c0      	uxtb	r0, r0
 800e1e0:	bd70      	pop	{r4, r5, r6, pc}
 800e1e2:	bf00      	nop

0800e1e4 <uxr_serialize_ActivityInfoVariant>:
 800e1e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1e8:	460d      	mov	r5, r1
 800e1ea:	7809      	ldrb	r1, [r1, #0]
 800e1ec:	4607      	mov	r7, r0
 800e1ee:	f003 ff6d 	bl	80120cc <ucdr_serialize_uint8_t>
 800e1f2:	4681      	mov	r9, r0
 800e1f4:	b138      	cbz	r0, 800e206 <uxr_serialize_ActivityInfoVariant+0x22>
 800e1f6:	782b      	ldrb	r3, [r5, #0]
 800e1f8:	2b06      	cmp	r3, #6
 800e1fa:	f000 8082 	beq.w	800e302 <uxr_serialize_ActivityInfoVariant+0x11e>
 800e1fe:	2b0d      	cmp	r3, #13
 800e200:	d016      	beq.n	800e230 <uxr_serialize_ActivityInfoVariant+0x4c>
 800e202:	2b05      	cmp	r3, #5
 800e204:	d002      	beq.n	800e20c <uxr_serialize_ActivityInfoVariant+0x28>
 800e206:	4648      	mov	r0, r9
 800e208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e20c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800e210:	4638      	mov	r0, r7
 800e212:	f004 fc97 	bl	8012b44 <ucdr_serialize_int16_t>
 800e216:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800e21a:	4681      	mov	r9, r0
 800e21c:	4638      	mov	r0, r7
 800e21e:	f004 fbc1 	bl	80129a4 <ucdr_serialize_uint64_t>
 800e222:	ea09 0000 	and.w	r0, r9, r0
 800e226:	fa5f f980 	uxtb.w	r9, r0
 800e22a:	4648      	mov	r0, r9
 800e22c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e230:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800e234:	4638      	mov	r0, r7
 800e236:	f004 fc85 	bl	8012b44 <ucdr_serialize_int16_t>
 800e23a:	68e9      	ldr	r1, [r5, #12]
 800e23c:	4681      	mov	r9, r0
 800e23e:	4638      	mov	r0, r7
 800e240:	f004 f95a 	bl	80124f8 <ucdr_serialize_uint32_t>
 800e244:	68eb      	ldr	r3, [r5, #12]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d0eb      	beq.n	800e222 <uxr_serialize_ActivityInfoVariant+0x3e>
 800e24a:	b320      	cbz	r0, 800e296 <uxr_serialize_ActivityInfoVariant+0xb2>
 800e24c:	f105 080c 	add.w	r8, r5, #12
 800e250:	2600      	movs	r6, #0
 800e252:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800e256:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800e25a:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800e25e:	4638      	mov	r0, r7
 800e260:	f003 ff34 	bl	80120cc <ucdr_serialize_uint8_t>
 800e264:	2800      	cmp	r0, #0
 800e266:	d053      	beq.n	800e310 <uxr_serialize_ActivityInfoVariant+0x12c>
 800e268:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800e26c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800e270:	0074      	lsls	r4, r6, #1
 800e272:	00c9      	lsls	r1, r1, #3
 800e274:	2b03      	cmp	r3, #3
 800e276:	d854      	bhi.n	800e322 <uxr_serialize_ActivityInfoVariant+0x13e>
 800e278:	e8df f003 	tbb	[pc, r3]
 800e27c:	02102132 	.word	0x02102132
 800e280:	4441      	add	r1, r8
 800e282:	4638      	mov	r0, r7
 800e284:	6889      	ldr	r1, [r1, #8]
 800e286:	f004 ff95 	bl	80131b4 <ucdr_serialize_string>
 800e28a:	68ea      	ldr	r2, [r5, #12]
 800e28c:	3601      	adds	r6, #1
 800e28e:	4296      	cmp	r6, r2
 800e290:	d242      	bcs.n	800e318 <uxr_serialize_ActivityInfoVariant+0x134>
 800e292:	2800      	cmp	r0, #0
 800e294:	d1dd      	bne.n	800e252 <uxr_serialize_ActivityInfoVariant+0x6e>
 800e296:	f04f 0900 	mov.w	r9, #0
 800e29a:	e7b4      	b.n	800e206 <uxr_serialize_ActivityInfoVariant+0x22>
 800e29c:	3108      	adds	r1, #8
 800e29e:	4441      	add	r1, r8
 800e2a0:	2210      	movs	r2, #16
 800e2a2:	4638      	mov	r0, r7
 800e2a4:	f003 fe1c 	bl	8011ee0 <ucdr_serialize_array_uint8_t>
 800e2a8:	4434      	add	r4, r6
 800e2aa:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800e2ae:	4604      	mov	r4, r0
 800e2b0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800e2b2:	4638      	mov	r0, r7
 800e2b4:	f004 f920 	bl	80124f8 <ucdr_serialize_uint32_t>
 800e2b8:	4020      	ands	r0, r4
 800e2ba:	b2c0      	uxtb	r0, r0
 800e2bc:	e7e5      	b.n	800e28a <uxr_serialize_ActivityInfoVariant+0xa6>
 800e2be:	3108      	adds	r1, #8
 800e2c0:	4441      	add	r1, r8
 800e2c2:	2204      	movs	r2, #4
 800e2c4:	4638      	mov	r0, r7
 800e2c6:	f003 fe0b 	bl	8011ee0 <ucdr_serialize_array_uint8_t>
 800e2ca:	4434      	add	r4, r6
 800e2cc:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800e2d0:	4604      	mov	r4, r0
 800e2d2:	8b19      	ldrh	r1, [r3, #24]
 800e2d4:	4638      	mov	r0, r7
 800e2d6:	f003 ff25 	bl	8012124 <ucdr_serialize_uint16_t>
 800e2da:	4020      	ands	r0, r4
 800e2dc:	b2c0      	uxtb	r0, r0
 800e2de:	e7d4      	b.n	800e28a <uxr_serialize_ActivityInfoVariant+0xa6>
 800e2e0:	3108      	adds	r1, #8
 800e2e2:	4441      	add	r1, r8
 800e2e4:	2202      	movs	r2, #2
 800e2e6:	4638      	mov	r0, r7
 800e2e8:	f003 fdfa 	bl	8011ee0 <ucdr_serialize_array_uint8_t>
 800e2ec:	4434      	add	r4, r6
 800e2ee:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800e2f2:	4604      	mov	r4, r0
 800e2f4:	7d99      	ldrb	r1, [r3, #22]
 800e2f6:	4638      	mov	r0, r7
 800e2f8:	f003 fee8 	bl	80120cc <ucdr_serialize_uint8_t>
 800e2fc:	4020      	ands	r0, r4
 800e2fe:	b2c0      	uxtb	r0, r0
 800e300:	e7c3      	b.n	800e28a <uxr_serialize_ActivityInfoVariant+0xa6>
 800e302:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800e306:	4638      	mov	r0, r7
 800e308:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e30c:	f004 bc1a 	b.w	8012b44 <ucdr_serialize_int16_t>
 800e310:	68ea      	ldr	r2, [r5, #12]
 800e312:	3601      	adds	r6, #1
 800e314:	42b2      	cmp	r2, r6
 800e316:	d8be      	bhi.n	800e296 <uxr_serialize_ActivityInfoVariant+0xb2>
 800e318:	ea09 0900 	and.w	r9, r9, r0
 800e31c:	fa5f f989 	uxtb.w	r9, r9
 800e320:	e771      	b.n	800e206 <uxr_serialize_ActivityInfoVariant+0x22>
 800e322:	68eb      	ldr	r3, [r5, #12]
 800e324:	3601      	adds	r6, #1
 800e326:	429e      	cmp	r6, r3
 800e328:	f10a 0a18 	add.w	sl, sl, #24
 800e32c:	d395      	bcc.n	800e25a <uxr_serialize_ActivityInfoVariant+0x76>
 800e32e:	e76a      	b.n	800e206 <uxr_serialize_ActivityInfoVariant+0x22>

0800e330 <uxr_deserialize_BaseObjectReply>:
 800e330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e334:	2202      	movs	r2, #2
 800e336:	4606      	mov	r6, r0
 800e338:	460f      	mov	r7, r1
 800e33a:	f003 fe35 	bl	8011fa8 <ucdr_deserialize_array_uint8_t>
 800e33e:	2202      	movs	r2, #2
 800e340:	18b9      	adds	r1, r7, r2
 800e342:	4605      	mov	r5, r0
 800e344:	4630      	mov	r0, r6
 800e346:	f003 fe2f 	bl	8011fa8 <ucdr_deserialize_array_uint8_t>
 800e34a:	1d39      	adds	r1, r7, #4
 800e34c:	4680      	mov	r8, r0
 800e34e:	4630      	mov	r0, r6
 800e350:	f003 fed2 	bl	80120f8 <ucdr_deserialize_uint8_t>
 800e354:	1d79      	adds	r1, r7, #5
 800e356:	4604      	mov	r4, r0
 800e358:	4630      	mov	r0, r6
 800e35a:	f003 fecd 	bl	80120f8 <ucdr_deserialize_uint8_t>
 800e35e:	ea05 0508 	and.w	r5, r5, r8
 800e362:	402c      	ands	r4, r5
 800e364:	4020      	ands	r0, r4
 800e366:	b2c0      	uxtb	r0, r0
 800e368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e36c <uxr_serialize_ReadSpecification>:
 800e36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e370:	460e      	mov	r6, r1
 800e372:	7809      	ldrb	r1, [r1, #0]
 800e374:	4607      	mov	r7, r0
 800e376:	f003 fea9 	bl	80120cc <ucdr_serialize_uint8_t>
 800e37a:	7871      	ldrb	r1, [r6, #1]
 800e37c:	4604      	mov	r4, r0
 800e37e:	4638      	mov	r0, r7
 800e380:	f003 fea4 	bl	80120cc <ucdr_serialize_uint8_t>
 800e384:	78b1      	ldrb	r1, [r6, #2]
 800e386:	4004      	ands	r4, r0
 800e388:	4638      	mov	r0, r7
 800e38a:	f003 fe71 	bl	8012070 <ucdr_serialize_bool>
 800e38e:	78b3      	ldrb	r3, [r6, #2]
 800e390:	b2e4      	uxtb	r4, r4
 800e392:	4004      	ands	r4, r0
 800e394:	b94b      	cbnz	r3, 800e3aa <uxr_serialize_ReadSpecification+0x3e>
 800e396:	7a31      	ldrb	r1, [r6, #8]
 800e398:	4638      	mov	r0, r7
 800e39a:	f003 fe69 	bl	8012070 <ucdr_serialize_bool>
 800e39e:	7a33      	ldrb	r3, [r6, #8]
 800e3a0:	4004      	ands	r4, r0
 800e3a2:	b943      	cbnz	r3, 800e3b6 <uxr_serialize_ReadSpecification+0x4a>
 800e3a4:	4620      	mov	r0, r4
 800e3a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3aa:	6871      	ldr	r1, [r6, #4]
 800e3ac:	4638      	mov	r0, r7
 800e3ae:	f004 ff01 	bl	80131b4 <ucdr_serialize_string>
 800e3b2:	4004      	ands	r4, r0
 800e3b4:	e7ef      	b.n	800e396 <uxr_serialize_ReadSpecification+0x2a>
 800e3b6:	8971      	ldrh	r1, [r6, #10]
 800e3b8:	4638      	mov	r0, r7
 800e3ba:	f003 feb3 	bl	8012124 <ucdr_serialize_uint16_t>
 800e3be:	89b1      	ldrh	r1, [r6, #12]
 800e3c0:	4605      	mov	r5, r0
 800e3c2:	4638      	mov	r0, r7
 800e3c4:	f003 feae 	bl	8012124 <ucdr_serialize_uint16_t>
 800e3c8:	89f1      	ldrh	r1, [r6, #14]
 800e3ca:	4005      	ands	r5, r0
 800e3cc:	4638      	mov	r0, r7
 800e3ce:	f003 fea9 	bl	8012124 <ucdr_serialize_uint16_t>
 800e3d2:	8a31      	ldrh	r1, [r6, #16]
 800e3d4:	4680      	mov	r8, r0
 800e3d6:	4638      	mov	r0, r7
 800e3d8:	f003 fea4 	bl	8012124 <ucdr_serialize_uint16_t>
 800e3dc:	b2ed      	uxtb	r5, r5
 800e3de:	4025      	ands	r5, r4
 800e3e0:	ea08 0505 	and.w	r5, r8, r5
 800e3e4:	ea00 0405 	and.w	r4, r0, r5
 800e3e8:	4620      	mov	r0, r4
 800e3ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3ee:	bf00      	nop

0800e3f0 <uxr_serialize_CREATE_CLIENT_Payload>:
 800e3f0:	f7ff bc58 	b.w	800dca4 <uxr_serialize_CLIENT_Representation>

0800e3f4 <uxr_serialize_CREATE_Payload>:
 800e3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3f6:	2202      	movs	r2, #2
 800e3f8:	4607      	mov	r7, r0
 800e3fa:	460e      	mov	r6, r1
 800e3fc:	f003 fd70 	bl	8011ee0 <ucdr_serialize_array_uint8_t>
 800e400:	2202      	movs	r2, #2
 800e402:	18b1      	adds	r1, r6, r2
 800e404:	4605      	mov	r5, r0
 800e406:	4638      	mov	r0, r7
 800e408:	f003 fd6a 	bl	8011ee0 <ucdr_serialize_array_uint8_t>
 800e40c:	7931      	ldrb	r1, [r6, #4]
 800e40e:	4604      	mov	r4, r0
 800e410:	4638      	mov	r0, r7
 800e412:	f003 fe5b 	bl	80120cc <ucdr_serialize_uint8_t>
 800e416:	b170      	cbz	r0, 800e436 <uxr_serialize_CREATE_Payload+0x42>
 800e418:	7933      	ldrb	r3, [r6, #4]
 800e41a:	402c      	ands	r4, r5
 800e41c:	3b01      	subs	r3, #1
 800e41e:	b2e4      	uxtb	r4, r4
 800e420:	2b0d      	cmp	r3, #13
 800e422:	d809      	bhi.n	800e438 <uxr_serialize_CREATE_Payload+0x44>
 800e424:	e8df f003 	tbb	[pc, r3]
 800e428:	23230a4c 	.word	0x23230a4c
 800e42c:	0a0a0a0a 	.word	0x0a0a0a0a
 800e430:	12121208 	.word	0x12121208
 800e434:	3e45      	.short	0x3e45
 800e436:	2400      	movs	r4, #0
 800e438:	4620      	mov	r0, r4
 800e43a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e43c:	f106 0108 	add.w	r1, r6, #8
 800e440:	4638      	mov	r0, r7
 800e442:	f7ff fd35 	bl	800deb0 <uxr_serialize_DATAWRITER_Representation>
 800e446:	4004      	ands	r4, r0
 800e448:	4620      	mov	r0, r4
 800e44a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e44c:	7a31      	ldrb	r1, [r6, #8]
 800e44e:	4638      	mov	r0, r7
 800e450:	f003 fe3c 	bl	80120cc <ucdr_serialize_uint8_t>
 800e454:	2800      	cmp	r0, #0
 800e456:	d0ee      	beq.n	800e436 <uxr_serialize_CREATE_Payload+0x42>
 800e458:	7a33      	ldrb	r3, [r6, #8]
 800e45a:	2b01      	cmp	r3, #1
 800e45c:	d001      	beq.n	800e462 <uxr_serialize_CREATE_Payload+0x6e>
 800e45e:	2b02      	cmp	r3, #2
 800e460:	d1ea      	bne.n	800e438 <uxr_serialize_CREATE_Payload+0x44>
 800e462:	68f1      	ldr	r1, [r6, #12]
 800e464:	4638      	mov	r0, r7
 800e466:	f004 fea5 	bl	80131b4 <ucdr_serialize_string>
 800e46a:	4004      	ands	r4, r0
 800e46c:	e7e4      	b.n	800e438 <uxr_serialize_CREATE_Payload+0x44>
 800e46e:	7a31      	ldrb	r1, [r6, #8]
 800e470:	4638      	mov	r0, r7
 800e472:	f003 fe2b 	bl	80120cc <ucdr_serialize_uint8_t>
 800e476:	4605      	mov	r5, r0
 800e478:	b158      	cbz	r0, 800e492 <uxr_serialize_CREATE_Payload+0x9e>
 800e47a:	7a33      	ldrb	r3, [r6, #8]
 800e47c:	2b02      	cmp	r3, #2
 800e47e:	d034      	beq.n	800e4ea <uxr_serialize_CREATE_Payload+0xf6>
 800e480:	2b03      	cmp	r3, #3
 800e482:	d106      	bne.n	800e492 <uxr_serialize_CREATE_Payload+0x9e>
 800e484:	68f2      	ldr	r2, [r6, #12]
 800e486:	f106 0110 	add.w	r1, r6, #16
 800e48a:	4638      	mov	r0, r7
 800e48c:	f004 fe66 	bl	801315c <ucdr_serialize_sequence_uint8_t>
 800e490:	4605      	mov	r5, r0
 800e492:	2202      	movs	r2, #2
 800e494:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 800e498:	4638      	mov	r0, r7
 800e49a:	f003 fd21 	bl	8011ee0 <ucdr_serialize_array_uint8_t>
 800e49e:	4028      	ands	r0, r5
 800e4a0:	4004      	ands	r4, r0
 800e4a2:	e7c9      	b.n	800e438 <uxr_serialize_CREATE_Payload+0x44>
 800e4a4:	f106 0108 	add.w	r1, r6, #8
 800e4a8:	4638      	mov	r0, r7
 800e4aa:	f7ff fbfb 	bl	800dca4 <uxr_serialize_CLIENT_Representation>
 800e4ae:	4004      	ands	r4, r0
 800e4b0:	e7c2      	b.n	800e438 <uxr_serialize_CREATE_Payload+0x44>
 800e4b2:	f106 0108 	add.w	r1, r6, #8
 800e4b6:	4638      	mov	r0, r7
 800e4b8:	f7ff fcb0 	bl	800de1c <uxr_serialize_AGENT_Representation>
 800e4bc:	4004      	ands	r4, r0
 800e4be:	e7bb      	b.n	800e438 <uxr_serialize_CREATE_Payload+0x44>
 800e4c0:	7a31      	ldrb	r1, [r6, #8]
 800e4c2:	4638      	mov	r0, r7
 800e4c4:	f003 fe02 	bl	80120cc <ucdr_serialize_uint8_t>
 800e4c8:	4605      	mov	r5, r0
 800e4ca:	b130      	cbz	r0, 800e4da <uxr_serialize_CREATE_Payload+0xe6>
 800e4cc:	7a33      	ldrb	r3, [r6, #8]
 800e4ce:	2b02      	cmp	r3, #2
 800e4d0:	d011      	beq.n	800e4f6 <uxr_serialize_CREATE_Payload+0x102>
 800e4d2:	2b03      	cmp	r3, #3
 800e4d4:	d015      	beq.n	800e502 <uxr_serialize_CREATE_Payload+0x10e>
 800e4d6:	2b01      	cmp	r3, #1
 800e4d8:	d00d      	beq.n	800e4f6 <uxr_serialize_CREATE_Payload+0x102>
 800e4da:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 800e4de:	4638      	mov	r0, r7
 800e4e0:	f004 fb30 	bl	8012b44 <ucdr_serialize_int16_t>
 800e4e4:	4028      	ands	r0, r5
 800e4e6:	4004      	ands	r4, r0
 800e4e8:	e7a6      	b.n	800e438 <uxr_serialize_CREATE_Payload+0x44>
 800e4ea:	68f1      	ldr	r1, [r6, #12]
 800e4ec:	4638      	mov	r0, r7
 800e4ee:	f004 fe61 	bl	80131b4 <ucdr_serialize_string>
 800e4f2:	4605      	mov	r5, r0
 800e4f4:	e7cd      	b.n	800e492 <uxr_serialize_CREATE_Payload+0x9e>
 800e4f6:	68f1      	ldr	r1, [r6, #12]
 800e4f8:	4638      	mov	r0, r7
 800e4fa:	f004 fe5b 	bl	80131b4 <ucdr_serialize_string>
 800e4fe:	4605      	mov	r5, r0
 800e500:	e7eb      	b.n	800e4da <uxr_serialize_CREATE_Payload+0xe6>
 800e502:	68f2      	ldr	r2, [r6, #12]
 800e504:	f106 0110 	add.w	r1, r6, #16
 800e508:	4638      	mov	r0, r7
 800e50a:	f004 fe27 	bl	801315c <ucdr_serialize_sequence_uint8_t>
 800e50e:	4605      	mov	r5, r0
 800e510:	e7e3      	b.n	800e4da <uxr_serialize_CREATE_Payload+0xe6>
 800e512:	bf00      	nop

0800e514 <uxr_deserialize_GET_INFO_Payload>:
 800e514:	b570      	push	{r4, r5, r6, lr}
 800e516:	2202      	movs	r2, #2
 800e518:	4605      	mov	r5, r0
 800e51a:	460e      	mov	r6, r1
 800e51c:	f003 fd44 	bl	8011fa8 <ucdr_deserialize_array_uint8_t>
 800e520:	2202      	movs	r2, #2
 800e522:	18b1      	adds	r1, r6, r2
 800e524:	4604      	mov	r4, r0
 800e526:	4628      	mov	r0, r5
 800e528:	f003 fd3e 	bl	8011fa8 <ucdr_deserialize_array_uint8_t>
 800e52c:	1d31      	adds	r1, r6, #4
 800e52e:	4004      	ands	r4, r0
 800e530:	4628      	mov	r0, r5
 800e532:	f004 f911 	bl	8012758 <ucdr_deserialize_uint32_t>
 800e536:	b2e4      	uxtb	r4, r4
 800e538:	4020      	ands	r0, r4
 800e53a:	bd70      	pop	{r4, r5, r6, pc}

0800e53c <uxr_serialize_DELETE_Payload>:
 800e53c:	b570      	push	{r4, r5, r6, lr}
 800e53e:	2202      	movs	r2, #2
 800e540:	4605      	mov	r5, r0
 800e542:	460e      	mov	r6, r1
 800e544:	f003 fccc 	bl	8011ee0 <ucdr_serialize_array_uint8_t>
 800e548:	2202      	movs	r2, #2
 800e54a:	4604      	mov	r4, r0
 800e54c:	18b1      	adds	r1, r6, r2
 800e54e:	4628      	mov	r0, r5
 800e550:	f003 fcc6 	bl	8011ee0 <ucdr_serialize_array_uint8_t>
 800e554:	4020      	ands	r0, r4
 800e556:	b2c0      	uxtb	r0, r0
 800e558:	bd70      	pop	{r4, r5, r6, pc}
 800e55a:	bf00      	nop

0800e55c <uxr_deserialize_STATUS_AGENT_Payload>:
 800e55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e560:	4605      	mov	r5, r0
 800e562:	460e      	mov	r6, r1
 800e564:	f003 fdc8 	bl	80120f8 <ucdr_deserialize_uint8_t>
 800e568:	1c71      	adds	r1, r6, #1
 800e56a:	4604      	mov	r4, r0
 800e56c:	4628      	mov	r0, r5
 800e56e:	f003 fdc3 	bl	80120f8 <ucdr_deserialize_uint8_t>
 800e572:	2204      	movs	r2, #4
 800e574:	18b1      	adds	r1, r6, r2
 800e576:	4680      	mov	r8, r0
 800e578:	4628      	mov	r0, r5
 800e57a:	f003 fd15 	bl	8011fa8 <ucdr_deserialize_array_uint8_t>
 800e57e:	f106 0108 	add.w	r1, r6, #8
 800e582:	4607      	mov	r7, r0
 800e584:	2202      	movs	r2, #2
 800e586:	4628      	mov	r0, r5
 800e588:	f003 fd0e 	bl	8011fa8 <ucdr_deserialize_array_uint8_t>
 800e58c:	ea04 0308 	and.w	r3, r4, r8
 800e590:	b2db      	uxtb	r3, r3
 800e592:	ea03 0407 	and.w	r4, r3, r7
 800e596:	2202      	movs	r2, #2
 800e598:	4607      	mov	r7, r0
 800e59a:	f106 010a 	add.w	r1, r6, #10
 800e59e:	4628      	mov	r0, r5
 800e5a0:	f003 fd02 	bl	8011fa8 <ucdr_deserialize_array_uint8_t>
 800e5a4:	f106 010c 	add.w	r1, r6, #12
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	4628      	mov	r0, r5
 800e5ac:	461d      	mov	r5, r3
 800e5ae:	f003 fd75 	bl	801209c <ucdr_deserialize_bool>
 800e5b2:	403c      	ands	r4, r7
 800e5b4:	4025      	ands	r5, r4
 800e5b6:	4028      	ands	r0, r5
 800e5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e5bc <uxr_deserialize_STATUS_Payload>:
 800e5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5c0:	2202      	movs	r2, #2
 800e5c2:	4606      	mov	r6, r0
 800e5c4:	460f      	mov	r7, r1
 800e5c6:	f003 fcef 	bl	8011fa8 <ucdr_deserialize_array_uint8_t>
 800e5ca:	2202      	movs	r2, #2
 800e5cc:	18b9      	adds	r1, r7, r2
 800e5ce:	4605      	mov	r5, r0
 800e5d0:	4630      	mov	r0, r6
 800e5d2:	f003 fce9 	bl	8011fa8 <ucdr_deserialize_array_uint8_t>
 800e5d6:	1d39      	adds	r1, r7, #4
 800e5d8:	4680      	mov	r8, r0
 800e5da:	4630      	mov	r0, r6
 800e5dc:	f003 fd8c 	bl	80120f8 <ucdr_deserialize_uint8_t>
 800e5e0:	1d79      	adds	r1, r7, #5
 800e5e2:	4604      	mov	r4, r0
 800e5e4:	4630      	mov	r0, r6
 800e5e6:	f003 fd87 	bl	80120f8 <ucdr_deserialize_uint8_t>
 800e5ea:	ea05 0508 	and.w	r5, r5, r8
 800e5ee:	402c      	ands	r4, r5
 800e5f0:	4020      	ands	r0, r4
 800e5f2:	b2c0      	uxtb	r0, r0
 800e5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e5f8 <uxr_serialize_INFO_Payload>:
 800e5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5fc:	2202      	movs	r2, #2
 800e5fe:	460c      	mov	r4, r1
 800e600:	4605      	mov	r5, r0
 800e602:	f003 fc6d 	bl	8011ee0 <ucdr_serialize_array_uint8_t>
 800e606:	2202      	movs	r2, #2
 800e608:	18a1      	adds	r1, r4, r2
 800e60a:	4680      	mov	r8, r0
 800e60c:	4628      	mov	r0, r5
 800e60e:	f003 fc67 	bl	8011ee0 <ucdr_serialize_array_uint8_t>
 800e612:	7921      	ldrb	r1, [r4, #4]
 800e614:	4607      	mov	r7, r0
 800e616:	4628      	mov	r0, r5
 800e618:	f003 fd58 	bl	80120cc <ucdr_serialize_uint8_t>
 800e61c:	7961      	ldrb	r1, [r4, #5]
 800e61e:	4606      	mov	r6, r0
 800e620:	4628      	mov	r0, r5
 800e622:	f003 fd53 	bl	80120cc <ucdr_serialize_uint8_t>
 800e626:	ea08 0807 	and.w	r8, r8, r7
 800e62a:	ea06 0608 	and.w	r6, r6, r8
 800e62e:	4006      	ands	r6, r0
 800e630:	7a21      	ldrb	r1, [r4, #8]
 800e632:	4628      	mov	r0, r5
 800e634:	f003 fd1c 	bl	8012070 <ucdr_serialize_bool>
 800e638:	7a23      	ldrb	r3, [r4, #8]
 800e63a:	b2f7      	uxtb	r7, r6
 800e63c:	4606      	mov	r6, r0
 800e63e:	b96b      	cbnz	r3, 800e65c <uxr_serialize_INFO_Payload+0x64>
 800e640:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800e644:	4628      	mov	r0, r5
 800e646:	f003 fd13 	bl	8012070 <ucdr_serialize_bool>
 800e64a:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800e64e:	4030      	ands	r0, r6
 800e650:	b2c6      	uxtb	r6, r0
 800e652:	b983      	cbnz	r3, 800e676 <uxr_serialize_INFO_Payload+0x7e>
 800e654:	ea06 0007 	and.w	r0, r6, r7
 800e658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e65c:	7b21      	ldrb	r1, [r4, #12]
 800e65e:	4628      	mov	r0, r5
 800e660:	f003 fd34 	bl	80120cc <ucdr_serialize_uint8_t>
 800e664:	b188      	cbz	r0, 800e68a <uxr_serialize_INFO_Payload+0x92>
 800e666:	f104 010c 	add.w	r1, r4, #12
 800e66a:	4628      	mov	r0, r5
 800e66c:	f7ff fc48 	bl	800df00 <uxr_serialize_ObjectVariant.part.0>
 800e670:	4030      	ands	r0, r6
 800e672:	b2c6      	uxtb	r6, r0
 800e674:	e7e4      	b.n	800e640 <uxr_serialize_INFO_Payload+0x48>
 800e676:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800e67a:	4628      	mov	r0, r5
 800e67c:	f7ff fdb2 	bl	800e1e4 <uxr_serialize_ActivityInfoVariant>
 800e680:	4006      	ands	r6, r0
 800e682:	ea06 0007 	and.w	r0, r6, r7
 800e686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e68a:	4606      	mov	r6, r0
 800e68c:	e7d8      	b.n	800e640 <uxr_serialize_INFO_Payload+0x48>
 800e68e:	bf00      	nop

0800e690 <uxr_serialize_READ_DATA_Payload>:
 800e690:	b570      	push	{r4, r5, r6, lr}
 800e692:	2202      	movs	r2, #2
 800e694:	4605      	mov	r5, r0
 800e696:	460e      	mov	r6, r1
 800e698:	f003 fc22 	bl	8011ee0 <ucdr_serialize_array_uint8_t>
 800e69c:	2202      	movs	r2, #2
 800e69e:	18b1      	adds	r1, r6, r2
 800e6a0:	4604      	mov	r4, r0
 800e6a2:	4628      	mov	r0, r5
 800e6a4:	f003 fc1c 	bl	8011ee0 <ucdr_serialize_array_uint8_t>
 800e6a8:	1d31      	adds	r1, r6, #4
 800e6aa:	4004      	ands	r4, r0
 800e6ac:	4628      	mov	r0, r5
 800e6ae:	f7ff fe5d 	bl	800e36c <uxr_serialize_ReadSpecification>
 800e6b2:	b2e4      	uxtb	r4, r4
 800e6b4:	4020      	ands	r0, r4
 800e6b6:	bd70      	pop	{r4, r5, r6, pc}

0800e6b8 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800e6b8:	b570      	push	{r4, r5, r6, lr}
 800e6ba:	2202      	movs	r2, #2
 800e6bc:	4605      	mov	r5, r0
 800e6be:	460e      	mov	r6, r1
 800e6c0:	f003 fc0e 	bl	8011ee0 <ucdr_serialize_array_uint8_t>
 800e6c4:	2202      	movs	r2, #2
 800e6c6:	4604      	mov	r4, r0
 800e6c8:	18b1      	adds	r1, r6, r2
 800e6ca:	4628      	mov	r0, r5
 800e6cc:	f003 fc08 	bl	8011ee0 <ucdr_serialize_array_uint8_t>
 800e6d0:	4020      	ands	r0, r4
 800e6d2:	b2c0      	uxtb	r0, r0
 800e6d4:	bd70      	pop	{r4, r5, r6, pc}
 800e6d6:	bf00      	nop

0800e6d8 <uxr_serialize_ACKNACK_Payload>:
 800e6d8:	b570      	push	{r4, r5, r6, lr}
 800e6da:	460c      	mov	r4, r1
 800e6dc:	460e      	mov	r6, r1
 800e6de:	f834 1b02 	ldrh.w	r1, [r4], #2
 800e6e2:	4605      	mov	r5, r0
 800e6e4:	f003 fd1e 	bl	8012124 <ucdr_serialize_uint16_t>
 800e6e8:	2202      	movs	r2, #2
 800e6ea:	4621      	mov	r1, r4
 800e6ec:	4604      	mov	r4, r0
 800e6ee:	4628      	mov	r0, r5
 800e6f0:	f003 fbf6 	bl	8011ee0 <ucdr_serialize_array_uint8_t>
 800e6f4:	7931      	ldrb	r1, [r6, #4]
 800e6f6:	4004      	ands	r4, r0
 800e6f8:	4628      	mov	r0, r5
 800e6fa:	f003 fce7 	bl	80120cc <ucdr_serialize_uint8_t>
 800e6fe:	b2e4      	uxtb	r4, r4
 800e700:	4020      	ands	r0, r4
 800e702:	bd70      	pop	{r4, r5, r6, pc}

0800e704 <uxr_deserialize_ACKNACK_Payload>:
 800e704:	b570      	push	{r4, r5, r6, lr}
 800e706:	4605      	mov	r5, r0
 800e708:	460e      	mov	r6, r1
 800e70a:	f003 fe0b 	bl	8012324 <ucdr_deserialize_uint16_t>
 800e70e:	2202      	movs	r2, #2
 800e710:	18b1      	adds	r1, r6, r2
 800e712:	4604      	mov	r4, r0
 800e714:	4628      	mov	r0, r5
 800e716:	f003 fc47 	bl	8011fa8 <ucdr_deserialize_array_uint8_t>
 800e71a:	1d31      	adds	r1, r6, #4
 800e71c:	4004      	ands	r4, r0
 800e71e:	4628      	mov	r0, r5
 800e720:	f003 fcea 	bl	80120f8 <ucdr_deserialize_uint8_t>
 800e724:	b2e4      	uxtb	r4, r4
 800e726:	4020      	ands	r0, r4
 800e728:	bd70      	pop	{r4, r5, r6, pc}
 800e72a:	bf00      	nop

0800e72c <uxr_serialize_HEARTBEAT_Payload>:
 800e72c:	b570      	push	{r4, r5, r6, lr}
 800e72e:	460d      	mov	r5, r1
 800e730:	8809      	ldrh	r1, [r1, #0]
 800e732:	4606      	mov	r6, r0
 800e734:	f003 fcf6 	bl	8012124 <ucdr_serialize_uint16_t>
 800e738:	8869      	ldrh	r1, [r5, #2]
 800e73a:	4604      	mov	r4, r0
 800e73c:	4630      	mov	r0, r6
 800e73e:	f003 fcf1 	bl	8012124 <ucdr_serialize_uint16_t>
 800e742:	7929      	ldrb	r1, [r5, #4]
 800e744:	4004      	ands	r4, r0
 800e746:	4630      	mov	r0, r6
 800e748:	f003 fcc0 	bl	80120cc <ucdr_serialize_uint8_t>
 800e74c:	b2e4      	uxtb	r4, r4
 800e74e:	4020      	ands	r0, r4
 800e750:	bd70      	pop	{r4, r5, r6, pc}
 800e752:	bf00      	nop

0800e754 <uxr_deserialize_HEARTBEAT_Payload>:
 800e754:	b570      	push	{r4, r5, r6, lr}
 800e756:	4605      	mov	r5, r0
 800e758:	460e      	mov	r6, r1
 800e75a:	f003 fde3 	bl	8012324 <ucdr_deserialize_uint16_t>
 800e75e:	1cb1      	adds	r1, r6, #2
 800e760:	4604      	mov	r4, r0
 800e762:	4628      	mov	r0, r5
 800e764:	f003 fdde 	bl	8012324 <ucdr_deserialize_uint16_t>
 800e768:	1d31      	adds	r1, r6, #4
 800e76a:	4004      	ands	r4, r0
 800e76c:	4628      	mov	r0, r5
 800e76e:	f003 fcc3 	bl	80120f8 <ucdr_deserialize_uint8_t>
 800e772:	b2e4      	uxtb	r4, r4
 800e774:	4020      	ands	r0, r4
 800e776:	bd70      	pop	{r4, r5, r6, pc}

0800e778 <uxr_serialize_TIMESTAMP_Payload>:
 800e778:	b570      	push	{r4, r5, r6, lr}
 800e77a:	460d      	mov	r5, r1
 800e77c:	6809      	ldr	r1, [r1, #0]
 800e77e:	4606      	mov	r6, r0
 800e780:	f004 fad4 	bl	8012d2c <ucdr_serialize_int32_t>
 800e784:	6869      	ldr	r1, [r5, #4]
 800e786:	4604      	mov	r4, r0
 800e788:	4630      	mov	r0, r6
 800e78a:	f003 feb5 	bl	80124f8 <ucdr_serialize_uint32_t>
 800e78e:	4020      	ands	r0, r4
 800e790:	b2c0      	uxtb	r0, r0
 800e792:	bd70      	pop	{r4, r5, r6, pc}

0800e794 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800e794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e798:	4605      	mov	r5, r0
 800e79a:	460e      	mov	r6, r1
 800e79c:	f004 fb5e 	bl	8012e5c <ucdr_deserialize_int32_t>
 800e7a0:	1d31      	adds	r1, r6, #4
 800e7a2:	4607      	mov	r7, r0
 800e7a4:	4628      	mov	r0, r5
 800e7a6:	f003 ffd7 	bl	8012758 <ucdr_deserialize_uint32_t>
 800e7aa:	f106 0108 	add.w	r1, r6, #8
 800e7ae:	4680      	mov	r8, r0
 800e7b0:	4628      	mov	r0, r5
 800e7b2:	f004 fb53 	bl	8012e5c <ucdr_deserialize_int32_t>
 800e7b6:	f106 010c 	add.w	r1, r6, #12
 800e7ba:	4604      	mov	r4, r0
 800e7bc:	4628      	mov	r0, r5
 800e7be:	f003 ffcb 	bl	8012758 <ucdr_deserialize_uint32_t>
 800e7c2:	ea07 0708 	and.w	r7, r7, r8
 800e7c6:	403c      	ands	r4, r7
 800e7c8:	f106 0110 	add.w	r1, r6, #16
 800e7cc:	4004      	ands	r4, r0
 800e7ce:	4628      	mov	r0, r5
 800e7d0:	f004 fb44 	bl	8012e5c <ucdr_deserialize_int32_t>
 800e7d4:	f106 0114 	add.w	r1, r6, #20
 800e7d8:	4607      	mov	r7, r0
 800e7da:	4628      	mov	r0, r5
 800e7dc:	f003 ffbc 	bl	8012758 <ucdr_deserialize_uint32_t>
 800e7e0:	b2e4      	uxtb	r4, r4
 800e7e2:	403c      	ands	r4, r7
 800e7e4:	4020      	ands	r0, r4
 800e7e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7ea:	bf00      	nop

0800e7ec <uxr_serialize_SampleIdentity>:
 800e7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7f0:	220c      	movs	r2, #12
 800e7f2:	4604      	mov	r4, r0
 800e7f4:	460d      	mov	r5, r1
 800e7f6:	f003 fb73 	bl	8011ee0 <ucdr_serialize_array_uint8_t>
 800e7fa:	2203      	movs	r2, #3
 800e7fc:	f105 010c 	add.w	r1, r5, #12
 800e800:	4607      	mov	r7, r0
 800e802:	4620      	mov	r0, r4
 800e804:	f003 fb6c 	bl	8011ee0 <ucdr_serialize_array_uint8_t>
 800e808:	7be9      	ldrb	r1, [r5, #15]
 800e80a:	4680      	mov	r8, r0
 800e80c:	4620      	mov	r0, r4
 800e80e:	f003 fc5d 	bl	80120cc <ucdr_serialize_uint8_t>
 800e812:	6929      	ldr	r1, [r5, #16]
 800e814:	4606      	mov	r6, r0
 800e816:	4620      	mov	r0, r4
 800e818:	f004 fa88 	bl	8012d2c <ucdr_serialize_int32_t>
 800e81c:	6969      	ldr	r1, [r5, #20]
 800e81e:	4603      	mov	r3, r0
 800e820:	4620      	mov	r0, r4
 800e822:	ea07 0708 	and.w	r7, r7, r8
 800e826:	461c      	mov	r4, r3
 800e828:	f003 fe66 	bl	80124f8 <ucdr_serialize_uint32_t>
 800e82c:	403e      	ands	r6, r7
 800e82e:	4034      	ands	r4, r6
 800e830:	4020      	ands	r0, r4
 800e832:	b2c0      	uxtb	r0, r0
 800e834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e838 <uxr_deserialize_SampleIdentity>:
 800e838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e83c:	220c      	movs	r2, #12
 800e83e:	4604      	mov	r4, r0
 800e840:	460d      	mov	r5, r1
 800e842:	f003 fbb1 	bl	8011fa8 <ucdr_deserialize_array_uint8_t>
 800e846:	2203      	movs	r2, #3
 800e848:	f105 010c 	add.w	r1, r5, #12
 800e84c:	4607      	mov	r7, r0
 800e84e:	4620      	mov	r0, r4
 800e850:	f003 fbaa 	bl	8011fa8 <ucdr_deserialize_array_uint8_t>
 800e854:	f105 010f 	add.w	r1, r5, #15
 800e858:	4680      	mov	r8, r0
 800e85a:	4620      	mov	r0, r4
 800e85c:	f003 fc4c 	bl	80120f8 <ucdr_deserialize_uint8_t>
 800e860:	f105 0110 	add.w	r1, r5, #16
 800e864:	4606      	mov	r6, r0
 800e866:	4620      	mov	r0, r4
 800e868:	f004 faf8 	bl	8012e5c <ucdr_deserialize_int32_t>
 800e86c:	f105 0114 	add.w	r1, r5, #20
 800e870:	4603      	mov	r3, r0
 800e872:	4620      	mov	r0, r4
 800e874:	ea07 0708 	and.w	r7, r7, r8
 800e878:	461c      	mov	r4, r3
 800e87a:	f003 ff6d 	bl	8012758 <ucdr_deserialize_uint32_t>
 800e87e:	403e      	ands	r6, r7
 800e880:	4034      	ands	r4, r6
 800e882:	4020      	ands	r0, r4
 800e884:	b2c0      	uxtb	r0, r0
 800e886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e88a:	bf00      	nop

0800e88c <rcl_client_get_rmw_handle>:
 800e88c:	b118      	cbz	r0, 800e896 <rcl_client_get_rmw_handle+0xa>
 800e88e:	6800      	ldr	r0, [r0, #0]
 800e890:	b108      	cbz	r0, 800e896 <rcl_client_get_rmw_handle+0xa>
 800e892:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800e896:	4770      	bx	lr

0800e898 <rcl_send_request>:
 800e898:	b570      	push	{r4, r5, r6, lr}
 800e89a:	b082      	sub	sp, #8
 800e89c:	b1e8      	cbz	r0, 800e8da <rcl_send_request+0x42>
 800e89e:	4604      	mov	r4, r0
 800e8a0:	6800      	ldr	r0, [r0, #0]
 800e8a2:	b1d0      	cbz	r0, 800e8da <rcl_send_request+0x42>
 800e8a4:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 800e8a8:	b1bb      	cbz	r3, 800e8da <rcl_send_request+0x42>
 800e8aa:	460e      	mov	r6, r1
 800e8ac:	b1d1      	cbz	r1, 800e8e4 <rcl_send_request+0x4c>
 800e8ae:	4615      	mov	r5, r2
 800e8b0:	b1c2      	cbz	r2, 800e8e4 <rcl_send_request+0x4c>
 800e8b2:	2105      	movs	r1, #5
 800e8b4:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800e8b8:	f002 faca 	bl	8010e50 <__atomic_load_8>
 800e8bc:	6823      	ldr	r3, [r4, #0]
 800e8be:	e9c5 0100 	strd	r0, r1, [r5]
 800e8c2:	462a      	mov	r2, r5
 800e8c4:	4631      	mov	r1, r6
 800e8c6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800e8ca:	f002 ff69 	bl	80117a0 <rmw_send_request>
 800e8ce:	4606      	mov	r6, r0
 800e8d0:	b160      	cbz	r0, 800e8ec <rcl_send_request+0x54>
 800e8d2:	2601      	movs	r6, #1
 800e8d4:	4630      	mov	r0, r6
 800e8d6:	b002      	add	sp, #8
 800e8d8:	bd70      	pop	{r4, r5, r6, pc}
 800e8da:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 800e8de:	4630      	mov	r0, r6
 800e8e0:	b002      	add	sp, #8
 800e8e2:	bd70      	pop	{r4, r5, r6, pc}
 800e8e4:	260b      	movs	r6, #11
 800e8e6:	4630      	mov	r0, r6
 800e8e8:	b002      	add	sp, #8
 800e8ea:	bd70      	pop	{r4, r5, r6, pc}
 800e8ec:	6820      	ldr	r0, [r4, #0]
 800e8ee:	2105      	movs	r1, #5
 800e8f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e8f4:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800e8f8:	9100      	str	r1, [sp, #0]
 800e8fa:	f002 fb15 	bl	8010f28 <__atomic_exchange_8>
 800e8fe:	4630      	mov	r0, r6
 800e900:	b002      	add	sp, #8
 800e902:	bd70      	pop	{r4, r5, r6, pc}
 800e904:	0000      	movs	r0, r0
	...

0800e908 <rcl_take_response>:
 800e908:	b570      	push	{r4, r5, r6, lr}
 800e90a:	468e      	mov	lr, r1
 800e90c:	460c      	mov	r4, r1
 800e90e:	4616      	mov	r6, r2
 800e910:	4605      	mov	r5, r0
 800e912:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e916:	b08c      	sub	sp, #48	@ 0x30
 800e918:	f10d 0c18 	add.w	ip, sp, #24
 800e91c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e920:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e924:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e928:	b35d      	cbz	r5, 800e982 <rcl_take_response+0x7a>
 800e92a:	682b      	ldr	r3, [r5, #0]
 800e92c:	b34b      	cbz	r3, 800e982 <rcl_take_response+0x7a>
 800e92e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800e932:	b330      	cbz	r0, 800e982 <rcl_take_response+0x7a>
 800e934:	b346      	cbz	r6, 800e988 <rcl_take_response+0x80>
 800e936:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800e990 <rcl_take_response+0x88>
 800e93a:	2300      	movs	r3, #0
 800e93c:	f88d 3007 	strb.w	r3, [sp, #7]
 800e940:	4632      	mov	r2, r6
 800e942:	f10d 0307 	add.w	r3, sp, #7
 800e946:	a902      	add	r1, sp, #8
 800e948:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e94c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e950:	f003 f82e 	bl	80119b0 <rmw_take_response>
 800e954:	4605      	mov	r5, r0
 800e956:	b9c8      	cbnz	r0, 800e98c <rcl_take_response+0x84>
 800e958:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800e95c:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800e960:	2a00      	cmp	r2, #0
 800e962:	bf08      	it	eq
 800e964:	461d      	moveq	r5, r3
 800e966:	f10d 0e18 	add.w	lr, sp, #24
 800e96a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e96e:	46a4      	mov	ip, r4
 800e970:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e974:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e978:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e97c:	4628      	mov	r0, r5
 800e97e:	b00c      	add	sp, #48	@ 0x30
 800e980:	bd70      	pop	{r4, r5, r6, pc}
 800e982:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 800e986:	e7ee      	b.n	800e966 <rcl_take_response+0x5e>
 800e988:	250b      	movs	r5, #11
 800e98a:	e7ec      	b.n	800e966 <rcl_take_response+0x5e>
 800e98c:	2501      	movs	r5, #1
 800e98e:	e7ea      	b.n	800e966 <rcl_take_response+0x5e>
	...

0800e998 <rcl_client_is_valid>:
 800e998:	b130      	cbz	r0, 800e9a8 <rcl_client_is_valid+0x10>
 800e99a:	6800      	ldr	r0, [r0, #0]
 800e99c:	b120      	cbz	r0, 800e9a8 <rcl_client_is_valid+0x10>
 800e99e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800e9a2:	3800      	subs	r0, #0
 800e9a4:	bf18      	it	ne
 800e9a6:	2001      	movne	r0, #1
 800e9a8:	4770      	bx	lr
 800e9aa:	bf00      	nop

0800e9ac <rcl_convert_rmw_ret_to_rcl_ret>:
 800e9ac:	280b      	cmp	r0, #11
 800e9ae:	dc0d      	bgt.n	800e9cc <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800e9b0:	2800      	cmp	r0, #0
 800e9b2:	db09      	blt.n	800e9c8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800e9b4:	280b      	cmp	r0, #11
 800e9b6:	d807      	bhi.n	800e9c8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800e9b8:	e8df f000 	tbb	[pc, r0]
 800e9bc:	07060607 	.word	0x07060607
 800e9c0:	06060606 	.word	0x06060606
 800e9c4:	07070606 	.word	0x07070606
 800e9c8:	2001      	movs	r0, #1
 800e9ca:	4770      	bx	lr
 800e9cc:	28cb      	cmp	r0, #203	@ 0xcb
 800e9ce:	bf18      	it	ne
 800e9d0:	2001      	movne	r0, #1
 800e9d2:	4770      	bx	lr

0800e9d4 <rcl_get_zero_initialized_context>:
 800e9d4:	4a03      	ldr	r2, [pc, #12]	@ (800e9e4 <rcl_get_zero_initialized_context+0x10>)
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e9dc:	e883 0003 	stmia.w	r3, {r0, r1}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	4770      	bx	lr
 800e9e4:	08015a44 	.word	0x08015a44

0800e9e8 <rcl_context_is_valid>:
 800e9e8:	b118      	cbz	r0, 800e9f2 <rcl_context_is_valid+0xa>
 800e9ea:	6840      	ldr	r0, [r0, #4]
 800e9ec:	3800      	subs	r0, #0
 800e9ee:	bf18      	it	ne
 800e9f0:	2001      	movne	r0, #1
 800e9f2:	4770      	bx	lr

0800e9f4 <__cleanup_context>:
 800e9f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9f8:	4606      	mov	r6, r0
 800e9fa:	6800      	ldr	r0, [r0, #0]
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	6073      	str	r3, [r6, #4]
 800ea00:	2800      	cmp	r0, #0
 800ea02:	d049      	beq.n	800ea98 <__cleanup_context+0xa4>
 800ea04:	6947      	ldr	r7, [r0, #20]
 800ea06:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800ea0a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800ea0e:	b137      	cbz	r7, 800ea1e <__cleanup_context+0x2a>
 800ea10:	3014      	adds	r0, #20
 800ea12:	f7fa ffb9 	bl	8009988 <rcl_init_options_fini>
 800ea16:	4607      	mov	r7, r0
 800ea18:	2800      	cmp	r0, #0
 800ea1a:	d144      	bne.n	800eaa6 <__cleanup_context+0xb2>
 800ea1c:	6830      	ldr	r0, [r6, #0]
 800ea1e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ea20:	b143      	cbz	r3, 800ea34 <__cleanup_context+0x40>
 800ea22:	3028      	adds	r0, #40	@ 0x28
 800ea24:	f7fc f9d8 	bl	800add8 <rmw_context_fini>
 800ea28:	b118      	cbz	r0, 800ea32 <__cleanup_context+0x3e>
 800ea2a:	2f00      	cmp	r7, #0
 800ea2c:	d03e      	beq.n	800eaac <__cleanup_context+0xb8>
 800ea2e:	f7fb ff0f 	bl	800a850 <rcutils_reset_error>
 800ea32:	6830      	ldr	r0, [r6, #0]
 800ea34:	6a03      	ldr	r3, [r0, #32]
 800ea36:	b1db      	cbz	r3, 800ea70 <__cleanup_context+0x7c>
 800ea38:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800ea3c:	2a01      	cmp	r2, #1
 800ea3e:	f17c 0100 	sbcs.w	r1, ip, #0
 800ea42:	db11      	blt.n	800ea68 <__cleanup_context+0x74>
 800ea44:	2400      	movs	r4, #0
 800ea46:	4625      	mov	r5, r4
 800ea48:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ea4c:	4649      	mov	r1, r9
 800ea4e:	b1b8      	cbz	r0, 800ea80 <__cleanup_context+0x8c>
 800ea50:	47c0      	blx	r8
 800ea52:	6833      	ldr	r3, [r6, #0]
 800ea54:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800ea58:	3401      	adds	r4, #1
 800ea5a:	f145 0500 	adc.w	r5, r5, #0
 800ea5e:	4294      	cmp	r4, r2
 800ea60:	eb75 010c 	sbcs.w	r1, r5, ip
 800ea64:	6a1b      	ldr	r3, [r3, #32]
 800ea66:	dbef      	blt.n	800ea48 <__cleanup_context+0x54>
 800ea68:	4618      	mov	r0, r3
 800ea6a:	4649      	mov	r1, r9
 800ea6c:	47c0      	blx	r8
 800ea6e:	6830      	ldr	r0, [r6, #0]
 800ea70:	4649      	mov	r1, r9
 800ea72:	47c0      	blx	r8
 800ea74:	2300      	movs	r3, #0
 800ea76:	e9c6 3300 	strd	r3, r3, [r6]
 800ea7a:	4638      	mov	r0, r7
 800ea7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea80:	3401      	adds	r4, #1
 800ea82:	f145 0500 	adc.w	r5, r5, #0
 800ea86:	4294      	cmp	r4, r2
 800ea88:	eb75 010c 	sbcs.w	r1, r5, ip
 800ea8c:	dbdc      	blt.n	800ea48 <__cleanup_context+0x54>
 800ea8e:	4618      	mov	r0, r3
 800ea90:	4649      	mov	r1, r9
 800ea92:	47c0      	blx	r8
 800ea94:	6830      	ldr	r0, [r6, #0]
 800ea96:	e7eb      	b.n	800ea70 <__cleanup_context+0x7c>
 800ea98:	4607      	mov	r7, r0
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	e9c6 3300 	strd	r3, r3, [r6]
 800eaa0:	4638      	mov	r0, r7
 800eaa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eaa6:	f7fb fed3 	bl	800a850 <rcutils_reset_error>
 800eaaa:	e7b7      	b.n	800ea1c <__cleanup_context+0x28>
 800eaac:	f7ff ff7e 	bl	800e9ac <rcl_convert_rmw_ret_to_rcl_ret>
 800eab0:	4607      	mov	r7, r0
 800eab2:	e7bc      	b.n	800ea2e <__cleanup_context+0x3a>

0800eab4 <rcl_init>:
 800eab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eab8:	1e05      	subs	r5, r0, #0
 800eaba:	b09e      	sub	sp, #120	@ 0x78
 800eabc:	460e      	mov	r6, r1
 800eabe:	4690      	mov	r8, r2
 800eac0:	461f      	mov	r7, r3
 800eac2:	f340 809c 	ble.w	800ebfe <rcl_init+0x14a>
 800eac6:	2900      	cmp	r1, #0
 800eac8:	f000 809c 	beq.w	800ec04 <rcl_init+0x150>
 800eacc:	f1a1 0e04 	sub.w	lr, r1, #4
 800ead0:	f04f 0c00 	mov.w	ip, #0
 800ead4:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800ead8:	f10c 0c01 	add.w	ip, ip, #1
 800eadc:	2c00      	cmp	r4, #0
 800eade:	f000 8091 	beq.w	800ec04 <rcl_init+0x150>
 800eae2:	4565      	cmp	r5, ip
 800eae4:	d1f6      	bne.n	800ead4 <rcl_init+0x20>
 800eae6:	f1b8 0f00 	cmp.w	r8, #0
 800eaea:	f000 808b 	beq.w	800ec04 <rcl_init+0x150>
 800eaee:	f8d8 4000 	ldr.w	r4, [r8]
 800eaf2:	2c00      	cmp	r4, #0
 800eaf4:	f000 8086 	beq.w	800ec04 <rcl_init+0x150>
 800eaf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eafa:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 800eafe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eb02:	6823      	ldr	r3, [r4, #0]
 800eb04:	f8cc 3000 	str.w	r3, [ip]
 800eb08:	a819      	add	r0, sp, #100	@ 0x64
 800eb0a:	f7fb fe7b 	bl	800a804 <rcutils_allocator_is_valid>
 800eb0e:	2800      	cmp	r0, #0
 800eb10:	d078      	beq.n	800ec04 <rcl_init+0x150>
 800eb12:	2f00      	cmp	r7, #0
 800eb14:	d076      	beq.n	800ec04 <rcl_init+0x150>
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d178      	bne.n	800ec0e <rcl_init+0x15a>
 800eb1c:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800eb20:	2178      	movs	r1, #120	@ 0x78
 800eb22:	2001      	movs	r0, #1
 800eb24:	4798      	blx	r3
 800eb26:	4604      	mov	r4, r0
 800eb28:	6038      	str	r0, [r7, #0]
 800eb2a:	2800      	cmp	r0, #0
 800eb2c:	f000 80b6 	beq.w	800ec9c <rcl_init+0x1e8>
 800eb30:	a802      	add	r0, sp, #8
 800eb32:	f002 fae1 	bl	80110f8 <rmw_get_zero_initialized_context>
 800eb36:	a902      	add	r1, sp, #8
 800eb38:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800eb3c:	2250      	movs	r2, #80	@ 0x50
 800eb3e:	ac19      	add	r4, sp, #100	@ 0x64
 800eb40:	f005 fed5 	bl	80148ee <memcpy>
 800eb44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eb46:	f8d7 e000 	ldr.w	lr, [r7]
 800eb4a:	46f4      	mov	ip, lr
 800eb4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eb50:	6823      	ldr	r3, [r4, #0]
 800eb52:	f8cc 3000 	str.w	r3, [ip]
 800eb56:	f10e 0114 	add.w	r1, lr, #20
 800eb5a:	4640      	mov	r0, r8
 800eb5c:	f7fa ff3e 	bl	80099dc <rcl_init_options_copy>
 800eb60:	4604      	mov	r4, r0
 800eb62:	2800      	cmp	r0, #0
 800eb64:	d144      	bne.n	800ebf0 <rcl_init+0x13c>
 800eb66:	f8d7 9000 	ldr.w	r9, [r7]
 800eb6a:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800eb6e:	f8c9 0020 	str.w	r0, [r9, #32]
 800eb72:	f8c9 5018 	str.w	r5, [r9, #24]
 800eb76:	f8c9 801c 	str.w	r8, [r9, #28]
 800eb7a:	2d00      	cmp	r5, #0
 800eb7c:	d04e      	beq.n	800ec1c <rcl_init+0x168>
 800eb7e:	2e00      	cmp	r6, #0
 800eb80:	d04c      	beq.n	800ec1c <rcl_init+0x168>
 800eb82:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 800eb86:	2104      	movs	r1, #4
 800eb88:	4628      	mov	r0, r5
 800eb8a:	4798      	blx	r3
 800eb8c:	f8c9 0020 	str.w	r0, [r9, #32]
 800eb90:	f8d7 9000 	ldr.w	r9, [r7]
 800eb94:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800eb98:	46ca      	mov	sl, r9
 800eb9a:	b343      	cbz	r3, 800ebee <rcl_init+0x13a>
 800eb9c:	2d01      	cmp	r5, #1
 800eb9e:	f178 0300 	sbcs.w	r3, r8, #0
 800eba2:	db3b      	blt.n	800ec1c <rcl_init+0x168>
 800eba4:	2400      	movs	r4, #0
 800eba6:	3e04      	subs	r6, #4
 800eba8:	46a1      	mov	r9, r4
 800ebaa:	e00b      	b.n	800ebc4 <rcl_init+0x110>
 800ebac:	6831      	ldr	r1, [r6, #0]
 800ebae:	f005 fe9e 	bl	80148ee <memcpy>
 800ebb2:	3401      	adds	r4, #1
 800ebb4:	f149 0900 	adc.w	r9, r9, #0
 800ebb8:	45c8      	cmp	r8, r9
 800ebba:	bf08      	it	eq
 800ebbc:	42a5      	cmpeq	r5, r4
 800ebbe:	d02b      	beq.n	800ec18 <rcl_init+0x164>
 800ebc0:	f8d7 a000 	ldr.w	sl, [r7]
 800ebc4:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800ebc8:	f7f1 fb34 	bl	8000234 <strlen>
 800ebcc:	1c42      	adds	r2, r0, #1
 800ebce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ebd0:	991d      	ldr	r1, [sp, #116]	@ 0x74
 800ebd2:	f8da a020 	ldr.w	sl, [sl, #32]
 800ebd6:	9201      	str	r2, [sp, #4]
 800ebd8:	4610      	mov	r0, r2
 800ebda:	4798      	blx	r3
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800ebe2:	6a1b      	ldr	r3, [r3, #32]
 800ebe4:	9a01      	ldr	r2, [sp, #4]
 800ebe6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ebea:	2800      	cmp	r0, #0
 800ebec:	d1de      	bne.n	800ebac <rcl_init+0xf8>
 800ebee:	240a      	movs	r4, #10
 800ebf0:	4638      	mov	r0, r7
 800ebf2:	f7ff feff 	bl	800e9f4 <__cleanup_context>
 800ebf6:	4620      	mov	r0, r4
 800ebf8:	b01e      	add	sp, #120	@ 0x78
 800ebfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebfe:	2900      	cmp	r1, #0
 800ec00:	f43f af71 	beq.w	800eae6 <rcl_init+0x32>
 800ec04:	240b      	movs	r4, #11
 800ec06:	4620      	mov	r0, r4
 800ec08:	b01e      	add	sp, #120	@ 0x78
 800ec0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec0e:	2464      	movs	r4, #100	@ 0x64
 800ec10:	4620      	mov	r0, r4
 800ec12:	b01e      	add	sp, #120	@ 0x78
 800ec14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec18:	f8d7 9000 	ldr.w	r9, [r7]
 800ec1c:	4926      	ldr	r1, [pc, #152]	@ (800ecb8 <rcl_init+0x204>)
 800ec1e:	680b      	ldr	r3, [r1, #0]
 800ec20:	3301      	adds	r3, #1
 800ec22:	d036      	beq.n	800ec92 <rcl_init+0x1de>
 800ec24:	600b      	str	r3, [r1, #0]
 800ec26:	461a      	mov	r2, r3
 800ec28:	2400      	movs	r4, #0
 800ec2a:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800ec2e:	607b      	str	r3, [r7, #4]
 800ec30:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800ec32:	3301      	adds	r3, #1
 800ec34:	e9c0 2406 	strd	r2, r4, [r0, #24]
 800ec38:	d034      	beq.n	800eca4 <rcl_init+0x1f0>
 800ec3a:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800ec3e:	b93b      	cbnz	r3, 800ec50 <rcl_init+0x19c>
 800ec40:	3030      	adds	r0, #48	@ 0x30
 800ec42:	f000 f83b 	bl	800ecbc <rcl_get_localhost_only>
 800ec46:	4604      	mov	r4, r0
 800ec48:	2800      	cmp	r0, #0
 800ec4a:	d1d1      	bne.n	800ebf0 <rcl_init+0x13c>
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	6958      	ldr	r0, [r3, #20]
 800ec50:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 800ec52:	aa18      	add	r2, sp, #96	@ 0x60
 800ec54:	a917      	add	r1, sp, #92	@ 0x5c
 800ec56:	f000 fd97 	bl	800f788 <rcl_validate_enclave_name>
 800ec5a:	4604      	mov	r4, r0
 800ec5c:	2800      	cmp	r0, #0
 800ec5e:	d1c7      	bne.n	800ebf0 <rcl_init+0x13c>
 800ec60:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ec62:	b9eb      	cbnz	r3, 800eca0 <rcl_init+0x1ec>
 800ec64:	6839      	ldr	r1, [r7, #0]
 800ec66:	694b      	ldr	r3, [r1, #20]
 800ec68:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800ec6a:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800ec6e:	f000 fa6f 	bl	800f150 <rcl_get_security_options_from_environment>
 800ec72:	4604      	mov	r4, r0
 800ec74:	2800      	cmp	r0, #0
 800ec76:	d1bb      	bne.n	800ebf0 <rcl_init+0x13c>
 800ec78:	6839      	ldr	r1, [r7, #0]
 800ec7a:	6948      	ldr	r0, [r1, #20]
 800ec7c:	3128      	adds	r1, #40	@ 0x28
 800ec7e:	3018      	adds	r0, #24
 800ec80:	f7fb ff74 	bl	800ab6c <rmw_init>
 800ec84:	4604      	mov	r4, r0
 800ec86:	2800      	cmp	r0, #0
 800ec88:	d0bd      	beq.n	800ec06 <rcl_init+0x152>
 800ec8a:	f7ff fe8f 	bl	800e9ac <rcl_convert_rmw_ret_to_rcl_ret>
 800ec8e:	4604      	mov	r4, r0
 800ec90:	e7ae      	b.n	800ebf0 <rcl_init+0x13c>
 800ec92:	2201      	movs	r2, #1
 800ec94:	461c      	mov	r4, r3
 800ec96:	600a      	str	r2, [r1, #0]
 800ec98:	4613      	mov	r3, r2
 800ec9a:	e7c6      	b.n	800ec2a <rcl_init+0x176>
 800ec9c:	240a      	movs	r4, #10
 800ec9e:	e7b2      	b.n	800ec06 <rcl_init+0x152>
 800eca0:	2401      	movs	r4, #1
 800eca2:	e7a5      	b.n	800ebf0 <rcl_init+0x13c>
 800eca4:	3024      	adds	r0, #36	@ 0x24
 800eca6:	f005 f815 	bl	8013cd4 <rcl_get_default_domain_id>
 800ecaa:	4604      	mov	r4, r0
 800ecac:	2800      	cmp	r0, #0
 800ecae:	d19f      	bne.n	800ebf0 <rcl_init+0x13c>
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	6958      	ldr	r0, [r3, #20]
 800ecb4:	e7c1      	b.n	800ec3a <rcl_init+0x186>
 800ecb6:	bf00      	nop
 800ecb8:	2000abb8 	.word	0x2000abb8

0800ecbc <rcl_get_localhost_only>:
 800ecbc:	b510      	push	{r4, lr}
 800ecbe:	b082      	sub	sp, #8
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	9301      	str	r3, [sp, #4]
 800ecc4:	b1b8      	cbz	r0, 800ecf6 <rcl_get_localhost_only+0x3a>
 800ecc6:	4604      	mov	r4, r0
 800ecc8:	a901      	add	r1, sp, #4
 800ecca:	480c      	ldr	r0, [pc, #48]	@ (800ecfc <rcl_get_localhost_only+0x40>)
 800eccc:	f002 f964 	bl	8010f98 <rcutils_get_env>
 800ecd0:	b110      	cbz	r0, 800ecd8 <rcl_get_localhost_only+0x1c>
 800ecd2:	2001      	movs	r0, #1
 800ecd4:	b002      	add	sp, #8
 800ecd6:	bd10      	pop	{r4, pc}
 800ecd8:	9b01      	ldr	r3, [sp, #4]
 800ecda:	b113      	cbz	r3, 800ece2 <rcl_get_localhost_only+0x26>
 800ecdc:	781a      	ldrb	r2, [r3, #0]
 800ecde:	2a31      	cmp	r2, #49	@ 0x31
 800ece0:	d004      	beq.n	800ecec <rcl_get_localhost_only+0x30>
 800ece2:	2302      	movs	r3, #2
 800ece4:	2000      	movs	r0, #0
 800ece6:	7023      	strb	r3, [r4, #0]
 800ece8:	b002      	add	sp, #8
 800ecea:	bd10      	pop	{r4, pc}
 800ecec:	785b      	ldrb	r3, [r3, #1]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d1f7      	bne.n	800ece2 <rcl_get_localhost_only+0x26>
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	e7f6      	b.n	800ece4 <rcl_get_localhost_only+0x28>
 800ecf6:	200b      	movs	r0, #11
 800ecf8:	b002      	add	sp, #8
 800ecfa:	bd10      	pop	{r4, pc}
 800ecfc:	08015a4c 	.word	0x08015a4c

0800ed00 <rcl_get_zero_initialized_node>:
 800ed00:	4a03      	ldr	r2, [pc, #12]	@ (800ed10 <rcl_get_zero_initialized_node+0x10>)
 800ed02:	4603      	mov	r3, r0
 800ed04:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed08:	e883 0003 	stmia.w	r3, {r0, r1}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	4770      	bx	lr
 800ed10:	08015a78 	.word	0x08015a78

0800ed14 <rcl_node_init>:
 800ed14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed18:	b0a9      	sub	sp, #164	@ 0xa4
 800ed1a:	4604      	mov	r4, r0
 800ed1c:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800ed20:	a823      	add	r0, sp, #140	@ 0x8c
 800ed22:	460e      	mov	r6, r1
 800ed24:	4615      	mov	r5, r2
 800ed26:	461f      	mov	r7, r3
 800ed28:	f005 f898 	bl	8013e5c <rcl_guard_condition_get_default_options>
 800ed2c:	f1b8 0f00 	cmp.w	r8, #0
 800ed30:	f000 80e6 	beq.w	800ef00 <rcl_node_init+0x1ec>
 800ed34:	4640      	mov	r0, r8
 800ed36:	f7fb fd65 	bl	800a804 <rcutils_allocator_is_valid>
 800ed3a:	2800      	cmp	r0, #0
 800ed3c:	f000 80e0 	beq.w	800ef00 <rcl_node_init+0x1ec>
 800ed40:	2e00      	cmp	r6, #0
 800ed42:	f000 80dd 	beq.w	800ef00 <rcl_node_init+0x1ec>
 800ed46:	2d00      	cmp	r5, #0
 800ed48:	f000 80da 	beq.w	800ef00 <rcl_node_init+0x1ec>
 800ed4c:	2c00      	cmp	r4, #0
 800ed4e:	f000 80d7 	beq.w	800ef00 <rcl_node_init+0x1ec>
 800ed52:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ed56:	f1b9 0f00 	cmp.w	r9, #0
 800ed5a:	f040 80fd 	bne.w	800ef58 <rcl_node_init+0x244>
 800ed5e:	2f00      	cmp	r7, #0
 800ed60:	f000 80ce 	beq.w	800ef00 <rcl_node_init+0x1ec>
 800ed64:	4638      	mov	r0, r7
 800ed66:	f7ff fe3f 	bl	800e9e8 <rcl_context_is_valid>
 800ed6a:	4682      	mov	sl, r0
 800ed6c:	2800      	cmp	r0, #0
 800ed6e:	f000 80cd 	beq.w	800ef0c <rcl_node_init+0x1f8>
 800ed72:	464a      	mov	r2, r9
 800ed74:	a922      	add	r1, sp, #136	@ 0x88
 800ed76:	4630      	mov	r0, r6
 800ed78:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800ed7c:	f002 fb3a 	bl	80113f4 <rmw_validate_node_name>
 800ed80:	4681      	mov	r9, r0
 800ed82:	2800      	cmp	r0, #0
 800ed84:	f040 80be 	bne.w	800ef04 <rcl_node_init+0x1f0>
 800ed88:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800ed8a:	2800      	cmp	r0, #0
 800ed8c:	f040 80f0 	bne.w	800ef70 <rcl_node_init+0x25c>
 800ed90:	4628      	mov	r0, r5
 800ed92:	f7f1 fa4f 	bl	8000234 <strlen>
 800ed96:	2800      	cmp	r0, #0
 800ed98:	f040 80bb 	bne.w	800ef12 <rcl_node_init+0x1fe>
 800ed9c:	4d7c      	ldr	r5, [pc, #496]	@ (800ef90 <rcl_node_init+0x27c>)
 800ed9e:	a922      	add	r1, sp, #136	@ 0x88
 800eda0:	2200      	movs	r2, #0
 800eda2:	4628      	mov	r0, r5
 800eda4:	f002 fb08 	bl	80113b8 <rmw_validate_namespace>
 800eda8:	4681      	mov	r9, r0
 800edaa:	2800      	cmp	r0, #0
 800edac:	f040 80aa 	bne.w	800ef04 <rcl_node_init+0x1f0>
 800edb0:	4682      	mov	sl, r0
 800edb2:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800edb4:	2800      	cmp	r0, #0
 800edb6:	f040 80e0 	bne.w	800ef7a <rcl_node_init+0x266>
 800edba:	f8d8 3000 	ldr.w	r3, [r8]
 800edbe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800edc2:	2078      	movs	r0, #120	@ 0x78
 800edc4:	4798      	blx	r3
 800edc6:	4681      	mov	r9, r0
 800edc8:	6060      	str	r0, [r4, #4]
 800edca:	2800      	cmp	r0, #0
 800edcc:	f000 80ca 	beq.w	800ef64 <rcl_node_init+0x250>
 800edd0:	2200      	movs	r2, #0
 800edd2:	2300      	movs	r3, #0
 800edd4:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800edd8:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800eddc:	a808      	add	r0, sp, #32
 800edde:	f000 f8df 	bl	800efa0 <rcl_node_get_default_options>
 800ede2:	a908      	add	r1, sp, #32
 800ede4:	4648      	mov	r0, r9
 800ede6:	2268      	movs	r2, #104	@ 0x68
 800ede8:	f005 fd81 	bl	80148ee <memcpy>
 800edec:	6861      	ldr	r1, [r4, #4]
 800edee:	6027      	str	r7, [r4, #0]
 800edf0:	4640      	mov	r0, r8
 800edf2:	f000 f8e3 	bl	800efbc <rcl_node_options_copy>
 800edf6:	2800      	cmp	r0, #0
 800edf8:	d158      	bne.n	800eeac <rcl_node_init+0x198>
 800edfa:	4628      	mov	r0, r5
 800edfc:	f7f1 fa1a 	bl	8000234 <strlen>
 800ee00:	4428      	add	r0, r5
 800ee02:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800ee06:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800ee0a:	2b2f      	cmp	r3, #47	@ 0x2f
 800ee0c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ee10:	9300      	str	r3, [sp, #0]
 800ee12:	bf0c      	ite	eq
 800ee14:	4b5f      	ldreq	r3, [pc, #380]	@ (800ef94 <rcl_node_init+0x280>)
 800ee16:	4b60      	ldrne	r3, [pc, #384]	@ (800ef98 <rcl_node_init+0x284>)
 800ee18:	9302      	str	r3, [sp, #8]
 800ee1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ee1e:	9301      	str	r3, [sp, #4]
 800ee20:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800ee24:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ee28:	f002 f8de 	bl	8010fe8 <rcutils_format_string_limit>
 800ee2c:	6823      	ldr	r3, [r4, #0]
 800ee2e:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800ee32:	6818      	ldr	r0, [r3, #0]
 800ee34:	4631      	mov	r1, r6
 800ee36:	3028      	adds	r0, #40	@ 0x28
 800ee38:	462a      	mov	r2, r5
 800ee3a:	6866      	ldr	r6, [r4, #4]
 800ee3c:	f7fc f878 	bl	800af30 <rmw_create_node>
 800ee40:	6863      	ldr	r3, [r4, #4]
 800ee42:	66b0      	str	r0, [r6, #104]	@ 0x68
 800ee44:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800ee46:	2800      	cmp	r0, #0
 800ee48:	d032      	beq.n	800eeb0 <rcl_node_init+0x19c>
 800ee4a:	f7fc f905 	bl	800b058 <rmw_node_get_graph_guard_condition>
 800ee4e:	4681      	mov	r9, r0
 800ee50:	b360      	cbz	r0, 800eeac <rcl_node_init+0x198>
 800ee52:	f8d8 3000 	ldr.w	r3, [r8]
 800ee56:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ee5a:	6866      	ldr	r6, [r4, #4]
 800ee5c:	2008      	movs	r0, #8
 800ee5e:	4798      	blx	r3
 800ee60:	6863      	ldr	r3, [r4, #4]
 800ee62:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800ee64:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800ee68:	f1bb 0f00 	cmp.w	fp, #0
 800ee6c:	d020      	beq.n	800eeb0 <rcl_node_init+0x19c>
 800ee6e:	a806      	add	r0, sp, #24
 800ee70:	f004 ff64 	bl	8013d3c <rcl_get_zero_initialized_guard_condition>
 800ee74:	a806      	add	r0, sp, #24
 800ee76:	c803      	ldmia	r0, {r0, r1}
 800ee78:	6863      	ldr	r3, [r4, #4]
 800ee7a:	46c4      	mov	ip, r8
 800ee7c:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800ee80:	e88b 0003 	stmia.w	fp, {r0, r1}
 800ee84:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ee88:	ae23      	add	r6, sp, #140	@ 0x8c
 800ee8a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ee8c:	f8dc 3000 	ldr.w	r3, [ip]
 800ee90:	6033      	str	r3, [r6, #0]
 800ee92:	ab28      	add	r3, sp, #160	@ 0xa0
 800ee94:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800ee98:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ee9c:	4649      	mov	r1, r9
 800ee9e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800eea0:	463a      	mov	r2, r7
 800eea2:	4670      	mov	r0, lr
 800eea4:	f004 ff54 	bl	8013d50 <rcl_guard_condition_init_from_rmw>
 800eea8:	4681      	mov	r9, r0
 800eeaa:	b328      	cbz	r0, 800eef8 <rcl_node_init+0x1e4>
 800eeac:	6863      	ldr	r3, [r4, #4]
 800eeae:	b1f3      	cbz	r3, 800eeee <rcl_node_init+0x1da>
 800eeb0:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800eeb2:	b128      	cbz	r0, 800eec0 <rcl_node_init+0x1ac>
 800eeb4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800eeb8:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800eebc:	4798      	blx	r3
 800eebe:	6863      	ldr	r3, [r4, #4]
 800eec0:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800eec2:	b110      	cbz	r0, 800eeca <rcl_node_init+0x1b6>
 800eec4:	f7fc f84c 	bl	800af60 <rmw_destroy_node>
 800eec8:	6863      	ldr	r3, [r4, #4]
 800eeca:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800eecc:	b148      	cbz	r0, 800eee2 <rcl_node_init+0x1ce>
 800eece:	f004 ff9f 	bl	8013e10 <rcl_guard_condition_fini>
 800eed2:	6863      	ldr	r3, [r4, #4]
 800eed4:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800eed8:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800eeda:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800eede:	4798      	blx	r3
 800eee0:	6863      	ldr	r3, [r4, #4]
 800eee2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800eee6:	4618      	mov	r0, r3
 800eee8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800eeec:	4798      	blx	r3
 800eeee:	2300      	movs	r3, #0
 800eef0:	e9c4 3300 	strd	r3, r3, [r4]
 800eef4:	f04f 0901 	mov.w	r9, #1
 800eef8:	f1ba 0f00 	cmp.w	sl, #0
 800eefc:	d125      	bne.n	800ef4a <rcl_node_init+0x236>
 800eefe:	e001      	b.n	800ef04 <rcl_node_init+0x1f0>
 800ef00:	f04f 090b 	mov.w	r9, #11
 800ef04:	4648      	mov	r0, r9
 800ef06:	b029      	add	sp, #164	@ 0xa4
 800ef08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef0c:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800ef10:	e7f8      	b.n	800ef04 <rcl_node_init+0x1f0>
 800ef12:	782b      	ldrb	r3, [r5, #0]
 800ef14:	2b2f      	cmp	r3, #47	@ 0x2f
 800ef16:	f43f af42 	beq.w	800ed9e <rcl_node_init+0x8a>
 800ef1a:	9503      	str	r5, [sp, #12]
 800ef1c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ef20:	9300      	str	r3, [sp, #0]
 800ef22:	4b1e      	ldr	r3, [pc, #120]	@ (800ef9c <rcl_node_init+0x288>)
 800ef24:	9302      	str	r3, [sp, #8]
 800ef26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ef2a:	9301      	str	r3, [sp, #4]
 800ef2c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800ef30:	f002 f85a 	bl	8010fe8 <rcutils_format_string_limit>
 800ef34:	4605      	mov	r5, r0
 800ef36:	b340      	cbz	r0, 800ef8a <rcl_node_init+0x276>
 800ef38:	2200      	movs	r2, #0
 800ef3a:	a922      	add	r1, sp, #136	@ 0x88
 800ef3c:	9222      	str	r2, [sp, #136]	@ 0x88
 800ef3e:	f002 fa3b 	bl	80113b8 <rmw_validate_namespace>
 800ef42:	4681      	mov	r9, r0
 800ef44:	2800      	cmp	r0, #0
 800ef46:	f43f af34 	beq.w	800edb2 <rcl_node_init+0x9e>
 800ef4a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ef4e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ef52:	4628      	mov	r0, r5
 800ef54:	4798      	blx	r3
 800ef56:	e7d5      	b.n	800ef04 <rcl_node_init+0x1f0>
 800ef58:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800ef5c:	4648      	mov	r0, r9
 800ef5e:	b029      	add	sp, #164	@ 0xa4
 800ef60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef64:	f04f 090a 	mov.w	r9, #10
 800ef68:	f1ba 0f00 	cmp.w	sl, #0
 800ef6c:	d1ed      	bne.n	800ef4a <rcl_node_init+0x236>
 800ef6e:	e7c9      	b.n	800ef04 <rcl_node_init+0x1f0>
 800ef70:	f002 fa92 	bl	8011498 <rmw_node_name_validation_result_string>
 800ef74:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800ef78:	e7c4      	b.n	800ef04 <rcl_node_init+0x1f0>
 800ef7a:	f002 fa2f 	bl	80113dc <rmw_namespace_validation_result_string>
 800ef7e:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800ef82:	f1ba 0f00 	cmp.w	sl, #0
 800ef86:	d1e0      	bne.n	800ef4a <rcl_node_init+0x236>
 800ef88:	e7bc      	b.n	800ef04 <rcl_node_init+0x1f0>
 800ef8a:	f04f 090a 	mov.w	r9, #10
 800ef8e:	e7b9      	b.n	800ef04 <rcl_node_init+0x1f0>
 800ef90:	08015838 	.word	0x08015838
 800ef94:	08015a70 	.word	0x08015a70
 800ef98:	0801583c 	.word	0x0801583c
 800ef9c:	08015a6c 	.word	0x08015a6c

0800efa0 <rcl_node_get_default_options>:
 800efa0:	b510      	push	{r4, lr}
 800efa2:	2268      	movs	r2, #104	@ 0x68
 800efa4:	4604      	mov	r4, r0
 800efa6:	2100      	movs	r1, #0
 800efa8:	f005 fbae 	bl	8014708 <memset>
 800efac:	4620      	mov	r0, r4
 800efae:	f7fb fc1b 	bl	800a7e8 <rcutils_get_default_allocator>
 800efb2:	2301      	movs	r3, #1
 800efb4:	7523      	strb	r3, [r4, #20]
 800efb6:	4620      	mov	r0, r4
 800efb8:	bd10      	pop	{r4, pc}
 800efba:	bf00      	nop

0800efbc <rcl_node_options_copy>:
 800efbc:	b1d0      	cbz	r0, 800eff4 <rcl_node_options_copy+0x38>
 800efbe:	b570      	push	{r4, r5, r6, lr}
 800efc0:	460c      	mov	r4, r1
 800efc2:	b1a9      	cbz	r1, 800eff0 <rcl_node_options_copy+0x34>
 800efc4:	4288      	cmp	r0, r1
 800efc6:	4684      	mov	ip, r0
 800efc8:	d012      	beq.n	800eff0 <rcl_node_options_copy+0x34>
 800efca:	4605      	mov	r5, r0
 800efcc:	8a86      	ldrh	r6, [r0, #20]
 800efce:	468e      	mov	lr, r1
 800efd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800efd2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800efd6:	682b      	ldr	r3, [r5, #0]
 800efd8:	f8ce 3000 	str.w	r3, [lr]
 800efdc:	f10c 0118 	add.w	r1, ip, #24
 800efe0:	2250      	movs	r2, #80	@ 0x50
 800efe2:	82a6      	strh	r6, [r4, #20]
 800efe4:	f104 0018 	add.w	r0, r4, #24
 800efe8:	f005 fc81 	bl	80148ee <memcpy>
 800efec:	2000      	movs	r0, #0
 800efee:	bd70      	pop	{r4, r5, r6, pc}
 800eff0:	200b      	movs	r0, #11
 800eff2:	bd70      	pop	{r4, r5, r6, pc}
 800eff4:	200b      	movs	r0, #11
 800eff6:	4770      	bx	lr

0800eff8 <exact_match_lookup>:
 800eff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800effa:	f102 0708 	add.w	r7, r2, #8
 800effe:	460b      	mov	r3, r1
 800f000:	4614      	mov	r4, r2
 800f002:	4606      	mov	r6, r0
 800f004:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800f008:	b085      	sub	sp, #20
 800f00a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f00e:	4618      	mov	r0, r3
 800f010:	4919      	ldr	r1, [pc, #100]	@ (800f078 <exact_match_lookup+0x80>)
 800f012:	e894 000c 	ldmia.w	r4, {r2, r3}
 800f016:	f001 ffd9 	bl	8010fcc <rcutils_join_path>
 800f01a:	7833      	ldrb	r3, [r6, #0]
 800f01c:	2b2f      	cmp	r3, #47	@ 0x2f
 800f01e:	4605      	mov	r5, r0
 800f020:	d023      	beq.n	800f06a <exact_match_lookup+0x72>
 800f022:	f104 030c 	add.w	r3, r4, #12
 800f026:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f02a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f02e:	1c70      	adds	r0, r6, #1
 800f030:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800f034:	f001 ffd0 	bl	8010fd8 <rcutils_to_native_path>
 800f038:	4606      	mov	r6, r0
 800f03a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800f03e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f042:	4631      	mov	r1, r6
 800f044:	e894 000c 	ldmia.w	r4, {r2, r3}
 800f048:	4628      	mov	r0, r5
 800f04a:	f001 ffbf 	bl	8010fcc <rcutils_join_path>
 800f04e:	6862      	ldr	r2, [r4, #4]
 800f050:	6921      	ldr	r1, [r4, #16]
 800f052:	4603      	mov	r3, r0
 800f054:	4630      	mov	r0, r6
 800f056:	461e      	mov	r6, r3
 800f058:	4790      	blx	r2
 800f05a:	4628      	mov	r0, r5
 800f05c:	6863      	ldr	r3, [r4, #4]
 800f05e:	6921      	ldr	r1, [r4, #16]
 800f060:	4798      	blx	r3
 800f062:	4635      	mov	r5, r6
 800f064:	4628      	mov	r0, r5
 800f066:	b005      	add	sp, #20
 800f068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f06a:	7873      	ldrb	r3, [r6, #1]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d1d8      	bne.n	800f022 <exact_match_lookup+0x2a>
 800f070:	4628      	mov	r0, r5
 800f072:	b005      	add	sp, #20
 800f074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f076:	bf00      	nop
 800f078:	08015abc 	.word	0x08015abc

0800f07c <rcl_get_secure_root>:
 800f07c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f080:	b085      	sub	sp, #20
 800f082:	b168      	cbz	r0, 800f0a0 <rcl_get_secure_root+0x24>
 800f084:	4607      	mov	r7, r0
 800f086:	4608      	mov	r0, r1
 800f088:	460c      	mov	r4, r1
 800f08a:	f7fb fbbb 	bl	800a804 <rcutils_allocator_is_valid>
 800f08e:	b138      	cbz	r0, 800f0a0 <rcl_get_secure_root+0x24>
 800f090:	2300      	movs	r3, #0
 800f092:	482d      	ldr	r0, [pc, #180]	@ (800f148 <rcl_get_secure_root+0xcc>)
 800f094:	9303      	str	r3, [sp, #12]
 800f096:	a903      	add	r1, sp, #12
 800f098:	f001 ff7e 	bl	8010f98 <rcutils_get_env>
 800f09c:	4605      	mov	r5, r0
 800f09e:	b120      	cbz	r0, 800f0aa <rcl_get_secure_root+0x2e>
 800f0a0:	2500      	movs	r5, #0
 800f0a2:	4628      	mov	r0, r5
 800f0a4:	b005      	add	sp, #20
 800f0a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f0aa:	9b03      	ldr	r3, [sp, #12]
 800f0ac:	781a      	ldrb	r2, [r3, #0]
 800f0ae:	2a00      	cmp	r2, #0
 800f0b0:	d0f6      	beq.n	800f0a0 <rcl_get_secure_root+0x24>
 800f0b2:	f104 090c 	add.w	r9, r4, #12
 800f0b6:	e899 0003 	ldmia.w	r9, {r0, r1}
 800f0ba:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f0be:	4618      	mov	r0, r3
 800f0c0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800f0c4:	f001 fff6 	bl	80110b4 <rcutils_strdup>
 800f0c8:	4680      	mov	r8, r0
 800f0ca:	2800      	cmp	r0, #0
 800f0cc:	d0e8      	beq.n	800f0a0 <rcl_get_secure_root+0x24>
 800f0ce:	481f      	ldr	r0, [pc, #124]	@ (800f14c <rcl_get_secure_root+0xd0>)
 800f0d0:	9503      	str	r5, [sp, #12]
 800f0d2:	a903      	add	r1, sp, #12
 800f0d4:	f001 ff60 	bl	8010f98 <rcutils_get_env>
 800f0d8:	b160      	cbz	r0, 800f0f4 <rcl_get_secure_root+0x78>
 800f0da:	2600      	movs	r6, #0
 800f0dc:	6863      	ldr	r3, [r4, #4]
 800f0de:	6921      	ldr	r1, [r4, #16]
 800f0e0:	4630      	mov	r0, r6
 800f0e2:	4798      	blx	r3
 800f0e4:	4640      	mov	r0, r8
 800f0e6:	6863      	ldr	r3, [r4, #4]
 800f0e8:	6921      	ldr	r1, [r4, #16]
 800f0ea:	4798      	blx	r3
 800f0ec:	4628      	mov	r0, r5
 800f0ee:	b005      	add	sp, #20
 800f0f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f0f4:	9b03      	ldr	r3, [sp, #12]
 800f0f6:	781e      	ldrb	r6, [r3, #0]
 800f0f8:	b1f6      	cbz	r6, 800f138 <rcl_get_secure_root+0xbc>
 800f0fa:	e899 0003 	ldmia.w	r9, {r0, r1}
 800f0fe:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f102:	4618      	mov	r0, r3
 800f104:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800f108:	f001 ffd4 	bl	80110b4 <rcutils_strdup>
 800f10c:	4606      	mov	r6, r0
 800f10e:	2800      	cmp	r0, #0
 800f110:	d0e3      	beq.n	800f0da <rcl_get_secure_root+0x5e>
 800f112:	4622      	mov	r2, r4
 800f114:	4641      	mov	r1, r8
 800f116:	f7ff ff6f 	bl	800eff8 <exact_match_lookup>
 800f11a:	4605      	mov	r5, r0
 800f11c:	2d00      	cmp	r5, #0
 800f11e:	d0dd      	beq.n	800f0dc <rcl_get_secure_root+0x60>
 800f120:	4628      	mov	r0, r5
 800f122:	f001 ff51 	bl	8010fc8 <rcutils_is_directory>
 800f126:	4603      	mov	r3, r0
 800f128:	2800      	cmp	r0, #0
 800f12a:	d1d7      	bne.n	800f0dc <rcl_get_secure_root+0x60>
 800f12c:	4628      	mov	r0, r5
 800f12e:	6921      	ldr	r1, [r4, #16]
 800f130:	461d      	mov	r5, r3
 800f132:	6863      	ldr	r3, [r4, #4]
 800f134:	4798      	blx	r3
 800f136:	e7d1      	b.n	800f0dc <rcl_get_secure_root+0x60>
 800f138:	4622      	mov	r2, r4
 800f13a:	4638      	mov	r0, r7
 800f13c:	4641      	mov	r1, r8
 800f13e:	f7ff ff5b 	bl	800eff8 <exact_match_lookup>
 800f142:	4605      	mov	r5, r0
 800f144:	e7ea      	b.n	800f11c <rcl_get_secure_root+0xa0>
 800f146:	bf00      	nop
 800f148:	08015ac8 	.word	0x08015ac8
 800f14c:	08015ae0 	.word	0x08015ae0

0800f150 <rcl_get_security_options_from_environment>:
 800f150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f154:	b082      	sub	sp, #8
 800f156:	2300      	movs	r3, #0
 800f158:	4606      	mov	r6, r0
 800f15a:	460f      	mov	r7, r1
 800f15c:	4820      	ldr	r0, [pc, #128]	@ (800f1e0 <rcl_get_security_options_from_environment+0x90>)
 800f15e:	9301      	str	r3, [sp, #4]
 800f160:	a901      	add	r1, sp, #4
 800f162:	4690      	mov	r8, r2
 800f164:	f001 ff18 	bl	8010f98 <rcutils_get_env>
 800f168:	b120      	cbz	r0, 800f174 <rcl_get_security_options_from_environment+0x24>
 800f16a:	2501      	movs	r5, #1
 800f16c:	4628      	mov	r0, r5
 800f16e:	b002      	add	sp, #8
 800f170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f174:	491b      	ldr	r1, [pc, #108]	@ (800f1e4 <rcl_get_security_options_from_environment+0x94>)
 800f176:	4604      	mov	r4, r0
 800f178:	9801      	ldr	r0, [sp, #4]
 800f17a:	f7f1 f851 	bl	8000220 <strcmp>
 800f17e:	4605      	mov	r5, r0
 800f180:	b9e8      	cbnz	r0, 800f1be <rcl_get_security_options_from_environment+0x6e>
 800f182:	9001      	str	r0, [sp, #4]
 800f184:	f1b8 0f00 	cmp.w	r8, #0
 800f188:	d020      	beq.n	800f1cc <rcl_get_security_options_from_environment+0x7c>
 800f18a:	4817      	ldr	r0, [pc, #92]	@ (800f1e8 <rcl_get_security_options_from_environment+0x98>)
 800f18c:	a901      	add	r1, sp, #4
 800f18e:	f001 ff03 	bl	8010f98 <rcutils_get_env>
 800f192:	2800      	cmp	r0, #0
 800f194:	d1e9      	bne.n	800f16a <rcl_get_security_options_from_environment+0x1a>
 800f196:	4915      	ldr	r1, [pc, #84]	@ (800f1ec <rcl_get_security_options_from_environment+0x9c>)
 800f198:	9801      	ldr	r0, [sp, #4]
 800f19a:	f7f1 f841 	bl	8000220 <strcmp>
 800f19e:	fab0 f080 	clz	r0, r0
 800f1a2:	0940      	lsrs	r0, r0, #5
 800f1a4:	f888 0000 	strb.w	r0, [r8]
 800f1a8:	4639      	mov	r1, r7
 800f1aa:	4630      	mov	r0, r6
 800f1ac:	f7ff ff66 	bl	800f07c <rcl_get_secure_root>
 800f1b0:	b170      	cbz	r0, 800f1d0 <rcl_get_security_options_from_environment+0x80>
 800f1b2:	f8c8 0004 	str.w	r0, [r8, #4]
 800f1b6:	4628      	mov	r0, r5
 800f1b8:	b002      	add	sp, #8
 800f1ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1be:	4625      	mov	r5, r4
 800f1c0:	4628      	mov	r0, r5
 800f1c2:	f888 4000 	strb.w	r4, [r8]
 800f1c6:	b002      	add	sp, #8
 800f1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1cc:	250b      	movs	r5, #11
 800f1ce:	e7cd      	b.n	800f16c <rcl_get_security_options_from_environment+0x1c>
 800f1d0:	f898 5000 	ldrb.w	r5, [r8]
 800f1d4:	f1a5 0501 	sub.w	r5, r5, #1
 800f1d8:	fab5 f585 	clz	r5, r5
 800f1dc:	096d      	lsrs	r5, r5, #5
 800f1de:	e7c5      	b.n	800f16c <rcl_get_security_options_from_environment+0x1c>
 800f1e0:	08015a80 	.word	0x08015a80
 800f1e4:	08015a94 	.word	0x08015a94
 800f1e8:	08015a9c 	.word	0x08015a9c
 800f1ec:	08015ab4 	.word	0x08015ab4

0800f1f0 <rcl_service_get_rmw_handle>:
 800f1f0:	b118      	cbz	r0, 800f1fa <rcl_service_get_rmw_handle+0xa>
 800f1f2:	6800      	ldr	r0, [r0, #0]
 800f1f4:	b108      	cbz	r0, 800f1fa <rcl_service_get_rmw_handle+0xa>
 800f1f6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800f1fa:	4770      	bx	lr

0800f1fc <rcl_take_request>:
 800f1fc:	b570      	push	{r4, r5, r6, lr}
 800f1fe:	468e      	mov	lr, r1
 800f200:	460c      	mov	r4, r1
 800f202:	4616      	mov	r6, r2
 800f204:	4605      	mov	r5, r0
 800f206:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f20a:	b08c      	sub	sp, #48	@ 0x30
 800f20c:	f10d 0c18 	add.w	ip, sp, #24
 800f210:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f214:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f218:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f21c:	b30d      	cbz	r5, 800f262 <rcl_take_request+0x66>
 800f21e:	682b      	ldr	r3, [r5, #0]
 800f220:	b1fb      	cbz	r3, 800f262 <rcl_take_request+0x66>
 800f222:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 800f226:	b1e0      	cbz	r0, 800f262 <rcl_take_request+0x66>
 800f228:	b336      	cbz	r6, 800f278 <rcl_take_request+0x7c>
 800f22a:	2300      	movs	r3, #0
 800f22c:	f88d 3007 	strb.w	r3, [sp, #7]
 800f230:	4632      	mov	r2, r6
 800f232:	f10d 0307 	add.w	r3, sp, #7
 800f236:	a902      	add	r1, sp, #8
 800f238:	f002 fb00 	bl	801183c <rmw_take_request>
 800f23c:	4605      	mov	r5, r0
 800f23e:	b198      	cbz	r0, 800f268 <rcl_take_request+0x6c>
 800f240:	280a      	cmp	r0, #10
 800f242:	bf18      	it	ne
 800f244:	2501      	movne	r5, #1
 800f246:	f10d 0e18 	add.w	lr, sp, #24
 800f24a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f24e:	46a4      	mov	ip, r4
 800f250:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f254:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f258:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f25c:	4628      	mov	r0, r5
 800f25e:	b00c      	add	sp, #48	@ 0x30
 800f260:	bd70      	pop	{r4, r5, r6, pc}
 800f262:	f44f 7516 	mov.w	r5, #600	@ 0x258
 800f266:	e7ee      	b.n	800f246 <rcl_take_request+0x4a>
 800f268:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f26c:	f240 2359 	movw	r3, #601	@ 0x259
 800f270:	2a00      	cmp	r2, #0
 800f272:	bf08      	it	eq
 800f274:	461d      	moveq	r5, r3
 800f276:	e7e6      	b.n	800f246 <rcl_take_request+0x4a>
 800f278:	250b      	movs	r5, #11
 800f27a:	e7e4      	b.n	800f246 <rcl_take_request+0x4a>

0800f27c <rcl_send_response>:
 800f27c:	b170      	cbz	r0, 800f29c <rcl_send_response+0x20>
 800f27e:	6800      	ldr	r0, [r0, #0]
 800f280:	b160      	cbz	r0, 800f29c <rcl_send_response+0x20>
 800f282:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800f286:	b148      	cbz	r0, 800f29c <rcl_send_response+0x20>
 800f288:	b159      	cbz	r1, 800f2a2 <rcl_send_response+0x26>
 800f28a:	b510      	push	{r4, lr}
 800f28c:	b15a      	cbz	r2, 800f2a6 <rcl_send_response+0x2a>
 800f28e:	f002 fb33 	bl	80118f8 <rmw_send_response>
 800f292:	b110      	cbz	r0, 800f29a <rcl_send_response+0x1e>
 800f294:	2802      	cmp	r0, #2
 800f296:	bf18      	it	ne
 800f298:	2001      	movne	r0, #1
 800f29a:	bd10      	pop	{r4, pc}
 800f29c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800f2a0:	4770      	bx	lr
 800f2a2:	200b      	movs	r0, #11
 800f2a4:	4770      	bx	lr
 800f2a6:	200b      	movs	r0, #11
 800f2a8:	bd10      	pop	{r4, pc}
 800f2aa:	bf00      	nop

0800f2ac <rcl_service_is_valid>:
 800f2ac:	b130      	cbz	r0, 800f2bc <rcl_service_is_valid+0x10>
 800f2ae:	6800      	ldr	r0, [r0, #0]
 800f2b0:	b120      	cbz	r0, 800f2bc <rcl_service_is_valid+0x10>
 800f2b2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 800f2b6:	3800      	subs	r0, #0
 800f2b8:	bf18      	it	ne
 800f2ba:	2001      	movne	r0, #1
 800f2bc:	4770      	bx	lr
 800f2be:	bf00      	nop

0800f2c0 <rcl_take>:
 800f2c0:	2800      	cmp	r0, #0
 800f2c2:	d04a      	beq.n	800f35a <rcl_take+0x9a>
 800f2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2c8:	4604      	mov	r4, r0
 800f2ca:	6800      	ldr	r0, [r0, #0]
 800f2cc:	b0a4      	sub	sp, #144	@ 0x90
 800f2ce:	2800      	cmp	r0, #0
 800f2d0:	d03b      	beq.n	800f34a <rcl_take+0x8a>
 800f2d2:	461f      	mov	r7, r3
 800f2d4:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d036      	beq.n	800f34a <rcl_take+0x8a>
 800f2dc:	460e      	mov	r6, r1
 800f2de:	2900      	cmp	r1, #0
 800f2e0:	d039      	beq.n	800f356 <rcl_take+0x96>
 800f2e2:	4615      	mov	r5, r2
 800f2e4:	2a00      	cmp	r2, #0
 800f2e6:	d03c      	beq.n	800f362 <rcl_take+0xa2>
 800f2e8:	a802      	add	r0, sp, #8
 800f2ea:	f001 ff99 	bl	8011220 <rmw_get_zero_initialized_message_info>
 800f2ee:	f10d 0c08 	add.w	ip, sp, #8
 800f2f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f2f6:	46ae      	mov	lr, r5
 800f2f8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f2fc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f300:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f304:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f308:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f30c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800f310:	f04f 0800 	mov.w	r8, #0
 800f314:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800f318:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 800f31c:	6822      	ldr	r2, [r4, #0]
 800f31e:	462b      	mov	r3, r5
 800f320:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 800f324:	9700      	str	r7, [sp, #0]
 800f326:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 800f32a:	4631      	mov	r1, r6
 800f32c:	f002 fb8a 	bl	8011a44 <rmw_take_with_info>
 800f330:	4603      	mov	r3, r0
 800f332:	b9c0      	cbnz	r0, 800f366 <rcl_take+0xa6>
 800f334:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 800f338:	f240 1291 	movw	r2, #401	@ 0x191
 800f33c:	2900      	cmp	r1, #0
 800f33e:	bf08      	it	eq
 800f340:	4613      	moveq	r3, r2
 800f342:	4618      	mov	r0, r3
 800f344:	b024      	add	sp, #144	@ 0x90
 800f346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f34a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800f34e:	4618      	mov	r0, r3
 800f350:	b024      	add	sp, #144	@ 0x90
 800f352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f356:	230b      	movs	r3, #11
 800f358:	e7f3      	b.n	800f342 <rcl_take+0x82>
 800f35a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800f35e:	4618      	mov	r0, r3
 800f360:	4770      	bx	lr
 800f362:	ad14      	add	r5, sp, #80	@ 0x50
 800f364:	e7c0      	b.n	800f2e8 <rcl_take+0x28>
 800f366:	f7ff fb21 	bl	800e9ac <rcl_convert_rmw_ret_to_rcl_ret>
 800f36a:	4603      	mov	r3, r0
 800f36c:	e7e9      	b.n	800f342 <rcl_take+0x82>
 800f36e:	bf00      	nop

0800f370 <rcl_subscription_get_rmw_handle>:
 800f370:	b118      	cbz	r0, 800f37a <rcl_subscription_get_rmw_handle+0xa>
 800f372:	6800      	ldr	r0, [r0, #0]
 800f374:	b108      	cbz	r0, 800f37a <rcl_subscription_get_rmw_handle+0xa>
 800f376:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800f37a:	4770      	bx	lr

0800f37c <rcl_subscription_is_valid>:
 800f37c:	b130      	cbz	r0, 800f38c <rcl_subscription_is_valid+0x10>
 800f37e:	6800      	ldr	r0, [r0, #0]
 800f380:	b120      	cbz	r0, 800f38c <rcl_subscription_is_valid+0x10>
 800f382:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800f386:	3800      	subs	r0, #0
 800f388:	bf18      	it	ne
 800f38a:	2001      	movne	r0, #1
 800f38c:	4770      	bx	lr
 800f38e:	bf00      	nop

0800f390 <rcl_get_system_time>:
 800f390:	4608      	mov	r0, r1
 800f392:	f7fb ba79 	b.w	800a888 <rcutils_system_time_now>
 800f396:	bf00      	nop

0800f398 <rcl_get_steady_time>:
 800f398:	4608      	mov	r0, r1
 800f39a:	f7fb ba9d 	b.w	800a8d8 <rcutils_steady_time_now>
 800f39e:	bf00      	nop

0800f3a0 <rcl_get_ros_time>:
 800f3a0:	7a03      	ldrb	r3, [r0, #8]
 800f3a2:	b510      	push	{r4, lr}
 800f3a4:	460c      	mov	r4, r1
 800f3a6:	b133      	cbz	r3, 800f3b6 <rcl_get_ros_time+0x16>
 800f3a8:	2105      	movs	r1, #5
 800f3aa:	f001 fd51 	bl	8010e50 <__atomic_load_8>
 800f3ae:	e9c4 0100 	strd	r0, r1, [r4]
 800f3b2:	2000      	movs	r0, #0
 800f3b4:	bd10      	pop	{r4, pc}
 800f3b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3ba:	4608      	mov	r0, r1
 800f3bc:	f7fb ba64 	b.w	800a888 <rcutils_system_time_now>

0800f3c0 <rcl_clock_init>:
 800f3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3c2:	4605      	mov	r5, r0
 800f3c4:	4610      	mov	r0, r2
 800f3c6:	4614      	mov	r4, r2
 800f3c8:	460e      	mov	r6, r1
 800f3ca:	f7fb fa1b 	bl	800a804 <rcutils_allocator_is_valid>
 800f3ce:	b128      	cbz	r0, 800f3dc <rcl_clock_init+0x1c>
 800f3d0:	2d03      	cmp	r5, #3
 800f3d2:	d803      	bhi.n	800f3dc <rcl_clock_init+0x1c>
 800f3d4:	e8df f005 	tbb	[pc, r5]
 800f3d8:	06532e1d 	.word	0x06532e1d
 800f3dc:	f04f 0c0b 	mov.w	ip, #11
 800f3e0:	4660      	mov	r0, ip
 800f3e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3e4:	2e00      	cmp	r6, #0
 800f3e6:	d0f9      	beq.n	800f3dc <rcl_clock_init+0x1c>
 800f3e8:	2c00      	cmp	r4, #0
 800f3ea:	d0f7      	beq.n	800f3dc <rcl_clock_init+0x1c>
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800f3f2:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 800f4a8 <rcl_clock_init+0xe8>
 800f3f6:	6133      	str	r3, [r6, #16]
 800f3f8:	f106 0514 	add.w	r5, r6, #20
 800f3fc:	469c      	mov	ip, r3
 800f3fe:	2703      	movs	r7, #3
 800f400:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f402:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f404:	6823      	ldr	r3, [r4, #0]
 800f406:	602b      	str	r3, [r5, #0]
 800f408:	7037      	strb	r7, [r6, #0]
 800f40a:	f8c6 e00c 	str.w	lr, [r6, #12]
 800f40e:	4660      	mov	r0, ip
 800f410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f412:	2e00      	cmp	r6, #0
 800f414:	d0e2      	beq.n	800f3dc <rcl_clock_init+0x1c>
 800f416:	2300      	movs	r3, #0
 800f418:	7033      	strb	r3, [r6, #0]
 800f41a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800f41e:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800f422:	469c      	mov	ip, r3
 800f424:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f426:	f106 0514 	add.w	r5, r6, #20
 800f42a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f42c:	6823      	ldr	r3, [r4, #0]
 800f42e:	602b      	str	r3, [r5, #0]
 800f430:	4660      	mov	r0, ip
 800f432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f434:	2e00      	cmp	r6, #0
 800f436:	d0d1      	beq.n	800f3dc <rcl_clock_init+0x1c>
 800f438:	2c00      	cmp	r4, #0
 800f43a:	d0cf      	beq.n	800f3dc <rcl_clock_init+0x1c>
 800f43c:	2700      	movs	r7, #0
 800f43e:	7037      	strb	r7, [r6, #0]
 800f440:	46a4      	mov	ip, r4
 800f442:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f446:	f106 0514 	add.w	r5, r6, #20
 800f44a:	e9c6 7701 	strd	r7, r7, [r6, #4]
 800f44e:	e9c6 7703 	strd	r7, r7, [r6, #12]
 800f452:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f454:	f8dc 3000 	ldr.w	r3, [ip]
 800f458:	602b      	str	r3, [r5, #0]
 800f45a:	6921      	ldr	r1, [r4, #16]
 800f45c:	6823      	ldr	r3, [r4, #0]
 800f45e:	2010      	movs	r0, #16
 800f460:	4798      	blx	r3
 800f462:	6130      	str	r0, [r6, #16]
 800f464:	b1d0      	cbz	r0, 800f49c <rcl_clock_init+0xdc>
 800f466:	2200      	movs	r2, #0
 800f468:	2300      	movs	r3, #0
 800f46a:	e9c0 2300 	strd	r2, r3, [r0]
 800f46e:	2301      	movs	r3, #1
 800f470:	7207      	strb	r7, [r0, #8]
 800f472:	4a0c      	ldr	r2, [pc, #48]	@ (800f4a4 <rcl_clock_init+0xe4>)
 800f474:	7033      	strb	r3, [r6, #0]
 800f476:	46bc      	mov	ip, r7
 800f478:	60f2      	str	r2, [r6, #12]
 800f47a:	4660      	mov	r0, ip
 800f47c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f47e:	2e00      	cmp	r6, #0
 800f480:	d0ac      	beq.n	800f3dc <rcl_clock_init+0x1c>
 800f482:	2c00      	cmp	r4, #0
 800f484:	d0aa      	beq.n	800f3dc <rcl_clock_init+0x1c>
 800f486:	2300      	movs	r3, #0
 800f488:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800f48c:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 800f4ac <rcl_clock_init+0xec>
 800f490:	6133      	str	r3, [r6, #16]
 800f492:	f106 0514 	add.w	r5, r6, #20
 800f496:	469c      	mov	ip, r3
 800f498:	2702      	movs	r7, #2
 800f49a:	e7b1      	b.n	800f400 <rcl_clock_init+0x40>
 800f49c:	f04f 0c0a 	mov.w	ip, #10
 800f4a0:	e79e      	b.n	800f3e0 <rcl_clock_init+0x20>
 800f4a2:	bf00      	nop
 800f4a4:	0800f3a1 	.word	0x0800f3a1
 800f4a8:	0800f399 	.word	0x0800f399
 800f4ac:	0800f391 	.word	0x0800f391

0800f4b0 <rcl_clock_get_now>:
 800f4b0:	b140      	cbz	r0, 800f4c4 <rcl_clock_get_now+0x14>
 800f4b2:	b139      	cbz	r1, 800f4c4 <rcl_clock_get_now+0x14>
 800f4b4:	7803      	ldrb	r3, [r0, #0]
 800f4b6:	b11b      	cbz	r3, 800f4c0 <rcl_clock_get_now+0x10>
 800f4b8:	68c3      	ldr	r3, [r0, #12]
 800f4ba:	b10b      	cbz	r3, 800f4c0 <rcl_clock_get_now+0x10>
 800f4bc:	6900      	ldr	r0, [r0, #16]
 800f4be:	4718      	bx	r3
 800f4c0:	2001      	movs	r0, #1
 800f4c2:	4770      	bx	lr
 800f4c4:	200b      	movs	r0, #11
 800f4c6:	4770      	bx	lr

0800f4c8 <rcl_timer_call>:
 800f4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4cc:	b087      	sub	sp, #28
 800f4ce:	2800      	cmp	r0, #0
 800f4d0:	d06d      	beq.n	800f5ae <rcl_timer_call+0xe6>
 800f4d2:	6803      	ldr	r3, [r0, #0]
 800f4d4:	4604      	mov	r4, r0
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d063      	beq.n	800f5a2 <rcl_timer_call+0xda>
 800f4da:	f3bf 8f5b 	dmb	ish
 800f4de:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f4e2:	f3bf 8f5b 	dmb	ish
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d150      	bne.n	800f58c <rcl_timer_call+0xc4>
 800f4ea:	6803      	ldr	r3, [r0, #0]
 800f4ec:	a904      	add	r1, sp, #16
 800f4ee:	6818      	ldr	r0, [r3, #0]
 800f4f0:	f7ff ffde 	bl	800f4b0 <rcl_clock_get_now>
 800f4f4:	4605      	mov	r5, r0
 800f4f6:	2800      	cmp	r0, #0
 800f4f8:	d14a      	bne.n	800f590 <rcl_timer_call+0xc8>
 800f4fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	db4a      	blt.n	800f598 <rcl_timer_call+0xd0>
 800f502:	6820      	ldr	r0, [r4, #0]
 800f504:	f04f 0a05 	mov.w	sl, #5
 800f508:	f8cd a000 	str.w	sl, [sp]
 800f50c:	3020      	adds	r0, #32
 800f50e:	f001 fd0b 	bl	8010f28 <__atomic_exchange_8>
 800f512:	6823      	ldr	r3, [r4, #0]
 800f514:	f3bf 8f5b 	dmb	ish
 800f518:	4680      	mov	r8, r0
 800f51a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800f51e:	f3bf 8f5b 	dmb	ish
 800f522:	6820      	ldr	r0, [r4, #0]
 800f524:	4689      	mov	r9, r1
 800f526:	3028      	adds	r0, #40	@ 0x28
 800f528:	4651      	mov	r1, sl
 800f52a:	f001 fc91 	bl	8010e50 <__atomic_load_8>
 800f52e:	4606      	mov	r6, r0
 800f530:	6820      	ldr	r0, [r4, #0]
 800f532:	460f      	mov	r7, r1
 800f534:	3018      	adds	r0, #24
 800f536:	4651      	mov	r1, sl
 800f538:	f001 fc8a 	bl	8010e50 <__atomic_load_8>
 800f53c:	1836      	adds	r6, r6, r0
 800f53e:	4602      	mov	r2, r0
 800f540:	4682      	mov	sl, r0
 800f542:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 800f546:	eb47 0701 	adc.w	r7, r7, r1
 800f54a:	4286      	cmp	r6, r0
 800f54c:	460b      	mov	r3, r1
 800f54e:	eb77 010c 	sbcs.w	r1, r7, ip
 800f552:	da04      	bge.n	800f55e <rcl_timer_call+0x96>
 800f554:	ea53 0102 	orrs.w	r1, r3, r2
 800f558:	d12e      	bne.n	800f5b8 <rcl_timer_call+0xf0>
 800f55a:	4606      	mov	r6, r0
 800f55c:	4667      	mov	r7, ip
 800f55e:	6820      	ldr	r0, [r4, #0]
 800f560:	2105      	movs	r1, #5
 800f562:	4632      	mov	r2, r6
 800f564:	463b      	mov	r3, r7
 800f566:	3028      	adds	r0, #40	@ 0x28
 800f568:	9100      	str	r1, [sp, #0]
 800f56a:	f001 fca7 	bl	8010ebc <__atomic_store_8>
 800f56e:	f1bb 0f00 	cmp.w	fp, #0
 800f572:	d00d      	beq.n	800f590 <rcl_timer_call+0xc8>
 800f574:	9a04      	ldr	r2, [sp, #16]
 800f576:	9b05      	ldr	r3, [sp, #20]
 800f578:	ebb2 0208 	subs.w	r2, r2, r8
 800f57c:	4620      	mov	r0, r4
 800f57e:	eb63 0309 	sbc.w	r3, r3, r9
 800f582:	47d8      	blx	fp
 800f584:	4628      	mov	r0, r5
 800f586:	b007      	add	sp, #28
 800f588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f58c:	f240 3521 	movw	r5, #801	@ 0x321
 800f590:	4628      	mov	r0, r5
 800f592:	b007      	add	sp, #28
 800f594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f598:	2501      	movs	r5, #1
 800f59a:	4628      	mov	r0, r5
 800f59c:	b007      	add	sp, #28
 800f59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5a2:	f44f 7548 	mov.w	r5, #800	@ 0x320
 800f5a6:	4628      	mov	r0, r5
 800f5a8:	b007      	add	sp, #28
 800f5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5ae:	250b      	movs	r5, #11
 800f5b0:	4628      	mov	r0, r5
 800f5b2:	b007      	add	sp, #28
 800f5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5b8:	1b80      	subs	r0, r0, r6
 800f5ba:	eb6c 0107 	sbc.w	r1, ip, r7
 800f5be:	3801      	subs	r0, #1
 800f5c0:	f161 0100 	sbc.w	r1, r1, #0
 800f5c4:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800f5c8:	f7f0 fe92 	bl	80002f0 <__aeabi_ldivmod>
 800f5cc:	9b02      	ldr	r3, [sp, #8]
 800f5ce:	3001      	adds	r0, #1
 800f5d0:	f141 0100 	adc.w	r1, r1, #0
 800f5d4:	fb00 f303 	mul.w	r3, r0, r3
 800f5d8:	fb01 330a 	mla	r3, r1, sl, r3
 800f5dc:	fba0 0a0a 	umull	r0, sl, r0, sl
 800f5e0:	1986      	adds	r6, r0, r6
 800f5e2:	4453      	add	r3, sl
 800f5e4:	eb43 0707 	adc.w	r7, r3, r7
 800f5e8:	e7b9      	b.n	800f55e <rcl_timer_call+0x96>
 800f5ea:	bf00      	nop

0800f5ec <rcl_timer_is_ready>:
 800f5ec:	b570      	push	{r4, r5, r6, lr}
 800f5ee:	b082      	sub	sp, #8
 800f5f0:	b378      	cbz	r0, 800f652 <rcl_timer_is_ready+0x66>
 800f5f2:	6803      	ldr	r3, [r0, #0]
 800f5f4:	4604      	mov	r4, r0
 800f5f6:	b383      	cbz	r3, 800f65a <rcl_timer_is_ready+0x6e>
 800f5f8:	460d      	mov	r5, r1
 800f5fa:	b351      	cbz	r1, 800f652 <rcl_timer_is_ready+0x66>
 800f5fc:	f3bf 8f5b 	dmb	ish
 800f600:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f604:	f3bf 8f5b 	dmb	ish
 800f608:	b953      	cbnz	r3, 800f620 <rcl_timer_is_ready+0x34>
 800f60a:	6803      	ldr	r3, [r0, #0]
 800f60c:	4669      	mov	r1, sp
 800f60e:	6818      	ldr	r0, [r3, #0]
 800f610:	f7ff ff4e 	bl	800f4b0 <rcl_clock_get_now>
 800f614:	4606      	mov	r6, r0
 800f616:	b140      	cbz	r0, 800f62a <rcl_timer_is_ready+0x3e>
 800f618:	f240 3321 	movw	r3, #801	@ 0x321
 800f61c:	4298      	cmp	r0, r3
 800f61e:	d101      	bne.n	800f624 <rcl_timer_is_ready+0x38>
 800f620:	2600      	movs	r6, #0
 800f622:	702e      	strb	r6, [r5, #0]
 800f624:	4630      	mov	r0, r6
 800f626:	b002      	add	sp, #8
 800f628:	bd70      	pop	{r4, r5, r6, pc}
 800f62a:	6820      	ldr	r0, [r4, #0]
 800f62c:	2105      	movs	r1, #5
 800f62e:	3028      	adds	r0, #40	@ 0x28
 800f630:	f001 fc0e 	bl	8010e50 <__atomic_load_8>
 800f634:	9b00      	ldr	r3, [sp, #0]
 800f636:	1ac0      	subs	r0, r0, r3
 800f638:	9b01      	ldr	r3, [sp, #4]
 800f63a:	eb61 0103 	sbc.w	r1, r1, r3
 800f63e:	2801      	cmp	r0, #1
 800f640:	f171 0300 	sbcs.w	r3, r1, #0
 800f644:	bfb4      	ite	lt
 800f646:	2301      	movlt	r3, #1
 800f648:	2300      	movge	r3, #0
 800f64a:	4630      	mov	r0, r6
 800f64c:	702b      	strb	r3, [r5, #0]
 800f64e:	b002      	add	sp, #8
 800f650:	bd70      	pop	{r4, r5, r6, pc}
 800f652:	260b      	movs	r6, #11
 800f654:	4630      	mov	r0, r6
 800f656:	b002      	add	sp, #8
 800f658:	bd70      	pop	{r4, r5, r6, pc}
 800f65a:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800f65e:	e7e1      	b.n	800f624 <rcl_timer_is_ready+0x38>

0800f660 <rcl_timer_get_time_until_next_call>:
 800f660:	b570      	push	{r4, r5, r6, lr}
 800f662:	b082      	sub	sp, #8
 800f664:	b330      	cbz	r0, 800f6b4 <rcl_timer_get_time_until_next_call+0x54>
 800f666:	6803      	ldr	r3, [r0, #0]
 800f668:	4604      	mov	r4, r0
 800f66a:	b33b      	cbz	r3, 800f6bc <rcl_timer_get_time_until_next_call+0x5c>
 800f66c:	460d      	mov	r5, r1
 800f66e:	b309      	cbz	r1, 800f6b4 <rcl_timer_get_time_until_next_call+0x54>
 800f670:	f3bf 8f5b 	dmb	ish
 800f674:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f678:	f3bf 8f5b 	dmb	ish
 800f67c:	b9ab      	cbnz	r3, 800f6aa <rcl_timer_get_time_until_next_call+0x4a>
 800f67e:	6803      	ldr	r3, [r0, #0]
 800f680:	4669      	mov	r1, sp
 800f682:	6818      	ldr	r0, [r3, #0]
 800f684:	f7ff ff14 	bl	800f4b0 <rcl_clock_get_now>
 800f688:	4606      	mov	r6, r0
 800f68a:	b958      	cbnz	r0, 800f6a4 <rcl_timer_get_time_until_next_call+0x44>
 800f68c:	6820      	ldr	r0, [r4, #0]
 800f68e:	2105      	movs	r1, #5
 800f690:	3028      	adds	r0, #40	@ 0x28
 800f692:	f001 fbdd 	bl	8010e50 <__atomic_load_8>
 800f696:	9b00      	ldr	r3, [sp, #0]
 800f698:	1ac0      	subs	r0, r0, r3
 800f69a:	9b01      	ldr	r3, [sp, #4]
 800f69c:	6028      	str	r0, [r5, #0]
 800f69e:	eb61 0103 	sbc.w	r1, r1, r3
 800f6a2:	6069      	str	r1, [r5, #4]
 800f6a4:	4630      	mov	r0, r6
 800f6a6:	b002      	add	sp, #8
 800f6a8:	bd70      	pop	{r4, r5, r6, pc}
 800f6aa:	f240 3621 	movw	r6, #801	@ 0x321
 800f6ae:	4630      	mov	r0, r6
 800f6b0:	b002      	add	sp, #8
 800f6b2:	bd70      	pop	{r4, r5, r6, pc}
 800f6b4:	260b      	movs	r6, #11
 800f6b6:	4630      	mov	r0, r6
 800f6b8:	b002      	add	sp, #8
 800f6ba:	bd70      	pop	{r4, r5, r6, pc}
 800f6bc:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800f6c0:	e7f0      	b.n	800f6a4 <rcl_timer_get_time_until_next_call+0x44>
 800f6c2:	bf00      	nop

0800f6c4 <rcl_timer_get_guard_condition>:
 800f6c4:	b130      	cbz	r0, 800f6d4 <rcl_timer_get_guard_condition+0x10>
 800f6c6:	6800      	ldr	r0, [r0, #0]
 800f6c8:	b120      	cbz	r0, 800f6d4 <rcl_timer_get_guard_condition+0x10>
 800f6ca:	68c3      	ldr	r3, [r0, #12]
 800f6cc:	b10b      	cbz	r3, 800f6d2 <rcl_timer_get_guard_condition+0xe>
 800f6ce:	3008      	adds	r0, #8
 800f6d0:	4770      	bx	lr
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	4770      	bx	lr
 800f6d6:	bf00      	nop

0800f6d8 <rcl_validate_enclave_name_with_size>:
 800f6d8:	b378      	cbz	r0, 800f73a <rcl_validate_enclave_name_with_size+0x62>
 800f6da:	b570      	push	{r4, r5, r6, lr}
 800f6dc:	4615      	mov	r5, r2
 800f6de:	b0c2      	sub	sp, #264	@ 0x108
 800f6e0:	b302      	cbz	r2, 800f724 <rcl_validate_enclave_name_with_size+0x4c>
 800f6e2:	461e      	mov	r6, r3
 800f6e4:	466a      	mov	r2, sp
 800f6e6:	ab01      	add	r3, sp, #4
 800f6e8:	460c      	mov	r4, r1
 800f6ea:	f001 fe17 	bl	801131c <rmw_validate_namespace_with_size>
 800f6ee:	4684      	mov	ip, r0
 800f6f0:	b9e8      	cbnz	r0, 800f72e <rcl_validate_enclave_name_with_size+0x56>
 800f6f2:	9b00      	ldr	r3, [sp, #0]
 800f6f4:	b923      	cbnz	r3, 800f700 <rcl_validate_enclave_name_with_size+0x28>
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	602b      	str	r3, [r5, #0]
 800f6fa:	4660      	mov	r0, ip
 800f6fc:	b042      	add	sp, #264	@ 0x108
 800f6fe:	bd70      	pop	{r4, r5, r6, pc}
 800f700:	2b07      	cmp	r3, #7
 800f702:	d007      	beq.n	800f714 <rcl_validate_enclave_name_with_size+0x3c>
 800f704:	1e5a      	subs	r2, r3, #1
 800f706:	2a05      	cmp	r2, #5
 800f708:	d833      	bhi.n	800f772 <rcl_validate_enclave_name_with_size+0x9a>
 800f70a:	e8df f002 	tbb	[pc, r2]
 800f70e:	2c2f      	.short	0x2c2f
 800f710:	1a232629 	.word	0x1a232629
 800f714:	2cff      	cmp	r4, #255	@ 0xff
 800f716:	d9ee      	bls.n	800f6f6 <rcl_validate_enclave_name_with_size+0x1e>
 800f718:	602b      	str	r3, [r5, #0]
 800f71a:	2e00      	cmp	r6, #0
 800f71c:	d0ed      	beq.n	800f6fa <rcl_validate_enclave_name_with_size+0x22>
 800f71e:	23fe      	movs	r3, #254	@ 0xfe
 800f720:	6033      	str	r3, [r6, #0]
 800f722:	e7ea      	b.n	800f6fa <rcl_validate_enclave_name_with_size+0x22>
 800f724:	f04f 0c0b 	mov.w	ip, #11
 800f728:	4660      	mov	r0, ip
 800f72a:	b042      	add	sp, #264	@ 0x108
 800f72c:	bd70      	pop	{r4, r5, r6, pc}
 800f72e:	f7ff f93d 	bl	800e9ac <rcl_convert_rmw_ret_to_rcl_ret>
 800f732:	4684      	mov	ip, r0
 800f734:	4660      	mov	r0, ip
 800f736:	b042      	add	sp, #264	@ 0x108
 800f738:	bd70      	pop	{r4, r5, r6, pc}
 800f73a:	f04f 0c0b 	mov.w	ip, #11
 800f73e:	4660      	mov	r0, ip
 800f740:	4770      	bx	lr
 800f742:	2306      	movs	r3, #6
 800f744:	602b      	str	r3, [r5, #0]
 800f746:	2e00      	cmp	r6, #0
 800f748:	d0d7      	beq.n	800f6fa <rcl_validate_enclave_name_with_size+0x22>
 800f74a:	9b01      	ldr	r3, [sp, #4]
 800f74c:	6033      	str	r3, [r6, #0]
 800f74e:	4660      	mov	r0, ip
 800f750:	b042      	add	sp, #264	@ 0x108
 800f752:	bd70      	pop	{r4, r5, r6, pc}
 800f754:	2305      	movs	r3, #5
 800f756:	602b      	str	r3, [r5, #0]
 800f758:	e7f5      	b.n	800f746 <rcl_validate_enclave_name_with_size+0x6e>
 800f75a:	2304      	movs	r3, #4
 800f75c:	602b      	str	r3, [r5, #0]
 800f75e:	e7f2      	b.n	800f746 <rcl_validate_enclave_name_with_size+0x6e>
 800f760:	2303      	movs	r3, #3
 800f762:	602b      	str	r3, [r5, #0]
 800f764:	e7ef      	b.n	800f746 <rcl_validate_enclave_name_with_size+0x6e>
 800f766:	2302      	movs	r3, #2
 800f768:	602b      	str	r3, [r5, #0]
 800f76a:	e7ec      	b.n	800f746 <rcl_validate_enclave_name_with_size+0x6e>
 800f76c:	2301      	movs	r3, #1
 800f76e:	602b      	str	r3, [r5, #0]
 800f770:	e7e9      	b.n	800f746 <rcl_validate_enclave_name_with_size+0x6e>
 800f772:	4a04      	ldr	r2, [pc, #16]	@ (800f784 <rcl_validate_enclave_name_with_size+0xac>)
 800f774:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f778:	a802      	add	r0, sp, #8
 800f77a:	f001 fc6f 	bl	801105c <rcutils_snprintf>
 800f77e:	f04f 0c01 	mov.w	ip, #1
 800f782:	e7ba      	b.n	800f6fa <rcl_validate_enclave_name_with_size+0x22>
 800f784:	08015b00 	.word	0x08015b00

0800f788 <rcl_validate_enclave_name>:
 800f788:	b168      	cbz	r0, 800f7a6 <rcl_validate_enclave_name+0x1e>
 800f78a:	b570      	push	{r4, r5, r6, lr}
 800f78c:	460d      	mov	r5, r1
 800f78e:	4616      	mov	r6, r2
 800f790:	4604      	mov	r4, r0
 800f792:	f7f0 fd4f 	bl	8000234 <strlen>
 800f796:	4633      	mov	r3, r6
 800f798:	4601      	mov	r1, r0
 800f79a:	462a      	mov	r2, r5
 800f79c:	4620      	mov	r0, r4
 800f79e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f7a2:	f7ff bf99 	b.w	800f6d8 <rcl_validate_enclave_name_with_size>
 800f7a6:	200b      	movs	r0, #11
 800f7a8:	4770      	bx	lr
 800f7aa:	bf00      	nop

0800f7ac <rcl_get_zero_initialized_wait_set>:
 800f7ac:	b510      	push	{r4, lr}
 800f7ae:	4c08      	ldr	r4, [pc, #32]	@ (800f7d0 <rcl_get_zero_initialized_wait_set+0x24>)
 800f7b0:	4686      	mov	lr, r0
 800f7b2:	4684      	mov	ip, r0
 800f7b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f7b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f7ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f7bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f7c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f7c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f7c6:	6823      	ldr	r3, [r4, #0]
 800f7c8:	f8cc 3000 	str.w	r3, [ip]
 800f7cc:	4670      	mov	r0, lr
 800f7ce:	bd10      	pop	{r4, pc}
 800f7d0:	08015b60 	.word	0x08015b60

0800f7d4 <rcl_wait_set_is_valid>:
 800f7d4:	b118      	cbz	r0, 800f7de <rcl_wait_set_is_valid+0xa>
 800f7d6:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800f7d8:	3800      	subs	r0, #0
 800f7da:	bf18      	it	ne
 800f7dc:	2001      	movne	r0, #1
 800f7de:	4770      	bx	lr

0800f7e0 <rcl_wait_set_fini>:
 800f7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7e4:	b082      	sub	sp, #8
 800f7e6:	2800      	cmp	r0, #0
 800f7e8:	f000 8095 	beq.w	800f916 <rcl_wait_set_fini+0x136>
 800f7ec:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 800f7ee:	4604      	mov	r4, r0
 800f7f0:	2e00      	cmp	r6, #0
 800f7f2:	f000 808c 	beq.w	800f90e <rcl_wait_set_fini+0x12e>
 800f7f6:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 800f7f8:	f002 fafa 	bl	8011df0 <rmw_destroy_wait_set>
 800f7fc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f7fe:	1e06      	subs	r6, r0, #0
 800f800:	bf18      	it	ne
 800f802:	f44f 7661 	movne.w	r6, #900	@ 0x384
 800f806:	2d00      	cmp	r5, #0
 800f808:	f000 8081 	beq.w	800f90e <rcl_wait_set_fini+0x12e>
 800f80c:	6820      	ldr	r0, [r4, #0]
 800f80e:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800f812:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800f814:	2700      	movs	r7, #0
 800f816:	6067      	str	r7, [r4, #4]
 800f818:	602f      	str	r7, [r5, #0]
 800f81a:	b120      	cbz	r0, 800f826 <rcl_wait_set_fini+0x46>
 800f81c:	9101      	str	r1, [sp, #4]
 800f81e:	47c0      	blx	r8
 800f820:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f822:	9901      	ldr	r1, [sp, #4]
 800f824:	6027      	str	r7, [r4, #0]
 800f826:	68a8      	ldr	r0, [r5, #8]
 800f828:	b120      	cbz	r0, 800f834 <rcl_wait_set_fini+0x54>
 800f82a:	47c0      	blx	r8
 800f82c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f82e:	2300      	movs	r3, #0
 800f830:	e9c5 3301 	strd	r3, r3, [r5, #4]
 800f834:	68a0      	ldr	r0, [r4, #8]
 800f836:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800f838:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800f83a:	f04f 0800 	mov.w	r8, #0
 800f83e:	f8c4 800c 	str.w	r8, [r4, #12]
 800f842:	f8c5 800c 	str.w	r8, [r5, #12]
 800f846:	b128      	cbz	r0, 800f854 <rcl_wait_set_fini+0x74>
 800f848:	47b8      	blx	r7
 800f84a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f84c:	f8c4 8008 	str.w	r8, [r4, #8]
 800f850:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800f852:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800f854:	6968      	ldr	r0, [r5, #20]
 800f856:	f04f 0800 	mov.w	r8, #0
 800f85a:	f8c5 8010 	str.w	r8, [r5, #16]
 800f85e:	b128      	cbz	r0, 800f86c <rcl_wait_set_fini+0x8c>
 800f860:	47b8      	blx	r7
 800f862:	f8c5 8014 	str.w	r8, [r5, #20]
 800f866:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f868:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800f86a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800f86c:	6920      	ldr	r0, [r4, #16]
 800f86e:	f04f 0800 	mov.w	r8, #0
 800f872:	f8c4 8014 	str.w	r8, [r4, #20]
 800f876:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 800f87a:	b128      	cbz	r0, 800f888 <rcl_wait_set_fini+0xa8>
 800f87c:	47b8      	blx	r7
 800f87e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f880:	f8c4 8010 	str.w	r8, [r4, #16]
 800f884:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 800f886:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800f888:	69a0      	ldr	r0, [r4, #24]
 800f88a:	f04f 0800 	mov.w	r8, #0
 800f88e:	f8c4 801c 	str.w	r8, [r4, #28]
 800f892:	f8c5 8018 	str.w	r8, [r5, #24]
 800f896:	b128      	cbz	r0, 800f8a4 <rcl_wait_set_fini+0xc4>
 800f898:	9101      	str	r1, [sp, #4]
 800f89a:	47b8      	blx	r7
 800f89c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f89e:	9901      	ldr	r1, [sp, #4]
 800f8a0:	f8c4 8018 	str.w	r8, [r4, #24]
 800f8a4:	6a28      	ldr	r0, [r5, #32]
 800f8a6:	b120      	cbz	r0, 800f8b2 <rcl_wait_set_fini+0xd2>
 800f8a8:	47b8      	blx	r7
 800f8aa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	e9c5 3307 	strd	r3, r3, [r5, #28]
 800f8b2:	6a20      	ldr	r0, [r4, #32]
 800f8b4:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800f8b8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800f8ba:	2700      	movs	r7, #0
 800f8bc:	6267      	str	r7, [r4, #36]	@ 0x24
 800f8be:	626f      	str	r7, [r5, #36]	@ 0x24
 800f8c0:	b120      	cbz	r0, 800f8cc <rcl_wait_set_fini+0xec>
 800f8c2:	9101      	str	r1, [sp, #4]
 800f8c4:	47c0      	blx	r8
 800f8c6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f8c8:	9901      	ldr	r1, [sp, #4]
 800f8ca:	6227      	str	r7, [r4, #32]
 800f8cc:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800f8ce:	b120      	cbz	r0, 800f8da <rcl_wait_set_fini+0xfa>
 800f8d0:	47c0      	blx	r8
 800f8d2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 800f8da:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800f8dc:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 800f8e0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800f8e2:	2700      	movs	r7, #0
 800f8e4:	62e7      	str	r7, [r4, #44]	@ 0x2c
 800f8e6:	632f      	str	r7, [r5, #48]	@ 0x30
 800f8e8:	b120      	cbz	r0, 800f8f4 <rcl_wait_set_fini+0x114>
 800f8ea:	9101      	str	r1, [sp, #4]
 800f8ec:	47c0      	blx	r8
 800f8ee:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f8f0:	9901      	ldr	r1, [sp, #4]
 800f8f2:	62a7      	str	r7, [r4, #40]	@ 0x28
 800f8f4:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 800f8f6:	b120      	cbz	r0, 800f902 <rcl_wait_set_fini+0x122>
 800f8f8:	47c0      	blx	r8
 800f8fa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 800f902:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800f904:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 800f906:	4628      	mov	r0, r5
 800f908:	4798      	blx	r3
 800f90a:	2300      	movs	r3, #0
 800f90c:	6323      	str	r3, [r4, #48]	@ 0x30
 800f90e:	4630      	mov	r0, r6
 800f910:	b002      	add	sp, #8
 800f912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f916:	260b      	movs	r6, #11
 800f918:	4630      	mov	r0, r6
 800f91a:	b002      	add	sp, #8
 800f91c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f920 <rcl_wait_set_add_subscription>:
 800f920:	b318      	cbz	r0, 800f96a <rcl_wait_set_add_subscription+0x4a>
 800f922:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f924:	b570      	push	{r4, r5, r6, lr}
 800f926:	4604      	mov	r4, r0
 800f928:	b30b      	cbz	r3, 800f96e <rcl_wait_set_add_subscription+0x4e>
 800f92a:	b319      	cbz	r1, 800f974 <rcl_wait_set_add_subscription+0x54>
 800f92c:	681d      	ldr	r5, [r3, #0]
 800f92e:	6840      	ldr	r0, [r0, #4]
 800f930:	4285      	cmp	r5, r0
 800f932:	d217      	bcs.n	800f964 <rcl_wait_set_add_subscription+0x44>
 800f934:	6820      	ldr	r0, [r4, #0]
 800f936:	1c6e      	adds	r6, r5, #1
 800f938:	601e      	str	r6, [r3, #0]
 800f93a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800f93e:	b102      	cbz	r2, 800f942 <rcl_wait_set_add_subscription+0x22>
 800f940:	6015      	str	r5, [r2, #0]
 800f942:	4608      	mov	r0, r1
 800f944:	f7ff fd14 	bl	800f370 <rcl_subscription_get_rmw_handle>
 800f948:	b150      	cbz	r0, 800f960 <rcl_wait_set_add_subscription+0x40>
 800f94a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f94c:	6842      	ldr	r2, [r0, #4]
 800f94e:	689b      	ldr	r3, [r3, #8]
 800f950:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f954:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800f956:	6853      	ldr	r3, [r2, #4]
 800f958:	3301      	adds	r3, #1
 800f95a:	2000      	movs	r0, #0
 800f95c:	6053      	str	r3, [r2, #4]
 800f95e:	bd70      	pop	{r4, r5, r6, pc}
 800f960:	2001      	movs	r0, #1
 800f962:	bd70      	pop	{r4, r5, r6, pc}
 800f964:	f240 3086 	movw	r0, #902	@ 0x386
 800f968:	bd70      	pop	{r4, r5, r6, pc}
 800f96a:	200b      	movs	r0, #11
 800f96c:	4770      	bx	lr
 800f96e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800f972:	bd70      	pop	{r4, r5, r6, pc}
 800f974:	200b      	movs	r0, #11
 800f976:	bd70      	pop	{r4, r5, r6, pc}

0800f978 <rcl_wait_set_clear>:
 800f978:	2800      	cmp	r0, #0
 800f97a:	d073      	beq.n	800fa64 <rcl_wait_set_clear+0xec>
 800f97c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f97e:	b510      	push	{r4, lr}
 800f980:	4604      	mov	r4, r0
 800f982:	2b00      	cmp	r3, #0
 800f984:	d070      	beq.n	800fa68 <rcl_wait_set_clear+0xf0>
 800f986:	6800      	ldr	r0, [r0, #0]
 800f988:	b138      	cbz	r0, 800f99a <rcl_wait_set_clear+0x22>
 800f98a:	6862      	ldr	r2, [r4, #4]
 800f98c:	2100      	movs	r1, #0
 800f98e:	0092      	lsls	r2, r2, #2
 800f990:	f004 feba 	bl	8014708 <memset>
 800f994:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f996:	2200      	movs	r2, #0
 800f998:	601a      	str	r2, [r3, #0]
 800f99a:	68a0      	ldr	r0, [r4, #8]
 800f99c:	b138      	cbz	r0, 800f9ae <rcl_wait_set_clear+0x36>
 800f99e:	68e2      	ldr	r2, [r4, #12]
 800f9a0:	2100      	movs	r1, #0
 800f9a2:	0092      	lsls	r2, r2, #2
 800f9a4:	f004 feb0 	bl	8014708 <memset>
 800f9a8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	60da      	str	r2, [r3, #12]
 800f9ae:	69a0      	ldr	r0, [r4, #24]
 800f9b0:	b138      	cbz	r0, 800f9c2 <rcl_wait_set_clear+0x4a>
 800f9b2:	69e2      	ldr	r2, [r4, #28]
 800f9b4:	2100      	movs	r1, #0
 800f9b6:	0092      	lsls	r2, r2, #2
 800f9b8:	f004 fea6 	bl	8014708 <memset>
 800f9bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f9be:	2200      	movs	r2, #0
 800f9c0:	619a      	str	r2, [r3, #24]
 800f9c2:	6a20      	ldr	r0, [r4, #32]
 800f9c4:	b138      	cbz	r0, 800f9d6 <rcl_wait_set_clear+0x5e>
 800f9c6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800f9c8:	2100      	movs	r1, #0
 800f9ca:	0092      	lsls	r2, r2, #2
 800f9cc:	f004 fe9c 	bl	8014708 <memset>
 800f9d0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	625a      	str	r2, [r3, #36]	@ 0x24
 800f9d6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800f9d8:	b138      	cbz	r0, 800f9ea <rcl_wait_set_clear+0x72>
 800f9da:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f9dc:	2100      	movs	r1, #0
 800f9de:	0092      	lsls	r2, r2, #2
 800f9e0:	f004 fe92 	bl	8014708 <memset>
 800f9e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	631a      	str	r2, [r3, #48]	@ 0x30
 800f9ea:	6920      	ldr	r0, [r4, #16]
 800f9ec:	b138      	cbz	r0, 800f9fe <rcl_wait_set_clear+0x86>
 800f9ee:	6962      	ldr	r2, [r4, #20]
 800f9f0:	2100      	movs	r1, #0
 800f9f2:	0092      	lsls	r2, r2, #2
 800f9f4:	f004 fe88 	bl	8014708 <memset>
 800f9f8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	641a      	str	r2, [r3, #64]	@ 0x40
 800f9fe:	6898      	ldr	r0, [r3, #8]
 800fa00:	b138      	cbz	r0, 800fa12 <rcl_wait_set_clear+0x9a>
 800fa02:	685a      	ldr	r2, [r3, #4]
 800fa04:	2100      	movs	r1, #0
 800fa06:	0092      	lsls	r2, r2, #2
 800fa08:	f004 fe7e 	bl	8014708 <memset>
 800fa0c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fa0e:	2200      	movs	r2, #0
 800fa10:	605a      	str	r2, [r3, #4]
 800fa12:	6958      	ldr	r0, [r3, #20]
 800fa14:	b138      	cbz	r0, 800fa26 <rcl_wait_set_clear+0xae>
 800fa16:	691a      	ldr	r2, [r3, #16]
 800fa18:	2100      	movs	r1, #0
 800fa1a:	0092      	lsls	r2, r2, #2
 800fa1c:	f004 fe74 	bl	8014708 <memset>
 800fa20:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fa22:	2200      	movs	r2, #0
 800fa24:	611a      	str	r2, [r3, #16]
 800fa26:	6a18      	ldr	r0, [r3, #32]
 800fa28:	b138      	cbz	r0, 800fa3a <rcl_wait_set_clear+0xc2>
 800fa2a:	69da      	ldr	r2, [r3, #28]
 800fa2c:	2100      	movs	r1, #0
 800fa2e:	0092      	lsls	r2, r2, #2
 800fa30:	f004 fe6a 	bl	8014708 <memset>
 800fa34:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fa36:	2200      	movs	r2, #0
 800fa38:	61da      	str	r2, [r3, #28]
 800fa3a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800fa3c:	b138      	cbz	r0, 800fa4e <rcl_wait_set_clear+0xd6>
 800fa3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800fa40:	2100      	movs	r1, #0
 800fa42:	0092      	lsls	r2, r2, #2
 800fa44:	f004 fe60 	bl	8014708 <memset>
 800fa48:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	629a      	str	r2, [r3, #40]	@ 0x28
 800fa4e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800fa50:	b138      	cbz	r0, 800fa62 <rcl_wait_set_clear+0xea>
 800fa52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fa54:	2100      	movs	r1, #0
 800fa56:	0092      	lsls	r2, r2, #2
 800fa58:	f004 fe56 	bl	8014708 <memset>
 800fa5c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fa5e:	2000      	movs	r0, #0
 800fa60:	6358      	str	r0, [r3, #52]	@ 0x34
 800fa62:	bd10      	pop	{r4, pc}
 800fa64:	200b      	movs	r0, #11
 800fa66:	4770      	bx	lr
 800fa68:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800fa6c:	bd10      	pop	{r4, pc}
 800fa6e:	bf00      	nop

0800fa70 <rcl_wait_set_resize>:
 800fa70:	2800      	cmp	r0, #0
 800fa72:	f000 8185 	beq.w	800fd80 <rcl_wait_set_resize+0x310>
 800fa76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa7a:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800fa7c:	b083      	sub	sp, #12
 800fa7e:	4605      	mov	r5, r0
 800fa80:	2c00      	cmp	r4, #0
 800fa82:	f000 817f 	beq.w	800fd84 <rcl_wait_set_resize+0x314>
 800fa86:	f04f 0900 	mov.w	r9, #0
 800fa8a:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 800fa8e:	461f      	mov	r7, r3
 800fa90:	4688      	mov	r8, r1
 800fa92:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 800fa96:	4616      	mov	r6, r2
 800fa98:	f8c0 9004 	str.w	r9, [r0, #4]
 800fa9c:	f8c4 9000 	str.w	r9, [r4]
 800faa0:	2900      	cmp	r1, #0
 800faa2:	f000 80bd 	beq.w	800fc20 <rcl_wait_set_resize+0x1b0>
 800faa6:	008c      	lsls	r4, r1, #2
 800faa8:	6800      	ldr	r0, [r0, #0]
 800faaa:	9301      	str	r3, [sp, #4]
 800faac:	4652      	mov	r2, sl
 800faae:	4621      	mov	r1, r4
 800fab0:	4798      	blx	r3
 800fab2:	9b01      	ldr	r3, [sp, #4]
 800fab4:	6028      	str	r0, [r5, #0]
 800fab6:	2800      	cmp	r0, #0
 800fab8:	f000 80cb 	beq.w	800fc52 <rcl_wait_set_resize+0x1e2>
 800fabc:	4622      	mov	r2, r4
 800fabe:	4649      	mov	r1, r9
 800fac0:	9301      	str	r3, [sp, #4]
 800fac2:	f004 fe21 	bl	8014708 <memset>
 800fac6:	f8c5 8004 	str.w	r8, [r5, #4]
 800faca:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 800face:	9b01      	ldr	r3, [sp, #4]
 800fad0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800fad4:	f8c8 9004 	str.w	r9, [r8, #4]
 800fad8:	4652      	mov	r2, sl
 800fada:	4621      	mov	r1, r4
 800fadc:	4798      	blx	r3
 800fade:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800fae0:	f8c8 0008 	str.w	r0, [r8, #8]
 800fae4:	689b      	ldr	r3, [r3, #8]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	f000 80ac 	beq.w	800fc44 <rcl_wait_set_resize+0x1d4>
 800faec:	4622      	mov	r2, r4
 800faee:	4649      	mov	r1, r9
 800faf0:	4618      	mov	r0, r3
 800faf2:	f004 fe09 	bl	8014708 <memset>
 800faf6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800faf8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800fafc:	f04f 0800 	mov.w	r8, #0
 800fb00:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 800fb04:	f8c5 800c 	str.w	r8, [r5, #12]
 800fb08:	f8c4 800c 	str.w	r8, [r4, #12]
 800fb0c:	2e00      	cmp	r6, #0
 800fb0e:	f040 80a4 	bne.w	800fc5a <rcl_wait_set_resize+0x1ea>
 800fb12:	68a8      	ldr	r0, [r5, #8]
 800fb14:	b128      	cbz	r0, 800fb22 <rcl_wait_set_resize+0xb2>
 800fb16:	4649      	mov	r1, r9
 800fb18:	4790      	blx	r2
 800fb1a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fb1c:	60ae      	str	r6, [r5, #8]
 800fb1e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800fb22:	f04f 0800 	mov.w	r8, #0
 800fb26:	19f6      	adds	r6, r6, r7
 800fb28:	f8c4 8010 	str.w	r8, [r4, #16]
 800fb2c:	f040 80ac 	bne.w	800fc88 <rcl_wait_set_resize+0x218>
 800fb30:	6960      	ldr	r0, [r4, #20]
 800fb32:	b130      	cbz	r0, 800fb42 <rcl_wait_set_resize+0xd2>
 800fb34:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800fb36:	4649      	mov	r1, r9
 800fb38:	4798      	blx	r3
 800fb3a:	6166      	str	r6, [r4, #20]
 800fb3c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fb3e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800fb42:	2600      	movs	r6, #0
 800fb44:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 800fb48:	616e      	str	r6, [r5, #20]
 800fb4a:	6426      	str	r6, [r4, #64]	@ 0x40
 800fb4c:	2f00      	cmp	r7, #0
 800fb4e:	f040 80ad 	bne.w	800fcac <rcl_wait_set_resize+0x23c>
 800fb52:	6928      	ldr	r0, [r5, #16]
 800fb54:	b138      	cbz	r0, 800fb66 <rcl_wait_set_resize+0xf6>
 800fb56:	4649      	mov	r1, r9
 800fb58:	47d0      	blx	sl
 800fb5a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fb5c:	612f      	str	r7, [r5, #16]
 800fb5e:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 800fb62:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800fb66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fb68:	2600      	movs	r6, #0
 800fb6a:	61ee      	str	r6, [r5, #28]
 800fb6c:	61a6      	str	r6, [r4, #24]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	f040 80af 	bne.w	800fcd2 <rcl_wait_set_resize+0x262>
 800fb74:	69a8      	ldr	r0, [r5, #24]
 800fb76:	b120      	cbz	r0, 800fb82 <rcl_wait_set_resize+0x112>
 800fb78:	4649      	mov	r1, r9
 800fb7a:	47d0      	blx	sl
 800fb7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fb7e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fb80:	61ab      	str	r3, [r5, #24]
 800fb82:	6a20      	ldr	r0, [r4, #32]
 800fb84:	b128      	cbz	r0, 800fb92 <rcl_wait_set_resize+0x122>
 800fb86:	4649      	mov	r1, r9
 800fb88:	47d0      	blx	sl
 800fb8a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800fb92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fb94:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 800fb96:	2600      	movs	r6, #0
 800fb98:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 800fb9c:	626e      	str	r6, [r5, #36]	@ 0x24
 800fb9e:	6266      	str	r6, [r4, #36]	@ 0x24
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	f000 80b6 	beq.w	800fd12 <rcl_wait_set_resize+0x2a2>
 800fba6:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800fbaa:	6a28      	ldr	r0, [r5, #32]
 800fbac:	463a      	mov	r2, r7
 800fbae:	4651      	mov	r1, sl
 800fbb0:	47c8      	blx	r9
 800fbb2:	6228      	str	r0, [r5, #32]
 800fbb4:	2800      	cmp	r0, #0
 800fbb6:	d04c      	beq.n	800fc52 <rcl_wait_set_resize+0x1e2>
 800fbb8:	4652      	mov	r2, sl
 800fbba:	4631      	mov	r1, r6
 800fbbc:	f004 fda4 	bl	8014708 <memset>
 800fbc0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fbc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fbc4:	626b      	str	r3, [r5, #36]	@ 0x24
 800fbc6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800fbc8:	62a6      	str	r6, [r4, #40]	@ 0x28
 800fbca:	463a      	mov	r2, r7
 800fbcc:	4651      	mov	r1, sl
 800fbce:	47c8      	blx	r9
 800fbd0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800fbd2:	62e0      	str	r0, [r4, #44]	@ 0x2c
 800fbd4:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 800fbd6:	2c00      	cmp	r4, #0
 800fbd8:	f000 80f0 	beq.w	800fdbc <rcl_wait_set_resize+0x34c>
 800fbdc:	4620      	mov	r0, r4
 800fbde:	4652      	mov	r2, sl
 800fbe0:	4631      	mov	r1, r6
 800fbe2:	f004 fd91 	bl	8014708 <memset>
 800fbe6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fbe8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fbea:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 800fbec:	2600      	movs	r6, #0
 800fbee:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 800fbf2:	62ee      	str	r6, [r5, #44]	@ 0x2c
 800fbf4:	6326      	str	r6, [r4, #48]	@ 0x30
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	f040 809d 	bne.w	800fd36 <rcl_wait_set_resize+0x2c6>
 800fbfc:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800fbfe:	b120      	cbz	r0, 800fc0a <rcl_wait_set_resize+0x19a>
 800fc00:	4639      	mov	r1, r7
 800fc02:	47c0      	blx	r8
 800fc04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc06:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fc08:	62ab      	str	r3, [r5, #40]	@ 0x28
 800fc0a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800fc0c:	b310      	cbz	r0, 800fc54 <rcl_wait_set_resize+0x1e4>
 800fc0e:	4639      	mov	r1, r7
 800fc10:	47c0      	blx	r8
 800fc12:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800fc14:	2000      	movs	r0, #0
 800fc16:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 800fc1a:	b003      	add	sp, #12
 800fc1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc20:	6800      	ldr	r0, [r0, #0]
 800fc22:	b120      	cbz	r0, 800fc2e <rcl_wait_set_resize+0x1be>
 800fc24:	4651      	mov	r1, sl
 800fc26:	47d8      	blx	fp
 800fc28:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fc2a:	f8c5 8000 	str.w	r8, [r5]
 800fc2e:	68a0      	ldr	r0, [r4, #8]
 800fc30:	2800      	cmp	r0, #0
 800fc32:	f43f af61 	beq.w	800faf8 <rcl_wait_set_resize+0x88>
 800fc36:	4651      	mov	r1, sl
 800fc38:	47d8      	blx	fp
 800fc3a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800fc42:	e759      	b.n	800faf8 <rcl_wait_set_resize+0x88>
 800fc44:	6828      	ldr	r0, [r5, #0]
 800fc46:	9301      	str	r3, [sp, #4]
 800fc48:	4651      	mov	r1, sl
 800fc4a:	47d8      	blx	fp
 800fc4c:	9b01      	ldr	r3, [sp, #4]
 800fc4e:	e9c5 3300 	strd	r3, r3, [r5]
 800fc52:	200a      	movs	r0, #10
 800fc54:	b003      	add	sp, #12
 800fc56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc5a:	00b4      	lsls	r4, r6, #2
 800fc5c:	68a8      	ldr	r0, [r5, #8]
 800fc5e:	464a      	mov	r2, r9
 800fc60:	4621      	mov	r1, r4
 800fc62:	4798      	blx	r3
 800fc64:	60a8      	str	r0, [r5, #8]
 800fc66:	2800      	cmp	r0, #0
 800fc68:	d0f3      	beq.n	800fc52 <rcl_wait_set_resize+0x1e2>
 800fc6a:	4622      	mov	r2, r4
 800fc6c:	4641      	mov	r1, r8
 800fc6e:	f004 fd4b 	bl	8014708 <memset>
 800fc72:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fc74:	60ee      	str	r6, [r5, #12]
 800fc76:	f04f 0800 	mov.w	r8, #0
 800fc7a:	19f6      	adds	r6, r6, r7
 800fc7c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800fc80:	f8c4 8010 	str.w	r8, [r4, #16]
 800fc84:	f43f af54 	beq.w	800fb30 <rcl_wait_set_resize+0xc0>
 800fc88:	00b6      	lsls	r6, r6, #2
 800fc8a:	464a      	mov	r2, r9
 800fc8c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800fc8e:	6960      	ldr	r0, [r4, #20]
 800fc90:	4631      	mov	r1, r6
 800fc92:	4798      	blx	r3
 800fc94:	4681      	mov	r9, r0
 800fc96:	6160      	str	r0, [r4, #20]
 800fc98:	2800      	cmp	r0, #0
 800fc9a:	d076      	beq.n	800fd8a <rcl_wait_set_resize+0x31a>
 800fc9c:	4632      	mov	r2, r6
 800fc9e:	4641      	mov	r1, r8
 800fca0:	f004 fd32 	bl	8014708 <memset>
 800fca4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fca6:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800fcaa:	e74a      	b.n	800fb42 <rcl_wait_set_resize+0xd2>
 800fcac:	00bc      	lsls	r4, r7, #2
 800fcae:	6928      	ldr	r0, [r5, #16]
 800fcb0:	464a      	mov	r2, r9
 800fcb2:	4621      	mov	r1, r4
 800fcb4:	47c0      	blx	r8
 800fcb6:	6128      	str	r0, [r5, #16]
 800fcb8:	2800      	cmp	r0, #0
 800fcba:	d0ca      	beq.n	800fc52 <rcl_wait_set_resize+0x1e2>
 800fcbc:	4622      	mov	r2, r4
 800fcbe:	4631      	mov	r1, r6
 800fcc0:	f004 fd22 	bl	8014708 <memset>
 800fcc4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fcc6:	616f      	str	r7, [r5, #20]
 800fcc8:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 800fccc:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 800fcd0:	e749      	b.n	800fb66 <rcl_wait_set_resize+0xf6>
 800fcd2:	009c      	lsls	r4, r3, #2
 800fcd4:	69a8      	ldr	r0, [r5, #24]
 800fcd6:	464a      	mov	r2, r9
 800fcd8:	4621      	mov	r1, r4
 800fcda:	47c0      	blx	r8
 800fcdc:	61a8      	str	r0, [r5, #24]
 800fcde:	2800      	cmp	r0, #0
 800fce0:	d0b7      	beq.n	800fc52 <rcl_wait_set_resize+0x1e2>
 800fce2:	4622      	mov	r2, r4
 800fce4:	4631      	mov	r1, r6
 800fce6:	f004 fd0f 	bl	8014708 <memset>
 800fcea:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 800fcec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fcee:	61eb      	str	r3, [r5, #28]
 800fcf0:	6a38      	ldr	r0, [r7, #32]
 800fcf2:	61fe      	str	r6, [r7, #28]
 800fcf4:	464a      	mov	r2, r9
 800fcf6:	4621      	mov	r1, r4
 800fcf8:	47c0      	blx	r8
 800fcfa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800fcfc:	6238      	str	r0, [r7, #32]
 800fcfe:	6a1f      	ldr	r7, [r3, #32]
 800fd00:	2f00      	cmp	r7, #0
 800fd02:	d054      	beq.n	800fdae <rcl_wait_set_resize+0x33e>
 800fd04:	4622      	mov	r2, r4
 800fd06:	4631      	mov	r1, r6
 800fd08:	4638      	mov	r0, r7
 800fd0a:	f004 fcfd 	bl	8014708 <memset>
 800fd0e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fd10:	e73f      	b.n	800fb92 <rcl_wait_set_resize+0x122>
 800fd12:	6a28      	ldr	r0, [r5, #32]
 800fd14:	b120      	cbz	r0, 800fd20 <rcl_wait_set_resize+0x2b0>
 800fd16:	4639      	mov	r1, r7
 800fd18:	47c0      	blx	r8
 800fd1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fd1c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fd1e:	622b      	str	r3, [r5, #32]
 800fd20:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800fd22:	2800      	cmp	r0, #0
 800fd24:	f43f af60 	beq.w	800fbe8 <rcl_wait_set_resize+0x178>
 800fd28:	4639      	mov	r1, r7
 800fd2a:	47c0      	blx	r8
 800fd2c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800fd2e:	2300      	movs	r3, #0
 800fd30:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 800fd34:	e758      	b.n	800fbe8 <rcl_wait_set_resize+0x178>
 800fd36:	009c      	lsls	r4, r3, #2
 800fd38:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800fd3a:	463a      	mov	r2, r7
 800fd3c:	4621      	mov	r1, r4
 800fd3e:	47c8      	blx	r9
 800fd40:	62a8      	str	r0, [r5, #40]	@ 0x28
 800fd42:	2800      	cmp	r0, #0
 800fd44:	d085      	beq.n	800fc52 <rcl_wait_set_resize+0x1e2>
 800fd46:	4622      	mov	r2, r4
 800fd48:	4631      	mov	r1, r6
 800fd4a:	f004 fcdd 	bl	8014708 <memset>
 800fd4e:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 800fd52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fd54:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800fd56:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 800fd5a:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 800fd5e:	463a      	mov	r2, r7
 800fd60:	4621      	mov	r1, r4
 800fd62:	47c8      	blx	r9
 800fd64:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800fd66:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 800fd6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd6c:	b36b      	cbz	r3, 800fdca <rcl_wait_set_resize+0x35a>
 800fd6e:	4622      	mov	r2, r4
 800fd70:	4631      	mov	r1, r6
 800fd72:	4618      	mov	r0, r3
 800fd74:	f004 fcc8 	bl	8014708 <memset>
 800fd78:	4630      	mov	r0, r6
 800fd7a:	b003      	add	sp, #12
 800fd7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd80:	200b      	movs	r0, #11
 800fd82:	4770      	bx	lr
 800fd84:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800fd88:	e764      	b.n	800fc54 <rcl_wait_set_resize+0x1e4>
 800fd8a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800fd8c:	68a8      	ldr	r0, [r5, #8]
 800fd8e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800fd90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fd92:	4798      	blx	r3
 800fd94:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800fd96:	6928      	ldr	r0, [r5, #16]
 800fd98:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fd9a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800fd9c:	f8c5 900c 	str.w	r9, [r5, #12]
 800fda0:	f8c5 9008 	str.w	r9, [r5, #8]
 800fda4:	4790      	blx	r2
 800fda6:	e9c5 9904 	strd	r9, r9, [r5, #16]
 800fdaa:	200a      	movs	r0, #10
 800fdac:	e752      	b.n	800fc54 <rcl_wait_set_resize+0x1e4>
 800fdae:	69a8      	ldr	r0, [r5, #24]
 800fdb0:	4649      	mov	r1, r9
 800fdb2:	47d0      	blx	sl
 800fdb4:	e9c5 7706 	strd	r7, r7, [r5, #24]
 800fdb8:	200a      	movs	r0, #10
 800fdba:	e74b      	b.n	800fc54 <rcl_wait_set_resize+0x1e4>
 800fdbc:	6a28      	ldr	r0, [r5, #32]
 800fdbe:	4639      	mov	r1, r7
 800fdc0:	47c0      	blx	r8
 800fdc2:	e9c5 4408 	strd	r4, r4, [r5, #32]
 800fdc6:	200a      	movs	r0, #10
 800fdc8:	e744      	b.n	800fc54 <rcl_wait_set_resize+0x1e4>
 800fdca:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800fdcc:	9301      	str	r3, [sp, #4]
 800fdce:	4639      	mov	r1, r7
 800fdd0:	47c0      	blx	r8
 800fdd2:	9b01      	ldr	r3, [sp, #4]
 800fdd4:	200a      	movs	r0, #10
 800fdd6:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 800fdda:	e73b      	b.n	800fc54 <rcl_wait_set_resize+0x1e4>

0800fddc <rcl_wait_set_init>:
 800fddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fde0:	b084      	sub	sp, #16
 800fde2:	4604      	mov	r4, r0
 800fde4:	a810      	add	r0, sp, #64	@ 0x40
 800fde6:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 800fdea:	460f      	mov	r7, r1
 800fdec:	4690      	mov	r8, r2
 800fdee:	4699      	mov	r9, r3
 800fdf0:	f7fa fd08 	bl	800a804 <rcutils_allocator_is_valid>
 800fdf4:	2800      	cmp	r0, #0
 800fdf6:	d06b      	beq.n	800fed0 <rcl_wait_set_init+0xf4>
 800fdf8:	2c00      	cmp	r4, #0
 800fdfa:	d069      	beq.n	800fed0 <rcl_wait_set_init+0xf4>
 800fdfc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800fdfe:	b125      	cbz	r5, 800fe0a <rcl_wait_set_init+0x2e>
 800fe00:	2564      	movs	r5, #100	@ 0x64
 800fe02:	4628      	mov	r0, r5
 800fe04:	b004      	add	sp, #16
 800fe06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe0a:	f1ba 0f00 	cmp.w	sl, #0
 800fe0e:	d05f      	beq.n	800fed0 <rcl_wait_set_init+0xf4>
 800fe10:	4650      	mov	r0, sl
 800fe12:	f7fe fde9 	bl	800e9e8 <rcl_context_is_valid>
 800fe16:	2800      	cmp	r0, #0
 800fe18:	d067      	beq.n	800feea <rcl_wait_set_init+0x10e>
 800fe1a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fe1c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800fe1e:	205c      	movs	r0, #92	@ 0x5c
 800fe20:	4798      	blx	r3
 800fe22:	6320      	str	r0, [r4, #48]	@ 0x30
 800fe24:	2800      	cmp	r0, #0
 800fe26:	d062      	beq.n	800feee <rcl_wait_set_init+0x112>
 800fe28:	4629      	mov	r1, r5
 800fe2a:	225c      	movs	r2, #92	@ 0x5c
 800fe2c:	f004 fc6c 	bl	8014708 <memset>
 800fe30:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 800fe34:	eb03 0e02 	add.w	lr, r3, r2
 800fe38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fe3a:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800fe3c:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 800fe40:	449e      	add	lr, r3
 800fe42:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fe46:	e9c6 5501 	strd	r5, r5, [r6, #4]
 800fe4a:	e9c6 5504 	strd	r5, r5, [r6, #16]
 800fe4e:	e9c6 5507 	strd	r5, r5, [r6, #28]
 800fe52:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 800fe56:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 800fe5a:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 800fe5e:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 800fe62:	f8da a000 	ldr.w	sl, [sl]
 800fe66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fe68:	44c6      	add	lr, r8
 800fe6a:	f8dc 3000 	ldr.w	r3, [ip]
 800fe6e:	602b      	str	r3, [r5, #0]
 800fe70:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 800fe74:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 800fe78:	f001 ffb0 	bl	8011ddc <rmw_create_wait_set>
 800fe7c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fe7e:	63f0      	str	r0, [r6, #60]	@ 0x3c
 800fe80:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800fe82:	b350      	cbz	r0, 800feda <rcl_wait_set_init+0xfe>
 800fe84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fe86:	9302      	str	r3, [sp, #8]
 800fe88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fe8a:	9301      	str	r3, [sp, #4]
 800fe8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fe8e:	9300      	str	r3, [sp, #0]
 800fe90:	4642      	mov	r2, r8
 800fe92:	464b      	mov	r3, r9
 800fe94:	4639      	mov	r1, r7
 800fe96:	4620      	mov	r0, r4
 800fe98:	f7ff fdea 	bl	800fa70 <rcl_wait_set_resize>
 800fe9c:	4605      	mov	r5, r0
 800fe9e:	2800      	cmp	r0, #0
 800fea0:	d0af      	beq.n	800fe02 <rcl_wait_set_init+0x26>
 800fea2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800fea4:	bb2b      	cbnz	r3, 800fef2 <rcl_wait_set_init+0x116>
 800fea6:	2600      	movs	r6, #0
 800fea8:	e9cd 6601 	strd	r6, r6, [sp, #4]
 800feac:	9600      	str	r6, [sp, #0]
 800feae:	4633      	mov	r3, r6
 800feb0:	4632      	mov	r2, r6
 800feb2:	4631      	mov	r1, r6
 800feb4:	4620      	mov	r0, r4
 800feb6:	f7ff fddb 	bl	800fa70 <rcl_wait_set_resize>
 800feba:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800febc:	2800      	cmp	r0, #0
 800febe:	d0a0      	beq.n	800fe02 <rcl_wait_set_init+0x26>
 800fec0:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800fec2:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 800fec4:	4798      	blx	r3
 800fec6:	4628      	mov	r0, r5
 800fec8:	6326      	str	r6, [r4, #48]	@ 0x30
 800feca:	b004      	add	sp, #16
 800fecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fed0:	250b      	movs	r5, #11
 800fed2:	4628      	mov	r0, r5
 800fed4:	b004      	add	sp, #16
 800fed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800feda:	2501      	movs	r5, #1
 800fedc:	f001 ff88 	bl	8011df0 <rmw_destroy_wait_set>
 800fee0:	2800      	cmp	r0, #0
 800fee2:	bf18      	it	ne
 800fee4:	f44f 7561 	movne.w	r5, #900	@ 0x384
 800fee8:	e7dd      	b.n	800fea6 <rcl_wait_set_init+0xca>
 800feea:	2565      	movs	r5, #101	@ 0x65
 800feec:	e789      	b.n	800fe02 <rcl_wait_set_init+0x26>
 800feee:	250a      	movs	r5, #10
 800fef0:	e787      	b.n	800fe02 <rcl_wait_set_init+0x26>
 800fef2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800fef4:	e7f2      	b.n	800fedc <rcl_wait_set_init+0x100>
 800fef6:	bf00      	nop

0800fef8 <rcl_wait_set_add_guard_condition>:
 800fef8:	b318      	cbz	r0, 800ff42 <rcl_wait_set_add_guard_condition+0x4a>
 800fefa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800fefc:	b570      	push	{r4, r5, r6, lr}
 800fefe:	4604      	mov	r4, r0
 800ff00:	b30b      	cbz	r3, 800ff46 <rcl_wait_set_add_guard_condition+0x4e>
 800ff02:	b319      	cbz	r1, 800ff4c <rcl_wait_set_add_guard_condition+0x54>
 800ff04:	68dd      	ldr	r5, [r3, #12]
 800ff06:	68c0      	ldr	r0, [r0, #12]
 800ff08:	4285      	cmp	r5, r0
 800ff0a:	d217      	bcs.n	800ff3c <rcl_wait_set_add_guard_condition+0x44>
 800ff0c:	68a0      	ldr	r0, [r4, #8]
 800ff0e:	1c6e      	adds	r6, r5, #1
 800ff10:	60de      	str	r6, [r3, #12]
 800ff12:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800ff16:	b102      	cbz	r2, 800ff1a <rcl_wait_set_add_guard_condition+0x22>
 800ff18:	6015      	str	r5, [r2, #0]
 800ff1a:	4608      	mov	r0, r1
 800ff1c:	f003 ffba 	bl	8013e94 <rcl_guard_condition_get_rmw_handle>
 800ff20:	b150      	cbz	r0, 800ff38 <rcl_wait_set_add_guard_condition+0x40>
 800ff22:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ff24:	6842      	ldr	r2, [r0, #4]
 800ff26:	695b      	ldr	r3, [r3, #20]
 800ff28:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ff2c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800ff2e:	6913      	ldr	r3, [r2, #16]
 800ff30:	3301      	adds	r3, #1
 800ff32:	2000      	movs	r0, #0
 800ff34:	6113      	str	r3, [r2, #16]
 800ff36:	bd70      	pop	{r4, r5, r6, pc}
 800ff38:	2001      	movs	r0, #1
 800ff3a:	bd70      	pop	{r4, r5, r6, pc}
 800ff3c:	f240 3086 	movw	r0, #902	@ 0x386
 800ff40:	bd70      	pop	{r4, r5, r6, pc}
 800ff42:	200b      	movs	r0, #11
 800ff44:	4770      	bx	lr
 800ff46:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800ff4a:	bd70      	pop	{r4, r5, r6, pc}
 800ff4c:	200b      	movs	r0, #11
 800ff4e:	bd70      	pop	{r4, r5, r6, pc}

0800ff50 <rcl_wait_set_add_timer>:
 800ff50:	b328      	cbz	r0, 800ff9e <rcl_wait_set_add_timer+0x4e>
 800ff52:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ff54:	b570      	push	{r4, r5, r6, lr}
 800ff56:	4604      	mov	r4, r0
 800ff58:	b31b      	cbz	r3, 800ffa2 <rcl_wait_set_add_timer+0x52>
 800ff5a:	b329      	cbz	r1, 800ffa8 <rcl_wait_set_add_timer+0x58>
 800ff5c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800ff5e:	6965      	ldr	r5, [r4, #20]
 800ff60:	42a8      	cmp	r0, r5
 800ff62:	d219      	bcs.n	800ff98 <rcl_wait_set_add_timer+0x48>
 800ff64:	6925      	ldr	r5, [r4, #16]
 800ff66:	1c46      	adds	r6, r0, #1
 800ff68:	641e      	str	r6, [r3, #64]	@ 0x40
 800ff6a:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 800ff6e:	b102      	cbz	r2, 800ff72 <rcl_wait_set_add_timer+0x22>
 800ff70:	6010      	str	r0, [r2, #0]
 800ff72:	4608      	mov	r0, r1
 800ff74:	f7ff fba6 	bl	800f6c4 <rcl_timer_get_guard_condition>
 800ff78:	b168      	cbz	r0, 800ff96 <rcl_wait_set_add_timer+0x46>
 800ff7a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800ff7c:	68e3      	ldr	r3, [r4, #12]
 800ff7e:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 800ff80:	3b01      	subs	r3, #1
 800ff82:	441d      	add	r5, r3
 800ff84:	f003 ff86 	bl	8013e94 <rcl_guard_condition_get_rmw_handle>
 800ff88:	b180      	cbz	r0, 800ffac <rcl_wait_set_add_timer+0x5c>
 800ff8a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ff8c:	6842      	ldr	r2, [r0, #4]
 800ff8e:	695b      	ldr	r3, [r3, #20]
 800ff90:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ff94:	2000      	movs	r0, #0
 800ff96:	bd70      	pop	{r4, r5, r6, pc}
 800ff98:	f240 3086 	movw	r0, #902	@ 0x386
 800ff9c:	bd70      	pop	{r4, r5, r6, pc}
 800ff9e:	200b      	movs	r0, #11
 800ffa0:	4770      	bx	lr
 800ffa2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800ffa6:	bd70      	pop	{r4, r5, r6, pc}
 800ffa8:	200b      	movs	r0, #11
 800ffaa:	bd70      	pop	{r4, r5, r6, pc}
 800ffac:	2001      	movs	r0, #1
 800ffae:	bd70      	pop	{r4, r5, r6, pc}

0800ffb0 <rcl_wait_set_add_client>:
 800ffb0:	b318      	cbz	r0, 800fffa <rcl_wait_set_add_client+0x4a>
 800ffb2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ffb4:	b570      	push	{r4, r5, r6, lr}
 800ffb6:	4604      	mov	r4, r0
 800ffb8:	b30b      	cbz	r3, 800fffe <rcl_wait_set_add_client+0x4e>
 800ffba:	b319      	cbz	r1, 8010004 <rcl_wait_set_add_client+0x54>
 800ffbc:	699d      	ldr	r5, [r3, #24]
 800ffbe:	69c0      	ldr	r0, [r0, #28]
 800ffc0:	4285      	cmp	r5, r0
 800ffc2:	d217      	bcs.n	800fff4 <rcl_wait_set_add_client+0x44>
 800ffc4:	69a0      	ldr	r0, [r4, #24]
 800ffc6:	1c6e      	adds	r6, r5, #1
 800ffc8:	619e      	str	r6, [r3, #24]
 800ffca:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800ffce:	b102      	cbz	r2, 800ffd2 <rcl_wait_set_add_client+0x22>
 800ffd0:	6015      	str	r5, [r2, #0]
 800ffd2:	4608      	mov	r0, r1
 800ffd4:	f7fe fc5a 	bl	800e88c <rcl_client_get_rmw_handle>
 800ffd8:	b150      	cbz	r0, 800fff0 <rcl_wait_set_add_client+0x40>
 800ffda:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ffdc:	6842      	ldr	r2, [r0, #4]
 800ffde:	6a1b      	ldr	r3, [r3, #32]
 800ffe0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ffe4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800ffe6:	69d3      	ldr	r3, [r2, #28]
 800ffe8:	3301      	adds	r3, #1
 800ffea:	2000      	movs	r0, #0
 800ffec:	61d3      	str	r3, [r2, #28]
 800ffee:	bd70      	pop	{r4, r5, r6, pc}
 800fff0:	2001      	movs	r0, #1
 800fff2:	bd70      	pop	{r4, r5, r6, pc}
 800fff4:	f240 3086 	movw	r0, #902	@ 0x386
 800fff8:	bd70      	pop	{r4, r5, r6, pc}
 800fffa:	200b      	movs	r0, #11
 800fffc:	4770      	bx	lr
 800fffe:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010002:	bd70      	pop	{r4, r5, r6, pc}
 8010004:	200b      	movs	r0, #11
 8010006:	bd70      	pop	{r4, r5, r6, pc}

08010008 <rcl_wait_set_add_service>:
 8010008:	b318      	cbz	r0, 8010052 <rcl_wait_set_add_service+0x4a>
 801000a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801000c:	b570      	push	{r4, r5, r6, lr}
 801000e:	4604      	mov	r4, r0
 8010010:	b30b      	cbz	r3, 8010056 <rcl_wait_set_add_service+0x4e>
 8010012:	b319      	cbz	r1, 801005c <rcl_wait_set_add_service+0x54>
 8010014:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8010016:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8010018:	4285      	cmp	r5, r0
 801001a:	d217      	bcs.n	801004c <rcl_wait_set_add_service+0x44>
 801001c:	6a20      	ldr	r0, [r4, #32]
 801001e:	1c6e      	adds	r6, r5, #1
 8010020:	625e      	str	r6, [r3, #36]	@ 0x24
 8010022:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8010026:	b102      	cbz	r2, 801002a <rcl_wait_set_add_service+0x22>
 8010028:	6015      	str	r5, [r2, #0]
 801002a:	4608      	mov	r0, r1
 801002c:	f7ff f8e0 	bl	800f1f0 <rcl_service_get_rmw_handle>
 8010030:	b150      	cbz	r0, 8010048 <rcl_wait_set_add_service+0x40>
 8010032:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010034:	6842      	ldr	r2, [r0, #4]
 8010036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010038:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801003c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801003e:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8010040:	3301      	adds	r3, #1
 8010042:	2000      	movs	r0, #0
 8010044:	6293      	str	r3, [r2, #40]	@ 0x28
 8010046:	bd70      	pop	{r4, r5, r6, pc}
 8010048:	2001      	movs	r0, #1
 801004a:	bd70      	pop	{r4, r5, r6, pc}
 801004c:	f240 3086 	movw	r0, #902	@ 0x386
 8010050:	bd70      	pop	{r4, r5, r6, pc}
 8010052:	200b      	movs	r0, #11
 8010054:	4770      	bx	lr
 8010056:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801005a:	bd70      	pop	{r4, r5, r6, pc}
 801005c:	200b      	movs	r0, #11
 801005e:	bd70      	pop	{r4, r5, r6, pc}

08010060 <rcl_wait>:
 8010060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010064:	ed2d 8b02 	vpush	{d8}
 8010068:	b08d      	sub	sp, #52	@ 0x34
 801006a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801006e:	2800      	cmp	r0, #0
 8010070:	f000 8143 	beq.w	80102fa <rcl_wait+0x29a>
 8010074:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8010076:	4605      	mov	r5, r0
 8010078:	2e00      	cmp	r6, #0
 801007a:	f000 8112 	beq.w	80102a2 <rcl_wait+0x242>
 801007e:	6843      	ldr	r3, [r0, #4]
 8010080:	b983      	cbnz	r3, 80100a4 <rcl_wait+0x44>
 8010082:	68eb      	ldr	r3, [r5, #12]
 8010084:	b973      	cbnz	r3, 80100a4 <rcl_wait+0x44>
 8010086:	696b      	ldr	r3, [r5, #20]
 8010088:	b963      	cbnz	r3, 80100a4 <rcl_wait+0x44>
 801008a:	69eb      	ldr	r3, [r5, #28]
 801008c:	b953      	cbnz	r3, 80100a4 <rcl_wait+0x44>
 801008e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8010090:	b943      	cbnz	r3, 80100a4 <rcl_wait+0x44>
 8010092:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8010094:	b933      	cbnz	r3, 80100a4 <rcl_wait+0x44>
 8010096:	f240 3085 	movw	r0, #901	@ 0x385
 801009a:	b00d      	add	sp, #52	@ 0x34
 801009c:	ecbd 8b02 	vpop	{d8}
 80100a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100a4:	9b04      	ldr	r3, [sp, #16]
 80100a6:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 80100a8:	2b01      	cmp	r3, #1
 80100aa:	9b05      	ldr	r3, [sp, #20]
 80100ac:	f173 0300 	sbcs.w	r3, r3, #0
 80100b0:	f2c0 80f0 	blt.w	8010294 <rcl_wait+0x234>
 80100b4:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 80100b8:	4643      	mov	r3, r8
 80100ba:	2a00      	cmp	r2, #0
 80100bc:	f000 8133 	beq.w	8010326 <rcl_wait+0x2c6>
 80100c0:	2400      	movs	r4, #0
 80100c2:	4613      	mov	r3, r2
 80100c4:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8010338 <rcl_wait+0x2d8>
 80100c8:	46a2      	mov	sl, r4
 80100ca:	46a3      	mov	fp, r4
 80100cc:	f240 3921 	movw	r9, #801	@ 0x321
 80100d0:	4632      	mov	r2, r6
 80100d2:	e014      	b.n	80100fe <rcl_wait+0x9e>
 80100d4:	2800      	cmp	r0, #0
 80100d6:	d1e0      	bne.n	801009a <rcl_wait+0x3a>
 80100d8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80100dc:	4542      	cmp	r2, r8
 80100de:	eb73 0107 	sbcs.w	r1, r3, r7
 80100e2:	da03      	bge.n	80100ec <rcl_wait+0x8c>
 80100e4:	4690      	mov	r8, r2
 80100e6:	461f      	mov	r7, r3
 80100e8:	f04f 0b01 	mov.w	fp, #1
 80100ec:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80100ee:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80100f0:	3401      	adds	r4, #1
 80100f2:	f14a 0a00 	adc.w	sl, sl, #0
 80100f6:	429c      	cmp	r4, r3
 80100f8:	f17a 0100 	sbcs.w	r1, sl, #0
 80100fc:	d228      	bcs.n	8010150 <rcl_wait+0xf0>
 80100fe:	6928      	ldr	r0, [r5, #16]
 8010100:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8010104:	a908      	add	r1, sp, #32
 8010106:	00a6      	lsls	r6, r4, #2
 8010108:	2800      	cmp	r0, #0
 801010a:	d0f1      	beq.n	80100f0 <rcl_wait+0x90>
 801010c:	68eb      	ldr	r3, [r5, #12]
 801010e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8010112:	4423      	add	r3, r4
 8010114:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8010118:	f1be 0f00 	cmp.w	lr, #0
 801011c:	d006      	beq.n	801012c <rcl_wait+0xcc>
 801011e:	6913      	ldr	r3, [r2, #16]
 8010120:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8010124:	3301      	adds	r3, #1
 8010126:	6113      	str	r3, [r2, #16]
 8010128:	692b      	ldr	r3, [r5, #16]
 801012a:	5998      	ldr	r0, [r3, r6]
 801012c:	ed8d 8b08 	vstr	d8, [sp, #32]
 8010130:	f7ff fa96 	bl	800f660 <rcl_timer_get_time_until_next_call>
 8010134:	4548      	cmp	r0, r9
 8010136:	d1cd      	bne.n	80100d4 <rcl_wait+0x74>
 8010138:	692b      	ldr	r3, [r5, #16]
 801013a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801013c:	2100      	movs	r1, #0
 801013e:	5199      	str	r1, [r3, r6]
 8010140:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8010142:	3401      	adds	r4, #1
 8010144:	f14a 0a00 	adc.w	sl, sl, #0
 8010148:	429c      	cmp	r4, r3
 801014a:	f17a 0100 	sbcs.w	r1, sl, #0
 801014e:	d3d6      	bcc.n	80100fe <rcl_wait+0x9e>
 8010150:	4616      	mov	r6, r2
 8010152:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8010156:	4313      	orrs	r3, r2
 8010158:	46d9      	mov	r9, fp
 801015a:	f040 80a9 	bne.w	80102b0 <rcl_wait+0x250>
 801015e:	2300      	movs	r3, #0
 8010160:	2200      	movs	r2, #0
 8010162:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010166:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801016a:	ab08      	add	r3, sp, #32
 801016c:	9302      	str	r3, [sp, #8]
 801016e:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8010170:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8010174:	e9cd 3200 	strd	r3, r2, [sp]
 8010178:	f106 0110 	add.w	r1, r6, #16
 801017c:	f106 031c 	add.w	r3, r6, #28
 8010180:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8010184:	1d30      	adds	r0, r6, #4
 8010186:	f001 fcb1 	bl	8011aec <rmw_wait>
 801018a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801018c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801018e:	4680      	mov	r8, r0
 8010190:	b1ca      	cbz	r2, 80101c6 <rcl_wait+0x166>
 8010192:	2400      	movs	r4, #0
 8010194:	4627      	mov	r7, r4
 8010196:	692a      	ldr	r2, [r5, #16]
 8010198:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 801019c:	f10d 011f 	add.w	r1, sp, #31
 80101a0:	00a6      	lsls	r6, r4, #2
 80101a2:	b160      	cbz	r0, 80101be <rcl_wait+0x15e>
 80101a4:	f88d 701f 	strb.w	r7, [sp, #31]
 80101a8:	f7ff fa20 	bl	800f5ec <rcl_timer_is_ready>
 80101ac:	2800      	cmp	r0, #0
 80101ae:	f47f af74 	bne.w	801009a <rcl_wait+0x3a>
 80101b2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80101b6:	b90b      	cbnz	r3, 80101bc <rcl_wait+0x15c>
 80101b8:	692a      	ldr	r2, [r5, #16]
 80101ba:	5193      	str	r3, [r2, r6]
 80101bc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80101be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80101c0:	3401      	adds	r4, #1
 80101c2:	42a2      	cmp	r2, r4
 80101c4:	d8e7      	bhi.n	8010196 <rcl_wait+0x136>
 80101c6:	f038 0002 	bics.w	r0, r8, #2
 80101ca:	f040 8090 	bne.w	80102ee <rcl_wait+0x28e>
 80101ce:	686e      	ldr	r6, [r5, #4]
 80101d0:	4602      	mov	r2, r0
 80101d2:	b91e      	cbnz	r6, 80101dc <rcl_wait+0x17c>
 80101d4:	e00d      	b.n	80101f2 <rcl_wait+0x192>
 80101d6:	3201      	adds	r2, #1
 80101d8:	42b2      	cmp	r2, r6
 80101da:	d00a      	beq.n	80101f2 <rcl_wait+0x192>
 80101dc:	6899      	ldr	r1, [r3, #8]
 80101de:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80101e2:	2900      	cmp	r1, #0
 80101e4:	d1f7      	bne.n	80101d6 <rcl_wait+0x176>
 80101e6:	682c      	ldr	r4, [r5, #0]
 80101e8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80101ec:	3201      	adds	r2, #1
 80101ee:	42b2      	cmp	r2, r6
 80101f0:	d1f4      	bne.n	80101dc <rcl_wait+0x17c>
 80101f2:	68ee      	ldr	r6, [r5, #12]
 80101f4:	2200      	movs	r2, #0
 80101f6:	b91e      	cbnz	r6, 8010200 <rcl_wait+0x1a0>
 80101f8:	e00d      	b.n	8010216 <rcl_wait+0x1b6>
 80101fa:	3201      	adds	r2, #1
 80101fc:	42b2      	cmp	r2, r6
 80101fe:	d00a      	beq.n	8010216 <rcl_wait+0x1b6>
 8010200:	6959      	ldr	r1, [r3, #20]
 8010202:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8010206:	2900      	cmp	r1, #0
 8010208:	d1f7      	bne.n	80101fa <rcl_wait+0x19a>
 801020a:	68ac      	ldr	r4, [r5, #8]
 801020c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8010210:	3201      	adds	r2, #1
 8010212:	42b2      	cmp	r2, r6
 8010214:	d1f4      	bne.n	8010200 <rcl_wait+0x1a0>
 8010216:	69ee      	ldr	r6, [r5, #28]
 8010218:	2200      	movs	r2, #0
 801021a:	b91e      	cbnz	r6, 8010224 <rcl_wait+0x1c4>
 801021c:	e00d      	b.n	801023a <rcl_wait+0x1da>
 801021e:	3201      	adds	r2, #1
 8010220:	42b2      	cmp	r2, r6
 8010222:	d00a      	beq.n	801023a <rcl_wait+0x1da>
 8010224:	6a19      	ldr	r1, [r3, #32]
 8010226:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801022a:	2900      	cmp	r1, #0
 801022c:	d1f7      	bne.n	801021e <rcl_wait+0x1be>
 801022e:	69ac      	ldr	r4, [r5, #24]
 8010230:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8010234:	3201      	adds	r2, #1
 8010236:	42b2      	cmp	r2, r6
 8010238:	d1f4      	bne.n	8010224 <rcl_wait+0x1c4>
 801023a:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 801023c:	2200      	movs	r2, #0
 801023e:	b91e      	cbnz	r6, 8010248 <rcl_wait+0x1e8>
 8010240:	e00d      	b.n	801025e <rcl_wait+0x1fe>
 8010242:	3201      	adds	r2, #1
 8010244:	4296      	cmp	r6, r2
 8010246:	d00a      	beq.n	801025e <rcl_wait+0x1fe>
 8010248:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801024a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801024e:	2900      	cmp	r1, #0
 8010250:	d1f7      	bne.n	8010242 <rcl_wait+0x1e2>
 8010252:	6a2c      	ldr	r4, [r5, #32]
 8010254:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8010258:	3201      	adds	r2, #1
 801025a:	4296      	cmp	r6, r2
 801025c:	d1f4      	bne.n	8010248 <rcl_wait+0x1e8>
 801025e:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8010260:	2200      	movs	r2, #0
 8010262:	b91e      	cbnz	r6, 801026c <rcl_wait+0x20c>
 8010264:	e00d      	b.n	8010282 <rcl_wait+0x222>
 8010266:	3201      	adds	r2, #1
 8010268:	42b2      	cmp	r2, r6
 801026a:	d00a      	beq.n	8010282 <rcl_wait+0x222>
 801026c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801026e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8010272:	2900      	cmp	r1, #0
 8010274:	d1f7      	bne.n	8010266 <rcl_wait+0x206>
 8010276:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8010278:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801027c:	3201      	adds	r2, #1
 801027e:	42b2      	cmp	r2, r6
 8010280:	d1f4      	bne.n	801026c <rcl_wait+0x20c>
 8010282:	f1b8 0f02 	cmp.w	r8, #2
 8010286:	f47f af08 	bne.w	801009a <rcl_wait+0x3a>
 801028a:	464b      	mov	r3, r9
 801028c:	2b00      	cmp	r3, #0
 801028e:	bf08      	it	eq
 8010290:	2002      	moveq	r0, #2
 8010292:	e702      	b.n	801009a <rcl_wait+0x3a>
 8010294:	2a00      	cmp	r2, #0
 8010296:	d03a      	beq.n	801030e <rcl_wait+0x2ae>
 8010298:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801029c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80102a0:	e70e      	b.n	80100c0 <rcl_wait+0x60>
 80102a2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80102a6:	b00d      	add	sp, #52	@ 0x34
 80102a8:	ecbd 8b02 	vpop	{d8}
 80102ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102b0:	9b04      	ldr	r3, [sp, #16]
 80102b2:	2b01      	cmp	r3, #1
 80102b4:	9b05      	ldr	r3, [sp, #20]
 80102b6:	f173 0300 	sbcs.w	r3, r3, #0
 80102ba:	db24      	blt.n	8010306 <rcl_wait+0x2a6>
 80102bc:	2f00      	cmp	r7, #0
 80102be:	bfbc      	itt	lt
 80102c0:	f04f 0800 	movlt.w	r8, #0
 80102c4:	4647      	movlt	r7, r8
 80102c6:	a31e      	add	r3, pc, #120	@ (adr r3, 8010340 <rcl_wait+0x2e0>)
 80102c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102cc:	4640      	mov	r0, r8
 80102ce:	4639      	mov	r1, r7
 80102d0:	f7f0 f80e 	bl	80002f0 <__aeabi_ldivmod>
 80102d4:	a31a      	add	r3, pc, #104	@ (adr r3, 8010340 <rcl_wait+0x2e0>)
 80102d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102da:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80102de:	4640      	mov	r0, r8
 80102e0:	4639      	mov	r1, r7
 80102e2:	f7f0 f805 	bl	80002f0 <__aeabi_ldivmod>
 80102e6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80102ea:	ab08      	add	r3, sp, #32
 80102ec:	e73e      	b.n	801016c <rcl_wait+0x10c>
 80102ee:	2001      	movs	r0, #1
 80102f0:	b00d      	add	sp, #52	@ 0x34
 80102f2:	ecbd 8b02 	vpop	{d8}
 80102f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102fa:	200b      	movs	r0, #11
 80102fc:	b00d      	add	sp, #52	@ 0x34
 80102fe:	ecbd 8b02 	vpop	{d8}
 8010302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010306:	465b      	mov	r3, fp
 8010308:	2b00      	cmp	r3, #0
 801030a:	d1d7      	bne.n	80102bc <rcl_wait+0x25c>
 801030c:	e72e      	b.n	801016c <rcl_wait+0x10c>
 801030e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8010312:	430b      	orrs	r3, r1
 8010314:	bf08      	it	eq
 8010316:	4691      	moveq	r9, r2
 8010318:	f43f af21 	beq.w	801015e <rcl_wait+0xfe>
 801031c:	9b04      	ldr	r3, [sp, #16]
 801031e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8010322:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8010326:	2b01      	cmp	r3, #1
 8010328:	9b05      	ldr	r3, [sp, #20]
 801032a:	f173 0300 	sbcs.w	r3, r3, #0
 801032e:	f04f 0300 	mov.w	r3, #0
 8010332:	4699      	mov	r9, r3
 8010334:	dac2      	bge.n	80102bc <rcl_wait+0x25c>
 8010336:	e719      	b.n	801016c <rcl_wait+0x10c>
 8010338:	ffffffff 	.word	0xffffffff
 801033c:	7fffffff 	.word	0x7fffffff
 8010340:	3b9aca00 	.word	0x3b9aca00
 8010344:	00000000 	.word	0x00000000

08010348 <rcl_action_take_goal_response>:
 8010348:	2800      	cmp	r0, #0
 801034a:	d039      	beq.n	80103c0 <rcl_action_take_goal_response+0x78>
 801034c:	b570      	push	{r4, r5, r6, lr}
 801034e:	4604      	mov	r4, r0
 8010350:	6800      	ldr	r0, [r0, #0]
 8010352:	b380      	cbz	r0, 80103b6 <rcl_action_take_goal_response+0x6e>
 8010354:	460d      	mov	r5, r1
 8010356:	4616      	mov	r6, r2
 8010358:	f7fe fb1e 	bl	800e998 <rcl_client_is_valid>
 801035c:	b330      	cbz	r0, 80103ac <rcl_action_take_goal_response+0x64>
 801035e:	6820      	ldr	r0, [r4, #0]
 8010360:	3004      	adds	r0, #4
 8010362:	f7fe fb19 	bl	800e998 <rcl_client_is_valid>
 8010366:	b308      	cbz	r0, 80103ac <rcl_action_take_goal_response+0x64>
 8010368:	6820      	ldr	r0, [r4, #0]
 801036a:	3008      	adds	r0, #8
 801036c:	f7fe fb14 	bl	800e998 <rcl_client_is_valid>
 8010370:	b1e0      	cbz	r0, 80103ac <rcl_action_take_goal_response+0x64>
 8010372:	6820      	ldr	r0, [r4, #0]
 8010374:	300c      	adds	r0, #12
 8010376:	f7ff f801 	bl	800f37c <rcl_subscription_is_valid>
 801037a:	b1b8      	cbz	r0, 80103ac <rcl_action_take_goal_response+0x64>
 801037c:	6820      	ldr	r0, [r4, #0]
 801037e:	3010      	adds	r0, #16
 8010380:	f7fe fffc 	bl	800f37c <rcl_subscription_is_valid>
 8010384:	b190      	cbz	r0, 80103ac <rcl_action_take_goal_response+0x64>
 8010386:	b1cd      	cbz	r5, 80103bc <rcl_action_take_goal_response+0x74>
 8010388:	b1c6      	cbz	r6, 80103bc <rcl_action_take_goal_response+0x74>
 801038a:	6820      	ldr	r0, [r4, #0]
 801038c:	4632      	mov	r2, r6
 801038e:	4629      	mov	r1, r5
 8010390:	f7fe faba 	bl	800e908 <rcl_take_response>
 8010394:	b148      	cbz	r0, 80103aa <rcl_action_take_goal_response+0x62>
 8010396:	280a      	cmp	r0, #10
 8010398:	d007      	beq.n	80103aa <rcl_action_take_goal_response+0x62>
 801039a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801039e:	f640 0337 	movw	r3, #2103	@ 0x837
 80103a2:	4290      	cmp	r0, r2
 80103a4:	bf0c      	ite	eq
 80103a6:	4618      	moveq	r0, r3
 80103a8:	2001      	movne	r0, #1
 80103aa:	bd70      	pop	{r4, r5, r6, pc}
 80103ac:	f7fa fa50 	bl	800a850 <rcutils_reset_error>
 80103b0:	f640 0036 	movw	r0, #2102	@ 0x836
 80103b4:	bd70      	pop	{r4, r5, r6, pc}
 80103b6:	f640 0036 	movw	r0, #2102	@ 0x836
 80103ba:	bd70      	pop	{r4, r5, r6, pc}
 80103bc:	200b      	movs	r0, #11
 80103be:	bd70      	pop	{r4, r5, r6, pc}
 80103c0:	f640 0036 	movw	r0, #2102	@ 0x836
 80103c4:	4770      	bx	lr
 80103c6:	bf00      	nop

080103c8 <rcl_action_send_result_request>:
 80103c8:	b390      	cbz	r0, 8010430 <rcl_action_send_result_request+0x68>
 80103ca:	b570      	push	{r4, r5, r6, lr}
 80103cc:	4604      	mov	r4, r0
 80103ce:	6800      	ldr	r0, [r0, #0]
 80103d0:	b348      	cbz	r0, 8010426 <rcl_action_send_result_request+0x5e>
 80103d2:	460d      	mov	r5, r1
 80103d4:	4616      	mov	r6, r2
 80103d6:	f7fe fadf 	bl	800e998 <rcl_client_is_valid>
 80103da:	b1f8      	cbz	r0, 801041c <rcl_action_send_result_request+0x54>
 80103dc:	6820      	ldr	r0, [r4, #0]
 80103de:	3004      	adds	r0, #4
 80103e0:	f7fe fada 	bl	800e998 <rcl_client_is_valid>
 80103e4:	b1d0      	cbz	r0, 801041c <rcl_action_send_result_request+0x54>
 80103e6:	6820      	ldr	r0, [r4, #0]
 80103e8:	3008      	adds	r0, #8
 80103ea:	f7fe fad5 	bl	800e998 <rcl_client_is_valid>
 80103ee:	b1a8      	cbz	r0, 801041c <rcl_action_send_result_request+0x54>
 80103f0:	6820      	ldr	r0, [r4, #0]
 80103f2:	300c      	adds	r0, #12
 80103f4:	f7fe ffc2 	bl	800f37c <rcl_subscription_is_valid>
 80103f8:	b180      	cbz	r0, 801041c <rcl_action_send_result_request+0x54>
 80103fa:	6820      	ldr	r0, [r4, #0]
 80103fc:	3010      	adds	r0, #16
 80103fe:	f7fe ffbd 	bl	800f37c <rcl_subscription_is_valid>
 8010402:	b158      	cbz	r0, 801041c <rcl_action_send_result_request+0x54>
 8010404:	b195      	cbz	r5, 801042c <rcl_action_send_result_request+0x64>
 8010406:	b18e      	cbz	r6, 801042c <rcl_action_send_result_request+0x64>
 8010408:	6820      	ldr	r0, [r4, #0]
 801040a:	4632      	mov	r2, r6
 801040c:	4629      	mov	r1, r5
 801040e:	3008      	adds	r0, #8
 8010410:	f7fe fa42 	bl	800e898 <rcl_send_request>
 8010414:	3800      	subs	r0, #0
 8010416:	bf18      	it	ne
 8010418:	2001      	movne	r0, #1
 801041a:	bd70      	pop	{r4, r5, r6, pc}
 801041c:	f7fa fa18 	bl	800a850 <rcutils_reset_error>
 8010420:	f640 0036 	movw	r0, #2102	@ 0x836
 8010424:	bd70      	pop	{r4, r5, r6, pc}
 8010426:	f640 0036 	movw	r0, #2102	@ 0x836
 801042a:	bd70      	pop	{r4, r5, r6, pc}
 801042c:	200b      	movs	r0, #11
 801042e:	bd70      	pop	{r4, r5, r6, pc}
 8010430:	f640 0036 	movw	r0, #2102	@ 0x836
 8010434:	4770      	bx	lr
 8010436:	bf00      	nop

08010438 <rcl_action_take_result_response>:
 8010438:	2800      	cmp	r0, #0
 801043a:	d03a      	beq.n	80104b2 <rcl_action_take_result_response+0x7a>
 801043c:	b570      	push	{r4, r5, r6, lr}
 801043e:	4604      	mov	r4, r0
 8010440:	6800      	ldr	r0, [r0, #0]
 8010442:	b388      	cbz	r0, 80104a8 <rcl_action_take_result_response+0x70>
 8010444:	460d      	mov	r5, r1
 8010446:	4616      	mov	r6, r2
 8010448:	f7fe faa6 	bl	800e998 <rcl_client_is_valid>
 801044c:	b338      	cbz	r0, 801049e <rcl_action_take_result_response+0x66>
 801044e:	6820      	ldr	r0, [r4, #0]
 8010450:	3004      	adds	r0, #4
 8010452:	f7fe faa1 	bl	800e998 <rcl_client_is_valid>
 8010456:	b310      	cbz	r0, 801049e <rcl_action_take_result_response+0x66>
 8010458:	6820      	ldr	r0, [r4, #0]
 801045a:	3008      	adds	r0, #8
 801045c:	f7fe fa9c 	bl	800e998 <rcl_client_is_valid>
 8010460:	b1e8      	cbz	r0, 801049e <rcl_action_take_result_response+0x66>
 8010462:	6820      	ldr	r0, [r4, #0]
 8010464:	300c      	adds	r0, #12
 8010466:	f7fe ff89 	bl	800f37c <rcl_subscription_is_valid>
 801046a:	b1c0      	cbz	r0, 801049e <rcl_action_take_result_response+0x66>
 801046c:	6820      	ldr	r0, [r4, #0]
 801046e:	3010      	adds	r0, #16
 8010470:	f7fe ff84 	bl	800f37c <rcl_subscription_is_valid>
 8010474:	b198      	cbz	r0, 801049e <rcl_action_take_result_response+0x66>
 8010476:	b1d5      	cbz	r5, 80104ae <rcl_action_take_result_response+0x76>
 8010478:	b1ce      	cbz	r6, 80104ae <rcl_action_take_result_response+0x76>
 801047a:	6820      	ldr	r0, [r4, #0]
 801047c:	4632      	mov	r2, r6
 801047e:	4629      	mov	r1, r5
 8010480:	3008      	adds	r0, #8
 8010482:	f7fe fa41 	bl	800e908 <rcl_take_response>
 8010486:	b148      	cbz	r0, 801049c <rcl_action_take_result_response+0x64>
 8010488:	280a      	cmp	r0, #10
 801048a:	d007      	beq.n	801049c <rcl_action_take_result_response+0x64>
 801048c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8010490:	f640 0337 	movw	r3, #2103	@ 0x837
 8010494:	4290      	cmp	r0, r2
 8010496:	bf0c      	ite	eq
 8010498:	4618      	moveq	r0, r3
 801049a:	2001      	movne	r0, #1
 801049c:	bd70      	pop	{r4, r5, r6, pc}
 801049e:	f7fa f9d7 	bl	800a850 <rcutils_reset_error>
 80104a2:	f640 0036 	movw	r0, #2102	@ 0x836
 80104a6:	bd70      	pop	{r4, r5, r6, pc}
 80104a8:	f640 0036 	movw	r0, #2102	@ 0x836
 80104ac:	bd70      	pop	{r4, r5, r6, pc}
 80104ae:	200b      	movs	r0, #11
 80104b0:	bd70      	pop	{r4, r5, r6, pc}
 80104b2:	f640 0036 	movw	r0, #2102	@ 0x836
 80104b6:	4770      	bx	lr

080104b8 <rcl_action_take_cancel_response>:
 80104b8:	2800      	cmp	r0, #0
 80104ba:	d03a      	beq.n	8010532 <rcl_action_take_cancel_response+0x7a>
 80104bc:	b570      	push	{r4, r5, r6, lr}
 80104be:	4604      	mov	r4, r0
 80104c0:	6800      	ldr	r0, [r0, #0]
 80104c2:	b388      	cbz	r0, 8010528 <rcl_action_take_cancel_response+0x70>
 80104c4:	460d      	mov	r5, r1
 80104c6:	4616      	mov	r6, r2
 80104c8:	f7fe fa66 	bl	800e998 <rcl_client_is_valid>
 80104cc:	b338      	cbz	r0, 801051e <rcl_action_take_cancel_response+0x66>
 80104ce:	6820      	ldr	r0, [r4, #0]
 80104d0:	3004      	adds	r0, #4
 80104d2:	f7fe fa61 	bl	800e998 <rcl_client_is_valid>
 80104d6:	b310      	cbz	r0, 801051e <rcl_action_take_cancel_response+0x66>
 80104d8:	6820      	ldr	r0, [r4, #0]
 80104da:	3008      	adds	r0, #8
 80104dc:	f7fe fa5c 	bl	800e998 <rcl_client_is_valid>
 80104e0:	b1e8      	cbz	r0, 801051e <rcl_action_take_cancel_response+0x66>
 80104e2:	6820      	ldr	r0, [r4, #0]
 80104e4:	300c      	adds	r0, #12
 80104e6:	f7fe ff49 	bl	800f37c <rcl_subscription_is_valid>
 80104ea:	b1c0      	cbz	r0, 801051e <rcl_action_take_cancel_response+0x66>
 80104ec:	6820      	ldr	r0, [r4, #0]
 80104ee:	3010      	adds	r0, #16
 80104f0:	f7fe ff44 	bl	800f37c <rcl_subscription_is_valid>
 80104f4:	b198      	cbz	r0, 801051e <rcl_action_take_cancel_response+0x66>
 80104f6:	b1d5      	cbz	r5, 801052e <rcl_action_take_cancel_response+0x76>
 80104f8:	b1ce      	cbz	r6, 801052e <rcl_action_take_cancel_response+0x76>
 80104fa:	6820      	ldr	r0, [r4, #0]
 80104fc:	4632      	mov	r2, r6
 80104fe:	4629      	mov	r1, r5
 8010500:	3004      	adds	r0, #4
 8010502:	f7fe fa01 	bl	800e908 <rcl_take_response>
 8010506:	b148      	cbz	r0, 801051c <rcl_action_take_cancel_response+0x64>
 8010508:	280a      	cmp	r0, #10
 801050a:	d007      	beq.n	801051c <rcl_action_take_cancel_response+0x64>
 801050c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8010510:	f640 0337 	movw	r3, #2103	@ 0x837
 8010514:	4290      	cmp	r0, r2
 8010516:	bf0c      	ite	eq
 8010518:	4618      	moveq	r0, r3
 801051a:	2001      	movne	r0, #1
 801051c:	bd70      	pop	{r4, r5, r6, pc}
 801051e:	f7fa f997 	bl	800a850 <rcutils_reset_error>
 8010522:	f640 0036 	movw	r0, #2102	@ 0x836
 8010526:	bd70      	pop	{r4, r5, r6, pc}
 8010528:	f640 0036 	movw	r0, #2102	@ 0x836
 801052c:	bd70      	pop	{r4, r5, r6, pc}
 801052e:	200b      	movs	r0, #11
 8010530:	bd70      	pop	{r4, r5, r6, pc}
 8010532:	f640 0036 	movw	r0, #2102	@ 0x836
 8010536:	4770      	bx	lr

08010538 <rcl_action_take_feedback>:
 8010538:	2800      	cmp	r0, #0
 801053a:	d038      	beq.n	80105ae <rcl_action_take_feedback+0x76>
 801053c:	b530      	push	{r4, r5, lr}
 801053e:	4604      	mov	r4, r0
 8010540:	6800      	ldr	r0, [r0, #0]
 8010542:	b091      	sub	sp, #68	@ 0x44
 8010544:	b378      	cbz	r0, 80105a6 <rcl_action_take_feedback+0x6e>
 8010546:	460d      	mov	r5, r1
 8010548:	f7fe fa26 	bl	800e998 <rcl_client_is_valid>
 801054c:	b328      	cbz	r0, 801059a <rcl_action_take_feedback+0x62>
 801054e:	6820      	ldr	r0, [r4, #0]
 8010550:	3004      	adds	r0, #4
 8010552:	f7fe fa21 	bl	800e998 <rcl_client_is_valid>
 8010556:	b300      	cbz	r0, 801059a <rcl_action_take_feedback+0x62>
 8010558:	6820      	ldr	r0, [r4, #0]
 801055a:	3008      	adds	r0, #8
 801055c:	f7fe fa1c 	bl	800e998 <rcl_client_is_valid>
 8010560:	b1d8      	cbz	r0, 801059a <rcl_action_take_feedback+0x62>
 8010562:	6820      	ldr	r0, [r4, #0]
 8010564:	300c      	adds	r0, #12
 8010566:	f7fe ff09 	bl	800f37c <rcl_subscription_is_valid>
 801056a:	b1b0      	cbz	r0, 801059a <rcl_action_take_feedback+0x62>
 801056c:	6820      	ldr	r0, [r4, #0]
 801056e:	3010      	adds	r0, #16
 8010570:	f7fe ff04 	bl	800f37c <rcl_subscription_is_valid>
 8010574:	b188      	cbz	r0, 801059a <rcl_action_take_feedback+0x62>
 8010576:	b1ed      	cbz	r5, 80105b4 <rcl_action_take_feedback+0x7c>
 8010578:	6820      	ldr	r0, [r4, #0]
 801057a:	2300      	movs	r3, #0
 801057c:	466a      	mov	r2, sp
 801057e:	4629      	mov	r1, r5
 8010580:	300c      	adds	r0, #12
 8010582:	f7fe fe9d 	bl	800f2c0 <rcl_take>
 8010586:	b160      	cbz	r0, 80105a2 <rcl_action_take_feedback+0x6a>
 8010588:	f240 1391 	movw	r3, #401	@ 0x191
 801058c:	4298      	cmp	r0, r3
 801058e:	d014      	beq.n	80105ba <rcl_action_take_feedback+0x82>
 8010590:	280a      	cmp	r0, #10
 8010592:	bf18      	it	ne
 8010594:	2001      	movne	r0, #1
 8010596:	b011      	add	sp, #68	@ 0x44
 8010598:	bd30      	pop	{r4, r5, pc}
 801059a:	f7fa f959 	bl	800a850 <rcutils_reset_error>
 801059e:	f640 0036 	movw	r0, #2102	@ 0x836
 80105a2:	b011      	add	sp, #68	@ 0x44
 80105a4:	bd30      	pop	{r4, r5, pc}
 80105a6:	f640 0036 	movw	r0, #2102	@ 0x836
 80105aa:	b011      	add	sp, #68	@ 0x44
 80105ac:	bd30      	pop	{r4, r5, pc}
 80105ae:	f640 0036 	movw	r0, #2102	@ 0x836
 80105b2:	4770      	bx	lr
 80105b4:	200b      	movs	r0, #11
 80105b6:	b011      	add	sp, #68	@ 0x44
 80105b8:	bd30      	pop	{r4, r5, pc}
 80105ba:	f640 0037 	movw	r0, #2103	@ 0x837
 80105be:	e7f0      	b.n	80105a2 <rcl_action_take_feedback+0x6a>

080105c0 <rcl_action_wait_set_add_action_client>:
 80105c0:	2800      	cmp	r0, #0
 80105c2:	d048      	beq.n	8010656 <rcl_action_wait_set_add_action_client+0x96>
 80105c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105c6:	460c      	mov	r4, r1
 80105c8:	2900      	cmp	r1, #0
 80105ca:	d03c      	beq.n	8010646 <rcl_action_wait_set_add_action_client+0x86>
 80105cc:	4605      	mov	r5, r0
 80105ce:	6808      	ldr	r0, [r1, #0]
 80105d0:	2800      	cmp	r0, #0
 80105d2:	d038      	beq.n	8010646 <rcl_action_wait_set_add_action_client+0x86>
 80105d4:	4617      	mov	r7, r2
 80105d6:	461e      	mov	r6, r3
 80105d8:	f7fe f9de 	bl	800e998 <rcl_client_is_valid>
 80105dc:	b3b0      	cbz	r0, 801064c <rcl_action_wait_set_add_action_client+0x8c>
 80105de:	6820      	ldr	r0, [r4, #0]
 80105e0:	3004      	adds	r0, #4
 80105e2:	f7fe f9d9 	bl	800e998 <rcl_client_is_valid>
 80105e6:	b388      	cbz	r0, 801064c <rcl_action_wait_set_add_action_client+0x8c>
 80105e8:	6820      	ldr	r0, [r4, #0]
 80105ea:	3008      	adds	r0, #8
 80105ec:	f7fe f9d4 	bl	800e998 <rcl_client_is_valid>
 80105f0:	b360      	cbz	r0, 801064c <rcl_action_wait_set_add_action_client+0x8c>
 80105f2:	6820      	ldr	r0, [r4, #0]
 80105f4:	300c      	adds	r0, #12
 80105f6:	f7fe fec1 	bl	800f37c <rcl_subscription_is_valid>
 80105fa:	b338      	cbz	r0, 801064c <rcl_action_wait_set_add_action_client+0x8c>
 80105fc:	6820      	ldr	r0, [r4, #0]
 80105fe:	3010      	adds	r0, #16
 8010600:	f7fe febc 	bl	800f37c <rcl_subscription_is_valid>
 8010604:	b310      	cbz	r0, 801064c <rcl_action_wait_set_add_action_client+0x8c>
 8010606:	6821      	ldr	r1, [r4, #0]
 8010608:	4628      	mov	r0, r5
 801060a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801060e:	f7ff fccf 	bl	800ffb0 <rcl_wait_set_add_client>
 8010612:	b9b8      	cbnz	r0, 8010644 <rcl_action_wait_set_add_action_client+0x84>
 8010614:	6821      	ldr	r1, [r4, #0]
 8010616:	4628      	mov	r0, r5
 8010618:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801061c:	3104      	adds	r1, #4
 801061e:	f7ff fcc7 	bl	800ffb0 <rcl_wait_set_add_client>
 8010622:	b978      	cbnz	r0, 8010644 <rcl_action_wait_set_add_action_client+0x84>
 8010624:	6821      	ldr	r1, [r4, #0]
 8010626:	4628      	mov	r0, r5
 8010628:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801062c:	3108      	adds	r1, #8
 801062e:	f7ff fcbf 	bl	800ffb0 <rcl_wait_set_add_client>
 8010632:	b938      	cbnz	r0, 8010644 <rcl_action_wait_set_add_action_client+0x84>
 8010634:	6821      	ldr	r1, [r4, #0]
 8010636:	4628      	mov	r0, r5
 8010638:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801063c:	310c      	adds	r1, #12
 801063e:	f7ff f96f 	bl	800f920 <rcl_wait_set_add_subscription>
 8010642:	b158      	cbz	r0, 801065c <rcl_action_wait_set_add_action_client+0x9c>
 8010644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010646:	f640 0036 	movw	r0, #2102	@ 0x836
 801064a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801064c:	f7fa f900 	bl	800a850 <rcutils_reset_error>
 8010650:	f640 0036 	movw	r0, #2102	@ 0x836
 8010654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010656:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801065a:	4770      	bx	lr
 801065c:	6821      	ldr	r1, [r4, #0]
 801065e:	4628      	mov	r0, r5
 8010660:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8010664:	3110      	adds	r1, #16
 8010666:	f7ff f95b 	bl	800f920 <rcl_wait_set_add_subscription>
 801066a:	2800      	cmp	r0, #0
 801066c:	d1ea      	bne.n	8010644 <rcl_action_wait_set_add_action_client+0x84>
 801066e:	b11f      	cbz	r7, 8010678 <rcl_action_wait_set_add_action_client+0xb8>
 8010670:	6823      	ldr	r3, [r4, #0]
 8010672:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8010676:	603b      	str	r3, [r7, #0]
 8010678:	2e00      	cmp	r6, #0
 801067a:	d0e3      	beq.n	8010644 <rcl_action_wait_set_add_action_client+0x84>
 801067c:	6823      	ldr	r3, [r4, #0]
 801067e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8010682:	6033      	str	r3, [r6, #0]
 8010684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010686:	bf00      	nop

08010688 <rcl_action_client_wait_set_get_entities_ready>:
 8010688:	2800      	cmp	r0, #0
 801068a:	f000 808d 	beq.w	80107a8 <rcl_action_client_wait_set_get_entities_ready+0x120>
 801068e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010692:	460c      	mov	r4, r1
 8010694:	2900      	cmp	r1, #0
 8010696:	d077      	beq.n	8010788 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8010698:	4605      	mov	r5, r0
 801069a:	6808      	ldr	r0, [r1, #0]
 801069c:	2800      	cmp	r0, #0
 801069e:	d073      	beq.n	8010788 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80106a0:	4616      	mov	r6, r2
 80106a2:	461f      	mov	r7, r3
 80106a4:	f7fe f978 	bl	800e998 <rcl_client_is_valid>
 80106a8:	2800      	cmp	r0, #0
 80106aa:	d071      	beq.n	8010790 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80106ac:	6820      	ldr	r0, [r4, #0]
 80106ae:	3004      	adds	r0, #4
 80106b0:	f7fe f972 	bl	800e998 <rcl_client_is_valid>
 80106b4:	2800      	cmp	r0, #0
 80106b6:	d06b      	beq.n	8010790 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80106b8:	6820      	ldr	r0, [r4, #0]
 80106ba:	3008      	adds	r0, #8
 80106bc:	f7fe f96c 	bl	800e998 <rcl_client_is_valid>
 80106c0:	2800      	cmp	r0, #0
 80106c2:	d065      	beq.n	8010790 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80106c4:	6820      	ldr	r0, [r4, #0]
 80106c6:	300c      	adds	r0, #12
 80106c8:	f7fe fe58 	bl	800f37c <rcl_subscription_is_valid>
 80106cc:	2800      	cmp	r0, #0
 80106ce:	d05f      	beq.n	8010790 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80106d0:	6820      	ldr	r0, [r4, #0]
 80106d2:	3010      	adds	r0, #16
 80106d4:	f7fe fe52 	bl	800f37c <rcl_subscription_is_valid>
 80106d8:	2800      	cmp	r0, #0
 80106da:	d059      	beq.n	8010790 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80106dc:	2e00      	cmp	r6, #0
 80106de:	d060      	beq.n	80107a2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80106e0:	2f00      	cmp	r7, #0
 80106e2:	d05e      	beq.n	80107a2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80106e4:	9b06      	ldr	r3, [sp, #24]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d05b      	beq.n	80107a2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80106ea:	9b07      	ldr	r3, [sp, #28]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d058      	beq.n	80107a2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80106f0:	9b08      	ldr	r3, [sp, #32]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d055      	beq.n	80107a2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80106f6:	6823      	ldr	r3, [r4, #0]
 80106f8:	686a      	ldr	r2, [r5, #4]
 80106fa:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 80106fe:	428a      	cmp	r2, r1
 8010700:	d94c      	bls.n	801079c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8010702:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8010706:	4282      	cmp	r2, r0
 8010708:	d948      	bls.n	801079c <rcl_action_client_wait_set_get_entities_ready+0x114>
 801070a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 801070e:	69ea      	ldr	r2, [r5, #28]
 8010710:	42a2      	cmp	r2, r4
 8010712:	d943      	bls.n	801079c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8010714:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8010718:	4562      	cmp	r2, ip
 801071a:	d93f      	bls.n	801079c <rcl_action_client_wait_set_get_entities_ready+0x114>
 801071c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8010720:	4572      	cmp	r2, lr
 8010722:	d93b      	bls.n	801079c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8010724:	69aa      	ldr	r2, [r5, #24]
 8010726:	682d      	ldr	r5, [r5, #0]
 8010728:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 801072c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8010730:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8010734:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8010738:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 801073c:	f103 0c0c 	add.w	ip, r3, #12
 8010740:	eba5 050c 	sub.w	r5, r5, ip
 8010744:	fab5 f585 	clz	r5, r5
 8010748:	096d      	lsrs	r5, r5, #5
 801074a:	7035      	strb	r5, [r6, #0]
 801074c:	f103 0510 	add.w	r5, r3, #16
 8010750:	1b64      	subs	r4, r4, r5
 8010752:	fab4 f484 	clz	r4, r4
 8010756:	0964      	lsrs	r4, r4, #5
 8010758:	703c      	strb	r4, [r7, #0]
 801075a:	eba3 0008 	sub.w	r0, r3, r8
 801075e:	1d1c      	adds	r4, r3, #4
 8010760:	3308      	adds	r3, #8
 8010762:	1ad3      	subs	r3, r2, r3
 8010764:	fab0 f080 	clz	r0, r0
 8010768:	9a06      	ldr	r2, [sp, #24]
 801076a:	0940      	lsrs	r0, r0, #5
 801076c:	1b09      	subs	r1, r1, r4
 801076e:	7010      	strb	r0, [r2, #0]
 8010770:	fab1 f181 	clz	r1, r1
 8010774:	9a07      	ldr	r2, [sp, #28]
 8010776:	0949      	lsrs	r1, r1, #5
 8010778:	7011      	strb	r1, [r2, #0]
 801077a:	fab3 f383 	clz	r3, r3
 801077e:	9a08      	ldr	r2, [sp, #32]
 8010780:	095b      	lsrs	r3, r3, #5
 8010782:	2000      	movs	r0, #0
 8010784:	7013      	strb	r3, [r2, #0]
 8010786:	e001      	b.n	801078c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8010788:	f640 0036 	movw	r0, #2102	@ 0x836
 801078c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010790:	f7fa f85e 	bl	800a850 <rcutils_reset_error>
 8010794:	f640 0036 	movw	r0, #2102	@ 0x836
 8010798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801079c:	2001      	movs	r0, #1
 801079e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107a2:	200b      	movs	r0, #11
 80107a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107a8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80107ac:	4770      	bx	lr
 80107ae:	bf00      	nop

080107b0 <rcl_action_take_goal_request>:
 80107b0:	2800      	cmp	r0, #0
 80107b2:	d039      	beq.n	8010828 <rcl_action_take_goal_request+0x78>
 80107b4:	b570      	push	{r4, r5, r6, lr}
 80107b6:	4604      	mov	r4, r0
 80107b8:	6800      	ldr	r0, [r0, #0]
 80107ba:	b380      	cbz	r0, 801081e <rcl_action_take_goal_request+0x6e>
 80107bc:	460d      	mov	r5, r1
 80107be:	4616      	mov	r6, r2
 80107c0:	f7fe fd74 	bl	800f2ac <rcl_service_is_valid>
 80107c4:	b330      	cbz	r0, 8010814 <rcl_action_take_goal_request+0x64>
 80107c6:	6820      	ldr	r0, [r4, #0]
 80107c8:	3004      	adds	r0, #4
 80107ca:	f7fe fd6f 	bl	800f2ac <rcl_service_is_valid>
 80107ce:	b308      	cbz	r0, 8010814 <rcl_action_take_goal_request+0x64>
 80107d0:	6820      	ldr	r0, [r4, #0]
 80107d2:	3008      	adds	r0, #8
 80107d4:	f7fe fd6a 	bl	800f2ac <rcl_service_is_valid>
 80107d8:	b1e0      	cbz	r0, 8010814 <rcl_action_take_goal_request+0x64>
 80107da:	6820      	ldr	r0, [r4, #0]
 80107dc:	300c      	adds	r0, #12
 80107de:	f003 fb5f 	bl	8013ea0 <rcl_publisher_is_valid>
 80107e2:	b1b8      	cbz	r0, 8010814 <rcl_action_take_goal_request+0x64>
 80107e4:	6820      	ldr	r0, [r4, #0]
 80107e6:	3010      	adds	r0, #16
 80107e8:	f003 fb5a 	bl	8013ea0 <rcl_publisher_is_valid>
 80107ec:	b190      	cbz	r0, 8010814 <rcl_action_take_goal_request+0x64>
 80107ee:	b1cd      	cbz	r5, 8010824 <rcl_action_take_goal_request+0x74>
 80107f0:	b1c6      	cbz	r6, 8010824 <rcl_action_take_goal_request+0x74>
 80107f2:	6820      	ldr	r0, [r4, #0]
 80107f4:	4632      	mov	r2, r6
 80107f6:	4629      	mov	r1, r5
 80107f8:	f7fe fd00 	bl	800f1fc <rcl_take_request>
 80107fc:	b148      	cbz	r0, 8010812 <rcl_action_take_goal_request+0x62>
 80107fe:	280a      	cmp	r0, #10
 8010800:	d007      	beq.n	8010812 <rcl_action_take_goal_request+0x62>
 8010802:	f240 2259 	movw	r2, #601	@ 0x259
 8010806:	f640 0399 	movw	r3, #2201	@ 0x899
 801080a:	4290      	cmp	r0, r2
 801080c:	bf0c      	ite	eq
 801080e:	4618      	moveq	r0, r3
 8010810:	2001      	movne	r0, #1
 8010812:	bd70      	pop	{r4, r5, r6, pc}
 8010814:	f7fa f81c 	bl	800a850 <rcutils_reset_error>
 8010818:	f640 0098 	movw	r0, #2200	@ 0x898
 801081c:	bd70      	pop	{r4, r5, r6, pc}
 801081e:	f640 0098 	movw	r0, #2200	@ 0x898
 8010822:	bd70      	pop	{r4, r5, r6, pc}
 8010824:	200b      	movs	r0, #11
 8010826:	bd70      	pop	{r4, r5, r6, pc}
 8010828:	f640 0098 	movw	r0, #2200	@ 0x898
 801082c:	4770      	bx	lr
 801082e:	bf00      	nop

08010830 <rcl_action_send_goal_response>:
 8010830:	b390      	cbz	r0, 8010898 <rcl_action_send_goal_response+0x68>
 8010832:	b570      	push	{r4, r5, r6, lr}
 8010834:	4604      	mov	r4, r0
 8010836:	6800      	ldr	r0, [r0, #0]
 8010838:	b348      	cbz	r0, 801088e <rcl_action_send_goal_response+0x5e>
 801083a:	460d      	mov	r5, r1
 801083c:	4616      	mov	r6, r2
 801083e:	f7fe fd35 	bl	800f2ac <rcl_service_is_valid>
 8010842:	b1f8      	cbz	r0, 8010884 <rcl_action_send_goal_response+0x54>
 8010844:	6820      	ldr	r0, [r4, #0]
 8010846:	3004      	adds	r0, #4
 8010848:	f7fe fd30 	bl	800f2ac <rcl_service_is_valid>
 801084c:	b1d0      	cbz	r0, 8010884 <rcl_action_send_goal_response+0x54>
 801084e:	6820      	ldr	r0, [r4, #0]
 8010850:	3008      	adds	r0, #8
 8010852:	f7fe fd2b 	bl	800f2ac <rcl_service_is_valid>
 8010856:	b1a8      	cbz	r0, 8010884 <rcl_action_send_goal_response+0x54>
 8010858:	6820      	ldr	r0, [r4, #0]
 801085a:	300c      	adds	r0, #12
 801085c:	f003 fb20 	bl	8013ea0 <rcl_publisher_is_valid>
 8010860:	b180      	cbz	r0, 8010884 <rcl_action_send_goal_response+0x54>
 8010862:	6820      	ldr	r0, [r4, #0]
 8010864:	3010      	adds	r0, #16
 8010866:	f003 fb1b 	bl	8013ea0 <rcl_publisher_is_valid>
 801086a:	b158      	cbz	r0, 8010884 <rcl_action_send_goal_response+0x54>
 801086c:	b195      	cbz	r5, 8010894 <rcl_action_send_goal_response+0x64>
 801086e:	b18e      	cbz	r6, 8010894 <rcl_action_send_goal_response+0x64>
 8010870:	6820      	ldr	r0, [r4, #0]
 8010872:	4632      	mov	r2, r6
 8010874:	4629      	mov	r1, r5
 8010876:	f7fe fd01 	bl	800f27c <rcl_send_response>
 801087a:	b110      	cbz	r0, 8010882 <rcl_action_send_goal_response+0x52>
 801087c:	2802      	cmp	r0, #2
 801087e:	bf18      	it	ne
 8010880:	2001      	movne	r0, #1
 8010882:	bd70      	pop	{r4, r5, r6, pc}
 8010884:	f7f9 ffe4 	bl	800a850 <rcutils_reset_error>
 8010888:	f640 0098 	movw	r0, #2200	@ 0x898
 801088c:	bd70      	pop	{r4, r5, r6, pc}
 801088e:	f640 0098 	movw	r0, #2200	@ 0x898
 8010892:	bd70      	pop	{r4, r5, r6, pc}
 8010894:	200b      	movs	r0, #11
 8010896:	bd70      	pop	{r4, r5, r6, pc}
 8010898:	f640 0098 	movw	r0, #2200	@ 0x898
 801089c:	4770      	bx	lr
 801089e:	bf00      	nop

080108a0 <rcl_action_take_result_request>:
 80108a0:	2800      	cmp	r0, #0
 80108a2:	d03a      	beq.n	801091a <rcl_action_take_result_request+0x7a>
 80108a4:	b570      	push	{r4, r5, r6, lr}
 80108a6:	4604      	mov	r4, r0
 80108a8:	6800      	ldr	r0, [r0, #0]
 80108aa:	b388      	cbz	r0, 8010910 <rcl_action_take_result_request+0x70>
 80108ac:	460d      	mov	r5, r1
 80108ae:	4616      	mov	r6, r2
 80108b0:	f7fe fcfc 	bl	800f2ac <rcl_service_is_valid>
 80108b4:	b338      	cbz	r0, 8010906 <rcl_action_take_result_request+0x66>
 80108b6:	6820      	ldr	r0, [r4, #0]
 80108b8:	3004      	adds	r0, #4
 80108ba:	f7fe fcf7 	bl	800f2ac <rcl_service_is_valid>
 80108be:	b310      	cbz	r0, 8010906 <rcl_action_take_result_request+0x66>
 80108c0:	6820      	ldr	r0, [r4, #0]
 80108c2:	3008      	adds	r0, #8
 80108c4:	f7fe fcf2 	bl	800f2ac <rcl_service_is_valid>
 80108c8:	b1e8      	cbz	r0, 8010906 <rcl_action_take_result_request+0x66>
 80108ca:	6820      	ldr	r0, [r4, #0]
 80108cc:	300c      	adds	r0, #12
 80108ce:	f003 fae7 	bl	8013ea0 <rcl_publisher_is_valid>
 80108d2:	b1c0      	cbz	r0, 8010906 <rcl_action_take_result_request+0x66>
 80108d4:	6820      	ldr	r0, [r4, #0]
 80108d6:	3010      	adds	r0, #16
 80108d8:	f003 fae2 	bl	8013ea0 <rcl_publisher_is_valid>
 80108dc:	b198      	cbz	r0, 8010906 <rcl_action_take_result_request+0x66>
 80108de:	b1d5      	cbz	r5, 8010916 <rcl_action_take_result_request+0x76>
 80108e0:	b1ce      	cbz	r6, 8010916 <rcl_action_take_result_request+0x76>
 80108e2:	6820      	ldr	r0, [r4, #0]
 80108e4:	4632      	mov	r2, r6
 80108e6:	4629      	mov	r1, r5
 80108e8:	3008      	adds	r0, #8
 80108ea:	f7fe fc87 	bl	800f1fc <rcl_take_request>
 80108ee:	b148      	cbz	r0, 8010904 <rcl_action_take_result_request+0x64>
 80108f0:	280a      	cmp	r0, #10
 80108f2:	d007      	beq.n	8010904 <rcl_action_take_result_request+0x64>
 80108f4:	f240 2259 	movw	r2, #601	@ 0x259
 80108f8:	f640 0399 	movw	r3, #2201	@ 0x899
 80108fc:	4290      	cmp	r0, r2
 80108fe:	bf0c      	ite	eq
 8010900:	4618      	moveq	r0, r3
 8010902:	2001      	movne	r0, #1
 8010904:	bd70      	pop	{r4, r5, r6, pc}
 8010906:	f7f9 ffa3 	bl	800a850 <rcutils_reset_error>
 801090a:	f640 0098 	movw	r0, #2200	@ 0x898
 801090e:	bd70      	pop	{r4, r5, r6, pc}
 8010910:	f640 0098 	movw	r0, #2200	@ 0x898
 8010914:	bd70      	pop	{r4, r5, r6, pc}
 8010916:	200b      	movs	r0, #11
 8010918:	bd70      	pop	{r4, r5, r6, pc}
 801091a:	f640 0098 	movw	r0, #2200	@ 0x898
 801091e:	4770      	bx	lr

08010920 <rcl_action_take_cancel_request>:
 8010920:	2800      	cmp	r0, #0
 8010922:	d03a      	beq.n	801099a <rcl_action_take_cancel_request+0x7a>
 8010924:	b570      	push	{r4, r5, r6, lr}
 8010926:	4604      	mov	r4, r0
 8010928:	6800      	ldr	r0, [r0, #0]
 801092a:	b388      	cbz	r0, 8010990 <rcl_action_take_cancel_request+0x70>
 801092c:	460d      	mov	r5, r1
 801092e:	4616      	mov	r6, r2
 8010930:	f7fe fcbc 	bl	800f2ac <rcl_service_is_valid>
 8010934:	b338      	cbz	r0, 8010986 <rcl_action_take_cancel_request+0x66>
 8010936:	6820      	ldr	r0, [r4, #0]
 8010938:	3004      	adds	r0, #4
 801093a:	f7fe fcb7 	bl	800f2ac <rcl_service_is_valid>
 801093e:	b310      	cbz	r0, 8010986 <rcl_action_take_cancel_request+0x66>
 8010940:	6820      	ldr	r0, [r4, #0]
 8010942:	3008      	adds	r0, #8
 8010944:	f7fe fcb2 	bl	800f2ac <rcl_service_is_valid>
 8010948:	b1e8      	cbz	r0, 8010986 <rcl_action_take_cancel_request+0x66>
 801094a:	6820      	ldr	r0, [r4, #0]
 801094c:	300c      	adds	r0, #12
 801094e:	f003 faa7 	bl	8013ea0 <rcl_publisher_is_valid>
 8010952:	b1c0      	cbz	r0, 8010986 <rcl_action_take_cancel_request+0x66>
 8010954:	6820      	ldr	r0, [r4, #0]
 8010956:	3010      	adds	r0, #16
 8010958:	f003 faa2 	bl	8013ea0 <rcl_publisher_is_valid>
 801095c:	b198      	cbz	r0, 8010986 <rcl_action_take_cancel_request+0x66>
 801095e:	b1d5      	cbz	r5, 8010996 <rcl_action_take_cancel_request+0x76>
 8010960:	b1ce      	cbz	r6, 8010996 <rcl_action_take_cancel_request+0x76>
 8010962:	6820      	ldr	r0, [r4, #0]
 8010964:	4632      	mov	r2, r6
 8010966:	4629      	mov	r1, r5
 8010968:	3004      	adds	r0, #4
 801096a:	f7fe fc47 	bl	800f1fc <rcl_take_request>
 801096e:	b148      	cbz	r0, 8010984 <rcl_action_take_cancel_request+0x64>
 8010970:	280a      	cmp	r0, #10
 8010972:	d007      	beq.n	8010984 <rcl_action_take_cancel_request+0x64>
 8010974:	f240 2259 	movw	r2, #601	@ 0x259
 8010978:	f640 0399 	movw	r3, #2201	@ 0x899
 801097c:	4290      	cmp	r0, r2
 801097e:	bf0c      	ite	eq
 8010980:	4618      	moveq	r0, r3
 8010982:	2001      	movne	r0, #1
 8010984:	bd70      	pop	{r4, r5, r6, pc}
 8010986:	f7f9 ff63 	bl	800a850 <rcutils_reset_error>
 801098a:	f640 0098 	movw	r0, #2200	@ 0x898
 801098e:	bd70      	pop	{r4, r5, r6, pc}
 8010990:	f640 0098 	movw	r0, #2200	@ 0x898
 8010994:	bd70      	pop	{r4, r5, r6, pc}
 8010996:	200b      	movs	r0, #11
 8010998:	bd70      	pop	{r4, r5, r6, pc}
 801099a:	f640 0098 	movw	r0, #2200	@ 0x898
 801099e:	4770      	bx	lr

080109a0 <rcl_action_send_cancel_response>:
 80109a0:	b398      	cbz	r0, 8010a0a <rcl_action_send_cancel_response+0x6a>
 80109a2:	b570      	push	{r4, r5, r6, lr}
 80109a4:	4604      	mov	r4, r0
 80109a6:	6800      	ldr	r0, [r0, #0]
 80109a8:	b350      	cbz	r0, 8010a00 <rcl_action_send_cancel_response+0x60>
 80109aa:	460d      	mov	r5, r1
 80109ac:	4616      	mov	r6, r2
 80109ae:	f7fe fc7d 	bl	800f2ac <rcl_service_is_valid>
 80109b2:	b300      	cbz	r0, 80109f6 <rcl_action_send_cancel_response+0x56>
 80109b4:	6820      	ldr	r0, [r4, #0]
 80109b6:	3004      	adds	r0, #4
 80109b8:	f7fe fc78 	bl	800f2ac <rcl_service_is_valid>
 80109bc:	b1d8      	cbz	r0, 80109f6 <rcl_action_send_cancel_response+0x56>
 80109be:	6820      	ldr	r0, [r4, #0]
 80109c0:	3008      	adds	r0, #8
 80109c2:	f7fe fc73 	bl	800f2ac <rcl_service_is_valid>
 80109c6:	b1b0      	cbz	r0, 80109f6 <rcl_action_send_cancel_response+0x56>
 80109c8:	6820      	ldr	r0, [r4, #0]
 80109ca:	300c      	adds	r0, #12
 80109cc:	f003 fa68 	bl	8013ea0 <rcl_publisher_is_valid>
 80109d0:	b188      	cbz	r0, 80109f6 <rcl_action_send_cancel_response+0x56>
 80109d2:	6820      	ldr	r0, [r4, #0]
 80109d4:	3010      	adds	r0, #16
 80109d6:	f003 fa63 	bl	8013ea0 <rcl_publisher_is_valid>
 80109da:	b160      	cbz	r0, 80109f6 <rcl_action_send_cancel_response+0x56>
 80109dc:	b19d      	cbz	r5, 8010a06 <rcl_action_send_cancel_response+0x66>
 80109de:	b196      	cbz	r6, 8010a06 <rcl_action_send_cancel_response+0x66>
 80109e0:	6820      	ldr	r0, [r4, #0]
 80109e2:	4632      	mov	r2, r6
 80109e4:	4629      	mov	r1, r5
 80109e6:	3004      	adds	r0, #4
 80109e8:	f7fe fc48 	bl	800f27c <rcl_send_response>
 80109ec:	b110      	cbz	r0, 80109f4 <rcl_action_send_cancel_response+0x54>
 80109ee:	2802      	cmp	r0, #2
 80109f0:	bf18      	it	ne
 80109f2:	2001      	movne	r0, #1
 80109f4:	bd70      	pop	{r4, r5, r6, pc}
 80109f6:	f7f9 ff2b 	bl	800a850 <rcutils_reset_error>
 80109fa:	f640 0098 	movw	r0, #2200	@ 0x898
 80109fe:	bd70      	pop	{r4, r5, r6, pc}
 8010a00:	f640 0098 	movw	r0, #2200	@ 0x898
 8010a04:	bd70      	pop	{r4, r5, r6, pc}
 8010a06:	200b      	movs	r0, #11
 8010a08:	bd70      	pop	{r4, r5, r6, pc}
 8010a0a:	f640 0098 	movw	r0, #2200	@ 0x898
 8010a0e:	4770      	bx	lr

08010a10 <rcl_action_wait_set_add_action_server>:
 8010a10:	2800      	cmp	r0, #0
 8010a12:	d04d      	beq.n	8010ab0 <rcl_action_wait_set_add_action_server+0xa0>
 8010a14:	b570      	push	{r4, r5, r6, lr}
 8010a16:	460c      	mov	r4, r1
 8010a18:	b159      	cbz	r1, 8010a32 <rcl_action_wait_set_add_action_server+0x22>
 8010a1a:	4605      	mov	r5, r0
 8010a1c:	6808      	ldr	r0, [r1, #0]
 8010a1e:	b140      	cbz	r0, 8010a32 <rcl_action_wait_set_add_action_server+0x22>
 8010a20:	4616      	mov	r6, r2
 8010a22:	f7fe fc43 	bl	800f2ac <rcl_service_is_valid>
 8010a26:	b120      	cbz	r0, 8010a32 <rcl_action_wait_set_add_action_server+0x22>
 8010a28:	6820      	ldr	r0, [r4, #0]
 8010a2a:	3004      	adds	r0, #4
 8010a2c:	f7fe fc3e 	bl	800f2ac <rcl_service_is_valid>
 8010a30:	b910      	cbnz	r0, 8010a38 <rcl_action_wait_set_add_action_server+0x28>
 8010a32:	f640 0098 	movw	r0, #2200	@ 0x898
 8010a36:	bd70      	pop	{r4, r5, r6, pc}
 8010a38:	6820      	ldr	r0, [r4, #0]
 8010a3a:	3008      	adds	r0, #8
 8010a3c:	f7fe fc36 	bl	800f2ac <rcl_service_is_valid>
 8010a40:	2800      	cmp	r0, #0
 8010a42:	d0f6      	beq.n	8010a32 <rcl_action_wait_set_add_action_server+0x22>
 8010a44:	6820      	ldr	r0, [r4, #0]
 8010a46:	300c      	adds	r0, #12
 8010a48:	f003 fa42 	bl	8013ed0 <rcl_publisher_is_valid_except_context>
 8010a4c:	2800      	cmp	r0, #0
 8010a4e:	d0f0      	beq.n	8010a32 <rcl_action_wait_set_add_action_server+0x22>
 8010a50:	6820      	ldr	r0, [r4, #0]
 8010a52:	3010      	adds	r0, #16
 8010a54:	f003 fa3c 	bl	8013ed0 <rcl_publisher_is_valid_except_context>
 8010a58:	2800      	cmp	r0, #0
 8010a5a:	d0ea      	beq.n	8010a32 <rcl_action_wait_set_add_action_server+0x22>
 8010a5c:	6821      	ldr	r1, [r4, #0]
 8010a5e:	4628      	mov	r0, r5
 8010a60:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8010a64:	f7ff fad0 	bl	8010008 <rcl_wait_set_add_service>
 8010a68:	2800      	cmp	r0, #0
 8010a6a:	d1e4      	bne.n	8010a36 <rcl_action_wait_set_add_action_server+0x26>
 8010a6c:	6821      	ldr	r1, [r4, #0]
 8010a6e:	4628      	mov	r0, r5
 8010a70:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8010a74:	3104      	adds	r1, #4
 8010a76:	f7ff fac7 	bl	8010008 <rcl_wait_set_add_service>
 8010a7a:	2800      	cmp	r0, #0
 8010a7c:	d1db      	bne.n	8010a36 <rcl_action_wait_set_add_action_server+0x26>
 8010a7e:	6821      	ldr	r1, [r4, #0]
 8010a80:	4628      	mov	r0, r5
 8010a82:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8010a86:	3108      	adds	r1, #8
 8010a88:	f7ff fabe 	bl	8010008 <rcl_wait_set_add_service>
 8010a8c:	2800      	cmp	r0, #0
 8010a8e:	d1d2      	bne.n	8010a36 <rcl_action_wait_set_add_action_server+0x26>
 8010a90:	6821      	ldr	r1, [r4, #0]
 8010a92:	4628      	mov	r0, r5
 8010a94:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8010a98:	3114      	adds	r1, #20
 8010a9a:	f7ff fa59 	bl	800ff50 <rcl_wait_set_add_timer>
 8010a9e:	2800      	cmp	r0, #0
 8010aa0:	d1c9      	bne.n	8010a36 <rcl_action_wait_set_add_action_server+0x26>
 8010aa2:	2e00      	cmp	r6, #0
 8010aa4:	d0c7      	beq.n	8010a36 <rcl_action_wait_set_add_action_server+0x26>
 8010aa6:	6823      	ldr	r3, [r4, #0]
 8010aa8:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8010aac:	6033      	str	r3, [r6, #0]
 8010aae:	bd70      	pop	{r4, r5, r6, pc}
 8010ab0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010ab4:	4770      	bx	lr
 8010ab6:	bf00      	nop

08010ab8 <rcl_action_server_wait_set_get_entities_ready>:
 8010ab8:	2800      	cmp	r0, #0
 8010aba:	d05a      	beq.n	8010b72 <rcl_action_server_wait_set_get_entities_ready+0xba>
 8010abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010abe:	460c      	mov	r4, r1
 8010ac0:	b161      	cbz	r1, 8010adc <rcl_action_server_wait_set_get_entities_ready+0x24>
 8010ac2:	4605      	mov	r5, r0
 8010ac4:	6808      	ldr	r0, [r1, #0]
 8010ac6:	b148      	cbz	r0, 8010adc <rcl_action_server_wait_set_get_entities_ready+0x24>
 8010ac8:	4616      	mov	r6, r2
 8010aca:	461f      	mov	r7, r3
 8010acc:	f7fe fbee 	bl	800f2ac <rcl_service_is_valid>
 8010ad0:	b120      	cbz	r0, 8010adc <rcl_action_server_wait_set_get_entities_ready+0x24>
 8010ad2:	6820      	ldr	r0, [r4, #0]
 8010ad4:	3004      	adds	r0, #4
 8010ad6:	f7fe fbe9 	bl	800f2ac <rcl_service_is_valid>
 8010ada:	b910      	cbnz	r0, 8010ae2 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8010adc:	f640 0098 	movw	r0, #2200	@ 0x898
 8010ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ae2:	6820      	ldr	r0, [r4, #0]
 8010ae4:	3008      	adds	r0, #8
 8010ae6:	f7fe fbe1 	bl	800f2ac <rcl_service_is_valid>
 8010aea:	2800      	cmp	r0, #0
 8010aec:	d0f6      	beq.n	8010adc <rcl_action_server_wait_set_get_entities_ready+0x24>
 8010aee:	6820      	ldr	r0, [r4, #0]
 8010af0:	300c      	adds	r0, #12
 8010af2:	f003 f9ed 	bl	8013ed0 <rcl_publisher_is_valid_except_context>
 8010af6:	2800      	cmp	r0, #0
 8010af8:	d0f0      	beq.n	8010adc <rcl_action_server_wait_set_get_entities_ready+0x24>
 8010afa:	6820      	ldr	r0, [r4, #0]
 8010afc:	3010      	adds	r0, #16
 8010afe:	f003 f9e7 	bl	8013ed0 <rcl_publisher_is_valid_except_context>
 8010b02:	2800      	cmp	r0, #0
 8010b04:	d0ea      	beq.n	8010adc <rcl_action_server_wait_set_get_entities_ready+0x24>
 8010b06:	b3be      	cbz	r6, 8010b78 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8010b08:	b3b7      	cbz	r7, 8010b78 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8010b0a:	9b06      	ldr	r3, [sp, #24]
 8010b0c:	b3a3      	cbz	r3, 8010b78 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8010b0e:	9b07      	ldr	r3, [sp, #28]
 8010b10:	b393      	cbz	r3, 8010b78 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8010b12:	6821      	ldr	r1, [r4, #0]
 8010b14:	692a      	ldr	r2, [r5, #16]
 8010b16:	6a2c      	ldr	r4, [r5, #32]
 8010b18:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8010b1c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8010b20:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8010b24:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8010b28:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8010b2c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8010b30:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8010b34:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8010b38:	1a64      	subs	r4, r4, r1
 8010b3a:	fab4 f484 	clz	r4, r4
 8010b3e:	0964      	lsrs	r4, r4, #5
 8010b40:	7034      	strb	r4, [r6, #0]
 8010b42:	1d0c      	adds	r4, r1, #4
 8010b44:	1b1b      	subs	r3, r3, r4
 8010b46:	fab3 f383 	clz	r3, r3
 8010b4a:	095b      	lsrs	r3, r3, #5
 8010b4c:	f101 0408 	add.w	r4, r1, #8
 8010b50:	703b      	strb	r3, [r7, #0]
 8010b52:	f101 0314 	add.w	r3, r1, #20
 8010b56:	1b01      	subs	r1, r0, r4
 8010b58:	1ad3      	subs	r3, r2, r3
 8010b5a:	fab1 f181 	clz	r1, r1
 8010b5e:	9a06      	ldr	r2, [sp, #24]
 8010b60:	0949      	lsrs	r1, r1, #5
 8010b62:	7011      	strb	r1, [r2, #0]
 8010b64:	fab3 f383 	clz	r3, r3
 8010b68:	9a07      	ldr	r2, [sp, #28]
 8010b6a:	095b      	lsrs	r3, r3, #5
 8010b6c:	2000      	movs	r0, #0
 8010b6e:	7013      	strb	r3, [r2, #0]
 8010b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b72:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8010b76:	4770      	bx	lr
 8010b78:	200b      	movs	r0, #11
 8010b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010b7c <_execute_event_handler>:
 8010b7c:	2002      	movs	r0, #2
 8010b7e:	4770      	bx	lr

08010b80 <_cancel_goal_event_handler>:
 8010b80:	2003      	movs	r0, #3
 8010b82:	4770      	bx	lr

08010b84 <_succeed_event_handler>:
 8010b84:	2004      	movs	r0, #4
 8010b86:	4770      	bx	lr

08010b88 <_abort_event_handler>:
 8010b88:	2006      	movs	r0, #6
 8010b8a:	4770      	bx	lr

08010b8c <_canceled_event_handler>:
 8010b8c:	2005      	movs	r0, #5
 8010b8e:	4770      	bx	lr

08010b90 <rcl_action_transition_goal_state>:
 8010b90:	b2c2      	uxtb	r2, r0
 8010b92:	2a06      	cmp	r2, #6
 8010b94:	d80c      	bhi.n	8010bb0 <rcl_action_transition_goal_state+0x20>
 8010b96:	2904      	cmp	r1, #4
 8010b98:	d80a      	bhi.n	8010bb0 <rcl_action_transition_goal_state+0x20>
 8010b9a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8010b9e:	b410      	push	{r4}
 8010ba0:	1853      	adds	r3, r2, r1
 8010ba2:	4c06      	ldr	r4, [pc, #24]	@ (8010bbc <rcl_action_transition_goal_state+0x2c>)
 8010ba4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8010ba8:	b123      	cbz	r3, 8010bb4 <rcl_action_transition_goal_state+0x24>
 8010baa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010bae:	4718      	bx	r3
 8010bb0:	2000      	movs	r0, #0
 8010bb2:	4770      	bx	lr
 8010bb4:	2000      	movs	r0, #0
 8010bb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010bba:	4770      	bx	lr
 8010bbc:	08015b94 	.word	0x08015b94

08010bc0 <rcl_action_get_zero_initialized_cancel_response>:
 8010bc0:	b510      	push	{r4, lr}
 8010bc2:	4c07      	ldr	r4, [pc, #28]	@ (8010be0 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8010bc4:	4686      	mov	lr, r0
 8010bc6:	4684      	mov	ip, r0
 8010bc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010bca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010bce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010bd0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010bd4:	6823      	ldr	r3, [r4, #0]
 8010bd6:	f8cc 3000 	str.w	r3, [ip]
 8010bda:	4670      	mov	r0, lr
 8010bdc:	bd10      	pop	{r4, pc}
 8010bde:	bf00      	nop
 8010be0:	08015c20 	.word	0x08015c20

08010be4 <rclc_action_send_result_request>:
 8010be4:	b1d0      	cbz	r0, 8010c1c <rclc_action_send_result_request+0x38>
 8010be6:	b500      	push	{lr}
 8010be8:	4684      	mov	ip, r0
 8010bea:	b087      	sub	sp, #28
 8010bec:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8010bf0:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8010bf4:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8010bf8:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8010bfc:	f10d 0e08 	add.w	lr, sp, #8
 8010c00:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010c04:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8010c08:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8010c0c:	a902      	add	r1, sp, #8
 8010c0e:	3010      	adds	r0, #16
 8010c10:	f7ff fbda 	bl	80103c8 <rcl_action_send_result_request>
 8010c14:	b920      	cbnz	r0, 8010c20 <rclc_action_send_result_request+0x3c>
 8010c16:	b007      	add	sp, #28
 8010c18:	f85d fb04 	ldr.w	pc, [sp], #4
 8010c1c:	200b      	movs	r0, #11
 8010c1e:	4770      	bx	lr
 8010c20:	9001      	str	r0, [sp, #4]
 8010c22:	f7f9 fe15 	bl	800a850 <rcutils_reset_error>
 8010c26:	9801      	ldr	r0, [sp, #4]
 8010c28:	b007      	add	sp, #28
 8010c2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8010c2e:	bf00      	nop

08010c30 <rclc_action_take_goal_handle>:
 8010c30:	b160      	cbz	r0, 8010c4c <rclc_action_take_goal_handle+0x1c>
 8010c32:	6883      	ldr	r3, [r0, #8]
 8010c34:	b143      	cbz	r3, 8010c48 <rclc_action_take_goal_handle+0x18>
 8010c36:	6819      	ldr	r1, [r3, #0]
 8010c38:	6081      	str	r1, [r0, #8]
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	721a      	strb	r2, [r3, #8]
 8010c3e:	68c1      	ldr	r1, [r0, #12]
 8010c40:	6019      	str	r1, [r3, #0]
 8010c42:	621a      	str	r2, [r3, #32]
 8010c44:	849a      	strh	r2, [r3, #36]	@ 0x24
 8010c46:	60c3      	str	r3, [r0, #12]
 8010c48:	4618      	mov	r0, r3
 8010c4a:	4770      	bx	lr
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	e7fb      	b.n	8010c48 <rclc_action_take_goal_handle+0x18>

08010c50 <rclc_action_remove_used_goal_handle>:
 8010c50:	b180      	cbz	r0, 8010c74 <rclc_action_remove_used_goal_handle+0x24>
 8010c52:	b179      	cbz	r1, 8010c74 <rclc_action_remove_used_goal_handle+0x24>
 8010c54:	68c3      	ldr	r3, [r0, #12]
 8010c56:	4299      	cmp	r1, r3
 8010c58:	d00d      	beq.n	8010c76 <rclc_action_remove_used_goal_handle+0x26>
 8010c5a:	b12b      	cbz	r3, 8010c68 <rclc_action_remove_used_goal_handle+0x18>
 8010c5c:	681a      	ldr	r2, [r3, #0]
 8010c5e:	4291      	cmp	r1, r2
 8010c60:	d003      	beq.n	8010c6a <rclc_action_remove_used_goal_handle+0x1a>
 8010c62:	4613      	mov	r3, r2
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d1f9      	bne.n	8010c5c <rclc_action_remove_used_goal_handle+0xc>
 8010c68:	4770      	bx	lr
 8010c6a:	680a      	ldr	r2, [r1, #0]
 8010c6c:	601a      	str	r2, [r3, #0]
 8010c6e:	6883      	ldr	r3, [r0, #8]
 8010c70:	600b      	str	r3, [r1, #0]
 8010c72:	6081      	str	r1, [r0, #8]
 8010c74:	4770      	bx	lr
 8010c76:	680b      	ldr	r3, [r1, #0]
 8010c78:	60c3      	str	r3, [r0, #12]
 8010c7a:	e7f8      	b.n	8010c6e <rclc_action_remove_used_goal_handle+0x1e>

08010c7c <rclc_action_find_goal_handle_by_uuid>:
 8010c7c:	b538      	push	{r3, r4, r5, lr}
 8010c7e:	b180      	cbz	r0, 8010ca2 <rclc_action_find_goal_handle_by_uuid+0x26>
 8010c80:	460d      	mov	r5, r1
 8010c82:	b181      	cbz	r1, 8010ca6 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8010c84:	68c4      	ldr	r4, [r0, #12]
 8010c86:	b914      	cbnz	r4, 8010c8e <rclc_action_find_goal_handle_by_uuid+0x12>
 8010c88:	e009      	b.n	8010c9e <rclc_action_find_goal_handle_by_uuid+0x22>
 8010c8a:	6824      	ldr	r4, [r4, #0]
 8010c8c:	b13c      	cbz	r4, 8010c9e <rclc_action_find_goal_handle_by_uuid+0x22>
 8010c8e:	f104 0009 	add.w	r0, r4, #9
 8010c92:	2210      	movs	r2, #16
 8010c94:	4629      	mov	r1, r5
 8010c96:	f003 fd0d 	bl	80146b4 <memcmp>
 8010c9a:	2800      	cmp	r0, #0
 8010c9c:	d1f5      	bne.n	8010c8a <rclc_action_find_goal_handle_by_uuid+0xe>
 8010c9e:	4620      	mov	r0, r4
 8010ca0:	bd38      	pop	{r3, r4, r5, pc}
 8010ca2:	4604      	mov	r4, r0
 8010ca4:	e7fb      	b.n	8010c9e <rclc_action_find_goal_handle_by_uuid+0x22>
 8010ca6:	460c      	mov	r4, r1
 8010ca8:	e7f9      	b.n	8010c9e <rclc_action_find_goal_handle_by_uuid+0x22>
 8010caa:	bf00      	nop

08010cac <rclc_action_find_first_handle_by_status>:
 8010cac:	b140      	cbz	r0, 8010cc0 <rclc_action_find_first_handle_by_status+0x14>
 8010cae:	68c0      	ldr	r0, [r0, #12]
 8010cb0:	b910      	cbnz	r0, 8010cb8 <rclc_action_find_first_handle_by_status+0xc>
 8010cb2:	e005      	b.n	8010cc0 <rclc_action_find_first_handle_by_status+0x14>
 8010cb4:	6800      	ldr	r0, [r0, #0]
 8010cb6:	b118      	cbz	r0, 8010cc0 <rclc_action_find_first_handle_by_status+0x14>
 8010cb8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8010cbc:	428b      	cmp	r3, r1
 8010cbe:	d1f9      	bne.n	8010cb4 <rclc_action_find_first_handle_by_status+0x8>
 8010cc0:	4770      	bx	lr
 8010cc2:	bf00      	nop

08010cc4 <rclc_action_find_first_terminated_handle>:
 8010cc4:	b140      	cbz	r0, 8010cd8 <rclc_action_find_first_terminated_handle+0x14>
 8010cc6:	68c0      	ldr	r0, [r0, #12]
 8010cc8:	b910      	cbnz	r0, 8010cd0 <rclc_action_find_first_terminated_handle+0xc>
 8010cca:	e005      	b.n	8010cd8 <rclc_action_find_first_terminated_handle+0x14>
 8010ccc:	6800      	ldr	r0, [r0, #0]
 8010cce:	b118      	cbz	r0, 8010cd8 <rclc_action_find_first_terminated_handle+0x14>
 8010cd0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8010cd4:	2b03      	cmp	r3, #3
 8010cd6:	ddf9      	ble.n	8010ccc <rclc_action_find_first_terminated_handle+0x8>
 8010cd8:	4770      	bx	lr
 8010cda:	bf00      	nop

08010cdc <rclc_action_find_handle_by_goal_request_sequence_number>:
 8010cdc:	b170      	cbz	r0, 8010cfc <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8010cde:	68c0      	ldr	r0, [r0, #12]
 8010ce0:	b160      	cbz	r0, 8010cfc <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8010ce2:	b410      	push	{r4}
 8010ce4:	e001      	b.n	8010cea <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8010ce6:	6800      	ldr	r0, [r0, #0]
 8010ce8:	b128      	cbz	r0, 8010cf6 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8010cea:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8010cee:	4299      	cmp	r1, r3
 8010cf0:	bf08      	it	eq
 8010cf2:	4294      	cmpeq	r4, r2
 8010cf4:	d1f7      	bne.n	8010ce6 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8010cf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010cfa:	4770      	bx	lr
 8010cfc:	4770      	bx	lr
 8010cfe:	bf00      	nop

08010d00 <rclc_action_find_handle_by_result_request_sequence_number>:
 8010d00:	b170      	cbz	r0, 8010d20 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8010d02:	68c0      	ldr	r0, [r0, #12]
 8010d04:	b160      	cbz	r0, 8010d20 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8010d06:	b410      	push	{r4}
 8010d08:	e001      	b.n	8010d0e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8010d0a:	6800      	ldr	r0, [r0, #0]
 8010d0c:	b128      	cbz	r0, 8010d1a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8010d0e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8010d12:	4299      	cmp	r1, r3
 8010d14:	bf08      	it	eq
 8010d16:	4294      	cmpeq	r4, r2
 8010d18:	d1f7      	bne.n	8010d0a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8010d1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d1e:	4770      	bx	lr
 8010d20:	4770      	bx	lr
 8010d22:	bf00      	nop

08010d24 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8010d24:	b170      	cbz	r0, 8010d44 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8010d26:	68c0      	ldr	r0, [r0, #12]
 8010d28:	b160      	cbz	r0, 8010d44 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8010d2a:	b410      	push	{r4}
 8010d2c:	e001      	b.n	8010d32 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8010d2e:	6800      	ldr	r0, [r0, #0]
 8010d30:	b128      	cbz	r0, 8010d3e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8010d32:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8010d36:	4299      	cmp	r1, r3
 8010d38:	bf08      	it	eq
 8010d3a:	4294      	cmpeq	r4, r2
 8010d3c:	d1f7      	bne.n	8010d2e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8010d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d42:	4770      	bx	lr
 8010d44:	4770      	bx	lr
 8010d46:	bf00      	nop

08010d48 <rclc_action_find_first_handle_with_goal_response>:
 8010d48:	b140      	cbz	r0, 8010d5c <rclc_action_find_first_handle_with_goal_response+0x14>
 8010d4a:	68c0      	ldr	r0, [r0, #12]
 8010d4c:	b910      	cbnz	r0, 8010d54 <rclc_action_find_first_handle_with_goal_response+0xc>
 8010d4e:	e005      	b.n	8010d5c <rclc_action_find_first_handle_with_goal_response+0x14>
 8010d50:	6800      	ldr	r0, [r0, #0]
 8010d52:	b118      	cbz	r0, 8010d5c <rclc_action_find_first_handle_with_goal_response+0x14>
 8010d54:	f890 3020 	ldrb.w	r3, [r0, #32]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d0f9      	beq.n	8010d50 <rclc_action_find_first_handle_with_goal_response+0x8>
 8010d5c:	4770      	bx	lr
 8010d5e:	bf00      	nop

08010d60 <rclc_action_find_first_handle_with_result_response>:
 8010d60:	b140      	cbz	r0, 8010d74 <rclc_action_find_first_handle_with_result_response+0x14>
 8010d62:	68c0      	ldr	r0, [r0, #12]
 8010d64:	b910      	cbnz	r0, 8010d6c <rclc_action_find_first_handle_with_result_response+0xc>
 8010d66:	e005      	b.n	8010d74 <rclc_action_find_first_handle_with_result_response+0x14>
 8010d68:	6800      	ldr	r0, [r0, #0]
 8010d6a:	b118      	cbz	r0, 8010d74 <rclc_action_find_first_handle_with_result_response+0x14>
 8010d6c:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d0f9      	beq.n	8010d68 <rclc_action_find_first_handle_with_result_response+0x8>
 8010d74:	4770      	bx	lr
 8010d76:	bf00      	nop

08010d78 <rclc_action_server_response_goal_request>:
 8010d78:	b198      	cbz	r0, 8010da2 <rclc_action_server_response_goal_request+0x2a>
 8010d7a:	b510      	push	{r4, lr}
 8010d7c:	6844      	ldr	r4, [r0, #4]
 8010d7e:	b086      	sub	sp, #24
 8010d80:	2200      	movs	r2, #0
 8010d82:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8010d86:	460b      	mov	r3, r1
 8010d88:	9205      	str	r2, [sp, #20]
 8010d8a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8010d8e:	aa03      	add	r2, sp, #12
 8010d90:	f104 0010 	add.w	r0, r4, #16
 8010d94:	f88d 300c 	strb.w	r3, [sp, #12]
 8010d98:	f7ff fd4a 	bl	8010830 <rcl_action_send_goal_response>
 8010d9c:	b918      	cbnz	r0, 8010da6 <rclc_action_server_response_goal_request+0x2e>
 8010d9e:	b006      	add	sp, #24
 8010da0:	bd10      	pop	{r4, pc}
 8010da2:	200b      	movs	r0, #11
 8010da4:	4770      	bx	lr
 8010da6:	9001      	str	r0, [sp, #4]
 8010da8:	f7f9 fd52 	bl	800a850 <rcutils_reset_error>
 8010dac:	9801      	ldr	r0, [sp, #4]
 8010dae:	b006      	add	sp, #24
 8010db0:	bd10      	pop	{r4, pc}
 8010db2:	bf00      	nop
 8010db4:	0000      	movs	r0, r0
	...

08010db8 <rclc_action_server_goal_cancel_accept>:
 8010db8:	b310      	cbz	r0, 8010e00 <rclc_action_server_goal_cancel_accept+0x48>
 8010dba:	b510      	push	{r4, lr}
 8010dbc:	b090      	sub	sp, #64	@ 0x40
 8010dbe:	4604      	mov	r4, r0
 8010dc0:	a806      	add	r0, sp, #24
 8010dc2:	f7ff fefd 	bl	8010bc0 <rcl_action_get_zero_initialized_cancel_response>
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8010dcc:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8010dd0:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8010dd4:	f88d 3018 	strb.w	r3, [sp, #24]
 8010dd8:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8010ddc:	f8cd d01c 	str.w	sp, [sp, #28]
 8010de0:	46ec      	mov	ip, sp
 8010de2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010de6:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8010e08 <rclc_action_server_goal_cancel_accept+0x50>
 8010dea:	6860      	ldr	r0, [r4, #4]
 8010dec:	aa06      	add	r2, sp, #24
 8010dee:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8010df2:	3010      	adds	r0, #16
 8010df4:	ed8d 7b08 	vstr	d7, [sp, #32]
 8010df8:	f7ff fdd2 	bl	80109a0 <rcl_action_send_cancel_response>
 8010dfc:	b010      	add	sp, #64	@ 0x40
 8010dfe:	bd10      	pop	{r4, pc}
 8010e00:	200b      	movs	r0, #11
 8010e02:	4770      	bx	lr
 8010e04:	f3af 8000 	nop.w
 8010e08:	00000001 	.word	0x00000001
 8010e0c:	00000001 	.word	0x00000001

08010e10 <rclc_action_server_goal_cancel_reject>:
 8010e10:	b082      	sub	sp, #8
 8010e12:	b530      	push	{r4, r5, lr}
 8010e14:	b08b      	sub	sp, #44	@ 0x2c
 8010e16:	ac0e      	add	r4, sp, #56	@ 0x38
 8010e18:	e884 000c 	stmia.w	r4, {r2, r3}
 8010e1c:	b188      	cbz	r0, 8010e42 <rclc_action_server_goal_cancel_reject+0x32>
 8010e1e:	4604      	mov	r4, r0
 8010e20:	a801      	add	r0, sp, #4
 8010e22:	460d      	mov	r5, r1
 8010e24:	f7ff fecc 	bl	8010bc0 <rcl_action_get_zero_initialized_cancel_response>
 8010e28:	aa01      	add	r2, sp, #4
 8010e2a:	a90e      	add	r1, sp, #56	@ 0x38
 8010e2c:	f104 0010 	add.w	r0, r4, #16
 8010e30:	f88d 5004 	strb.w	r5, [sp, #4]
 8010e34:	f7ff fdb4 	bl	80109a0 <rcl_action_send_cancel_response>
 8010e38:	b00b      	add	sp, #44	@ 0x2c
 8010e3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010e3e:	b002      	add	sp, #8
 8010e40:	4770      	bx	lr
 8010e42:	200b      	movs	r0, #11
 8010e44:	b00b      	add	sp, #44	@ 0x2c
 8010e46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010e4a:	b002      	add	sp, #8
 8010e4c:	4770      	bx	lr
 8010e4e:	bf00      	nop

08010e50 <__atomic_load_8>:
 8010e50:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8010e54:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8010e58:	4a15      	ldr	r2, [pc, #84]	@ (8010eb0 <__atomic_load_8+0x60>)
 8010e5a:	4b16      	ldr	r3, [pc, #88]	@ (8010eb4 <__atomic_load_8+0x64>)
 8010e5c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8010e60:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8010e64:	fb02 f101 	mul.w	r1, r2, r1
 8010e68:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8010e6c:	fba3 2301 	umull	r2, r3, r3, r1
 8010e70:	091b      	lsrs	r3, r3, #4
 8010e72:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8010e76:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8010e7a:	b4d0      	push	{r4, r6, r7}
 8010e7c:	4c0e      	ldr	r4, [pc, #56]	@ (8010eb8 <__atomic_load_8+0x68>)
 8010e7e:	1ac9      	subs	r1, r1, r3
 8010e80:	1862      	adds	r2, r4, r1
 8010e82:	f04f 0c01 	mov.w	ip, #1
 8010e86:	e8d2 3f4f 	ldrexb	r3, [r2]
 8010e8a:	e8c2 cf46 	strexb	r6, ip, [r2]
 8010e8e:	2e00      	cmp	r6, #0
 8010e90:	d1f9      	bne.n	8010e86 <__atomic_load_8+0x36>
 8010e92:	f3bf 8f5b 	dmb	ish
 8010e96:	b2db      	uxtb	r3, r3
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d1f4      	bne.n	8010e86 <__atomic_load_8+0x36>
 8010e9c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8010ea0:	f3bf 8f5b 	dmb	ish
 8010ea4:	5463      	strb	r3, [r4, r1]
 8010ea6:	4630      	mov	r0, r6
 8010ea8:	4639      	mov	r1, r7
 8010eaa:	bcd0      	pop	{r4, r6, r7}
 8010eac:	4770      	bx	lr
 8010eae:	bf00      	nop
 8010eb0:	27d4eb2d 	.word	0x27d4eb2d
 8010eb4:	b21642c9 	.word	0xb21642c9
 8010eb8:	2000abbc 	.word	0x2000abbc

08010ebc <__atomic_store_8>:
 8010ebc:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8010ec0:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8010ec4:	b570      	push	{r4, r5, r6, lr}
 8010ec6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8010eca:	4c14      	ldr	r4, [pc, #80]	@ (8010f1c <__atomic_store_8+0x60>)
 8010ecc:	4d14      	ldr	r5, [pc, #80]	@ (8010f20 <__atomic_store_8+0x64>)
 8010ece:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8010ed2:	fb04 f101 	mul.w	r1, r4, r1
 8010ed6:	4c13      	ldr	r4, [pc, #76]	@ (8010f24 <__atomic_store_8+0x68>)
 8010ed8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8010edc:	fba4 4e01 	umull	r4, lr, r4, r1
 8010ee0:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8010ee4:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8010ee8:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8010eec:	eba1 0e0e 	sub.w	lr, r1, lr
 8010ef0:	eb05 0c0e 	add.w	ip, r5, lr
 8010ef4:	f04f 0401 	mov.w	r4, #1
 8010ef8:	e8dc 1f4f 	ldrexb	r1, [ip]
 8010efc:	e8cc 4f46 	strexb	r6, r4, [ip]
 8010f00:	2e00      	cmp	r6, #0
 8010f02:	d1f9      	bne.n	8010ef8 <__atomic_store_8+0x3c>
 8010f04:	f3bf 8f5b 	dmb	ish
 8010f08:	b2c9      	uxtb	r1, r1
 8010f0a:	2900      	cmp	r1, #0
 8010f0c:	d1f4      	bne.n	8010ef8 <__atomic_store_8+0x3c>
 8010f0e:	e9c0 2300 	strd	r2, r3, [r0]
 8010f12:	f3bf 8f5b 	dmb	ish
 8010f16:	f805 100e 	strb.w	r1, [r5, lr]
 8010f1a:	bd70      	pop	{r4, r5, r6, pc}
 8010f1c:	27d4eb2d 	.word	0x27d4eb2d
 8010f20:	2000abbc 	.word	0x2000abbc
 8010f24:	b21642c9 	.word	0xb21642c9

08010f28 <__atomic_exchange_8>:
 8010f28:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8010f2c:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8010f30:	4916      	ldr	r1, [pc, #88]	@ (8010f8c <__atomic_exchange_8+0x64>)
 8010f32:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8010f36:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8010f3a:	fb01 fc0c 	mul.w	ip, r1, ip
 8010f3e:	4914      	ldr	r1, [pc, #80]	@ (8010f90 <__atomic_exchange_8+0x68>)
 8010f40:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8010f44:	b570      	push	{r4, r5, r6, lr}
 8010f46:	4605      	mov	r5, r0
 8010f48:	fba1 010c 	umull	r0, r1, r1, ip
 8010f4c:	0909      	lsrs	r1, r1, #4
 8010f4e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8010f52:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8010f56:	4e0f      	ldr	r6, [pc, #60]	@ (8010f94 <__atomic_exchange_8+0x6c>)
 8010f58:	ebac 0c01 	sub.w	ip, ip, r1
 8010f5c:	eb06 010c 	add.w	r1, r6, ip
 8010f60:	f04f 0e01 	mov.w	lr, #1
 8010f64:	e8d1 4f4f 	ldrexb	r4, [r1]
 8010f68:	e8c1 ef40 	strexb	r0, lr, [r1]
 8010f6c:	2800      	cmp	r0, #0
 8010f6e:	d1f9      	bne.n	8010f64 <__atomic_exchange_8+0x3c>
 8010f70:	f3bf 8f5b 	dmb	ish
 8010f74:	b2e4      	uxtb	r4, r4
 8010f76:	2c00      	cmp	r4, #0
 8010f78:	d1f4      	bne.n	8010f64 <__atomic_exchange_8+0x3c>
 8010f7a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010f7e:	e9c5 2300 	strd	r2, r3, [r5]
 8010f82:	f3bf 8f5b 	dmb	ish
 8010f86:	f806 400c 	strb.w	r4, [r6, ip]
 8010f8a:	bd70      	pop	{r4, r5, r6, pc}
 8010f8c:	27d4eb2d 	.word	0x27d4eb2d
 8010f90:	b21642c9 	.word	0xb21642c9
 8010f94:	2000abbc 	.word	0x2000abbc

08010f98 <rcutils_get_env>:
 8010f98:	b168      	cbz	r0, 8010fb6 <rcutils_get_env+0x1e>
 8010f9a:	b510      	push	{r4, lr}
 8010f9c:	460c      	mov	r4, r1
 8010f9e:	b129      	cbz	r1, 8010fac <rcutils_get_env+0x14>
 8010fa0:	f002 ffe4 	bl	8013f6c <getenv>
 8010fa4:	b120      	cbz	r0, 8010fb0 <rcutils_get_env+0x18>
 8010fa6:	6020      	str	r0, [r4, #0]
 8010fa8:	2000      	movs	r0, #0
 8010faa:	bd10      	pop	{r4, pc}
 8010fac:	4803      	ldr	r0, [pc, #12]	@ (8010fbc <rcutils_get_env+0x24>)
 8010fae:	bd10      	pop	{r4, pc}
 8010fb0:	4b03      	ldr	r3, [pc, #12]	@ (8010fc0 <rcutils_get_env+0x28>)
 8010fb2:	6023      	str	r3, [r4, #0]
 8010fb4:	bd10      	pop	{r4, pc}
 8010fb6:	4803      	ldr	r0, [pc, #12]	@ (8010fc4 <rcutils_get_env+0x2c>)
 8010fb8:	4770      	bx	lr
 8010fba:	bf00      	nop
 8010fbc:	08015c60 	.word	0x08015c60
 8010fc0:	08015d84 	.word	0x08015d84
 8010fc4:	08015c44 	.word	0x08015c44

08010fc8 <rcutils_is_directory>:
 8010fc8:	2000      	movs	r0, #0
 8010fca:	4770      	bx	lr

08010fcc <rcutils_join_path>:
 8010fcc:	b082      	sub	sp, #8
 8010fce:	e88d 000c 	stmia.w	sp, {r2, r3}
 8010fd2:	2000      	movs	r0, #0
 8010fd4:	b002      	add	sp, #8
 8010fd6:	4770      	bx	lr

08010fd8 <rcutils_to_native_path>:
 8010fd8:	b084      	sub	sp, #16
 8010fda:	a801      	add	r0, sp, #4
 8010fdc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8010fe0:	b004      	add	sp, #16
 8010fe2:	2000      	movs	r0, #0
 8010fe4:	4770      	bx	lr
 8010fe6:	bf00      	nop

08010fe8 <rcutils_format_string_limit>:
 8010fe8:	b40f      	push	{r0, r1, r2, r3}
 8010fea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010fec:	b083      	sub	sp, #12
 8010fee:	ac08      	add	r4, sp, #32
 8010ff0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8010ff2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010ff6:	b34e      	cbz	r6, 801104c <rcutils_format_string_limit+0x64>
 8010ff8:	a808      	add	r0, sp, #32
 8010ffa:	f7f9 fc03 	bl	800a804 <rcutils_allocator_is_valid>
 8010ffe:	b328      	cbz	r0, 801104c <rcutils_format_string_limit+0x64>
 8011000:	2100      	movs	r1, #0
 8011002:	ab0f      	add	r3, sp, #60	@ 0x3c
 8011004:	4632      	mov	r2, r6
 8011006:	4608      	mov	r0, r1
 8011008:	e9cd 3300 	strd	r3, r3, [sp]
 801100c:	f000 f840 	bl	8011090 <rcutils_vsnprintf>
 8011010:	1c43      	adds	r3, r0, #1
 8011012:	4605      	mov	r5, r0
 8011014:	d01a      	beq.n	801104c <rcutils_format_string_limit+0x64>
 8011016:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011018:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801101a:	1c47      	adds	r7, r0, #1
 801101c:	429f      	cmp	r7, r3
 801101e:	bf84      	itt	hi
 8011020:	461f      	movhi	r7, r3
 8011022:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8011026:	4638      	mov	r0, r7
 8011028:	9b08      	ldr	r3, [sp, #32]
 801102a:	4798      	blx	r3
 801102c:	4604      	mov	r4, r0
 801102e:	b168      	cbz	r0, 801104c <rcutils_format_string_limit+0x64>
 8011030:	9b01      	ldr	r3, [sp, #4]
 8011032:	4632      	mov	r2, r6
 8011034:	4639      	mov	r1, r7
 8011036:	f000 f82b 	bl	8011090 <rcutils_vsnprintf>
 801103a:	2800      	cmp	r0, #0
 801103c:	db02      	blt.n	8011044 <rcutils_format_string_limit+0x5c>
 801103e:	2300      	movs	r3, #0
 8011040:	5563      	strb	r3, [r4, r5]
 8011042:	e004      	b.n	801104e <rcutils_format_string_limit+0x66>
 8011044:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011046:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011048:	4620      	mov	r0, r4
 801104a:	4798      	blx	r3
 801104c:	2400      	movs	r4, #0
 801104e:	4620      	mov	r0, r4
 8011050:	b003      	add	sp, #12
 8011052:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011056:	b004      	add	sp, #16
 8011058:	4770      	bx	lr
 801105a:	bf00      	nop

0801105c <rcutils_snprintf>:
 801105c:	b40c      	push	{r2, r3}
 801105e:	b530      	push	{r4, r5, lr}
 8011060:	b083      	sub	sp, #12
 8011062:	ab06      	add	r3, sp, #24
 8011064:	f853 2b04 	ldr.w	r2, [r3], #4
 8011068:	9301      	str	r3, [sp, #4]
 801106a:	b152      	cbz	r2, 8011082 <rcutils_snprintf+0x26>
 801106c:	b138      	cbz	r0, 801107e <rcutils_snprintf+0x22>
 801106e:	b141      	cbz	r1, 8011082 <rcutils_snprintf+0x26>
 8011070:	f003 fb12 	bl	8014698 <vsniprintf>
 8011074:	b003      	add	sp, #12
 8011076:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801107a:	b002      	add	sp, #8
 801107c:	4770      	bx	lr
 801107e:	2900      	cmp	r1, #0
 8011080:	d0f6      	beq.n	8011070 <rcutils_snprintf+0x14>
 8011082:	f003 fc07 	bl	8014894 <__errno>
 8011086:	2316      	movs	r3, #22
 8011088:	6003      	str	r3, [r0, #0]
 801108a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801108e:	e7f1      	b.n	8011074 <rcutils_snprintf+0x18>

08011090 <rcutils_vsnprintf>:
 8011090:	b570      	push	{r4, r5, r6, lr}
 8011092:	b13a      	cbz	r2, 80110a4 <rcutils_vsnprintf+0x14>
 8011094:	b120      	cbz	r0, 80110a0 <rcutils_vsnprintf+0x10>
 8011096:	b129      	cbz	r1, 80110a4 <rcutils_vsnprintf+0x14>
 8011098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801109c:	f003 bafc 	b.w	8014698 <vsniprintf>
 80110a0:	2900      	cmp	r1, #0
 80110a2:	d0f9      	beq.n	8011098 <rcutils_vsnprintf+0x8>
 80110a4:	f003 fbf6 	bl	8014894 <__errno>
 80110a8:	2316      	movs	r3, #22
 80110aa:	6003      	str	r3, [r0, #0]
 80110ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80110b0:	bd70      	pop	{r4, r5, r6, pc}
 80110b2:	bf00      	nop

080110b4 <rcutils_strdup>:
 80110b4:	b084      	sub	sp, #16
 80110b6:	b570      	push	{r4, r5, r6, lr}
 80110b8:	b082      	sub	sp, #8
 80110ba:	ac07      	add	r4, sp, #28
 80110bc:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80110c0:	4605      	mov	r5, r0
 80110c2:	b1b0      	cbz	r0, 80110f2 <rcutils_strdup+0x3e>
 80110c4:	f7ef f8b6 	bl	8000234 <strlen>
 80110c8:	1c42      	adds	r2, r0, #1
 80110ca:	9b07      	ldr	r3, [sp, #28]
 80110cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80110ce:	9201      	str	r2, [sp, #4]
 80110d0:	4606      	mov	r6, r0
 80110d2:	4610      	mov	r0, r2
 80110d4:	4798      	blx	r3
 80110d6:	4604      	mov	r4, r0
 80110d8:	b128      	cbz	r0, 80110e6 <rcutils_strdup+0x32>
 80110da:	9a01      	ldr	r2, [sp, #4]
 80110dc:	4629      	mov	r1, r5
 80110de:	f003 fc06 	bl	80148ee <memcpy>
 80110e2:	2300      	movs	r3, #0
 80110e4:	55a3      	strb	r3, [r4, r6]
 80110e6:	4620      	mov	r0, r4
 80110e8:	b002      	add	sp, #8
 80110ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80110ee:	b004      	add	sp, #16
 80110f0:	4770      	bx	lr
 80110f2:	4604      	mov	r4, r0
 80110f4:	e7f7      	b.n	80110e6 <rcutils_strdup+0x32>
 80110f6:	bf00      	nop

080110f8 <rmw_get_zero_initialized_context>:
 80110f8:	b510      	push	{r4, lr}
 80110fa:	4604      	mov	r4, r0
 80110fc:	3010      	adds	r0, #16
 80110fe:	f7f9 fc13 	bl	800a928 <rmw_get_zero_initialized_init_options>
 8011102:	2300      	movs	r3, #0
 8011104:	2000      	movs	r0, #0
 8011106:	2100      	movs	r1, #0
 8011108:	e9c4 0100 	strd	r0, r1, [r4]
 801110c:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8011110:	60a3      	str	r3, [r4, #8]
 8011112:	4620      	mov	r0, r4
 8011114:	bd10      	pop	{r4, pc}
 8011116:	bf00      	nop

08011118 <rmw_time_equal>:
 8011118:	b4f0      	push	{r4, r5, r6, r7}
 801111a:	b084      	sub	sp, #16
 801111c:	ac04      	add	r4, sp, #16
 801111e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8011122:	4603      	mov	r3, r0
 8011124:	4924      	ldr	r1, [pc, #144]	@ (80111b8 <rmw_time_equal+0xa0>)
 8011126:	9e03      	ldr	r6, [sp, #12]
 8011128:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801112c:	2202      	movs	r2, #2
 801112e:	4299      	cmp	r1, r3
 8011130:	41aa      	sbcs	r2, r5
 8011132:	d330      	bcc.n	8011196 <rmw_time_equal+0x7e>
 8011134:	4c21      	ldr	r4, [pc, #132]	@ (80111bc <rmw_time_equal+0xa4>)
 8011136:	fba3 3204 	umull	r3, r2, r3, r4
 801113a:	fb04 2205 	mla	r2, r4, r5, r2
 801113e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011142:	43dd      	mvns	r5, r3
 8011144:	1a8c      	subs	r4, r1, r2
 8011146:	4285      	cmp	r5, r0
 8011148:	41b4      	sbcs	r4, r6
 801114a:	d332      	bcc.n	80111b2 <rmw_time_equal+0x9a>
 801114c:	eb10 0c03 	adds.w	ip, r0, r3
 8011150:	eb42 0106 	adc.w	r1, r2, r6
 8011154:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8011158:	4817      	ldr	r0, [pc, #92]	@ (80111b8 <rmw_time_equal+0xa0>)
 801115a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801115c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801115e:	2202      	movs	r2, #2
 8011160:	4298      	cmp	r0, r3
 8011162:	41b2      	sbcs	r2, r6
 8011164:	d31c      	bcc.n	80111a0 <rmw_time_equal+0x88>
 8011166:	4c15      	ldr	r4, [pc, #84]	@ (80111bc <rmw_time_equal+0xa4>)
 8011168:	fba3 3204 	umull	r3, r2, r3, r4
 801116c:	fb04 2206 	mla	r2, r4, r6, r2
 8011170:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8011174:	43de      	mvns	r6, r3
 8011176:	1a84      	subs	r4, r0, r2
 8011178:	42ae      	cmp	r6, r5
 801117a:	41bc      	sbcs	r4, r7
 801117c:	d315      	bcc.n	80111aa <rmw_time_equal+0x92>
 801117e:	195b      	adds	r3, r3, r5
 8011180:	eb42 0207 	adc.w	r2, r2, r7
 8011184:	428a      	cmp	r2, r1
 8011186:	bf08      	it	eq
 8011188:	4563      	cmpeq	r3, ip
 801118a:	bf0c      	ite	eq
 801118c:	2001      	moveq	r0, #1
 801118e:	2000      	movne	r0, #0
 8011190:	b004      	add	sp, #16
 8011192:	bcf0      	pop	{r4, r5, r6, r7}
 8011194:	4770      	bx	lr
 8011196:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801119a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801119e:	e7d9      	b.n	8011154 <rmw_time_equal+0x3c>
 80111a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80111a4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80111a8:	e7ec      	b.n	8011184 <rmw_time_equal+0x6c>
 80111aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80111ae:	4602      	mov	r2, r0
 80111b0:	e7e8      	b.n	8011184 <rmw_time_equal+0x6c>
 80111b2:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80111b6:	e7cd      	b.n	8011154 <rmw_time_equal+0x3c>
 80111b8:	25c17d04 	.word	0x25c17d04
 80111bc:	3b9aca00 	.word	0x3b9aca00

080111c0 <rmw_time_total_nsec>:
 80111c0:	b470      	push	{r4, r5, r6}
 80111c2:	b085      	sub	sp, #20
 80111c4:	ac04      	add	r4, sp, #16
 80111c6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80111ca:	4603      	mov	r3, r0
 80111cc:	4912      	ldr	r1, [pc, #72]	@ (8011218 <rmw_time_total_nsec+0x58>)
 80111ce:	9e03      	ldr	r6, [sp, #12]
 80111d0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80111d4:	2202      	movs	r2, #2
 80111d6:	4299      	cmp	r1, r3
 80111d8:	41aa      	sbcs	r2, r5
 80111da:	d311      	bcc.n	8011200 <rmw_time_total_nsec+0x40>
 80111dc:	4c0f      	ldr	r4, [pc, #60]	@ (801121c <rmw_time_total_nsec+0x5c>)
 80111de:	fba3 3204 	umull	r3, r2, r3, r4
 80111e2:	fb04 2205 	mla	r2, r4, r5, r2
 80111e6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80111ea:	43dd      	mvns	r5, r3
 80111ec:	1a8c      	subs	r4, r1, r2
 80111ee:	4285      	cmp	r5, r0
 80111f0:	41b4      	sbcs	r4, r6
 80111f2:	d30c      	bcc.n	801120e <rmw_time_total_nsec+0x4e>
 80111f4:	1818      	adds	r0, r3, r0
 80111f6:	eb42 0106 	adc.w	r1, r2, r6
 80111fa:	b005      	add	sp, #20
 80111fc:	bc70      	pop	{r4, r5, r6}
 80111fe:	4770      	bx	lr
 8011200:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011204:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011208:	b005      	add	sp, #20
 801120a:	bc70      	pop	{r4, r5, r6}
 801120c:	4770      	bx	lr
 801120e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011212:	b005      	add	sp, #20
 8011214:	bc70      	pop	{r4, r5, r6}
 8011216:	4770      	bx	lr
 8011218:	25c17d04 	.word	0x25c17d04
 801121c:	3b9aca00 	.word	0x3b9aca00

08011220 <rmw_get_zero_initialized_message_info>:
 8011220:	b510      	push	{r4, lr}
 8011222:	2240      	movs	r2, #64	@ 0x40
 8011224:	4604      	mov	r4, r0
 8011226:	2100      	movs	r1, #0
 8011228:	f003 fa6e 	bl	8014708 <memset>
 801122c:	4620      	mov	r0, r4
 801122e:	bd10      	pop	{r4, pc}

08011230 <rmw_validate_full_topic_name>:
 8011230:	2800      	cmp	r0, #0
 8011232:	d057      	beq.n	80112e4 <rmw_validate_full_topic_name+0xb4>
 8011234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011238:	460d      	mov	r5, r1
 801123a:	2900      	cmp	r1, #0
 801123c:	d054      	beq.n	80112e8 <rmw_validate_full_topic_name+0xb8>
 801123e:	4616      	mov	r6, r2
 8011240:	4604      	mov	r4, r0
 8011242:	f7ee fff7 	bl	8000234 <strlen>
 8011246:	b148      	cbz	r0, 801125c <rmw_validate_full_topic_name+0x2c>
 8011248:	7823      	ldrb	r3, [r4, #0]
 801124a:	2b2f      	cmp	r3, #47	@ 0x2f
 801124c:	d00d      	beq.n	801126a <rmw_validate_full_topic_name+0x3a>
 801124e:	2302      	movs	r3, #2
 8011250:	602b      	str	r3, [r5, #0]
 8011252:	b13e      	cbz	r6, 8011264 <rmw_validate_full_topic_name+0x34>
 8011254:	2000      	movs	r0, #0
 8011256:	6030      	str	r0, [r6, #0]
 8011258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801125c:	2301      	movs	r3, #1
 801125e:	602b      	str	r3, [r5, #0]
 8011260:	2e00      	cmp	r6, #0
 8011262:	d1f7      	bne.n	8011254 <rmw_validate_full_topic_name+0x24>
 8011264:	2000      	movs	r0, #0
 8011266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801126a:	1e43      	subs	r3, r0, #1
 801126c:	5ce2      	ldrb	r2, [r4, r3]
 801126e:	2a2f      	cmp	r2, #47	@ 0x2f
 8011270:	d03c      	beq.n	80112ec <rmw_validate_full_topic_name+0xbc>
 8011272:	1e63      	subs	r3, r4, #1
 8011274:	eb03 0800 	add.w	r8, r3, r0
 8011278:	f1c4 0e01 	rsb	lr, r4, #1
 801127c:	eb0e 0703 	add.w	r7, lr, r3
 8011280:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8011284:	f021 0220 	bic.w	r2, r1, #32
 8011288:	3a41      	subs	r2, #65	@ 0x41
 801128a:	2a19      	cmp	r2, #25
 801128c:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8011290:	d90b      	bls.n	80112aa <rmw_validate_full_topic_name+0x7a>
 8011292:	295f      	cmp	r1, #95	@ 0x5f
 8011294:	d009      	beq.n	80112aa <rmw_validate_full_topic_name+0x7a>
 8011296:	f1bc 0f0a 	cmp.w	ip, #10
 801129a:	d906      	bls.n	80112aa <rmw_validate_full_topic_name+0x7a>
 801129c:	2304      	movs	r3, #4
 801129e:	602b      	str	r3, [r5, #0]
 80112a0:	2e00      	cmp	r6, #0
 80112a2:	d0df      	beq.n	8011264 <rmw_validate_full_topic_name+0x34>
 80112a4:	6037      	str	r7, [r6, #0]
 80112a6:	2000      	movs	r0, #0
 80112a8:	e7d6      	b.n	8011258 <rmw_validate_full_topic_name+0x28>
 80112aa:	4543      	cmp	r3, r8
 80112ac:	d1e6      	bne.n	801127c <rmw_validate_full_topic_name+0x4c>
 80112ae:	4f1a      	ldr	r7, [pc, #104]	@ (8011318 <rmw_validate_full_topic_name+0xe8>)
 80112b0:	2301      	movs	r3, #1
 80112b2:	e004      	b.n	80112be <rmw_validate_full_topic_name+0x8e>
 80112b4:	4298      	cmp	r0, r3
 80112b6:	f104 0401 	add.w	r4, r4, #1
 80112ba:	d91c      	bls.n	80112f6 <rmw_validate_full_topic_name+0xc6>
 80112bc:	4613      	mov	r3, r2
 80112be:	4298      	cmp	r0, r3
 80112c0:	f103 0201 	add.w	r2, r3, #1
 80112c4:	d0f6      	beq.n	80112b4 <rmw_validate_full_topic_name+0x84>
 80112c6:	7821      	ldrb	r1, [r4, #0]
 80112c8:	292f      	cmp	r1, #47	@ 0x2f
 80112ca:	d1f3      	bne.n	80112b4 <rmw_validate_full_topic_name+0x84>
 80112cc:	7861      	ldrb	r1, [r4, #1]
 80112ce:	292f      	cmp	r1, #47	@ 0x2f
 80112d0:	d01c      	beq.n	801130c <rmw_validate_full_topic_name+0xdc>
 80112d2:	5dc9      	ldrb	r1, [r1, r7]
 80112d4:	0749      	lsls	r1, r1, #29
 80112d6:	d5ed      	bpl.n	80112b4 <rmw_validate_full_topic_name+0x84>
 80112d8:	2206      	movs	r2, #6
 80112da:	602a      	str	r2, [r5, #0]
 80112dc:	2e00      	cmp	r6, #0
 80112de:	d0c1      	beq.n	8011264 <rmw_validate_full_topic_name+0x34>
 80112e0:	6033      	str	r3, [r6, #0]
 80112e2:	e7bf      	b.n	8011264 <rmw_validate_full_topic_name+0x34>
 80112e4:	200b      	movs	r0, #11
 80112e6:	4770      	bx	lr
 80112e8:	200b      	movs	r0, #11
 80112ea:	e7b5      	b.n	8011258 <rmw_validate_full_topic_name+0x28>
 80112ec:	2203      	movs	r2, #3
 80112ee:	602a      	str	r2, [r5, #0]
 80112f0:	2e00      	cmp	r6, #0
 80112f2:	d1f5      	bne.n	80112e0 <rmw_validate_full_topic_name+0xb0>
 80112f4:	e7b6      	b.n	8011264 <rmw_validate_full_topic_name+0x34>
 80112f6:	28f7      	cmp	r0, #247	@ 0xf7
 80112f8:	d802      	bhi.n	8011300 <rmw_validate_full_topic_name+0xd0>
 80112fa:	2000      	movs	r0, #0
 80112fc:	6028      	str	r0, [r5, #0]
 80112fe:	e7ab      	b.n	8011258 <rmw_validate_full_topic_name+0x28>
 8011300:	2307      	movs	r3, #7
 8011302:	602b      	str	r3, [r5, #0]
 8011304:	2e00      	cmp	r6, #0
 8011306:	d0ad      	beq.n	8011264 <rmw_validate_full_topic_name+0x34>
 8011308:	23f6      	movs	r3, #246	@ 0xf6
 801130a:	e7e9      	b.n	80112e0 <rmw_validate_full_topic_name+0xb0>
 801130c:	2205      	movs	r2, #5
 801130e:	602a      	str	r2, [r5, #0]
 8011310:	2e00      	cmp	r6, #0
 8011312:	d1e5      	bne.n	80112e0 <rmw_validate_full_topic_name+0xb0>
 8011314:	e7a6      	b.n	8011264 <rmw_validate_full_topic_name+0x34>
 8011316:	bf00      	nop
 8011318:	08016038 	.word	0x08016038

0801131c <rmw_validate_namespace_with_size>:
 801131c:	b340      	cbz	r0, 8011370 <rmw_validate_namespace_with_size+0x54>
 801131e:	b570      	push	{r4, r5, r6, lr}
 8011320:	4614      	mov	r4, r2
 8011322:	b0c2      	sub	sp, #264	@ 0x108
 8011324:	b332      	cbz	r2, 8011374 <rmw_validate_namespace_with_size+0x58>
 8011326:	2901      	cmp	r1, #1
 8011328:	460d      	mov	r5, r1
 801132a:	461e      	mov	r6, r3
 801132c:	d102      	bne.n	8011334 <rmw_validate_namespace_with_size+0x18>
 801132e:	7803      	ldrb	r3, [r0, #0]
 8011330:	2b2f      	cmp	r3, #47	@ 0x2f
 8011332:	d012      	beq.n	801135a <rmw_validate_namespace_with_size+0x3e>
 8011334:	aa01      	add	r2, sp, #4
 8011336:	4669      	mov	r1, sp
 8011338:	f7ff ff7a 	bl	8011230 <rmw_validate_full_topic_name>
 801133c:	b978      	cbnz	r0, 801135e <rmw_validate_namespace_with_size+0x42>
 801133e:	9b00      	ldr	r3, [sp, #0]
 8011340:	b14b      	cbz	r3, 8011356 <rmw_validate_namespace_with_size+0x3a>
 8011342:	2b07      	cmp	r3, #7
 8011344:	d007      	beq.n	8011356 <rmw_validate_namespace_with_size+0x3a>
 8011346:	1e5a      	subs	r2, r3, #1
 8011348:	2a05      	cmp	r2, #5
 801134a:	d82b      	bhi.n	80113a4 <rmw_validate_namespace_with_size+0x88>
 801134c:	e8df f002 	tbb	[pc, r2]
 8011350:	1e212427 	.word	0x1e212427
 8011354:	141b      	.short	0x141b
 8011356:	2df5      	cmp	r5, #245	@ 0xf5
 8011358:	d803      	bhi.n	8011362 <rmw_validate_namespace_with_size+0x46>
 801135a:	2000      	movs	r0, #0
 801135c:	6020      	str	r0, [r4, #0]
 801135e:	b042      	add	sp, #264	@ 0x108
 8011360:	bd70      	pop	{r4, r5, r6, pc}
 8011362:	2307      	movs	r3, #7
 8011364:	6023      	str	r3, [r4, #0]
 8011366:	2e00      	cmp	r6, #0
 8011368:	d0f9      	beq.n	801135e <rmw_validate_namespace_with_size+0x42>
 801136a:	23f4      	movs	r3, #244	@ 0xf4
 801136c:	6033      	str	r3, [r6, #0]
 801136e:	e7f6      	b.n	801135e <rmw_validate_namespace_with_size+0x42>
 8011370:	200b      	movs	r0, #11
 8011372:	4770      	bx	lr
 8011374:	200b      	movs	r0, #11
 8011376:	e7f2      	b.n	801135e <rmw_validate_namespace_with_size+0x42>
 8011378:	2306      	movs	r3, #6
 801137a:	6023      	str	r3, [r4, #0]
 801137c:	2e00      	cmp	r6, #0
 801137e:	d0ee      	beq.n	801135e <rmw_validate_namespace_with_size+0x42>
 8011380:	9b01      	ldr	r3, [sp, #4]
 8011382:	6033      	str	r3, [r6, #0]
 8011384:	e7eb      	b.n	801135e <rmw_validate_namespace_with_size+0x42>
 8011386:	2305      	movs	r3, #5
 8011388:	6023      	str	r3, [r4, #0]
 801138a:	e7f7      	b.n	801137c <rmw_validate_namespace_with_size+0x60>
 801138c:	2304      	movs	r3, #4
 801138e:	6023      	str	r3, [r4, #0]
 8011390:	e7f4      	b.n	801137c <rmw_validate_namespace_with_size+0x60>
 8011392:	2303      	movs	r3, #3
 8011394:	6023      	str	r3, [r4, #0]
 8011396:	e7f1      	b.n	801137c <rmw_validate_namespace_with_size+0x60>
 8011398:	2302      	movs	r3, #2
 801139a:	6023      	str	r3, [r4, #0]
 801139c:	e7ee      	b.n	801137c <rmw_validate_namespace_with_size+0x60>
 801139e:	2301      	movs	r3, #1
 80113a0:	6023      	str	r3, [r4, #0]
 80113a2:	e7eb      	b.n	801137c <rmw_validate_namespace_with_size+0x60>
 80113a4:	4a03      	ldr	r2, [pc, #12]	@ (80113b4 <rmw_validate_namespace_with_size+0x98>)
 80113a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80113aa:	a802      	add	r0, sp, #8
 80113ac:	f7ff fe56 	bl	801105c <rcutils_snprintf>
 80113b0:	2001      	movs	r0, #1
 80113b2:	e7d4      	b.n	801135e <rmw_validate_namespace_with_size+0x42>
 80113b4:	08015c7c 	.word	0x08015c7c

080113b8 <rmw_validate_namespace>:
 80113b8:	b168      	cbz	r0, 80113d6 <rmw_validate_namespace+0x1e>
 80113ba:	b570      	push	{r4, r5, r6, lr}
 80113bc:	460d      	mov	r5, r1
 80113be:	4616      	mov	r6, r2
 80113c0:	4604      	mov	r4, r0
 80113c2:	f7ee ff37 	bl	8000234 <strlen>
 80113c6:	4633      	mov	r3, r6
 80113c8:	4601      	mov	r1, r0
 80113ca:	462a      	mov	r2, r5
 80113cc:	4620      	mov	r0, r4
 80113ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80113d2:	f7ff bfa3 	b.w	801131c <rmw_validate_namespace_with_size>
 80113d6:	200b      	movs	r0, #11
 80113d8:	4770      	bx	lr
 80113da:	bf00      	nop

080113dc <rmw_namespace_validation_result_string>:
 80113dc:	2807      	cmp	r0, #7
 80113de:	bf9a      	itte	ls
 80113e0:	4b02      	ldrls	r3, [pc, #8]	@ (80113ec <rmw_namespace_validation_result_string+0x10>)
 80113e2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80113e6:	4802      	ldrhi	r0, [pc, #8]	@ (80113f0 <rmw_namespace_validation_result_string+0x14>)
 80113e8:	4770      	bx	lr
 80113ea:	bf00      	nop
 80113ec:	08015e74 	.word	0x08015e74
 80113f0:	08015ccc 	.word	0x08015ccc

080113f4 <rmw_validate_node_name>:
 80113f4:	2800      	cmp	r0, #0
 80113f6:	d03b      	beq.n	8011470 <rmw_validate_node_name+0x7c>
 80113f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113fc:	460d      	mov	r5, r1
 80113fe:	2900      	cmp	r1, #0
 8011400:	d038      	beq.n	8011474 <rmw_validate_node_name+0x80>
 8011402:	4616      	mov	r6, r2
 8011404:	4604      	mov	r4, r0
 8011406:	f7ee ff15 	bl	8000234 <strlen>
 801140a:	b1e0      	cbz	r0, 8011446 <rmw_validate_node_name+0x52>
 801140c:	1e63      	subs	r3, r4, #1
 801140e:	eb03 0800 	add.w	r8, r3, r0
 8011412:	f1c4 0101 	rsb	r1, r4, #1
 8011416:	18cf      	adds	r7, r1, r3
 8011418:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801141c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8011420:	f02e 0c20 	bic.w	ip, lr, #32
 8011424:	2a09      	cmp	r2, #9
 8011426:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801142a:	d914      	bls.n	8011456 <rmw_validate_node_name+0x62>
 801142c:	f1bc 0f19 	cmp.w	ip, #25
 8011430:	d911      	bls.n	8011456 <rmw_validate_node_name+0x62>
 8011432:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8011436:	d00e      	beq.n	8011456 <rmw_validate_node_name+0x62>
 8011438:	2302      	movs	r3, #2
 801143a:	602b      	str	r3, [r5, #0]
 801143c:	b106      	cbz	r6, 8011440 <rmw_validate_node_name+0x4c>
 801143e:	6037      	str	r7, [r6, #0]
 8011440:	2000      	movs	r0, #0
 8011442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011446:	2301      	movs	r3, #1
 8011448:	602b      	str	r3, [r5, #0]
 801144a:	2e00      	cmp	r6, #0
 801144c:	d0f8      	beq.n	8011440 <rmw_validate_node_name+0x4c>
 801144e:	2000      	movs	r0, #0
 8011450:	6030      	str	r0, [r6, #0]
 8011452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011456:	4543      	cmp	r3, r8
 8011458:	d1dd      	bne.n	8011416 <rmw_validate_node_name+0x22>
 801145a:	7822      	ldrb	r2, [r4, #0]
 801145c:	4b0d      	ldr	r3, [pc, #52]	@ (8011494 <rmw_validate_node_name+0xa0>)
 801145e:	5cd3      	ldrb	r3, [r2, r3]
 8011460:	f013 0304 	ands.w	r3, r3, #4
 8011464:	d110      	bne.n	8011488 <rmw_validate_node_name+0x94>
 8011466:	28ff      	cmp	r0, #255	@ 0xff
 8011468:	d806      	bhi.n	8011478 <rmw_validate_node_name+0x84>
 801146a:	602b      	str	r3, [r5, #0]
 801146c:	4618      	mov	r0, r3
 801146e:	e7e8      	b.n	8011442 <rmw_validate_node_name+0x4e>
 8011470:	200b      	movs	r0, #11
 8011472:	4770      	bx	lr
 8011474:	200b      	movs	r0, #11
 8011476:	e7e4      	b.n	8011442 <rmw_validate_node_name+0x4e>
 8011478:	2204      	movs	r2, #4
 801147a:	602a      	str	r2, [r5, #0]
 801147c:	2e00      	cmp	r6, #0
 801147e:	d0df      	beq.n	8011440 <rmw_validate_node_name+0x4c>
 8011480:	22fe      	movs	r2, #254	@ 0xfe
 8011482:	6032      	str	r2, [r6, #0]
 8011484:	4618      	mov	r0, r3
 8011486:	e7dc      	b.n	8011442 <rmw_validate_node_name+0x4e>
 8011488:	2303      	movs	r3, #3
 801148a:	602b      	str	r3, [r5, #0]
 801148c:	2e00      	cmp	r6, #0
 801148e:	d1de      	bne.n	801144e <rmw_validate_node_name+0x5a>
 8011490:	e7d6      	b.n	8011440 <rmw_validate_node_name+0x4c>
 8011492:	bf00      	nop
 8011494:	08016038 	.word	0x08016038

08011498 <rmw_node_name_validation_result_string>:
 8011498:	2804      	cmp	r0, #4
 801149a:	bf9a      	itte	ls
 801149c:	4b02      	ldrls	r3, [pc, #8]	@ (80114a8 <rmw_node_name_validation_result_string+0x10>)
 801149e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80114a2:	4802      	ldrhi	r0, [pc, #8]	@ (80114ac <rmw_node_name_validation_result_string+0x14>)
 80114a4:	4770      	bx	lr
 80114a6:	bf00      	nop
 80114a8:	08015f80 	.word	0x08015f80
 80114ac:	08015e94 	.word	0x08015e94

080114b0 <on_status>:
 80114b0:	b082      	sub	sp, #8
 80114b2:	b002      	add	sp, #8
 80114b4:	4770      	bx	lr
 80114b6:	bf00      	nop

080114b8 <on_topic>:
 80114b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114bc:	4a22      	ldr	r2, [pc, #136]	@ (8011548 <on_topic+0x90>)
 80114be:	b094      	sub	sp, #80	@ 0x50
 80114c0:	6812      	ldr	r2, [r2, #0]
 80114c2:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 80114c4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80114c8:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 80114cc:	b3c2      	cbz	r2, 8011540 <on_topic+0x88>
 80114ce:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 80114d2:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 80114d6:	e001      	b.n	80114dc <on_topic+0x24>
 80114d8:	6852      	ldr	r2, [r2, #4]
 80114da:	b38a      	cbz	r2, 8011540 <on_topic+0x88>
 80114dc:	6894      	ldr	r4, [r2, #8]
 80114de:	8aa3      	ldrh	r3, [r4, #20]
 80114e0:	428b      	cmp	r3, r1
 80114e2:	d1f9      	bne.n	80114d8 <on_topic+0x20>
 80114e4:	7da3      	ldrb	r3, [r4, #22]
 80114e6:	4283      	cmp	r3, r0
 80114e8:	d1f6      	bne.n	80114d8 <on_topic+0x20>
 80114ea:	2248      	movs	r2, #72	@ 0x48
 80114ec:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80114f0:	4668      	mov	r0, sp
 80114f2:	f003 f9fc 	bl	80148ee <memcpy>
 80114f6:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80114fa:	cb0c      	ldmia	r3, {r2, r3}
 80114fc:	4620      	mov	r0, r4
 80114fe:	f7fa f8c1 	bl	800b684 <rmw_uxrce_get_static_input_buffer_for_entity>
 8011502:	4607      	mov	r7, r0
 8011504:	b1e0      	cbz	r0, 8011540 <on_topic+0x88>
 8011506:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801150a:	4632      	mov	r2, r6
 801150c:	4628      	mov	r0, r5
 801150e:	f108 0110 	add.w	r1, r8, #16
 8011512:	f000 fd49 	bl	8011fa8 <ucdr_deserialize_array_uint8_t>
 8011516:	b930      	cbnz	r0, 8011526 <on_topic+0x6e>
 8011518:	480c      	ldr	r0, [pc, #48]	@ (801154c <on_topic+0x94>)
 801151a:	4639      	mov	r1, r7
 801151c:	b014      	add	sp, #80	@ 0x50
 801151e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011522:	f000 b8bd 	b.w	80116a0 <put_memory>
 8011526:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801152a:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801152e:	f7f9 fea7 	bl	800b280 <rmw_uros_epoch_nanos>
 8011532:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8011536:	2305      	movs	r3, #5
 8011538:	e942 0102 	strd	r0, r1, [r2, #-8]
 801153c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8011540:	b014      	add	sp, #80	@ 0x50
 8011542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011546:	bf00      	nop
 8011548:	2000ab84 	.word	0x2000ab84
 801154c:	2000ab74 	.word	0x2000ab74

08011550 <on_request>:
 8011550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011554:	4823      	ldr	r0, [pc, #140]	@ (80115e4 <on_request+0x94>)
 8011556:	b094      	sub	sp, #80	@ 0x50
 8011558:	6800      	ldr	r0, [r0, #0]
 801155a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801155c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8011560:	9113      	str	r1, [sp, #76]	@ 0x4c
 8011562:	2800      	cmp	r0, #0
 8011564:	d03b      	beq.n	80115de <on_request+0x8e>
 8011566:	461d      	mov	r5, r3
 8011568:	e001      	b.n	801156e <on_request+0x1e>
 801156a:	6840      	ldr	r0, [r0, #4]
 801156c:	b3b8      	cbz	r0, 80115de <on_request+0x8e>
 801156e:	6884      	ldr	r4, [r0, #8]
 8011570:	8b21      	ldrh	r1, [r4, #24]
 8011572:	4291      	cmp	r1, r2
 8011574:	d1f9      	bne.n	801156a <on_request+0x1a>
 8011576:	2248      	movs	r2, #72	@ 0x48
 8011578:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801157c:	4668      	mov	r0, sp
 801157e:	f003 f9b6 	bl	80148ee <memcpy>
 8011582:	f104 0320 	add.w	r3, r4, #32
 8011586:	cb0c      	ldmia	r3, {r2, r3}
 8011588:	4620      	mov	r0, r4
 801158a:	f7fa f87b 	bl	800b684 <rmw_uxrce_get_static_input_buffer_for_entity>
 801158e:	4680      	mov	r8, r0
 8011590:	b328      	cbz	r0, 80115de <on_request+0x8e>
 8011592:	4638      	mov	r0, r7
 8011594:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8011598:	4632      	mov	r2, r6
 801159a:	f107 0110 	add.w	r1, r7, #16
 801159e:	f000 fd03 	bl	8011fa8 <ucdr_deserialize_array_uint8_t>
 80115a2:	b930      	cbnz	r0, 80115b2 <on_request+0x62>
 80115a4:	4810      	ldr	r0, [pc, #64]	@ (80115e8 <on_request+0x98>)
 80115a6:	4641      	mov	r1, r8
 80115a8:	b014      	add	sp, #80	@ 0x50
 80115aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115ae:	f000 b877 	b.w	80116a0 <put_memory>
 80115b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80115b4:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 80115b8:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80115bc:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80115c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80115c4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80115c8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80115cc:	f7f9 fe58 	bl	800b280 <rmw_uros_epoch_nanos>
 80115d0:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80115d4:	2303      	movs	r3, #3
 80115d6:	e942 0102 	strd	r0, r1, [r2, #-8]
 80115da:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80115de:	b014      	add	sp, #80	@ 0x50
 80115e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115e4:	2000ab54 	.word	0x2000ab54
 80115e8:	2000ab74 	.word	0x2000ab74

080115ec <on_reply>:
 80115ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115f0:	4821      	ldr	r0, [pc, #132]	@ (8011678 <on_reply+0x8c>)
 80115f2:	b094      	sub	sp, #80	@ 0x50
 80115f4:	6800      	ldr	r0, [r0, #0]
 80115f6:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80115f8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80115fc:	9113      	str	r1, [sp, #76]	@ 0x4c
 80115fe:	b3b8      	cbz	r0, 8011670 <on_reply+0x84>
 8011600:	461d      	mov	r5, r3
 8011602:	e001      	b.n	8011608 <on_reply+0x1c>
 8011604:	6840      	ldr	r0, [r0, #4]
 8011606:	b398      	cbz	r0, 8011670 <on_reply+0x84>
 8011608:	6884      	ldr	r4, [r0, #8]
 801160a:	8b21      	ldrh	r1, [r4, #24]
 801160c:	4291      	cmp	r1, r2
 801160e:	d1f9      	bne.n	8011604 <on_reply+0x18>
 8011610:	2248      	movs	r2, #72	@ 0x48
 8011612:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8011616:	4668      	mov	r0, sp
 8011618:	f003 f969 	bl	80148ee <memcpy>
 801161c:	f104 0320 	add.w	r3, r4, #32
 8011620:	cb0c      	ldmia	r3, {r2, r3}
 8011622:	4620      	mov	r0, r4
 8011624:	f7fa f82e 	bl	800b684 <rmw_uxrce_get_static_input_buffer_for_entity>
 8011628:	4680      	mov	r8, r0
 801162a:	b308      	cbz	r0, 8011670 <on_reply+0x84>
 801162c:	4638      	mov	r0, r7
 801162e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8011632:	4632      	mov	r2, r6
 8011634:	f107 0110 	add.w	r1, r7, #16
 8011638:	f000 fcb6 	bl	8011fa8 <ucdr_deserialize_array_uint8_t>
 801163c:	b930      	cbnz	r0, 801164c <on_reply+0x60>
 801163e:	480f      	ldr	r0, [pc, #60]	@ (801167c <on_reply+0x90>)
 8011640:	4641      	mov	r1, r8
 8011642:	b014      	add	sp, #80	@ 0x50
 8011644:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011648:	f000 b82a 	b.w	80116a0 <put_memory>
 801164c:	2200      	movs	r2, #0
 801164e:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8011652:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8011656:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801165a:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801165e:	f7f9 fe0f 	bl	800b280 <rmw_uros_epoch_nanos>
 8011662:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8011666:	2304      	movs	r3, #4
 8011668:	e942 0102 	strd	r0, r1, [r2, #-8]
 801166c:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8011670:	b014      	add	sp, #80	@ 0x50
 8011672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011676:	bf00      	nop
 8011678:	20006264 	.word	0x20006264
 801167c:	2000ab74 	.word	0x2000ab74

08011680 <get_memory>:
 8011680:	4603      	mov	r3, r0
 8011682:	6840      	ldr	r0, [r0, #4]
 8011684:	b158      	cbz	r0, 801169e <get_memory+0x1e>
 8011686:	6842      	ldr	r2, [r0, #4]
 8011688:	605a      	str	r2, [r3, #4]
 801168a:	b10a      	cbz	r2, 8011690 <get_memory+0x10>
 801168c:	2100      	movs	r1, #0
 801168e:	6011      	str	r1, [r2, #0]
 8011690:	681a      	ldr	r2, [r3, #0]
 8011692:	6042      	str	r2, [r0, #4]
 8011694:	b102      	cbz	r2, 8011698 <get_memory+0x18>
 8011696:	6010      	str	r0, [r2, #0]
 8011698:	2200      	movs	r2, #0
 801169a:	6002      	str	r2, [r0, #0]
 801169c:	6018      	str	r0, [r3, #0]
 801169e:	4770      	bx	lr

080116a0 <put_memory>:
 80116a0:	680b      	ldr	r3, [r1, #0]
 80116a2:	b10b      	cbz	r3, 80116a8 <put_memory+0x8>
 80116a4:	684a      	ldr	r2, [r1, #4]
 80116a6:	605a      	str	r2, [r3, #4]
 80116a8:	684a      	ldr	r2, [r1, #4]
 80116aa:	b102      	cbz	r2, 80116ae <put_memory+0xe>
 80116ac:	6013      	str	r3, [r2, #0]
 80116ae:	6803      	ldr	r3, [r0, #0]
 80116b0:	428b      	cmp	r3, r1
 80116b2:	6843      	ldr	r3, [r0, #4]
 80116b4:	bf08      	it	eq
 80116b6:	6002      	streq	r2, [r0, #0]
 80116b8:	604b      	str	r3, [r1, #4]
 80116ba:	b103      	cbz	r3, 80116be <put_memory+0x1e>
 80116bc:	6019      	str	r1, [r3, #0]
 80116be:	2300      	movs	r3, #0
 80116c0:	600b      	str	r3, [r1, #0]
 80116c2:	6041      	str	r1, [r0, #4]
 80116c4:	4770      	bx	lr
 80116c6:	bf00      	nop

080116c8 <rmw_destroy_client>:
 80116c8:	b570      	push	{r4, r5, r6, lr}
 80116ca:	b128      	cbz	r0, 80116d8 <rmw_destroy_client+0x10>
 80116cc:	4604      	mov	r4, r0
 80116ce:	6800      	ldr	r0, [r0, #0]
 80116d0:	460d      	mov	r5, r1
 80116d2:	f7fa f8e7 	bl	800b8a4 <is_uxrce_rmw_identifier_valid>
 80116d6:	b910      	cbnz	r0, 80116de <rmw_destroy_client+0x16>
 80116d8:	2401      	movs	r4, #1
 80116da:	4620      	mov	r0, r4
 80116dc:	bd70      	pop	{r4, r5, r6, pc}
 80116de:	6863      	ldr	r3, [r4, #4]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d0f9      	beq.n	80116d8 <rmw_destroy_client+0x10>
 80116e4:	2d00      	cmp	r5, #0
 80116e6:	d0f7      	beq.n	80116d8 <rmw_destroy_client+0x10>
 80116e8:	6828      	ldr	r0, [r5, #0]
 80116ea:	f7fa f8db 	bl	800b8a4 <is_uxrce_rmw_identifier_valid>
 80116ee:	2800      	cmp	r0, #0
 80116f0:	d0f2      	beq.n	80116d8 <rmw_destroy_client+0x10>
 80116f2:	686e      	ldr	r6, [r5, #4]
 80116f4:	2e00      	cmp	r6, #0
 80116f6:	d0ef      	beq.n	80116d8 <rmw_destroy_client+0x10>
 80116f8:	6864      	ldr	r4, [r4, #4]
 80116fa:	6932      	ldr	r2, [r6, #16]
 80116fc:	6920      	ldr	r0, [r4, #16]
 80116fe:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011702:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011706:	6819      	ldr	r1, [r3, #0]
 8011708:	f7fa fa4a 	bl	800bba0 <uxr_buffer_cancel_data>
 801170c:	4602      	mov	r2, r0
 801170e:	6920      	ldr	r0, [r4, #16]
 8011710:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011714:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011718:	f7fa f8a8 	bl	800b86c <run_xrce_session>
 801171c:	6920      	ldr	r0, [r4, #16]
 801171e:	6932      	ldr	r2, [r6, #16]
 8011720:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011724:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011728:	6819      	ldr	r1, [r3, #0]
 801172a:	f7fa f8c9 	bl	800b8c0 <uxr_buffer_delete_entity>
 801172e:	4602      	mov	r2, r0
 8011730:	6920      	ldr	r0, [r4, #16]
 8011732:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011736:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801173a:	f7fa f897 	bl	800b86c <run_xrce_session>
 801173e:	2800      	cmp	r0, #0
 8011740:	4628      	mov	r0, r5
 8011742:	bf14      	ite	ne
 8011744:	2400      	movne	r4, #0
 8011746:	2402      	moveq	r4, #2
 8011748:	f7f9 ff7a 	bl	800b640 <rmw_uxrce_fini_client_memory>
 801174c:	e7c5      	b.n	80116da <rmw_destroy_client+0x12>
 801174e:	bf00      	nop

08011750 <rmw_get_implementation_identifier>:
 8011750:	4b01      	ldr	r3, [pc, #4]	@ (8011758 <rmw_get_implementation_identifier+0x8>)
 8011752:	6818      	ldr	r0, [r3, #0]
 8011754:	4770      	bx	lr
 8011756:	bf00      	nop
 8011758:	08015fac 	.word	0x08015fac

0801175c <destroy_topic>:
 801175c:	b538      	push	{r3, r4, r5, lr}
 801175e:	6985      	ldr	r5, [r0, #24]
 8011760:	b1d5      	cbz	r5, 8011798 <destroy_topic+0x3c>
 8011762:	4604      	mov	r4, r0
 8011764:	6928      	ldr	r0, [r5, #16]
 8011766:	6922      	ldr	r2, [r4, #16]
 8011768:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801176c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011770:	6819      	ldr	r1, [r3, #0]
 8011772:	f7fa f8a5 	bl	800b8c0 <uxr_buffer_delete_entity>
 8011776:	4602      	mov	r2, r0
 8011778:	6928      	ldr	r0, [r5, #16]
 801177a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801177e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011782:	f7fa f873 	bl	800b86c <run_xrce_session>
 8011786:	2800      	cmp	r0, #0
 8011788:	4620      	mov	r0, r4
 801178a:	bf14      	ite	ne
 801178c:	2400      	movne	r4, #0
 801178e:	2402      	moveq	r4, #2
 8011790:	f7f9 ff6c 	bl	800b66c <rmw_uxrce_fini_topic_memory>
 8011794:	4620      	mov	r0, r4
 8011796:	bd38      	pop	{r3, r4, r5, pc}
 8011798:	2401      	movs	r4, #1
 801179a:	4620      	mov	r0, r4
 801179c:	bd38      	pop	{r3, r4, r5, pc}
 801179e:	bf00      	nop

080117a0 <rmw_send_request>:
 80117a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80117a4:	4604      	mov	r4, r0
 80117a6:	6800      	ldr	r0, [r0, #0]
 80117a8:	b08b      	sub	sp, #44	@ 0x2c
 80117aa:	460e      	mov	r6, r1
 80117ac:	4615      	mov	r5, r2
 80117ae:	b128      	cbz	r0, 80117bc <rmw_send_request+0x1c>
 80117b0:	4b21      	ldr	r3, [pc, #132]	@ (8011838 <rmw_send_request+0x98>)
 80117b2:	6819      	ldr	r1, [r3, #0]
 80117b4:	f7ee fd34 	bl	8000220 <strcmp>
 80117b8:	2800      	cmp	r0, #0
 80117ba:	d139      	bne.n	8011830 <rmw_send_request+0x90>
 80117bc:	6864      	ldr	r4, [r4, #4]
 80117be:	6963      	ldr	r3, [r4, #20]
 80117c0:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 80117c4:	689b      	ldr	r3, [r3, #8]
 80117c6:	4798      	blx	r3
 80117c8:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80117cc:	4630      	mov	r0, r6
 80117ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80117d2:	4798      	blx	r3
 80117d4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80117d8:	9000      	str	r0, [sp, #0]
 80117da:	6922      	ldr	r2, [r4, #16]
 80117dc:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80117de:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80117e2:	ab02      	add	r3, sp, #8
 80117e4:	f002 fa46 	bl	8013c74 <uxr_prepare_output_stream>
 80117e8:	2700      	movs	r7, #0
 80117ea:	6028      	str	r0, [r5, #0]
 80117ec:	606f      	str	r7, [r5, #4]
 80117ee:	b198      	cbz	r0, 8011818 <rmw_send_request+0x78>
 80117f0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80117f4:	a902      	add	r1, sp, #8
 80117f6:	4630      	mov	r0, r6
 80117f8:	4798      	blx	r3
 80117fa:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80117fe:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8011802:	2b01      	cmp	r3, #1
 8011804:	d00c      	beq.n	8011820 <rmw_send_request+0x80>
 8011806:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8011808:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801180c:	f7fa ff9c 	bl	800c748 <uxr_run_session_until_confirm_delivery>
 8011810:	4638      	mov	r0, r7
 8011812:	b00b      	add	sp, #44	@ 0x2c
 8011814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011818:	2001      	movs	r0, #1
 801181a:	b00b      	add	sp, #44	@ 0x2c
 801181c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011820:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011824:	f7fa fbd0 	bl	800bfc8 <uxr_flash_output_streams>
 8011828:	4638      	mov	r0, r7
 801182a:	b00b      	add	sp, #44	@ 0x2c
 801182c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011830:	200c      	movs	r0, #12
 8011832:	b00b      	add	sp, #44	@ 0x2c
 8011834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011838:	08015fac 	.word	0x08015fac

0801183c <rmw_take_request>:
 801183c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011840:	4605      	mov	r5, r0
 8011842:	6800      	ldr	r0, [r0, #0]
 8011844:	b089      	sub	sp, #36	@ 0x24
 8011846:	460c      	mov	r4, r1
 8011848:	4690      	mov	r8, r2
 801184a:	461e      	mov	r6, r3
 801184c:	b128      	cbz	r0, 801185a <rmw_take_request+0x1e>
 801184e:	4b28      	ldr	r3, [pc, #160]	@ (80118f0 <rmw_take_request+0xb4>)
 8011850:	6819      	ldr	r1, [r3, #0]
 8011852:	f7ee fce5 	bl	8000220 <strcmp>
 8011856:	2800      	cmp	r0, #0
 8011858:	d146      	bne.n	80118e8 <rmw_take_request+0xac>
 801185a:	b10e      	cbz	r6, 8011860 <rmw_take_request+0x24>
 801185c:	2300      	movs	r3, #0
 801185e:	7033      	strb	r3, [r6, #0]
 8011860:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8011864:	f7f9 ff84 	bl	800b770 <rmw_uxrce_clean_expired_static_input_buffer>
 8011868:	4648      	mov	r0, r9
 801186a:	f7f9 ff5b 	bl	800b724 <rmw_uxrce_find_static_input_buffer_by_owner>
 801186e:	4607      	mov	r7, r0
 8011870:	b3b0      	cbz	r0, 80118e0 <rmw_take_request+0xa4>
 8011872:	6885      	ldr	r5, [r0, #8]
 8011874:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8011878:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 801187c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8011880:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8011884:	7423      	strb	r3, [r4, #16]
 8011886:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 801188a:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 801188e:	74e2      	strb	r2, [r4, #19]
 8011890:	f8a4 3011 	strh.w	r3, [r4, #17]
 8011894:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8011898:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 801189c:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80118a0:	61e1      	str	r1, [r4, #28]
 80118a2:	6162      	str	r2, [r4, #20]
 80118a4:	61a3      	str	r3, [r4, #24]
 80118a6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80118aa:	689b      	ldr	r3, [r3, #8]
 80118ac:	4798      	blx	r3
 80118ae:	6844      	ldr	r4, [r0, #4]
 80118b0:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 80118b4:	f105 0110 	add.w	r1, r5, #16
 80118b8:	4668      	mov	r0, sp
 80118ba:	f001 fbb3 	bl	8013024 <ucdr_init_buffer>
 80118be:	68e3      	ldr	r3, [r4, #12]
 80118c0:	4641      	mov	r1, r8
 80118c2:	4668      	mov	r0, sp
 80118c4:	4798      	blx	r3
 80118c6:	4639      	mov	r1, r7
 80118c8:	4604      	mov	r4, r0
 80118ca:	480a      	ldr	r0, [pc, #40]	@ (80118f4 <rmw_take_request+0xb8>)
 80118cc:	f7ff fee8 	bl	80116a0 <put_memory>
 80118d0:	b106      	cbz	r6, 80118d4 <rmw_take_request+0x98>
 80118d2:	7034      	strb	r4, [r6, #0]
 80118d4:	f084 0001 	eor.w	r0, r4, #1
 80118d8:	b2c0      	uxtb	r0, r0
 80118da:	b009      	add	sp, #36	@ 0x24
 80118dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80118e0:	2001      	movs	r0, #1
 80118e2:	b009      	add	sp, #36	@ 0x24
 80118e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80118e8:	200c      	movs	r0, #12
 80118ea:	b009      	add	sp, #36	@ 0x24
 80118ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80118f0:	08015fac 	.word	0x08015fac
 80118f4:	2000ab74 	.word	0x2000ab74

080118f8 <rmw_send_response>:
 80118f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118fa:	4605      	mov	r5, r0
 80118fc:	6800      	ldr	r0, [r0, #0]
 80118fe:	b091      	sub	sp, #68	@ 0x44
 8011900:	460c      	mov	r4, r1
 8011902:	4616      	mov	r6, r2
 8011904:	b128      	cbz	r0, 8011912 <rmw_send_response+0x1a>
 8011906:	4b29      	ldr	r3, [pc, #164]	@ (80119ac <rmw_send_response+0xb4>)
 8011908:	6819      	ldr	r1, [r3, #0]
 801190a:	f7ee fc89 	bl	8000220 <strcmp>
 801190e:	2800      	cmp	r0, #0
 8011910:	d141      	bne.n	8011996 <rmw_send_response+0x9e>
 8011912:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8011916:	9306      	str	r3, [sp, #24]
 8011918:	4623      	mov	r3, r4
 801191a:	9207      	str	r2, [sp, #28]
 801191c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011920:	686d      	ldr	r5, [r5, #4]
 8011922:	789b      	ldrb	r3, [r3, #2]
 8011924:	68a1      	ldr	r1, [r4, #8]
 8011926:	f88d 2017 	strb.w	r2, [sp, #23]
 801192a:	f88d 3016 	strb.w	r3, [sp, #22]
 801192e:	68e2      	ldr	r2, [r4, #12]
 8011930:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8011934:	6860      	ldr	r0, [r4, #4]
 8011936:	f8ad 3014 	strh.w	r3, [sp, #20]
 801193a:	ab02      	add	r3, sp, #8
 801193c:	c307      	stmia	r3!, {r0, r1, r2}
 801193e:	696b      	ldr	r3, [r5, #20]
 8011940:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8011942:	68db      	ldr	r3, [r3, #12]
 8011944:	4798      	blx	r3
 8011946:	6844      	ldr	r4, [r0, #4]
 8011948:	4630      	mov	r0, r6
 801194a:	6923      	ldr	r3, [r4, #16]
 801194c:	4798      	blx	r3
 801194e:	f100 0318 	add.w	r3, r0, #24
 8011952:	6938      	ldr	r0, [r7, #16]
 8011954:	9300      	str	r3, [sp, #0]
 8011956:	692a      	ldr	r2, [r5, #16]
 8011958:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801195a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801195e:	ab08      	add	r3, sp, #32
 8011960:	f002 f988 	bl	8013c74 <uxr_prepare_output_stream>
 8011964:	b910      	cbnz	r0, 801196c <rmw_send_response+0x74>
 8011966:	2001      	movs	r0, #1
 8011968:	b011      	add	sp, #68	@ 0x44
 801196a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801196c:	a902      	add	r1, sp, #8
 801196e:	a808      	add	r0, sp, #32
 8011970:	f7fc ff3c 	bl	800e7ec <uxr_serialize_SampleIdentity>
 8011974:	68a3      	ldr	r3, [r4, #8]
 8011976:	a908      	add	r1, sp, #32
 8011978:	4630      	mov	r0, r6
 801197a:	4798      	blx	r3
 801197c:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8011980:	6938      	ldr	r0, [r7, #16]
 8011982:	2b01      	cmp	r3, #1
 8011984:	d00a      	beq.n	801199c <rmw_send_response+0xa4>
 8011986:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8011988:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801198c:	f7fa fedc 	bl	800c748 <uxr_run_session_until_confirm_delivery>
 8011990:	2000      	movs	r0, #0
 8011992:	b011      	add	sp, #68	@ 0x44
 8011994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011996:	200c      	movs	r0, #12
 8011998:	b011      	add	sp, #68	@ 0x44
 801199a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801199c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80119a0:	f7fa fb12 	bl	800bfc8 <uxr_flash_output_streams>
 80119a4:	2000      	movs	r0, #0
 80119a6:	b011      	add	sp, #68	@ 0x44
 80119a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119aa:	bf00      	nop
 80119ac:	08015fac 	.word	0x08015fac

080119b0 <rmw_take_response>:
 80119b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119b4:	4604      	mov	r4, r0
 80119b6:	6800      	ldr	r0, [r0, #0]
 80119b8:	b088      	sub	sp, #32
 80119ba:	4688      	mov	r8, r1
 80119bc:	4617      	mov	r7, r2
 80119be:	461d      	mov	r5, r3
 80119c0:	b120      	cbz	r0, 80119cc <rmw_take_response+0x1c>
 80119c2:	4b1e      	ldr	r3, [pc, #120]	@ (8011a3c <rmw_take_response+0x8c>)
 80119c4:	6819      	ldr	r1, [r3, #0]
 80119c6:	f7ee fc2b 	bl	8000220 <strcmp>
 80119ca:	bb78      	cbnz	r0, 8011a2c <rmw_take_response+0x7c>
 80119cc:	b10d      	cbz	r5, 80119d2 <rmw_take_response+0x22>
 80119ce:	2300      	movs	r3, #0
 80119d0:	702b      	strb	r3, [r5, #0]
 80119d2:	6864      	ldr	r4, [r4, #4]
 80119d4:	f7f9 fecc 	bl	800b770 <rmw_uxrce_clean_expired_static_input_buffer>
 80119d8:	4620      	mov	r0, r4
 80119da:	f7f9 fea3 	bl	800b724 <rmw_uxrce_find_static_input_buffer_by_owner>
 80119de:	4606      	mov	r6, r0
 80119e0:	b340      	cbz	r0, 8011a34 <rmw_take_response+0x84>
 80119e2:	6963      	ldr	r3, [r4, #20]
 80119e4:	6884      	ldr	r4, [r0, #8]
 80119e6:	68db      	ldr	r3, [r3, #12]
 80119e8:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 80119ec:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80119f0:	e9c8 0108 	strd	r0, r1, [r8, #32]
 80119f4:	4798      	blx	r3
 80119f6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80119fa:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 80119fe:	f104 0110 	add.w	r1, r4, #16
 8011a02:	4668      	mov	r0, sp
 8011a04:	f001 fb0e 	bl	8013024 <ucdr_init_buffer>
 8011a08:	4639      	mov	r1, r7
 8011a0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011a0e:	4668      	mov	r0, sp
 8011a10:	4798      	blx	r3
 8011a12:	4631      	mov	r1, r6
 8011a14:	4604      	mov	r4, r0
 8011a16:	480a      	ldr	r0, [pc, #40]	@ (8011a40 <rmw_take_response+0x90>)
 8011a18:	f7ff fe42 	bl	80116a0 <put_memory>
 8011a1c:	b105      	cbz	r5, 8011a20 <rmw_take_response+0x70>
 8011a1e:	702c      	strb	r4, [r5, #0]
 8011a20:	f084 0001 	eor.w	r0, r4, #1
 8011a24:	b2c0      	uxtb	r0, r0
 8011a26:	b008      	add	sp, #32
 8011a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a2c:	200c      	movs	r0, #12
 8011a2e:	b008      	add	sp, #32
 8011a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a34:	2001      	movs	r0, #1
 8011a36:	b008      	add	sp, #32
 8011a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a3c:	08015fac 	.word	0x08015fac
 8011a40:	2000ab74 	.word	0x2000ab74

08011a44 <rmw_take_with_info>:
 8011a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a46:	4604      	mov	r4, r0
 8011a48:	6800      	ldr	r0, [r0, #0]
 8011a4a:	b089      	sub	sp, #36	@ 0x24
 8011a4c:	460f      	mov	r7, r1
 8011a4e:	4615      	mov	r5, r2
 8011a50:	b128      	cbz	r0, 8011a5e <rmw_take_with_info+0x1a>
 8011a52:	4b24      	ldr	r3, [pc, #144]	@ (8011ae4 <rmw_take_with_info+0xa0>)
 8011a54:	6819      	ldr	r1, [r3, #0]
 8011a56:	f7ee fbe3 	bl	8000220 <strcmp>
 8011a5a:	2800      	cmp	r0, #0
 8011a5c:	d13e      	bne.n	8011adc <rmw_take_with_info+0x98>
 8011a5e:	b305      	cbz	r5, 8011aa2 <rmw_take_with_info+0x5e>
 8011a60:	6864      	ldr	r4, [r4, #4]
 8011a62:	2300      	movs	r3, #0
 8011a64:	702b      	strb	r3, [r5, #0]
 8011a66:	f7f9 fe83 	bl	800b770 <rmw_uxrce_clean_expired_static_input_buffer>
 8011a6a:	4620      	mov	r0, r4
 8011a6c:	f7f9 fe5a 	bl	800b724 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011a70:	4606      	mov	r6, r0
 8011a72:	b1f0      	cbz	r0, 8011ab2 <rmw_take_with_info+0x6e>
 8011a74:	6881      	ldr	r1, [r0, #8]
 8011a76:	4668      	mov	r0, sp
 8011a78:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8011a7c:	3110      	adds	r1, #16
 8011a7e:	f001 fad1 	bl	8013024 <ucdr_init_buffer>
 8011a82:	69a3      	ldr	r3, [r4, #24]
 8011a84:	4639      	mov	r1, r7
 8011a86:	68db      	ldr	r3, [r3, #12]
 8011a88:	4668      	mov	r0, sp
 8011a8a:	4798      	blx	r3
 8011a8c:	4631      	mov	r1, r6
 8011a8e:	4604      	mov	r4, r0
 8011a90:	4815      	ldr	r0, [pc, #84]	@ (8011ae8 <rmw_take_with_info+0xa4>)
 8011a92:	f7ff fe05 	bl	80116a0 <put_memory>
 8011a96:	702c      	strb	r4, [r5, #0]
 8011a98:	f084 0001 	eor.w	r0, r4, #1
 8011a9c:	b2c0      	uxtb	r0, r0
 8011a9e:	b009      	add	sp, #36	@ 0x24
 8011aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011aa2:	6864      	ldr	r4, [r4, #4]
 8011aa4:	f7f9 fe64 	bl	800b770 <rmw_uxrce_clean_expired_static_input_buffer>
 8011aa8:	4620      	mov	r0, r4
 8011aaa:	f7f9 fe3b 	bl	800b724 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011aae:	4605      	mov	r5, r0
 8011ab0:	b910      	cbnz	r0, 8011ab8 <rmw_take_with_info+0x74>
 8011ab2:	2001      	movs	r0, #1
 8011ab4:	b009      	add	sp, #36	@ 0x24
 8011ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ab8:	68a9      	ldr	r1, [r5, #8]
 8011aba:	4668      	mov	r0, sp
 8011abc:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8011ac0:	3110      	adds	r1, #16
 8011ac2:	f001 faaf 	bl	8013024 <ucdr_init_buffer>
 8011ac6:	69a3      	ldr	r3, [r4, #24]
 8011ac8:	4639      	mov	r1, r7
 8011aca:	68db      	ldr	r3, [r3, #12]
 8011acc:	4668      	mov	r0, sp
 8011ace:	4798      	blx	r3
 8011ad0:	4629      	mov	r1, r5
 8011ad2:	4604      	mov	r4, r0
 8011ad4:	4804      	ldr	r0, [pc, #16]	@ (8011ae8 <rmw_take_with_info+0xa4>)
 8011ad6:	f7ff fde3 	bl	80116a0 <put_memory>
 8011ada:	e7dd      	b.n	8011a98 <rmw_take_with_info+0x54>
 8011adc:	200c      	movs	r0, #12
 8011ade:	b009      	add	sp, #36	@ 0x24
 8011ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ae2:	bf00      	nop
 8011ae4:	08015fac 	.word	0x08015fac
 8011ae8:	2000ab74 	.word	0x2000ab74

08011aec <rmw_wait>:
 8011aec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011af0:	b089      	sub	sp, #36	@ 0x24
 8011af2:	4605      	mov	r5, r0
 8011af4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8011af6:	460e      	mov	r6, r1
 8011af8:	4698      	mov	r8, r3
 8011afa:	4691      	mov	r9, r2
 8011afc:	2a00      	cmp	r2, #0
 8011afe:	f000 810a 	beq.w	8011d16 <rmw_wait+0x22a>
 8011b02:	b16c      	cbz	r4, 8011b20 <rmw_wait+0x34>
 8011b04:	4bae      	ldr	r3, [pc, #696]	@ (8011dc0 <rmw_wait+0x2d4>)
 8011b06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011b08:	af04      	add	r7, sp, #16
 8011b0a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8011b0e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8011b12:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011b16:	f7ff faff 	bl	8011118 <rmw_time_equal>
 8011b1a:	2800      	cmp	r0, #0
 8011b1c:	f000 8127 	beq.w	8011d6e <rmw_wait+0x282>
 8011b20:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8011b24:	f7f9 fe24 	bl	800b770 <rmw_uxrce_clean_expired_static_input_buffer>
 8011b28:	4ba6      	ldr	r3, [pc, #664]	@ (8011dc4 <rmw_wait+0x2d8>)
 8011b2a:	681c      	ldr	r4, [r3, #0]
 8011b2c:	b14c      	cbz	r4, 8011b42 <rmw_wait+0x56>
 8011b2e:	4623      	mov	r3, r4
 8011b30:	2100      	movs	r1, #0
 8011b32:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8011b36:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8011b3a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d1f7      	bne.n	8011b32 <rmw_wait+0x46>
 8011b42:	f1b9 0f00 	cmp.w	r9, #0
 8011b46:	d011      	beq.n	8011b6c <rmw_wait+0x80>
 8011b48:	f8d9 1000 	ldr.w	r1, [r9]
 8011b4c:	b171      	cbz	r1, 8011b6c <rmw_wait+0x80>
 8011b4e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8011b52:	2300      	movs	r3, #0
 8011b54:	2001      	movs	r0, #1
 8011b56:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8011b5a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8011b5c:	6912      	ldr	r2, [r2, #16]
 8011b5e:	3301      	adds	r3, #1
 8011b60:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8011b64:	4299      	cmp	r1, r3
 8011b66:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8011b6a:	d1f4      	bne.n	8011b56 <rmw_wait+0x6a>
 8011b6c:	f1b8 0f00 	cmp.w	r8, #0
 8011b70:	d011      	beq.n	8011b96 <rmw_wait+0xaa>
 8011b72:	f8d8 1000 	ldr.w	r1, [r8]
 8011b76:	b171      	cbz	r1, 8011b96 <rmw_wait+0xaa>
 8011b78:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	2001      	movs	r0, #1
 8011b80:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8011b84:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8011b86:	6912      	ldr	r2, [r2, #16]
 8011b88:	3301      	adds	r3, #1
 8011b8a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8011b8e:	4299      	cmp	r1, r3
 8011b90:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8011b94:	d1f4      	bne.n	8011b80 <rmw_wait+0x94>
 8011b96:	b185      	cbz	r5, 8011bba <rmw_wait+0xce>
 8011b98:	6829      	ldr	r1, [r5, #0]
 8011b9a:	b171      	cbz	r1, 8011bba <rmw_wait+0xce>
 8011b9c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	2001      	movs	r0, #1
 8011ba4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8011ba8:	6a12      	ldr	r2, [r2, #32]
 8011baa:	6912      	ldr	r2, [r2, #16]
 8011bac:	3301      	adds	r3, #1
 8011bae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8011bb2:	4299      	cmp	r1, r3
 8011bb4:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8011bb8:	d1f4      	bne.n	8011ba4 <rmw_wait+0xb8>
 8011bba:	b34c      	cbz	r4, 8011c10 <rmw_wait+0x124>
 8011bbc:	4622      	mov	r2, r4
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8011bc4:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8011bc8:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8011bcc:	440b      	add	r3, r1
 8011bce:	b2db      	uxtb	r3, r3
 8011bd0:	2a00      	cmp	r2, #0
 8011bd2:	d1f5      	bne.n	8011bc0 <rmw_wait+0xd4>
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	f000 8084 	beq.w	8011ce2 <rmw_wait+0x1f6>
 8011bda:	1c7a      	adds	r2, r7, #1
 8011bdc:	d00d      	beq.n	8011bfa <rmw_wait+0x10e>
 8011bde:	ee07 7a90 	vmov	s15, r7
 8011be2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011be6:	ee07 3a90 	vmov	s15, r3
 8011bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011bf2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8011bf6:	ee17 7a90 	vmov	r7, s15
 8011bfa:	68a0      	ldr	r0, [r4, #8]
 8011bfc:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8011c00:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	f040 8090 	bne.w	8011d2a <rmw_wait+0x23e>
 8011c0a:	6864      	ldr	r4, [r4, #4]
 8011c0c:	2c00      	cmp	r4, #0
 8011c0e:	d1f4      	bne.n	8011bfa <rmw_wait+0x10e>
 8011c10:	f1b9 0f00 	cmp.w	r9, #0
 8011c14:	f000 80bc 	beq.w	8011d90 <rmw_wait+0x2a4>
 8011c18:	f8d9 7000 	ldr.w	r7, [r9]
 8011c1c:	2f00      	cmp	r7, #0
 8011c1e:	f000 808e 	beq.w	8011d3e <rmw_wait+0x252>
 8011c22:	2400      	movs	r4, #0
 8011c24:	4627      	mov	r7, r4
 8011c26:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011c2a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011c2e:	f7f9 fd79 	bl	800b724 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011c32:	2800      	cmp	r0, #0
 8011c34:	d05f      	beq.n	8011cf6 <rmw_wait+0x20a>
 8011c36:	f8d9 3000 	ldr.w	r3, [r9]
 8011c3a:	3401      	adds	r4, #1
 8011c3c:	42a3      	cmp	r3, r4
 8011c3e:	f04f 0701 	mov.w	r7, #1
 8011c42:	d8f0      	bhi.n	8011c26 <rmw_wait+0x13a>
 8011c44:	f1b8 0f00 	cmp.w	r8, #0
 8011c48:	d012      	beq.n	8011c70 <rmw_wait+0x184>
 8011c4a:	f8d8 3000 	ldr.w	r3, [r8]
 8011c4e:	b17b      	cbz	r3, 8011c70 <rmw_wait+0x184>
 8011c50:	2400      	movs	r4, #0
 8011c52:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011c56:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011c5a:	f7f9 fd63 	bl	800b724 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011c5e:	2800      	cmp	r0, #0
 8011c60:	d051      	beq.n	8011d06 <rmw_wait+0x21a>
 8011c62:	f8d8 3000 	ldr.w	r3, [r8]
 8011c66:	3401      	adds	r4, #1
 8011c68:	42a3      	cmp	r3, r4
 8011c6a:	f04f 0701 	mov.w	r7, #1
 8011c6e:	d8f0      	bhi.n	8011c52 <rmw_wait+0x166>
 8011c70:	b1dd      	cbz	r5, 8011caa <rmw_wait+0x1be>
 8011c72:	682b      	ldr	r3, [r5, #0]
 8011c74:	b1cb      	cbz	r3, 8011caa <rmw_wait+0x1be>
 8011c76:	2400      	movs	r4, #0
 8011c78:	686b      	ldr	r3, [r5, #4]
 8011c7a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011c7e:	f7f9 fd51 	bl	800b724 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011c82:	b158      	cbz	r0, 8011c9c <rmw_wait+0x1b0>
 8011c84:	682b      	ldr	r3, [r5, #0]
 8011c86:	3401      	adds	r4, #1
 8011c88:	42a3      	cmp	r3, r4
 8011c8a:	d969      	bls.n	8011d60 <rmw_wait+0x274>
 8011c8c:	686b      	ldr	r3, [r5, #4]
 8011c8e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011c92:	2701      	movs	r7, #1
 8011c94:	f7f9 fd46 	bl	800b724 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011c98:	2800      	cmp	r0, #0
 8011c9a:	d1f3      	bne.n	8011c84 <rmw_wait+0x198>
 8011c9c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8011ca0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8011ca4:	3401      	adds	r4, #1
 8011ca6:	42a3      	cmp	r3, r4
 8011ca8:	d8e6      	bhi.n	8011c78 <rmw_wait+0x18c>
 8011caa:	b1a6      	cbz	r6, 8011cd6 <rmw_wait+0x1ea>
 8011cac:	6834      	ldr	r4, [r6, #0]
 8011cae:	b194      	cbz	r4, 8011cd6 <rmw_wait+0x1ea>
 8011cb0:	2300      	movs	r3, #0
 8011cb2:	461d      	mov	r5, r3
 8011cb4:	e004      	b.n	8011cc0 <rmw_wait+0x1d4>
 8011cb6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8011cba:	3301      	adds	r3, #1
 8011cbc:	42a3      	cmp	r3, r4
 8011cbe:	d00a      	beq.n	8011cd6 <rmw_wait+0x1ea>
 8011cc0:	6870      	ldr	r0, [r6, #4]
 8011cc2:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8011cc6:	7c0a      	ldrb	r2, [r1, #16]
 8011cc8:	2a00      	cmp	r2, #0
 8011cca:	d0f4      	beq.n	8011cb6 <rmw_wait+0x1ca>
 8011ccc:	3301      	adds	r3, #1
 8011cce:	42a3      	cmp	r3, r4
 8011cd0:	740d      	strb	r5, [r1, #16]
 8011cd2:	4617      	mov	r7, r2
 8011cd4:	d1f4      	bne.n	8011cc0 <rmw_wait+0x1d4>
 8011cd6:	2f00      	cmp	r7, #0
 8011cd8:	d03e      	beq.n	8011d58 <rmw_wait+0x26c>
 8011cda:	2000      	movs	r0, #0
 8011cdc:	b009      	add	sp, #36	@ 0x24
 8011cde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ce2:	68a0      	ldr	r0, [r4, #8]
 8011ce4:	2100      	movs	r1, #0
 8011ce6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011cea:	f7fa fcf3 	bl	800c6d4 <uxr_run_session_timeout>
 8011cee:	6864      	ldr	r4, [r4, #4]
 8011cf0:	2c00      	cmp	r4, #0
 8011cf2:	d1f6      	bne.n	8011ce2 <rmw_wait+0x1f6>
 8011cf4:	e78c      	b.n	8011c10 <rmw_wait+0x124>
 8011cf6:	e9d9 3200 	ldrd	r3, r2, [r9]
 8011cfa:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8011cfe:	3401      	adds	r4, #1
 8011d00:	42a3      	cmp	r3, r4
 8011d02:	d890      	bhi.n	8011c26 <rmw_wait+0x13a>
 8011d04:	e79e      	b.n	8011c44 <rmw_wait+0x158>
 8011d06:	e9d8 3200 	ldrd	r3, r2, [r8]
 8011d0a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8011d0e:	3401      	adds	r4, #1
 8011d10:	429c      	cmp	r4, r3
 8011d12:	d39e      	bcc.n	8011c52 <rmw_wait+0x166>
 8011d14:	e7ac      	b.n	8011c70 <rmw_wait+0x184>
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	f47f aef3 	bne.w	8011b02 <rmw_wait+0x16>
 8011d1c:	2800      	cmp	r0, #0
 8011d1e:	f47f aef0 	bne.w	8011b02 <rmw_wait+0x16>
 8011d22:	2900      	cmp	r1, #0
 8011d24:	f47f aeed 	bne.w	8011b02 <rmw_wait+0x16>
 8011d28:	e7d7      	b.n	8011cda <rmw_wait+0x1ee>
 8011d2a:	4639      	mov	r1, r7
 8011d2c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011d30:	f7fa fcea 	bl	800c708 <uxr_run_session_until_data>
 8011d34:	6864      	ldr	r4, [r4, #4]
 8011d36:	2c00      	cmp	r4, #0
 8011d38:	f47f af5f 	bne.w	8011bfa <rmw_wait+0x10e>
 8011d3c:	e768      	b.n	8011c10 <rmw_wait+0x124>
 8011d3e:	f1b8 0f00 	cmp.w	r8, #0
 8011d42:	d032      	beq.n	8011daa <rmw_wait+0x2be>
 8011d44:	f8d8 3000 	ldr.w	r3, [r8]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d181      	bne.n	8011c50 <rmw_wait+0x164>
 8011d4c:	461f      	mov	r7, r3
 8011d4e:	2d00      	cmp	r5, #0
 8011d50:	d18f      	bne.n	8011c72 <rmw_wait+0x186>
 8011d52:	462f      	mov	r7, r5
 8011d54:	2e00      	cmp	r6, #0
 8011d56:	d1a9      	bne.n	8011cac <rmw_wait+0x1c0>
 8011d58:	2002      	movs	r0, #2
 8011d5a:	b009      	add	sp, #36	@ 0x24
 8011d5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d60:	2e00      	cmp	r6, #0
 8011d62:	d0ba      	beq.n	8011cda <rmw_wait+0x1ee>
 8011d64:	6834      	ldr	r4, [r6, #0]
 8011d66:	2701      	movs	r7, #1
 8011d68:	2c00      	cmp	r4, #0
 8011d6a:	d1a1      	bne.n	8011cb0 <rmw_wait+0x1c4>
 8011d6c:	e7b5      	b.n	8011cda <rmw_wait+0x1ee>
 8011d6e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011d72:	f7ff fa25 	bl	80111c0 <rmw_time_total_nsec>
 8011d76:	2300      	movs	r3, #0
 8011d78:	4a13      	ldr	r2, [pc, #76]	@ (8011dc8 <rmw_wait+0x2dc>)
 8011d7a:	f7ee fb09 	bl	8000390 <__aeabi_uldivmod>
 8011d7e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8011d82:	f171 0300 	sbcs.w	r3, r1, #0
 8011d86:	4607      	mov	r7, r0
 8011d88:	bfa8      	it	ge
 8011d8a:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8011d8e:	e6c9      	b.n	8011b24 <rmw_wait+0x38>
 8011d90:	f1b8 0f00 	cmp.w	r8, #0
 8011d94:	d009      	beq.n	8011daa <rmw_wait+0x2be>
 8011d96:	f8d8 3000 	ldr.w	r3, [r8]
 8011d9a:	464f      	mov	r7, r9
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	f47f af57 	bne.w	8011c50 <rmw_wait+0x164>
 8011da2:	2d00      	cmp	r5, #0
 8011da4:	f47f af65 	bne.w	8011c72 <rmw_wait+0x186>
 8011da8:	e7d3      	b.n	8011d52 <rmw_wait+0x266>
 8011daa:	b17d      	cbz	r5, 8011dcc <rmw_wait+0x2e0>
 8011dac:	682b      	ldr	r3, [r5, #0]
 8011dae:	4647      	mov	r7, r8
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	f47f af60 	bne.w	8011c76 <rmw_wait+0x18a>
 8011db6:	2e00      	cmp	r6, #0
 8011db8:	f47f af78 	bne.w	8011cac <rmw_wait+0x1c0>
 8011dbc:	e7cc      	b.n	8011d58 <rmw_wait+0x26c>
 8011dbe:	bf00      	nop
 8011dc0:	08015720 	.word	0x08015720
 8011dc4:	2000ab64 	.word	0x2000ab64
 8011dc8:	000f4240 	.word	0x000f4240
 8011dcc:	2e00      	cmp	r6, #0
 8011dce:	d0c3      	beq.n	8011d58 <rmw_wait+0x26c>
 8011dd0:	6834      	ldr	r4, [r6, #0]
 8011dd2:	462f      	mov	r7, r5
 8011dd4:	2c00      	cmp	r4, #0
 8011dd6:	f47f af6b 	bne.w	8011cb0 <rmw_wait+0x1c4>
 8011dda:	e7bd      	b.n	8011d58 <rmw_wait+0x26c>

08011ddc <rmw_create_wait_set>:
 8011ddc:	b508      	push	{r3, lr}
 8011dde:	4803      	ldr	r0, [pc, #12]	@ (8011dec <rmw_create_wait_set+0x10>)
 8011de0:	f7ff fc4e 	bl	8011680 <get_memory>
 8011de4:	b108      	cbz	r0, 8011dea <rmw_create_wait_set+0xe>
 8011de6:	6880      	ldr	r0, [r0, #8]
 8011de8:	3010      	adds	r0, #16
 8011dea:	bd08      	pop	{r3, pc}
 8011dec:	2000aba4 	.word	0x2000aba4

08011df0 <rmw_destroy_wait_set>:
 8011df0:	b508      	push	{r3, lr}
 8011df2:	4b08      	ldr	r3, [pc, #32]	@ (8011e14 <rmw_destroy_wait_set+0x24>)
 8011df4:	6819      	ldr	r1, [r3, #0]
 8011df6:	b911      	cbnz	r1, 8011dfe <rmw_destroy_wait_set+0xe>
 8011df8:	e00a      	b.n	8011e10 <rmw_destroy_wait_set+0x20>
 8011dfa:	6849      	ldr	r1, [r1, #4]
 8011dfc:	b141      	cbz	r1, 8011e10 <rmw_destroy_wait_set+0x20>
 8011dfe:	688b      	ldr	r3, [r1, #8]
 8011e00:	3310      	adds	r3, #16
 8011e02:	4298      	cmp	r0, r3
 8011e04:	d1f9      	bne.n	8011dfa <rmw_destroy_wait_set+0xa>
 8011e06:	4803      	ldr	r0, [pc, #12]	@ (8011e14 <rmw_destroy_wait_set+0x24>)
 8011e08:	f7ff fc4a 	bl	80116a0 <put_memory>
 8011e0c:	2000      	movs	r0, #0
 8011e0e:	bd08      	pop	{r3, pc}
 8011e10:	2001      	movs	r0, #1
 8011e12:	bd08      	pop	{r3, pc}
 8011e14:	2000aba4 	.word	0x2000aba4

08011e18 <ucdr_serialize_endian_array_char>:
 8011e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e1c:	4619      	mov	r1, r3
 8011e1e:	461f      	mov	r7, r3
 8011e20:	4605      	mov	r5, r0
 8011e22:	4690      	mov	r8, r2
 8011e24:	f001 f8aa 	bl	8012f7c <ucdr_check_buffer_available_for>
 8011e28:	b9e0      	cbnz	r0, 8011e64 <ucdr_serialize_endian_array_char+0x4c>
 8011e2a:	463e      	mov	r6, r7
 8011e2c:	e009      	b.n	8011e42 <ucdr_serialize_endian_array_char+0x2a>
 8011e2e:	68a8      	ldr	r0, [r5, #8]
 8011e30:	f002 fd5d 	bl	80148ee <memcpy>
 8011e34:	68ab      	ldr	r3, [r5, #8]
 8011e36:	6928      	ldr	r0, [r5, #16]
 8011e38:	4423      	add	r3, r4
 8011e3a:	4420      	add	r0, r4
 8011e3c:	1b36      	subs	r6, r6, r4
 8011e3e:	60ab      	str	r3, [r5, #8]
 8011e40:	6128      	str	r0, [r5, #16]
 8011e42:	4631      	mov	r1, r6
 8011e44:	2201      	movs	r2, #1
 8011e46:	4628      	mov	r0, r5
 8011e48:	f001 f920 	bl	801308c <ucdr_check_final_buffer_behavior_array>
 8011e4c:	1bb9      	subs	r1, r7, r6
 8011e4e:	4441      	add	r1, r8
 8011e50:	4604      	mov	r4, r0
 8011e52:	4602      	mov	r2, r0
 8011e54:	2800      	cmp	r0, #0
 8011e56:	d1ea      	bne.n	8011e2e <ucdr_serialize_endian_array_char+0x16>
 8011e58:	2301      	movs	r3, #1
 8011e5a:	7da8      	ldrb	r0, [r5, #22]
 8011e5c:	756b      	strb	r3, [r5, #21]
 8011e5e:	4058      	eors	r0, r3
 8011e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e64:	463a      	mov	r2, r7
 8011e66:	68a8      	ldr	r0, [r5, #8]
 8011e68:	4641      	mov	r1, r8
 8011e6a:	f002 fd40 	bl	80148ee <memcpy>
 8011e6e:	68aa      	ldr	r2, [r5, #8]
 8011e70:	692b      	ldr	r3, [r5, #16]
 8011e72:	443a      	add	r2, r7
 8011e74:	443b      	add	r3, r7
 8011e76:	60aa      	str	r2, [r5, #8]
 8011e78:	612b      	str	r3, [r5, #16]
 8011e7a:	e7ed      	b.n	8011e58 <ucdr_serialize_endian_array_char+0x40>

08011e7c <ucdr_deserialize_endian_array_char>:
 8011e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e80:	4619      	mov	r1, r3
 8011e82:	461f      	mov	r7, r3
 8011e84:	4605      	mov	r5, r0
 8011e86:	4690      	mov	r8, r2
 8011e88:	f001 f878 	bl	8012f7c <ucdr_check_buffer_available_for>
 8011e8c:	b9e0      	cbnz	r0, 8011ec8 <ucdr_deserialize_endian_array_char+0x4c>
 8011e8e:	463e      	mov	r6, r7
 8011e90:	e009      	b.n	8011ea6 <ucdr_deserialize_endian_array_char+0x2a>
 8011e92:	68a9      	ldr	r1, [r5, #8]
 8011e94:	f002 fd2b 	bl	80148ee <memcpy>
 8011e98:	68ab      	ldr	r3, [r5, #8]
 8011e9a:	6928      	ldr	r0, [r5, #16]
 8011e9c:	4423      	add	r3, r4
 8011e9e:	4420      	add	r0, r4
 8011ea0:	1b36      	subs	r6, r6, r4
 8011ea2:	60ab      	str	r3, [r5, #8]
 8011ea4:	6128      	str	r0, [r5, #16]
 8011ea6:	2201      	movs	r2, #1
 8011ea8:	4631      	mov	r1, r6
 8011eaa:	4628      	mov	r0, r5
 8011eac:	f001 f8ee 	bl	801308c <ucdr_check_final_buffer_behavior_array>
 8011eb0:	4604      	mov	r4, r0
 8011eb2:	1bb8      	subs	r0, r7, r6
 8011eb4:	4440      	add	r0, r8
 8011eb6:	4622      	mov	r2, r4
 8011eb8:	2c00      	cmp	r4, #0
 8011eba:	d1ea      	bne.n	8011e92 <ucdr_deserialize_endian_array_char+0x16>
 8011ebc:	2301      	movs	r3, #1
 8011ebe:	7da8      	ldrb	r0, [r5, #22]
 8011ec0:	756b      	strb	r3, [r5, #21]
 8011ec2:	4058      	eors	r0, r3
 8011ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ec8:	463a      	mov	r2, r7
 8011eca:	68a9      	ldr	r1, [r5, #8]
 8011ecc:	4640      	mov	r0, r8
 8011ece:	f002 fd0e 	bl	80148ee <memcpy>
 8011ed2:	68aa      	ldr	r2, [r5, #8]
 8011ed4:	692b      	ldr	r3, [r5, #16]
 8011ed6:	443a      	add	r2, r7
 8011ed8:	443b      	add	r3, r7
 8011eda:	60aa      	str	r2, [r5, #8]
 8011edc:	612b      	str	r3, [r5, #16]
 8011ede:	e7ed      	b.n	8011ebc <ucdr_deserialize_endian_array_char+0x40>

08011ee0 <ucdr_serialize_array_uint8_t>:
 8011ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ee4:	4688      	mov	r8, r1
 8011ee6:	4611      	mov	r1, r2
 8011ee8:	4617      	mov	r7, r2
 8011eea:	4605      	mov	r5, r0
 8011eec:	f001 f846 	bl	8012f7c <ucdr_check_buffer_available_for>
 8011ef0:	b9e0      	cbnz	r0, 8011f2c <ucdr_serialize_array_uint8_t+0x4c>
 8011ef2:	463e      	mov	r6, r7
 8011ef4:	e009      	b.n	8011f0a <ucdr_serialize_array_uint8_t+0x2a>
 8011ef6:	68a8      	ldr	r0, [r5, #8]
 8011ef8:	f002 fcf9 	bl	80148ee <memcpy>
 8011efc:	68aa      	ldr	r2, [r5, #8]
 8011efe:	692b      	ldr	r3, [r5, #16]
 8011f00:	4422      	add	r2, r4
 8011f02:	4423      	add	r3, r4
 8011f04:	1b36      	subs	r6, r6, r4
 8011f06:	60aa      	str	r2, [r5, #8]
 8011f08:	612b      	str	r3, [r5, #16]
 8011f0a:	4631      	mov	r1, r6
 8011f0c:	2201      	movs	r2, #1
 8011f0e:	4628      	mov	r0, r5
 8011f10:	f001 f8bc 	bl	801308c <ucdr_check_final_buffer_behavior_array>
 8011f14:	1bb9      	subs	r1, r7, r6
 8011f16:	4441      	add	r1, r8
 8011f18:	4604      	mov	r4, r0
 8011f1a:	4602      	mov	r2, r0
 8011f1c:	2800      	cmp	r0, #0
 8011f1e:	d1ea      	bne.n	8011ef6 <ucdr_serialize_array_uint8_t+0x16>
 8011f20:	2301      	movs	r3, #1
 8011f22:	7da8      	ldrb	r0, [r5, #22]
 8011f24:	756b      	strb	r3, [r5, #21]
 8011f26:	4058      	eors	r0, r3
 8011f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f2c:	463a      	mov	r2, r7
 8011f2e:	68a8      	ldr	r0, [r5, #8]
 8011f30:	4641      	mov	r1, r8
 8011f32:	f002 fcdc 	bl	80148ee <memcpy>
 8011f36:	68aa      	ldr	r2, [r5, #8]
 8011f38:	692b      	ldr	r3, [r5, #16]
 8011f3a:	443a      	add	r2, r7
 8011f3c:	443b      	add	r3, r7
 8011f3e:	60aa      	str	r2, [r5, #8]
 8011f40:	612b      	str	r3, [r5, #16]
 8011f42:	e7ed      	b.n	8011f20 <ucdr_serialize_array_uint8_t+0x40>

08011f44 <ucdr_serialize_endian_array_uint8_t>:
 8011f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f48:	4619      	mov	r1, r3
 8011f4a:	461f      	mov	r7, r3
 8011f4c:	4605      	mov	r5, r0
 8011f4e:	4690      	mov	r8, r2
 8011f50:	f001 f814 	bl	8012f7c <ucdr_check_buffer_available_for>
 8011f54:	b9e0      	cbnz	r0, 8011f90 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8011f56:	463e      	mov	r6, r7
 8011f58:	e009      	b.n	8011f6e <ucdr_serialize_endian_array_uint8_t+0x2a>
 8011f5a:	68a8      	ldr	r0, [r5, #8]
 8011f5c:	f002 fcc7 	bl	80148ee <memcpy>
 8011f60:	68ab      	ldr	r3, [r5, #8]
 8011f62:	6928      	ldr	r0, [r5, #16]
 8011f64:	4423      	add	r3, r4
 8011f66:	4420      	add	r0, r4
 8011f68:	1b36      	subs	r6, r6, r4
 8011f6a:	60ab      	str	r3, [r5, #8]
 8011f6c:	6128      	str	r0, [r5, #16]
 8011f6e:	4631      	mov	r1, r6
 8011f70:	2201      	movs	r2, #1
 8011f72:	4628      	mov	r0, r5
 8011f74:	f001 f88a 	bl	801308c <ucdr_check_final_buffer_behavior_array>
 8011f78:	1bb9      	subs	r1, r7, r6
 8011f7a:	4441      	add	r1, r8
 8011f7c:	4604      	mov	r4, r0
 8011f7e:	4602      	mov	r2, r0
 8011f80:	2800      	cmp	r0, #0
 8011f82:	d1ea      	bne.n	8011f5a <ucdr_serialize_endian_array_uint8_t+0x16>
 8011f84:	2301      	movs	r3, #1
 8011f86:	7da8      	ldrb	r0, [r5, #22]
 8011f88:	756b      	strb	r3, [r5, #21]
 8011f8a:	4058      	eors	r0, r3
 8011f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f90:	463a      	mov	r2, r7
 8011f92:	68a8      	ldr	r0, [r5, #8]
 8011f94:	4641      	mov	r1, r8
 8011f96:	f002 fcaa 	bl	80148ee <memcpy>
 8011f9a:	68aa      	ldr	r2, [r5, #8]
 8011f9c:	692b      	ldr	r3, [r5, #16]
 8011f9e:	443a      	add	r2, r7
 8011fa0:	443b      	add	r3, r7
 8011fa2:	60aa      	str	r2, [r5, #8]
 8011fa4:	612b      	str	r3, [r5, #16]
 8011fa6:	e7ed      	b.n	8011f84 <ucdr_serialize_endian_array_uint8_t+0x40>

08011fa8 <ucdr_deserialize_array_uint8_t>:
 8011fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fac:	4688      	mov	r8, r1
 8011fae:	4611      	mov	r1, r2
 8011fb0:	4617      	mov	r7, r2
 8011fb2:	4605      	mov	r5, r0
 8011fb4:	f000 ffe2 	bl	8012f7c <ucdr_check_buffer_available_for>
 8011fb8:	b9e0      	cbnz	r0, 8011ff4 <ucdr_deserialize_array_uint8_t+0x4c>
 8011fba:	463e      	mov	r6, r7
 8011fbc:	e009      	b.n	8011fd2 <ucdr_deserialize_array_uint8_t+0x2a>
 8011fbe:	68a9      	ldr	r1, [r5, #8]
 8011fc0:	f002 fc95 	bl	80148ee <memcpy>
 8011fc4:	68aa      	ldr	r2, [r5, #8]
 8011fc6:	692b      	ldr	r3, [r5, #16]
 8011fc8:	4422      	add	r2, r4
 8011fca:	4423      	add	r3, r4
 8011fcc:	1b36      	subs	r6, r6, r4
 8011fce:	60aa      	str	r2, [r5, #8]
 8011fd0:	612b      	str	r3, [r5, #16]
 8011fd2:	2201      	movs	r2, #1
 8011fd4:	4631      	mov	r1, r6
 8011fd6:	4628      	mov	r0, r5
 8011fd8:	f001 f858 	bl	801308c <ucdr_check_final_buffer_behavior_array>
 8011fdc:	4604      	mov	r4, r0
 8011fde:	1bb8      	subs	r0, r7, r6
 8011fe0:	4440      	add	r0, r8
 8011fe2:	4622      	mov	r2, r4
 8011fe4:	2c00      	cmp	r4, #0
 8011fe6:	d1ea      	bne.n	8011fbe <ucdr_deserialize_array_uint8_t+0x16>
 8011fe8:	2301      	movs	r3, #1
 8011fea:	7da8      	ldrb	r0, [r5, #22]
 8011fec:	756b      	strb	r3, [r5, #21]
 8011fee:	4058      	eors	r0, r3
 8011ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ff4:	463a      	mov	r2, r7
 8011ff6:	68a9      	ldr	r1, [r5, #8]
 8011ff8:	4640      	mov	r0, r8
 8011ffa:	f002 fc78 	bl	80148ee <memcpy>
 8011ffe:	68aa      	ldr	r2, [r5, #8]
 8012000:	692b      	ldr	r3, [r5, #16]
 8012002:	443a      	add	r2, r7
 8012004:	443b      	add	r3, r7
 8012006:	60aa      	str	r2, [r5, #8]
 8012008:	612b      	str	r3, [r5, #16]
 801200a:	e7ed      	b.n	8011fe8 <ucdr_deserialize_array_uint8_t+0x40>

0801200c <ucdr_deserialize_endian_array_uint8_t>:
 801200c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012010:	4619      	mov	r1, r3
 8012012:	461f      	mov	r7, r3
 8012014:	4605      	mov	r5, r0
 8012016:	4690      	mov	r8, r2
 8012018:	f000 ffb0 	bl	8012f7c <ucdr_check_buffer_available_for>
 801201c:	b9e0      	cbnz	r0, 8012058 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 801201e:	463e      	mov	r6, r7
 8012020:	e009      	b.n	8012036 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8012022:	68a9      	ldr	r1, [r5, #8]
 8012024:	f002 fc63 	bl	80148ee <memcpy>
 8012028:	68ab      	ldr	r3, [r5, #8]
 801202a:	6928      	ldr	r0, [r5, #16]
 801202c:	4423      	add	r3, r4
 801202e:	4420      	add	r0, r4
 8012030:	1b36      	subs	r6, r6, r4
 8012032:	60ab      	str	r3, [r5, #8]
 8012034:	6128      	str	r0, [r5, #16]
 8012036:	2201      	movs	r2, #1
 8012038:	4631      	mov	r1, r6
 801203a:	4628      	mov	r0, r5
 801203c:	f001 f826 	bl	801308c <ucdr_check_final_buffer_behavior_array>
 8012040:	4604      	mov	r4, r0
 8012042:	1bb8      	subs	r0, r7, r6
 8012044:	4440      	add	r0, r8
 8012046:	4622      	mov	r2, r4
 8012048:	2c00      	cmp	r4, #0
 801204a:	d1ea      	bne.n	8012022 <ucdr_deserialize_endian_array_uint8_t+0x16>
 801204c:	2301      	movs	r3, #1
 801204e:	7da8      	ldrb	r0, [r5, #22]
 8012050:	756b      	strb	r3, [r5, #21]
 8012052:	4058      	eors	r0, r3
 8012054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012058:	463a      	mov	r2, r7
 801205a:	68a9      	ldr	r1, [r5, #8]
 801205c:	4640      	mov	r0, r8
 801205e:	f002 fc46 	bl	80148ee <memcpy>
 8012062:	68aa      	ldr	r2, [r5, #8]
 8012064:	692b      	ldr	r3, [r5, #16]
 8012066:	443a      	add	r2, r7
 8012068:	443b      	add	r3, r7
 801206a:	60aa      	str	r2, [r5, #8]
 801206c:	612b      	str	r3, [r5, #16]
 801206e:	e7ed      	b.n	801204c <ucdr_deserialize_endian_array_uint8_t+0x40>

08012070 <ucdr_serialize_bool>:
 8012070:	b538      	push	{r3, r4, r5, lr}
 8012072:	460d      	mov	r5, r1
 8012074:	2101      	movs	r1, #1
 8012076:	4604      	mov	r4, r0
 8012078:	f000 ff8c 	bl	8012f94 <ucdr_check_final_buffer_behavior>
 801207c:	b148      	cbz	r0, 8012092 <ucdr_serialize_bool+0x22>
 801207e:	68a3      	ldr	r3, [r4, #8]
 8012080:	701d      	strb	r5, [r3, #0]
 8012082:	68a2      	ldr	r2, [r4, #8]
 8012084:	6923      	ldr	r3, [r4, #16]
 8012086:	2101      	movs	r1, #1
 8012088:	440a      	add	r2, r1
 801208a:	440b      	add	r3, r1
 801208c:	60a2      	str	r2, [r4, #8]
 801208e:	6123      	str	r3, [r4, #16]
 8012090:	7561      	strb	r1, [r4, #21]
 8012092:	7da0      	ldrb	r0, [r4, #22]
 8012094:	f080 0001 	eor.w	r0, r0, #1
 8012098:	bd38      	pop	{r3, r4, r5, pc}
 801209a:	bf00      	nop

0801209c <ucdr_deserialize_bool>:
 801209c:	b538      	push	{r3, r4, r5, lr}
 801209e:	460d      	mov	r5, r1
 80120a0:	2101      	movs	r1, #1
 80120a2:	4604      	mov	r4, r0
 80120a4:	f000 ff76 	bl	8012f94 <ucdr_check_final_buffer_behavior>
 80120a8:	b160      	cbz	r0, 80120c4 <ucdr_deserialize_bool+0x28>
 80120aa:	68a2      	ldr	r2, [r4, #8]
 80120ac:	6923      	ldr	r3, [r4, #16]
 80120ae:	f812 1b01 	ldrb.w	r1, [r2], #1
 80120b2:	3900      	subs	r1, #0
 80120b4:	bf18      	it	ne
 80120b6:	2101      	movne	r1, #1
 80120b8:	7029      	strb	r1, [r5, #0]
 80120ba:	3301      	adds	r3, #1
 80120bc:	2101      	movs	r1, #1
 80120be:	60a2      	str	r2, [r4, #8]
 80120c0:	6123      	str	r3, [r4, #16]
 80120c2:	7561      	strb	r1, [r4, #21]
 80120c4:	7da0      	ldrb	r0, [r4, #22]
 80120c6:	f080 0001 	eor.w	r0, r0, #1
 80120ca:	bd38      	pop	{r3, r4, r5, pc}

080120cc <ucdr_serialize_uint8_t>:
 80120cc:	b538      	push	{r3, r4, r5, lr}
 80120ce:	460d      	mov	r5, r1
 80120d0:	2101      	movs	r1, #1
 80120d2:	4604      	mov	r4, r0
 80120d4:	f000 ff5e 	bl	8012f94 <ucdr_check_final_buffer_behavior>
 80120d8:	b148      	cbz	r0, 80120ee <ucdr_serialize_uint8_t+0x22>
 80120da:	68a3      	ldr	r3, [r4, #8]
 80120dc:	701d      	strb	r5, [r3, #0]
 80120de:	68a2      	ldr	r2, [r4, #8]
 80120e0:	6923      	ldr	r3, [r4, #16]
 80120e2:	2101      	movs	r1, #1
 80120e4:	440a      	add	r2, r1
 80120e6:	440b      	add	r3, r1
 80120e8:	60a2      	str	r2, [r4, #8]
 80120ea:	6123      	str	r3, [r4, #16]
 80120ec:	7561      	strb	r1, [r4, #21]
 80120ee:	7da0      	ldrb	r0, [r4, #22]
 80120f0:	f080 0001 	eor.w	r0, r0, #1
 80120f4:	bd38      	pop	{r3, r4, r5, pc}
 80120f6:	bf00      	nop

080120f8 <ucdr_deserialize_uint8_t>:
 80120f8:	b538      	push	{r3, r4, r5, lr}
 80120fa:	460d      	mov	r5, r1
 80120fc:	2101      	movs	r1, #1
 80120fe:	4604      	mov	r4, r0
 8012100:	f000 ff48 	bl	8012f94 <ucdr_check_final_buffer_behavior>
 8012104:	b150      	cbz	r0, 801211c <ucdr_deserialize_uint8_t+0x24>
 8012106:	68a3      	ldr	r3, [r4, #8]
 8012108:	781b      	ldrb	r3, [r3, #0]
 801210a:	702b      	strb	r3, [r5, #0]
 801210c:	68a2      	ldr	r2, [r4, #8]
 801210e:	6923      	ldr	r3, [r4, #16]
 8012110:	2101      	movs	r1, #1
 8012112:	440a      	add	r2, r1
 8012114:	440b      	add	r3, r1
 8012116:	60a2      	str	r2, [r4, #8]
 8012118:	6123      	str	r3, [r4, #16]
 801211a:	7561      	strb	r1, [r4, #21]
 801211c:	7da0      	ldrb	r0, [r4, #22]
 801211e:	f080 0001 	eor.w	r0, r0, #1
 8012122:	bd38      	pop	{r3, r4, r5, pc}

08012124 <ucdr_serialize_uint16_t>:
 8012124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012128:	b082      	sub	sp, #8
 801212a:	460b      	mov	r3, r1
 801212c:	2102      	movs	r1, #2
 801212e:	4604      	mov	r4, r0
 8012130:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012134:	f000 ff82 	bl	801303c <ucdr_buffer_alignment>
 8012138:	4601      	mov	r1, r0
 801213a:	4620      	mov	r0, r4
 801213c:	7d67      	ldrb	r7, [r4, #21]
 801213e:	f000 ffc1 	bl	80130c4 <ucdr_advance_buffer>
 8012142:	2102      	movs	r1, #2
 8012144:	4620      	mov	r0, r4
 8012146:	f000 ff19 	bl	8012f7c <ucdr_check_buffer_available_for>
 801214a:	bb78      	cbnz	r0, 80121ac <ucdr_serialize_uint16_t+0x88>
 801214c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012150:	42ab      	cmp	r3, r5
 8012152:	d926      	bls.n	80121a2 <ucdr_serialize_uint16_t+0x7e>
 8012154:	1b5e      	subs	r6, r3, r5
 8012156:	60a3      	str	r3, [r4, #8]
 8012158:	6923      	ldr	r3, [r4, #16]
 801215a:	f1c6 0802 	rsb	r8, r6, #2
 801215e:	4433      	add	r3, r6
 8012160:	6123      	str	r3, [r4, #16]
 8012162:	4641      	mov	r1, r8
 8012164:	4620      	mov	r0, r4
 8012166:	f000 ff15 	bl	8012f94 <ucdr_check_final_buffer_behavior>
 801216a:	2800      	cmp	r0, #0
 801216c:	d03b      	beq.n	80121e6 <ucdr_serialize_uint16_t+0xc2>
 801216e:	7d23      	ldrb	r3, [r4, #20]
 8012170:	2b01      	cmp	r3, #1
 8012172:	d04a      	beq.n	801220a <ucdr_serialize_uint16_t+0xe6>
 8012174:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012178:	702b      	strb	r3, [r5, #0]
 801217a:	2e00      	cmp	r6, #0
 801217c:	d040      	beq.n	8012200 <ucdr_serialize_uint16_t+0xdc>
 801217e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012182:	706b      	strb	r3, [r5, #1]
 8012184:	6923      	ldr	r3, [r4, #16]
 8012186:	68a2      	ldr	r2, [r4, #8]
 8012188:	7da0      	ldrb	r0, [r4, #22]
 801218a:	3302      	adds	r3, #2
 801218c:	1b9e      	subs	r6, r3, r6
 801218e:	4442      	add	r2, r8
 8012190:	2302      	movs	r3, #2
 8012192:	f080 0001 	eor.w	r0, r0, #1
 8012196:	60a2      	str	r2, [r4, #8]
 8012198:	6126      	str	r6, [r4, #16]
 801219a:	7563      	strb	r3, [r4, #21]
 801219c:	b002      	add	sp, #8
 801219e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121a2:	2102      	movs	r1, #2
 80121a4:	4620      	mov	r0, r4
 80121a6:	f000 fef5 	bl	8012f94 <ucdr_check_final_buffer_behavior>
 80121aa:	b190      	cbz	r0, 80121d2 <ucdr_serialize_uint16_t+0xae>
 80121ac:	7d23      	ldrb	r3, [r4, #20]
 80121ae:	2b01      	cmp	r3, #1
 80121b0:	68a3      	ldr	r3, [r4, #8]
 80121b2:	d014      	beq.n	80121de <ucdr_serialize_uint16_t+0xba>
 80121b4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80121b8:	701a      	strb	r2, [r3, #0]
 80121ba:	68a3      	ldr	r3, [r4, #8]
 80121bc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80121c0:	705a      	strb	r2, [r3, #1]
 80121c2:	68a2      	ldr	r2, [r4, #8]
 80121c4:	6923      	ldr	r3, [r4, #16]
 80121c6:	3202      	adds	r2, #2
 80121c8:	3302      	adds	r3, #2
 80121ca:	2102      	movs	r1, #2
 80121cc:	60a2      	str	r2, [r4, #8]
 80121ce:	6123      	str	r3, [r4, #16]
 80121d0:	7561      	strb	r1, [r4, #21]
 80121d2:	7da0      	ldrb	r0, [r4, #22]
 80121d4:	f080 0001 	eor.w	r0, r0, #1
 80121d8:	b002      	add	sp, #8
 80121da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121de:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80121e2:	801a      	strh	r2, [r3, #0]
 80121e4:	e7ed      	b.n	80121c2 <ucdr_serialize_uint16_t+0x9e>
 80121e6:	68a2      	ldr	r2, [r4, #8]
 80121e8:	6923      	ldr	r3, [r4, #16]
 80121ea:	7da0      	ldrb	r0, [r4, #22]
 80121ec:	7567      	strb	r7, [r4, #21]
 80121ee:	1b92      	subs	r2, r2, r6
 80121f0:	1b9b      	subs	r3, r3, r6
 80121f2:	f080 0001 	eor.w	r0, r0, #1
 80121f6:	60a2      	str	r2, [r4, #8]
 80121f8:	6123      	str	r3, [r4, #16]
 80121fa:	b002      	add	sp, #8
 80121fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012200:	68a3      	ldr	r3, [r4, #8]
 8012202:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012206:	701a      	strb	r2, [r3, #0]
 8012208:	e7bc      	b.n	8012184 <ucdr_serialize_uint16_t+0x60>
 801220a:	4628      	mov	r0, r5
 801220c:	f10d 0506 	add.w	r5, sp, #6
 8012210:	4629      	mov	r1, r5
 8012212:	4632      	mov	r2, r6
 8012214:	f002 fb6b 	bl	80148ee <memcpy>
 8012218:	68a0      	ldr	r0, [r4, #8]
 801221a:	4642      	mov	r2, r8
 801221c:	19a9      	adds	r1, r5, r6
 801221e:	f002 fb66 	bl	80148ee <memcpy>
 8012222:	e7af      	b.n	8012184 <ucdr_serialize_uint16_t+0x60>

08012224 <ucdr_serialize_endian_uint16_t>:
 8012224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012228:	b083      	sub	sp, #12
 801222a:	460d      	mov	r5, r1
 801222c:	2102      	movs	r1, #2
 801222e:	4604      	mov	r4, r0
 8012230:	f8ad 2006 	strh.w	r2, [sp, #6]
 8012234:	f000 ff02 	bl	801303c <ucdr_buffer_alignment>
 8012238:	4601      	mov	r1, r0
 801223a:	4620      	mov	r0, r4
 801223c:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012240:	f000 ff40 	bl	80130c4 <ucdr_advance_buffer>
 8012244:	2102      	movs	r1, #2
 8012246:	4620      	mov	r0, r4
 8012248:	f000 fe98 	bl	8012f7c <ucdr_check_buffer_available_for>
 801224c:	bb70      	cbnz	r0, 80122ac <ucdr_serialize_endian_uint16_t+0x88>
 801224e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012252:	42be      	cmp	r6, r7
 8012254:	d925      	bls.n	80122a2 <ucdr_serialize_endian_uint16_t+0x7e>
 8012256:	6923      	ldr	r3, [r4, #16]
 8012258:	60a6      	str	r6, [r4, #8]
 801225a:	1bf6      	subs	r6, r6, r7
 801225c:	4433      	add	r3, r6
 801225e:	f1c6 0902 	rsb	r9, r6, #2
 8012262:	6123      	str	r3, [r4, #16]
 8012264:	4649      	mov	r1, r9
 8012266:	4620      	mov	r0, r4
 8012268:	f000 fe94 	bl	8012f94 <ucdr_check_final_buffer_behavior>
 801226c:	2800      	cmp	r0, #0
 801226e:	d039      	beq.n	80122e4 <ucdr_serialize_endian_uint16_t+0xc0>
 8012270:	2d01      	cmp	r5, #1
 8012272:	d04a      	beq.n	801230a <ucdr_serialize_endian_uint16_t+0xe6>
 8012274:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012278:	703b      	strb	r3, [r7, #0]
 801227a:	2e00      	cmp	r6, #0
 801227c:	d040      	beq.n	8012300 <ucdr_serialize_endian_uint16_t+0xdc>
 801227e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012282:	707b      	strb	r3, [r7, #1]
 8012284:	6923      	ldr	r3, [r4, #16]
 8012286:	68a2      	ldr	r2, [r4, #8]
 8012288:	7da0      	ldrb	r0, [r4, #22]
 801228a:	3302      	adds	r3, #2
 801228c:	444a      	add	r2, r9
 801228e:	1b9b      	subs	r3, r3, r6
 8012290:	2102      	movs	r1, #2
 8012292:	f080 0001 	eor.w	r0, r0, #1
 8012296:	60a2      	str	r2, [r4, #8]
 8012298:	6123      	str	r3, [r4, #16]
 801229a:	7561      	strb	r1, [r4, #21]
 801229c:	b003      	add	sp, #12
 801229e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80122a2:	2102      	movs	r1, #2
 80122a4:	4620      	mov	r0, r4
 80122a6:	f000 fe75 	bl	8012f94 <ucdr_check_final_buffer_behavior>
 80122aa:	b188      	cbz	r0, 80122d0 <ucdr_serialize_endian_uint16_t+0xac>
 80122ac:	2d01      	cmp	r5, #1
 80122ae:	68a3      	ldr	r3, [r4, #8]
 80122b0:	d014      	beq.n	80122dc <ucdr_serialize_endian_uint16_t+0xb8>
 80122b2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80122b6:	701a      	strb	r2, [r3, #0]
 80122b8:	68a3      	ldr	r3, [r4, #8]
 80122ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80122be:	705a      	strb	r2, [r3, #1]
 80122c0:	68a2      	ldr	r2, [r4, #8]
 80122c2:	6923      	ldr	r3, [r4, #16]
 80122c4:	3202      	adds	r2, #2
 80122c6:	3302      	adds	r3, #2
 80122c8:	2102      	movs	r1, #2
 80122ca:	60a2      	str	r2, [r4, #8]
 80122cc:	6123      	str	r3, [r4, #16]
 80122ce:	7561      	strb	r1, [r4, #21]
 80122d0:	7da0      	ldrb	r0, [r4, #22]
 80122d2:	f080 0001 	eor.w	r0, r0, #1
 80122d6:	b003      	add	sp, #12
 80122d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80122dc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80122e0:	801a      	strh	r2, [r3, #0]
 80122e2:	e7ed      	b.n	80122c0 <ucdr_serialize_endian_uint16_t+0x9c>
 80122e4:	68a2      	ldr	r2, [r4, #8]
 80122e6:	6923      	ldr	r3, [r4, #16]
 80122e8:	7da0      	ldrb	r0, [r4, #22]
 80122ea:	f884 8015 	strb.w	r8, [r4, #21]
 80122ee:	1b92      	subs	r2, r2, r6
 80122f0:	1b9b      	subs	r3, r3, r6
 80122f2:	f080 0001 	eor.w	r0, r0, #1
 80122f6:	60a2      	str	r2, [r4, #8]
 80122f8:	6123      	str	r3, [r4, #16]
 80122fa:	b003      	add	sp, #12
 80122fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012300:	68a3      	ldr	r3, [r4, #8]
 8012302:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012306:	701a      	strb	r2, [r3, #0]
 8012308:	e7bc      	b.n	8012284 <ucdr_serialize_endian_uint16_t+0x60>
 801230a:	f10d 0506 	add.w	r5, sp, #6
 801230e:	4629      	mov	r1, r5
 8012310:	4632      	mov	r2, r6
 8012312:	4638      	mov	r0, r7
 8012314:	f002 faeb 	bl	80148ee <memcpy>
 8012318:	68a0      	ldr	r0, [r4, #8]
 801231a:	464a      	mov	r2, r9
 801231c:	19a9      	adds	r1, r5, r6
 801231e:	f002 fae6 	bl	80148ee <memcpy>
 8012322:	e7af      	b.n	8012284 <ucdr_serialize_endian_uint16_t+0x60>

08012324 <ucdr_deserialize_uint16_t>:
 8012324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012328:	460d      	mov	r5, r1
 801232a:	2102      	movs	r1, #2
 801232c:	4604      	mov	r4, r0
 801232e:	f000 fe85 	bl	801303c <ucdr_buffer_alignment>
 8012332:	4601      	mov	r1, r0
 8012334:	4620      	mov	r0, r4
 8012336:	f894 8015 	ldrb.w	r8, [r4, #21]
 801233a:	f000 fec3 	bl	80130c4 <ucdr_advance_buffer>
 801233e:	2102      	movs	r1, #2
 8012340:	4620      	mov	r0, r4
 8012342:	f000 fe1b 	bl	8012f7c <ucdr_check_buffer_available_for>
 8012346:	bb60      	cbnz	r0, 80123a2 <ucdr_deserialize_uint16_t+0x7e>
 8012348:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801234c:	42be      	cmp	r6, r7
 801234e:	d923      	bls.n	8012398 <ucdr_deserialize_uint16_t+0x74>
 8012350:	6923      	ldr	r3, [r4, #16]
 8012352:	60a6      	str	r6, [r4, #8]
 8012354:	1bf6      	subs	r6, r6, r7
 8012356:	4433      	add	r3, r6
 8012358:	f1c6 0902 	rsb	r9, r6, #2
 801235c:	6123      	str	r3, [r4, #16]
 801235e:	4649      	mov	r1, r9
 8012360:	4620      	mov	r0, r4
 8012362:	f000 fe17 	bl	8012f94 <ucdr_check_final_buffer_behavior>
 8012366:	2800      	cmp	r0, #0
 8012368:	d034      	beq.n	80123d4 <ucdr_deserialize_uint16_t+0xb0>
 801236a:	7d23      	ldrb	r3, [r4, #20]
 801236c:	2b01      	cmp	r3, #1
 801236e:	d042      	beq.n	80123f6 <ucdr_deserialize_uint16_t+0xd2>
 8012370:	787b      	ldrb	r3, [r7, #1]
 8012372:	702b      	strb	r3, [r5, #0]
 8012374:	2e00      	cmp	r6, #0
 8012376:	d03a      	beq.n	80123ee <ucdr_deserialize_uint16_t+0xca>
 8012378:	783b      	ldrb	r3, [r7, #0]
 801237a:	706b      	strb	r3, [r5, #1]
 801237c:	6923      	ldr	r3, [r4, #16]
 801237e:	68a2      	ldr	r2, [r4, #8]
 8012380:	7da0      	ldrb	r0, [r4, #22]
 8012382:	2102      	movs	r1, #2
 8012384:	3302      	adds	r3, #2
 8012386:	444a      	add	r2, r9
 8012388:	1b9b      	subs	r3, r3, r6
 801238a:	7561      	strb	r1, [r4, #21]
 801238c:	60a2      	str	r2, [r4, #8]
 801238e:	6123      	str	r3, [r4, #16]
 8012390:	f080 0001 	eor.w	r0, r0, #1
 8012394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012398:	2102      	movs	r1, #2
 801239a:	4620      	mov	r0, r4
 801239c:	f000 fdfa 	bl	8012f94 <ucdr_check_final_buffer_behavior>
 80123a0:	b180      	cbz	r0, 80123c4 <ucdr_deserialize_uint16_t+0xa0>
 80123a2:	7d23      	ldrb	r3, [r4, #20]
 80123a4:	2b01      	cmp	r3, #1
 80123a6:	68a3      	ldr	r3, [r4, #8]
 80123a8:	d011      	beq.n	80123ce <ucdr_deserialize_uint16_t+0xaa>
 80123aa:	785b      	ldrb	r3, [r3, #1]
 80123ac:	702b      	strb	r3, [r5, #0]
 80123ae:	68a3      	ldr	r3, [r4, #8]
 80123b0:	781b      	ldrb	r3, [r3, #0]
 80123b2:	706b      	strb	r3, [r5, #1]
 80123b4:	68a2      	ldr	r2, [r4, #8]
 80123b6:	6923      	ldr	r3, [r4, #16]
 80123b8:	3202      	adds	r2, #2
 80123ba:	3302      	adds	r3, #2
 80123bc:	2102      	movs	r1, #2
 80123be:	60a2      	str	r2, [r4, #8]
 80123c0:	6123      	str	r3, [r4, #16]
 80123c2:	7561      	strb	r1, [r4, #21]
 80123c4:	7da0      	ldrb	r0, [r4, #22]
 80123c6:	f080 0001 	eor.w	r0, r0, #1
 80123ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123ce:	881b      	ldrh	r3, [r3, #0]
 80123d0:	802b      	strh	r3, [r5, #0]
 80123d2:	e7ef      	b.n	80123b4 <ucdr_deserialize_uint16_t+0x90>
 80123d4:	68a2      	ldr	r2, [r4, #8]
 80123d6:	6923      	ldr	r3, [r4, #16]
 80123d8:	7da0      	ldrb	r0, [r4, #22]
 80123da:	f884 8015 	strb.w	r8, [r4, #21]
 80123de:	1b92      	subs	r2, r2, r6
 80123e0:	1b9b      	subs	r3, r3, r6
 80123e2:	60a2      	str	r2, [r4, #8]
 80123e4:	6123      	str	r3, [r4, #16]
 80123e6:	f080 0001 	eor.w	r0, r0, #1
 80123ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123ee:	68a3      	ldr	r3, [r4, #8]
 80123f0:	781b      	ldrb	r3, [r3, #0]
 80123f2:	706b      	strb	r3, [r5, #1]
 80123f4:	e7c2      	b.n	801237c <ucdr_deserialize_uint16_t+0x58>
 80123f6:	4639      	mov	r1, r7
 80123f8:	4632      	mov	r2, r6
 80123fa:	4628      	mov	r0, r5
 80123fc:	f002 fa77 	bl	80148ee <memcpy>
 8012400:	68a1      	ldr	r1, [r4, #8]
 8012402:	464a      	mov	r2, r9
 8012404:	19a8      	adds	r0, r5, r6
 8012406:	f002 fa72 	bl	80148ee <memcpy>
 801240a:	e7b7      	b.n	801237c <ucdr_deserialize_uint16_t+0x58>

0801240c <ucdr_deserialize_endian_uint16_t>:
 801240c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012410:	460e      	mov	r6, r1
 8012412:	2102      	movs	r1, #2
 8012414:	4604      	mov	r4, r0
 8012416:	4615      	mov	r5, r2
 8012418:	f000 fe10 	bl	801303c <ucdr_buffer_alignment>
 801241c:	4601      	mov	r1, r0
 801241e:	4620      	mov	r0, r4
 8012420:	f894 9015 	ldrb.w	r9, [r4, #21]
 8012424:	f000 fe4e 	bl	80130c4 <ucdr_advance_buffer>
 8012428:	2102      	movs	r1, #2
 801242a:	4620      	mov	r0, r4
 801242c:	f000 fda6 	bl	8012f7c <ucdr_check_buffer_available_for>
 8012430:	bb70      	cbnz	r0, 8012490 <ucdr_deserialize_endian_uint16_t+0x84>
 8012432:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8012436:	4547      	cmp	r7, r8
 8012438:	d925      	bls.n	8012486 <ucdr_deserialize_endian_uint16_t+0x7a>
 801243a:	6923      	ldr	r3, [r4, #16]
 801243c:	60a7      	str	r7, [r4, #8]
 801243e:	eba7 0708 	sub.w	r7, r7, r8
 8012442:	443b      	add	r3, r7
 8012444:	f1c7 0a02 	rsb	sl, r7, #2
 8012448:	6123      	str	r3, [r4, #16]
 801244a:	4651      	mov	r1, sl
 801244c:	4620      	mov	r0, r4
 801244e:	f000 fda1 	bl	8012f94 <ucdr_check_final_buffer_behavior>
 8012452:	2800      	cmp	r0, #0
 8012454:	d034      	beq.n	80124c0 <ucdr_deserialize_endian_uint16_t+0xb4>
 8012456:	2e01      	cmp	r6, #1
 8012458:	d043      	beq.n	80124e2 <ucdr_deserialize_endian_uint16_t+0xd6>
 801245a:	f898 3001 	ldrb.w	r3, [r8, #1]
 801245e:	702b      	strb	r3, [r5, #0]
 8012460:	2f00      	cmp	r7, #0
 8012462:	d03a      	beq.n	80124da <ucdr_deserialize_endian_uint16_t+0xce>
 8012464:	f898 3000 	ldrb.w	r3, [r8]
 8012468:	706b      	strb	r3, [r5, #1]
 801246a:	6923      	ldr	r3, [r4, #16]
 801246c:	68a2      	ldr	r2, [r4, #8]
 801246e:	7da0      	ldrb	r0, [r4, #22]
 8012470:	2102      	movs	r1, #2
 8012472:	3302      	adds	r3, #2
 8012474:	4452      	add	r2, sl
 8012476:	1bdb      	subs	r3, r3, r7
 8012478:	7561      	strb	r1, [r4, #21]
 801247a:	60a2      	str	r2, [r4, #8]
 801247c:	6123      	str	r3, [r4, #16]
 801247e:	f080 0001 	eor.w	r0, r0, #1
 8012482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012486:	2102      	movs	r1, #2
 8012488:	4620      	mov	r0, r4
 801248a:	f000 fd83 	bl	8012f94 <ucdr_check_final_buffer_behavior>
 801248e:	b178      	cbz	r0, 80124b0 <ucdr_deserialize_endian_uint16_t+0xa4>
 8012490:	2e01      	cmp	r6, #1
 8012492:	68a3      	ldr	r3, [r4, #8]
 8012494:	d011      	beq.n	80124ba <ucdr_deserialize_endian_uint16_t+0xae>
 8012496:	785b      	ldrb	r3, [r3, #1]
 8012498:	702b      	strb	r3, [r5, #0]
 801249a:	68a3      	ldr	r3, [r4, #8]
 801249c:	781b      	ldrb	r3, [r3, #0]
 801249e:	706b      	strb	r3, [r5, #1]
 80124a0:	68a2      	ldr	r2, [r4, #8]
 80124a2:	6923      	ldr	r3, [r4, #16]
 80124a4:	3202      	adds	r2, #2
 80124a6:	3302      	adds	r3, #2
 80124a8:	2102      	movs	r1, #2
 80124aa:	60a2      	str	r2, [r4, #8]
 80124ac:	6123      	str	r3, [r4, #16]
 80124ae:	7561      	strb	r1, [r4, #21]
 80124b0:	7da0      	ldrb	r0, [r4, #22]
 80124b2:	f080 0001 	eor.w	r0, r0, #1
 80124b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124ba:	881b      	ldrh	r3, [r3, #0]
 80124bc:	802b      	strh	r3, [r5, #0]
 80124be:	e7ef      	b.n	80124a0 <ucdr_deserialize_endian_uint16_t+0x94>
 80124c0:	68a2      	ldr	r2, [r4, #8]
 80124c2:	6923      	ldr	r3, [r4, #16]
 80124c4:	7da0      	ldrb	r0, [r4, #22]
 80124c6:	f884 9015 	strb.w	r9, [r4, #21]
 80124ca:	1bd2      	subs	r2, r2, r7
 80124cc:	1bdb      	subs	r3, r3, r7
 80124ce:	60a2      	str	r2, [r4, #8]
 80124d0:	6123      	str	r3, [r4, #16]
 80124d2:	f080 0001 	eor.w	r0, r0, #1
 80124d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124da:	68a3      	ldr	r3, [r4, #8]
 80124dc:	781b      	ldrb	r3, [r3, #0]
 80124de:	706b      	strb	r3, [r5, #1]
 80124e0:	e7c3      	b.n	801246a <ucdr_deserialize_endian_uint16_t+0x5e>
 80124e2:	4641      	mov	r1, r8
 80124e4:	463a      	mov	r2, r7
 80124e6:	4628      	mov	r0, r5
 80124e8:	f002 fa01 	bl	80148ee <memcpy>
 80124ec:	68a1      	ldr	r1, [r4, #8]
 80124ee:	4652      	mov	r2, sl
 80124f0:	19e8      	adds	r0, r5, r7
 80124f2:	f002 f9fc 	bl	80148ee <memcpy>
 80124f6:	e7b8      	b.n	801246a <ucdr_deserialize_endian_uint16_t+0x5e>

080124f8 <ucdr_serialize_uint32_t>:
 80124f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124fc:	b082      	sub	sp, #8
 80124fe:	4604      	mov	r4, r0
 8012500:	9101      	str	r1, [sp, #4]
 8012502:	2104      	movs	r1, #4
 8012504:	f000 fd9a 	bl	801303c <ucdr_buffer_alignment>
 8012508:	4601      	mov	r1, r0
 801250a:	4620      	mov	r0, r4
 801250c:	7d67      	ldrb	r7, [r4, #21]
 801250e:	f000 fdd9 	bl	80130c4 <ucdr_advance_buffer>
 8012512:	2104      	movs	r1, #4
 8012514:	4620      	mov	r0, r4
 8012516:	f000 fd31 	bl	8012f7c <ucdr_check_buffer_available_for>
 801251a:	2800      	cmp	r0, #0
 801251c:	d139      	bne.n	8012592 <ucdr_serialize_uint32_t+0x9a>
 801251e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012522:	42ab      	cmp	r3, r5
 8012524:	d930      	bls.n	8012588 <ucdr_serialize_uint32_t+0x90>
 8012526:	1b5e      	subs	r6, r3, r5
 8012528:	60a3      	str	r3, [r4, #8]
 801252a:	6923      	ldr	r3, [r4, #16]
 801252c:	f1c6 0804 	rsb	r8, r6, #4
 8012530:	4433      	add	r3, r6
 8012532:	6123      	str	r3, [r4, #16]
 8012534:	4641      	mov	r1, r8
 8012536:	4620      	mov	r0, r4
 8012538:	f000 fd2c 	bl	8012f94 <ucdr_check_final_buffer_behavior>
 801253c:	2800      	cmp	r0, #0
 801253e:	d04c      	beq.n	80125da <ucdr_serialize_uint32_t+0xe2>
 8012540:	7d23      	ldrb	r3, [r4, #20]
 8012542:	2b01      	cmp	r3, #1
 8012544:	d063      	beq.n	801260e <ucdr_serialize_uint32_t+0x116>
 8012546:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801254a:	702b      	strb	r3, [r5, #0]
 801254c:	2e00      	cmp	r6, #0
 801254e:	d051      	beq.n	80125f4 <ucdr_serialize_uint32_t+0xfc>
 8012550:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012554:	706b      	strb	r3, [r5, #1]
 8012556:	2e01      	cmp	r6, #1
 8012558:	d050      	beq.n	80125fc <ucdr_serialize_uint32_t+0x104>
 801255a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801255e:	70ab      	strb	r3, [r5, #2]
 8012560:	2e02      	cmp	r6, #2
 8012562:	d04f      	beq.n	8012604 <ucdr_serialize_uint32_t+0x10c>
 8012564:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012568:	70eb      	strb	r3, [r5, #3]
 801256a:	6923      	ldr	r3, [r4, #16]
 801256c:	68a2      	ldr	r2, [r4, #8]
 801256e:	7da0      	ldrb	r0, [r4, #22]
 8012570:	3304      	adds	r3, #4
 8012572:	1b9e      	subs	r6, r3, r6
 8012574:	4442      	add	r2, r8
 8012576:	2304      	movs	r3, #4
 8012578:	f080 0001 	eor.w	r0, r0, #1
 801257c:	60a2      	str	r2, [r4, #8]
 801257e:	6126      	str	r6, [r4, #16]
 8012580:	7563      	strb	r3, [r4, #21]
 8012582:	b002      	add	sp, #8
 8012584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012588:	2104      	movs	r1, #4
 801258a:	4620      	mov	r0, r4
 801258c:	f000 fd02 	bl	8012f94 <ucdr_check_final_buffer_behavior>
 8012590:	b1d0      	cbz	r0, 80125c8 <ucdr_serialize_uint32_t+0xd0>
 8012592:	7d23      	ldrb	r3, [r4, #20]
 8012594:	2b01      	cmp	r3, #1
 8012596:	68a3      	ldr	r3, [r4, #8]
 8012598:	d01c      	beq.n	80125d4 <ucdr_serialize_uint32_t+0xdc>
 801259a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801259e:	701a      	strb	r2, [r3, #0]
 80125a0:	68a3      	ldr	r3, [r4, #8]
 80125a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80125a6:	705a      	strb	r2, [r3, #1]
 80125a8:	68a3      	ldr	r3, [r4, #8]
 80125aa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80125ae:	709a      	strb	r2, [r3, #2]
 80125b0:	68a3      	ldr	r3, [r4, #8]
 80125b2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80125b6:	70da      	strb	r2, [r3, #3]
 80125b8:	68a2      	ldr	r2, [r4, #8]
 80125ba:	6923      	ldr	r3, [r4, #16]
 80125bc:	3204      	adds	r2, #4
 80125be:	3304      	adds	r3, #4
 80125c0:	2104      	movs	r1, #4
 80125c2:	60a2      	str	r2, [r4, #8]
 80125c4:	6123      	str	r3, [r4, #16]
 80125c6:	7561      	strb	r1, [r4, #21]
 80125c8:	7da0      	ldrb	r0, [r4, #22]
 80125ca:	f080 0001 	eor.w	r0, r0, #1
 80125ce:	b002      	add	sp, #8
 80125d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125d4:	9a01      	ldr	r2, [sp, #4]
 80125d6:	601a      	str	r2, [r3, #0]
 80125d8:	e7ee      	b.n	80125b8 <ucdr_serialize_uint32_t+0xc0>
 80125da:	68a2      	ldr	r2, [r4, #8]
 80125dc:	6923      	ldr	r3, [r4, #16]
 80125de:	7da0      	ldrb	r0, [r4, #22]
 80125e0:	7567      	strb	r7, [r4, #21]
 80125e2:	1b92      	subs	r2, r2, r6
 80125e4:	1b9b      	subs	r3, r3, r6
 80125e6:	f080 0001 	eor.w	r0, r0, #1
 80125ea:	60a2      	str	r2, [r4, #8]
 80125ec:	6123      	str	r3, [r4, #16]
 80125ee:	b002      	add	sp, #8
 80125f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125f4:	68a3      	ldr	r3, [r4, #8]
 80125f6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80125fa:	701a      	strb	r2, [r3, #0]
 80125fc:	68a3      	ldr	r3, [r4, #8]
 80125fe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012602:	701a      	strb	r2, [r3, #0]
 8012604:	68a3      	ldr	r3, [r4, #8]
 8012606:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801260a:	701a      	strb	r2, [r3, #0]
 801260c:	e7ad      	b.n	801256a <ucdr_serialize_uint32_t+0x72>
 801260e:	4628      	mov	r0, r5
 8012610:	ad01      	add	r5, sp, #4
 8012612:	4629      	mov	r1, r5
 8012614:	4632      	mov	r2, r6
 8012616:	f002 f96a 	bl	80148ee <memcpy>
 801261a:	68a0      	ldr	r0, [r4, #8]
 801261c:	4642      	mov	r2, r8
 801261e:	19a9      	adds	r1, r5, r6
 8012620:	f002 f965 	bl	80148ee <memcpy>
 8012624:	e7a1      	b.n	801256a <ucdr_serialize_uint32_t+0x72>
 8012626:	bf00      	nop

08012628 <ucdr_serialize_endian_uint32_t>:
 8012628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801262c:	b083      	sub	sp, #12
 801262e:	460d      	mov	r5, r1
 8012630:	2104      	movs	r1, #4
 8012632:	4604      	mov	r4, r0
 8012634:	9201      	str	r2, [sp, #4]
 8012636:	f000 fd01 	bl	801303c <ucdr_buffer_alignment>
 801263a:	4601      	mov	r1, r0
 801263c:	4620      	mov	r0, r4
 801263e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012642:	f000 fd3f 	bl	80130c4 <ucdr_advance_buffer>
 8012646:	2104      	movs	r1, #4
 8012648:	4620      	mov	r0, r4
 801264a:	f000 fc97 	bl	8012f7c <ucdr_check_buffer_available_for>
 801264e:	2800      	cmp	r0, #0
 8012650:	d138      	bne.n	80126c4 <ucdr_serialize_endian_uint32_t+0x9c>
 8012652:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8012656:	42b7      	cmp	r7, r6
 8012658:	d92f      	bls.n	80126ba <ucdr_serialize_endian_uint32_t+0x92>
 801265a:	6923      	ldr	r3, [r4, #16]
 801265c:	60a7      	str	r7, [r4, #8]
 801265e:	1bbf      	subs	r7, r7, r6
 8012660:	443b      	add	r3, r7
 8012662:	f1c7 0904 	rsb	r9, r7, #4
 8012666:	6123      	str	r3, [r4, #16]
 8012668:	4649      	mov	r1, r9
 801266a:	4620      	mov	r0, r4
 801266c:	f000 fc92 	bl	8012f94 <ucdr_check_final_buffer_behavior>
 8012670:	2800      	cmp	r0, #0
 8012672:	d04a      	beq.n	801270a <ucdr_serialize_endian_uint32_t+0xe2>
 8012674:	2d01      	cmp	r5, #1
 8012676:	d063      	beq.n	8012740 <ucdr_serialize_endian_uint32_t+0x118>
 8012678:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801267c:	7033      	strb	r3, [r6, #0]
 801267e:	2f00      	cmp	r7, #0
 8012680:	d051      	beq.n	8012726 <ucdr_serialize_endian_uint32_t+0xfe>
 8012682:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012686:	7073      	strb	r3, [r6, #1]
 8012688:	2f01      	cmp	r7, #1
 801268a:	d050      	beq.n	801272e <ucdr_serialize_endian_uint32_t+0x106>
 801268c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012690:	70b3      	strb	r3, [r6, #2]
 8012692:	2f02      	cmp	r7, #2
 8012694:	d04f      	beq.n	8012736 <ucdr_serialize_endian_uint32_t+0x10e>
 8012696:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801269a:	70f3      	strb	r3, [r6, #3]
 801269c:	6923      	ldr	r3, [r4, #16]
 801269e:	68a2      	ldr	r2, [r4, #8]
 80126a0:	7da0      	ldrb	r0, [r4, #22]
 80126a2:	3304      	adds	r3, #4
 80126a4:	444a      	add	r2, r9
 80126a6:	1bdb      	subs	r3, r3, r7
 80126a8:	2104      	movs	r1, #4
 80126aa:	f080 0001 	eor.w	r0, r0, #1
 80126ae:	60a2      	str	r2, [r4, #8]
 80126b0:	6123      	str	r3, [r4, #16]
 80126b2:	7561      	strb	r1, [r4, #21]
 80126b4:	b003      	add	sp, #12
 80126b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80126ba:	2104      	movs	r1, #4
 80126bc:	4620      	mov	r0, r4
 80126be:	f000 fc69 	bl	8012f94 <ucdr_check_final_buffer_behavior>
 80126c2:	b1c8      	cbz	r0, 80126f8 <ucdr_serialize_endian_uint32_t+0xd0>
 80126c4:	2d01      	cmp	r5, #1
 80126c6:	68a3      	ldr	r3, [r4, #8]
 80126c8:	d01c      	beq.n	8012704 <ucdr_serialize_endian_uint32_t+0xdc>
 80126ca:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80126ce:	701a      	strb	r2, [r3, #0]
 80126d0:	68a3      	ldr	r3, [r4, #8]
 80126d2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80126d6:	705a      	strb	r2, [r3, #1]
 80126d8:	68a3      	ldr	r3, [r4, #8]
 80126da:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80126de:	709a      	strb	r2, [r3, #2]
 80126e0:	68a3      	ldr	r3, [r4, #8]
 80126e2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80126e6:	70da      	strb	r2, [r3, #3]
 80126e8:	68a2      	ldr	r2, [r4, #8]
 80126ea:	6923      	ldr	r3, [r4, #16]
 80126ec:	3204      	adds	r2, #4
 80126ee:	3304      	adds	r3, #4
 80126f0:	2104      	movs	r1, #4
 80126f2:	60a2      	str	r2, [r4, #8]
 80126f4:	6123      	str	r3, [r4, #16]
 80126f6:	7561      	strb	r1, [r4, #21]
 80126f8:	7da0      	ldrb	r0, [r4, #22]
 80126fa:	f080 0001 	eor.w	r0, r0, #1
 80126fe:	b003      	add	sp, #12
 8012700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012704:	9a01      	ldr	r2, [sp, #4]
 8012706:	601a      	str	r2, [r3, #0]
 8012708:	e7ee      	b.n	80126e8 <ucdr_serialize_endian_uint32_t+0xc0>
 801270a:	68a2      	ldr	r2, [r4, #8]
 801270c:	6923      	ldr	r3, [r4, #16]
 801270e:	7da0      	ldrb	r0, [r4, #22]
 8012710:	f884 8015 	strb.w	r8, [r4, #21]
 8012714:	1bd2      	subs	r2, r2, r7
 8012716:	1bdb      	subs	r3, r3, r7
 8012718:	f080 0001 	eor.w	r0, r0, #1
 801271c:	60a2      	str	r2, [r4, #8]
 801271e:	6123      	str	r3, [r4, #16]
 8012720:	b003      	add	sp, #12
 8012722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012726:	68a3      	ldr	r3, [r4, #8]
 8012728:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801272c:	701a      	strb	r2, [r3, #0]
 801272e:	68a3      	ldr	r3, [r4, #8]
 8012730:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012734:	701a      	strb	r2, [r3, #0]
 8012736:	68a3      	ldr	r3, [r4, #8]
 8012738:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801273c:	701a      	strb	r2, [r3, #0]
 801273e:	e7ad      	b.n	801269c <ucdr_serialize_endian_uint32_t+0x74>
 8012740:	ad01      	add	r5, sp, #4
 8012742:	4629      	mov	r1, r5
 8012744:	463a      	mov	r2, r7
 8012746:	4630      	mov	r0, r6
 8012748:	f002 f8d1 	bl	80148ee <memcpy>
 801274c:	68a0      	ldr	r0, [r4, #8]
 801274e:	464a      	mov	r2, r9
 8012750:	19e9      	adds	r1, r5, r7
 8012752:	f002 f8cc 	bl	80148ee <memcpy>
 8012756:	e7a1      	b.n	801269c <ucdr_serialize_endian_uint32_t+0x74>

08012758 <ucdr_deserialize_uint32_t>:
 8012758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801275c:	460d      	mov	r5, r1
 801275e:	2104      	movs	r1, #4
 8012760:	4604      	mov	r4, r0
 8012762:	f000 fc6b 	bl	801303c <ucdr_buffer_alignment>
 8012766:	4601      	mov	r1, r0
 8012768:	4620      	mov	r0, r4
 801276a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801276e:	f000 fca9 	bl	80130c4 <ucdr_advance_buffer>
 8012772:	2104      	movs	r1, #4
 8012774:	4620      	mov	r0, r4
 8012776:	f000 fc01 	bl	8012f7c <ucdr_check_buffer_available_for>
 801277a:	2800      	cmp	r0, #0
 801277c:	d138      	bne.n	80127f0 <ucdr_deserialize_uint32_t+0x98>
 801277e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8012782:	42b7      	cmp	r7, r6
 8012784:	d92f      	bls.n	80127e6 <ucdr_deserialize_uint32_t+0x8e>
 8012786:	6923      	ldr	r3, [r4, #16]
 8012788:	60a7      	str	r7, [r4, #8]
 801278a:	1bbf      	subs	r7, r7, r6
 801278c:	443b      	add	r3, r7
 801278e:	f1c7 0904 	rsb	r9, r7, #4
 8012792:	6123      	str	r3, [r4, #16]
 8012794:	4649      	mov	r1, r9
 8012796:	4620      	mov	r0, r4
 8012798:	f000 fbfc 	bl	8012f94 <ucdr_check_final_buffer_behavior>
 801279c:	2800      	cmp	r0, #0
 801279e:	d046      	beq.n	801282e <ucdr_deserialize_uint32_t+0xd6>
 80127a0:	7d23      	ldrb	r3, [r4, #20]
 80127a2:	2b01      	cmp	r3, #1
 80127a4:	d05c      	beq.n	8012860 <ucdr_deserialize_uint32_t+0x108>
 80127a6:	78f3      	ldrb	r3, [r6, #3]
 80127a8:	702b      	strb	r3, [r5, #0]
 80127aa:	2f00      	cmp	r7, #0
 80127ac:	d04c      	beq.n	8012848 <ucdr_deserialize_uint32_t+0xf0>
 80127ae:	78b3      	ldrb	r3, [r6, #2]
 80127b0:	706b      	strb	r3, [r5, #1]
 80127b2:	2f01      	cmp	r7, #1
 80127b4:	f105 0302 	add.w	r3, r5, #2
 80127b8:	d04a      	beq.n	8012850 <ucdr_deserialize_uint32_t+0xf8>
 80127ba:	7873      	ldrb	r3, [r6, #1]
 80127bc:	70ab      	strb	r3, [r5, #2]
 80127be:	2f02      	cmp	r7, #2
 80127c0:	f105 0303 	add.w	r3, r5, #3
 80127c4:	d048      	beq.n	8012858 <ucdr_deserialize_uint32_t+0x100>
 80127c6:	7833      	ldrb	r3, [r6, #0]
 80127c8:	70eb      	strb	r3, [r5, #3]
 80127ca:	6923      	ldr	r3, [r4, #16]
 80127cc:	68a2      	ldr	r2, [r4, #8]
 80127ce:	7da0      	ldrb	r0, [r4, #22]
 80127d0:	2104      	movs	r1, #4
 80127d2:	3304      	adds	r3, #4
 80127d4:	444a      	add	r2, r9
 80127d6:	1bdb      	subs	r3, r3, r7
 80127d8:	7561      	strb	r1, [r4, #21]
 80127da:	60a2      	str	r2, [r4, #8]
 80127dc:	6123      	str	r3, [r4, #16]
 80127de:	f080 0001 	eor.w	r0, r0, #1
 80127e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127e6:	2104      	movs	r1, #4
 80127e8:	4620      	mov	r0, r4
 80127ea:	f000 fbd3 	bl	8012f94 <ucdr_check_final_buffer_behavior>
 80127ee:	b1b0      	cbz	r0, 801281e <ucdr_deserialize_uint32_t+0xc6>
 80127f0:	7d23      	ldrb	r3, [r4, #20]
 80127f2:	2b01      	cmp	r3, #1
 80127f4:	68a3      	ldr	r3, [r4, #8]
 80127f6:	d017      	beq.n	8012828 <ucdr_deserialize_uint32_t+0xd0>
 80127f8:	78db      	ldrb	r3, [r3, #3]
 80127fa:	702b      	strb	r3, [r5, #0]
 80127fc:	68a3      	ldr	r3, [r4, #8]
 80127fe:	789b      	ldrb	r3, [r3, #2]
 8012800:	706b      	strb	r3, [r5, #1]
 8012802:	68a3      	ldr	r3, [r4, #8]
 8012804:	785b      	ldrb	r3, [r3, #1]
 8012806:	70ab      	strb	r3, [r5, #2]
 8012808:	68a3      	ldr	r3, [r4, #8]
 801280a:	781b      	ldrb	r3, [r3, #0]
 801280c:	70eb      	strb	r3, [r5, #3]
 801280e:	68a2      	ldr	r2, [r4, #8]
 8012810:	6923      	ldr	r3, [r4, #16]
 8012812:	3204      	adds	r2, #4
 8012814:	3304      	adds	r3, #4
 8012816:	2104      	movs	r1, #4
 8012818:	60a2      	str	r2, [r4, #8]
 801281a:	6123      	str	r3, [r4, #16]
 801281c:	7561      	strb	r1, [r4, #21]
 801281e:	7da0      	ldrb	r0, [r4, #22]
 8012820:	f080 0001 	eor.w	r0, r0, #1
 8012824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	602b      	str	r3, [r5, #0]
 801282c:	e7ef      	b.n	801280e <ucdr_deserialize_uint32_t+0xb6>
 801282e:	68a2      	ldr	r2, [r4, #8]
 8012830:	6923      	ldr	r3, [r4, #16]
 8012832:	7da0      	ldrb	r0, [r4, #22]
 8012834:	f884 8015 	strb.w	r8, [r4, #21]
 8012838:	1bd2      	subs	r2, r2, r7
 801283a:	1bdb      	subs	r3, r3, r7
 801283c:	60a2      	str	r2, [r4, #8]
 801283e:	6123      	str	r3, [r4, #16]
 8012840:	f080 0001 	eor.w	r0, r0, #1
 8012844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012848:	68a3      	ldr	r3, [r4, #8]
 801284a:	789b      	ldrb	r3, [r3, #2]
 801284c:	706b      	strb	r3, [r5, #1]
 801284e:	1cab      	adds	r3, r5, #2
 8012850:	68a2      	ldr	r2, [r4, #8]
 8012852:	7852      	ldrb	r2, [r2, #1]
 8012854:	f803 2b01 	strb.w	r2, [r3], #1
 8012858:	68a2      	ldr	r2, [r4, #8]
 801285a:	7812      	ldrb	r2, [r2, #0]
 801285c:	701a      	strb	r2, [r3, #0]
 801285e:	e7b4      	b.n	80127ca <ucdr_deserialize_uint32_t+0x72>
 8012860:	4631      	mov	r1, r6
 8012862:	463a      	mov	r2, r7
 8012864:	4628      	mov	r0, r5
 8012866:	f002 f842 	bl	80148ee <memcpy>
 801286a:	68a1      	ldr	r1, [r4, #8]
 801286c:	464a      	mov	r2, r9
 801286e:	19e8      	adds	r0, r5, r7
 8012870:	f002 f83d 	bl	80148ee <memcpy>
 8012874:	e7a9      	b.n	80127ca <ucdr_deserialize_uint32_t+0x72>
 8012876:	bf00      	nop

08012878 <ucdr_deserialize_endian_uint32_t>:
 8012878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801287c:	460e      	mov	r6, r1
 801287e:	2104      	movs	r1, #4
 8012880:	4604      	mov	r4, r0
 8012882:	4615      	mov	r5, r2
 8012884:	f000 fbda 	bl	801303c <ucdr_buffer_alignment>
 8012888:	4601      	mov	r1, r0
 801288a:	4620      	mov	r0, r4
 801288c:	f894 9015 	ldrb.w	r9, [r4, #21]
 8012890:	f000 fc18 	bl	80130c4 <ucdr_advance_buffer>
 8012894:	2104      	movs	r1, #4
 8012896:	4620      	mov	r0, r4
 8012898:	f000 fb70 	bl	8012f7c <ucdr_check_buffer_available_for>
 801289c:	2800      	cmp	r0, #0
 801289e:	d13c      	bne.n	801291a <ucdr_deserialize_endian_uint32_t+0xa2>
 80128a0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80128a4:	42bb      	cmp	r3, r7
 80128a6:	d933      	bls.n	8012910 <ucdr_deserialize_endian_uint32_t+0x98>
 80128a8:	eba3 0807 	sub.w	r8, r3, r7
 80128ac:	60a3      	str	r3, [r4, #8]
 80128ae:	6923      	ldr	r3, [r4, #16]
 80128b0:	f1c8 0a04 	rsb	sl, r8, #4
 80128b4:	4443      	add	r3, r8
 80128b6:	6123      	str	r3, [r4, #16]
 80128b8:	4651      	mov	r1, sl
 80128ba:	4620      	mov	r0, r4
 80128bc:	f000 fb6a 	bl	8012f94 <ucdr_check_final_buffer_behavior>
 80128c0:	2800      	cmp	r0, #0
 80128c2:	d048      	beq.n	8012956 <ucdr_deserialize_endian_uint32_t+0xde>
 80128c4:	2e01      	cmp	r6, #1
 80128c6:	d061      	beq.n	801298c <ucdr_deserialize_endian_uint32_t+0x114>
 80128c8:	78fb      	ldrb	r3, [r7, #3]
 80128ca:	702b      	strb	r3, [r5, #0]
 80128cc:	f1b8 0f00 	cmp.w	r8, #0
 80128d0:	d050      	beq.n	8012974 <ucdr_deserialize_endian_uint32_t+0xfc>
 80128d2:	78bb      	ldrb	r3, [r7, #2]
 80128d4:	706b      	strb	r3, [r5, #1]
 80128d6:	f1b8 0f01 	cmp.w	r8, #1
 80128da:	f105 0302 	add.w	r3, r5, #2
 80128de:	d04d      	beq.n	801297c <ucdr_deserialize_endian_uint32_t+0x104>
 80128e0:	787b      	ldrb	r3, [r7, #1]
 80128e2:	70ab      	strb	r3, [r5, #2]
 80128e4:	f1b8 0f02 	cmp.w	r8, #2
 80128e8:	f105 0303 	add.w	r3, r5, #3
 80128ec:	d04a      	beq.n	8012984 <ucdr_deserialize_endian_uint32_t+0x10c>
 80128ee:	783b      	ldrb	r3, [r7, #0]
 80128f0:	70eb      	strb	r3, [r5, #3]
 80128f2:	6923      	ldr	r3, [r4, #16]
 80128f4:	68a2      	ldr	r2, [r4, #8]
 80128f6:	7da0      	ldrb	r0, [r4, #22]
 80128f8:	2104      	movs	r1, #4
 80128fa:	3304      	adds	r3, #4
 80128fc:	4452      	add	r2, sl
 80128fe:	eba3 0308 	sub.w	r3, r3, r8
 8012902:	7561      	strb	r1, [r4, #21]
 8012904:	60a2      	str	r2, [r4, #8]
 8012906:	6123      	str	r3, [r4, #16]
 8012908:	f080 0001 	eor.w	r0, r0, #1
 801290c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012910:	2104      	movs	r1, #4
 8012912:	4620      	mov	r0, r4
 8012914:	f000 fb3e 	bl	8012f94 <ucdr_check_final_buffer_behavior>
 8012918:	b1a8      	cbz	r0, 8012946 <ucdr_deserialize_endian_uint32_t+0xce>
 801291a:	2e01      	cmp	r6, #1
 801291c:	68a3      	ldr	r3, [r4, #8]
 801291e:	d017      	beq.n	8012950 <ucdr_deserialize_endian_uint32_t+0xd8>
 8012920:	78db      	ldrb	r3, [r3, #3]
 8012922:	702b      	strb	r3, [r5, #0]
 8012924:	68a3      	ldr	r3, [r4, #8]
 8012926:	789b      	ldrb	r3, [r3, #2]
 8012928:	706b      	strb	r3, [r5, #1]
 801292a:	68a3      	ldr	r3, [r4, #8]
 801292c:	785b      	ldrb	r3, [r3, #1]
 801292e:	70ab      	strb	r3, [r5, #2]
 8012930:	68a3      	ldr	r3, [r4, #8]
 8012932:	781b      	ldrb	r3, [r3, #0]
 8012934:	70eb      	strb	r3, [r5, #3]
 8012936:	68a2      	ldr	r2, [r4, #8]
 8012938:	6923      	ldr	r3, [r4, #16]
 801293a:	3204      	adds	r2, #4
 801293c:	3304      	adds	r3, #4
 801293e:	2104      	movs	r1, #4
 8012940:	60a2      	str	r2, [r4, #8]
 8012942:	6123      	str	r3, [r4, #16]
 8012944:	7561      	strb	r1, [r4, #21]
 8012946:	7da0      	ldrb	r0, [r4, #22]
 8012948:	f080 0001 	eor.w	r0, r0, #1
 801294c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	602b      	str	r3, [r5, #0]
 8012954:	e7ef      	b.n	8012936 <ucdr_deserialize_endian_uint32_t+0xbe>
 8012956:	68a2      	ldr	r2, [r4, #8]
 8012958:	6923      	ldr	r3, [r4, #16]
 801295a:	7da0      	ldrb	r0, [r4, #22]
 801295c:	f884 9015 	strb.w	r9, [r4, #21]
 8012960:	eba2 0208 	sub.w	r2, r2, r8
 8012964:	eba3 0308 	sub.w	r3, r3, r8
 8012968:	60a2      	str	r2, [r4, #8]
 801296a:	6123      	str	r3, [r4, #16]
 801296c:	f080 0001 	eor.w	r0, r0, #1
 8012970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012974:	68a3      	ldr	r3, [r4, #8]
 8012976:	789b      	ldrb	r3, [r3, #2]
 8012978:	706b      	strb	r3, [r5, #1]
 801297a:	1cab      	adds	r3, r5, #2
 801297c:	68a2      	ldr	r2, [r4, #8]
 801297e:	7852      	ldrb	r2, [r2, #1]
 8012980:	f803 2b01 	strb.w	r2, [r3], #1
 8012984:	68a2      	ldr	r2, [r4, #8]
 8012986:	7812      	ldrb	r2, [r2, #0]
 8012988:	701a      	strb	r2, [r3, #0]
 801298a:	e7b2      	b.n	80128f2 <ucdr_deserialize_endian_uint32_t+0x7a>
 801298c:	4639      	mov	r1, r7
 801298e:	4642      	mov	r2, r8
 8012990:	4628      	mov	r0, r5
 8012992:	f001 ffac 	bl	80148ee <memcpy>
 8012996:	68a1      	ldr	r1, [r4, #8]
 8012998:	4652      	mov	r2, sl
 801299a:	eb05 0008 	add.w	r0, r5, r8
 801299e:	f001 ffa6 	bl	80148ee <memcpy>
 80129a2:	e7a6      	b.n	80128f2 <ucdr_deserialize_endian_uint32_t+0x7a>

080129a4 <ucdr_serialize_uint64_t>:
 80129a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129a8:	2108      	movs	r1, #8
 80129aa:	b082      	sub	sp, #8
 80129ac:	4604      	mov	r4, r0
 80129ae:	e9cd 2300 	strd	r2, r3, [sp]
 80129b2:	f000 fb43 	bl	801303c <ucdr_buffer_alignment>
 80129b6:	4601      	mov	r1, r0
 80129b8:	4620      	mov	r0, r4
 80129ba:	7d67      	ldrb	r7, [r4, #21]
 80129bc:	f000 fb82 	bl	80130c4 <ucdr_advance_buffer>
 80129c0:	2108      	movs	r1, #8
 80129c2:	4620      	mov	r0, r4
 80129c4:	f000 fada 	bl	8012f7c <ucdr_check_buffer_available_for>
 80129c8:	2800      	cmp	r0, #0
 80129ca:	d14e      	bne.n	8012a6a <ucdr_serialize_uint64_t+0xc6>
 80129cc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80129d0:	42ab      	cmp	r3, r5
 80129d2:	d945      	bls.n	8012a60 <ucdr_serialize_uint64_t+0xbc>
 80129d4:	1b5e      	subs	r6, r3, r5
 80129d6:	60a3      	str	r3, [r4, #8]
 80129d8:	6923      	ldr	r3, [r4, #16]
 80129da:	f1c6 0808 	rsb	r8, r6, #8
 80129de:	4433      	add	r3, r6
 80129e0:	6123      	str	r3, [r4, #16]
 80129e2:	4641      	mov	r1, r8
 80129e4:	4620      	mov	r0, r4
 80129e6:	f000 fad5 	bl	8012f94 <ucdr_check_final_buffer_behavior>
 80129ea:	2800      	cmp	r0, #0
 80129ec:	d074      	beq.n	8012ad8 <ucdr_serialize_uint64_t+0x134>
 80129ee:	7d23      	ldrb	r3, [r4, #20]
 80129f0:	2b01      	cmp	r3, #1
 80129f2:	f000 809b 	beq.w	8012b2c <ucdr_serialize_uint64_t+0x188>
 80129f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80129fa:	702b      	strb	r3, [r5, #0]
 80129fc:	2e00      	cmp	r6, #0
 80129fe:	d078      	beq.n	8012af2 <ucdr_serialize_uint64_t+0x14e>
 8012a00:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012a04:	706b      	strb	r3, [r5, #1]
 8012a06:	2e01      	cmp	r6, #1
 8012a08:	d077      	beq.n	8012afa <ucdr_serialize_uint64_t+0x156>
 8012a0a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012a0e:	70ab      	strb	r3, [r5, #2]
 8012a10:	2e02      	cmp	r6, #2
 8012a12:	d076      	beq.n	8012b02 <ucdr_serialize_uint64_t+0x15e>
 8012a14:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012a18:	70eb      	strb	r3, [r5, #3]
 8012a1a:	2e03      	cmp	r6, #3
 8012a1c:	d075      	beq.n	8012b0a <ucdr_serialize_uint64_t+0x166>
 8012a1e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012a22:	712b      	strb	r3, [r5, #4]
 8012a24:	2e04      	cmp	r6, #4
 8012a26:	d074      	beq.n	8012b12 <ucdr_serialize_uint64_t+0x16e>
 8012a28:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012a2c:	716b      	strb	r3, [r5, #5]
 8012a2e:	2e05      	cmp	r6, #5
 8012a30:	d073      	beq.n	8012b1a <ucdr_serialize_uint64_t+0x176>
 8012a32:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8012a36:	71ab      	strb	r3, [r5, #6]
 8012a38:	2e06      	cmp	r6, #6
 8012a3a:	d072      	beq.n	8012b22 <ucdr_serialize_uint64_t+0x17e>
 8012a3c:	f89d 3000 	ldrb.w	r3, [sp]
 8012a40:	71eb      	strb	r3, [r5, #7]
 8012a42:	6923      	ldr	r3, [r4, #16]
 8012a44:	68a2      	ldr	r2, [r4, #8]
 8012a46:	7da0      	ldrb	r0, [r4, #22]
 8012a48:	3308      	adds	r3, #8
 8012a4a:	1b9e      	subs	r6, r3, r6
 8012a4c:	4442      	add	r2, r8
 8012a4e:	2308      	movs	r3, #8
 8012a50:	f080 0001 	eor.w	r0, r0, #1
 8012a54:	60a2      	str	r2, [r4, #8]
 8012a56:	6126      	str	r6, [r4, #16]
 8012a58:	7563      	strb	r3, [r4, #21]
 8012a5a:	b002      	add	sp, #8
 8012a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a60:	2108      	movs	r1, #8
 8012a62:	4620      	mov	r0, r4
 8012a64:	f000 fa96 	bl	8012f94 <ucdr_check_final_buffer_behavior>
 8012a68:	b350      	cbz	r0, 8012ac0 <ucdr_serialize_uint64_t+0x11c>
 8012a6a:	7d23      	ldrb	r3, [r4, #20]
 8012a6c:	2b01      	cmp	r3, #1
 8012a6e:	d02d      	beq.n	8012acc <ucdr_serialize_uint64_t+0x128>
 8012a70:	68a3      	ldr	r3, [r4, #8]
 8012a72:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012a76:	701a      	strb	r2, [r3, #0]
 8012a78:	68a3      	ldr	r3, [r4, #8]
 8012a7a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012a7e:	705a      	strb	r2, [r3, #1]
 8012a80:	68a3      	ldr	r3, [r4, #8]
 8012a82:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012a86:	709a      	strb	r2, [r3, #2]
 8012a88:	68a3      	ldr	r3, [r4, #8]
 8012a8a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012a8e:	70da      	strb	r2, [r3, #3]
 8012a90:	68a3      	ldr	r3, [r4, #8]
 8012a92:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012a96:	711a      	strb	r2, [r3, #4]
 8012a98:	68a3      	ldr	r3, [r4, #8]
 8012a9a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012a9e:	715a      	strb	r2, [r3, #5]
 8012aa0:	68a3      	ldr	r3, [r4, #8]
 8012aa2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012aa6:	719a      	strb	r2, [r3, #6]
 8012aa8:	68a3      	ldr	r3, [r4, #8]
 8012aaa:	f89d 2000 	ldrb.w	r2, [sp]
 8012aae:	71da      	strb	r2, [r3, #7]
 8012ab0:	68a2      	ldr	r2, [r4, #8]
 8012ab2:	6923      	ldr	r3, [r4, #16]
 8012ab4:	3208      	adds	r2, #8
 8012ab6:	3308      	adds	r3, #8
 8012ab8:	2108      	movs	r1, #8
 8012aba:	60a2      	str	r2, [r4, #8]
 8012abc:	6123      	str	r3, [r4, #16]
 8012abe:	7561      	strb	r1, [r4, #21]
 8012ac0:	7da0      	ldrb	r0, [r4, #22]
 8012ac2:	f080 0001 	eor.w	r0, r0, #1
 8012ac6:	b002      	add	sp, #8
 8012ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012acc:	466b      	mov	r3, sp
 8012ace:	cb03      	ldmia	r3!, {r0, r1}
 8012ad0:	68a3      	ldr	r3, [r4, #8]
 8012ad2:	6018      	str	r0, [r3, #0]
 8012ad4:	6059      	str	r1, [r3, #4]
 8012ad6:	e7eb      	b.n	8012ab0 <ucdr_serialize_uint64_t+0x10c>
 8012ad8:	68a2      	ldr	r2, [r4, #8]
 8012ada:	6923      	ldr	r3, [r4, #16]
 8012adc:	7da0      	ldrb	r0, [r4, #22]
 8012ade:	7567      	strb	r7, [r4, #21]
 8012ae0:	1b92      	subs	r2, r2, r6
 8012ae2:	1b9b      	subs	r3, r3, r6
 8012ae4:	f080 0001 	eor.w	r0, r0, #1
 8012ae8:	60a2      	str	r2, [r4, #8]
 8012aea:	6123      	str	r3, [r4, #16]
 8012aec:	b002      	add	sp, #8
 8012aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012af2:	68a3      	ldr	r3, [r4, #8]
 8012af4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012af8:	701a      	strb	r2, [r3, #0]
 8012afa:	68a3      	ldr	r3, [r4, #8]
 8012afc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012b00:	701a      	strb	r2, [r3, #0]
 8012b02:	68a3      	ldr	r3, [r4, #8]
 8012b04:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012b08:	701a      	strb	r2, [r3, #0]
 8012b0a:	68a3      	ldr	r3, [r4, #8]
 8012b0c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012b10:	701a      	strb	r2, [r3, #0]
 8012b12:	68a3      	ldr	r3, [r4, #8]
 8012b14:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012b18:	701a      	strb	r2, [r3, #0]
 8012b1a:	68a3      	ldr	r3, [r4, #8]
 8012b1c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012b20:	701a      	strb	r2, [r3, #0]
 8012b22:	68a3      	ldr	r3, [r4, #8]
 8012b24:	f89d 2000 	ldrb.w	r2, [sp]
 8012b28:	701a      	strb	r2, [r3, #0]
 8012b2a:	e78a      	b.n	8012a42 <ucdr_serialize_uint64_t+0x9e>
 8012b2c:	4628      	mov	r0, r5
 8012b2e:	466d      	mov	r5, sp
 8012b30:	4629      	mov	r1, r5
 8012b32:	4632      	mov	r2, r6
 8012b34:	f001 fedb 	bl	80148ee <memcpy>
 8012b38:	68a0      	ldr	r0, [r4, #8]
 8012b3a:	4642      	mov	r2, r8
 8012b3c:	19a9      	adds	r1, r5, r6
 8012b3e:	f001 fed6 	bl	80148ee <memcpy>
 8012b42:	e77e      	b.n	8012a42 <ucdr_serialize_uint64_t+0x9e>

08012b44 <ucdr_serialize_int16_t>:
 8012b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b48:	b082      	sub	sp, #8
 8012b4a:	460b      	mov	r3, r1
 8012b4c:	2102      	movs	r1, #2
 8012b4e:	4604      	mov	r4, r0
 8012b50:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012b54:	f000 fa72 	bl	801303c <ucdr_buffer_alignment>
 8012b58:	4601      	mov	r1, r0
 8012b5a:	4620      	mov	r0, r4
 8012b5c:	7d67      	ldrb	r7, [r4, #21]
 8012b5e:	f000 fab1 	bl	80130c4 <ucdr_advance_buffer>
 8012b62:	2102      	movs	r1, #2
 8012b64:	4620      	mov	r0, r4
 8012b66:	f000 fa09 	bl	8012f7c <ucdr_check_buffer_available_for>
 8012b6a:	bb78      	cbnz	r0, 8012bcc <ucdr_serialize_int16_t+0x88>
 8012b6c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012b70:	42ab      	cmp	r3, r5
 8012b72:	d926      	bls.n	8012bc2 <ucdr_serialize_int16_t+0x7e>
 8012b74:	1b5e      	subs	r6, r3, r5
 8012b76:	60a3      	str	r3, [r4, #8]
 8012b78:	6923      	ldr	r3, [r4, #16]
 8012b7a:	f1c6 0802 	rsb	r8, r6, #2
 8012b7e:	4433      	add	r3, r6
 8012b80:	6123      	str	r3, [r4, #16]
 8012b82:	4641      	mov	r1, r8
 8012b84:	4620      	mov	r0, r4
 8012b86:	f000 fa05 	bl	8012f94 <ucdr_check_final_buffer_behavior>
 8012b8a:	2800      	cmp	r0, #0
 8012b8c:	d03b      	beq.n	8012c06 <ucdr_serialize_int16_t+0xc2>
 8012b8e:	7d23      	ldrb	r3, [r4, #20]
 8012b90:	2b01      	cmp	r3, #1
 8012b92:	d04a      	beq.n	8012c2a <ucdr_serialize_int16_t+0xe6>
 8012b94:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012b98:	702b      	strb	r3, [r5, #0]
 8012b9a:	2e00      	cmp	r6, #0
 8012b9c:	d040      	beq.n	8012c20 <ucdr_serialize_int16_t+0xdc>
 8012b9e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012ba2:	706b      	strb	r3, [r5, #1]
 8012ba4:	6923      	ldr	r3, [r4, #16]
 8012ba6:	68a2      	ldr	r2, [r4, #8]
 8012ba8:	7da0      	ldrb	r0, [r4, #22]
 8012baa:	3302      	adds	r3, #2
 8012bac:	1b9e      	subs	r6, r3, r6
 8012bae:	4442      	add	r2, r8
 8012bb0:	2302      	movs	r3, #2
 8012bb2:	f080 0001 	eor.w	r0, r0, #1
 8012bb6:	60a2      	str	r2, [r4, #8]
 8012bb8:	6126      	str	r6, [r4, #16]
 8012bba:	7563      	strb	r3, [r4, #21]
 8012bbc:	b002      	add	sp, #8
 8012bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bc2:	2102      	movs	r1, #2
 8012bc4:	4620      	mov	r0, r4
 8012bc6:	f000 f9e5 	bl	8012f94 <ucdr_check_final_buffer_behavior>
 8012bca:	b190      	cbz	r0, 8012bf2 <ucdr_serialize_int16_t+0xae>
 8012bcc:	7d23      	ldrb	r3, [r4, #20]
 8012bce:	2b01      	cmp	r3, #1
 8012bd0:	68a3      	ldr	r3, [r4, #8]
 8012bd2:	d014      	beq.n	8012bfe <ucdr_serialize_int16_t+0xba>
 8012bd4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012bd8:	701a      	strb	r2, [r3, #0]
 8012bda:	68a3      	ldr	r3, [r4, #8]
 8012bdc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012be0:	705a      	strb	r2, [r3, #1]
 8012be2:	68a2      	ldr	r2, [r4, #8]
 8012be4:	6923      	ldr	r3, [r4, #16]
 8012be6:	3202      	adds	r2, #2
 8012be8:	3302      	adds	r3, #2
 8012bea:	2102      	movs	r1, #2
 8012bec:	60a2      	str	r2, [r4, #8]
 8012bee:	6123      	str	r3, [r4, #16]
 8012bf0:	7561      	strb	r1, [r4, #21]
 8012bf2:	7da0      	ldrb	r0, [r4, #22]
 8012bf4:	f080 0001 	eor.w	r0, r0, #1
 8012bf8:	b002      	add	sp, #8
 8012bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bfe:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012c02:	801a      	strh	r2, [r3, #0]
 8012c04:	e7ed      	b.n	8012be2 <ucdr_serialize_int16_t+0x9e>
 8012c06:	68a2      	ldr	r2, [r4, #8]
 8012c08:	6923      	ldr	r3, [r4, #16]
 8012c0a:	7da0      	ldrb	r0, [r4, #22]
 8012c0c:	7567      	strb	r7, [r4, #21]
 8012c0e:	1b92      	subs	r2, r2, r6
 8012c10:	1b9b      	subs	r3, r3, r6
 8012c12:	f080 0001 	eor.w	r0, r0, #1
 8012c16:	60a2      	str	r2, [r4, #8]
 8012c18:	6123      	str	r3, [r4, #16]
 8012c1a:	b002      	add	sp, #8
 8012c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c20:	68a3      	ldr	r3, [r4, #8]
 8012c22:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012c26:	701a      	strb	r2, [r3, #0]
 8012c28:	e7bc      	b.n	8012ba4 <ucdr_serialize_int16_t+0x60>
 8012c2a:	4628      	mov	r0, r5
 8012c2c:	f10d 0506 	add.w	r5, sp, #6
 8012c30:	4629      	mov	r1, r5
 8012c32:	4632      	mov	r2, r6
 8012c34:	f001 fe5b 	bl	80148ee <memcpy>
 8012c38:	68a0      	ldr	r0, [r4, #8]
 8012c3a:	4642      	mov	r2, r8
 8012c3c:	19a9      	adds	r1, r5, r6
 8012c3e:	f001 fe56 	bl	80148ee <memcpy>
 8012c42:	e7af      	b.n	8012ba4 <ucdr_serialize_int16_t+0x60>

08012c44 <ucdr_deserialize_int16_t>:
 8012c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c48:	460d      	mov	r5, r1
 8012c4a:	2102      	movs	r1, #2
 8012c4c:	4604      	mov	r4, r0
 8012c4e:	f000 f9f5 	bl	801303c <ucdr_buffer_alignment>
 8012c52:	4601      	mov	r1, r0
 8012c54:	4620      	mov	r0, r4
 8012c56:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012c5a:	f000 fa33 	bl	80130c4 <ucdr_advance_buffer>
 8012c5e:	2102      	movs	r1, #2
 8012c60:	4620      	mov	r0, r4
 8012c62:	f000 f98b 	bl	8012f7c <ucdr_check_buffer_available_for>
 8012c66:	bb60      	cbnz	r0, 8012cc2 <ucdr_deserialize_int16_t+0x7e>
 8012c68:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012c6c:	42be      	cmp	r6, r7
 8012c6e:	d923      	bls.n	8012cb8 <ucdr_deserialize_int16_t+0x74>
 8012c70:	6923      	ldr	r3, [r4, #16]
 8012c72:	60a6      	str	r6, [r4, #8]
 8012c74:	1bf6      	subs	r6, r6, r7
 8012c76:	4433      	add	r3, r6
 8012c78:	f1c6 0902 	rsb	r9, r6, #2
 8012c7c:	6123      	str	r3, [r4, #16]
 8012c7e:	4649      	mov	r1, r9
 8012c80:	4620      	mov	r0, r4
 8012c82:	f000 f987 	bl	8012f94 <ucdr_check_final_buffer_behavior>
 8012c86:	2800      	cmp	r0, #0
 8012c88:	d034      	beq.n	8012cf4 <ucdr_deserialize_int16_t+0xb0>
 8012c8a:	7d23      	ldrb	r3, [r4, #20]
 8012c8c:	2b01      	cmp	r3, #1
 8012c8e:	d042      	beq.n	8012d16 <ucdr_deserialize_int16_t+0xd2>
 8012c90:	787b      	ldrb	r3, [r7, #1]
 8012c92:	702b      	strb	r3, [r5, #0]
 8012c94:	2e00      	cmp	r6, #0
 8012c96:	d03a      	beq.n	8012d0e <ucdr_deserialize_int16_t+0xca>
 8012c98:	783b      	ldrb	r3, [r7, #0]
 8012c9a:	706b      	strb	r3, [r5, #1]
 8012c9c:	6923      	ldr	r3, [r4, #16]
 8012c9e:	68a2      	ldr	r2, [r4, #8]
 8012ca0:	7da0      	ldrb	r0, [r4, #22]
 8012ca2:	2102      	movs	r1, #2
 8012ca4:	3302      	adds	r3, #2
 8012ca6:	444a      	add	r2, r9
 8012ca8:	1b9b      	subs	r3, r3, r6
 8012caa:	7561      	strb	r1, [r4, #21]
 8012cac:	60a2      	str	r2, [r4, #8]
 8012cae:	6123      	str	r3, [r4, #16]
 8012cb0:	f080 0001 	eor.w	r0, r0, #1
 8012cb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012cb8:	2102      	movs	r1, #2
 8012cba:	4620      	mov	r0, r4
 8012cbc:	f000 f96a 	bl	8012f94 <ucdr_check_final_buffer_behavior>
 8012cc0:	b180      	cbz	r0, 8012ce4 <ucdr_deserialize_int16_t+0xa0>
 8012cc2:	7d23      	ldrb	r3, [r4, #20]
 8012cc4:	2b01      	cmp	r3, #1
 8012cc6:	68a3      	ldr	r3, [r4, #8]
 8012cc8:	d011      	beq.n	8012cee <ucdr_deserialize_int16_t+0xaa>
 8012cca:	785b      	ldrb	r3, [r3, #1]
 8012ccc:	702b      	strb	r3, [r5, #0]
 8012cce:	68a3      	ldr	r3, [r4, #8]
 8012cd0:	781b      	ldrb	r3, [r3, #0]
 8012cd2:	706b      	strb	r3, [r5, #1]
 8012cd4:	68a2      	ldr	r2, [r4, #8]
 8012cd6:	6923      	ldr	r3, [r4, #16]
 8012cd8:	3202      	adds	r2, #2
 8012cda:	3302      	adds	r3, #2
 8012cdc:	2102      	movs	r1, #2
 8012cde:	60a2      	str	r2, [r4, #8]
 8012ce0:	6123      	str	r3, [r4, #16]
 8012ce2:	7561      	strb	r1, [r4, #21]
 8012ce4:	7da0      	ldrb	r0, [r4, #22]
 8012ce6:	f080 0001 	eor.w	r0, r0, #1
 8012cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012cee:	881b      	ldrh	r3, [r3, #0]
 8012cf0:	802b      	strh	r3, [r5, #0]
 8012cf2:	e7ef      	b.n	8012cd4 <ucdr_deserialize_int16_t+0x90>
 8012cf4:	68a2      	ldr	r2, [r4, #8]
 8012cf6:	6923      	ldr	r3, [r4, #16]
 8012cf8:	7da0      	ldrb	r0, [r4, #22]
 8012cfa:	f884 8015 	strb.w	r8, [r4, #21]
 8012cfe:	1b92      	subs	r2, r2, r6
 8012d00:	1b9b      	subs	r3, r3, r6
 8012d02:	60a2      	str	r2, [r4, #8]
 8012d04:	6123      	str	r3, [r4, #16]
 8012d06:	f080 0001 	eor.w	r0, r0, #1
 8012d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d0e:	68a3      	ldr	r3, [r4, #8]
 8012d10:	781b      	ldrb	r3, [r3, #0]
 8012d12:	706b      	strb	r3, [r5, #1]
 8012d14:	e7c2      	b.n	8012c9c <ucdr_deserialize_int16_t+0x58>
 8012d16:	4639      	mov	r1, r7
 8012d18:	4632      	mov	r2, r6
 8012d1a:	4628      	mov	r0, r5
 8012d1c:	f001 fde7 	bl	80148ee <memcpy>
 8012d20:	68a1      	ldr	r1, [r4, #8]
 8012d22:	464a      	mov	r2, r9
 8012d24:	19a8      	adds	r0, r5, r6
 8012d26:	f001 fde2 	bl	80148ee <memcpy>
 8012d2a:	e7b7      	b.n	8012c9c <ucdr_deserialize_int16_t+0x58>

08012d2c <ucdr_serialize_int32_t>:
 8012d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d30:	b082      	sub	sp, #8
 8012d32:	4604      	mov	r4, r0
 8012d34:	9101      	str	r1, [sp, #4]
 8012d36:	2104      	movs	r1, #4
 8012d38:	f000 f980 	bl	801303c <ucdr_buffer_alignment>
 8012d3c:	4601      	mov	r1, r0
 8012d3e:	4620      	mov	r0, r4
 8012d40:	7d67      	ldrb	r7, [r4, #21]
 8012d42:	f000 f9bf 	bl	80130c4 <ucdr_advance_buffer>
 8012d46:	2104      	movs	r1, #4
 8012d48:	4620      	mov	r0, r4
 8012d4a:	f000 f917 	bl	8012f7c <ucdr_check_buffer_available_for>
 8012d4e:	2800      	cmp	r0, #0
 8012d50:	d139      	bne.n	8012dc6 <ucdr_serialize_int32_t+0x9a>
 8012d52:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012d56:	42ab      	cmp	r3, r5
 8012d58:	d930      	bls.n	8012dbc <ucdr_serialize_int32_t+0x90>
 8012d5a:	1b5e      	subs	r6, r3, r5
 8012d5c:	60a3      	str	r3, [r4, #8]
 8012d5e:	6923      	ldr	r3, [r4, #16]
 8012d60:	f1c6 0804 	rsb	r8, r6, #4
 8012d64:	4433      	add	r3, r6
 8012d66:	6123      	str	r3, [r4, #16]
 8012d68:	4641      	mov	r1, r8
 8012d6a:	4620      	mov	r0, r4
 8012d6c:	f000 f912 	bl	8012f94 <ucdr_check_final_buffer_behavior>
 8012d70:	2800      	cmp	r0, #0
 8012d72:	d04c      	beq.n	8012e0e <ucdr_serialize_int32_t+0xe2>
 8012d74:	7d23      	ldrb	r3, [r4, #20]
 8012d76:	2b01      	cmp	r3, #1
 8012d78:	d063      	beq.n	8012e42 <ucdr_serialize_int32_t+0x116>
 8012d7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012d7e:	702b      	strb	r3, [r5, #0]
 8012d80:	2e00      	cmp	r6, #0
 8012d82:	d051      	beq.n	8012e28 <ucdr_serialize_int32_t+0xfc>
 8012d84:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012d88:	706b      	strb	r3, [r5, #1]
 8012d8a:	2e01      	cmp	r6, #1
 8012d8c:	d050      	beq.n	8012e30 <ucdr_serialize_int32_t+0x104>
 8012d8e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012d92:	70ab      	strb	r3, [r5, #2]
 8012d94:	2e02      	cmp	r6, #2
 8012d96:	d04f      	beq.n	8012e38 <ucdr_serialize_int32_t+0x10c>
 8012d98:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012d9c:	70eb      	strb	r3, [r5, #3]
 8012d9e:	6923      	ldr	r3, [r4, #16]
 8012da0:	68a2      	ldr	r2, [r4, #8]
 8012da2:	7da0      	ldrb	r0, [r4, #22]
 8012da4:	3304      	adds	r3, #4
 8012da6:	1b9e      	subs	r6, r3, r6
 8012da8:	4442      	add	r2, r8
 8012daa:	2304      	movs	r3, #4
 8012dac:	f080 0001 	eor.w	r0, r0, #1
 8012db0:	60a2      	str	r2, [r4, #8]
 8012db2:	6126      	str	r6, [r4, #16]
 8012db4:	7563      	strb	r3, [r4, #21]
 8012db6:	b002      	add	sp, #8
 8012db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dbc:	2104      	movs	r1, #4
 8012dbe:	4620      	mov	r0, r4
 8012dc0:	f000 f8e8 	bl	8012f94 <ucdr_check_final_buffer_behavior>
 8012dc4:	b1d0      	cbz	r0, 8012dfc <ucdr_serialize_int32_t+0xd0>
 8012dc6:	7d23      	ldrb	r3, [r4, #20]
 8012dc8:	2b01      	cmp	r3, #1
 8012dca:	68a3      	ldr	r3, [r4, #8]
 8012dcc:	d01c      	beq.n	8012e08 <ucdr_serialize_int32_t+0xdc>
 8012dce:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012dd2:	701a      	strb	r2, [r3, #0]
 8012dd4:	68a3      	ldr	r3, [r4, #8]
 8012dd6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012dda:	705a      	strb	r2, [r3, #1]
 8012ddc:	68a3      	ldr	r3, [r4, #8]
 8012dde:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012de2:	709a      	strb	r2, [r3, #2]
 8012de4:	68a3      	ldr	r3, [r4, #8]
 8012de6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012dea:	70da      	strb	r2, [r3, #3]
 8012dec:	68a2      	ldr	r2, [r4, #8]
 8012dee:	6923      	ldr	r3, [r4, #16]
 8012df0:	3204      	adds	r2, #4
 8012df2:	3304      	adds	r3, #4
 8012df4:	2104      	movs	r1, #4
 8012df6:	60a2      	str	r2, [r4, #8]
 8012df8:	6123      	str	r3, [r4, #16]
 8012dfa:	7561      	strb	r1, [r4, #21]
 8012dfc:	7da0      	ldrb	r0, [r4, #22]
 8012dfe:	f080 0001 	eor.w	r0, r0, #1
 8012e02:	b002      	add	sp, #8
 8012e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e08:	9a01      	ldr	r2, [sp, #4]
 8012e0a:	601a      	str	r2, [r3, #0]
 8012e0c:	e7ee      	b.n	8012dec <ucdr_serialize_int32_t+0xc0>
 8012e0e:	68a2      	ldr	r2, [r4, #8]
 8012e10:	6923      	ldr	r3, [r4, #16]
 8012e12:	7da0      	ldrb	r0, [r4, #22]
 8012e14:	7567      	strb	r7, [r4, #21]
 8012e16:	1b92      	subs	r2, r2, r6
 8012e18:	1b9b      	subs	r3, r3, r6
 8012e1a:	f080 0001 	eor.w	r0, r0, #1
 8012e1e:	60a2      	str	r2, [r4, #8]
 8012e20:	6123      	str	r3, [r4, #16]
 8012e22:	b002      	add	sp, #8
 8012e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e28:	68a3      	ldr	r3, [r4, #8]
 8012e2a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012e2e:	701a      	strb	r2, [r3, #0]
 8012e30:	68a3      	ldr	r3, [r4, #8]
 8012e32:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012e36:	701a      	strb	r2, [r3, #0]
 8012e38:	68a3      	ldr	r3, [r4, #8]
 8012e3a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012e3e:	701a      	strb	r2, [r3, #0]
 8012e40:	e7ad      	b.n	8012d9e <ucdr_serialize_int32_t+0x72>
 8012e42:	4628      	mov	r0, r5
 8012e44:	ad01      	add	r5, sp, #4
 8012e46:	4629      	mov	r1, r5
 8012e48:	4632      	mov	r2, r6
 8012e4a:	f001 fd50 	bl	80148ee <memcpy>
 8012e4e:	68a0      	ldr	r0, [r4, #8]
 8012e50:	4642      	mov	r2, r8
 8012e52:	19a9      	adds	r1, r5, r6
 8012e54:	f001 fd4b 	bl	80148ee <memcpy>
 8012e58:	e7a1      	b.n	8012d9e <ucdr_serialize_int32_t+0x72>
 8012e5a:	bf00      	nop

08012e5c <ucdr_deserialize_int32_t>:
 8012e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e60:	460d      	mov	r5, r1
 8012e62:	2104      	movs	r1, #4
 8012e64:	4604      	mov	r4, r0
 8012e66:	f000 f8e9 	bl	801303c <ucdr_buffer_alignment>
 8012e6a:	4601      	mov	r1, r0
 8012e6c:	4620      	mov	r0, r4
 8012e6e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012e72:	f000 f927 	bl	80130c4 <ucdr_advance_buffer>
 8012e76:	2104      	movs	r1, #4
 8012e78:	4620      	mov	r0, r4
 8012e7a:	f000 f87f 	bl	8012f7c <ucdr_check_buffer_available_for>
 8012e7e:	2800      	cmp	r0, #0
 8012e80:	d138      	bne.n	8012ef4 <ucdr_deserialize_int32_t+0x98>
 8012e82:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8012e86:	42b7      	cmp	r7, r6
 8012e88:	d92f      	bls.n	8012eea <ucdr_deserialize_int32_t+0x8e>
 8012e8a:	6923      	ldr	r3, [r4, #16]
 8012e8c:	60a7      	str	r7, [r4, #8]
 8012e8e:	1bbf      	subs	r7, r7, r6
 8012e90:	443b      	add	r3, r7
 8012e92:	f1c7 0904 	rsb	r9, r7, #4
 8012e96:	6123      	str	r3, [r4, #16]
 8012e98:	4649      	mov	r1, r9
 8012e9a:	4620      	mov	r0, r4
 8012e9c:	f000 f87a 	bl	8012f94 <ucdr_check_final_buffer_behavior>
 8012ea0:	2800      	cmp	r0, #0
 8012ea2:	d046      	beq.n	8012f32 <ucdr_deserialize_int32_t+0xd6>
 8012ea4:	7d23      	ldrb	r3, [r4, #20]
 8012ea6:	2b01      	cmp	r3, #1
 8012ea8:	d05c      	beq.n	8012f64 <ucdr_deserialize_int32_t+0x108>
 8012eaa:	78f3      	ldrb	r3, [r6, #3]
 8012eac:	702b      	strb	r3, [r5, #0]
 8012eae:	2f00      	cmp	r7, #0
 8012eb0:	d04c      	beq.n	8012f4c <ucdr_deserialize_int32_t+0xf0>
 8012eb2:	78b3      	ldrb	r3, [r6, #2]
 8012eb4:	706b      	strb	r3, [r5, #1]
 8012eb6:	2f01      	cmp	r7, #1
 8012eb8:	f105 0302 	add.w	r3, r5, #2
 8012ebc:	d04a      	beq.n	8012f54 <ucdr_deserialize_int32_t+0xf8>
 8012ebe:	7873      	ldrb	r3, [r6, #1]
 8012ec0:	70ab      	strb	r3, [r5, #2]
 8012ec2:	2f02      	cmp	r7, #2
 8012ec4:	f105 0303 	add.w	r3, r5, #3
 8012ec8:	d048      	beq.n	8012f5c <ucdr_deserialize_int32_t+0x100>
 8012eca:	7833      	ldrb	r3, [r6, #0]
 8012ecc:	70eb      	strb	r3, [r5, #3]
 8012ece:	6923      	ldr	r3, [r4, #16]
 8012ed0:	68a2      	ldr	r2, [r4, #8]
 8012ed2:	7da0      	ldrb	r0, [r4, #22]
 8012ed4:	2104      	movs	r1, #4
 8012ed6:	3304      	adds	r3, #4
 8012ed8:	444a      	add	r2, r9
 8012eda:	1bdb      	subs	r3, r3, r7
 8012edc:	7561      	strb	r1, [r4, #21]
 8012ede:	60a2      	str	r2, [r4, #8]
 8012ee0:	6123      	str	r3, [r4, #16]
 8012ee2:	f080 0001 	eor.w	r0, r0, #1
 8012ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012eea:	2104      	movs	r1, #4
 8012eec:	4620      	mov	r0, r4
 8012eee:	f000 f851 	bl	8012f94 <ucdr_check_final_buffer_behavior>
 8012ef2:	b1b0      	cbz	r0, 8012f22 <ucdr_deserialize_int32_t+0xc6>
 8012ef4:	7d23      	ldrb	r3, [r4, #20]
 8012ef6:	2b01      	cmp	r3, #1
 8012ef8:	68a3      	ldr	r3, [r4, #8]
 8012efa:	d017      	beq.n	8012f2c <ucdr_deserialize_int32_t+0xd0>
 8012efc:	78db      	ldrb	r3, [r3, #3]
 8012efe:	702b      	strb	r3, [r5, #0]
 8012f00:	68a3      	ldr	r3, [r4, #8]
 8012f02:	789b      	ldrb	r3, [r3, #2]
 8012f04:	706b      	strb	r3, [r5, #1]
 8012f06:	68a3      	ldr	r3, [r4, #8]
 8012f08:	785b      	ldrb	r3, [r3, #1]
 8012f0a:	70ab      	strb	r3, [r5, #2]
 8012f0c:	68a3      	ldr	r3, [r4, #8]
 8012f0e:	781b      	ldrb	r3, [r3, #0]
 8012f10:	70eb      	strb	r3, [r5, #3]
 8012f12:	68a2      	ldr	r2, [r4, #8]
 8012f14:	6923      	ldr	r3, [r4, #16]
 8012f16:	3204      	adds	r2, #4
 8012f18:	3304      	adds	r3, #4
 8012f1a:	2104      	movs	r1, #4
 8012f1c:	60a2      	str	r2, [r4, #8]
 8012f1e:	6123      	str	r3, [r4, #16]
 8012f20:	7561      	strb	r1, [r4, #21]
 8012f22:	7da0      	ldrb	r0, [r4, #22]
 8012f24:	f080 0001 	eor.w	r0, r0, #1
 8012f28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	602b      	str	r3, [r5, #0]
 8012f30:	e7ef      	b.n	8012f12 <ucdr_deserialize_int32_t+0xb6>
 8012f32:	68a2      	ldr	r2, [r4, #8]
 8012f34:	6923      	ldr	r3, [r4, #16]
 8012f36:	7da0      	ldrb	r0, [r4, #22]
 8012f38:	f884 8015 	strb.w	r8, [r4, #21]
 8012f3c:	1bd2      	subs	r2, r2, r7
 8012f3e:	1bdb      	subs	r3, r3, r7
 8012f40:	60a2      	str	r2, [r4, #8]
 8012f42:	6123      	str	r3, [r4, #16]
 8012f44:	f080 0001 	eor.w	r0, r0, #1
 8012f48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f4c:	68a3      	ldr	r3, [r4, #8]
 8012f4e:	789b      	ldrb	r3, [r3, #2]
 8012f50:	706b      	strb	r3, [r5, #1]
 8012f52:	1cab      	adds	r3, r5, #2
 8012f54:	68a2      	ldr	r2, [r4, #8]
 8012f56:	7852      	ldrb	r2, [r2, #1]
 8012f58:	f803 2b01 	strb.w	r2, [r3], #1
 8012f5c:	68a2      	ldr	r2, [r4, #8]
 8012f5e:	7812      	ldrb	r2, [r2, #0]
 8012f60:	701a      	strb	r2, [r3, #0]
 8012f62:	e7b4      	b.n	8012ece <ucdr_deserialize_int32_t+0x72>
 8012f64:	4631      	mov	r1, r6
 8012f66:	463a      	mov	r2, r7
 8012f68:	4628      	mov	r0, r5
 8012f6a:	f001 fcc0 	bl	80148ee <memcpy>
 8012f6e:	68a1      	ldr	r1, [r4, #8]
 8012f70:	464a      	mov	r2, r9
 8012f72:	19e8      	adds	r0, r5, r7
 8012f74:	f001 fcbb 	bl	80148ee <memcpy>
 8012f78:	e7a9      	b.n	8012ece <ucdr_deserialize_int32_t+0x72>
 8012f7a:	bf00      	nop

08012f7c <ucdr_check_buffer_available_for>:
 8012f7c:	7d83      	ldrb	r3, [r0, #22]
 8012f7e:	b93b      	cbnz	r3, 8012f90 <ucdr_check_buffer_available_for+0x14>
 8012f80:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8012f84:	4419      	add	r1, r3
 8012f86:	4288      	cmp	r0, r1
 8012f88:	bf34      	ite	cc
 8012f8a:	2000      	movcc	r0, #0
 8012f8c:	2001      	movcs	r0, #1
 8012f8e:	4770      	bx	lr
 8012f90:	2000      	movs	r0, #0
 8012f92:	4770      	bx	lr

08012f94 <ucdr_check_final_buffer_behavior>:
 8012f94:	7d83      	ldrb	r3, [r0, #22]
 8012f96:	b943      	cbnz	r3, 8012faa <ucdr_check_final_buffer_behavior+0x16>
 8012f98:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8012f9c:	4291      	cmp	r1, r2
 8012f9e:	b510      	push	{r4, lr}
 8012fa0:	4604      	mov	r4, r0
 8012fa2:	d205      	bcs.n	8012fb0 <ucdr_check_final_buffer_behavior+0x1c>
 8012fa4:	2301      	movs	r3, #1
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	bd10      	pop	{r4, pc}
 8012faa:	2300      	movs	r3, #0
 8012fac:	4618      	mov	r0, r3
 8012fae:	4770      	bx	lr
 8012fb0:	6982      	ldr	r2, [r0, #24]
 8012fb2:	b13a      	cbz	r2, 8012fc4 <ucdr_check_final_buffer_behavior+0x30>
 8012fb4:	69c1      	ldr	r1, [r0, #28]
 8012fb6:	4790      	blx	r2
 8012fb8:	f080 0301 	eor.w	r3, r0, #1
 8012fbc:	b2db      	uxtb	r3, r3
 8012fbe:	75a0      	strb	r0, [r4, #22]
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	bd10      	pop	{r4, pc}
 8012fc4:	2001      	movs	r0, #1
 8012fc6:	75a0      	strb	r0, [r4, #22]
 8012fc8:	e7fa      	b.n	8012fc0 <ucdr_check_final_buffer_behavior+0x2c>
 8012fca:	bf00      	nop

08012fcc <ucdr_set_on_full_buffer_callback>:
 8012fcc:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8012fd0:	4770      	bx	lr
 8012fd2:	bf00      	nop

08012fd4 <ucdr_init_buffer_origin_offset_endian>:
 8012fd4:	b410      	push	{r4}
 8012fd6:	9c01      	ldr	r4, [sp, #4]
 8012fd8:	6001      	str	r1, [r0, #0]
 8012fda:	440a      	add	r2, r1
 8012fdc:	6042      	str	r2, [r0, #4]
 8012fde:	190a      	adds	r2, r1, r4
 8012fe0:	441c      	add	r4, r3
 8012fe2:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8012fe6:	6082      	str	r2, [r0, #8]
 8012fe8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012fec:	7503      	strb	r3, [r0, #20]
 8012fee:	2200      	movs	r2, #0
 8012ff0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8012ff4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ff8:	7542      	strb	r2, [r0, #21]
 8012ffa:	7582      	strb	r2, [r0, #22]
 8012ffc:	4770      	bx	lr
 8012ffe:	bf00      	nop

08013000 <ucdr_init_buffer_origin_offset>:
 8013000:	b510      	push	{r4, lr}
 8013002:	b082      	sub	sp, #8
 8013004:	9c04      	ldr	r4, [sp, #16]
 8013006:	9400      	str	r4, [sp, #0]
 8013008:	2401      	movs	r4, #1
 801300a:	9401      	str	r4, [sp, #4]
 801300c:	f7ff ffe2 	bl	8012fd4 <ucdr_init_buffer_origin_offset_endian>
 8013010:	b002      	add	sp, #8
 8013012:	bd10      	pop	{r4, pc}

08013014 <ucdr_init_buffer_origin>:
 8013014:	b510      	push	{r4, lr}
 8013016:	b082      	sub	sp, #8
 8013018:	2400      	movs	r4, #0
 801301a:	9400      	str	r4, [sp, #0]
 801301c:	f7ff fff0 	bl	8013000 <ucdr_init_buffer_origin_offset>
 8013020:	b002      	add	sp, #8
 8013022:	bd10      	pop	{r4, pc}

08013024 <ucdr_init_buffer>:
 8013024:	2300      	movs	r3, #0
 8013026:	f7ff bff5 	b.w	8013014 <ucdr_init_buffer_origin>
 801302a:	bf00      	nop

0801302c <ucdr_alignment>:
 801302c:	fbb0 f3f1 	udiv	r3, r0, r1
 8013030:	fb03 0011 	mls	r0, r3, r1, r0
 8013034:	1a08      	subs	r0, r1, r0
 8013036:	3901      	subs	r1, #1
 8013038:	4008      	ands	r0, r1
 801303a:	4770      	bx	lr

0801303c <ucdr_buffer_alignment>:
 801303c:	7d43      	ldrb	r3, [r0, #21]
 801303e:	428b      	cmp	r3, r1
 8013040:	d208      	bcs.n	8013054 <ucdr_buffer_alignment+0x18>
 8013042:	6900      	ldr	r0, [r0, #16]
 8013044:	fbb0 f3f1 	udiv	r3, r0, r1
 8013048:	fb01 0013 	mls	r0, r1, r3, r0
 801304c:	1a08      	subs	r0, r1, r0
 801304e:	3901      	subs	r1, #1
 8013050:	4008      	ands	r0, r1
 8013052:	4770      	bx	lr
 8013054:	2000      	movs	r0, #0
 8013056:	4770      	bx	lr

08013058 <ucdr_align_to>:
 8013058:	b538      	push	{r3, r4, r5, lr}
 801305a:	4604      	mov	r4, r0
 801305c:	460d      	mov	r5, r1
 801305e:	f7ff ffed 	bl	801303c <ucdr_buffer_alignment>
 8013062:	68a3      	ldr	r3, [r4, #8]
 8013064:	6921      	ldr	r1, [r4, #16]
 8013066:	7565      	strb	r5, [r4, #21]
 8013068:	181a      	adds	r2, r3, r0
 801306a:	6863      	ldr	r3, [r4, #4]
 801306c:	4293      	cmp	r3, r2
 801306e:	4408      	add	r0, r1
 8013070:	bf28      	it	cs
 8013072:	4613      	movcs	r3, r2
 8013074:	6120      	str	r0, [r4, #16]
 8013076:	60a3      	str	r3, [r4, #8]
 8013078:	bd38      	pop	{r3, r4, r5, pc}
 801307a:	bf00      	nop

0801307c <ucdr_buffer_length>:
 801307c:	6882      	ldr	r2, [r0, #8]
 801307e:	6800      	ldr	r0, [r0, #0]
 8013080:	1a10      	subs	r0, r2, r0
 8013082:	4770      	bx	lr

08013084 <ucdr_buffer_remaining>:
 8013084:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8013088:	1a10      	subs	r0, r2, r0
 801308a:	4770      	bx	lr

0801308c <ucdr_check_final_buffer_behavior_array>:
 801308c:	b538      	push	{r3, r4, r5, lr}
 801308e:	7d83      	ldrb	r3, [r0, #22]
 8013090:	b963      	cbnz	r3, 80130ac <ucdr_check_final_buffer_behavior_array+0x20>
 8013092:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8013096:	429a      	cmp	r2, r3
 8013098:	4604      	mov	r4, r0
 801309a:	460d      	mov	r5, r1
 801309c:	d308      	bcc.n	80130b0 <ucdr_check_final_buffer_behavior_array+0x24>
 801309e:	b139      	cbz	r1, 80130b0 <ucdr_check_final_buffer_behavior_array+0x24>
 80130a0:	6983      	ldr	r3, [r0, #24]
 80130a2:	b163      	cbz	r3, 80130be <ucdr_check_final_buffer_behavior_array+0x32>
 80130a4:	69c1      	ldr	r1, [r0, #28]
 80130a6:	4798      	blx	r3
 80130a8:	75a0      	strb	r0, [r4, #22]
 80130aa:	b108      	cbz	r0, 80130b0 <ucdr_check_final_buffer_behavior_array+0x24>
 80130ac:	2000      	movs	r0, #0
 80130ae:	bd38      	pop	{r3, r4, r5, pc}
 80130b0:	4620      	mov	r0, r4
 80130b2:	f7ff ffe7 	bl	8013084 <ucdr_buffer_remaining>
 80130b6:	42a8      	cmp	r0, r5
 80130b8:	bf28      	it	cs
 80130ba:	4628      	movcs	r0, r5
 80130bc:	bd38      	pop	{r3, r4, r5, pc}
 80130be:	2301      	movs	r3, #1
 80130c0:	7583      	strb	r3, [r0, #22]
 80130c2:	e7f3      	b.n	80130ac <ucdr_check_final_buffer_behavior_array+0x20>

080130c4 <ucdr_advance_buffer>:
 80130c4:	b538      	push	{r3, r4, r5, lr}
 80130c6:	4604      	mov	r4, r0
 80130c8:	460d      	mov	r5, r1
 80130ca:	f7ff ff57 	bl	8012f7c <ucdr_check_buffer_available_for>
 80130ce:	b178      	cbz	r0, 80130f0 <ucdr_advance_buffer+0x2c>
 80130d0:	6923      	ldr	r3, [r4, #16]
 80130d2:	68a2      	ldr	r2, [r4, #8]
 80130d4:	442b      	add	r3, r5
 80130d6:	6123      	str	r3, [r4, #16]
 80130d8:	2301      	movs	r3, #1
 80130da:	442a      	add	r2, r5
 80130dc:	7563      	strb	r3, [r4, #21]
 80130de:	60a2      	str	r2, [r4, #8]
 80130e0:	bd38      	pop	{r3, r4, r5, pc}
 80130e2:	68a2      	ldr	r2, [r4, #8]
 80130e4:	6923      	ldr	r3, [r4, #16]
 80130e6:	4402      	add	r2, r0
 80130e8:	4403      	add	r3, r0
 80130ea:	1a2d      	subs	r5, r5, r0
 80130ec:	60a2      	str	r2, [r4, #8]
 80130ee:	6123      	str	r3, [r4, #16]
 80130f0:	4629      	mov	r1, r5
 80130f2:	2201      	movs	r2, #1
 80130f4:	4620      	mov	r0, r4
 80130f6:	f7ff ffc9 	bl	801308c <ucdr_check_final_buffer_behavior_array>
 80130fa:	2800      	cmp	r0, #0
 80130fc:	d1f1      	bne.n	80130e2 <ucdr_advance_buffer+0x1e>
 80130fe:	2301      	movs	r3, #1
 8013100:	7563      	strb	r3, [r4, #21]
 8013102:	bd38      	pop	{r3, r4, r5, pc}

08013104 <ucdr_serialize_sequence_char>:
 8013104:	b570      	push	{r4, r5, r6, lr}
 8013106:	4615      	mov	r5, r2
 8013108:	460e      	mov	r6, r1
 801310a:	7d01      	ldrb	r1, [r0, #20]
 801310c:	4604      	mov	r4, r0
 801310e:	f7ff fa8b 	bl	8012628 <ucdr_serialize_endian_uint32_t>
 8013112:	b90d      	cbnz	r5, 8013118 <ucdr_serialize_sequence_char+0x14>
 8013114:	2001      	movs	r0, #1
 8013116:	bd70      	pop	{r4, r5, r6, pc}
 8013118:	7d21      	ldrb	r1, [r4, #20]
 801311a:	462b      	mov	r3, r5
 801311c:	4632      	mov	r2, r6
 801311e:	4620      	mov	r0, r4
 8013120:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013124:	f7fe be78 	b.w	8011e18 <ucdr_serialize_endian_array_char>

08013128 <ucdr_deserialize_sequence_char>:
 8013128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801312c:	461d      	mov	r5, r3
 801312e:	4616      	mov	r6, r2
 8013130:	460f      	mov	r7, r1
 8013132:	461a      	mov	r2, r3
 8013134:	7d01      	ldrb	r1, [r0, #20]
 8013136:	4604      	mov	r4, r0
 8013138:	f7ff fb9e 	bl	8012878 <ucdr_deserialize_endian_uint32_t>
 801313c:	682b      	ldr	r3, [r5, #0]
 801313e:	429e      	cmp	r6, r3
 8013140:	bf3c      	itt	cc
 8013142:	2201      	movcc	r2, #1
 8013144:	75a2      	strbcc	r2, [r4, #22]
 8013146:	b913      	cbnz	r3, 801314e <ucdr_deserialize_sequence_char+0x26>
 8013148:	2001      	movs	r0, #1
 801314a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801314e:	7d21      	ldrb	r1, [r4, #20]
 8013150:	463a      	mov	r2, r7
 8013152:	4620      	mov	r0, r4
 8013154:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013158:	f7fe be90 	b.w	8011e7c <ucdr_deserialize_endian_array_char>

0801315c <ucdr_serialize_sequence_uint8_t>:
 801315c:	b570      	push	{r4, r5, r6, lr}
 801315e:	4615      	mov	r5, r2
 8013160:	460e      	mov	r6, r1
 8013162:	7d01      	ldrb	r1, [r0, #20]
 8013164:	4604      	mov	r4, r0
 8013166:	f7ff fa5f 	bl	8012628 <ucdr_serialize_endian_uint32_t>
 801316a:	b90d      	cbnz	r5, 8013170 <ucdr_serialize_sequence_uint8_t+0x14>
 801316c:	2001      	movs	r0, #1
 801316e:	bd70      	pop	{r4, r5, r6, pc}
 8013170:	7d21      	ldrb	r1, [r4, #20]
 8013172:	462b      	mov	r3, r5
 8013174:	4632      	mov	r2, r6
 8013176:	4620      	mov	r0, r4
 8013178:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801317c:	f7fe bee2 	b.w	8011f44 <ucdr_serialize_endian_array_uint8_t>

08013180 <ucdr_deserialize_sequence_uint8_t>:
 8013180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013184:	461d      	mov	r5, r3
 8013186:	4616      	mov	r6, r2
 8013188:	460f      	mov	r7, r1
 801318a:	461a      	mov	r2, r3
 801318c:	7d01      	ldrb	r1, [r0, #20]
 801318e:	4604      	mov	r4, r0
 8013190:	f7ff fb72 	bl	8012878 <ucdr_deserialize_endian_uint32_t>
 8013194:	682b      	ldr	r3, [r5, #0]
 8013196:	429e      	cmp	r6, r3
 8013198:	bf3c      	itt	cc
 801319a:	2201      	movcc	r2, #1
 801319c:	75a2      	strbcc	r2, [r4, #22]
 801319e:	b913      	cbnz	r3, 80131a6 <ucdr_deserialize_sequence_uint8_t+0x26>
 80131a0:	2001      	movs	r0, #1
 80131a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131a6:	7d21      	ldrb	r1, [r4, #20]
 80131a8:	463a      	mov	r2, r7
 80131aa:	4620      	mov	r0, r4
 80131ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80131b0:	f7fe bf2c 	b.w	801200c <ucdr_deserialize_endian_array_uint8_t>

080131b4 <ucdr_serialize_string>:
 80131b4:	b510      	push	{r4, lr}
 80131b6:	b082      	sub	sp, #8
 80131b8:	4604      	mov	r4, r0
 80131ba:	4608      	mov	r0, r1
 80131bc:	9101      	str	r1, [sp, #4]
 80131be:	f7ed f839 	bl	8000234 <strlen>
 80131c2:	9901      	ldr	r1, [sp, #4]
 80131c4:	1c42      	adds	r2, r0, #1
 80131c6:	4620      	mov	r0, r4
 80131c8:	b002      	add	sp, #8
 80131ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80131ce:	f7ff bf99 	b.w	8013104 <ucdr_serialize_sequence_char>
 80131d2:	bf00      	nop

080131d4 <ucdr_deserialize_string>:
 80131d4:	b500      	push	{lr}
 80131d6:	b083      	sub	sp, #12
 80131d8:	ab01      	add	r3, sp, #4
 80131da:	f7ff ffa5 	bl	8013128 <ucdr_deserialize_sequence_char>
 80131de:	b003      	add	sp, #12
 80131e0:	f85d fb04 	ldr.w	pc, [sp], #4

080131e4 <uxr_init_input_best_effort_stream>:
 80131e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80131e8:	8003      	strh	r3, [r0, #0]
 80131ea:	4770      	bx	lr

080131ec <uxr_reset_input_best_effort_stream>:
 80131ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80131f0:	8003      	strh	r3, [r0, #0]
 80131f2:	4770      	bx	lr

080131f4 <uxr_receive_best_effort_message>:
 80131f4:	b538      	push	{r3, r4, r5, lr}
 80131f6:	4604      	mov	r4, r0
 80131f8:	8800      	ldrh	r0, [r0, #0]
 80131fa:	460d      	mov	r5, r1
 80131fc:	f000 fd22 	bl	8013c44 <uxr_seq_num_cmp>
 8013200:	4603      	mov	r3, r0
 8013202:	2b00      	cmp	r3, #0
 8013204:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8013208:	bfb8      	it	lt
 801320a:	8025      	strhlt	r5, [r4, #0]
 801320c:	bd38      	pop	{r3, r4, r5, pc}
 801320e:	bf00      	nop

08013210 <on_full_input_buffer>:
 8013210:	b570      	push	{r4, r5, r6, lr}
 8013212:	4605      	mov	r5, r0
 8013214:	460c      	mov	r4, r1
 8013216:	682b      	ldr	r3, [r5, #0]
 8013218:	6809      	ldr	r1, [r1, #0]
 801321a:	8920      	ldrh	r0, [r4, #8]
 801321c:	6862      	ldr	r2, [r4, #4]
 801321e:	fbb2 f2f0 	udiv	r2, r2, r0
 8013222:	eba3 0c01 	sub.w	ip, r3, r1
 8013226:	fbbc fcf2 	udiv	ip, ip, r2
 801322a:	f10c 0c01 	add.w	ip, ip, #1
 801322e:	fa1f f38c 	uxth.w	r3, ip
 8013232:	fbb3 f6f0 	udiv	r6, r3, r0
 8013236:	fb00 3316 	mls	r3, r0, r6, r3
 801323a:	b29b      	uxth	r3, r3
 801323c:	fb02 f303 	mul.w	r3, r2, r3
 8013240:	1d18      	adds	r0, r3, #4
 8013242:	4408      	add	r0, r1
 8013244:	7d26      	ldrb	r6, [r4, #20]
 8013246:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801324a:	b116      	cbz	r6, 8013252 <on_full_input_buffer+0x42>
 801324c:	2600      	movs	r6, #0
 801324e:	f840 6c04 	str.w	r6, [r0, #-4]
 8013252:	2a03      	cmp	r2, #3
 8013254:	d801      	bhi.n	801325a <on_full_input_buffer+0x4a>
 8013256:	2001      	movs	r0, #1
 8013258:	bd70      	pop	{r4, r5, r6, pc}
 801325a:	3308      	adds	r3, #8
 801325c:	4419      	add	r1, r3
 801325e:	4628      	mov	r0, r5
 8013260:	692b      	ldr	r3, [r5, #16]
 8013262:	3a04      	subs	r2, #4
 8013264:	f7ff fed6 	bl	8013014 <ucdr_init_buffer_origin>
 8013268:	4628      	mov	r0, r5
 801326a:	4903      	ldr	r1, [pc, #12]	@ (8013278 <on_full_input_buffer+0x68>)
 801326c:	4622      	mov	r2, r4
 801326e:	f7ff fead 	bl	8012fcc <ucdr_set_on_full_buffer_callback>
 8013272:	2000      	movs	r0, #0
 8013274:	bd70      	pop	{r4, r5, r6, pc}
 8013276:	bf00      	nop
 8013278:	08013211 	.word	0x08013211

0801327c <uxr_init_input_reliable_stream>:
 801327c:	b500      	push	{lr}
 801327e:	e9c0 1200 	strd	r1, r2, [r0]
 8013282:	f04f 0e00 	mov.w	lr, #0
 8013286:	9a01      	ldr	r2, [sp, #4]
 8013288:	8103      	strh	r3, [r0, #8]
 801328a:	6102      	str	r2, [r0, #16]
 801328c:	f880 e014 	strb.w	lr, [r0, #20]
 8013290:	b1d3      	cbz	r3, 80132c8 <uxr_init_input_reliable_stream+0x4c>
 8013292:	f8c1 e000 	str.w	lr, [r1]
 8013296:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801329a:	f1bc 0f01 	cmp.w	ip, #1
 801329e:	d913      	bls.n	80132c8 <uxr_init_input_reliable_stream+0x4c>
 80132a0:	2301      	movs	r3, #1
 80132a2:	fbb3 f1fc 	udiv	r1, r3, ip
 80132a6:	fb0c 3111 	mls	r1, ip, r1, r3
 80132aa:	b289      	uxth	r1, r1
 80132ac:	6842      	ldr	r2, [r0, #4]
 80132ae:	fbb2 f2fc 	udiv	r2, r2, ip
 80132b2:	fb01 f202 	mul.w	r2, r1, r2
 80132b6:	6801      	ldr	r1, [r0, #0]
 80132b8:	f841 e002 	str.w	lr, [r1, r2]
 80132bc:	3301      	adds	r3, #1
 80132be:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80132c2:	b29b      	uxth	r3, r3
 80132c4:	459c      	cmp	ip, r3
 80132c6:	d8ec      	bhi.n	80132a2 <uxr_init_input_reliable_stream+0x26>
 80132c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80132cc:	60c3      	str	r3, [r0, #12]
 80132ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80132d2:	bf00      	nop

080132d4 <uxr_reset_input_reliable_stream>:
 80132d4:	8901      	ldrh	r1, [r0, #8]
 80132d6:	b1e9      	cbz	r1, 8013314 <uxr_reset_input_reliable_stream+0x40>
 80132d8:	f04f 0c00 	mov.w	ip, #0
 80132dc:	b500      	push	{lr}
 80132de:	4663      	mov	r3, ip
 80132e0:	46e6      	mov	lr, ip
 80132e2:	fbb3 f2f1 	udiv	r2, r3, r1
 80132e6:	fb01 3312 	mls	r3, r1, r2, r3
 80132ea:	b29b      	uxth	r3, r3
 80132ec:	6842      	ldr	r2, [r0, #4]
 80132ee:	fbb2 f2f1 	udiv	r2, r2, r1
 80132f2:	fb02 f303 	mul.w	r3, r2, r3
 80132f6:	6802      	ldr	r2, [r0, #0]
 80132f8:	f842 e003 	str.w	lr, [r2, r3]
 80132fc:	f10c 0c01 	add.w	ip, ip, #1
 8013300:	8901      	ldrh	r1, [r0, #8]
 8013302:	fa1f f38c 	uxth.w	r3, ip
 8013306:	4299      	cmp	r1, r3
 8013308:	d8eb      	bhi.n	80132e2 <uxr_reset_input_reliable_stream+0xe>
 801330a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801330e:	60c3      	str	r3, [r0, #12]
 8013310:	f85d fb04 	ldr.w	pc, [sp], #4
 8013314:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013318:	60c3      	str	r3, [r0, #12]
 801331a:	4770      	bx	lr

0801331c <uxr_receive_reliable_message>:
 801331c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013320:	4604      	mov	r4, r0
 8013322:	460d      	mov	r5, r1
 8013324:	8901      	ldrh	r1, [r0, #8]
 8013326:	8980      	ldrh	r0, [r0, #12]
 8013328:	4690      	mov	r8, r2
 801332a:	461f      	mov	r7, r3
 801332c:	f000 fc82 	bl	8013c34 <uxr_seq_num_add>
 8013330:	4629      	mov	r1, r5
 8013332:	4606      	mov	r6, r0
 8013334:	89a0      	ldrh	r0, [r4, #12]
 8013336:	f000 fc85 	bl	8013c44 <uxr_seq_num_cmp>
 801333a:	2800      	cmp	r0, #0
 801333c:	db0a      	blt.n	8013354 <uxr_receive_reliable_message+0x38>
 801333e:	2600      	movs	r6, #0
 8013340:	89e0      	ldrh	r0, [r4, #14]
 8013342:	4629      	mov	r1, r5
 8013344:	f000 fc7e 	bl	8013c44 <uxr_seq_num_cmp>
 8013348:	2800      	cmp	r0, #0
 801334a:	da00      	bge.n	801334e <uxr_receive_reliable_message+0x32>
 801334c:	81e5      	strh	r5, [r4, #14]
 801334e:	4630      	mov	r0, r6
 8013350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013354:	4630      	mov	r0, r6
 8013356:	4629      	mov	r1, r5
 8013358:	f000 fc74 	bl	8013c44 <uxr_seq_num_cmp>
 801335c:	2800      	cmp	r0, #0
 801335e:	dbee      	blt.n	801333e <uxr_receive_reliable_message+0x22>
 8013360:	6923      	ldr	r3, [r4, #16]
 8013362:	4640      	mov	r0, r8
 8013364:	4798      	blx	r3
 8013366:	2101      	movs	r1, #1
 8013368:	4681      	mov	r9, r0
 801336a:	89a0      	ldrh	r0, [r4, #12]
 801336c:	f000 fc62 	bl	8013c34 <uxr_seq_num_add>
 8013370:	f1b9 0f00 	cmp.w	r9, #0
 8013374:	d101      	bne.n	801337a <uxr_receive_reliable_message+0x5e>
 8013376:	4285      	cmp	r5, r0
 8013378:	d047      	beq.n	801340a <uxr_receive_reliable_message+0xee>
 801337a:	8922      	ldrh	r2, [r4, #8]
 801337c:	fbb5 f0f2 	udiv	r0, r5, r2
 8013380:	fb02 5010 	mls	r0, r2, r0, r5
 8013384:	b280      	uxth	r0, r0
 8013386:	6863      	ldr	r3, [r4, #4]
 8013388:	fbb3 f3f2 	udiv	r3, r3, r2
 801338c:	fb00 f303 	mul.w	r3, r0, r3
 8013390:	6820      	ldr	r0, [r4, #0]
 8013392:	3304      	adds	r3, #4
 8013394:	4418      	add	r0, r3
 8013396:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801339a:	2b00      	cmp	r3, #0
 801339c:	d1cf      	bne.n	801333e <uxr_receive_reliable_message+0x22>
 801339e:	4641      	mov	r1, r8
 80133a0:	463a      	mov	r2, r7
 80133a2:	f001 faa4 	bl	80148ee <memcpy>
 80133a6:	8921      	ldrh	r1, [r4, #8]
 80133a8:	fbb5 f2f1 	udiv	r2, r5, r1
 80133ac:	fb01 5212 	mls	r2, r1, r2, r5
 80133b0:	b292      	uxth	r2, r2
 80133b2:	6863      	ldr	r3, [r4, #4]
 80133b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80133b8:	fb02 f303 	mul.w	r3, r2, r3
 80133bc:	6822      	ldr	r2, [r4, #0]
 80133be:	50d7      	str	r7, [r2, r3]
 80133c0:	9a08      	ldr	r2, [sp, #32]
 80133c2:	2301      	movs	r3, #1
 80133c4:	7013      	strb	r3, [r2, #0]
 80133c6:	f1b9 0f00 	cmp.w	r9, #0
 80133ca:	d0b8      	beq.n	801333e <uxr_receive_reliable_message+0x22>
 80133cc:	89a6      	ldrh	r6, [r4, #12]
 80133ce:	4630      	mov	r0, r6
 80133d0:	2101      	movs	r1, #1
 80133d2:	f000 fc2f 	bl	8013c34 <uxr_seq_num_add>
 80133d6:	8922      	ldrh	r2, [r4, #8]
 80133d8:	6863      	ldr	r3, [r4, #4]
 80133da:	fbb3 f3f2 	udiv	r3, r3, r2
 80133de:	4606      	mov	r6, r0
 80133e0:	fbb0 f0f2 	udiv	r0, r0, r2
 80133e4:	fb02 6010 	mls	r0, r2, r0, r6
 80133e8:	b280      	uxth	r0, r0
 80133ea:	fb00 f303 	mul.w	r3, r0, r3
 80133ee:	6820      	ldr	r0, [r4, #0]
 80133f0:	3304      	adds	r3, #4
 80133f2:	4418      	add	r0, r3
 80133f4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d0a0      	beq.n	801333e <uxr_receive_reliable_message+0x22>
 80133fc:	6923      	ldr	r3, [r4, #16]
 80133fe:	4798      	blx	r3
 8013400:	2802      	cmp	r0, #2
 8013402:	d008      	beq.n	8013416 <uxr_receive_reliable_message+0xfa>
 8013404:	2801      	cmp	r0, #1
 8013406:	d0e2      	beq.n	80133ce <uxr_receive_reliable_message+0xb2>
 8013408:	e799      	b.n	801333e <uxr_receive_reliable_message+0x22>
 801340a:	9b08      	ldr	r3, [sp, #32]
 801340c:	81a5      	strh	r5, [r4, #12]
 801340e:	2601      	movs	r6, #1
 8013410:	f883 9000 	strb.w	r9, [r3]
 8013414:	e794      	b.n	8013340 <uxr_receive_reliable_message+0x24>
 8013416:	2601      	movs	r6, #1
 8013418:	e792      	b.n	8013340 <uxr_receive_reliable_message+0x24>
 801341a:	bf00      	nop

0801341c <uxr_next_input_reliable_buffer_available>:
 801341c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013420:	4604      	mov	r4, r0
 8013422:	460f      	mov	r7, r1
 8013424:	8980      	ldrh	r0, [r0, #12]
 8013426:	2101      	movs	r1, #1
 8013428:	4690      	mov	r8, r2
 801342a:	f000 fc03 	bl	8013c34 <uxr_seq_num_add>
 801342e:	8922      	ldrh	r2, [r4, #8]
 8013430:	fbb0 f6f2 	udiv	r6, r0, r2
 8013434:	fb02 0616 	mls	r6, r2, r6, r0
 8013438:	b2b6      	uxth	r6, r6
 801343a:	6863      	ldr	r3, [r4, #4]
 801343c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013440:	fb06 f303 	mul.w	r3, r6, r3
 8013444:	6826      	ldr	r6, [r4, #0]
 8013446:	3304      	adds	r3, #4
 8013448:	441e      	add	r6, r3
 801344a:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801344e:	f1b9 0f00 	cmp.w	r9, #0
 8013452:	d023      	beq.n	801349c <uxr_next_input_reliable_buffer_available+0x80>
 8013454:	6923      	ldr	r3, [r4, #16]
 8013456:	4605      	mov	r5, r0
 8013458:	4630      	mov	r0, r6
 801345a:	4798      	blx	r3
 801345c:	4682      	mov	sl, r0
 801345e:	b300      	cbz	r0, 80134a2 <uxr_next_input_reliable_buffer_available+0x86>
 8013460:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8013464:	2101      	movs	r1, #1
 8013466:	4650      	mov	r0, sl
 8013468:	f000 fbe4 	bl	8013c34 <uxr_seq_num_add>
 801346c:	8921      	ldrh	r1, [r4, #8]
 801346e:	fbb0 f2f1 	udiv	r2, r0, r1
 8013472:	4682      	mov	sl, r0
 8013474:	fb01 0212 	mls	r2, r1, r2, r0
 8013478:	e9d4 0300 	ldrd	r0, r3, [r4]
 801347c:	b292      	uxth	r2, r2
 801347e:	fbb3 f3f1 	udiv	r3, r3, r1
 8013482:	fb02 f303 	mul.w	r3, r2, r3
 8013486:	3304      	adds	r3, #4
 8013488:	4418      	add	r0, r3
 801348a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801348e:	b12b      	cbz	r3, 801349c <uxr_next_input_reliable_buffer_available+0x80>
 8013490:	6923      	ldr	r3, [r4, #16]
 8013492:	4798      	blx	r3
 8013494:	2802      	cmp	r0, #2
 8013496:	d01b      	beq.n	80134d0 <uxr_next_input_reliable_buffer_available+0xb4>
 8013498:	2801      	cmp	r0, #1
 801349a:	d0e3      	beq.n	8013464 <uxr_next_input_reliable_buffer_available+0x48>
 801349c:	2000      	movs	r0, #0
 801349e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134a2:	464a      	mov	r2, r9
 80134a4:	4631      	mov	r1, r6
 80134a6:	4638      	mov	r0, r7
 80134a8:	f7ff fdbc 	bl	8013024 <ucdr_init_buffer>
 80134ac:	8921      	ldrh	r1, [r4, #8]
 80134ae:	fbb5 f2f1 	udiv	r2, r5, r1
 80134b2:	fb01 5212 	mls	r2, r1, r2, r5
 80134b6:	b292      	uxth	r2, r2
 80134b8:	6863      	ldr	r3, [r4, #4]
 80134ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80134be:	fb02 f303 	mul.w	r3, r2, r3
 80134c2:	6822      	ldr	r2, [r4, #0]
 80134c4:	f842 a003 	str.w	sl, [r2, r3]
 80134c8:	2001      	movs	r0, #1
 80134ca:	81a5      	strh	r5, [r4, #12]
 80134cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134d0:	8920      	ldrh	r0, [r4, #8]
 80134d2:	fbb5 f3f0 	udiv	r3, r5, r0
 80134d6:	fb00 5513 	mls	r5, r0, r3, r5
 80134da:	b2ad      	uxth	r5, r5
 80134dc:	6863      	ldr	r3, [r4, #4]
 80134de:	fbb3 f3f0 	udiv	r3, r3, r0
 80134e2:	fb03 f505 	mul.w	r5, r3, r5
 80134e6:	6823      	ldr	r3, [r4, #0]
 80134e8:	2000      	movs	r0, #0
 80134ea:	5158      	str	r0, [r3, r5]
 80134ec:	eb06 0108 	add.w	r1, r6, r8
 80134f0:	eba9 0208 	sub.w	r2, r9, r8
 80134f4:	4638      	mov	r0, r7
 80134f6:	f7ff fd95 	bl	8013024 <ucdr_init_buffer>
 80134fa:	4638      	mov	r0, r7
 80134fc:	4903      	ldr	r1, [pc, #12]	@ (801350c <uxr_next_input_reliable_buffer_available+0xf0>)
 80134fe:	4622      	mov	r2, r4
 8013500:	f7ff fd64 	bl	8012fcc <ucdr_set_on_full_buffer_callback>
 8013504:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8013508:	2001      	movs	r0, #1
 801350a:	e7c8      	b.n	801349e <uxr_next_input_reliable_buffer_available+0x82>
 801350c:	08013211 	.word	0x08013211

08013510 <uxr_process_heartbeat>:
 8013510:	b538      	push	{r3, r4, r5, lr}
 8013512:	4611      	mov	r1, r2
 8013514:	4604      	mov	r4, r0
 8013516:	89c0      	ldrh	r0, [r0, #14]
 8013518:	4615      	mov	r5, r2
 801351a:	f000 fb93 	bl	8013c44 <uxr_seq_num_cmp>
 801351e:	2800      	cmp	r0, #0
 8013520:	bfb8      	it	lt
 8013522:	81e5      	strhlt	r5, [r4, #14]
 8013524:	bd38      	pop	{r3, r4, r5, pc}
 8013526:	bf00      	nop

08013528 <uxr_compute_acknack>:
 8013528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801352c:	8903      	ldrh	r3, [r0, #8]
 801352e:	8985      	ldrh	r5, [r0, #12]
 8013530:	4604      	mov	r4, r0
 8013532:	460e      	mov	r6, r1
 8013534:	b1d3      	cbz	r3, 801356c <uxr_compute_acknack+0x44>
 8013536:	4628      	mov	r0, r5
 8013538:	2701      	movs	r7, #1
 801353a:	e003      	b.n	8013544 <uxr_compute_acknack+0x1c>
 801353c:	4567      	cmp	r7, ip
 801353e:	d215      	bcs.n	801356c <uxr_compute_acknack+0x44>
 8013540:	89a0      	ldrh	r0, [r4, #12]
 8013542:	3701      	adds	r7, #1
 8013544:	b2b9      	uxth	r1, r7
 8013546:	f000 fb75 	bl	8013c34 <uxr_seq_num_add>
 801354a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801354e:	fbb0 f3fc 	udiv	r3, r0, ip
 8013552:	fb0c 0313 	mls	r3, ip, r3, r0
 8013556:	b29a      	uxth	r2, r3
 8013558:	e9d4 1300 	ldrd	r1, r3, [r4]
 801355c:	fbb3 f3fc 	udiv	r3, r3, ip
 8013560:	fb02 f303 	mul.w	r3, r2, r3
 8013564:	58cb      	ldr	r3, [r1, r3]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d1e8      	bne.n	801353c <uxr_compute_acknack+0x14>
 801356a:	4605      	mov	r5, r0
 801356c:	8035      	strh	r5, [r6, #0]
 801356e:	2101      	movs	r1, #1
 8013570:	4628      	mov	r0, r5
 8013572:	89e7      	ldrh	r7, [r4, #14]
 8013574:	f000 fb62 	bl	8013c3c <uxr_seq_num_sub>
 8013578:	4601      	mov	r1, r0
 801357a:	4638      	mov	r0, r7
 801357c:	f000 fb5e 	bl	8013c3c <uxr_seq_num_sub>
 8013580:	4605      	mov	r5, r0
 8013582:	b318      	cbz	r0, 80135cc <uxr_compute_acknack+0xa4>
 8013584:	f04f 0900 	mov.w	r9, #0
 8013588:	464f      	mov	r7, r9
 801358a:	f04f 0801 	mov.w	r8, #1
 801358e:	fa1f f189 	uxth.w	r1, r9
 8013592:	8830      	ldrh	r0, [r6, #0]
 8013594:	f000 fb4e 	bl	8013c34 <uxr_seq_num_add>
 8013598:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801359c:	fbb0 f3fc 	udiv	r3, r0, ip
 80135a0:	e9d4 1200 	ldrd	r1, r2, [r4]
 80135a4:	fb03 001c 	mls	r0, r3, ip, r0
 80135a8:	b283      	uxth	r3, r0
 80135aa:	fbb2 f2fc 	udiv	r2, r2, ip
 80135ae:	fb02 f303 	mul.w	r3, r2, r3
 80135b2:	fa08 f209 	lsl.w	r2, r8, r9
 80135b6:	58cb      	ldr	r3, [r1, r3]
 80135b8:	f109 0901 	add.w	r9, r9, #1
 80135bc:	b90b      	cbnz	r3, 80135c2 <uxr_compute_acknack+0x9a>
 80135be:	4317      	orrs	r7, r2
 80135c0:	b2bf      	uxth	r7, r7
 80135c2:	454d      	cmp	r5, r9
 80135c4:	d1e3      	bne.n	801358e <uxr_compute_acknack+0x66>
 80135c6:	4638      	mov	r0, r7
 80135c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135cc:	4607      	mov	r7, r0
 80135ce:	4638      	mov	r0, r7
 80135d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080135d4 <uxr_init_output_best_effort_stream>:
 80135d4:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80135d8:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80135dc:	6001      	str	r1, [r0, #0]
 80135de:	7303      	strb	r3, [r0, #12]
 80135e0:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80135e4:	4770      	bx	lr
 80135e6:	bf00      	nop

080135e8 <uxr_reset_output_best_effort_stream>:
 80135e8:	7b02      	ldrb	r2, [r0, #12]
 80135ea:	6042      	str	r2, [r0, #4]
 80135ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80135f0:	81c3      	strh	r3, [r0, #14]
 80135f2:	4770      	bx	lr

080135f4 <uxr_prepare_best_effort_buffer_to_write>:
 80135f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135f6:	4604      	mov	r4, r0
 80135f8:	b083      	sub	sp, #12
 80135fa:	6840      	ldr	r0, [r0, #4]
 80135fc:	460d      	mov	r5, r1
 80135fe:	4616      	mov	r6, r2
 8013600:	f7fa fab4 	bl	800db6c <uxr_submessage_padding>
 8013604:	6863      	ldr	r3, [r4, #4]
 8013606:	4418      	add	r0, r3
 8013608:	68a3      	ldr	r3, [r4, #8]
 801360a:	1942      	adds	r2, r0, r5
 801360c:	4293      	cmp	r3, r2
 801360e:	bf2c      	ite	cs
 8013610:	2701      	movcs	r7, #1
 8013612:	2700      	movcc	r7, #0
 8013614:	d202      	bcs.n	801361c <uxr_prepare_best_effort_buffer_to_write+0x28>
 8013616:	4638      	mov	r0, r7
 8013618:	b003      	add	sp, #12
 801361a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801361c:	9000      	str	r0, [sp, #0]
 801361e:	6821      	ldr	r1, [r4, #0]
 8013620:	4630      	mov	r0, r6
 8013622:	2300      	movs	r3, #0
 8013624:	f7ff fcec 	bl	8013000 <ucdr_init_buffer_origin_offset>
 8013628:	6861      	ldr	r1, [r4, #4]
 801362a:	4638      	mov	r0, r7
 801362c:	4429      	add	r1, r5
 801362e:	6061      	str	r1, [r4, #4]
 8013630:	b003      	add	sp, #12
 8013632:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013634 <uxr_prepare_best_effort_buffer_to_send>:
 8013634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013638:	4604      	mov	r4, r0
 801363a:	461d      	mov	r5, r3
 801363c:	6840      	ldr	r0, [r0, #4]
 801363e:	7b23      	ldrb	r3, [r4, #12]
 8013640:	4298      	cmp	r0, r3
 8013642:	bf8c      	ite	hi
 8013644:	2601      	movhi	r6, #1
 8013646:	2600      	movls	r6, #0
 8013648:	d802      	bhi.n	8013650 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801364a:	4630      	mov	r0, r6
 801364c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013650:	4688      	mov	r8, r1
 8013652:	89e0      	ldrh	r0, [r4, #14]
 8013654:	2101      	movs	r1, #1
 8013656:	4617      	mov	r7, r2
 8013658:	f000 faec 	bl	8013c34 <uxr_seq_num_add>
 801365c:	6823      	ldr	r3, [r4, #0]
 801365e:	81e0      	strh	r0, [r4, #14]
 8013660:	8028      	strh	r0, [r5, #0]
 8013662:	f8c8 3000 	str.w	r3, [r8]
 8013666:	6863      	ldr	r3, [r4, #4]
 8013668:	603b      	str	r3, [r7, #0]
 801366a:	7b23      	ldrb	r3, [r4, #12]
 801366c:	6063      	str	r3, [r4, #4]
 801366e:	4630      	mov	r0, r6
 8013670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013674 <on_full_output_buffer>:
 8013674:	b538      	push	{r3, r4, r5, lr}
 8013676:	6802      	ldr	r2, [r0, #0]
 8013678:	460c      	mov	r4, r1
 801367a:	6809      	ldr	r1, [r1, #0]
 801367c:	8923      	ldrh	r3, [r4, #8]
 801367e:	eba2 0c01 	sub.w	ip, r2, r1
 8013682:	6862      	ldr	r2, [r4, #4]
 8013684:	fbb2 f2f3 	udiv	r2, r2, r3
 8013688:	fbbc fcf2 	udiv	ip, ip, r2
 801368c:	f10c 0c01 	add.w	ip, ip, #1
 8013690:	fa1f fc8c 	uxth.w	ip, ip
 8013694:	fbbc fef3 	udiv	lr, ip, r3
 8013698:	fb03 c31e 	mls	r3, r3, lr, ip
 801369c:	b29b      	uxth	r3, r3
 801369e:	fb02 f303 	mul.w	r3, r2, r3
 80136a2:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80136a6:	58ca      	ldr	r2, [r1, r3]
 80136a8:	4463      	add	r3, ip
 80136aa:	eba2 020c 	sub.w	r2, r2, ip
 80136ae:	3308      	adds	r3, #8
 80136b0:	4605      	mov	r5, r0
 80136b2:	4419      	add	r1, r3
 80136b4:	3a04      	subs	r2, #4
 80136b6:	6903      	ldr	r3, [r0, #16]
 80136b8:	f7ff fcac 	bl	8013014 <ucdr_init_buffer_origin>
 80136bc:	4628      	mov	r0, r5
 80136be:	4903      	ldr	r1, [pc, #12]	@ (80136cc <on_full_output_buffer+0x58>)
 80136c0:	4622      	mov	r2, r4
 80136c2:	f7ff fc83 	bl	8012fcc <ucdr_set_on_full_buffer_callback>
 80136c6:	2000      	movs	r0, #0
 80136c8:	bd38      	pop	{r3, r4, r5, pc}
 80136ca:	bf00      	nop
 80136cc:	08013675 	.word	0x08013675

080136d0 <uxr_init_output_reliable_stream>:
 80136d0:	b410      	push	{r4}
 80136d2:	f89d c004 	ldrb.w	ip, [sp, #4]
 80136d6:	8103      	strh	r3, [r0, #8]
 80136d8:	e9c0 1200 	strd	r1, r2, [r0]
 80136dc:	f880 c00c 	strb.w	ip, [r0, #12]
 80136e0:	b1d3      	cbz	r3, 8013718 <uxr_init_output_reliable_stream+0x48>
 80136e2:	f8c1 c000 	str.w	ip, [r1]
 80136e6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80136ea:	f1bc 0f01 	cmp.w	ip, #1
 80136ee:	d913      	bls.n	8013718 <uxr_init_output_reliable_stream+0x48>
 80136f0:	2301      	movs	r3, #1
 80136f2:	fbb3 f1fc 	udiv	r1, r3, ip
 80136f6:	fb0c 3111 	mls	r1, ip, r1, r3
 80136fa:	b289      	uxth	r1, r1
 80136fc:	6842      	ldr	r2, [r0, #4]
 80136fe:	6804      	ldr	r4, [r0, #0]
 8013700:	fbb2 f2fc 	udiv	r2, r2, ip
 8013704:	fb01 f202 	mul.w	r2, r1, r2
 8013708:	7b01      	ldrb	r1, [r0, #12]
 801370a:	50a1      	str	r1, [r4, r2]
 801370c:	3301      	adds	r3, #1
 801370e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8013712:	b29b      	uxth	r3, r3
 8013714:	459c      	cmp	ip, r3
 8013716:	d8ec      	bhi.n	80136f2 <uxr_init_output_reliable_stream+0x22>
 8013718:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801371c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013720:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8013724:	4905      	ldr	r1, [pc, #20]	@ (801373c <uxr_init_output_reliable_stream+0x6c>)
 8013726:	f85d 4b04 	ldr.w	r4, [sp], #4
 801372a:	f8c0 100e 	str.w	r1, [r0, #14]
 801372e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013732:	2300      	movs	r3, #0
 8013734:	8242      	strh	r2, [r0, #18]
 8013736:	8403      	strh	r3, [r0, #32]
 8013738:	4770      	bx	lr
 801373a:	bf00      	nop
 801373c:	ffff0000 	.word	0xffff0000

08013740 <uxr_reset_output_reliable_stream>:
 8013740:	8901      	ldrh	r1, [r0, #8]
 8013742:	b1b1      	cbz	r1, 8013772 <uxr_reset_output_reliable_stream+0x32>
 8013744:	f04f 0c00 	mov.w	ip, #0
 8013748:	4663      	mov	r3, ip
 801374a:	fbb3 f2f1 	udiv	r2, r3, r1
 801374e:	fb01 3312 	mls	r3, r1, r2, r3
 8013752:	b29b      	uxth	r3, r3
 8013754:	6842      	ldr	r2, [r0, #4]
 8013756:	fbb2 f2f1 	udiv	r2, r2, r1
 801375a:	6801      	ldr	r1, [r0, #0]
 801375c:	fb02 f303 	mul.w	r3, r2, r3
 8013760:	7b02      	ldrb	r2, [r0, #12]
 8013762:	50ca      	str	r2, [r1, r3]
 8013764:	f10c 0c01 	add.w	ip, ip, #1
 8013768:	8901      	ldrh	r1, [r0, #8]
 801376a:	fa1f f38c 	uxth.w	r3, ip
 801376e:	4299      	cmp	r1, r3
 8013770:	d8eb      	bhi.n	801374a <uxr_reset_output_reliable_stream+0xa>
 8013772:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013776:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801377a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801377e:	4904      	ldr	r1, [pc, #16]	@ (8013790 <uxr_reset_output_reliable_stream+0x50>)
 8013780:	f8c0 100e 	str.w	r1, [r0, #14]
 8013784:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013788:	2300      	movs	r3, #0
 801378a:	8242      	strh	r2, [r0, #18]
 801378c:	8403      	strh	r3, [r0, #32]
 801378e:	4770      	bx	lr
 8013790:	ffff0000 	.word	0xffff0000

08013794 <uxr_prepare_reliable_buffer_to_write>:
 8013794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013798:	4604      	mov	r4, r0
 801379a:	b091      	sub	sp, #68	@ 0x44
 801379c:	8900      	ldrh	r0, [r0, #8]
 801379e:	89e6      	ldrh	r6, [r4, #14]
 80137a0:	6823      	ldr	r3, [r4, #0]
 80137a2:	9204      	str	r2, [sp, #16]
 80137a4:	fbb6 f2f0 	udiv	r2, r6, r0
 80137a8:	fb00 6212 	mls	r2, r0, r2, r6
 80137ac:	b292      	uxth	r2, r2
 80137ae:	6865      	ldr	r5, [r4, #4]
 80137b0:	fbb5 f5f0 	udiv	r5, r5, r0
 80137b4:	fb05 3202 	mla	r2, r5, r2, r3
 80137b8:	3204      	adds	r2, #4
 80137ba:	f852 8c04 	ldr.w	r8, [r2, #-4]
 80137be:	f894 900c 	ldrb.w	r9, [r4, #12]
 80137c2:	9203      	str	r2, [sp, #12]
 80137c4:	468b      	mov	fp, r1
 80137c6:	1f2f      	subs	r7, r5, #4
 80137c8:	2800      	cmp	r0, #0
 80137ca:	f000 814c 	beq.w	8013a66 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80137ce:	f04f 0c00 	mov.w	ip, #0
 80137d2:	46e2      	mov	sl, ip
 80137d4:	4661      	mov	r1, ip
 80137d6:	fbb1 f2f0 	udiv	r2, r1, r0
 80137da:	fb00 1212 	mls	r2, r0, r2, r1
 80137de:	b292      	uxth	r2, r2
 80137e0:	fb05 f202 	mul.w	r2, r5, r2
 80137e4:	f10c 0c01 	add.w	ip, ip, #1
 80137e8:	589a      	ldr	r2, [r3, r2]
 80137ea:	454a      	cmp	r2, r9
 80137ec:	bf08      	it	eq
 80137ee:	f10a 0a01 	addeq.w	sl, sl, #1
 80137f2:	fa1f f18c 	uxth.w	r1, ip
 80137f6:	bf08      	it	eq
 80137f8:	fa1f fa8a 	uxtheq.w	sl, sl
 80137fc:	4281      	cmp	r1, r0
 80137fe:	d3ea      	bcc.n	80137d6 <uxr_prepare_reliable_buffer_to_write+0x42>
 8013800:	4640      	mov	r0, r8
 8013802:	2104      	movs	r1, #4
 8013804:	f8cd a014 	str.w	sl, [sp, #20]
 8013808:	f7ff fc10 	bl	801302c <ucdr_alignment>
 801380c:	4480      	add	r8, r0
 801380e:	eb08 020b 	add.w	r2, r8, fp
 8013812:	42ba      	cmp	r2, r7
 8013814:	f240 80cd 	bls.w	80139b2 <uxr_prepare_reliable_buffer_to_write+0x21e>
 8013818:	7b22      	ldrb	r2, [r4, #12]
 801381a:	445a      	add	r2, fp
 801381c:	42ba      	cmp	r2, r7
 801381e:	f240 80b5 	bls.w	801398c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8013822:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8013826:	33fc      	adds	r3, #252	@ 0xfc
 8013828:	b2ba      	uxth	r2, r7
 801382a:	4413      	add	r3, r2
 801382c:	b29b      	uxth	r3, r3
 801382e:	fb0a f903 	mul.w	r9, sl, r3
 8013832:	45d9      	cmp	r9, fp
 8013834:	9305      	str	r3, [sp, #20]
 8013836:	9306      	str	r3, [sp, #24]
 8013838:	f0c0 80b7 	bcc.w	80139aa <uxr_prepare_reliable_buffer_to_write+0x216>
 801383c:	f108 0304 	add.w	r3, r8, #4
 8013840:	42bb      	cmp	r3, r7
 8013842:	f080 80db 	bcs.w	80139fc <uxr_prepare_reliable_buffer_to_write+0x268>
 8013846:	f1a2 0904 	sub.w	r9, r2, #4
 801384a:	eba9 0908 	sub.w	r9, r9, r8
 801384e:	9b05      	ldr	r3, [sp, #20]
 8013850:	fa1f f989 	uxth.w	r9, r9
 8013854:	ebab 0b09 	sub.w	fp, fp, r9
 8013858:	fbbb f2f3 	udiv	r2, fp, r3
 801385c:	fb03 b312 	mls	r3, r3, r2, fp
 8013860:	2b00      	cmp	r3, #0
 8013862:	f000 80c8 	beq.w	80139f6 <uxr_prepare_reliable_buffer_to_write+0x262>
 8013866:	3201      	adds	r2, #1
 8013868:	b292      	uxth	r2, r2
 801386a:	9306      	str	r3, [sp, #24]
 801386c:	4552      	cmp	r2, sl
 801386e:	f200 809c 	bhi.w	80139aa <uxr_prepare_reliable_buffer_to_write+0x216>
 8013872:	f10d 0b20 	add.w	fp, sp, #32
 8013876:	2a00      	cmp	r2, #0
 8013878:	d042      	beq.n	8013900 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801387a:	f8cd 801c 	str.w	r8, [sp, #28]
 801387e:	f04f 0a00 	mov.w	sl, #0
 8013882:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8013886:	9505      	str	r5, [sp, #20]
 8013888:	f10d 0b20 	add.w	fp, sp, #32
 801388c:	4615      	mov	r5, r2
 801388e:	e000      	b.n	8013892 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8013890:	46c1      	mov	r9, r8
 8013892:	8920      	ldrh	r0, [r4, #8]
 8013894:	fbb6 f2f0 	udiv	r2, r6, r0
 8013898:	fb00 6112 	mls	r1, r0, r2, r6
 801389c:	b28a      	uxth	r2, r1
 801389e:	6863      	ldr	r3, [r4, #4]
 80138a0:	fbb3 f1f0 	udiv	r1, r3, r0
 80138a4:	6823      	ldr	r3, [r4, #0]
 80138a6:	fb02 f101 	mul.w	r1, r2, r1
 80138aa:	3104      	adds	r1, #4
 80138ac:	4419      	add	r1, r3
 80138ae:	4658      	mov	r0, fp
 80138b0:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80138b4:	9200      	str	r2, [sp, #0]
 80138b6:	2300      	movs	r3, #0
 80138b8:	463a      	mov	r2, r7
 80138ba:	f7ff fba1 	bl	8013000 <ucdr_init_buffer_origin_offset>
 80138be:	464a      	mov	r2, r9
 80138c0:	2300      	movs	r3, #0
 80138c2:	210d      	movs	r1, #13
 80138c4:	4658      	mov	r0, fp
 80138c6:	f7fa f911 	bl	800daec <uxr_buffer_submessage_header>
 80138ca:	8921      	ldrh	r1, [r4, #8]
 80138cc:	fbb6 f2f1 	udiv	r2, r6, r1
 80138d0:	fb01 6212 	mls	r2, r1, r2, r6
 80138d4:	b292      	uxth	r2, r2
 80138d6:	6863      	ldr	r3, [r4, #4]
 80138d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80138dc:	fb02 f303 	mul.w	r3, r2, r3
 80138e0:	6822      	ldr	r2, [r4, #0]
 80138e2:	4630      	mov	r0, r6
 80138e4:	50d7      	str	r7, [r2, r3]
 80138e6:	2101      	movs	r1, #1
 80138e8:	f000 f9a4 	bl	8013c34 <uxr_seq_num_add>
 80138ec:	f10a 0a01 	add.w	sl, sl, #1
 80138f0:	fa1f f38a 	uxth.w	r3, sl
 80138f4:	429d      	cmp	r5, r3
 80138f6:	4606      	mov	r6, r0
 80138f8:	d8ca      	bhi.n	8013890 <uxr_prepare_reliable_buffer_to_write+0xfc>
 80138fa:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80138fe:	9d05      	ldr	r5, [sp, #20]
 8013900:	8920      	ldrh	r0, [r4, #8]
 8013902:	fbb6 f3f0 	udiv	r3, r6, r0
 8013906:	fb00 6313 	mls	r3, r0, r3, r6
 801390a:	b299      	uxth	r1, r3
 801390c:	6863      	ldr	r3, [r4, #4]
 801390e:	fbb3 f3f0 	udiv	r3, r3, r0
 8013912:	fb01 f303 	mul.w	r3, r1, r3
 8013916:	6821      	ldr	r1, [r4, #0]
 8013918:	3304      	adds	r3, #4
 801391a:	4419      	add	r1, r3
 801391c:	463a      	mov	r2, r7
 801391e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8013922:	9000      	str	r0, [sp, #0]
 8013924:	2300      	movs	r3, #0
 8013926:	4658      	mov	r0, fp
 8013928:	f7ff fb6a 	bl	8013000 <ucdr_init_buffer_origin_offset>
 801392c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8013930:	4658      	mov	r0, fp
 8013932:	fa1f f289 	uxth.w	r2, r9
 8013936:	2302      	movs	r3, #2
 8013938:	210d      	movs	r1, #13
 801393a:	f7fa f8d7 	bl	800daec <uxr_buffer_submessage_header>
 801393e:	9b03      	ldr	r3, [sp, #12]
 8013940:	8927      	ldrh	r7, [r4, #8]
 8013942:	7b20      	ldrb	r0, [r4, #12]
 8013944:	f108 0104 	add.w	r1, r8, #4
 8013948:	440b      	add	r3, r1
 801394a:	4619      	mov	r1, r3
 801394c:	fbb6 f3f7 	udiv	r3, r6, r7
 8013950:	fb07 6313 	mls	r3, r7, r3, r6
 8013954:	f1a5 0208 	sub.w	r2, r5, #8
 8013958:	b29d      	uxth	r5, r3
 801395a:	3004      	adds	r0, #4
 801395c:	6863      	ldr	r3, [r4, #4]
 801395e:	fbb3 f3f7 	udiv	r3, r3, r7
 8013962:	fb05 f303 	mul.w	r3, r5, r3
 8013966:	6825      	ldr	r5, [r4, #0]
 8013968:	4448      	add	r0, r9
 801396a:	50e8      	str	r0, [r5, r3]
 801396c:	9d04      	ldr	r5, [sp, #16]
 801396e:	eba2 0208 	sub.w	r2, r2, r8
 8013972:	4628      	mov	r0, r5
 8013974:	f7ff fb56 	bl	8013024 <ucdr_init_buffer>
 8013978:	4628      	mov	r0, r5
 801397a:	493c      	ldr	r1, [pc, #240]	@ (8013a6c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801397c:	4622      	mov	r2, r4
 801397e:	f7ff fb25 	bl	8012fcc <ucdr_set_on_full_buffer_callback>
 8013982:	2001      	movs	r0, #1
 8013984:	81e6      	strh	r6, [r4, #14]
 8013986:	b011      	add	sp, #68	@ 0x44
 8013988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801398c:	2101      	movs	r1, #1
 801398e:	89e0      	ldrh	r0, [r4, #14]
 8013990:	f000 f950 	bl	8013c34 <uxr_seq_num_add>
 8013994:	8921      	ldrh	r1, [r4, #8]
 8013996:	4605      	mov	r5, r0
 8013998:	8a60      	ldrh	r0, [r4, #18]
 801399a:	f000 f94b 	bl	8013c34 <uxr_seq_num_add>
 801399e:	4601      	mov	r1, r0
 80139a0:	4628      	mov	r0, r5
 80139a2:	f000 f94f 	bl	8013c44 <uxr_seq_num_cmp>
 80139a6:	2800      	cmp	r0, #0
 80139a8:	dd42      	ble.n	8013a30 <uxr_prepare_reliable_buffer_to_write+0x29c>
 80139aa:	2000      	movs	r0, #0
 80139ac:	b011      	add	sp, #68	@ 0x44
 80139ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139b2:	8921      	ldrh	r1, [r4, #8]
 80139b4:	8a60      	ldrh	r0, [r4, #18]
 80139b6:	9205      	str	r2, [sp, #20]
 80139b8:	f000 f93c 	bl	8013c34 <uxr_seq_num_add>
 80139bc:	4601      	mov	r1, r0
 80139be:	4630      	mov	r0, r6
 80139c0:	f000 f940 	bl	8013c44 <uxr_seq_num_cmp>
 80139c4:	2800      	cmp	r0, #0
 80139c6:	9a05      	ldr	r2, [sp, #20]
 80139c8:	dcef      	bgt.n	80139aa <uxr_prepare_reliable_buffer_to_write+0x216>
 80139ca:	8927      	ldrh	r7, [r4, #8]
 80139cc:	fbb6 f3f7 	udiv	r3, r6, r7
 80139d0:	fb07 6313 	mls	r3, r7, r3, r6
 80139d4:	b29d      	uxth	r5, r3
 80139d6:	6863      	ldr	r3, [r4, #4]
 80139d8:	6824      	ldr	r4, [r4, #0]
 80139da:	fbb3 f3f7 	udiv	r3, r3, r7
 80139de:	fb05 f303 	mul.w	r3, r5, r3
 80139e2:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80139e6:	50e2      	str	r2, [r4, r3]
 80139e8:	2300      	movs	r3, #0
 80139ea:	f8cd 8000 	str.w	r8, [sp]
 80139ee:	f7ff fb07 	bl	8013000 <ucdr_init_buffer_origin_offset>
 80139f2:	2001      	movs	r0, #1
 80139f4:	e7da      	b.n	80139ac <uxr_prepare_reliable_buffer_to_write+0x218>
 80139f6:	b293      	uxth	r3, r2
 80139f8:	461a      	mov	r2, r3
 80139fa:	e737      	b.n	801386c <uxr_prepare_reliable_buffer_to_write+0xd8>
 80139fc:	4630      	mov	r0, r6
 80139fe:	2101      	movs	r1, #1
 8013a00:	9207      	str	r2, [sp, #28]
 8013a02:	f000 f917 	bl	8013c34 <uxr_seq_num_add>
 8013a06:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8013a0a:	fbb0 f1fc 	udiv	r1, r0, ip
 8013a0e:	fb0c 0111 	mls	r1, ip, r1, r0
 8013a12:	4606      	mov	r6, r0
 8013a14:	b288      	uxth	r0, r1
 8013a16:	6863      	ldr	r3, [r4, #4]
 8013a18:	fbb3 f1fc 	udiv	r1, r3, ip
 8013a1c:	6823      	ldr	r3, [r4, #0]
 8013a1e:	9a07      	ldr	r2, [sp, #28]
 8013a20:	fb00 f101 	mul.w	r1, r0, r1
 8013a24:	3104      	adds	r1, #4
 8013a26:	440b      	add	r3, r1
 8013a28:	9303      	str	r3, [sp, #12]
 8013a2a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8013a2e:	e70a      	b.n	8013846 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8013a30:	8921      	ldrh	r1, [r4, #8]
 8013a32:	fbb5 f3f1 	udiv	r3, r5, r1
 8013a36:	fb01 5313 	mls	r3, r1, r3, r5
 8013a3a:	b29a      	uxth	r2, r3
 8013a3c:	6863      	ldr	r3, [r4, #4]
 8013a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8013a42:	6821      	ldr	r1, [r4, #0]
 8013a44:	9804      	ldr	r0, [sp, #16]
 8013a46:	fb02 f303 	mul.w	r3, r2, r3
 8013a4a:	3304      	adds	r3, #4
 8013a4c:	7b22      	ldrb	r2, [r4, #12]
 8013a4e:	4419      	add	r1, r3
 8013a50:	445a      	add	r2, fp
 8013a52:	f841 2c04 	str.w	r2, [r1, #-4]
 8013a56:	7b23      	ldrb	r3, [r4, #12]
 8013a58:	9300      	str	r3, [sp, #0]
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	f7ff fad0 	bl	8013000 <ucdr_init_buffer_origin_offset>
 8013a60:	81e5      	strh	r5, [r4, #14]
 8013a62:	2001      	movs	r0, #1
 8013a64:	e7a2      	b.n	80139ac <uxr_prepare_reliable_buffer_to_write+0x218>
 8013a66:	4682      	mov	sl, r0
 8013a68:	e6ca      	b.n	8013800 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8013a6a:	bf00      	nop
 8013a6c:	08013675 	.word	0x08013675

08013a70 <uxr_prepare_next_reliable_buffer_to_send>:
 8013a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a72:	4604      	mov	r4, r0
 8013a74:	460f      	mov	r7, r1
 8013a76:	8a00      	ldrh	r0, [r0, #16]
 8013a78:	2101      	movs	r1, #1
 8013a7a:	4616      	mov	r6, r2
 8013a7c:	461d      	mov	r5, r3
 8013a7e:	f000 f8d9 	bl	8013c34 <uxr_seq_num_add>
 8013a82:	8028      	strh	r0, [r5, #0]
 8013a84:	8922      	ldrh	r2, [r4, #8]
 8013a86:	fbb0 f3f2 	udiv	r3, r0, r2
 8013a8a:	fb02 0c13 	mls	ip, r2, r3, r0
 8013a8e:	fa1f fc8c 	uxth.w	ip, ip
 8013a92:	6863      	ldr	r3, [r4, #4]
 8013a94:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a98:	fb0c fc03 	mul.w	ip, ip, r3
 8013a9c:	6823      	ldr	r3, [r4, #0]
 8013a9e:	89e1      	ldrh	r1, [r4, #14]
 8013aa0:	f10c 0c04 	add.w	ip, ip, #4
 8013aa4:	4463      	add	r3, ip
 8013aa6:	603b      	str	r3, [r7, #0]
 8013aa8:	6823      	ldr	r3, [r4, #0]
 8013aaa:	449c      	add	ip, r3
 8013aac:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8013ab0:	6033      	str	r3, [r6, #0]
 8013ab2:	f000 f8c7 	bl	8013c44 <uxr_seq_num_cmp>
 8013ab6:	2800      	cmp	r0, #0
 8013ab8:	dd01      	ble.n	8013abe <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8013aba:	2000      	movs	r0, #0
 8013abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013abe:	7b23      	ldrb	r3, [r4, #12]
 8013ac0:	6832      	ldr	r2, [r6, #0]
 8013ac2:	429a      	cmp	r2, r3
 8013ac4:	d9f9      	bls.n	8013aba <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8013ac6:	8a61      	ldrh	r1, [r4, #18]
 8013ac8:	8a20      	ldrh	r0, [r4, #16]
 8013aca:	f000 f8b7 	bl	8013c3c <uxr_seq_num_sub>
 8013ace:	8923      	ldrh	r3, [r4, #8]
 8013ad0:	4283      	cmp	r3, r0
 8013ad2:	d0f2      	beq.n	8013aba <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8013ad4:	8828      	ldrh	r0, [r5, #0]
 8013ad6:	89e3      	ldrh	r3, [r4, #14]
 8013ad8:	8220      	strh	r0, [r4, #16]
 8013ada:	4298      	cmp	r0, r3
 8013adc:	d001      	beq.n	8013ae2 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8013ade:	2001      	movs	r0, #1
 8013ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ae2:	2101      	movs	r1, #1
 8013ae4:	f000 f8a6 	bl	8013c34 <uxr_seq_num_add>
 8013ae8:	81e0      	strh	r0, [r4, #14]
 8013aea:	2001      	movs	r0, #1
 8013aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013aee:	bf00      	nop

08013af0 <uxr_update_output_stream_heartbeat_timestamp>:
 8013af0:	b570      	push	{r4, r5, r6, lr}
 8013af2:	8a01      	ldrh	r1, [r0, #16]
 8013af4:	4604      	mov	r4, r0
 8013af6:	8a40      	ldrh	r0, [r0, #18]
 8013af8:	4615      	mov	r5, r2
 8013afa:	461e      	mov	r6, r3
 8013afc:	f000 f8a2 	bl	8013c44 <uxr_seq_num_cmp>
 8013b00:	2800      	cmp	r0, #0
 8013b02:	db07      	blt.n	8013b14 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8013b04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013b08:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013b0c:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8013b10:	2000      	movs	r0, #0
 8013b12:	bd70      	pop	{r4, r5, r6, pc}
 8013b14:	f894 0020 	ldrb.w	r0, [r4, #32]
 8013b18:	b940      	cbnz	r0, 8013b2c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8013b1a:	2301      	movs	r3, #1
 8013b1c:	f884 3020 	strb.w	r3, [r4, #32]
 8013b20:	3564      	adds	r5, #100	@ 0x64
 8013b22:	f146 0600 	adc.w	r6, r6, #0
 8013b26:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8013b2a:	bd70      	pop	{r4, r5, r6, pc}
 8013b2c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8013b30:	4295      	cmp	r5, r2
 8013b32:	eb76 0303 	sbcs.w	r3, r6, r3
 8013b36:	bfa5      	ittet	ge
 8013b38:	3001      	addge	r0, #1
 8013b3a:	f884 0020 	strbge.w	r0, [r4, #32]
 8013b3e:	2000      	movlt	r0, #0
 8013b40:	2001      	movge	r0, #1
 8013b42:	e7ed      	b.n	8013b20 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08013b44 <uxr_begin_output_nack_buffer_it>:
 8013b44:	8a40      	ldrh	r0, [r0, #18]
 8013b46:	4770      	bx	lr

08013b48 <uxr_next_reliable_nack_buffer_to_send>:
 8013b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b4c:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8013b50:	b082      	sub	sp, #8
 8013b52:	f1b8 0f00 	cmp.w	r8, #0
 8013b56:	d011      	beq.n	8013b7c <uxr_next_reliable_nack_buffer_to_send+0x34>
 8013b58:	4604      	mov	r4, r0
 8013b5a:	8818      	ldrh	r0, [r3, #0]
 8013b5c:	460e      	mov	r6, r1
 8013b5e:	4617      	mov	r7, r2
 8013b60:	461d      	mov	r5, r3
 8013b62:	2101      	movs	r1, #1
 8013b64:	f000 f866 	bl	8013c34 <uxr_seq_num_add>
 8013b68:	8028      	strh	r0, [r5, #0]
 8013b6a:	8a21      	ldrh	r1, [r4, #16]
 8013b6c:	f000 f86a 	bl	8013c44 <uxr_seq_num_cmp>
 8013b70:	2800      	cmp	r0, #0
 8013b72:	dd07      	ble.n	8013b84 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8013b74:	f04f 0800 	mov.w	r8, #0
 8013b78:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8013b7c:	4640      	mov	r0, r8
 8013b7e:	b002      	add	sp, #8
 8013b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b84:	8921      	ldrh	r1, [r4, #8]
 8013b86:	8828      	ldrh	r0, [r5, #0]
 8013b88:	6823      	ldr	r3, [r4, #0]
 8013b8a:	fbb0 f2f1 	udiv	r2, r0, r1
 8013b8e:	fb01 0c12 	mls	ip, r1, r2, r0
 8013b92:	fa1f f28c 	uxth.w	r2, ip
 8013b96:	9301      	str	r3, [sp, #4]
 8013b98:	6863      	ldr	r3, [r4, #4]
 8013b9a:	fbb3 fcf1 	udiv	ip, r3, r1
 8013b9e:	9b01      	ldr	r3, [sp, #4]
 8013ba0:	fb02 fc0c 	mul.w	ip, r2, ip
 8013ba4:	f10c 0c04 	add.w	ip, ip, #4
 8013ba8:	4463      	add	r3, ip
 8013baa:	6033      	str	r3, [r6, #0]
 8013bac:	6823      	ldr	r3, [r4, #0]
 8013bae:	4463      	add	r3, ip
 8013bb0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8013bb4:	603b      	str	r3, [r7, #0]
 8013bb6:	7b22      	ldrb	r2, [r4, #12]
 8013bb8:	429a      	cmp	r2, r3
 8013bba:	d0d2      	beq.n	8013b62 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8013bbc:	4640      	mov	r0, r8
 8013bbe:	b002      	add	sp, #8
 8013bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013bc4 <uxr_process_acknack>:
 8013bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bc6:	4604      	mov	r4, r0
 8013bc8:	460e      	mov	r6, r1
 8013bca:	4610      	mov	r0, r2
 8013bcc:	2101      	movs	r1, #1
 8013bce:	f000 f835 	bl	8013c3c <uxr_seq_num_sub>
 8013bd2:	8a61      	ldrh	r1, [r4, #18]
 8013bd4:	f000 f832 	bl	8013c3c <uxr_seq_num_sub>
 8013bd8:	b1c0      	cbz	r0, 8013c0c <uxr_process_acknack+0x48>
 8013bda:	4605      	mov	r5, r0
 8013bdc:	2700      	movs	r7, #0
 8013bde:	2101      	movs	r1, #1
 8013be0:	8a60      	ldrh	r0, [r4, #18]
 8013be2:	f000 f827 	bl	8013c34 <uxr_seq_num_add>
 8013be6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8013bea:	fbb0 f1fc 	udiv	r1, r0, ip
 8013bee:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013bf2:	fb0c 0111 	mls	r1, ip, r1, r0
 8013bf6:	b289      	uxth	r1, r1
 8013bf8:	3701      	adds	r7, #1
 8013bfa:	fbb3 f3fc 	udiv	r3, r3, ip
 8013bfe:	fb01 f303 	mul.w	r3, r1, r3
 8013c02:	42bd      	cmp	r5, r7
 8013c04:	7b21      	ldrb	r1, [r4, #12]
 8013c06:	8260      	strh	r0, [r4, #18]
 8013c08:	50d1      	str	r1, [r2, r3]
 8013c0a:	d1e8      	bne.n	8013bde <uxr_process_acknack+0x1a>
 8013c0c:	3e00      	subs	r6, #0
 8013c0e:	f04f 0300 	mov.w	r3, #0
 8013c12:	bf18      	it	ne
 8013c14:	2601      	movne	r6, #1
 8013c16:	f884 3020 	strb.w	r3, [r4, #32]
 8013c1a:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8013c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013c20 <uxr_is_output_up_to_date>:
 8013c20:	8a01      	ldrh	r1, [r0, #16]
 8013c22:	8a40      	ldrh	r0, [r0, #18]
 8013c24:	b508      	push	{r3, lr}
 8013c26:	f000 f80d 	bl	8013c44 <uxr_seq_num_cmp>
 8013c2a:	fab0 f080 	clz	r0, r0
 8013c2e:	0940      	lsrs	r0, r0, #5
 8013c30:	bd08      	pop	{r3, pc}
 8013c32:	bf00      	nop

08013c34 <uxr_seq_num_add>:
 8013c34:	4408      	add	r0, r1
 8013c36:	b280      	uxth	r0, r0
 8013c38:	4770      	bx	lr
 8013c3a:	bf00      	nop

08013c3c <uxr_seq_num_sub>:
 8013c3c:	1a40      	subs	r0, r0, r1
 8013c3e:	b280      	uxth	r0, r0
 8013c40:	4770      	bx	lr
 8013c42:	bf00      	nop

08013c44 <uxr_seq_num_cmp>:
 8013c44:	4288      	cmp	r0, r1
 8013c46:	d011      	beq.n	8013c6c <uxr_seq_num_cmp+0x28>
 8013c48:	d309      	bcc.n	8013c5e <uxr_seq_num_cmp+0x1a>
 8013c4a:	4288      	cmp	r0, r1
 8013c4c:	d910      	bls.n	8013c70 <uxr_seq_num_cmp+0x2c>
 8013c4e:	1a40      	subs	r0, r0, r1
 8013c50:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8013c54:	bfd4      	ite	le
 8013c56:	2001      	movle	r0, #1
 8013c58:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8013c5c:	4770      	bx	lr
 8013c5e:	1a0b      	subs	r3, r1, r0
 8013c60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013c64:	daf1      	bge.n	8013c4a <uxr_seq_num_cmp+0x6>
 8013c66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013c6a:	4770      	bx	lr
 8013c6c:	2000      	movs	r0, #0
 8013c6e:	4770      	bx	lr
 8013c70:	2001      	movs	r0, #1
 8013c72:	4770      	bx	lr

08013c74 <uxr_prepare_output_stream>:
 8013c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c76:	b087      	sub	sp, #28
 8013c78:	2707      	movs	r7, #7
 8013c7a:	9202      	str	r2, [sp, #8]
 8013c7c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013c7e:	9103      	str	r1, [sp, #12]
 8013c80:	2500      	movs	r5, #0
 8013c82:	3204      	adds	r2, #4
 8013c84:	e9cd 7500 	strd	r7, r5, [sp]
 8013c88:	461c      	mov	r4, r3
 8013c8a:	4606      	mov	r6, r0
 8013c8c:	f7f8 fffe 	bl	800cc8c <uxr_prepare_stream_to_write_submessage>
 8013c90:	f080 0201 	eor.w	r2, r0, #1
 8013c94:	b2d2      	uxtb	r2, r2
 8013c96:	75a2      	strb	r2, [r4, #22]
 8013c98:	b112      	cbz	r2, 8013ca0 <uxr_prepare_output_stream+0x2c>
 8013c9a:	4628      	mov	r0, r5
 8013c9c:	b007      	add	sp, #28
 8013c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ca0:	aa05      	add	r2, sp, #20
 8013ca2:	9902      	ldr	r1, [sp, #8]
 8013ca4:	4630      	mov	r0, r6
 8013ca6:	f7f9 f927 	bl	800cef8 <uxr_init_base_object_request>
 8013caa:	a905      	add	r1, sp, #20
 8013cac:	4605      	mov	r5, r0
 8013cae:	4620      	mov	r0, r4
 8013cb0:	f7fa fd02 	bl	800e6b8 <uxr_serialize_WRITE_DATA_Payload_Data>
 8013cb4:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8013cb8:	69a6      	ldr	r6, [r4, #24]
 8013cba:	69e7      	ldr	r7, [r4, #28]
 8013cbc:	1a52      	subs	r2, r2, r1
 8013cbe:	4620      	mov	r0, r4
 8013cc0:	f7ff f9b0 	bl	8013024 <ucdr_init_buffer>
 8013cc4:	4620      	mov	r0, r4
 8013cc6:	463a      	mov	r2, r7
 8013cc8:	4631      	mov	r1, r6
 8013cca:	f7ff f97f 	bl	8012fcc <ucdr_set_on_full_buffer_callback>
 8013cce:	4628      	mov	r0, r5
 8013cd0:	b007      	add	sp, #28
 8013cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013cd4 <rcl_get_default_domain_id>:
 8013cd4:	b530      	push	{r4, r5, lr}
 8013cd6:	b083      	sub	sp, #12
 8013cd8:	2300      	movs	r3, #0
 8013cda:	9300      	str	r3, [sp, #0]
 8013cdc:	b1d0      	cbz	r0, 8013d14 <rcl_get_default_domain_id+0x40>
 8013cde:	4604      	mov	r4, r0
 8013ce0:	4669      	mov	r1, sp
 8013ce2:	4815      	ldr	r0, [pc, #84]	@ (8013d38 <rcl_get_default_domain_id+0x64>)
 8013ce4:	f7fd f958 	bl	8010f98 <rcutils_get_env>
 8013ce8:	4602      	mov	r2, r0
 8013cea:	b110      	cbz	r0, 8013cf2 <rcl_get_default_domain_id+0x1e>
 8013cec:	2001      	movs	r0, #1
 8013cee:	b003      	add	sp, #12
 8013cf0:	bd30      	pop	{r4, r5, pc}
 8013cf2:	9b00      	ldr	r3, [sp, #0]
 8013cf4:	b18b      	cbz	r3, 8013d1a <rcl_get_default_domain_id+0x46>
 8013cf6:	7818      	ldrb	r0, [r3, #0]
 8013cf8:	2800      	cmp	r0, #0
 8013cfa:	d0f8      	beq.n	8013cee <rcl_get_default_domain_id+0x1a>
 8013cfc:	a901      	add	r1, sp, #4
 8013cfe:	4618      	mov	r0, r3
 8013d00:	9201      	str	r2, [sp, #4]
 8013d02:	f000 fb49 	bl	8014398 <strtoul>
 8013d06:	4605      	mov	r5, r0
 8013d08:	b150      	cbz	r0, 8013d20 <rcl_get_default_domain_id+0x4c>
 8013d0a:	1c43      	adds	r3, r0, #1
 8013d0c:	d00d      	beq.n	8013d2a <rcl_get_default_domain_id+0x56>
 8013d0e:	6025      	str	r5, [r4, #0]
 8013d10:	2000      	movs	r0, #0
 8013d12:	e7ec      	b.n	8013cee <rcl_get_default_domain_id+0x1a>
 8013d14:	200b      	movs	r0, #11
 8013d16:	b003      	add	sp, #12
 8013d18:	bd30      	pop	{r4, r5, pc}
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	b003      	add	sp, #12
 8013d1e:	bd30      	pop	{r4, r5, pc}
 8013d20:	9b01      	ldr	r3, [sp, #4]
 8013d22:	781b      	ldrb	r3, [r3, #0]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d0f2      	beq.n	8013d0e <rcl_get_default_domain_id+0x3a>
 8013d28:	e7e0      	b.n	8013cec <rcl_get_default_domain_id+0x18>
 8013d2a:	f000 fdb3 	bl	8014894 <__errno>
 8013d2e:	6803      	ldr	r3, [r0, #0]
 8013d30:	2b22      	cmp	r3, #34	@ 0x22
 8013d32:	d1ec      	bne.n	8013d0e <rcl_get_default_domain_id+0x3a>
 8013d34:	e7da      	b.n	8013cec <rcl_get_default_domain_id+0x18>
 8013d36:	bf00      	nop
 8013d38:	08015fb0 	.word	0x08015fb0

08013d3c <rcl_get_zero_initialized_guard_condition>:
 8013d3c:	4a03      	ldr	r2, [pc, #12]	@ (8013d4c <rcl_get_zero_initialized_guard_condition+0x10>)
 8013d3e:	4603      	mov	r3, r0
 8013d40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013d44:	e883 0003 	stmia.w	r3, {r0, r1}
 8013d48:	4618      	mov	r0, r3
 8013d4a:	4770      	bx	lr
 8013d4c:	08015fc0 	.word	0x08015fc0

08013d50 <rcl_guard_condition_init_from_rmw>:
 8013d50:	b082      	sub	sp, #8
 8013d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d56:	b086      	sub	sp, #24
 8013d58:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8013d5c:	4604      	mov	r4, r0
 8013d5e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8013d62:	460e      	mov	r6, r1
 8013d64:	4617      	mov	r7, r2
 8013d66:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013d6a:	f10d 0e04 	add.w	lr, sp, #4
 8013d6e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013d72:	f8dc 3000 	ldr.w	r3, [ip]
 8013d76:	f8ce 3000 	str.w	r3, [lr]
 8013d7a:	a801      	add	r0, sp, #4
 8013d7c:	f7f6 fd42 	bl	800a804 <rcutils_allocator_is_valid>
 8013d80:	b350      	cbz	r0, 8013dd8 <rcl_guard_condition_init_from_rmw+0x88>
 8013d82:	b34c      	cbz	r4, 8013dd8 <rcl_guard_condition_init_from_rmw+0x88>
 8013d84:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8013d88:	f1b8 0f00 	cmp.w	r8, #0
 8013d8c:	d11e      	bne.n	8013dcc <rcl_guard_condition_init_from_rmw+0x7c>
 8013d8e:	b31f      	cbz	r7, 8013dd8 <rcl_guard_condition_init_from_rmw+0x88>
 8013d90:	4638      	mov	r0, r7
 8013d92:	f7fa fe29 	bl	800e9e8 <rcl_context_is_valid>
 8013d96:	b328      	cbz	r0, 8013de4 <rcl_guard_condition_init_from_rmw+0x94>
 8013d98:	9b01      	ldr	r3, [sp, #4]
 8013d9a:	9905      	ldr	r1, [sp, #20]
 8013d9c:	201c      	movs	r0, #28
 8013d9e:	4798      	blx	r3
 8013da0:	4605      	mov	r5, r0
 8013da2:	6060      	str	r0, [r4, #4]
 8013da4:	b358      	cbz	r0, 8013dfe <rcl_guard_condition_init_from_rmw+0xae>
 8013da6:	b1fe      	cbz	r6, 8013de8 <rcl_guard_condition_init_from_rmw+0x98>
 8013da8:	6006      	str	r6, [r0, #0]
 8013daa:	f880 8004 	strb.w	r8, [r0, #4]
 8013dae:	ac01      	add	r4, sp, #4
 8013db0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013db2:	f105 0c08 	add.w	ip, r5, #8
 8013db6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013dba:	6823      	ldr	r3, [r4, #0]
 8013dbc:	f8cc 3000 	str.w	r3, [ip]
 8013dc0:	2000      	movs	r0, #0
 8013dc2:	b006      	add	sp, #24
 8013dc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013dc8:	b002      	add	sp, #8
 8013dca:	4770      	bx	lr
 8013dcc:	2064      	movs	r0, #100	@ 0x64
 8013dce:	b006      	add	sp, #24
 8013dd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013dd4:	b002      	add	sp, #8
 8013dd6:	4770      	bx	lr
 8013dd8:	200b      	movs	r0, #11
 8013dda:	b006      	add	sp, #24
 8013ddc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013de0:	b002      	add	sp, #8
 8013de2:	4770      	bx	lr
 8013de4:	2065      	movs	r0, #101	@ 0x65
 8013de6:	e7f2      	b.n	8013dce <rcl_guard_condition_init_from_rmw+0x7e>
 8013de8:	6838      	ldr	r0, [r7, #0]
 8013dea:	3028      	adds	r0, #40	@ 0x28
 8013dec:	f000 f87a 	bl	8013ee4 <rmw_create_guard_condition>
 8013df0:	6028      	str	r0, [r5, #0]
 8013df2:	6865      	ldr	r5, [r4, #4]
 8013df4:	682e      	ldr	r6, [r5, #0]
 8013df6:	b126      	cbz	r6, 8013e02 <rcl_guard_condition_init_from_rmw+0xb2>
 8013df8:	2301      	movs	r3, #1
 8013dfa:	712b      	strb	r3, [r5, #4]
 8013dfc:	e7d7      	b.n	8013dae <rcl_guard_condition_init_from_rmw+0x5e>
 8013dfe:	200a      	movs	r0, #10
 8013e00:	e7e5      	b.n	8013dce <rcl_guard_condition_init_from_rmw+0x7e>
 8013e02:	4628      	mov	r0, r5
 8013e04:	9b02      	ldr	r3, [sp, #8]
 8013e06:	9905      	ldr	r1, [sp, #20]
 8013e08:	4798      	blx	r3
 8013e0a:	6066      	str	r6, [r4, #4]
 8013e0c:	2001      	movs	r0, #1
 8013e0e:	e7de      	b.n	8013dce <rcl_guard_condition_init_from_rmw+0x7e>

08013e10 <rcl_guard_condition_fini>:
 8013e10:	b570      	push	{r4, r5, r6, lr}
 8013e12:	b082      	sub	sp, #8
 8013e14:	b1f0      	cbz	r0, 8013e54 <rcl_guard_condition_fini+0x44>
 8013e16:	6843      	ldr	r3, [r0, #4]
 8013e18:	4604      	mov	r4, r0
 8013e1a:	b163      	cbz	r3, 8013e36 <rcl_guard_condition_fini+0x26>
 8013e1c:	6818      	ldr	r0, [r3, #0]
 8013e1e:	68de      	ldr	r6, [r3, #12]
 8013e20:	6999      	ldr	r1, [r3, #24]
 8013e22:	b160      	cbz	r0, 8013e3e <rcl_guard_condition_fini+0x2e>
 8013e24:	791d      	ldrb	r5, [r3, #4]
 8013e26:	b965      	cbnz	r5, 8013e42 <rcl_guard_condition_fini+0x32>
 8013e28:	4618      	mov	r0, r3
 8013e2a:	47b0      	blx	r6
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	4628      	mov	r0, r5
 8013e30:	6063      	str	r3, [r4, #4]
 8013e32:	b002      	add	sp, #8
 8013e34:	bd70      	pop	{r4, r5, r6, pc}
 8013e36:	461d      	mov	r5, r3
 8013e38:	4628      	mov	r0, r5
 8013e3a:	b002      	add	sp, #8
 8013e3c:	bd70      	pop	{r4, r5, r6, pc}
 8013e3e:	4605      	mov	r5, r0
 8013e40:	e7f2      	b.n	8013e28 <rcl_guard_condition_fini+0x18>
 8013e42:	9101      	str	r1, [sp, #4]
 8013e44:	f000 f862 	bl	8013f0c <rmw_destroy_guard_condition>
 8013e48:	1e05      	subs	r5, r0, #0
 8013e4a:	6863      	ldr	r3, [r4, #4]
 8013e4c:	9901      	ldr	r1, [sp, #4]
 8013e4e:	bf18      	it	ne
 8013e50:	2501      	movne	r5, #1
 8013e52:	e7e9      	b.n	8013e28 <rcl_guard_condition_fini+0x18>
 8013e54:	250b      	movs	r5, #11
 8013e56:	4628      	mov	r0, r5
 8013e58:	b002      	add	sp, #8
 8013e5a:	bd70      	pop	{r4, r5, r6, pc}

08013e5c <rcl_guard_condition_get_default_options>:
 8013e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e5e:	b087      	sub	sp, #28
 8013e60:	4606      	mov	r6, r0
 8013e62:	4668      	mov	r0, sp
 8013e64:	f7f6 fcc0 	bl	800a7e8 <rcutils_get_default_allocator>
 8013e68:	4b09      	ldr	r3, [pc, #36]	@ (8013e90 <rcl_guard_condition_get_default_options+0x34>)
 8013e6a:	46ee      	mov	lr, sp
 8013e6c:	469c      	mov	ip, r3
 8013e6e:	461d      	mov	r5, r3
 8013e70:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013e74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013e78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013e7a:	4634      	mov	r4, r6
 8013e7c:	f8de 7000 	ldr.w	r7, [lr]
 8013e80:	f8cc 7000 	str.w	r7, [ip]
 8013e84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013e86:	4630      	mov	r0, r6
 8013e88:	6027      	str	r7, [r4, #0]
 8013e8a:	b007      	add	sp, #28
 8013e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e8e:	bf00      	nop
 8013e90:	2000abd4 	.word	0x2000abd4

08013e94 <rcl_guard_condition_get_rmw_handle>:
 8013e94:	b110      	cbz	r0, 8013e9c <rcl_guard_condition_get_rmw_handle+0x8>
 8013e96:	6840      	ldr	r0, [r0, #4]
 8013e98:	b100      	cbz	r0, 8013e9c <rcl_guard_condition_get_rmw_handle+0x8>
 8013e9a:	6800      	ldr	r0, [r0, #0]
 8013e9c:	4770      	bx	lr
 8013e9e:	bf00      	nop

08013ea0 <rcl_publisher_is_valid>:
 8013ea0:	b1a0      	cbz	r0, 8013ecc <rcl_publisher_is_valid+0x2c>
 8013ea2:	6803      	ldr	r3, [r0, #0]
 8013ea4:	b510      	push	{r4, lr}
 8013ea6:	4604      	mov	r4, r0
 8013ea8:	b173      	cbz	r3, 8013ec8 <rcl_publisher_is_valid+0x28>
 8013eaa:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8013eae:	b15a      	cbz	r2, 8013ec8 <rcl_publisher_is_valid+0x28>
 8013eb0:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8013eb4:	f7fa fd98 	bl	800e9e8 <rcl_context_is_valid>
 8013eb8:	b130      	cbz	r0, 8013ec8 <rcl_publisher_is_valid+0x28>
 8013eba:	6823      	ldr	r3, [r4, #0]
 8013ebc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8013ec0:	3800      	subs	r0, #0
 8013ec2:	bf18      	it	ne
 8013ec4:	2001      	movne	r0, #1
 8013ec6:	bd10      	pop	{r4, pc}
 8013ec8:	2000      	movs	r0, #0
 8013eca:	bd10      	pop	{r4, pc}
 8013ecc:	2000      	movs	r0, #0
 8013ece:	4770      	bx	lr

08013ed0 <rcl_publisher_is_valid_except_context>:
 8013ed0:	b130      	cbz	r0, 8013ee0 <rcl_publisher_is_valid_except_context+0x10>
 8013ed2:	6800      	ldr	r0, [r0, #0]
 8013ed4:	b120      	cbz	r0, 8013ee0 <rcl_publisher_is_valid_except_context+0x10>
 8013ed6:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 8013eda:	3800      	subs	r0, #0
 8013edc:	bf18      	it	ne
 8013ede:	2001      	movne	r0, #1
 8013ee0:	4770      	bx	lr
 8013ee2:	bf00      	nop

08013ee4 <rmw_create_guard_condition>:
 8013ee4:	b538      	push	{r3, r4, r5, lr}
 8013ee6:	4605      	mov	r5, r0
 8013ee8:	4807      	ldr	r0, [pc, #28]	@ (8013f08 <rmw_create_guard_condition+0x24>)
 8013eea:	f7fd fbc9 	bl	8011680 <get_memory>
 8013eee:	b148      	cbz	r0, 8013f04 <rmw_create_guard_condition+0x20>
 8013ef0:	6884      	ldr	r4, [r0, #8]
 8013ef2:	2300      	movs	r3, #0
 8013ef4:	7423      	strb	r3, [r4, #16]
 8013ef6:	61e5      	str	r5, [r4, #28]
 8013ef8:	f7fd fc2a 	bl	8011750 <rmw_get_implementation_identifier>
 8013efc:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8013f00:	f104 0014 	add.w	r0, r4, #20
 8013f04:	bd38      	pop	{r3, r4, r5, pc}
 8013f06:	bf00      	nop
 8013f08:	2000ab14 	.word	0x2000ab14

08013f0c <rmw_destroy_guard_condition>:
 8013f0c:	b508      	push	{r3, lr}
 8013f0e:	4b08      	ldr	r3, [pc, #32]	@ (8013f30 <rmw_destroy_guard_condition+0x24>)
 8013f10:	6819      	ldr	r1, [r3, #0]
 8013f12:	b911      	cbnz	r1, 8013f1a <rmw_destroy_guard_condition+0xe>
 8013f14:	e00a      	b.n	8013f2c <rmw_destroy_guard_condition+0x20>
 8013f16:	6849      	ldr	r1, [r1, #4]
 8013f18:	b141      	cbz	r1, 8013f2c <rmw_destroy_guard_condition+0x20>
 8013f1a:	688b      	ldr	r3, [r1, #8]
 8013f1c:	3314      	adds	r3, #20
 8013f1e:	4298      	cmp	r0, r3
 8013f20:	d1f9      	bne.n	8013f16 <rmw_destroy_guard_condition+0xa>
 8013f22:	4803      	ldr	r0, [pc, #12]	@ (8013f30 <rmw_destroy_guard_condition+0x24>)
 8013f24:	f7fd fbbc 	bl	80116a0 <put_memory>
 8013f28:	2000      	movs	r0, #0
 8013f2a:	bd08      	pop	{r3, pc}
 8013f2c:	2001      	movs	r0, #1
 8013f2e:	bd08      	pop	{r3, pc}
 8013f30:	2000ab14 	.word	0x2000ab14

08013f34 <calloc>:
 8013f34:	4b02      	ldr	r3, [pc, #8]	@ (8013f40 <calloc+0xc>)
 8013f36:	460a      	mov	r2, r1
 8013f38:	4601      	mov	r1, r0
 8013f3a:	6818      	ldr	r0, [r3, #0]
 8013f3c:	f000 b802 	b.w	8013f44 <_calloc_r>
 8013f40:	20000034 	.word	0x20000034

08013f44 <_calloc_r>:
 8013f44:	b570      	push	{r4, r5, r6, lr}
 8013f46:	fba1 5402 	umull	r5, r4, r1, r2
 8013f4a:	b93c      	cbnz	r4, 8013f5c <_calloc_r+0x18>
 8013f4c:	4629      	mov	r1, r5
 8013f4e:	f000 f887 	bl	8014060 <_malloc_r>
 8013f52:	4606      	mov	r6, r0
 8013f54:	b928      	cbnz	r0, 8013f62 <_calloc_r+0x1e>
 8013f56:	2600      	movs	r6, #0
 8013f58:	4630      	mov	r0, r6
 8013f5a:	bd70      	pop	{r4, r5, r6, pc}
 8013f5c:	220c      	movs	r2, #12
 8013f5e:	6002      	str	r2, [r0, #0]
 8013f60:	e7f9      	b.n	8013f56 <_calloc_r+0x12>
 8013f62:	462a      	mov	r2, r5
 8013f64:	4621      	mov	r1, r4
 8013f66:	f000 fbcf 	bl	8014708 <memset>
 8013f6a:	e7f5      	b.n	8013f58 <_calloc_r+0x14>

08013f6c <getenv>:
 8013f6c:	b507      	push	{r0, r1, r2, lr}
 8013f6e:	4b04      	ldr	r3, [pc, #16]	@ (8013f80 <getenv+0x14>)
 8013f70:	4601      	mov	r1, r0
 8013f72:	aa01      	add	r2, sp, #4
 8013f74:	6818      	ldr	r0, [r3, #0]
 8013f76:	f000 f805 	bl	8013f84 <_findenv_r>
 8013f7a:	b003      	add	sp, #12
 8013f7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8013f80:	20000034 	.word	0x20000034

08013f84 <_findenv_r>:
 8013f84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f88:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8013ff8 <_findenv_r+0x74>
 8013f8c:	4606      	mov	r6, r0
 8013f8e:	4689      	mov	r9, r1
 8013f90:	4617      	mov	r7, r2
 8013f92:	f000 fcd9 	bl	8014948 <__env_lock>
 8013f96:	f8da 4000 	ldr.w	r4, [sl]
 8013f9a:	b134      	cbz	r4, 8013faa <_findenv_r+0x26>
 8013f9c:	464b      	mov	r3, r9
 8013f9e:	4698      	mov	r8, r3
 8013fa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013fa4:	b13a      	cbz	r2, 8013fb6 <_findenv_r+0x32>
 8013fa6:	2a3d      	cmp	r2, #61	@ 0x3d
 8013fa8:	d1f9      	bne.n	8013f9e <_findenv_r+0x1a>
 8013faa:	4630      	mov	r0, r6
 8013fac:	f000 fcd2 	bl	8014954 <__env_unlock>
 8013fb0:	2000      	movs	r0, #0
 8013fb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fb6:	eba8 0809 	sub.w	r8, r8, r9
 8013fba:	46a3      	mov	fp, r4
 8013fbc:	f854 0b04 	ldr.w	r0, [r4], #4
 8013fc0:	2800      	cmp	r0, #0
 8013fc2:	d0f2      	beq.n	8013faa <_findenv_r+0x26>
 8013fc4:	4642      	mov	r2, r8
 8013fc6:	4649      	mov	r1, r9
 8013fc8:	f000 fba6 	bl	8014718 <strncmp>
 8013fcc:	2800      	cmp	r0, #0
 8013fce:	d1f4      	bne.n	8013fba <_findenv_r+0x36>
 8013fd0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013fd4:	eb03 0508 	add.w	r5, r3, r8
 8013fd8:	f813 3008 	ldrb.w	r3, [r3, r8]
 8013fdc:	2b3d      	cmp	r3, #61	@ 0x3d
 8013fde:	d1ec      	bne.n	8013fba <_findenv_r+0x36>
 8013fe0:	f8da 3000 	ldr.w	r3, [sl]
 8013fe4:	ebab 0303 	sub.w	r3, fp, r3
 8013fe8:	109b      	asrs	r3, r3, #2
 8013fea:	4630      	mov	r0, r6
 8013fec:	603b      	str	r3, [r7, #0]
 8013fee:	f000 fcb1 	bl	8014954 <__env_unlock>
 8013ff2:	1c68      	adds	r0, r5, #1
 8013ff4:	e7dd      	b.n	8013fb2 <_findenv_r+0x2e>
 8013ff6:	bf00      	nop
 8013ff8:	20000000 	.word	0x20000000

08013ffc <malloc>:
 8013ffc:	4b02      	ldr	r3, [pc, #8]	@ (8014008 <malloc+0xc>)
 8013ffe:	4601      	mov	r1, r0
 8014000:	6818      	ldr	r0, [r3, #0]
 8014002:	f000 b82d 	b.w	8014060 <_malloc_r>
 8014006:	bf00      	nop
 8014008:	20000034 	.word	0x20000034

0801400c <free>:
 801400c:	4b02      	ldr	r3, [pc, #8]	@ (8014018 <free+0xc>)
 801400e:	4601      	mov	r1, r0
 8014010:	6818      	ldr	r0, [r3, #0]
 8014012:	f000 bca5 	b.w	8014960 <_free_r>
 8014016:	bf00      	nop
 8014018:	20000034 	.word	0x20000034

0801401c <sbrk_aligned>:
 801401c:	b570      	push	{r4, r5, r6, lr}
 801401e:	4e0f      	ldr	r6, [pc, #60]	@ (801405c <sbrk_aligned+0x40>)
 8014020:	460c      	mov	r4, r1
 8014022:	6831      	ldr	r1, [r6, #0]
 8014024:	4605      	mov	r5, r0
 8014026:	b911      	cbnz	r1, 801402e <sbrk_aligned+0x12>
 8014028:	f000 fc12 	bl	8014850 <_sbrk_r>
 801402c:	6030      	str	r0, [r6, #0]
 801402e:	4621      	mov	r1, r4
 8014030:	4628      	mov	r0, r5
 8014032:	f000 fc0d 	bl	8014850 <_sbrk_r>
 8014036:	1c43      	adds	r3, r0, #1
 8014038:	d103      	bne.n	8014042 <sbrk_aligned+0x26>
 801403a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801403e:	4620      	mov	r0, r4
 8014040:	bd70      	pop	{r4, r5, r6, pc}
 8014042:	1cc4      	adds	r4, r0, #3
 8014044:	f024 0403 	bic.w	r4, r4, #3
 8014048:	42a0      	cmp	r0, r4
 801404a:	d0f8      	beq.n	801403e <sbrk_aligned+0x22>
 801404c:	1a21      	subs	r1, r4, r0
 801404e:	4628      	mov	r0, r5
 8014050:	f000 fbfe 	bl	8014850 <_sbrk_r>
 8014054:	3001      	adds	r0, #1
 8014056:	d1f2      	bne.n	801403e <sbrk_aligned+0x22>
 8014058:	e7ef      	b.n	801403a <sbrk_aligned+0x1e>
 801405a:	bf00      	nop
 801405c:	2000abe8 	.word	0x2000abe8

08014060 <_malloc_r>:
 8014060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014064:	1ccd      	adds	r5, r1, #3
 8014066:	f025 0503 	bic.w	r5, r5, #3
 801406a:	3508      	adds	r5, #8
 801406c:	2d0c      	cmp	r5, #12
 801406e:	bf38      	it	cc
 8014070:	250c      	movcc	r5, #12
 8014072:	2d00      	cmp	r5, #0
 8014074:	4606      	mov	r6, r0
 8014076:	db01      	blt.n	801407c <_malloc_r+0x1c>
 8014078:	42a9      	cmp	r1, r5
 801407a:	d904      	bls.n	8014086 <_malloc_r+0x26>
 801407c:	230c      	movs	r3, #12
 801407e:	6033      	str	r3, [r6, #0]
 8014080:	2000      	movs	r0, #0
 8014082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014086:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801415c <_malloc_r+0xfc>
 801408a:	f000 f869 	bl	8014160 <__malloc_lock>
 801408e:	f8d8 3000 	ldr.w	r3, [r8]
 8014092:	461c      	mov	r4, r3
 8014094:	bb44      	cbnz	r4, 80140e8 <_malloc_r+0x88>
 8014096:	4629      	mov	r1, r5
 8014098:	4630      	mov	r0, r6
 801409a:	f7ff ffbf 	bl	801401c <sbrk_aligned>
 801409e:	1c43      	adds	r3, r0, #1
 80140a0:	4604      	mov	r4, r0
 80140a2:	d158      	bne.n	8014156 <_malloc_r+0xf6>
 80140a4:	f8d8 4000 	ldr.w	r4, [r8]
 80140a8:	4627      	mov	r7, r4
 80140aa:	2f00      	cmp	r7, #0
 80140ac:	d143      	bne.n	8014136 <_malloc_r+0xd6>
 80140ae:	2c00      	cmp	r4, #0
 80140b0:	d04b      	beq.n	801414a <_malloc_r+0xea>
 80140b2:	6823      	ldr	r3, [r4, #0]
 80140b4:	4639      	mov	r1, r7
 80140b6:	4630      	mov	r0, r6
 80140b8:	eb04 0903 	add.w	r9, r4, r3
 80140bc:	f000 fbc8 	bl	8014850 <_sbrk_r>
 80140c0:	4581      	cmp	r9, r0
 80140c2:	d142      	bne.n	801414a <_malloc_r+0xea>
 80140c4:	6821      	ldr	r1, [r4, #0]
 80140c6:	1a6d      	subs	r5, r5, r1
 80140c8:	4629      	mov	r1, r5
 80140ca:	4630      	mov	r0, r6
 80140cc:	f7ff ffa6 	bl	801401c <sbrk_aligned>
 80140d0:	3001      	adds	r0, #1
 80140d2:	d03a      	beq.n	801414a <_malloc_r+0xea>
 80140d4:	6823      	ldr	r3, [r4, #0]
 80140d6:	442b      	add	r3, r5
 80140d8:	6023      	str	r3, [r4, #0]
 80140da:	f8d8 3000 	ldr.w	r3, [r8]
 80140de:	685a      	ldr	r2, [r3, #4]
 80140e0:	bb62      	cbnz	r2, 801413c <_malloc_r+0xdc>
 80140e2:	f8c8 7000 	str.w	r7, [r8]
 80140e6:	e00f      	b.n	8014108 <_malloc_r+0xa8>
 80140e8:	6822      	ldr	r2, [r4, #0]
 80140ea:	1b52      	subs	r2, r2, r5
 80140ec:	d420      	bmi.n	8014130 <_malloc_r+0xd0>
 80140ee:	2a0b      	cmp	r2, #11
 80140f0:	d917      	bls.n	8014122 <_malloc_r+0xc2>
 80140f2:	1961      	adds	r1, r4, r5
 80140f4:	42a3      	cmp	r3, r4
 80140f6:	6025      	str	r5, [r4, #0]
 80140f8:	bf18      	it	ne
 80140fa:	6059      	strne	r1, [r3, #4]
 80140fc:	6863      	ldr	r3, [r4, #4]
 80140fe:	bf08      	it	eq
 8014100:	f8c8 1000 	streq.w	r1, [r8]
 8014104:	5162      	str	r2, [r4, r5]
 8014106:	604b      	str	r3, [r1, #4]
 8014108:	4630      	mov	r0, r6
 801410a:	f000 f82f 	bl	801416c <__malloc_unlock>
 801410e:	f104 000b 	add.w	r0, r4, #11
 8014112:	1d23      	adds	r3, r4, #4
 8014114:	f020 0007 	bic.w	r0, r0, #7
 8014118:	1ac2      	subs	r2, r0, r3
 801411a:	bf1c      	itt	ne
 801411c:	1a1b      	subne	r3, r3, r0
 801411e:	50a3      	strne	r3, [r4, r2]
 8014120:	e7af      	b.n	8014082 <_malloc_r+0x22>
 8014122:	6862      	ldr	r2, [r4, #4]
 8014124:	42a3      	cmp	r3, r4
 8014126:	bf0c      	ite	eq
 8014128:	f8c8 2000 	streq.w	r2, [r8]
 801412c:	605a      	strne	r2, [r3, #4]
 801412e:	e7eb      	b.n	8014108 <_malloc_r+0xa8>
 8014130:	4623      	mov	r3, r4
 8014132:	6864      	ldr	r4, [r4, #4]
 8014134:	e7ae      	b.n	8014094 <_malloc_r+0x34>
 8014136:	463c      	mov	r4, r7
 8014138:	687f      	ldr	r7, [r7, #4]
 801413a:	e7b6      	b.n	80140aa <_malloc_r+0x4a>
 801413c:	461a      	mov	r2, r3
 801413e:	685b      	ldr	r3, [r3, #4]
 8014140:	42a3      	cmp	r3, r4
 8014142:	d1fb      	bne.n	801413c <_malloc_r+0xdc>
 8014144:	2300      	movs	r3, #0
 8014146:	6053      	str	r3, [r2, #4]
 8014148:	e7de      	b.n	8014108 <_malloc_r+0xa8>
 801414a:	230c      	movs	r3, #12
 801414c:	6033      	str	r3, [r6, #0]
 801414e:	4630      	mov	r0, r6
 8014150:	f000 f80c 	bl	801416c <__malloc_unlock>
 8014154:	e794      	b.n	8014080 <_malloc_r+0x20>
 8014156:	6005      	str	r5, [r0, #0]
 8014158:	e7d6      	b.n	8014108 <_malloc_r+0xa8>
 801415a:	bf00      	nop
 801415c:	2000abec 	.word	0x2000abec

08014160 <__malloc_lock>:
 8014160:	4801      	ldr	r0, [pc, #4]	@ (8014168 <__malloc_lock+0x8>)
 8014162:	f000 bbc2 	b.w	80148ea <__retarget_lock_acquire_recursive>
 8014166:	bf00      	nop
 8014168:	2000ad31 	.word	0x2000ad31

0801416c <__malloc_unlock>:
 801416c:	4801      	ldr	r0, [pc, #4]	@ (8014174 <__malloc_unlock+0x8>)
 801416e:	f000 bbbd 	b.w	80148ec <__retarget_lock_release_recursive>
 8014172:	bf00      	nop
 8014174:	2000ad31 	.word	0x2000ad31

08014178 <srand>:
 8014178:	b538      	push	{r3, r4, r5, lr}
 801417a:	4b10      	ldr	r3, [pc, #64]	@ (80141bc <srand+0x44>)
 801417c:	681d      	ldr	r5, [r3, #0]
 801417e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014180:	4604      	mov	r4, r0
 8014182:	b9b3      	cbnz	r3, 80141b2 <srand+0x3a>
 8014184:	2018      	movs	r0, #24
 8014186:	f7ff ff39 	bl	8013ffc <malloc>
 801418a:	4602      	mov	r2, r0
 801418c:	6328      	str	r0, [r5, #48]	@ 0x30
 801418e:	b920      	cbnz	r0, 801419a <srand+0x22>
 8014190:	4b0b      	ldr	r3, [pc, #44]	@ (80141c0 <srand+0x48>)
 8014192:	480c      	ldr	r0, [pc, #48]	@ (80141c4 <srand+0x4c>)
 8014194:	2146      	movs	r1, #70	@ 0x46
 8014196:	f000 fbb9 	bl	801490c <__assert_func>
 801419a:	490b      	ldr	r1, [pc, #44]	@ (80141c8 <srand+0x50>)
 801419c:	4b0b      	ldr	r3, [pc, #44]	@ (80141cc <srand+0x54>)
 801419e:	e9c0 1300 	strd	r1, r3, [r0]
 80141a2:	4b0b      	ldr	r3, [pc, #44]	@ (80141d0 <srand+0x58>)
 80141a4:	6083      	str	r3, [r0, #8]
 80141a6:	230b      	movs	r3, #11
 80141a8:	8183      	strh	r3, [r0, #12]
 80141aa:	2100      	movs	r1, #0
 80141ac:	2001      	movs	r0, #1
 80141ae:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80141b2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80141b4:	2200      	movs	r2, #0
 80141b6:	611c      	str	r4, [r3, #16]
 80141b8:	615a      	str	r2, [r3, #20]
 80141ba:	bd38      	pop	{r3, r4, r5, pc}
 80141bc:	20000034 	.word	0x20000034
 80141c0:	08015fc8 	.word	0x08015fc8
 80141c4:	08015fdf 	.word	0x08015fdf
 80141c8:	abcd330e 	.word	0xabcd330e
 80141cc:	e66d1234 	.word	0xe66d1234
 80141d0:	0005deec 	.word	0x0005deec

080141d4 <rand>:
 80141d4:	4b16      	ldr	r3, [pc, #88]	@ (8014230 <rand+0x5c>)
 80141d6:	b510      	push	{r4, lr}
 80141d8:	681c      	ldr	r4, [r3, #0]
 80141da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80141dc:	b9b3      	cbnz	r3, 801420c <rand+0x38>
 80141de:	2018      	movs	r0, #24
 80141e0:	f7ff ff0c 	bl	8013ffc <malloc>
 80141e4:	4602      	mov	r2, r0
 80141e6:	6320      	str	r0, [r4, #48]	@ 0x30
 80141e8:	b920      	cbnz	r0, 80141f4 <rand+0x20>
 80141ea:	4b12      	ldr	r3, [pc, #72]	@ (8014234 <rand+0x60>)
 80141ec:	4812      	ldr	r0, [pc, #72]	@ (8014238 <rand+0x64>)
 80141ee:	2152      	movs	r1, #82	@ 0x52
 80141f0:	f000 fb8c 	bl	801490c <__assert_func>
 80141f4:	4911      	ldr	r1, [pc, #68]	@ (801423c <rand+0x68>)
 80141f6:	4b12      	ldr	r3, [pc, #72]	@ (8014240 <rand+0x6c>)
 80141f8:	e9c0 1300 	strd	r1, r3, [r0]
 80141fc:	4b11      	ldr	r3, [pc, #68]	@ (8014244 <rand+0x70>)
 80141fe:	6083      	str	r3, [r0, #8]
 8014200:	230b      	movs	r3, #11
 8014202:	8183      	strh	r3, [r0, #12]
 8014204:	2100      	movs	r1, #0
 8014206:	2001      	movs	r0, #1
 8014208:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801420c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801420e:	480e      	ldr	r0, [pc, #56]	@ (8014248 <rand+0x74>)
 8014210:	690b      	ldr	r3, [r1, #16]
 8014212:	694c      	ldr	r4, [r1, #20]
 8014214:	4a0d      	ldr	r2, [pc, #52]	@ (801424c <rand+0x78>)
 8014216:	4358      	muls	r0, r3
 8014218:	fb02 0004 	mla	r0, r2, r4, r0
 801421c:	fba3 3202 	umull	r3, r2, r3, r2
 8014220:	3301      	adds	r3, #1
 8014222:	eb40 0002 	adc.w	r0, r0, r2
 8014226:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801422a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801422e:	bd10      	pop	{r4, pc}
 8014230:	20000034 	.word	0x20000034
 8014234:	08015fc8 	.word	0x08015fc8
 8014238:	08015fdf 	.word	0x08015fdf
 801423c:	abcd330e 	.word	0xabcd330e
 8014240:	e66d1234 	.word	0xe66d1234
 8014244:	0005deec 	.word	0x0005deec
 8014248:	5851f42d 	.word	0x5851f42d
 801424c:	4c957f2d 	.word	0x4c957f2d

08014250 <realloc>:
 8014250:	4b02      	ldr	r3, [pc, #8]	@ (801425c <realloc+0xc>)
 8014252:	460a      	mov	r2, r1
 8014254:	4601      	mov	r1, r0
 8014256:	6818      	ldr	r0, [r3, #0]
 8014258:	f000 b802 	b.w	8014260 <_realloc_r>
 801425c:	20000034 	.word	0x20000034

08014260 <_realloc_r>:
 8014260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014264:	4680      	mov	r8, r0
 8014266:	4615      	mov	r5, r2
 8014268:	460c      	mov	r4, r1
 801426a:	b921      	cbnz	r1, 8014276 <_realloc_r+0x16>
 801426c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014270:	4611      	mov	r1, r2
 8014272:	f7ff bef5 	b.w	8014060 <_malloc_r>
 8014276:	b92a      	cbnz	r2, 8014284 <_realloc_r+0x24>
 8014278:	f000 fb72 	bl	8014960 <_free_r>
 801427c:	2400      	movs	r4, #0
 801427e:	4620      	mov	r0, r4
 8014280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014284:	f000 fbb6 	bl	80149f4 <_malloc_usable_size_r>
 8014288:	4285      	cmp	r5, r0
 801428a:	4606      	mov	r6, r0
 801428c:	d802      	bhi.n	8014294 <_realloc_r+0x34>
 801428e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8014292:	d8f4      	bhi.n	801427e <_realloc_r+0x1e>
 8014294:	4629      	mov	r1, r5
 8014296:	4640      	mov	r0, r8
 8014298:	f7ff fee2 	bl	8014060 <_malloc_r>
 801429c:	4607      	mov	r7, r0
 801429e:	2800      	cmp	r0, #0
 80142a0:	d0ec      	beq.n	801427c <_realloc_r+0x1c>
 80142a2:	42b5      	cmp	r5, r6
 80142a4:	462a      	mov	r2, r5
 80142a6:	4621      	mov	r1, r4
 80142a8:	bf28      	it	cs
 80142aa:	4632      	movcs	r2, r6
 80142ac:	f000 fb1f 	bl	80148ee <memcpy>
 80142b0:	4621      	mov	r1, r4
 80142b2:	4640      	mov	r0, r8
 80142b4:	f000 fb54 	bl	8014960 <_free_r>
 80142b8:	463c      	mov	r4, r7
 80142ba:	e7e0      	b.n	801427e <_realloc_r+0x1e>

080142bc <_strtoul_l.constprop.0>:
 80142bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80142c0:	4e34      	ldr	r6, [pc, #208]	@ (8014394 <_strtoul_l.constprop.0+0xd8>)
 80142c2:	4686      	mov	lr, r0
 80142c4:	460d      	mov	r5, r1
 80142c6:	4628      	mov	r0, r5
 80142c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80142cc:	5d37      	ldrb	r7, [r6, r4]
 80142ce:	f017 0708 	ands.w	r7, r7, #8
 80142d2:	d1f8      	bne.n	80142c6 <_strtoul_l.constprop.0+0xa>
 80142d4:	2c2d      	cmp	r4, #45	@ 0x2d
 80142d6:	d12f      	bne.n	8014338 <_strtoul_l.constprop.0+0x7c>
 80142d8:	782c      	ldrb	r4, [r5, #0]
 80142da:	2701      	movs	r7, #1
 80142dc:	1c85      	adds	r5, r0, #2
 80142de:	f033 0010 	bics.w	r0, r3, #16
 80142e2:	d109      	bne.n	80142f8 <_strtoul_l.constprop.0+0x3c>
 80142e4:	2c30      	cmp	r4, #48	@ 0x30
 80142e6:	d12c      	bne.n	8014342 <_strtoul_l.constprop.0+0x86>
 80142e8:	7828      	ldrb	r0, [r5, #0]
 80142ea:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80142ee:	2858      	cmp	r0, #88	@ 0x58
 80142f0:	d127      	bne.n	8014342 <_strtoul_l.constprop.0+0x86>
 80142f2:	786c      	ldrb	r4, [r5, #1]
 80142f4:	2310      	movs	r3, #16
 80142f6:	3502      	adds	r5, #2
 80142f8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80142fc:	2600      	movs	r6, #0
 80142fe:	fbb8 f8f3 	udiv	r8, r8, r3
 8014302:	fb03 f908 	mul.w	r9, r3, r8
 8014306:	ea6f 0909 	mvn.w	r9, r9
 801430a:	4630      	mov	r0, r6
 801430c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8014310:	f1bc 0f09 	cmp.w	ip, #9
 8014314:	d81c      	bhi.n	8014350 <_strtoul_l.constprop.0+0x94>
 8014316:	4664      	mov	r4, ip
 8014318:	42a3      	cmp	r3, r4
 801431a:	dd2a      	ble.n	8014372 <_strtoul_l.constprop.0+0xb6>
 801431c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8014320:	d007      	beq.n	8014332 <_strtoul_l.constprop.0+0x76>
 8014322:	4580      	cmp	r8, r0
 8014324:	d322      	bcc.n	801436c <_strtoul_l.constprop.0+0xb0>
 8014326:	d101      	bne.n	801432c <_strtoul_l.constprop.0+0x70>
 8014328:	45a1      	cmp	r9, r4
 801432a:	db1f      	blt.n	801436c <_strtoul_l.constprop.0+0xb0>
 801432c:	fb00 4003 	mla	r0, r0, r3, r4
 8014330:	2601      	movs	r6, #1
 8014332:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014336:	e7e9      	b.n	801430c <_strtoul_l.constprop.0+0x50>
 8014338:	2c2b      	cmp	r4, #43	@ 0x2b
 801433a:	bf04      	itt	eq
 801433c:	782c      	ldrbeq	r4, [r5, #0]
 801433e:	1c85      	addeq	r5, r0, #2
 8014340:	e7cd      	b.n	80142de <_strtoul_l.constprop.0+0x22>
 8014342:	2b00      	cmp	r3, #0
 8014344:	d1d8      	bne.n	80142f8 <_strtoul_l.constprop.0+0x3c>
 8014346:	2c30      	cmp	r4, #48	@ 0x30
 8014348:	bf0c      	ite	eq
 801434a:	2308      	moveq	r3, #8
 801434c:	230a      	movne	r3, #10
 801434e:	e7d3      	b.n	80142f8 <_strtoul_l.constprop.0+0x3c>
 8014350:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8014354:	f1bc 0f19 	cmp.w	ip, #25
 8014358:	d801      	bhi.n	801435e <_strtoul_l.constprop.0+0xa2>
 801435a:	3c37      	subs	r4, #55	@ 0x37
 801435c:	e7dc      	b.n	8014318 <_strtoul_l.constprop.0+0x5c>
 801435e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8014362:	f1bc 0f19 	cmp.w	ip, #25
 8014366:	d804      	bhi.n	8014372 <_strtoul_l.constprop.0+0xb6>
 8014368:	3c57      	subs	r4, #87	@ 0x57
 801436a:	e7d5      	b.n	8014318 <_strtoul_l.constprop.0+0x5c>
 801436c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8014370:	e7df      	b.n	8014332 <_strtoul_l.constprop.0+0x76>
 8014372:	1c73      	adds	r3, r6, #1
 8014374:	d106      	bne.n	8014384 <_strtoul_l.constprop.0+0xc8>
 8014376:	2322      	movs	r3, #34	@ 0x22
 8014378:	f8ce 3000 	str.w	r3, [lr]
 801437c:	4630      	mov	r0, r6
 801437e:	b932      	cbnz	r2, 801438e <_strtoul_l.constprop.0+0xd2>
 8014380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014384:	b107      	cbz	r7, 8014388 <_strtoul_l.constprop.0+0xcc>
 8014386:	4240      	negs	r0, r0
 8014388:	2a00      	cmp	r2, #0
 801438a:	d0f9      	beq.n	8014380 <_strtoul_l.constprop.0+0xc4>
 801438c:	b106      	cbz	r6, 8014390 <_strtoul_l.constprop.0+0xd4>
 801438e:	1e69      	subs	r1, r5, #1
 8014390:	6011      	str	r1, [r2, #0]
 8014392:	e7f5      	b.n	8014380 <_strtoul_l.constprop.0+0xc4>
 8014394:	08016038 	.word	0x08016038

08014398 <strtoul>:
 8014398:	4613      	mov	r3, r2
 801439a:	460a      	mov	r2, r1
 801439c:	4601      	mov	r1, r0
 801439e:	4802      	ldr	r0, [pc, #8]	@ (80143a8 <strtoul+0x10>)
 80143a0:	6800      	ldr	r0, [r0, #0]
 80143a2:	f7ff bf8b 	b.w	80142bc <_strtoul_l.constprop.0>
 80143a6:	bf00      	nop
 80143a8:	20000034 	.word	0x20000034

080143ac <std>:
 80143ac:	2300      	movs	r3, #0
 80143ae:	b510      	push	{r4, lr}
 80143b0:	4604      	mov	r4, r0
 80143b2:	e9c0 3300 	strd	r3, r3, [r0]
 80143b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80143ba:	6083      	str	r3, [r0, #8]
 80143bc:	8181      	strh	r1, [r0, #12]
 80143be:	6643      	str	r3, [r0, #100]	@ 0x64
 80143c0:	81c2      	strh	r2, [r0, #14]
 80143c2:	6183      	str	r3, [r0, #24]
 80143c4:	4619      	mov	r1, r3
 80143c6:	2208      	movs	r2, #8
 80143c8:	305c      	adds	r0, #92	@ 0x5c
 80143ca:	f000 f99d 	bl	8014708 <memset>
 80143ce:	4b0d      	ldr	r3, [pc, #52]	@ (8014404 <std+0x58>)
 80143d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80143d2:	4b0d      	ldr	r3, [pc, #52]	@ (8014408 <std+0x5c>)
 80143d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80143d6:	4b0d      	ldr	r3, [pc, #52]	@ (801440c <std+0x60>)
 80143d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80143da:	4b0d      	ldr	r3, [pc, #52]	@ (8014410 <std+0x64>)
 80143dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80143de:	4b0d      	ldr	r3, [pc, #52]	@ (8014414 <std+0x68>)
 80143e0:	6224      	str	r4, [r4, #32]
 80143e2:	429c      	cmp	r4, r3
 80143e4:	d006      	beq.n	80143f4 <std+0x48>
 80143e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80143ea:	4294      	cmp	r4, r2
 80143ec:	d002      	beq.n	80143f4 <std+0x48>
 80143ee:	33d0      	adds	r3, #208	@ 0xd0
 80143f0:	429c      	cmp	r4, r3
 80143f2:	d105      	bne.n	8014400 <std+0x54>
 80143f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80143f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80143fc:	f000 ba74 	b.w	80148e8 <__retarget_lock_init_recursive>
 8014400:	bd10      	pop	{r4, pc}
 8014402:	bf00      	nop
 8014404:	080145bd 	.word	0x080145bd
 8014408:	080145df 	.word	0x080145df
 801440c:	08014617 	.word	0x08014617
 8014410:	0801463b 	.word	0x0801463b
 8014414:	2000abf0 	.word	0x2000abf0

08014418 <stdio_exit_handler>:
 8014418:	4a02      	ldr	r2, [pc, #8]	@ (8014424 <stdio_exit_handler+0xc>)
 801441a:	4903      	ldr	r1, [pc, #12]	@ (8014428 <stdio_exit_handler+0x10>)
 801441c:	4803      	ldr	r0, [pc, #12]	@ (801442c <stdio_exit_handler+0x14>)
 801441e:	f000 b869 	b.w	80144f4 <_fwalk_sglue>
 8014422:	bf00      	nop
 8014424:	20000028 	.word	0x20000028
 8014428:	0801535d 	.word	0x0801535d
 801442c:	20000038 	.word	0x20000038

08014430 <cleanup_stdio>:
 8014430:	6841      	ldr	r1, [r0, #4]
 8014432:	4b0c      	ldr	r3, [pc, #48]	@ (8014464 <cleanup_stdio+0x34>)
 8014434:	4299      	cmp	r1, r3
 8014436:	b510      	push	{r4, lr}
 8014438:	4604      	mov	r4, r0
 801443a:	d001      	beq.n	8014440 <cleanup_stdio+0x10>
 801443c:	f000 ff8e 	bl	801535c <_fflush_r>
 8014440:	68a1      	ldr	r1, [r4, #8]
 8014442:	4b09      	ldr	r3, [pc, #36]	@ (8014468 <cleanup_stdio+0x38>)
 8014444:	4299      	cmp	r1, r3
 8014446:	d002      	beq.n	801444e <cleanup_stdio+0x1e>
 8014448:	4620      	mov	r0, r4
 801444a:	f000 ff87 	bl	801535c <_fflush_r>
 801444e:	68e1      	ldr	r1, [r4, #12]
 8014450:	4b06      	ldr	r3, [pc, #24]	@ (801446c <cleanup_stdio+0x3c>)
 8014452:	4299      	cmp	r1, r3
 8014454:	d004      	beq.n	8014460 <cleanup_stdio+0x30>
 8014456:	4620      	mov	r0, r4
 8014458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801445c:	f000 bf7e 	b.w	801535c <_fflush_r>
 8014460:	bd10      	pop	{r4, pc}
 8014462:	bf00      	nop
 8014464:	2000abf0 	.word	0x2000abf0
 8014468:	2000ac58 	.word	0x2000ac58
 801446c:	2000acc0 	.word	0x2000acc0

08014470 <global_stdio_init.part.0>:
 8014470:	b510      	push	{r4, lr}
 8014472:	4b0b      	ldr	r3, [pc, #44]	@ (80144a0 <global_stdio_init.part.0+0x30>)
 8014474:	4c0b      	ldr	r4, [pc, #44]	@ (80144a4 <global_stdio_init.part.0+0x34>)
 8014476:	4a0c      	ldr	r2, [pc, #48]	@ (80144a8 <global_stdio_init.part.0+0x38>)
 8014478:	601a      	str	r2, [r3, #0]
 801447a:	4620      	mov	r0, r4
 801447c:	2200      	movs	r2, #0
 801447e:	2104      	movs	r1, #4
 8014480:	f7ff ff94 	bl	80143ac <std>
 8014484:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014488:	2201      	movs	r2, #1
 801448a:	2109      	movs	r1, #9
 801448c:	f7ff ff8e 	bl	80143ac <std>
 8014490:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014494:	2202      	movs	r2, #2
 8014496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801449a:	2112      	movs	r1, #18
 801449c:	f7ff bf86 	b.w	80143ac <std>
 80144a0:	2000ad28 	.word	0x2000ad28
 80144a4:	2000abf0 	.word	0x2000abf0
 80144a8:	08014419 	.word	0x08014419

080144ac <__sfp_lock_acquire>:
 80144ac:	4801      	ldr	r0, [pc, #4]	@ (80144b4 <__sfp_lock_acquire+0x8>)
 80144ae:	f000 ba1c 	b.w	80148ea <__retarget_lock_acquire_recursive>
 80144b2:	bf00      	nop
 80144b4:	2000ad32 	.word	0x2000ad32

080144b8 <__sfp_lock_release>:
 80144b8:	4801      	ldr	r0, [pc, #4]	@ (80144c0 <__sfp_lock_release+0x8>)
 80144ba:	f000 ba17 	b.w	80148ec <__retarget_lock_release_recursive>
 80144be:	bf00      	nop
 80144c0:	2000ad32 	.word	0x2000ad32

080144c4 <__sinit>:
 80144c4:	b510      	push	{r4, lr}
 80144c6:	4604      	mov	r4, r0
 80144c8:	f7ff fff0 	bl	80144ac <__sfp_lock_acquire>
 80144cc:	6a23      	ldr	r3, [r4, #32]
 80144ce:	b11b      	cbz	r3, 80144d8 <__sinit+0x14>
 80144d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80144d4:	f7ff bff0 	b.w	80144b8 <__sfp_lock_release>
 80144d8:	4b04      	ldr	r3, [pc, #16]	@ (80144ec <__sinit+0x28>)
 80144da:	6223      	str	r3, [r4, #32]
 80144dc:	4b04      	ldr	r3, [pc, #16]	@ (80144f0 <__sinit+0x2c>)
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d1f5      	bne.n	80144d0 <__sinit+0xc>
 80144e4:	f7ff ffc4 	bl	8014470 <global_stdio_init.part.0>
 80144e8:	e7f2      	b.n	80144d0 <__sinit+0xc>
 80144ea:	bf00      	nop
 80144ec:	08014431 	.word	0x08014431
 80144f0:	2000ad28 	.word	0x2000ad28

080144f4 <_fwalk_sglue>:
 80144f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80144f8:	4607      	mov	r7, r0
 80144fa:	4688      	mov	r8, r1
 80144fc:	4614      	mov	r4, r2
 80144fe:	2600      	movs	r6, #0
 8014500:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014504:	f1b9 0901 	subs.w	r9, r9, #1
 8014508:	d505      	bpl.n	8014516 <_fwalk_sglue+0x22>
 801450a:	6824      	ldr	r4, [r4, #0]
 801450c:	2c00      	cmp	r4, #0
 801450e:	d1f7      	bne.n	8014500 <_fwalk_sglue+0xc>
 8014510:	4630      	mov	r0, r6
 8014512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014516:	89ab      	ldrh	r3, [r5, #12]
 8014518:	2b01      	cmp	r3, #1
 801451a:	d907      	bls.n	801452c <_fwalk_sglue+0x38>
 801451c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014520:	3301      	adds	r3, #1
 8014522:	d003      	beq.n	801452c <_fwalk_sglue+0x38>
 8014524:	4629      	mov	r1, r5
 8014526:	4638      	mov	r0, r7
 8014528:	47c0      	blx	r8
 801452a:	4306      	orrs	r6, r0
 801452c:	3568      	adds	r5, #104	@ 0x68
 801452e:	e7e9      	b.n	8014504 <_fwalk_sglue+0x10>

08014530 <iprintf>:
 8014530:	b40f      	push	{r0, r1, r2, r3}
 8014532:	b507      	push	{r0, r1, r2, lr}
 8014534:	4906      	ldr	r1, [pc, #24]	@ (8014550 <iprintf+0x20>)
 8014536:	ab04      	add	r3, sp, #16
 8014538:	6808      	ldr	r0, [r1, #0]
 801453a:	f853 2b04 	ldr.w	r2, [r3], #4
 801453e:	6881      	ldr	r1, [r0, #8]
 8014540:	9301      	str	r3, [sp, #4]
 8014542:	f000 fbe1 	bl	8014d08 <_vfiprintf_r>
 8014546:	b003      	add	sp, #12
 8014548:	f85d eb04 	ldr.w	lr, [sp], #4
 801454c:	b004      	add	sp, #16
 801454e:	4770      	bx	lr
 8014550:	20000034 	.word	0x20000034

08014554 <sniprintf>:
 8014554:	b40c      	push	{r2, r3}
 8014556:	b530      	push	{r4, r5, lr}
 8014558:	4b17      	ldr	r3, [pc, #92]	@ (80145b8 <sniprintf+0x64>)
 801455a:	1e0c      	subs	r4, r1, #0
 801455c:	681d      	ldr	r5, [r3, #0]
 801455e:	b09d      	sub	sp, #116	@ 0x74
 8014560:	da08      	bge.n	8014574 <sniprintf+0x20>
 8014562:	238b      	movs	r3, #139	@ 0x8b
 8014564:	602b      	str	r3, [r5, #0]
 8014566:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801456a:	b01d      	add	sp, #116	@ 0x74
 801456c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014570:	b002      	add	sp, #8
 8014572:	4770      	bx	lr
 8014574:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8014578:	f8ad 3014 	strh.w	r3, [sp, #20]
 801457c:	bf14      	ite	ne
 801457e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8014582:	4623      	moveq	r3, r4
 8014584:	9304      	str	r3, [sp, #16]
 8014586:	9307      	str	r3, [sp, #28]
 8014588:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801458c:	9002      	str	r0, [sp, #8]
 801458e:	9006      	str	r0, [sp, #24]
 8014590:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014594:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8014596:	ab21      	add	r3, sp, #132	@ 0x84
 8014598:	a902      	add	r1, sp, #8
 801459a:	4628      	mov	r0, r5
 801459c:	9301      	str	r3, [sp, #4]
 801459e:	f000 fa8d 	bl	8014abc <_svfiprintf_r>
 80145a2:	1c43      	adds	r3, r0, #1
 80145a4:	bfbc      	itt	lt
 80145a6:	238b      	movlt	r3, #139	@ 0x8b
 80145a8:	602b      	strlt	r3, [r5, #0]
 80145aa:	2c00      	cmp	r4, #0
 80145ac:	d0dd      	beq.n	801456a <sniprintf+0x16>
 80145ae:	9b02      	ldr	r3, [sp, #8]
 80145b0:	2200      	movs	r2, #0
 80145b2:	701a      	strb	r2, [r3, #0]
 80145b4:	e7d9      	b.n	801456a <sniprintf+0x16>
 80145b6:	bf00      	nop
 80145b8:	20000034 	.word	0x20000034

080145bc <__sread>:
 80145bc:	b510      	push	{r4, lr}
 80145be:	460c      	mov	r4, r1
 80145c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145c4:	f000 f932 	bl	801482c <_read_r>
 80145c8:	2800      	cmp	r0, #0
 80145ca:	bfab      	itete	ge
 80145cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80145ce:	89a3      	ldrhlt	r3, [r4, #12]
 80145d0:	181b      	addge	r3, r3, r0
 80145d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80145d6:	bfac      	ite	ge
 80145d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80145da:	81a3      	strhlt	r3, [r4, #12]
 80145dc:	bd10      	pop	{r4, pc}

080145de <__swrite>:
 80145de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145e2:	461f      	mov	r7, r3
 80145e4:	898b      	ldrh	r3, [r1, #12]
 80145e6:	05db      	lsls	r3, r3, #23
 80145e8:	4605      	mov	r5, r0
 80145ea:	460c      	mov	r4, r1
 80145ec:	4616      	mov	r6, r2
 80145ee:	d505      	bpl.n	80145fc <__swrite+0x1e>
 80145f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145f4:	2302      	movs	r3, #2
 80145f6:	2200      	movs	r2, #0
 80145f8:	f000 f906 	bl	8014808 <_lseek_r>
 80145fc:	89a3      	ldrh	r3, [r4, #12]
 80145fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014602:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014606:	81a3      	strh	r3, [r4, #12]
 8014608:	4632      	mov	r2, r6
 801460a:	463b      	mov	r3, r7
 801460c:	4628      	mov	r0, r5
 801460e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014612:	f000 b92d 	b.w	8014870 <_write_r>

08014616 <__sseek>:
 8014616:	b510      	push	{r4, lr}
 8014618:	460c      	mov	r4, r1
 801461a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801461e:	f000 f8f3 	bl	8014808 <_lseek_r>
 8014622:	1c43      	adds	r3, r0, #1
 8014624:	89a3      	ldrh	r3, [r4, #12]
 8014626:	bf15      	itete	ne
 8014628:	6560      	strne	r0, [r4, #84]	@ 0x54
 801462a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801462e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014632:	81a3      	strheq	r3, [r4, #12]
 8014634:	bf18      	it	ne
 8014636:	81a3      	strhne	r3, [r4, #12]
 8014638:	bd10      	pop	{r4, pc}

0801463a <__sclose>:
 801463a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801463e:	f000 b87d 	b.w	801473c <_close_r>

08014642 <_vsniprintf_r>:
 8014642:	b530      	push	{r4, r5, lr}
 8014644:	4614      	mov	r4, r2
 8014646:	2c00      	cmp	r4, #0
 8014648:	b09b      	sub	sp, #108	@ 0x6c
 801464a:	4605      	mov	r5, r0
 801464c:	461a      	mov	r2, r3
 801464e:	da05      	bge.n	801465c <_vsniprintf_r+0x1a>
 8014650:	238b      	movs	r3, #139	@ 0x8b
 8014652:	6003      	str	r3, [r0, #0]
 8014654:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014658:	b01b      	add	sp, #108	@ 0x6c
 801465a:	bd30      	pop	{r4, r5, pc}
 801465c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8014660:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014664:	bf14      	ite	ne
 8014666:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801466a:	4623      	moveq	r3, r4
 801466c:	9302      	str	r3, [sp, #8]
 801466e:	9305      	str	r3, [sp, #20]
 8014670:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014674:	9100      	str	r1, [sp, #0]
 8014676:	9104      	str	r1, [sp, #16]
 8014678:	f8ad 300e 	strh.w	r3, [sp, #14]
 801467c:	4669      	mov	r1, sp
 801467e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8014680:	f000 fa1c 	bl	8014abc <_svfiprintf_r>
 8014684:	1c43      	adds	r3, r0, #1
 8014686:	bfbc      	itt	lt
 8014688:	238b      	movlt	r3, #139	@ 0x8b
 801468a:	602b      	strlt	r3, [r5, #0]
 801468c:	2c00      	cmp	r4, #0
 801468e:	d0e3      	beq.n	8014658 <_vsniprintf_r+0x16>
 8014690:	9b00      	ldr	r3, [sp, #0]
 8014692:	2200      	movs	r2, #0
 8014694:	701a      	strb	r2, [r3, #0]
 8014696:	e7df      	b.n	8014658 <_vsniprintf_r+0x16>

08014698 <vsniprintf>:
 8014698:	b507      	push	{r0, r1, r2, lr}
 801469a:	9300      	str	r3, [sp, #0]
 801469c:	4613      	mov	r3, r2
 801469e:	460a      	mov	r2, r1
 80146a0:	4601      	mov	r1, r0
 80146a2:	4803      	ldr	r0, [pc, #12]	@ (80146b0 <vsniprintf+0x18>)
 80146a4:	6800      	ldr	r0, [r0, #0]
 80146a6:	f7ff ffcc 	bl	8014642 <_vsniprintf_r>
 80146aa:	b003      	add	sp, #12
 80146ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80146b0:	20000034 	.word	0x20000034

080146b4 <memcmp>:
 80146b4:	b510      	push	{r4, lr}
 80146b6:	3901      	subs	r1, #1
 80146b8:	4402      	add	r2, r0
 80146ba:	4290      	cmp	r0, r2
 80146bc:	d101      	bne.n	80146c2 <memcmp+0xe>
 80146be:	2000      	movs	r0, #0
 80146c0:	e005      	b.n	80146ce <memcmp+0x1a>
 80146c2:	7803      	ldrb	r3, [r0, #0]
 80146c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80146c8:	42a3      	cmp	r3, r4
 80146ca:	d001      	beq.n	80146d0 <memcmp+0x1c>
 80146cc:	1b18      	subs	r0, r3, r4
 80146ce:	bd10      	pop	{r4, pc}
 80146d0:	3001      	adds	r0, #1
 80146d2:	e7f2      	b.n	80146ba <memcmp+0x6>

080146d4 <memmove>:
 80146d4:	4288      	cmp	r0, r1
 80146d6:	b510      	push	{r4, lr}
 80146d8:	eb01 0402 	add.w	r4, r1, r2
 80146dc:	d902      	bls.n	80146e4 <memmove+0x10>
 80146de:	4284      	cmp	r4, r0
 80146e0:	4623      	mov	r3, r4
 80146e2:	d807      	bhi.n	80146f4 <memmove+0x20>
 80146e4:	1e43      	subs	r3, r0, #1
 80146e6:	42a1      	cmp	r1, r4
 80146e8:	d008      	beq.n	80146fc <memmove+0x28>
 80146ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80146ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80146f2:	e7f8      	b.n	80146e6 <memmove+0x12>
 80146f4:	4402      	add	r2, r0
 80146f6:	4601      	mov	r1, r0
 80146f8:	428a      	cmp	r2, r1
 80146fa:	d100      	bne.n	80146fe <memmove+0x2a>
 80146fc:	bd10      	pop	{r4, pc}
 80146fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014702:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014706:	e7f7      	b.n	80146f8 <memmove+0x24>

08014708 <memset>:
 8014708:	4402      	add	r2, r0
 801470a:	4603      	mov	r3, r0
 801470c:	4293      	cmp	r3, r2
 801470e:	d100      	bne.n	8014712 <memset+0xa>
 8014710:	4770      	bx	lr
 8014712:	f803 1b01 	strb.w	r1, [r3], #1
 8014716:	e7f9      	b.n	801470c <memset+0x4>

08014718 <strncmp>:
 8014718:	b510      	push	{r4, lr}
 801471a:	b16a      	cbz	r2, 8014738 <strncmp+0x20>
 801471c:	3901      	subs	r1, #1
 801471e:	1884      	adds	r4, r0, r2
 8014720:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014724:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014728:	429a      	cmp	r2, r3
 801472a:	d103      	bne.n	8014734 <strncmp+0x1c>
 801472c:	42a0      	cmp	r0, r4
 801472e:	d001      	beq.n	8014734 <strncmp+0x1c>
 8014730:	2a00      	cmp	r2, #0
 8014732:	d1f5      	bne.n	8014720 <strncmp+0x8>
 8014734:	1ad0      	subs	r0, r2, r3
 8014736:	bd10      	pop	{r4, pc}
 8014738:	4610      	mov	r0, r2
 801473a:	e7fc      	b.n	8014736 <strncmp+0x1e>

0801473c <_close_r>:
 801473c:	b538      	push	{r3, r4, r5, lr}
 801473e:	4d06      	ldr	r5, [pc, #24]	@ (8014758 <_close_r+0x1c>)
 8014740:	2300      	movs	r3, #0
 8014742:	4604      	mov	r4, r0
 8014744:	4608      	mov	r0, r1
 8014746:	602b      	str	r3, [r5, #0]
 8014748:	f7ec ff78 	bl	800163c <_close>
 801474c:	1c43      	adds	r3, r0, #1
 801474e:	d102      	bne.n	8014756 <_close_r+0x1a>
 8014750:	682b      	ldr	r3, [r5, #0]
 8014752:	b103      	cbz	r3, 8014756 <_close_r+0x1a>
 8014754:	6023      	str	r3, [r4, #0]
 8014756:	bd38      	pop	{r3, r4, r5, pc}
 8014758:	2000ad2c 	.word	0x2000ad2c

0801475c <_reclaim_reent>:
 801475c:	4b29      	ldr	r3, [pc, #164]	@ (8014804 <_reclaim_reent+0xa8>)
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	4283      	cmp	r3, r0
 8014762:	b570      	push	{r4, r5, r6, lr}
 8014764:	4604      	mov	r4, r0
 8014766:	d04b      	beq.n	8014800 <_reclaim_reent+0xa4>
 8014768:	69c3      	ldr	r3, [r0, #28]
 801476a:	b1ab      	cbz	r3, 8014798 <_reclaim_reent+0x3c>
 801476c:	68db      	ldr	r3, [r3, #12]
 801476e:	b16b      	cbz	r3, 801478c <_reclaim_reent+0x30>
 8014770:	2500      	movs	r5, #0
 8014772:	69e3      	ldr	r3, [r4, #28]
 8014774:	68db      	ldr	r3, [r3, #12]
 8014776:	5959      	ldr	r1, [r3, r5]
 8014778:	2900      	cmp	r1, #0
 801477a:	d13b      	bne.n	80147f4 <_reclaim_reent+0x98>
 801477c:	3504      	adds	r5, #4
 801477e:	2d80      	cmp	r5, #128	@ 0x80
 8014780:	d1f7      	bne.n	8014772 <_reclaim_reent+0x16>
 8014782:	69e3      	ldr	r3, [r4, #28]
 8014784:	4620      	mov	r0, r4
 8014786:	68d9      	ldr	r1, [r3, #12]
 8014788:	f000 f8ea 	bl	8014960 <_free_r>
 801478c:	69e3      	ldr	r3, [r4, #28]
 801478e:	6819      	ldr	r1, [r3, #0]
 8014790:	b111      	cbz	r1, 8014798 <_reclaim_reent+0x3c>
 8014792:	4620      	mov	r0, r4
 8014794:	f000 f8e4 	bl	8014960 <_free_r>
 8014798:	6961      	ldr	r1, [r4, #20]
 801479a:	b111      	cbz	r1, 80147a2 <_reclaim_reent+0x46>
 801479c:	4620      	mov	r0, r4
 801479e:	f000 f8df 	bl	8014960 <_free_r>
 80147a2:	69e1      	ldr	r1, [r4, #28]
 80147a4:	b111      	cbz	r1, 80147ac <_reclaim_reent+0x50>
 80147a6:	4620      	mov	r0, r4
 80147a8:	f000 f8da 	bl	8014960 <_free_r>
 80147ac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80147ae:	b111      	cbz	r1, 80147b6 <_reclaim_reent+0x5a>
 80147b0:	4620      	mov	r0, r4
 80147b2:	f000 f8d5 	bl	8014960 <_free_r>
 80147b6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80147b8:	b111      	cbz	r1, 80147c0 <_reclaim_reent+0x64>
 80147ba:	4620      	mov	r0, r4
 80147bc:	f000 f8d0 	bl	8014960 <_free_r>
 80147c0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80147c2:	b111      	cbz	r1, 80147ca <_reclaim_reent+0x6e>
 80147c4:	4620      	mov	r0, r4
 80147c6:	f000 f8cb 	bl	8014960 <_free_r>
 80147ca:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80147cc:	b111      	cbz	r1, 80147d4 <_reclaim_reent+0x78>
 80147ce:	4620      	mov	r0, r4
 80147d0:	f000 f8c6 	bl	8014960 <_free_r>
 80147d4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80147d6:	b111      	cbz	r1, 80147de <_reclaim_reent+0x82>
 80147d8:	4620      	mov	r0, r4
 80147da:	f000 f8c1 	bl	8014960 <_free_r>
 80147de:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80147e0:	b111      	cbz	r1, 80147e8 <_reclaim_reent+0x8c>
 80147e2:	4620      	mov	r0, r4
 80147e4:	f000 f8bc 	bl	8014960 <_free_r>
 80147e8:	6a23      	ldr	r3, [r4, #32]
 80147ea:	b14b      	cbz	r3, 8014800 <_reclaim_reent+0xa4>
 80147ec:	4620      	mov	r0, r4
 80147ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80147f2:	4718      	bx	r3
 80147f4:	680e      	ldr	r6, [r1, #0]
 80147f6:	4620      	mov	r0, r4
 80147f8:	f000 f8b2 	bl	8014960 <_free_r>
 80147fc:	4631      	mov	r1, r6
 80147fe:	e7bb      	b.n	8014778 <_reclaim_reent+0x1c>
 8014800:	bd70      	pop	{r4, r5, r6, pc}
 8014802:	bf00      	nop
 8014804:	20000034 	.word	0x20000034

08014808 <_lseek_r>:
 8014808:	b538      	push	{r3, r4, r5, lr}
 801480a:	4d07      	ldr	r5, [pc, #28]	@ (8014828 <_lseek_r+0x20>)
 801480c:	4604      	mov	r4, r0
 801480e:	4608      	mov	r0, r1
 8014810:	4611      	mov	r1, r2
 8014812:	2200      	movs	r2, #0
 8014814:	602a      	str	r2, [r5, #0]
 8014816:	461a      	mov	r2, r3
 8014818:	f7ec ff37 	bl	800168a <_lseek>
 801481c:	1c43      	adds	r3, r0, #1
 801481e:	d102      	bne.n	8014826 <_lseek_r+0x1e>
 8014820:	682b      	ldr	r3, [r5, #0]
 8014822:	b103      	cbz	r3, 8014826 <_lseek_r+0x1e>
 8014824:	6023      	str	r3, [r4, #0]
 8014826:	bd38      	pop	{r3, r4, r5, pc}
 8014828:	2000ad2c 	.word	0x2000ad2c

0801482c <_read_r>:
 801482c:	b538      	push	{r3, r4, r5, lr}
 801482e:	4d07      	ldr	r5, [pc, #28]	@ (801484c <_read_r+0x20>)
 8014830:	4604      	mov	r4, r0
 8014832:	4608      	mov	r0, r1
 8014834:	4611      	mov	r1, r2
 8014836:	2200      	movs	r2, #0
 8014838:	602a      	str	r2, [r5, #0]
 801483a:	461a      	mov	r2, r3
 801483c:	f7ec fec5 	bl	80015ca <_read>
 8014840:	1c43      	adds	r3, r0, #1
 8014842:	d102      	bne.n	801484a <_read_r+0x1e>
 8014844:	682b      	ldr	r3, [r5, #0]
 8014846:	b103      	cbz	r3, 801484a <_read_r+0x1e>
 8014848:	6023      	str	r3, [r4, #0]
 801484a:	bd38      	pop	{r3, r4, r5, pc}
 801484c:	2000ad2c 	.word	0x2000ad2c

08014850 <_sbrk_r>:
 8014850:	b538      	push	{r3, r4, r5, lr}
 8014852:	4d06      	ldr	r5, [pc, #24]	@ (801486c <_sbrk_r+0x1c>)
 8014854:	2300      	movs	r3, #0
 8014856:	4604      	mov	r4, r0
 8014858:	4608      	mov	r0, r1
 801485a:	602b      	str	r3, [r5, #0]
 801485c:	f7ec ff22 	bl	80016a4 <_sbrk>
 8014860:	1c43      	adds	r3, r0, #1
 8014862:	d102      	bne.n	801486a <_sbrk_r+0x1a>
 8014864:	682b      	ldr	r3, [r5, #0]
 8014866:	b103      	cbz	r3, 801486a <_sbrk_r+0x1a>
 8014868:	6023      	str	r3, [r4, #0]
 801486a:	bd38      	pop	{r3, r4, r5, pc}
 801486c:	2000ad2c 	.word	0x2000ad2c

08014870 <_write_r>:
 8014870:	b538      	push	{r3, r4, r5, lr}
 8014872:	4d07      	ldr	r5, [pc, #28]	@ (8014890 <_write_r+0x20>)
 8014874:	4604      	mov	r4, r0
 8014876:	4608      	mov	r0, r1
 8014878:	4611      	mov	r1, r2
 801487a:	2200      	movs	r2, #0
 801487c:	602a      	str	r2, [r5, #0]
 801487e:	461a      	mov	r2, r3
 8014880:	f7ec fec0 	bl	8001604 <_write>
 8014884:	1c43      	adds	r3, r0, #1
 8014886:	d102      	bne.n	801488e <_write_r+0x1e>
 8014888:	682b      	ldr	r3, [r5, #0]
 801488a:	b103      	cbz	r3, 801488e <_write_r+0x1e>
 801488c:	6023      	str	r3, [r4, #0]
 801488e:	bd38      	pop	{r3, r4, r5, pc}
 8014890:	2000ad2c 	.word	0x2000ad2c

08014894 <__errno>:
 8014894:	4b01      	ldr	r3, [pc, #4]	@ (801489c <__errno+0x8>)
 8014896:	6818      	ldr	r0, [r3, #0]
 8014898:	4770      	bx	lr
 801489a:	bf00      	nop
 801489c:	20000034 	.word	0x20000034

080148a0 <__libc_init_array>:
 80148a0:	b570      	push	{r4, r5, r6, lr}
 80148a2:	4d0d      	ldr	r5, [pc, #52]	@ (80148d8 <__libc_init_array+0x38>)
 80148a4:	4c0d      	ldr	r4, [pc, #52]	@ (80148dc <__libc_init_array+0x3c>)
 80148a6:	1b64      	subs	r4, r4, r5
 80148a8:	10a4      	asrs	r4, r4, #2
 80148aa:	2600      	movs	r6, #0
 80148ac:	42a6      	cmp	r6, r4
 80148ae:	d109      	bne.n	80148c4 <__libc_init_array+0x24>
 80148b0:	4d0b      	ldr	r5, [pc, #44]	@ (80148e0 <__libc_init_array+0x40>)
 80148b2:	4c0c      	ldr	r4, [pc, #48]	@ (80148e4 <__libc_init_array+0x44>)
 80148b4:	f000 fef0 	bl	8015698 <_init>
 80148b8:	1b64      	subs	r4, r4, r5
 80148ba:	10a4      	asrs	r4, r4, #2
 80148bc:	2600      	movs	r6, #0
 80148be:	42a6      	cmp	r6, r4
 80148c0:	d105      	bne.n	80148ce <__libc_init_array+0x2e>
 80148c2:	bd70      	pop	{r4, r5, r6, pc}
 80148c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80148c8:	4798      	blx	r3
 80148ca:	3601      	adds	r6, #1
 80148cc:	e7ee      	b.n	80148ac <__libc_init_array+0xc>
 80148ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80148d2:	4798      	blx	r3
 80148d4:	3601      	adds	r6, #1
 80148d6:	e7f2      	b.n	80148be <__libc_init_array+0x1e>
 80148d8:	080161b0 	.word	0x080161b0
 80148dc:	080161b0 	.word	0x080161b0
 80148e0:	080161b0 	.word	0x080161b0
 80148e4:	080161b4 	.word	0x080161b4

080148e8 <__retarget_lock_init_recursive>:
 80148e8:	4770      	bx	lr

080148ea <__retarget_lock_acquire_recursive>:
 80148ea:	4770      	bx	lr

080148ec <__retarget_lock_release_recursive>:
 80148ec:	4770      	bx	lr

080148ee <memcpy>:
 80148ee:	440a      	add	r2, r1
 80148f0:	4291      	cmp	r1, r2
 80148f2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80148f6:	d100      	bne.n	80148fa <memcpy+0xc>
 80148f8:	4770      	bx	lr
 80148fa:	b510      	push	{r4, lr}
 80148fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014900:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014904:	4291      	cmp	r1, r2
 8014906:	d1f9      	bne.n	80148fc <memcpy+0xe>
 8014908:	bd10      	pop	{r4, pc}
	...

0801490c <__assert_func>:
 801490c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801490e:	4614      	mov	r4, r2
 8014910:	461a      	mov	r2, r3
 8014912:	4b09      	ldr	r3, [pc, #36]	@ (8014938 <__assert_func+0x2c>)
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	4605      	mov	r5, r0
 8014918:	68d8      	ldr	r0, [r3, #12]
 801491a:	b954      	cbnz	r4, 8014932 <__assert_func+0x26>
 801491c:	4b07      	ldr	r3, [pc, #28]	@ (801493c <__assert_func+0x30>)
 801491e:	461c      	mov	r4, r3
 8014920:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014924:	9100      	str	r1, [sp, #0]
 8014926:	462b      	mov	r3, r5
 8014928:	4905      	ldr	r1, [pc, #20]	@ (8014940 <__assert_func+0x34>)
 801492a:	f000 fd3f 	bl	80153ac <fiprintf>
 801492e:	f000 fde3 	bl	80154f8 <abort>
 8014932:	4b04      	ldr	r3, [pc, #16]	@ (8014944 <__assert_func+0x38>)
 8014934:	e7f4      	b.n	8014920 <__assert_func+0x14>
 8014936:	bf00      	nop
 8014938:	20000034 	.word	0x20000034
 801493c:	08016173 	.word	0x08016173
 8014940:	08016145 	.word	0x08016145
 8014944:	08016138 	.word	0x08016138

08014948 <__env_lock>:
 8014948:	4801      	ldr	r0, [pc, #4]	@ (8014950 <__env_lock+0x8>)
 801494a:	f7ff bfce 	b.w	80148ea <__retarget_lock_acquire_recursive>
 801494e:	bf00      	nop
 8014950:	2000ad30 	.word	0x2000ad30

08014954 <__env_unlock>:
 8014954:	4801      	ldr	r0, [pc, #4]	@ (801495c <__env_unlock+0x8>)
 8014956:	f7ff bfc9 	b.w	80148ec <__retarget_lock_release_recursive>
 801495a:	bf00      	nop
 801495c:	2000ad30 	.word	0x2000ad30

08014960 <_free_r>:
 8014960:	b538      	push	{r3, r4, r5, lr}
 8014962:	4605      	mov	r5, r0
 8014964:	2900      	cmp	r1, #0
 8014966:	d041      	beq.n	80149ec <_free_r+0x8c>
 8014968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801496c:	1f0c      	subs	r4, r1, #4
 801496e:	2b00      	cmp	r3, #0
 8014970:	bfb8      	it	lt
 8014972:	18e4      	addlt	r4, r4, r3
 8014974:	f7ff fbf4 	bl	8014160 <__malloc_lock>
 8014978:	4a1d      	ldr	r2, [pc, #116]	@ (80149f0 <_free_r+0x90>)
 801497a:	6813      	ldr	r3, [r2, #0]
 801497c:	b933      	cbnz	r3, 801498c <_free_r+0x2c>
 801497e:	6063      	str	r3, [r4, #4]
 8014980:	6014      	str	r4, [r2, #0]
 8014982:	4628      	mov	r0, r5
 8014984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014988:	f7ff bbf0 	b.w	801416c <__malloc_unlock>
 801498c:	42a3      	cmp	r3, r4
 801498e:	d908      	bls.n	80149a2 <_free_r+0x42>
 8014990:	6820      	ldr	r0, [r4, #0]
 8014992:	1821      	adds	r1, r4, r0
 8014994:	428b      	cmp	r3, r1
 8014996:	bf01      	itttt	eq
 8014998:	6819      	ldreq	r1, [r3, #0]
 801499a:	685b      	ldreq	r3, [r3, #4]
 801499c:	1809      	addeq	r1, r1, r0
 801499e:	6021      	streq	r1, [r4, #0]
 80149a0:	e7ed      	b.n	801497e <_free_r+0x1e>
 80149a2:	461a      	mov	r2, r3
 80149a4:	685b      	ldr	r3, [r3, #4]
 80149a6:	b10b      	cbz	r3, 80149ac <_free_r+0x4c>
 80149a8:	42a3      	cmp	r3, r4
 80149aa:	d9fa      	bls.n	80149a2 <_free_r+0x42>
 80149ac:	6811      	ldr	r1, [r2, #0]
 80149ae:	1850      	adds	r0, r2, r1
 80149b0:	42a0      	cmp	r0, r4
 80149b2:	d10b      	bne.n	80149cc <_free_r+0x6c>
 80149b4:	6820      	ldr	r0, [r4, #0]
 80149b6:	4401      	add	r1, r0
 80149b8:	1850      	adds	r0, r2, r1
 80149ba:	4283      	cmp	r3, r0
 80149bc:	6011      	str	r1, [r2, #0]
 80149be:	d1e0      	bne.n	8014982 <_free_r+0x22>
 80149c0:	6818      	ldr	r0, [r3, #0]
 80149c2:	685b      	ldr	r3, [r3, #4]
 80149c4:	6053      	str	r3, [r2, #4]
 80149c6:	4408      	add	r0, r1
 80149c8:	6010      	str	r0, [r2, #0]
 80149ca:	e7da      	b.n	8014982 <_free_r+0x22>
 80149cc:	d902      	bls.n	80149d4 <_free_r+0x74>
 80149ce:	230c      	movs	r3, #12
 80149d0:	602b      	str	r3, [r5, #0]
 80149d2:	e7d6      	b.n	8014982 <_free_r+0x22>
 80149d4:	6820      	ldr	r0, [r4, #0]
 80149d6:	1821      	adds	r1, r4, r0
 80149d8:	428b      	cmp	r3, r1
 80149da:	bf04      	itt	eq
 80149dc:	6819      	ldreq	r1, [r3, #0]
 80149de:	685b      	ldreq	r3, [r3, #4]
 80149e0:	6063      	str	r3, [r4, #4]
 80149e2:	bf04      	itt	eq
 80149e4:	1809      	addeq	r1, r1, r0
 80149e6:	6021      	streq	r1, [r4, #0]
 80149e8:	6054      	str	r4, [r2, #4]
 80149ea:	e7ca      	b.n	8014982 <_free_r+0x22>
 80149ec:	bd38      	pop	{r3, r4, r5, pc}
 80149ee:	bf00      	nop
 80149f0:	2000abec 	.word	0x2000abec

080149f4 <_malloc_usable_size_r>:
 80149f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80149f8:	1f18      	subs	r0, r3, #4
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	bfbc      	itt	lt
 80149fe:	580b      	ldrlt	r3, [r1, r0]
 8014a00:	18c0      	addlt	r0, r0, r3
 8014a02:	4770      	bx	lr

08014a04 <__ssputs_r>:
 8014a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a08:	688e      	ldr	r6, [r1, #8]
 8014a0a:	461f      	mov	r7, r3
 8014a0c:	42be      	cmp	r6, r7
 8014a0e:	680b      	ldr	r3, [r1, #0]
 8014a10:	4682      	mov	sl, r0
 8014a12:	460c      	mov	r4, r1
 8014a14:	4690      	mov	r8, r2
 8014a16:	d82d      	bhi.n	8014a74 <__ssputs_r+0x70>
 8014a18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014a1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014a20:	d026      	beq.n	8014a70 <__ssputs_r+0x6c>
 8014a22:	6965      	ldr	r5, [r4, #20]
 8014a24:	6909      	ldr	r1, [r1, #16]
 8014a26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014a2a:	eba3 0901 	sub.w	r9, r3, r1
 8014a2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014a32:	1c7b      	adds	r3, r7, #1
 8014a34:	444b      	add	r3, r9
 8014a36:	106d      	asrs	r5, r5, #1
 8014a38:	429d      	cmp	r5, r3
 8014a3a:	bf38      	it	cc
 8014a3c:	461d      	movcc	r5, r3
 8014a3e:	0553      	lsls	r3, r2, #21
 8014a40:	d527      	bpl.n	8014a92 <__ssputs_r+0x8e>
 8014a42:	4629      	mov	r1, r5
 8014a44:	f7ff fb0c 	bl	8014060 <_malloc_r>
 8014a48:	4606      	mov	r6, r0
 8014a4a:	b360      	cbz	r0, 8014aa6 <__ssputs_r+0xa2>
 8014a4c:	6921      	ldr	r1, [r4, #16]
 8014a4e:	464a      	mov	r2, r9
 8014a50:	f7ff ff4d 	bl	80148ee <memcpy>
 8014a54:	89a3      	ldrh	r3, [r4, #12]
 8014a56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8014a5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014a5e:	81a3      	strh	r3, [r4, #12]
 8014a60:	6126      	str	r6, [r4, #16]
 8014a62:	6165      	str	r5, [r4, #20]
 8014a64:	444e      	add	r6, r9
 8014a66:	eba5 0509 	sub.w	r5, r5, r9
 8014a6a:	6026      	str	r6, [r4, #0]
 8014a6c:	60a5      	str	r5, [r4, #8]
 8014a6e:	463e      	mov	r6, r7
 8014a70:	42be      	cmp	r6, r7
 8014a72:	d900      	bls.n	8014a76 <__ssputs_r+0x72>
 8014a74:	463e      	mov	r6, r7
 8014a76:	6820      	ldr	r0, [r4, #0]
 8014a78:	4632      	mov	r2, r6
 8014a7a:	4641      	mov	r1, r8
 8014a7c:	f7ff fe2a 	bl	80146d4 <memmove>
 8014a80:	68a3      	ldr	r3, [r4, #8]
 8014a82:	1b9b      	subs	r3, r3, r6
 8014a84:	60a3      	str	r3, [r4, #8]
 8014a86:	6823      	ldr	r3, [r4, #0]
 8014a88:	4433      	add	r3, r6
 8014a8a:	6023      	str	r3, [r4, #0]
 8014a8c:	2000      	movs	r0, #0
 8014a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a92:	462a      	mov	r2, r5
 8014a94:	f7ff fbe4 	bl	8014260 <_realloc_r>
 8014a98:	4606      	mov	r6, r0
 8014a9a:	2800      	cmp	r0, #0
 8014a9c:	d1e0      	bne.n	8014a60 <__ssputs_r+0x5c>
 8014a9e:	6921      	ldr	r1, [r4, #16]
 8014aa0:	4650      	mov	r0, sl
 8014aa2:	f7ff ff5d 	bl	8014960 <_free_r>
 8014aa6:	230c      	movs	r3, #12
 8014aa8:	f8ca 3000 	str.w	r3, [sl]
 8014aac:	89a3      	ldrh	r3, [r4, #12]
 8014aae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014ab2:	81a3      	strh	r3, [r4, #12]
 8014ab4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014ab8:	e7e9      	b.n	8014a8e <__ssputs_r+0x8a>
	...

08014abc <_svfiprintf_r>:
 8014abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ac0:	4698      	mov	r8, r3
 8014ac2:	898b      	ldrh	r3, [r1, #12]
 8014ac4:	061b      	lsls	r3, r3, #24
 8014ac6:	b09d      	sub	sp, #116	@ 0x74
 8014ac8:	4607      	mov	r7, r0
 8014aca:	460d      	mov	r5, r1
 8014acc:	4614      	mov	r4, r2
 8014ace:	d510      	bpl.n	8014af2 <_svfiprintf_r+0x36>
 8014ad0:	690b      	ldr	r3, [r1, #16]
 8014ad2:	b973      	cbnz	r3, 8014af2 <_svfiprintf_r+0x36>
 8014ad4:	2140      	movs	r1, #64	@ 0x40
 8014ad6:	f7ff fac3 	bl	8014060 <_malloc_r>
 8014ada:	6028      	str	r0, [r5, #0]
 8014adc:	6128      	str	r0, [r5, #16]
 8014ade:	b930      	cbnz	r0, 8014aee <_svfiprintf_r+0x32>
 8014ae0:	230c      	movs	r3, #12
 8014ae2:	603b      	str	r3, [r7, #0]
 8014ae4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014ae8:	b01d      	add	sp, #116	@ 0x74
 8014aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014aee:	2340      	movs	r3, #64	@ 0x40
 8014af0:	616b      	str	r3, [r5, #20]
 8014af2:	2300      	movs	r3, #0
 8014af4:	9309      	str	r3, [sp, #36]	@ 0x24
 8014af6:	2320      	movs	r3, #32
 8014af8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014afc:	f8cd 800c 	str.w	r8, [sp, #12]
 8014b00:	2330      	movs	r3, #48	@ 0x30
 8014b02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014ca0 <_svfiprintf_r+0x1e4>
 8014b06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014b0a:	f04f 0901 	mov.w	r9, #1
 8014b0e:	4623      	mov	r3, r4
 8014b10:	469a      	mov	sl, r3
 8014b12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014b16:	b10a      	cbz	r2, 8014b1c <_svfiprintf_r+0x60>
 8014b18:	2a25      	cmp	r2, #37	@ 0x25
 8014b1a:	d1f9      	bne.n	8014b10 <_svfiprintf_r+0x54>
 8014b1c:	ebba 0b04 	subs.w	fp, sl, r4
 8014b20:	d00b      	beq.n	8014b3a <_svfiprintf_r+0x7e>
 8014b22:	465b      	mov	r3, fp
 8014b24:	4622      	mov	r2, r4
 8014b26:	4629      	mov	r1, r5
 8014b28:	4638      	mov	r0, r7
 8014b2a:	f7ff ff6b 	bl	8014a04 <__ssputs_r>
 8014b2e:	3001      	adds	r0, #1
 8014b30:	f000 80a7 	beq.w	8014c82 <_svfiprintf_r+0x1c6>
 8014b34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014b36:	445a      	add	r2, fp
 8014b38:	9209      	str	r2, [sp, #36]	@ 0x24
 8014b3a:	f89a 3000 	ldrb.w	r3, [sl]
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	f000 809f 	beq.w	8014c82 <_svfiprintf_r+0x1c6>
 8014b44:	2300      	movs	r3, #0
 8014b46:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014b4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014b4e:	f10a 0a01 	add.w	sl, sl, #1
 8014b52:	9304      	str	r3, [sp, #16]
 8014b54:	9307      	str	r3, [sp, #28]
 8014b56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014b5a:	931a      	str	r3, [sp, #104]	@ 0x68
 8014b5c:	4654      	mov	r4, sl
 8014b5e:	2205      	movs	r2, #5
 8014b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b64:	484e      	ldr	r0, [pc, #312]	@ (8014ca0 <_svfiprintf_r+0x1e4>)
 8014b66:	f7eb fb73 	bl	8000250 <memchr>
 8014b6a:	9a04      	ldr	r2, [sp, #16]
 8014b6c:	b9d8      	cbnz	r0, 8014ba6 <_svfiprintf_r+0xea>
 8014b6e:	06d0      	lsls	r0, r2, #27
 8014b70:	bf44      	itt	mi
 8014b72:	2320      	movmi	r3, #32
 8014b74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014b78:	0711      	lsls	r1, r2, #28
 8014b7a:	bf44      	itt	mi
 8014b7c:	232b      	movmi	r3, #43	@ 0x2b
 8014b7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014b82:	f89a 3000 	ldrb.w	r3, [sl]
 8014b86:	2b2a      	cmp	r3, #42	@ 0x2a
 8014b88:	d015      	beq.n	8014bb6 <_svfiprintf_r+0xfa>
 8014b8a:	9a07      	ldr	r2, [sp, #28]
 8014b8c:	4654      	mov	r4, sl
 8014b8e:	2000      	movs	r0, #0
 8014b90:	f04f 0c0a 	mov.w	ip, #10
 8014b94:	4621      	mov	r1, r4
 8014b96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014b9a:	3b30      	subs	r3, #48	@ 0x30
 8014b9c:	2b09      	cmp	r3, #9
 8014b9e:	d94b      	bls.n	8014c38 <_svfiprintf_r+0x17c>
 8014ba0:	b1b0      	cbz	r0, 8014bd0 <_svfiprintf_r+0x114>
 8014ba2:	9207      	str	r2, [sp, #28]
 8014ba4:	e014      	b.n	8014bd0 <_svfiprintf_r+0x114>
 8014ba6:	eba0 0308 	sub.w	r3, r0, r8
 8014baa:	fa09 f303 	lsl.w	r3, r9, r3
 8014bae:	4313      	orrs	r3, r2
 8014bb0:	9304      	str	r3, [sp, #16]
 8014bb2:	46a2      	mov	sl, r4
 8014bb4:	e7d2      	b.n	8014b5c <_svfiprintf_r+0xa0>
 8014bb6:	9b03      	ldr	r3, [sp, #12]
 8014bb8:	1d19      	adds	r1, r3, #4
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	9103      	str	r1, [sp, #12]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	bfbb      	ittet	lt
 8014bc2:	425b      	neglt	r3, r3
 8014bc4:	f042 0202 	orrlt.w	r2, r2, #2
 8014bc8:	9307      	strge	r3, [sp, #28]
 8014bca:	9307      	strlt	r3, [sp, #28]
 8014bcc:	bfb8      	it	lt
 8014bce:	9204      	strlt	r2, [sp, #16]
 8014bd0:	7823      	ldrb	r3, [r4, #0]
 8014bd2:	2b2e      	cmp	r3, #46	@ 0x2e
 8014bd4:	d10a      	bne.n	8014bec <_svfiprintf_r+0x130>
 8014bd6:	7863      	ldrb	r3, [r4, #1]
 8014bd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8014bda:	d132      	bne.n	8014c42 <_svfiprintf_r+0x186>
 8014bdc:	9b03      	ldr	r3, [sp, #12]
 8014bde:	1d1a      	adds	r2, r3, #4
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	9203      	str	r2, [sp, #12]
 8014be4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014be8:	3402      	adds	r4, #2
 8014bea:	9305      	str	r3, [sp, #20]
 8014bec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014cb0 <_svfiprintf_r+0x1f4>
 8014bf0:	7821      	ldrb	r1, [r4, #0]
 8014bf2:	2203      	movs	r2, #3
 8014bf4:	4650      	mov	r0, sl
 8014bf6:	f7eb fb2b 	bl	8000250 <memchr>
 8014bfa:	b138      	cbz	r0, 8014c0c <_svfiprintf_r+0x150>
 8014bfc:	9b04      	ldr	r3, [sp, #16]
 8014bfe:	eba0 000a 	sub.w	r0, r0, sl
 8014c02:	2240      	movs	r2, #64	@ 0x40
 8014c04:	4082      	lsls	r2, r0
 8014c06:	4313      	orrs	r3, r2
 8014c08:	3401      	adds	r4, #1
 8014c0a:	9304      	str	r3, [sp, #16]
 8014c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c10:	4824      	ldr	r0, [pc, #144]	@ (8014ca4 <_svfiprintf_r+0x1e8>)
 8014c12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014c16:	2206      	movs	r2, #6
 8014c18:	f7eb fb1a 	bl	8000250 <memchr>
 8014c1c:	2800      	cmp	r0, #0
 8014c1e:	d036      	beq.n	8014c8e <_svfiprintf_r+0x1d2>
 8014c20:	4b21      	ldr	r3, [pc, #132]	@ (8014ca8 <_svfiprintf_r+0x1ec>)
 8014c22:	bb1b      	cbnz	r3, 8014c6c <_svfiprintf_r+0x1b0>
 8014c24:	9b03      	ldr	r3, [sp, #12]
 8014c26:	3307      	adds	r3, #7
 8014c28:	f023 0307 	bic.w	r3, r3, #7
 8014c2c:	3308      	adds	r3, #8
 8014c2e:	9303      	str	r3, [sp, #12]
 8014c30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c32:	4433      	add	r3, r6
 8014c34:	9309      	str	r3, [sp, #36]	@ 0x24
 8014c36:	e76a      	b.n	8014b0e <_svfiprintf_r+0x52>
 8014c38:	fb0c 3202 	mla	r2, ip, r2, r3
 8014c3c:	460c      	mov	r4, r1
 8014c3e:	2001      	movs	r0, #1
 8014c40:	e7a8      	b.n	8014b94 <_svfiprintf_r+0xd8>
 8014c42:	2300      	movs	r3, #0
 8014c44:	3401      	adds	r4, #1
 8014c46:	9305      	str	r3, [sp, #20]
 8014c48:	4619      	mov	r1, r3
 8014c4a:	f04f 0c0a 	mov.w	ip, #10
 8014c4e:	4620      	mov	r0, r4
 8014c50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014c54:	3a30      	subs	r2, #48	@ 0x30
 8014c56:	2a09      	cmp	r2, #9
 8014c58:	d903      	bls.n	8014c62 <_svfiprintf_r+0x1a6>
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d0c6      	beq.n	8014bec <_svfiprintf_r+0x130>
 8014c5e:	9105      	str	r1, [sp, #20]
 8014c60:	e7c4      	b.n	8014bec <_svfiprintf_r+0x130>
 8014c62:	fb0c 2101 	mla	r1, ip, r1, r2
 8014c66:	4604      	mov	r4, r0
 8014c68:	2301      	movs	r3, #1
 8014c6a:	e7f0      	b.n	8014c4e <_svfiprintf_r+0x192>
 8014c6c:	ab03      	add	r3, sp, #12
 8014c6e:	9300      	str	r3, [sp, #0]
 8014c70:	462a      	mov	r2, r5
 8014c72:	4b0e      	ldr	r3, [pc, #56]	@ (8014cac <_svfiprintf_r+0x1f0>)
 8014c74:	a904      	add	r1, sp, #16
 8014c76:	4638      	mov	r0, r7
 8014c78:	f3af 8000 	nop.w
 8014c7c:	1c42      	adds	r2, r0, #1
 8014c7e:	4606      	mov	r6, r0
 8014c80:	d1d6      	bne.n	8014c30 <_svfiprintf_r+0x174>
 8014c82:	89ab      	ldrh	r3, [r5, #12]
 8014c84:	065b      	lsls	r3, r3, #25
 8014c86:	f53f af2d 	bmi.w	8014ae4 <_svfiprintf_r+0x28>
 8014c8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014c8c:	e72c      	b.n	8014ae8 <_svfiprintf_r+0x2c>
 8014c8e:	ab03      	add	r3, sp, #12
 8014c90:	9300      	str	r3, [sp, #0]
 8014c92:	462a      	mov	r2, r5
 8014c94:	4b05      	ldr	r3, [pc, #20]	@ (8014cac <_svfiprintf_r+0x1f0>)
 8014c96:	a904      	add	r1, sp, #16
 8014c98:	4638      	mov	r0, r7
 8014c9a:	f000 f9bb 	bl	8015014 <_printf_i>
 8014c9e:	e7ed      	b.n	8014c7c <_svfiprintf_r+0x1c0>
 8014ca0:	08016174 	.word	0x08016174
 8014ca4:	0801617e 	.word	0x0801617e
 8014ca8:	00000000 	.word	0x00000000
 8014cac:	08014a05 	.word	0x08014a05
 8014cb0:	0801617a 	.word	0x0801617a

08014cb4 <__sfputc_r>:
 8014cb4:	6893      	ldr	r3, [r2, #8]
 8014cb6:	3b01      	subs	r3, #1
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	b410      	push	{r4}
 8014cbc:	6093      	str	r3, [r2, #8]
 8014cbe:	da08      	bge.n	8014cd2 <__sfputc_r+0x1e>
 8014cc0:	6994      	ldr	r4, [r2, #24]
 8014cc2:	42a3      	cmp	r3, r4
 8014cc4:	db01      	blt.n	8014cca <__sfputc_r+0x16>
 8014cc6:	290a      	cmp	r1, #10
 8014cc8:	d103      	bne.n	8014cd2 <__sfputc_r+0x1e>
 8014cca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014cce:	f000 bb7f 	b.w	80153d0 <__swbuf_r>
 8014cd2:	6813      	ldr	r3, [r2, #0]
 8014cd4:	1c58      	adds	r0, r3, #1
 8014cd6:	6010      	str	r0, [r2, #0]
 8014cd8:	7019      	strb	r1, [r3, #0]
 8014cda:	4608      	mov	r0, r1
 8014cdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ce0:	4770      	bx	lr

08014ce2 <__sfputs_r>:
 8014ce2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ce4:	4606      	mov	r6, r0
 8014ce6:	460f      	mov	r7, r1
 8014ce8:	4614      	mov	r4, r2
 8014cea:	18d5      	adds	r5, r2, r3
 8014cec:	42ac      	cmp	r4, r5
 8014cee:	d101      	bne.n	8014cf4 <__sfputs_r+0x12>
 8014cf0:	2000      	movs	r0, #0
 8014cf2:	e007      	b.n	8014d04 <__sfputs_r+0x22>
 8014cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014cf8:	463a      	mov	r2, r7
 8014cfa:	4630      	mov	r0, r6
 8014cfc:	f7ff ffda 	bl	8014cb4 <__sfputc_r>
 8014d00:	1c43      	adds	r3, r0, #1
 8014d02:	d1f3      	bne.n	8014cec <__sfputs_r+0xa>
 8014d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014d08 <_vfiprintf_r>:
 8014d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d0c:	460d      	mov	r5, r1
 8014d0e:	b09d      	sub	sp, #116	@ 0x74
 8014d10:	4614      	mov	r4, r2
 8014d12:	4698      	mov	r8, r3
 8014d14:	4606      	mov	r6, r0
 8014d16:	b118      	cbz	r0, 8014d20 <_vfiprintf_r+0x18>
 8014d18:	6a03      	ldr	r3, [r0, #32]
 8014d1a:	b90b      	cbnz	r3, 8014d20 <_vfiprintf_r+0x18>
 8014d1c:	f7ff fbd2 	bl	80144c4 <__sinit>
 8014d20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014d22:	07d9      	lsls	r1, r3, #31
 8014d24:	d405      	bmi.n	8014d32 <_vfiprintf_r+0x2a>
 8014d26:	89ab      	ldrh	r3, [r5, #12]
 8014d28:	059a      	lsls	r2, r3, #22
 8014d2a:	d402      	bmi.n	8014d32 <_vfiprintf_r+0x2a>
 8014d2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014d2e:	f7ff fddc 	bl	80148ea <__retarget_lock_acquire_recursive>
 8014d32:	89ab      	ldrh	r3, [r5, #12]
 8014d34:	071b      	lsls	r3, r3, #28
 8014d36:	d501      	bpl.n	8014d3c <_vfiprintf_r+0x34>
 8014d38:	692b      	ldr	r3, [r5, #16]
 8014d3a:	b99b      	cbnz	r3, 8014d64 <_vfiprintf_r+0x5c>
 8014d3c:	4629      	mov	r1, r5
 8014d3e:	4630      	mov	r0, r6
 8014d40:	f000 fb84 	bl	801544c <__swsetup_r>
 8014d44:	b170      	cbz	r0, 8014d64 <_vfiprintf_r+0x5c>
 8014d46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014d48:	07dc      	lsls	r4, r3, #31
 8014d4a:	d504      	bpl.n	8014d56 <_vfiprintf_r+0x4e>
 8014d4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014d50:	b01d      	add	sp, #116	@ 0x74
 8014d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d56:	89ab      	ldrh	r3, [r5, #12]
 8014d58:	0598      	lsls	r0, r3, #22
 8014d5a:	d4f7      	bmi.n	8014d4c <_vfiprintf_r+0x44>
 8014d5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014d5e:	f7ff fdc5 	bl	80148ec <__retarget_lock_release_recursive>
 8014d62:	e7f3      	b.n	8014d4c <_vfiprintf_r+0x44>
 8014d64:	2300      	movs	r3, #0
 8014d66:	9309      	str	r3, [sp, #36]	@ 0x24
 8014d68:	2320      	movs	r3, #32
 8014d6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014d6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014d72:	2330      	movs	r3, #48	@ 0x30
 8014d74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014f24 <_vfiprintf_r+0x21c>
 8014d78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014d7c:	f04f 0901 	mov.w	r9, #1
 8014d80:	4623      	mov	r3, r4
 8014d82:	469a      	mov	sl, r3
 8014d84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d88:	b10a      	cbz	r2, 8014d8e <_vfiprintf_r+0x86>
 8014d8a:	2a25      	cmp	r2, #37	@ 0x25
 8014d8c:	d1f9      	bne.n	8014d82 <_vfiprintf_r+0x7a>
 8014d8e:	ebba 0b04 	subs.w	fp, sl, r4
 8014d92:	d00b      	beq.n	8014dac <_vfiprintf_r+0xa4>
 8014d94:	465b      	mov	r3, fp
 8014d96:	4622      	mov	r2, r4
 8014d98:	4629      	mov	r1, r5
 8014d9a:	4630      	mov	r0, r6
 8014d9c:	f7ff ffa1 	bl	8014ce2 <__sfputs_r>
 8014da0:	3001      	adds	r0, #1
 8014da2:	f000 80a7 	beq.w	8014ef4 <_vfiprintf_r+0x1ec>
 8014da6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014da8:	445a      	add	r2, fp
 8014daa:	9209      	str	r2, [sp, #36]	@ 0x24
 8014dac:	f89a 3000 	ldrb.w	r3, [sl]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	f000 809f 	beq.w	8014ef4 <_vfiprintf_r+0x1ec>
 8014db6:	2300      	movs	r3, #0
 8014db8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014dbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014dc0:	f10a 0a01 	add.w	sl, sl, #1
 8014dc4:	9304      	str	r3, [sp, #16]
 8014dc6:	9307      	str	r3, [sp, #28]
 8014dc8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014dcc:	931a      	str	r3, [sp, #104]	@ 0x68
 8014dce:	4654      	mov	r4, sl
 8014dd0:	2205      	movs	r2, #5
 8014dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014dd6:	4853      	ldr	r0, [pc, #332]	@ (8014f24 <_vfiprintf_r+0x21c>)
 8014dd8:	f7eb fa3a 	bl	8000250 <memchr>
 8014ddc:	9a04      	ldr	r2, [sp, #16]
 8014dde:	b9d8      	cbnz	r0, 8014e18 <_vfiprintf_r+0x110>
 8014de0:	06d1      	lsls	r1, r2, #27
 8014de2:	bf44      	itt	mi
 8014de4:	2320      	movmi	r3, #32
 8014de6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014dea:	0713      	lsls	r3, r2, #28
 8014dec:	bf44      	itt	mi
 8014dee:	232b      	movmi	r3, #43	@ 0x2b
 8014df0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014df4:	f89a 3000 	ldrb.w	r3, [sl]
 8014df8:	2b2a      	cmp	r3, #42	@ 0x2a
 8014dfa:	d015      	beq.n	8014e28 <_vfiprintf_r+0x120>
 8014dfc:	9a07      	ldr	r2, [sp, #28]
 8014dfe:	4654      	mov	r4, sl
 8014e00:	2000      	movs	r0, #0
 8014e02:	f04f 0c0a 	mov.w	ip, #10
 8014e06:	4621      	mov	r1, r4
 8014e08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014e0c:	3b30      	subs	r3, #48	@ 0x30
 8014e0e:	2b09      	cmp	r3, #9
 8014e10:	d94b      	bls.n	8014eaa <_vfiprintf_r+0x1a2>
 8014e12:	b1b0      	cbz	r0, 8014e42 <_vfiprintf_r+0x13a>
 8014e14:	9207      	str	r2, [sp, #28]
 8014e16:	e014      	b.n	8014e42 <_vfiprintf_r+0x13a>
 8014e18:	eba0 0308 	sub.w	r3, r0, r8
 8014e1c:	fa09 f303 	lsl.w	r3, r9, r3
 8014e20:	4313      	orrs	r3, r2
 8014e22:	9304      	str	r3, [sp, #16]
 8014e24:	46a2      	mov	sl, r4
 8014e26:	e7d2      	b.n	8014dce <_vfiprintf_r+0xc6>
 8014e28:	9b03      	ldr	r3, [sp, #12]
 8014e2a:	1d19      	adds	r1, r3, #4
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	9103      	str	r1, [sp, #12]
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	bfbb      	ittet	lt
 8014e34:	425b      	neglt	r3, r3
 8014e36:	f042 0202 	orrlt.w	r2, r2, #2
 8014e3a:	9307      	strge	r3, [sp, #28]
 8014e3c:	9307      	strlt	r3, [sp, #28]
 8014e3e:	bfb8      	it	lt
 8014e40:	9204      	strlt	r2, [sp, #16]
 8014e42:	7823      	ldrb	r3, [r4, #0]
 8014e44:	2b2e      	cmp	r3, #46	@ 0x2e
 8014e46:	d10a      	bne.n	8014e5e <_vfiprintf_r+0x156>
 8014e48:	7863      	ldrb	r3, [r4, #1]
 8014e4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8014e4c:	d132      	bne.n	8014eb4 <_vfiprintf_r+0x1ac>
 8014e4e:	9b03      	ldr	r3, [sp, #12]
 8014e50:	1d1a      	adds	r2, r3, #4
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	9203      	str	r2, [sp, #12]
 8014e56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014e5a:	3402      	adds	r4, #2
 8014e5c:	9305      	str	r3, [sp, #20]
 8014e5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014f34 <_vfiprintf_r+0x22c>
 8014e62:	7821      	ldrb	r1, [r4, #0]
 8014e64:	2203      	movs	r2, #3
 8014e66:	4650      	mov	r0, sl
 8014e68:	f7eb f9f2 	bl	8000250 <memchr>
 8014e6c:	b138      	cbz	r0, 8014e7e <_vfiprintf_r+0x176>
 8014e6e:	9b04      	ldr	r3, [sp, #16]
 8014e70:	eba0 000a 	sub.w	r0, r0, sl
 8014e74:	2240      	movs	r2, #64	@ 0x40
 8014e76:	4082      	lsls	r2, r0
 8014e78:	4313      	orrs	r3, r2
 8014e7a:	3401      	adds	r4, #1
 8014e7c:	9304      	str	r3, [sp, #16]
 8014e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e82:	4829      	ldr	r0, [pc, #164]	@ (8014f28 <_vfiprintf_r+0x220>)
 8014e84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014e88:	2206      	movs	r2, #6
 8014e8a:	f7eb f9e1 	bl	8000250 <memchr>
 8014e8e:	2800      	cmp	r0, #0
 8014e90:	d03f      	beq.n	8014f12 <_vfiprintf_r+0x20a>
 8014e92:	4b26      	ldr	r3, [pc, #152]	@ (8014f2c <_vfiprintf_r+0x224>)
 8014e94:	bb1b      	cbnz	r3, 8014ede <_vfiprintf_r+0x1d6>
 8014e96:	9b03      	ldr	r3, [sp, #12]
 8014e98:	3307      	adds	r3, #7
 8014e9a:	f023 0307 	bic.w	r3, r3, #7
 8014e9e:	3308      	adds	r3, #8
 8014ea0:	9303      	str	r3, [sp, #12]
 8014ea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014ea4:	443b      	add	r3, r7
 8014ea6:	9309      	str	r3, [sp, #36]	@ 0x24
 8014ea8:	e76a      	b.n	8014d80 <_vfiprintf_r+0x78>
 8014eaa:	fb0c 3202 	mla	r2, ip, r2, r3
 8014eae:	460c      	mov	r4, r1
 8014eb0:	2001      	movs	r0, #1
 8014eb2:	e7a8      	b.n	8014e06 <_vfiprintf_r+0xfe>
 8014eb4:	2300      	movs	r3, #0
 8014eb6:	3401      	adds	r4, #1
 8014eb8:	9305      	str	r3, [sp, #20]
 8014eba:	4619      	mov	r1, r3
 8014ebc:	f04f 0c0a 	mov.w	ip, #10
 8014ec0:	4620      	mov	r0, r4
 8014ec2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014ec6:	3a30      	subs	r2, #48	@ 0x30
 8014ec8:	2a09      	cmp	r2, #9
 8014eca:	d903      	bls.n	8014ed4 <_vfiprintf_r+0x1cc>
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d0c6      	beq.n	8014e5e <_vfiprintf_r+0x156>
 8014ed0:	9105      	str	r1, [sp, #20]
 8014ed2:	e7c4      	b.n	8014e5e <_vfiprintf_r+0x156>
 8014ed4:	fb0c 2101 	mla	r1, ip, r1, r2
 8014ed8:	4604      	mov	r4, r0
 8014eda:	2301      	movs	r3, #1
 8014edc:	e7f0      	b.n	8014ec0 <_vfiprintf_r+0x1b8>
 8014ede:	ab03      	add	r3, sp, #12
 8014ee0:	9300      	str	r3, [sp, #0]
 8014ee2:	462a      	mov	r2, r5
 8014ee4:	4b12      	ldr	r3, [pc, #72]	@ (8014f30 <_vfiprintf_r+0x228>)
 8014ee6:	a904      	add	r1, sp, #16
 8014ee8:	4630      	mov	r0, r6
 8014eea:	f3af 8000 	nop.w
 8014eee:	4607      	mov	r7, r0
 8014ef0:	1c78      	adds	r0, r7, #1
 8014ef2:	d1d6      	bne.n	8014ea2 <_vfiprintf_r+0x19a>
 8014ef4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014ef6:	07d9      	lsls	r1, r3, #31
 8014ef8:	d405      	bmi.n	8014f06 <_vfiprintf_r+0x1fe>
 8014efa:	89ab      	ldrh	r3, [r5, #12]
 8014efc:	059a      	lsls	r2, r3, #22
 8014efe:	d402      	bmi.n	8014f06 <_vfiprintf_r+0x1fe>
 8014f00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014f02:	f7ff fcf3 	bl	80148ec <__retarget_lock_release_recursive>
 8014f06:	89ab      	ldrh	r3, [r5, #12]
 8014f08:	065b      	lsls	r3, r3, #25
 8014f0a:	f53f af1f 	bmi.w	8014d4c <_vfiprintf_r+0x44>
 8014f0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014f10:	e71e      	b.n	8014d50 <_vfiprintf_r+0x48>
 8014f12:	ab03      	add	r3, sp, #12
 8014f14:	9300      	str	r3, [sp, #0]
 8014f16:	462a      	mov	r2, r5
 8014f18:	4b05      	ldr	r3, [pc, #20]	@ (8014f30 <_vfiprintf_r+0x228>)
 8014f1a:	a904      	add	r1, sp, #16
 8014f1c:	4630      	mov	r0, r6
 8014f1e:	f000 f879 	bl	8015014 <_printf_i>
 8014f22:	e7e4      	b.n	8014eee <_vfiprintf_r+0x1e6>
 8014f24:	08016174 	.word	0x08016174
 8014f28:	0801617e 	.word	0x0801617e
 8014f2c:	00000000 	.word	0x00000000
 8014f30:	08014ce3 	.word	0x08014ce3
 8014f34:	0801617a 	.word	0x0801617a

08014f38 <_printf_common>:
 8014f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f3c:	4616      	mov	r6, r2
 8014f3e:	4698      	mov	r8, r3
 8014f40:	688a      	ldr	r2, [r1, #8]
 8014f42:	690b      	ldr	r3, [r1, #16]
 8014f44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014f48:	4293      	cmp	r3, r2
 8014f4a:	bfb8      	it	lt
 8014f4c:	4613      	movlt	r3, r2
 8014f4e:	6033      	str	r3, [r6, #0]
 8014f50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014f54:	4607      	mov	r7, r0
 8014f56:	460c      	mov	r4, r1
 8014f58:	b10a      	cbz	r2, 8014f5e <_printf_common+0x26>
 8014f5a:	3301      	adds	r3, #1
 8014f5c:	6033      	str	r3, [r6, #0]
 8014f5e:	6823      	ldr	r3, [r4, #0]
 8014f60:	0699      	lsls	r1, r3, #26
 8014f62:	bf42      	ittt	mi
 8014f64:	6833      	ldrmi	r3, [r6, #0]
 8014f66:	3302      	addmi	r3, #2
 8014f68:	6033      	strmi	r3, [r6, #0]
 8014f6a:	6825      	ldr	r5, [r4, #0]
 8014f6c:	f015 0506 	ands.w	r5, r5, #6
 8014f70:	d106      	bne.n	8014f80 <_printf_common+0x48>
 8014f72:	f104 0a19 	add.w	sl, r4, #25
 8014f76:	68e3      	ldr	r3, [r4, #12]
 8014f78:	6832      	ldr	r2, [r6, #0]
 8014f7a:	1a9b      	subs	r3, r3, r2
 8014f7c:	42ab      	cmp	r3, r5
 8014f7e:	dc26      	bgt.n	8014fce <_printf_common+0x96>
 8014f80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014f84:	6822      	ldr	r2, [r4, #0]
 8014f86:	3b00      	subs	r3, #0
 8014f88:	bf18      	it	ne
 8014f8a:	2301      	movne	r3, #1
 8014f8c:	0692      	lsls	r2, r2, #26
 8014f8e:	d42b      	bmi.n	8014fe8 <_printf_common+0xb0>
 8014f90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014f94:	4641      	mov	r1, r8
 8014f96:	4638      	mov	r0, r7
 8014f98:	47c8      	blx	r9
 8014f9a:	3001      	adds	r0, #1
 8014f9c:	d01e      	beq.n	8014fdc <_printf_common+0xa4>
 8014f9e:	6823      	ldr	r3, [r4, #0]
 8014fa0:	6922      	ldr	r2, [r4, #16]
 8014fa2:	f003 0306 	and.w	r3, r3, #6
 8014fa6:	2b04      	cmp	r3, #4
 8014fa8:	bf02      	ittt	eq
 8014faa:	68e5      	ldreq	r5, [r4, #12]
 8014fac:	6833      	ldreq	r3, [r6, #0]
 8014fae:	1aed      	subeq	r5, r5, r3
 8014fb0:	68a3      	ldr	r3, [r4, #8]
 8014fb2:	bf0c      	ite	eq
 8014fb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014fb8:	2500      	movne	r5, #0
 8014fba:	4293      	cmp	r3, r2
 8014fbc:	bfc4      	itt	gt
 8014fbe:	1a9b      	subgt	r3, r3, r2
 8014fc0:	18ed      	addgt	r5, r5, r3
 8014fc2:	2600      	movs	r6, #0
 8014fc4:	341a      	adds	r4, #26
 8014fc6:	42b5      	cmp	r5, r6
 8014fc8:	d11a      	bne.n	8015000 <_printf_common+0xc8>
 8014fca:	2000      	movs	r0, #0
 8014fcc:	e008      	b.n	8014fe0 <_printf_common+0xa8>
 8014fce:	2301      	movs	r3, #1
 8014fd0:	4652      	mov	r2, sl
 8014fd2:	4641      	mov	r1, r8
 8014fd4:	4638      	mov	r0, r7
 8014fd6:	47c8      	blx	r9
 8014fd8:	3001      	adds	r0, #1
 8014fda:	d103      	bne.n	8014fe4 <_printf_common+0xac>
 8014fdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fe4:	3501      	adds	r5, #1
 8014fe6:	e7c6      	b.n	8014f76 <_printf_common+0x3e>
 8014fe8:	18e1      	adds	r1, r4, r3
 8014fea:	1c5a      	adds	r2, r3, #1
 8014fec:	2030      	movs	r0, #48	@ 0x30
 8014fee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014ff2:	4422      	add	r2, r4
 8014ff4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014ff8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014ffc:	3302      	adds	r3, #2
 8014ffe:	e7c7      	b.n	8014f90 <_printf_common+0x58>
 8015000:	2301      	movs	r3, #1
 8015002:	4622      	mov	r2, r4
 8015004:	4641      	mov	r1, r8
 8015006:	4638      	mov	r0, r7
 8015008:	47c8      	blx	r9
 801500a:	3001      	adds	r0, #1
 801500c:	d0e6      	beq.n	8014fdc <_printf_common+0xa4>
 801500e:	3601      	adds	r6, #1
 8015010:	e7d9      	b.n	8014fc6 <_printf_common+0x8e>
	...

08015014 <_printf_i>:
 8015014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015018:	7e0f      	ldrb	r7, [r1, #24]
 801501a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801501c:	2f78      	cmp	r7, #120	@ 0x78
 801501e:	4691      	mov	r9, r2
 8015020:	4680      	mov	r8, r0
 8015022:	460c      	mov	r4, r1
 8015024:	469a      	mov	sl, r3
 8015026:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801502a:	d807      	bhi.n	801503c <_printf_i+0x28>
 801502c:	2f62      	cmp	r7, #98	@ 0x62
 801502e:	d80a      	bhi.n	8015046 <_printf_i+0x32>
 8015030:	2f00      	cmp	r7, #0
 8015032:	f000 80d2 	beq.w	80151da <_printf_i+0x1c6>
 8015036:	2f58      	cmp	r7, #88	@ 0x58
 8015038:	f000 80b9 	beq.w	80151ae <_printf_i+0x19a>
 801503c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015040:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015044:	e03a      	b.n	80150bc <_printf_i+0xa8>
 8015046:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801504a:	2b15      	cmp	r3, #21
 801504c:	d8f6      	bhi.n	801503c <_printf_i+0x28>
 801504e:	a101      	add	r1, pc, #4	@ (adr r1, 8015054 <_printf_i+0x40>)
 8015050:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015054:	080150ad 	.word	0x080150ad
 8015058:	080150c1 	.word	0x080150c1
 801505c:	0801503d 	.word	0x0801503d
 8015060:	0801503d 	.word	0x0801503d
 8015064:	0801503d 	.word	0x0801503d
 8015068:	0801503d 	.word	0x0801503d
 801506c:	080150c1 	.word	0x080150c1
 8015070:	0801503d 	.word	0x0801503d
 8015074:	0801503d 	.word	0x0801503d
 8015078:	0801503d 	.word	0x0801503d
 801507c:	0801503d 	.word	0x0801503d
 8015080:	080151c1 	.word	0x080151c1
 8015084:	080150eb 	.word	0x080150eb
 8015088:	0801517b 	.word	0x0801517b
 801508c:	0801503d 	.word	0x0801503d
 8015090:	0801503d 	.word	0x0801503d
 8015094:	080151e3 	.word	0x080151e3
 8015098:	0801503d 	.word	0x0801503d
 801509c:	080150eb 	.word	0x080150eb
 80150a0:	0801503d 	.word	0x0801503d
 80150a4:	0801503d 	.word	0x0801503d
 80150a8:	08015183 	.word	0x08015183
 80150ac:	6833      	ldr	r3, [r6, #0]
 80150ae:	1d1a      	adds	r2, r3, #4
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	6032      	str	r2, [r6, #0]
 80150b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80150b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80150bc:	2301      	movs	r3, #1
 80150be:	e09d      	b.n	80151fc <_printf_i+0x1e8>
 80150c0:	6833      	ldr	r3, [r6, #0]
 80150c2:	6820      	ldr	r0, [r4, #0]
 80150c4:	1d19      	adds	r1, r3, #4
 80150c6:	6031      	str	r1, [r6, #0]
 80150c8:	0606      	lsls	r6, r0, #24
 80150ca:	d501      	bpl.n	80150d0 <_printf_i+0xbc>
 80150cc:	681d      	ldr	r5, [r3, #0]
 80150ce:	e003      	b.n	80150d8 <_printf_i+0xc4>
 80150d0:	0645      	lsls	r5, r0, #25
 80150d2:	d5fb      	bpl.n	80150cc <_printf_i+0xb8>
 80150d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80150d8:	2d00      	cmp	r5, #0
 80150da:	da03      	bge.n	80150e4 <_printf_i+0xd0>
 80150dc:	232d      	movs	r3, #45	@ 0x2d
 80150de:	426d      	negs	r5, r5
 80150e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80150e4:	4859      	ldr	r0, [pc, #356]	@ (801524c <_printf_i+0x238>)
 80150e6:	230a      	movs	r3, #10
 80150e8:	e011      	b.n	801510e <_printf_i+0xfa>
 80150ea:	6821      	ldr	r1, [r4, #0]
 80150ec:	6833      	ldr	r3, [r6, #0]
 80150ee:	0608      	lsls	r0, r1, #24
 80150f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80150f4:	d402      	bmi.n	80150fc <_printf_i+0xe8>
 80150f6:	0649      	lsls	r1, r1, #25
 80150f8:	bf48      	it	mi
 80150fa:	b2ad      	uxthmi	r5, r5
 80150fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80150fe:	4853      	ldr	r0, [pc, #332]	@ (801524c <_printf_i+0x238>)
 8015100:	6033      	str	r3, [r6, #0]
 8015102:	bf14      	ite	ne
 8015104:	230a      	movne	r3, #10
 8015106:	2308      	moveq	r3, #8
 8015108:	2100      	movs	r1, #0
 801510a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801510e:	6866      	ldr	r6, [r4, #4]
 8015110:	60a6      	str	r6, [r4, #8]
 8015112:	2e00      	cmp	r6, #0
 8015114:	bfa2      	ittt	ge
 8015116:	6821      	ldrge	r1, [r4, #0]
 8015118:	f021 0104 	bicge.w	r1, r1, #4
 801511c:	6021      	strge	r1, [r4, #0]
 801511e:	b90d      	cbnz	r5, 8015124 <_printf_i+0x110>
 8015120:	2e00      	cmp	r6, #0
 8015122:	d04b      	beq.n	80151bc <_printf_i+0x1a8>
 8015124:	4616      	mov	r6, r2
 8015126:	fbb5 f1f3 	udiv	r1, r5, r3
 801512a:	fb03 5711 	mls	r7, r3, r1, r5
 801512e:	5dc7      	ldrb	r7, [r0, r7]
 8015130:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015134:	462f      	mov	r7, r5
 8015136:	42bb      	cmp	r3, r7
 8015138:	460d      	mov	r5, r1
 801513a:	d9f4      	bls.n	8015126 <_printf_i+0x112>
 801513c:	2b08      	cmp	r3, #8
 801513e:	d10b      	bne.n	8015158 <_printf_i+0x144>
 8015140:	6823      	ldr	r3, [r4, #0]
 8015142:	07df      	lsls	r7, r3, #31
 8015144:	d508      	bpl.n	8015158 <_printf_i+0x144>
 8015146:	6923      	ldr	r3, [r4, #16]
 8015148:	6861      	ldr	r1, [r4, #4]
 801514a:	4299      	cmp	r1, r3
 801514c:	bfde      	ittt	le
 801514e:	2330      	movle	r3, #48	@ 0x30
 8015150:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015154:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8015158:	1b92      	subs	r2, r2, r6
 801515a:	6122      	str	r2, [r4, #16]
 801515c:	f8cd a000 	str.w	sl, [sp]
 8015160:	464b      	mov	r3, r9
 8015162:	aa03      	add	r2, sp, #12
 8015164:	4621      	mov	r1, r4
 8015166:	4640      	mov	r0, r8
 8015168:	f7ff fee6 	bl	8014f38 <_printf_common>
 801516c:	3001      	adds	r0, #1
 801516e:	d14a      	bne.n	8015206 <_printf_i+0x1f2>
 8015170:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015174:	b004      	add	sp, #16
 8015176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801517a:	6823      	ldr	r3, [r4, #0]
 801517c:	f043 0320 	orr.w	r3, r3, #32
 8015180:	6023      	str	r3, [r4, #0]
 8015182:	4833      	ldr	r0, [pc, #204]	@ (8015250 <_printf_i+0x23c>)
 8015184:	2778      	movs	r7, #120	@ 0x78
 8015186:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801518a:	6823      	ldr	r3, [r4, #0]
 801518c:	6831      	ldr	r1, [r6, #0]
 801518e:	061f      	lsls	r7, r3, #24
 8015190:	f851 5b04 	ldr.w	r5, [r1], #4
 8015194:	d402      	bmi.n	801519c <_printf_i+0x188>
 8015196:	065f      	lsls	r7, r3, #25
 8015198:	bf48      	it	mi
 801519a:	b2ad      	uxthmi	r5, r5
 801519c:	6031      	str	r1, [r6, #0]
 801519e:	07d9      	lsls	r1, r3, #31
 80151a0:	bf44      	itt	mi
 80151a2:	f043 0320 	orrmi.w	r3, r3, #32
 80151a6:	6023      	strmi	r3, [r4, #0]
 80151a8:	b11d      	cbz	r5, 80151b2 <_printf_i+0x19e>
 80151aa:	2310      	movs	r3, #16
 80151ac:	e7ac      	b.n	8015108 <_printf_i+0xf4>
 80151ae:	4827      	ldr	r0, [pc, #156]	@ (801524c <_printf_i+0x238>)
 80151b0:	e7e9      	b.n	8015186 <_printf_i+0x172>
 80151b2:	6823      	ldr	r3, [r4, #0]
 80151b4:	f023 0320 	bic.w	r3, r3, #32
 80151b8:	6023      	str	r3, [r4, #0]
 80151ba:	e7f6      	b.n	80151aa <_printf_i+0x196>
 80151bc:	4616      	mov	r6, r2
 80151be:	e7bd      	b.n	801513c <_printf_i+0x128>
 80151c0:	6833      	ldr	r3, [r6, #0]
 80151c2:	6825      	ldr	r5, [r4, #0]
 80151c4:	6961      	ldr	r1, [r4, #20]
 80151c6:	1d18      	adds	r0, r3, #4
 80151c8:	6030      	str	r0, [r6, #0]
 80151ca:	062e      	lsls	r6, r5, #24
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	d501      	bpl.n	80151d4 <_printf_i+0x1c0>
 80151d0:	6019      	str	r1, [r3, #0]
 80151d2:	e002      	b.n	80151da <_printf_i+0x1c6>
 80151d4:	0668      	lsls	r0, r5, #25
 80151d6:	d5fb      	bpl.n	80151d0 <_printf_i+0x1bc>
 80151d8:	8019      	strh	r1, [r3, #0]
 80151da:	2300      	movs	r3, #0
 80151dc:	6123      	str	r3, [r4, #16]
 80151de:	4616      	mov	r6, r2
 80151e0:	e7bc      	b.n	801515c <_printf_i+0x148>
 80151e2:	6833      	ldr	r3, [r6, #0]
 80151e4:	1d1a      	adds	r2, r3, #4
 80151e6:	6032      	str	r2, [r6, #0]
 80151e8:	681e      	ldr	r6, [r3, #0]
 80151ea:	6862      	ldr	r2, [r4, #4]
 80151ec:	2100      	movs	r1, #0
 80151ee:	4630      	mov	r0, r6
 80151f0:	f7eb f82e 	bl	8000250 <memchr>
 80151f4:	b108      	cbz	r0, 80151fa <_printf_i+0x1e6>
 80151f6:	1b80      	subs	r0, r0, r6
 80151f8:	6060      	str	r0, [r4, #4]
 80151fa:	6863      	ldr	r3, [r4, #4]
 80151fc:	6123      	str	r3, [r4, #16]
 80151fe:	2300      	movs	r3, #0
 8015200:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015204:	e7aa      	b.n	801515c <_printf_i+0x148>
 8015206:	6923      	ldr	r3, [r4, #16]
 8015208:	4632      	mov	r2, r6
 801520a:	4649      	mov	r1, r9
 801520c:	4640      	mov	r0, r8
 801520e:	47d0      	blx	sl
 8015210:	3001      	adds	r0, #1
 8015212:	d0ad      	beq.n	8015170 <_printf_i+0x15c>
 8015214:	6823      	ldr	r3, [r4, #0]
 8015216:	079b      	lsls	r3, r3, #30
 8015218:	d413      	bmi.n	8015242 <_printf_i+0x22e>
 801521a:	68e0      	ldr	r0, [r4, #12]
 801521c:	9b03      	ldr	r3, [sp, #12]
 801521e:	4298      	cmp	r0, r3
 8015220:	bfb8      	it	lt
 8015222:	4618      	movlt	r0, r3
 8015224:	e7a6      	b.n	8015174 <_printf_i+0x160>
 8015226:	2301      	movs	r3, #1
 8015228:	4632      	mov	r2, r6
 801522a:	4649      	mov	r1, r9
 801522c:	4640      	mov	r0, r8
 801522e:	47d0      	blx	sl
 8015230:	3001      	adds	r0, #1
 8015232:	d09d      	beq.n	8015170 <_printf_i+0x15c>
 8015234:	3501      	adds	r5, #1
 8015236:	68e3      	ldr	r3, [r4, #12]
 8015238:	9903      	ldr	r1, [sp, #12]
 801523a:	1a5b      	subs	r3, r3, r1
 801523c:	42ab      	cmp	r3, r5
 801523e:	dcf2      	bgt.n	8015226 <_printf_i+0x212>
 8015240:	e7eb      	b.n	801521a <_printf_i+0x206>
 8015242:	2500      	movs	r5, #0
 8015244:	f104 0619 	add.w	r6, r4, #25
 8015248:	e7f5      	b.n	8015236 <_printf_i+0x222>
 801524a:	bf00      	nop
 801524c:	08016185 	.word	0x08016185
 8015250:	08016196 	.word	0x08016196

08015254 <__sflush_r>:
 8015254:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801525c:	0716      	lsls	r6, r2, #28
 801525e:	4605      	mov	r5, r0
 8015260:	460c      	mov	r4, r1
 8015262:	d454      	bmi.n	801530e <__sflush_r+0xba>
 8015264:	684b      	ldr	r3, [r1, #4]
 8015266:	2b00      	cmp	r3, #0
 8015268:	dc02      	bgt.n	8015270 <__sflush_r+0x1c>
 801526a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801526c:	2b00      	cmp	r3, #0
 801526e:	dd48      	ble.n	8015302 <__sflush_r+0xae>
 8015270:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015272:	2e00      	cmp	r6, #0
 8015274:	d045      	beq.n	8015302 <__sflush_r+0xae>
 8015276:	2300      	movs	r3, #0
 8015278:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801527c:	682f      	ldr	r7, [r5, #0]
 801527e:	6a21      	ldr	r1, [r4, #32]
 8015280:	602b      	str	r3, [r5, #0]
 8015282:	d030      	beq.n	80152e6 <__sflush_r+0x92>
 8015284:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015286:	89a3      	ldrh	r3, [r4, #12]
 8015288:	0759      	lsls	r1, r3, #29
 801528a:	d505      	bpl.n	8015298 <__sflush_r+0x44>
 801528c:	6863      	ldr	r3, [r4, #4]
 801528e:	1ad2      	subs	r2, r2, r3
 8015290:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015292:	b10b      	cbz	r3, 8015298 <__sflush_r+0x44>
 8015294:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015296:	1ad2      	subs	r2, r2, r3
 8015298:	2300      	movs	r3, #0
 801529a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801529c:	6a21      	ldr	r1, [r4, #32]
 801529e:	4628      	mov	r0, r5
 80152a0:	47b0      	blx	r6
 80152a2:	1c43      	adds	r3, r0, #1
 80152a4:	89a3      	ldrh	r3, [r4, #12]
 80152a6:	d106      	bne.n	80152b6 <__sflush_r+0x62>
 80152a8:	6829      	ldr	r1, [r5, #0]
 80152aa:	291d      	cmp	r1, #29
 80152ac:	d82b      	bhi.n	8015306 <__sflush_r+0xb2>
 80152ae:	4a2a      	ldr	r2, [pc, #168]	@ (8015358 <__sflush_r+0x104>)
 80152b0:	410a      	asrs	r2, r1
 80152b2:	07d6      	lsls	r6, r2, #31
 80152b4:	d427      	bmi.n	8015306 <__sflush_r+0xb2>
 80152b6:	2200      	movs	r2, #0
 80152b8:	6062      	str	r2, [r4, #4]
 80152ba:	04d9      	lsls	r1, r3, #19
 80152bc:	6922      	ldr	r2, [r4, #16]
 80152be:	6022      	str	r2, [r4, #0]
 80152c0:	d504      	bpl.n	80152cc <__sflush_r+0x78>
 80152c2:	1c42      	adds	r2, r0, #1
 80152c4:	d101      	bne.n	80152ca <__sflush_r+0x76>
 80152c6:	682b      	ldr	r3, [r5, #0]
 80152c8:	b903      	cbnz	r3, 80152cc <__sflush_r+0x78>
 80152ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80152cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80152ce:	602f      	str	r7, [r5, #0]
 80152d0:	b1b9      	cbz	r1, 8015302 <__sflush_r+0xae>
 80152d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80152d6:	4299      	cmp	r1, r3
 80152d8:	d002      	beq.n	80152e0 <__sflush_r+0x8c>
 80152da:	4628      	mov	r0, r5
 80152dc:	f7ff fb40 	bl	8014960 <_free_r>
 80152e0:	2300      	movs	r3, #0
 80152e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80152e4:	e00d      	b.n	8015302 <__sflush_r+0xae>
 80152e6:	2301      	movs	r3, #1
 80152e8:	4628      	mov	r0, r5
 80152ea:	47b0      	blx	r6
 80152ec:	4602      	mov	r2, r0
 80152ee:	1c50      	adds	r0, r2, #1
 80152f0:	d1c9      	bne.n	8015286 <__sflush_r+0x32>
 80152f2:	682b      	ldr	r3, [r5, #0]
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d0c6      	beq.n	8015286 <__sflush_r+0x32>
 80152f8:	2b1d      	cmp	r3, #29
 80152fa:	d001      	beq.n	8015300 <__sflush_r+0xac>
 80152fc:	2b16      	cmp	r3, #22
 80152fe:	d11e      	bne.n	801533e <__sflush_r+0xea>
 8015300:	602f      	str	r7, [r5, #0]
 8015302:	2000      	movs	r0, #0
 8015304:	e022      	b.n	801534c <__sflush_r+0xf8>
 8015306:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801530a:	b21b      	sxth	r3, r3
 801530c:	e01b      	b.n	8015346 <__sflush_r+0xf2>
 801530e:	690f      	ldr	r7, [r1, #16]
 8015310:	2f00      	cmp	r7, #0
 8015312:	d0f6      	beq.n	8015302 <__sflush_r+0xae>
 8015314:	0793      	lsls	r3, r2, #30
 8015316:	680e      	ldr	r6, [r1, #0]
 8015318:	bf08      	it	eq
 801531a:	694b      	ldreq	r3, [r1, #20]
 801531c:	600f      	str	r7, [r1, #0]
 801531e:	bf18      	it	ne
 8015320:	2300      	movne	r3, #0
 8015322:	eba6 0807 	sub.w	r8, r6, r7
 8015326:	608b      	str	r3, [r1, #8]
 8015328:	f1b8 0f00 	cmp.w	r8, #0
 801532c:	dde9      	ble.n	8015302 <__sflush_r+0xae>
 801532e:	6a21      	ldr	r1, [r4, #32]
 8015330:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8015332:	4643      	mov	r3, r8
 8015334:	463a      	mov	r2, r7
 8015336:	4628      	mov	r0, r5
 8015338:	47b0      	blx	r6
 801533a:	2800      	cmp	r0, #0
 801533c:	dc08      	bgt.n	8015350 <__sflush_r+0xfc>
 801533e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015342:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015346:	81a3      	strh	r3, [r4, #12]
 8015348:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801534c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015350:	4407      	add	r7, r0
 8015352:	eba8 0800 	sub.w	r8, r8, r0
 8015356:	e7e7      	b.n	8015328 <__sflush_r+0xd4>
 8015358:	dfbffffe 	.word	0xdfbffffe

0801535c <_fflush_r>:
 801535c:	b538      	push	{r3, r4, r5, lr}
 801535e:	690b      	ldr	r3, [r1, #16]
 8015360:	4605      	mov	r5, r0
 8015362:	460c      	mov	r4, r1
 8015364:	b913      	cbnz	r3, 801536c <_fflush_r+0x10>
 8015366:	2500      	movs	r5, #0
 8015368:	4628      	mov	r0, r5
 801536a:	bd38      	pop	{r3, r4, r5, pc}
 801536c:	b118      	cbz	r0, 8015376 <_fflush_r+0x1a>
 801536e:	6a03      	ldr	r3, [r0, #32]
 8015370:	b90b      	cbnz	r3, 8015376 <_fflush_r+0x1a>
 8015372:	f7ff f8a7 	bl	80144c4 <__sinit>
 8015376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801537a:	2b00      	cmp	r3, #0
 801537c:	d0f3      	beq.n	8015366 <_fflush_r+0xa>
 801537e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015380:	07d0      	lsls	r0, r2, #31
 8015382:	d404      	bmi.n	801538e <_fflush_r+0x32>
 8015384:	0599      	lsls	r1, r3, #22
 8015386:	d402      	bmi.n	801538e <_fflush_r+0x32>
 8015388:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801538a:	f7ff faae 	bl	80148ea <__retarget_lock_acquire_recursive>
 801538e:	4628      	mov	r0, r5
 8015390:	4621      	mov	r1, r4
 8015392:	f7ff ff5f 	bl	8015254 <__sflush_r>
 8015396:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015398:	07da      	lsls	r2, r3, #31
 801539a:	4605      	mov	r5, r0
 801539c:	d4e4      	bmi.n	8015368 <_fflush_r+0xc>
 801539e:	89a3      	ldrh	r3, [r4, #12]
 80153a0:	059b      	lsls	r3, r3, #22
 80153a2:	d4e1      	bmi.n	8015368 <_fflush_r+0xc>
 80153a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80153a6:	f7ff faa1 	bl	80148ec <__retarget_lock_release_recursive>
 80153aa:	e7dd      	b.n	8015368 <_fflush_r+0xc>

080153ac <fiprintf>:
 80153ac:	b40e      	push	{r1, r2, r3}
 80153ae:	b503      	push	{r0, r1, lr}
 80153b0:	4601      	mov	r1, r0
 80153b2:	ab03      	add	r3, sp, #12
 80153b4:	4805      	ldr	r0, [pc, #20]	@ (80153cc <fiprintf+0x20>)
 80153b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80153ba:	6800      	ldr	r0, [r0, #0]
 80153bc:	9301      	str	r3, [sp, #4]
 80153be:	f7ff fca3 	bl	8014d08 <_vfiprintf_r>
 80153c2:	b002      	add	sp, #8
 80153c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80153c8:	b003      	add	sp, #12
 80153ca:	4770      	bx	lr
 80153cc:	20000034 	.word	0x20000034

080153d0 <__swbuf_r>:
 80153d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153d2:	460e      	mov	r6, r1
 80153d4:	4614      	mov	r4, r2
 80153d6:	4605      	mov	r5, r0
 80153d8:	b118      	cbz	r0, 80153e2 <__swbuf_r+0x12>
 80153da:	6a03      	ldr	r3, [r0, #32]
 80153dc:	b90b      	cbnz	r3, 80153e2 <__swbuf_r+0x12>
 80153de:	f7ff f871 	bl	80144c4 <__sinit>
 80153e2:	69a3      	ldr	r3, [r4, #24]
 80153e4:	60a3      	str	r3, [r4, #8]
 80153e6:	89a3      	ldrh	r3, [r4, #12]
 80153e8:	071a      	lsls	r2, r3, #28
 80153ea:	d501      	bpl.n	80153f0 <__swbuf_r+0x20>
 80153ec:	6923      	ldr	r3, [r4, #16]
 80153ee:	b943      	cbnz	r3, 8015402 <__swbuf_r+0x32>
 80153f0:	4621      	mov	r1, r4
 80153f2:	4628      	mov	r0, r5
 80153f4:	f000 f82a 	bl	801544c <__swsetup_r>
 80153f8:	b118      	cbz	r0, 8015402 <__swbuf_r+0x32>
 80153fa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80153fe:	4638      	mov	r0, r7
 8015400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015402:	6823      	ldr	r3, [r4, #0]
 8015404:	6922      	ldr	r2, [r4, #16]
 8015406:	1a98      	subs	r0, r3, r2
 8015408:	6963      	ldr	r3, [r4, #20]
 801540a:	b2f6      	uxtb	r6, r6
 801540c:	4283      	cmp	r3, r0
 801540e:	4637      	mov	r7, r6
 8015410:	dc05      	bgt.n	801541e <__swbuf_r+0x4e>
 8015412:	4621      	mov	r1, r4
 8015414:	4628      	mov	r0, r5
 8015416:	f7ff ffa1 	bl	801535c <_fflush_r>
 801541a:	2800      	cmp	r0, #0
 801541c:	d1ed      	bne.n	80153fa <__swbuf_r+0x2a>
 801541e:	68a3      	ldr	r3, [r4, #8]
 8015420:	3b01      	subs	r3, #1
 8015422:	60a3      	str	r3, [r4, #8]
 8015424:	6823      	ldr	r3, [r4, #0]
 8015426:	1c5a      	adds	r2, r3, #1
 8015428:	6022      	str	r2, [r4, #0]
 801542a:	701e      	strb	r6, [r3, #0]
 801542c:	6962      	ldr	r2, [r4, #20]
 801542e:	1c43      	adds	r3, r0, #1
 8015430:	429a      	cmp	r2, r3
 8015432:	d004      	beq.n	801543e <__swbuf_r+0x6e>
 8015434:	89a3      	ldrh	r3, [r4, #12]
 8015436:	07db      	lsls	r3, r3, #31
 8015438:	d5e1      	bpl.n	80153fe <__swbuf_r+0x2e>
 801543a:	2e0a      	cmp	r6, #10
 801543c:	d1df      	bne.n	80153fe <__swbuf_r+0x2e>
 801543e:	4621      	mov	r1, r4
 8015440:	4628      	mov	r0, r5
 8015442:	f7ff ff8b 	bl	801535c <_fflush_r>
 8015446:	2800      	cmp	r0, #0
 8015448:	d0d9      	beq.n	80153fe <__swbuf_r+0x2e>
 801544a:	e7d6      	b.n	80153fa <__swbuf_r+0x2a>

0801544c <__swsetup_r>:
 801544c:	b538      	push	{r3, r4, r5, lr}
 801544e:	4b29      	ldr	r3, [pc, #164]	@ (80154f4 <__swsetup_r+0xa8>)
 8015450:	4605      	mov	r5, r0
 8015452:	6818      	ldr	r0, [r3, #0]
 8015454:	460c      	mov	r4, r1
 8015456:	b118      	cbz	r0, 8015460 <__swsetup_r+0x14>
 8015458:	6a03      	ldr	r3, [r0, #32]
 801545a:	b90b      	cbnz	r3, 8015460 <__swsetup_r+0x14>
 801545c:	f7ff f832 	bl	80144c4 <__sinit>
 8015460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015464:	0719      	lsls	r1, r3, #28
 8015466:	d422      	bmi.n	80154ae <__swsetup_r+0x62>
 8015468:	06da      	lsls	r2, r3, #27
 801546a:	d407      	bmi.n	801547c <__swsetup_r+0x30>
 801546c:	2209      	movs	r2, #9
 801546e:	602a      	str	r2, [r5, #0]
 8015470:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015474:	81a3      	strh	r3, [r4, #12]
 8015476:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801547a:	e033      	b.n	80154e4 <__swsetup_r+0x98>
 801547c:	0758      	lsls	r0, r3, #29
 801547e:	d512      	bpl.n	80154a6 <__swsetup_r+0x5a>
 8015480:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015482:	b141      	cbz	r1, 8015496 <__swsetup_r+0x4a>
 8015484:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015488:	4299      	cmp	r1, r3
 801548a:	d002      	beq.n	8015492 <__swsetup_r+0x46>
 801548c:	4628      	mov	r0, r5
 801548e:	f7ff fa67 	bl	8014960 <_free_r>
 8015492:	2300      	movs	r3, #0
 8015494:	6363      	str	r3, [r4, #52]	@ 0x34
 8015496:	89a3      	ldrh	r3, [r4, #12]
 8015498:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801549c:	81a3      	strh	r3, [r4, #12]
 801549e:	2300      	movs	r3, #0
 80154a0:	6063      	str	r3, [r4, #4]
 80154a2:	6923      	ldr	r3, [r4, #16]
 80154a4:	6023      	str	r3, [r4, #0]
 80154a6:	89a3      	ldrh	r3, [r4, #12]
 80154a8:	f043 0308 	orr.w	r3, r3, #8
 80154ac:	81a3      	strh	r3, [r4, #12]
 80154ae:	6923      	ldr	r3, [r4, #16]
 80154b0:	b94b      	cbnz	r3, 80154c6 <__swsetup_r+0x7a>
 80154b2:	89a3      	ldrh	r3, [r4, #12]
 80154b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80154b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80154bc:	d003      	beq.n	80154c6 <__swsetup_r+0x7a>
 80154be:	4621      	mov	r1, r4
 80154c0:	4628      	mov	r0, r5
 80154c2:	f000 f846 	bl	8015552 <__smakebuf_r>
 80154c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80154ca:	f013 0201 	ands.w	r2, r3, #1
 80154ce:	d00a      	beq.n	80154e6 <__swsetup_r+0x9a>
 80154d0:	2200      	movs	r2, #0
 80154d2:	60a2      	str	r2, [r4, #8]
 80154d4:	6962      	ldr	r2, [r4, #20]
 80154d6:	4252      	negs	r2, r2
 80154d8:	61a2      	str	r2, [r4, #24]
 80154da:	6922      	ldr	r2, [r4, #16]
 80154dc:	b942      	cbnz	r2, 80154f0 <__swsetup_r+0xa4>
 80154de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80154e2:	d1c5      	bne.n	8015470 <__swsetup_r+0x24>
 80154e4:	bd38      	pop	{r3, r4, r5, pc}
 80154e6:	0799      	lsls	r1, r3, #30
 80154e8:	bf58      	it	pl
 80154ea:	6962      	ldrpl	r2, [r4, #20]
 80154ec:	60a2      	str	r2, [r4, #8]
 80154ee:	e7f4      	b.n	80154da <__swsetup_r+0x8e>
 80154f0:	2000      	movs	r0, #0
 80154f2:	e7f7      	b.n	80154e4 <__swsetup_r+0x98>
 80154f4:	20000034 	.word	0x20000034

080154f8 <abort>:
 80154f8:	b508      	push	{r3, lr}
 80154fa:	2006      	movs	r0, #6
 80154fc:	f000 f88e 	bl	801561c <raise>
 8015500:	2001      	movs	r0, #1
 8015502:	f7ec f857 	bl	80015b4 <_exit>

08015506 <__swhatbuf_r>:
 8015506:	b570      	push	{r4, r5, r6, lr}
 8015508:	460c      	mov	r4, r1
 801550a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801550e:	2900      	cmp	r1, #0
 8015510:	b096      	sub	sp, #88	@ 0x58
 8015512:	4615      	mov	r5, r2
 8015514:	461e      	mov	r6, r3
 8015516:	da0d      	bge.n	8015534 <__swhatbuf_r+0x2e>
 8015518:	89a3      	ldrh	r3, [r4, #12]
 801551a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801551e:	f04f 0100 	mov.w	r1, #0
 8015522:	bf14      	ite	ne
 8015524:	2340      	movne	r3, #64	@ 0x40
 8015526:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801552a:	2000      	movs	r0, #0
 801552c:	6031      	str	r1, [r6, #0]
 801552e:	602b      	str	r3, [r5, #0]
 8015530:	b016      	add	sp, #88	@ 0x58
 8015532:	bd70      	pop	{r4, r5, r6, pc}
 8015534:	466a      	mov	r2, sp
 8015536:	f000 f879 	bl	801562c <_fstat_r>
 801553a:	2800      	cmp	r0, #0
 801553c:	dbec      	blt.n	8015518 <__swhatbuf_r+0x12>
 801553e:	9901      	ldr	r1, [sp, #4]
 8015540:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015544:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015548:	4259      	negs	r1, r3
 801554a:	4159      	adcs	r1, r3
 801554c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015550:	e7eb      	b.n	801552a <__swhatbuf_r+0x24>

08015552 <__smakebuf_r>:
 8015552:	898b      	ldrh	r3, [r1, #12]
 8015554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015556:	079d      	lsls	r5, r3, #30
 8015558:	4606      	mov	r6, r0
 801555a:	460c      	mov	r4, r1
 801555c:	d507      	bpl.n	801556e <__smakebuf_r+0x1c>
 801555e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015562:	6023      	str	r3, [r4, #0]
 8015564:	6123      	str	r3, [r4, #16]
 8015566:	2301      	movs	r3, #1
 8015568:	6163      	str	r3, [r4, #20]
 801556a:	b003      	add	sp, #12
 801556c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801556e:	ab01      	add	r3, sp, #4
 8015570:	466a      	mov	r2, sp
 8015572:	f7ff ffc8 	bl	8015506 <__swhatbuf_r>
 8015576:	9f00      	ldr	r7, [sp, #0]
 8015578:	4605      	mov	r5, r0
 801557a:	4639      	mov	r1, r7
 801557c:	4630      	mov	r0, r6
 801557e:	f7fe fd6f 	bl	8014060 <_malloc_r>
 8015582:	b948      	cbnz	r0, 8015598 <__smakebuf_r+0x46>
 8015584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015588:	059a      	lsls	r2, r3, #22
 801558a:	d4ee      	bmi.n	801556a <__smakebuf_r+0x18>
 801558c:	f023 0303 	bic.w	r3, r3, #3
 8015590:	f043 0302 	orr.w	r3, r3, #2
 8015594:	81a3      	strh	r3, [r4, #12]
 8015596:	e7e2      	b.n	801555e <__smakebuf_r+0xc>
 8015598:	89a3      	ldrh	r3, [r4, #12]
 801559a:	6020      	str	r0, [r4, #0]
 801559c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80155a0:	81a3      	strh	r3, [r4, #12]
 80155a2:	9b01      	ldr	r3, [sp, #4]
 80155a4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80155a8:	b15b      	cbz	r3, 80155c2 <__smakebuf_r+0x70>
 80155aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80155ae:	4630      	mov	r0, r6
 80155b0:	f000 f84e 	bl	8015650 <_isatty_r>
 80155b4:	b128      	cbz	r0, 80155c2 <__smakebuf_r+0x70>
 80155b6:	89a3      	ldrh	r3, [r4, #12]
 80155b8:	f023 0303 	bic.w	r3, r3, #3
 80155bc:	f043 0301 	orr.w	r3, r3, #1
 80155c0:	81a3      	strh	r3, [r4, #12]
 80155c2:	89a3      	ldrh	r3, [r4, #12]
 80155c4:	431d      	orrs	r5, r3
 80155c6:	81a5      	strh	r5, [r4, #12]
 80155c8:	e7cf      	b.n	801556a <__smakebuf_r+0x18>

080155ca <_raise_r>:
 80155ca:	291f      	cmp	r1, #31
 80155cc:	b538      	push	{r3, r4, r5, lr}
 80155ce:	4605      	mov	r5, r0
 80155d0:	460c      	mov	r4, r1
 80155d2:	d904      	bls.n	80155de <_raise_r+0x14>
 80155d4:	2316      	movs	r3, #22
 80155d6:	6003      	str	r3, [r0, #0]
 80155d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80155dc:	bd38      	pop	{r3, r4, r5, pc}
 80155de:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80155e0:	b112      	cbz	r2, 80155e8 <_raise_r+0x1e>
 80155e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80155e6:	b94b      	cbnz	r3, 80155fc <_raise_r+0x32>
 80155e8:	4628      	mov	r0, r5
 80155ea:	f000 f853 	bl	8015694 <_getpid_r>
 80155ee:	4622      	mov	r2, r4
 80155f0:	4601      	mov	r1, r0
 80155f2:	4628      	mov	r0, r5
 80155f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80155f8:	f000 b83a 	b.w	8015670 <_kill_r>
 80155fc:	2b01      	cmp	r3, #1
 80155fe:	d00a      	beq.n	8015616 <_raise_r+0x4c>
 8015600:	1c59      	adds	r1, r3, #1
 8015602:	d103      	bne.n	801560c <_raise_r+0x42>
 8015604:	2316      	movs	r3, #22
 8015606:	6003      	str	r3, [r0, #0]
 8015608:	2001      	movs	r0, #1
 801560a:	e7e7      	b.n	80155dc <_raise_r+0x12>
 801560c:	2100      	movs	r1, #0
 801560e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015612:	4620      	mov	r0, r4
 8015614:	4798      	blx	r3
 8015616:	2000      	movs	r0, #0
 8015618:	e7e0      	b.n	80155dc <_raise_r+0x12>
	...

0801561c <raise>:
 801561c:	4b02      	ldr	r3, [pc, #8]	@ (8015628 <raise+0xc>)
 801561e:	4601      	mov	r1, r0
 8015620:	6818      	ldr	r0, [r3, #0]
 8015622:	f7ff bfd2 	b.w	80155ca <_raise_r>
 8015626:	bf00      	nop
 8015628:	20000034 	.word	0x20000034

0801562c <_fstat_r>:
 801562c:	b538      	push	{r3, r4, r5, lr}
 801562e:	4d07      	ldr	r5, [pc, #28]	@ (801564c <_fstat_r+0x20>)
 8015630:	2300      	movs	r3, #0
 8015632:	4604      	mov	r4, r0
 8015634:	4608      	mov	r0, r1
 8015636:	4611      	mov	r1, r2
 8015638:	602b      	str	r3, [r5, #0]
 801563a:	f7ec f80b 	bl	8001654 <_fstat>
 801563e:	1c43      	adds	r3, r0, #1
 8015640:	d102      	bne.n	8015648 <_fstat_r+0x1c>
 8015642:	682b      	ldr	r3, [r5, #0]
 8015644:	b103      	cbz	r3, 8015648 <_fstat_r+0x1c>
 8015646:	6023      	str	r3, [r4, #0]
 8015648:	bd38      	pop	{r3, r4, r5, pc}
 801564a:	bf00      	nop
 801564c:	2000ad2c 	.word	0x2000ad2c

08015650 <_isatty_r>:
 8015650:	b538      	push	{r3, r4, r5, lr}
 8015652:	4d06      	ldr	r5, [pc, #24]	@ (801566c <_isatty_r+0x1c>)
 8015654:	2300      	movs	r3, #0
 8015656:	4604      	mov	r4, r0
 8015658:	4608      	mov	r0, r1
 801565a:	602b      	str	r3, [r5, #0]
 801565c:	f7ec f80a 	bl	8001674 <_isatty>
 8015660:	1c43      	adds	r3, r0, #1
 8015662:	d102      	bne.n	801566a <_isatty_r+0x1a>
 8015664:	682b      	ldr	r3, [r5, #0]
 8015666:	b103      	cbz	r3, 801566a <_isatty_r+0x1a>
 8015668:	6023      	str	r3, [r4, #0]
 801566a:	bd38      	pop	{r3, r4, r5, pc}
 801566c:	2000ad2c 	.word	0x2000ad2c

08015670 <_kill_r>:
 8015670:	b538      	push	{r3, r4, r5, lr}
 8015672:	4d07      	ldr	r5, [pc, #28]	@ (8015690 <_kill_r+0x20>)
 8015674:	2300      	movs	r3, #0
 8015676:	4604      	mov	r4, r0
 8015678:	4608      	mov	r0, r1
 801567a:	4611      	mov	r1, r2
 801567c:	602b      	str	r3, [r5, #0]
 801567e:	f7eb ff89 	bl	8001594 <_kill>
 8015682:	1c43      	adds	r3, r0, #1
 8015684:	d102      	bne.n	801568c <_kill_r+0x1c>
 8015686:	682b      	ldr	r3, [r5, #0]
 8015688:	b103      	cbz	r3, 801568c <_kill_r+0x1c>
 801568a:	6023      	str	r3, [r4, #0]
 801568c:	bd38      	pop	{r3, r4, r5, pc}
 801568e:	bf00      	nop
 8015690:	2000ad2c 	.word	0x2000ad2c

08015694 <_getpid_r>:
 8015694:	f7eb bf76 	b.w	8001584 <_getpid>

08015698 <_init>:
 8015698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801569a:	bf00      	nop
 801569c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801569e:	bc08      	pop	{r3}
 80156a0:	469e      	mov	lr, r3
 80156a2:	4770      	bx	lr

080156a4 <_fini>:
 80156a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156a6:	bf00      	nop
 80156a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80156aa:	bc08      	pop	{r3}
 80156ac:	469e      	mov	lr, r3
 80156ae:	4770      	bx	lr
