
AMT212E-V_Micro-ROS_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006570  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006748  08006748  00007748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006788  08006788  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006788  08006788  00007788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006790  08006790  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006790  08006790  00007790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006794  08006794  00007794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006798  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  2000000c  080067a4  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  080067a4  0000825c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b37  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026db  00000000  00000000  0001bb73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  0001e250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d3a  00000000  00000000  0001f338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002659d  00000000  00000000  00020072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000131d3  00000000  00000000  0004660f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbd31  00000000  00000000  000597e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00155513  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004904  00000000  00000000  00155558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009d  00000000  00000000  00159e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006730 	.word	0x08006730

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006730 	.word	0x08006730

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a68:	f000 b96a 	b.w	8000d40 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9d08      	ldr	r5, [sp, #32]
 8000a8a:	460c      	mov	r4, r1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d14e      	bne.n	8000b2e <__udivmoddi4+0xaa>
 8000a90:	4694      	mov	ip, r2
 8000a92:	458c      	cmp	ip, r1
 8000a94:	4686      	mov	lr, r0
 8000a96:	fab2 f282 	clz	r2, r2
 8000a9a:	d962      	bls.n	8000b62 <__udivmoddi4+0xde>
 8000a9c:	b14a      	cbz	r2, 8000ab2 <__udivmoddi4+0x2e>
 8000a9e:	f1c2 0320 	rsb	r3, r2, #32
 8000aa2:	4091      	lsls	r1, r2
 8000aa4:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aac:	4319      	orrs	r1, r3
 8000aae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ab2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab6:	fa1f f68c 	uxth.w	r6, ip
 8000aba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000abe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ac2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ac6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aca:	fb04 f106 	mul.w	r1, r4, r6
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d90a      	bls.n	8000ae8 <__udivmoddi4+0x64>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000ada:	f080 8112 	bcs.w	8000d02 <__udivmoddi4+0x27e>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 810f 	bls.w	8000d02 <__udivmoddi4+0x27e>
 8000ae4:	3c02      	subs	r4, #2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	1a59      	subs	r1, r3, r1
 8000aea:	fa1f f38e 	uxth.w	r3, lr
 8000aee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000af2:	fb07 1110 	mls	r1, r7, r0, r1
 8000af6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afa:	fb00 f606 	mul.w	r6, r0, r6
 8000afe:	429e      	cmp	r6, r3
 8000b00:	d90a      	bls.n	8000b18 <__udivmoddi4+0x94>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b0a:	f080 80fc 	bcs.w	8000d06 <__udivmoddi4+0x282>
 8000b0e:	429e      	cmp	r6, r3
 8000b10:	f240 80f9 	bls.w	8000d06 <__udivmoddi4+0x282>
 8000b14:	4463      	add	r3, ip
 8000b16:	3802      	subs	r0, #2
 8000b18:	1b9b      	subs	r3, r3, r6
 8000b1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b1e:	2100      	movs	r1, #0
 8000b20:	b11d      	cbz	r5, 8000b2a <__udivmoddi4+0xa6>
 8000b22:	40d3      	lsrs	r3, r2
 8000b24:	2200      	movs	r2, #0
 8000b26:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d905      	bls.n	8000b3e <__udivmoddi4+0xba>
 8000b32:	b10d      	cbz	r5, 8000b38 <__udivmoddi4+0xb4>
 8000b34:	e9c5 0100 	strd	r0, r1, [r5]
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e7f5      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b3e:	fab3 f183 	clz	r1, r3
 8000b42:	2900      	cmp	r1, #0
 8000b44:	d146      	bne.n	8000bd4 <__udivmoddi4+0x150>
 8000b46:	42a3      	cmp	r3, r4
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xcc>
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	f0c0 80f0 	bcc.w	8000d30 <__udivmoddi4+0x2ac>
 8000b50:	1a86      	subs	r6, r0, r2
 8000b52:	eb64 0303 	sbc.w	r3, r4, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	2d00      	cmp	r5, #0
 8000b5a:	d0e6      	beq.n	8000b2a <__udivmoddi4+0xa6>
 8000b5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b60:	e7e3      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	f040 8090 	bne.w	8000c88 <__udivmoddi4+0x204>
 8000b68:	eba1 040c 	sub.w	r4, r1, ip
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	fa1f f78c 	uxth.w	r7, ip
 8000b74:	2101      	movs	r1, #1
 8000b76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b86:	fb07 f006 	mul.w	r0, r7, r6
 8000b8a:	4298      	cmp	r0, r3
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x11c>
 8000b8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b92:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x11a>
 8000b98:	4298      	cmp	r0, r3
 8000b9a:	f200 80cd 	bhi.w	8000d38 <__udivmoddi4+0x2b4>
 8000b9e:	4626      	mov	r6, r4
 8000ba0:	1a1c      	subs	r4, r3, r0
 8000ba2:	fa1f f38e 	uxth.w	r3, lr
 8000ba6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000baa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bb2:	fb00 f707 	mul.w	r7, r0, r7
 8000bb6:	429f      	cmp	r7, r3
 8000bb8:	d908      	bls.n	8000bcc <__udivmoddi4+0x148>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000bc2:	d202      	bcs.n	8000bca <__udivmoddi4+0x146>
 8000bc4:	429f      	cmp	r7, r3
 8000bc6:	f200 80b0 	bhi.w	8000d2a <__udivmoddi4+0x2a6>
 8000bca:	4620      	mov	r0, r4
 8000bcc:	1bdb      	subs	r3, r3, r7
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	e7a5      	b.n	8000b20 <__udivmoddi4+0x9c>
 8000bd4:	f1c1 0620 	rsb	r6, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 f706 	lsr.w	r7, r2, r6
 8000bde:	431f      	orrs	r7, r3
 8000be0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000be4:	fa04 f301 	lsl.w	r3, r4, r1
 8000be8:	ea43 030c 	orr.w	r3, r3, ip
 8000bec:	40f4      	lsrs	r4, r6
 8000bee:	fa00 f801 	lsl.w	r8, r0, r1
 8000bf2:	0c38      	lsrs	r0, r7, #16
 8000bf4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bf8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bfc:	fa1f fc87 	uxth.w	ip, r7
 8000c00:	fb00 441e 	mls	r4, r0, lr, r4
 8000c04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c08:	fb0e f90c 	mul.w	r9, lr, ip
 8000c0c:	45a1      	cmp	r9, r4
 8000c0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c12:	d90a      	bls.n	8000c2a <__udivmoddi4+0x1a6>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c1a:	f080 8084 	bcs.w	8000d26 <__udivmoddi4+0x2a2>
 8000c1e:	45a1      	cmp	r9, r4
 8000c20:	f240 8081 	bls.w	8000d26 <__udivmoddi4+0x2a2>
 8000c24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c28:	443c      	add	r4, r7
 8000c2a:	eba4 0409 	sub.w	r4, r4, r9
 8000c2e:	fa1f f983 	uxth.w	r9, r3
 8000c32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c36:	fb00 4413 	mls	r4, r0, r3, r4
 8000c3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	d907      	bls.n	8000c56 <__udivmoddi4+0x1d2>
 8000c46:	193c      	adds	r4, r7, r4
 8000c48:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c4c:	d267      	bcs.n	8000d1e <__udivmoddi4+0x29a>
 8000c4e:	45a4      	cmp	ip, r4
 8000c50:	d965      	bls.n	8000d1e <__udivmoddi4+0x29a>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	443c      	add	r4, r7
 8000c56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	429c      	cmp	r4, r3
 8000c64:	46ce      	mov	lr, r9
 8000c66:	469c      	mov	ip, r3
 8000c68:	d351      	bcc.n	8000d0e <__udivmoddi4+0x28a>
 8000c6a:	d04e      	beq.n	8000d0a <__udivmoddi4+0x286>
 8000c6c:	b155      	cbz	r5, 8000c84 <__udivmoddi4+0x200>
 8000c6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c72:	eb64 040c 	sbc.w	r4, r4, ip
 8000c76:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7a:	40cb      	lsrs	r3, r1
 8000c7c:	431e      	orrs	r6, r3
 8000c7e:	40cc      	lsrs	r4, r1
 8000c80:	e9c5 6400 	strd	r6, r4, [r5]
 8000c84:	2100      	movs	r1, #0
 8000c86:	e750      	b.n	8000b2a <__udivmoddi4+0xa6>
 8000c88:	f1c2 0320 	rsb	r3, r2, #32
 8000c8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c94:	fa24 f303 	lsr.w	r3, r4, r3
 8000c98:	4094      	lsls	r4, r2
 8000c9a:	430c      	orrs	r4, r1
 8000c9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca4:	fa1f f78c 	uxth.w	r7, ip
 8000ca8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cac:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb0:	0c23      	lsrs	r3, r4, #16
 8000cb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb6:	fb00 f107 	mul.w	r1, r0, r7
 8000cba:	4299      	cmp	r1, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x24c>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000cc6:	d22c      	bcs.n	8000d22 <__udivmoddi4+0x29e>
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	d92a      	bls.n	8000d22 <__udivmoddi4+0x29e>
 8000ccc:	3802      	subs	r0, #2
 8000cce:	4463      	add	r3, ip
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000cdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce0:	fb01 f307 	mul.w	r3, r1, r7
 8000ce4:	42a3      	cmp	r3, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x276>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000cf0:	d213      	bcs.n	8000d1a <__udivmoddi4+0x296>
 8000cf2:	42a3      	cmp	r3, r4
 8000cf4:	d911      	bls.n	8000d1a <__udivmoddi4+0x296>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	4464      	add	r4, ip
 8000cfa:	1ae4      	subs	r4, r4, r3
 8000cfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d00:	e739      	b.n	8000b76 <__udivmoddi4+0xf2>
 8000d02:	4604      	mov	r4, r0
 8000d04:	e6f0      	b.n	8000ae8 <__udivmoddi4+0x64>
 8000d06:	4608      	mov	r0, r1
 8000d08:	e706      	b.n	8000b18 <__udivmoddi4+0x94>
 8000d0a:	45c8      	cmp	r8, r9
 8000d0c:	d2ae      	bcs.n	8000c6c <__udivmoddi4+0x1e8>
 8000d0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d16:	3801      	subs	r0, #1
 8000d18:	e7a8      	b.n	8000c6c <__udivmoddi4+0x1e8>
 8000d1a:	4631      	mov	r1, r6
 8000d1c:	e7ed      	b.n	8000cfa <__udivmoddi4+0x276>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	e799      	b.n	8000c56 <__udivmoddi4+0x1d2>
 8000d22:	4630      	mov	r0, r6
 8000d24:	e7d4      	b.n	8000cd0 <__udivmoddi4+0x24c>
 8000d26:	46d6      	mov	lr, sl
 8000d28:	e77f      	b.n	8000c2a <__udivmoddi4+0x1a6>
 8000d2a:	4463      	add	r3, ip
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	e74d      	b.n	8000bcc <__udivmoddi4+0x148>
 8000d30:	4606      	mov	r6, r0
 8000d32:	4623      	mov	r3, r4
 8000d34:	4608      	mov	r0, r1
 8000d36:	e70f      	b.n	8000b58 <__udivmoddi4+0xd4>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	e730      	b.n	8000ba0 <__udivmoddi4+0x11c>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_idiv0>:
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <AMT212EV_Init>:
 * (total count per revolute) that depend on the resolution.
 */


void AMT212EV_Init(AMT212EV *amt212ev ,UART_HandleTypeDef *huartx,uint16_t freq,int16_t cpr)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	4611      	mov	r1, r2
 8000d50:	461a      	mov	r2, r3
 8000d52:	460b      	mov	r3, r1
 8000d54:	80fb      	strh	r3, [r7, #6]
 8000d56:	4613      	mov	r3, r2
 8000d58:	80bb      	strh	r3, [r7, #4]
	amt212ev->huartx = huartx;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	68ba      	ldr	r2, [r7, #8]
 8000d5e:	601a      	str	r2, [r3, #0]
	amt212ev->freq = freq;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	88fa      	ldrh	r2, [r7, #6]
 8000d64:	809a      	strh	r2, [r3, #4]
	amt212ev->cpr = cpr;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	88ba      	ldrh	r2, [r7, #4]
 8000d6a:	80da      	strh	r2, [r3, #6]
	amt212ev->left_limit = 0;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	82da      	strh	r2, [r3, #22]
	amt212ev->right_limit = 0;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	2200      	movs	r2, #0
 8000d76:	831a      	strh	r2, [r3, #24]
	amt212ev->dir = -1;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	22ff      	movs	r2, #255	@ 0xff
 8000d7c:	771a      	strb	r2, [r3, #28]
	amt212ev->raw_count = 0;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	2200      	movs	r2, #0
 8000d82:	829a      	strh	r2, [r3, #20]
	amt212ev->enc_home_pos = 2810;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f640 22fa 	movw	r2, #2810	@ 0xafa
 8000d8a:	835a      	strh	r2, [r3, #26]
	amt212ev->degree = 0;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f04f 0200 	mov.w	r2, #0
 8000d92:	629a      	str	r2, [r3, #40]	@ 0x28
	amt212ev->c[1] = 0;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2200      	movs	r2, #0
 8000d98:	825a      	strh	r2, [r3, #18]
	amt212ev->c[0] = 0;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	821a      	strh	r2, [r3, #16]
	amt212ev->diff_count = 0;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	2200      	movs	r2, #0
 8000da4:	621a      	str	r2, [r3, #32]
	amt212ev->pulses = 0;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	2200      	movs	r2, #0
 8000daa:	625a      	str	r2, [r3, #36]	@ 0x24
	amt212ev->revs = 0;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f04f 0200 	mov.w	r2, #0
 8000db2:	62da      	str	r2, [r3, #44]	@ 0x2c
	amt212ev->rads = 0;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f04f 0200 	mov.w	r2, #0
 8000dba:	631a      	str	r2, [r3, #48]	@ 0x30
	amt212ev->pps = 0;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f04f 0200 	mov.w	r2, #0
 8000dc2:	635a      	str	r2, [r3, #52]	@ 0x34
	amt212ev->radps = 0;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f04f 0200 	mov.w	r2, #0
 8000dca:	639a      	str	r2, [r3, #56]	@ 0x38
	amt212ev->rpm = 0;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f04f 0200 	mov.w	r2, #0
 8000dd2:	63da      	str	r2, [r3, #60]	@ 0x3c
	amt212ev->rx[0] = 0;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	amt212ev->rx[1] = 0;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2200      	movs	r2, #0
 8000de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	amt212ev->timeout = 0;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
	amt212ev->error_caught = 0;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

	// Start using UART DMA
	HAL_UART_Receive_DMA(huartx, amt212ev->rx, sizeof(amt212ev->rx));
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	3340      	adds	r3, #64	@ 0x40
 8000df6:	2202      	movs	r2, #2
 8000df8:	4619      	mov	r1, r3
 8000dfa:	68b8      	ldr	r0, [r7, #8]
 8000dfc:	f003 ff86 	bl	8004d0c <HAL_UART_Receive_DMA>



}
 8000e00:	bf00      	nop
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <AMT212EV_ReadPosition>:

//void AMT212EV_Flip(AMT212EV *amt212ev){
//	amt212ev->dir = -1;
//}

void AMT212EV_ReadPosition(AMT212EV *amt212ev){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]

	// Arrays to command an encoder
	uint8_t read_pos[1] = {0x54}; // Read Raw count data
 8000e10:	2354      	movs	r3, #84	@ 0x54
 8000e12:	733b      	strb	r3, [r7, #12]

		if (HAL_UART_Transmit_DMA(amt212ev->huartx, read_pos, sizeof(read_pos)) != HAL_OK)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f107 010c 	add.w	r1, r7, #12
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f003 fef4 	bl	8004c0c <HAL_UART_Transmit_DMA>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <AMT212EV_ReadPosition+0x2a>
		{
			// Handle transmission error if necessary
			amt212ev->error_caught = READPOS;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
		}

}
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <AMT212EV_Processing_Data>:

	}
}


uint16_t AMT212EV_Processing_Data(AMT212EV *amt212ev){
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b084      	sub	sp, #16
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
	 // Extract encoder data
	    uint16_t data = (amt212ev->rx[1] << 8) | amt212ev->rx[0];
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000e48:	021b      	lsls	r3, r3, #8
 8000e4a:	b21a      	sxth	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000e52:	b21b      	sxth	r3, r3
 8000e54:	4313      	orrs	r3, r2
 8000e56:	b21b      	sxth	r3, r3
 8000e58:	81fb      	strh	r3, [r7, #14]

	    // Verify the checksum
	    if (verifyChecksumRS485(data)) {
 8000e5a:	89fb      	ldrh	r3, [r7, #14]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 f991 	bl	8001184 <verifyChecksumRS485>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d019      	beq.n	8000e9c <AMT212EV_Processing_Data+0x62>
	    	if(amt212ev->cpr == 4096){
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000e6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000e72:	d105      	bne.n	8000e80 <AMT212EV_Processing_Data+0x46>
	    		 return data &= 0x0FFF;  // Mask to keep only 12 bits (valid data)
 8000e74:	89fb      	ldrh	r3, [r7, #14]
 8000e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e7a:	81fb      	strh	r3, [r7, #14]
 8000e7c:	89fb      	ldrh	r3, [r7, #14]
 8000e7e:	e012      	b.n	8000ea6 <AMT212EV_Processing_Data+0x6c>

	    	}

	    	else if(amt212ev->cpr == 16384){
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000e86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000e8a:	d105      	bne.n	8000e98 <AMT212EV_Processing_Data+0x5e>
	    		 return data &= 0x3FFF; // Mask to keep only 14 bits (valid data)
 8000e8c:	89fb      	ldrh	r3, [r7, #14]
 8000e8e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000e92:	81fb      	strh	r3, [r7, #14]
 8000e94:	89fb      	ldrh	r3, [r7, #14]
 8000e96:	e006      	b.n	8000ea6 <AMT212EV_Processing_Data+0x6c>
	    	}

	        return data;
 8000e98:	89fb      	ldrh	r3, [r7, #14]
 8000e9a:	e004      	b.n	8000ea6 <AMT212EV_Processing_Data+0x6c>

	    } else {
	        // Handle checksum error by counting timeout
	    	amt212ev->timeout += 1;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	1c5a      	adds	r2, r3, #1
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	60da      	str	r2, [r3, #12]
	    }
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <AMT212EV_DiffCount>:


void AMT212EV_DiffCount(AMT212EV *amt212ev){
 8000eb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000eb4:	b084      	sub	sp, #16
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]

	amt212ev->raw_count = AMT212EV_Processing_Data(amt212ev);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff ffbd 	bl	8000e3a <AMT212EV_Processing_Data>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	b21a      	sxth	r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	829a      	strh	r2, [r3, #20]

	amt212ev->c[1] = (amt212ev->raw_count - amt212ev->enc_home_pos) * amt212ev->dir;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	fb12 f303 	smulbb	r3, r2, r3
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	b21a      	sxth	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	825a      	strh	r2, [r3, #18]

	// Difference of Raw Position
	int32_t diff_count = amt212ev->c[1] - amt212ev->c[0];
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	60fb      	str	r3, [r7, #12]

	if (diff_count > (amt212ev->cpr / 2)) {
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000f06:	0fda      	lsrs	r2, r3, #31
 8000f08:	4413      	add	r3, r2
 8000f0a:	105b      	asrs	r3, r3, #1
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	461a      	mov	r2, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4293      	cmp	r3, r2
 8000f14:	dd07      	ble.n	8000f26 <AMT212EV_DiffCount+0x76>
		diff_count -= amt212ev->cpr;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	1a9b      	subs	r3, r3, r2
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	e011      	b.n	8000f4a <AMT212EV_DiffCount+0x9a>
	} else if (diff_count < -(amt212ev->cpr / 2)) {
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000f2c:	0fda      	lsrs	r2, r3, #31
 8000f2e:	4413      	add	r3, r2
 8000f30:	105b      	asrs	r3, r3, #1
 8000f32:	b21b      	sxth	r3, r3
 8000f34:	425b      	negs	r3, r3
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	da06      	bge.n	8000f4a <AMT212EV_DiffCount+0x9a>
		diff_count += amt212ev->cpr;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000f42:	461a      	mov	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4413      	add	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]
	}
	amt212ev->diff_count = diff_count;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	621a      	str	r2, [r3, #32]
	amt212ev->pulses += amt212ev->diff_count;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	441a      	add	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	625a      	str	r2, [r3, #36]	@ 0x24
	amt212ev->revs += amt212ev->diff_count / (float)amt212ev->cpr;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a1b      	ldr	r3, [r3, #32]
 8000f68:	ee07 3a90 	vmov	s15, r3
 8000f6c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000f76:	ee07 3a90 	vmov	s15, r3
 8000f7a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f7e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	amt212ev->degree += ((amt212ev->diff_count * 360.0) /(float) amt212ev->cpr) ;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff faa5 	bl	80004e0 <__aeabi_f2d>
 8000f96:	4604      	mov	r4, r0
 8000f98:	460d      	mov	r5, r1
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6a1b      	ldr	r3, [r3, #32]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fa8c 	bl	80004bc <__aeabi_i2d>
 8000fa4:	f04f 0200 	mov.w	r2, #0
 8000fa8:	4b39      	ldr	r3, [pc, #228]	@ (8001090 <AMT212EV_DiffCount+0x1e0>)
 8000faa:	f7ff faf1 	bl	8000590 <__aeabi_dmul>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	4690      	mov	r8, r2
 8000fb4:	4699      	mov	r9, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000fbc:	ee07 3a90 	vmov	s15, r3
 8000fc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fc4:	ee17 0a90 	vmov	r0, s15
 8000fc8:	f7ff fa8a 	bl	80004e0 <__aeabi_f2d>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4640      	mov	r0, r8
 8000fd2:	4649      	mov	r1, r9
 8000fd4:	f7ff fc06 	bl	80007e4 <__aeabi_ddiv>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4620      	mov	r0, r4
 8000fde:	4629      	mov	r1, r5
 8000fe0:	f7ff f920 	bl	8000224 <__adddf3>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4610      	mov	r0, r2
 8000fea:	4619      	mov	r1, r3
 8000fec:	f7ff fce2 	bl	80009b4 <__aeabi_d2f>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	629a      	str	r2, [r3, #40]	@ 0x28
	amt212ev->rads += ((amt212ev->diff_count * 2.0 * M_PI) /(float) amt212ev->cpr);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fa70 	bl	80004e0 <__aeabi_f2d>
 8001000:	4604      	mov	r4, r0
 8001002:	460d      	mov	r5, r1
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a1b      	ldr	r3, [r3, #32]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fa57 	bl	80004bc <__aeabi_i2d>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	f7ff f907 	bl	8000224 <__adddf3>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	4610      	mov	r0, r2
 800101c:	4619      	mov	r1, r3
 800101e:	a31a      	add	r3, pc, #104	@ (adr r3, 8001088 <AMT212EV_DiffCount+0x1d8>)
 8001020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001024:	f7ff fab4 	bl	8000590 <__aeabi_dmul>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	4690      	mov	r8, r2
 800102e:	4699      	mov	r9, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001036:	ee07 3a90 	vmov	s15, r3
 800103a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800103e:	ee17 0a90 	vmov	r0, s15
 8001042:	f7ff fa4d 	bl	80004e0 <__aeabi_f2d>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	4640      	mov	r0, r8
 800104c:	4649      	mov	r1, r9
 800104e:	f7ff fbc9 	bl	80007e4 <__aeabi_ddiv>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	4620      	mov	r0, r4
 8001058:	4629      	mov	r1, r5
 800105a:	f7ff f8e3 	bl	8000224 <__adddf3>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	4610      	mov	r0, r2
 8001064:	4619      	mov	r1, r3
 8001066:	f7ff fca5 	bl	80009b4 <__aeabi_d2f>
 800106a:	4602      	mov	r2, r0
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	631a      	str	r2, [r3, #48]	@ 0x30
	amt212ev->c[0] = amt212ev->c[1];
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	821a      	strh	r2, [r3, #16]

}
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001084:	f3af 8000 	nop.w
 8001088:	54442d18 	.word	0x54442d18
 800108c:	400921fb 	.word	0x400921fb
 8001090:	40768000 	.word	0x40768000
 8001094:	00000000 	.word	0x00000000

08001098 <AMT212EV_Compute>:

void AMT212EV_Compute(AMT212EV *amt212ev){
 8001098:	b5b0      	push	{r4, r5, r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]


	amt212ev->pps = (amt212ev->diff_count * (float)amt212ev->freq) ; // Pulse per second
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a1b      	ldr	r3, [r3, #32]
 80010a4:	ee07 3a90 	vmov	s15, r3
 80010a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	889b      	ldrh	r3, [r3, #4]
 80010b0:	ee07 3a90 	vmov	s15, r3
 80010b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	amt212ev->radps = amt212ev->pps * 2 * M_PI / (float)amt212ev->cpr;; // Radian per second
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80010c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010cc:	ee17 0a90 	vmov	r0, s15
 80010d0:	f7ff fa06 	bl	80004e0 <__aeabi_f2d>
 80010d4:	a329      	add	r3, pc, #164	@ (adr r3, 800117c <AMT212EV_Compute+0xe4>)
 80010d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010da:	f7ff fa59 	bl	8000590 <__aeabi_dmul>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4614      	mov	r4, r2
 80010e4:	461d      	mov	r5, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010ec:	ee07 3a90 	vmov	s15, r3
 80010f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f4:	ee17 0a90 	vmov	r0, s15
 80010f8:	f7ff f9f2 	bl	80004e0 <__aeabi_f2d>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4620      	mov	r0, r4
 8001102:	4629      	mov	r1, r5
 8001104:	f7ff fb6e 	bl	80007e4 <__aeabi_ddiv>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4610      	mov	r0, r2
 800110e:	4619      	mov	r1, r3
 8001110:	f7ff fc50 	bl	80009b4 <__aeabi_d2f>
 8001114:	4602      	mov	r2, r0
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	639a      	str	r2, [r3, #56]	@ 0x38
	amt212ev->rpm = amt212ev->pps * 60.0 / (float)amt212ev->cpr; // Round per second
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff f9de 	bl	80004e0 <__aeabi_f2d>
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	4b13      	ldr	r3, [pc, #76]	@ (8001178 <AMT212EV_Compute+0xe0>)
 800112a:	f7ff fa31 	bl	8000590 <__aeabi_dmul>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4614      	mov	r4, r2
 8001134:	461d      	mov	r5, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800113c:	ee07 3a90 	vmov	s15, r3
 8001140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001144:	ee17 0a90 	vmov	r0, s15
 8001148:	f7ff f9ca 	bl	80004e0 <__aeabi_f2d>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4620      	mov	r0, r4
 8001152:	4629      	mov	r1, r5
 8001154:	f7ff fb46 	bl	80007e4 <__aeabi_ddiv>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	f7ff fc28 	bl	80009b4 <__aeabi_d2f>
 8001164:	4602      	mov	r2, r0
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	63da      	str	r2, [r3, #60]	@ 0x3c



}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bdb0      	pop	{r4, r5, r7, pc}
 8001172:	bf00      	nop
 8001174:	f3af 8000 	nop.w
 8001178:	404e0000 	.word	0x404e0000
 800117c:	54442d18 	.word	0x54442d18
 8001180:	400921fb 	.word	0x400921fb

08001184 <verifyChecksumRS485>:

}



bool verifyChecksumRS485(uint16_t currentPosition) {
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	80fb      	strh	r3, [r7, #6]
    uint16_t checksum = 0x3;
 800118e:	2303      	movs	r3, #3
 8001190:	81fb      	strh	r3, [r7, #14]

    // XOR 2-bit pairs
    for (int i = 0; i < 14; i += 2) {
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	e00f      	b.n	80011b8 <verifyChecksumRS485+0x34>
        checksum ^= (currentPosition >> i) & 0x3;
 8001198:	88fa      	ldrh	r2, [r7, #6]
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	fa42 f303 	asr.w	r3, r2, r3
 80011a0:	b21b      	sxth	r3, r3
 80011a2:	f003 0303 	and.w	r3, r3, #3
 80011a6:	b21a      	sxth	r2, r3
 80011a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ac:	4053      	eors	r3, r2
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < 14; i += 2) {
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	3302      	adds	r3, #2
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	2b0d      	cmp	r3, #13
 80011bc:	ddec      	ble.n	8001198 <verifyChecksumRS485+0x14>
    }
    return (checksum == (currentPosition >> 14));
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	0b9b      	lsrs	r3, r3, #14
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	89fa      	ldrh	r2, [r7, #14]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	bf0c      	ite	eq
 80011ca:	2301      	moveq	r3, #1
 80011cc:	2300      	movne	r3, #0
 80011ce:	b2db      	uxtb	r3, r3
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e0:	f000 fc55 	bl	8001a8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e4:	f000 f81e 	bl	8001224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e8:	f000 f99e 	bl	8001528 <MX_GPIO_Init>
  MX_DMA_Init();
 80011ec:	f000 f96a 	bl	80014c4 <MX_DMA_Init>
  MX_TIM2_Init();
 80011f0:	f000 f864 	bl	80012bc <MX_TIM2_Init>
  MX_TIM3_Init();
 80011f4:	f000 f8b0 	bl	8001358 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80011f8:	f000 f914 	bl	8001424 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  AMT212EV_Init(&amt, &huart1, 1000, 16384);
 80011fc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001200:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001204:	4904      	ldr	r1, [pc, #16]	@ (8001218 <main+0x3c>)
 8001206:	4805      	ldr	r0, [pc, #20]	@ (800121c <main+0x40>)
 8001208:	f7ff fd9c 	bl	8000d44 <AMT212EV_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 800120c:	4804      	ldr	r0, [pc, #16]	@ (8001220 <main+0x44>)
 800120e:	f002 fb37 	bl	8003880 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001212:	bf00      	nop
 8001214:	e7fd      	b.n	8001212 <main+0x36>
 8001216:	bf00      	nop
 8001218:	200000c0 	.word	0x200000c0
 800121c:	20000214 	.word	0x20000214
 8001220:	20000028 	.word	0x20000028

08001224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b094      	sub	sp, #80	@ 0x50
 8001228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122a:	f107 0318 	add.w	r3, r7, #24
 800122e:	2238      	movs	r2, #56	@ 0x38
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f005 fa50 	bl	80066d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
 8001244:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001246:	2000      	movs	r0, #0
 8001248:	f001 fa92 	bl	8002770 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800124c:	2302      	movs	r3, #2
 800124e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001250:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001254:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001256:	2340      	movs	r3, #64	@ 0x40
 8001258:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125a:	2302      	movs	r3, #2
 800125c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800125e:	2302      	movs	r3, #2
 8001260:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001262:	2304      	movs	r3, #4
 8001264:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001266:	2355      	movs	r3, #85	@ 0x55
 8001268:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800126a:	2302      	movs	r3, #2
 800126c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800126e:	2302      	movs	r3, #2
 8001270:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001272:	2302      	movs	r3, #2
 8001274:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001276:	f107 0318 	add.w	r3, r7, #24
 800127a:	4618      	mov	r0, r3
 800127c:	f001 fb2c 	bl	80028d8 <HAL_RCC_OscConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001286:	f000 f9e9 	bl	800165c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128a:	230f      	movs	r3, #15
 800128c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800128e:	2303      	movs	r3, #3
 8001290:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2104      	movs	r1, #4
 80012a2:	4618      	mov	r0, r3
 80012a4:	f001 fe2a 	bl	8002efc <HAL_RCC_ClockConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80012ae:	f000 f9d5 	bl	800165c <Error_Handler>
  }
}
 80012b2:	bf00      	nop
 80012b4:	3750      	adds	r7, #80	@ 0x50
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c2:	f107 0310 	add.w	r3, r7, #16
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012da:	4b1e      	ldr	r3, [pc, #120]	@ (8001354 <MX_TIM2_Init+0x98>)
 80012dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80012e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <MX_TIM2_Init+0x98>)
 80012e4:	22a9      	movs	r2, #169	@ 0xa9
 80012e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001354 <MX_TIM2_Init+0x98>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80012ee:	4b19      	ldr	r3, [pc, #100]	@ (8001354 <MX_TIM2_Init+0x98>)
 80012f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f6:	4b17      	ldr	r3, [pc, #92]	@ (8001354 <MX_TIM2_Init+0x98>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fc:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <MX_TIM2_Init+0x98>)
 80012fe:	2200      	movs	r2, #0
 8001300:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001302:	4814      	ldr	r0, [pc, #80]	@ (8001354 <MX_TIM2_Init+0x98>)
 8001304:	f002 fa64 	bl	80037d0 <HAL_TIM_Base_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800130e:	f000 f9a5 	bl	800165c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001312:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001316:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	4619      	mov	r1, r3
 800131e:	480d      	ldr	r0, [pc, #52]	@ (8001354 <MX_TIM2_Init+0x98>)
 8001320:	f002 fde0 	bl	8003ee4 <HAL_TIM_ConfigClockSource>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800132a:	f000 f997 	bl	800165c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	4619      	mov	r1, r3
 800133a:	4806      	ldr	r0, [pc, #24]	@ (8001354 <MX_TIM2_Init+0x98>)
 800133c:	f003 fb8a 	bl	8004a54 <HAL_TIMEx_MasterConfigSynchronization>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001346:	f000 f989 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	3720      	adds	r7, #32
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000028 	.word	0x20000028

08001358 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	@ 0x28
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135e:	f107 031c 	add.w	r3, r7, #28
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800136a:	463b      	mov	r3, r7
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
 8001378:	615a      	str	r2, [r3, #20]
 800137a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800137c:	4b27      	ldr	r3, [pc, #156]	@ (800141c <MX_TIM3_Init+0xc4>)
 800137e:	4a28      	ldr	r2, [pc, #160]	@ (8001420 <MX_TIM3_Init+0xc8>)
 8001380:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001382:	4b26      	ldr	r3, [pc, #152]	@ (800141c <MX_TIM3_Init+0xc4>)
 8001384:	2200      	movs	r2, #0
 8001386:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001388:	4b24      	ldr	r3, [pc, #144]	@ (800141c <MX_TIM3_Init+0xc4>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800138e:	4b23      	ldr	r3, [pc, #140]	@ (800141c <MX_TIM3_Init+0xc4>)
 8001390:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001394:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001396:	4b21      	ldr	r3, [pc, #132]	@ (800141c <MX_TIM3_Init+0xc4>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139c:	4b1f      	ldr	r3, [pc, #124]	@ (800141c <MX_TIM3_Init+0xc4>)
 800139e:	2200      	movs	r2, #0
 80013a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013a2:	481e      	ldr	r0, [pc, #120]	@ (800141c <MX_TIM3_Init+0xc4>)
 80013a4:	f002 fae4 	bl	8003970 <HAL_TIM_PWM_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80013ae:	f000 f955 	bl	800165c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013ba:	f107 031c 	add.w	r3, r7, #28
 80013be:	4619      	mov	r1, r3
 80013c0:	4816      	ldr	r0, [pc, #88]	@ (800141c <MX_TIM3_Init+0xc4>)
 80013c2:	f003 fb47 	bl	8004a54 <HAL_TIMEx_MasterConfigSynchronization>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80013cc:	f000 f946 	bl	800165c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d0:	2360      	movs	r3, #96	@ 0x60
 80013d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d8:	2300      	movs	r3, #0
 80013da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013e0:	463b      	mov	r3, r7
 80013e2:	2200      	movs	r2, #0
 80013e4:	4619      	mov	r1, r3
 80013e6:	480d      	ldr	r0, [pc, #52]	@ (800141c <MX_TIM3_Init+0xc4>)
 80013e8:	f002 fc68 	bl	8003cbc <HAL_TIM_PWM_ConfigChannel>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80013f2:	f000 f933 	bl	800165c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013f6:	463b      	mov	r3, r7
 80013f8:	2204      	movs	r2, #4
 80013fa:	4619      	mov	r1, r3
 80013fc:	4807      	ldr	r0, [pc, #28]	@ (800141c <MX_TIM3_Init+0xc4>)
 80013fe:	f002 fc5d 	bl	8003cbc <HAL_TIM_PWM_ConfigChannel>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001408:	f000 f928 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800140c:	4803      	ldr	r0, [pc, #12]	@ (800141c <MX_TIM3_Init+0xc4>)
 800140e:	f000 f993 	bl	8001738 <HAL_TIM_MspPostInit>

}
 8001412:	bf00      	nop
 8001414:	3728      	adds	r7, #40	@ 0x28
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000074 	.word	0x20000074
 8001420:	40000400 	.word	0x40000400

08001424 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001428:	4b24      	ldr	r3, [pc, #144]	@ (80014bc <MX_USART1_UART_Init+0x98>)
 800142a:	4a25      	ldr	r2, [pc, #148]	@ (80014c0 <MX_USART1_UART_Init+0x9c>)
 800142c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800142e:	4b23      	ldr	r3, [pc, #140]	@ (80014bc <MX_USART1_UART_Init+0x98>)
 8001430:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001434:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001436:	4b21      	ldr	r3, [pc, #132]	@ (80014bc <MX_USART1_UART_Init+0x98>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800143c:	4b1f      	ldr	r3, [pc, #124]	@ (80014bc <MX_USART1_UART_Init+0x98>)
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001442:	4b1e      	ldr	r3, [pc, #120]	@ (80014bc <MX_USART1_UART_Init+0x98>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001448:	4b1c      	ldr	r3, [pc, #112]	@ (80014bc <MX_USART1_UART_Init+0x98>)
 800144a:	220c      	movs	r2, #12
 800144c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144e:	4b1b      	ldr	r3, [pc, #108]	@ (80014bc <MX_USART1_UART_Init+0x98>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001454:	4b19      	ldr	r3, [pc, #100]	@ (80014bc <MX_USART1_UART_Init+0x98>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800145a:	4b18      	ldr	r3, [pc, #96]	@ (80014bc <MX_USART1_UART_Init+0x98>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001460:	4b16      	ldr	r3, [pc, #88]	@ (80014bc <MX_USART1_UART_Init+0x98>)
 8001462:	2200      	movs	r2, #0
 8001464:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001466:	4b15      	ldr	r3, [pc, #84]	@ (80014bc <MX_USART1_UART_Init+0x98>)
 8001468:	2200      	movs	r2, #0
 800146a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800146c:	2300      	movs	r3, #0
 800146e:	2200      	movs	r2, #0
 8001470:	2100      	movs	r1, #0
 8001472:	4812      	ldr	r0, [pc, #72]	@ (80014bc <MX_USART1_UART_Init+0x98>)
 8001474:	f004 ffa6 	bl	80063c4 <HAL_RS485Ex_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 800147e:	f000 f8ed 	bl	800165c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001482:	2100      	movs	r1, #0
 8001484:	480d      	ldr	r0, [pc, #52]	@ (80014bc <MX_USART1_UART_Init+0x98>)
 8001486:	f005 f85d 	bl	8006544 <HAL_UARTEx_SetTxFifoThreshold>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 8001490:	f000 f8e4 	bl	800165c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001494:	2100      	movs	r1, #0
 8001496:	4809      	ldr	r0, [pc, #36]	@ (80014bc <MX_USART1_UART_Init+0x98>)
 8001498:	f005 f892 	bl	80065c0 <HAL_UARTEx_SetRxFifoThreshold>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 80014a2:	f000 f8db 	bl	800165c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80014a6:	4805      	ldr	r0, [pc, #20]	@ (80014bc <MX_USART1_UART_Init+0x98>)
 80014a8:	f005 f813 	bl	80064d2 <HAL_UARTEx_DisableFifoMode>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 80014b2:	f000 f8d3 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200000c0 	.word	0x200000c0
 80014c0:	40013800 	.word	0x40013800

080014c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80014ca:	4b16      	ldr	r3, [pc, #88]	@ (8001524 <MX_DMA_Init+0x60>)
 80014cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ce:	4a15      	ldr	r2, [pc, #84]	@ (8001524 <MX_DMA_Init+0x60>)
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	6493      	str	r3, [r2, #72]	@ 0x48
 80014d6:	4b13      	ldr	r3, [pc, #76]	@ (8001524 <MX_DMA_Init+0x60>)
 80014d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014e2:	4b10      	ldr	r3, [pc, #64]	@ (8001524 <MX_DMA_Init+0x60>)
 80014e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001524 <MX_DMA_Init+0x60>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6493      	str	r3, [r2, #72]	@ 0x48
 80014ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001524 <MX_DMA_Init+0x60>)
 80014f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	200b      	movs	r0, #11
 8001500:	f000 fc11 	bl	8001d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001504:	200b      	movs	r0, #11
 8001506:	f000 fc28 	bl	8001d5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	200c      	movs	r0, #12
 8001510:	f000 fc09 	bl	8001d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001514:	200c      	movs	r0, #12
 8001516:	f000 fc20 	bl	8001d5a <HAL_NVIC_EnableIRQ>

}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40021000 	.word	0x40021000

08001528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	@ 0x28
 800152c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
 800153c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800153e:	4b38      	ldr	r3, [pc, #224]	@ (8001620 <MX_GPIO_Init+0xf8>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001542:	4a37      	ldr	r2, [pc, #220]	@ (8001620 <MX_GPIO_Init+0xf8>)
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800154a:	4b35      	ldr	r3, [pc, #212]	@ (8001620 <MX_GPIO_Init+0xf8>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001556:	4b32      	ldr	r3, [pc, #200]	@ (8001620 <MX_GPIO_Init+0xf8>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155a:	4a31      	ldr	r2, [pc, #196]	@ (8001620 <MX_GPIO_Init+0xf8>)
 800155c:	f043 0320 	orr.w	r3, r3, #32
 8001560:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001562:	4b2f      	ldr	r3, [pc, #188]	@ (8001620 <MX_GPIO_Init+0xf8>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001566:	f003 0320 	and.w	r3, r3, #32
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156e:	4b2c      	ldr	r3, [pc, #176]	@ (8001620 <MX_GPIO_Init+0xf8>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001572:	4a2b      	ldr	r2, [pc, #172]	@ (8001620 <MX_GPIO_Init+0xf8>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800157a:	4b29      	ldr	r3, [pc, #164]	@ (8001620 <MX_GPIO_Init+0xf8>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001586:	4b26      	ldr	r3, [pc, #152]	@ (8001620 <MX_GPIO_Init+0xf8>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158a:	4a25      	ldr	r2, [pc, #148]	@ (8001620 <MX_GPIO_Init+0xf8>)
 800158c:	f043 0302 	orr.w	r3, r3, #2
 8001590:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001592:	4b23      	ldr	r3, [pc, #140]	@ (8001620 <MX_GPIO_Init+0xf8>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	2120      	movs	r1, #32
 80015a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015a6:	f001 f8a7 	bl	80026f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4619      	mov	r1, r3
 80015c0:	4818      	ldr	r0, [pc, #96]	@ (8001624 <MX_GPIO_Init+0xfc>)
 80015c2:	f000 ff17 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80015c6:	230c      	movs	r3, #12
 80015c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80015d6:	230c      	movs	r3, #12
 80015d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015e4:	f000 ff06 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015e8:	2320      	movs	r3, #32
 80015ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ec:	2301      	movs	r3, #1
 80015ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	4619      	mov	r1, r3
 80015fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001602:	f000 fef7 	bl	80023f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	2028      	movs	r0, #40	@ 0x28
 800160c:	f000 fb8b 	bl	8001d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001610:	2028      	movs	r0, #40	@ 0x28
 8001612:	f000 fba2 	bl	8001d5a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001616:	bf00      	nop
 8001618:	3728      	adds	r7, #40	@ 0x28
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40021000 	.word	0x40021000
 8001624:	48000800 	.word	0x48000800

08001628 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a08      	ldr	r2, [pc, #32]	@ (8001654 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d108      	bne.n	800164a <HAL_TIM_PeriodElapsedCallback+0x22>
		AMT212EV_ReadPosition(&amt);
 8001638:	4807      	ldr	r0, [pc, #28]	@ (8001658 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800163a:	f7ff fbe5 	bl	8000e08 <AMT212EV_ReadPosition>
		AMT212EV_DiffCount(&amt);
 800163e:	4806      	ldr	r0, [pc, #24]	@ (8001658 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001640:	f7ff fc36 	bl	8000eb0 <AMT212EV_DiffCount>
		AMT212EV_Compute(&amt);
 8001644:	4804      	ldr	r0, [pc, #16]	@ (8001658 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001646:	f7ff fd27 	bl	8001098 <AMT212EV_Compute>
	}
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000028 	.word	0x20000028
 8001658:	20000214 	.word	0x20000214

0800165c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001660:	b672      	cpsid	i
}
 8001662:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <Error_Handler+0x8>

08001668 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166e:	4b0f      	ldr	r3, [pc, #60]	@ (80016ac <HAL_MspInit+0x44>)
 8001670:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001672:	4a0e      	ldr	r2, [pc, #56]	@ (80016ac <HAL_MspInit+0x44>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6613      	str	r3, [r2, #96]	@ 0x60
 800167a:	4b0c      	ldr	r3, [pc, #48]	@ (80016ac <HAL_MspInit+0x44>)
 800167c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001686:	4b09      	ldr	r3, [pc, #36]	@ (80016ac <HAL_MspInit+0x44>)
 8001688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168a:	4a08      	ldr	r2, [pc, #32]	@ (80016ac <HAL_MspInit+0x44>)
 800168c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001690:	6593      	str	r3, [r2, #88]	@ 0x58
 8001692:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <HAL_MspInit+0x44>)
 8001694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800169a:	603b      	str	r3, [r7, #0]
 800169c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800169e:	f001 f90b 	bl	80028b8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40021000 	.word	0x40021000

080016b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016c0:	d113      	bne.n	80016ea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016c2:	4b0c      	ldr	r3, [pc, #48]	@ (80016f4 <HAL_TIM_Base_MspInit+0x44>)
 80016c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c6:	4a0b      	ldr	r2, [pc, #44]	@ (80016f4 <HAL_TIM_Base_MspInit+0x44>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80016ce:	4b09      	ldr	r3, [pc, #36]	@ (80016f4 <HAL_TIM_Base_MspInit+0x44>)
 80016d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	2100      	movs	r1, #0
 80016de:	201c      	movs	r0, #28
 80016e0:	f000 fb21 	bl	8001d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016e4:	201c      	movs	r0, #28
 80016e6:	f000 fb38 	bl	8001d5a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80016ea:	bf00      	nop
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40021000 	.word	0x40021000

080016f8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a0a      	ldr	r2, [pc, #40]	@ (8001730 <HAL_TIM_PWM_MspInit+0x38>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d10b      	bne.n	8001722 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800170a:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <HAL_TIM_PWM_MspInit+0x3c>)
 800170c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800170e:	4a09      	ldr	r2, [pc, #36]	@ (8001734 <HAL_TIM_PWM_MspInit+0x3c>)
 8001710:	f043 0302 	orr.w	r3, r3, #2
 8001714:	6593      	str	r3, [r2, #88]	@ 0x58
 8001716:	4b07      	ldr	r3, [pc, #28]	@ (8001734 <HAL_TIM_PWM_MspInit+0x3c>)
 8001718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001722:	bf00      	nop
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40000400 	.word	0x40000400
 8001734:	40021000 	.word	0x40021000

08001738 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a11      	ldr	r2, [pc, #68]	@ (800179c <HAL_TIM_MspPostInit+0x64>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d11c      	bne.n	8001794 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <HAL_TIM_MspPostInit+0x68>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175e:	4a10      	ldr	r2, [pc, #64]	@ (80017a0 <HAL_TIM_MspPostInit+0x68>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001766:	4b0e      	ldr	r3, [pc, #56]	@ (80017a0 <HAL_TIM_MspPostInit+0x68>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001772:	2350      	movs	r3, #80	@ 0x50
 8001774:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2302      	movs	r3, #2
 8001778:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001782:	2302      	movs	r3, #2
 8001784:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001786:	f107 030c 	add.w	r3, r7, #12
 800178a:	4619      	mov	r1, r3
 800178c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001790:	f000 fe30 	bl	80023f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001794:	bf00      	nop
 8001796:	3720      	adds	r7, #32
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40000400 	.word	0x40000400
 80017a0:	40021000 	.word	0x40021000

080017a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b0a0      	sub	sp, #128	@ 0x80
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017bc:	f107 0318 	add.w	r3, r7, #24
 80017c0:	2254      	movs	r2, #84	@ 0x54
 80017c2:	2100      	movs	r1, #0
 80017c4:	4618      	mov	r0, r3
 80017c6:	f004 ff87 	bl	80066d8 <memset>
  if(huart->Instance==USART1)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a5b      	ldr	r2, [pc, #364]	@ (800193c <HAL_UART_MspInit+0x198>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	f040 80af 	bne.w	8001934 <HAL_UART_MspInit+0x190>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017d6:	2301      	movs	r3, #1
 80017d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017de:	f107 0318 	add.w	r3, r7, #24
 80017e2:	4618      	mov	r0, r3
 80017e4:	f001 fda6 	bl	8003334 <HAL_RCCEx_PeriphCLKConfig>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80017ee:	f7ff ff35 	bl	800165c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017f2:	4b53      	ldr	r3, [pc, #332]	@ (8001940 <HAL_UART_MspInit+0x19c>)
 80017f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017f6:	4a52      	ldr	r2, [pc, #328]	@ (8001940 <HAL_UART_MspInit+0x19c>)
 80017f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80017fe:	4b50      	ldr	r3, [pc, #320]	@ (8001940 <HAL_UART_MspInit+0x19c>)
 8001800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001802:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800180a:	4b4d      	ldr	r3, [pc, #308]	@ (8001940 <HAL_UART_MspInit+0x19c>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180e:	4a4c      	ldr	r2, [pc, #304]	@ (8001940 <HAL_UART_MspInit+0x19c>)
 8001810:	f043 0304 	orr.w	r3, r3, #4
 8001814:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001816:	4b4a      	ldr	r3, [pc, #296]	@ (8001940 <HAL_UART_MspInit+0x19c>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181a:	f003 0304 	and.w	r3, r3, #4
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001822:	4b47      	ldr	r3, [pc, #284]	@ (8001940 <HAL_UART_MspInit+0x19c>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001826:	4a46      	ldr	r2, [pc, #280]	@ (8001940 <HAL_UART_MspInit+0x19c>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800182e:	4b44      	ldr	r3, [pc, #272]	@ (8001940 <HAL_UART_MspInit+0x19c>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800183a:	2330      	movs	r3, #48	@ 0x30
 800183c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800184a:	2307      	movs	r3, #7
 800184c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800184e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001852:	4619      	mov	r1, r3
 8001854:	483b      	ldr	r0, [pc, #236]	@ (8001944 <HAL_UART_MspInit+0x1a0>)
 8001856:	f000 fdcd 	bl	80023f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800185a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800185e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800186c:	2307      	movs	r3, #7
 800186e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001870:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001874:	4619      	mov	r1, r3
 8001876:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800187a:	f000 fdbb 	bl	80023f4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800187e:	4b32      	ldr	r3, [pc, #200]	@ (8001948 <HAL_UART_MspInit+0x1a4>)
 8001880:	4a32      	ldr	r2, [pc, #200]	@ (800194c <HAL_UART_MspInit+0x1a8>)
 8001882:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001884:	4b30      	ldr	r3, [pc, #192]	@ (8001948 <HAL_UART_MspInit+0x1a4>)
 8001886:	2218      	movs	r2, #24
 8001888:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800188a:	4b2f      	ldr	r3, [pc, #188]	@ (8001948 <HAL_UART_MspInit+0x1a4>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001890:	4b2d      	ldr	r3, [pc, #180]	@ (8001948 <HAL_UART_MspInit+0x1a4>)
 8001892:	2200      	movs	r2, #0
 8001894:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001896:	4b2c      	ldr	r3, [pc, #176]	@ (8001948 <HAL_UART_MspInit+0x1a4>)
 8001898:	2280      	movs	r2, #128	@ 0x80
 800189a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800189c:	4b2a      	ldr	r3, [pc, #168]	@ (8001948 <HAL_UART_MspInit+0x1a4>)
 800189e:	2200      	movs	r2, #0
 80018a0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018a2:	4b29      	ldr	r3, [pc, #164]	@ (8001948 <HAL_UART_MspInit+0x1a4>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80018a8:	4b27      	ldr	r3, [pc, #156]	@ (8001948 <HAL_UART_MspInit+0x1a4>)
 80018aa:	2220      	movs	r2, #32
 80018ac:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018ae:	4b26      	ldr	r3, [pc, #152]	@ (8001948 <HAL_UART_MspInit+0x1a4>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80018b4:	4824      	ldr	r0, [pc, #144]	@ (8001948 <HAL_UART_MspInit+0x1a4>)
 80018b6:	f000 fa6b 	bl	8001d90 <HAL_DMA_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <HAL_UART_MspInit+0x120>
    {
      Error_Handler();
 80018c0:	f7ff fecc 	bl	800165c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a20      	ldr	r2, [pc, #128]	@ (8001948 <HAL_UART_MspInit+0x1a4>)
 80018c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80018cc:	4a1e      	ldr	r2, [pc, #120]	@ (8001948 <HAL_UART_MspInit+0x1a4>)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80018d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001950 <HAL_UART_MspInit+0x1ac>)
 80018d4:	4a1f      	ldr	r2, [pc, #124]	@ (8001954 <HAL_UART_MspInit+0x1b0>)
 80018d6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80018d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001950 <HAL_UART_MspInit+0x1ac>)
 80018da:	2219      	movs	r2, #25
 80018dc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018de:	4b1c      	ldr	r3, [pc, #112]	@ (8001950 <HAL_UART_MspInit+0x1ac>)
 80018e0:	2210      	movs	r2, #16
 80018e2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001950 <HAL_UART_MspInit+0x1ac>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018ea:	4b19      	ldr	r3, [pc, #100]	@ (8001950 <HAL_UART_MspInit+0x1ac>)
 80018ec:	2280      	movs	r2, #128	@ 0x80
 80018ee:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018f0:	4b17      	ldr	r3, [pc, #92]	@ (8001950 <HAL_UART_MspInit+0x1ac>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018f6:	4b16      	ldr	r3, [pc, #88]	@ (8001950 <HAL_UART_MspInit+0x1ac>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80018fc:	4b14      	ldr	r3, [pc, #80]	@ (8001950 <HAL_UART_MspInit+0x1ac>)
 80018fe:	2200      	movs	r2, #0
 8001900:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001902:	4b13      	ldr	r3, [pc, #76]	@ (8001950 <HAL_UART_MspInit+0x1ac>)
 8001904:	2200      	movs	r2, #0
 8001906:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001908:	4811      	ldr	r0, [pc, #68]	@ (8001950 <HAL_UART_MspInit+0x1ac>)
 800190a:	f000 fa41 	bl	8001d90 <HAL_DMA_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <HAL_UART_MspInit+0x174>
    {
      Error_Handler();
 8001914:	f7ff fea2 	bl	800165c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a0d      	ldr	r2, [pc, #52]	@ (8001950 <HAL_UART_MspInit+0x1ac>)
 800191c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800191e:	4a0c      	ldr	r2, [pc, #48]	@ (8001950 <HAL_UART_MspInit+0x1ac>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001924:	2200      	movs	r2, #0
 8001926:	2100      	movs	r1, #0
 8001928:	2025      	movs	r0, #37	@ 0x25
 800192a:	f000 f9fc 	bl	8001d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800192e:	2025      	movs	r0, #37	@ 0x25
 8001930:	f000 fa13 	bl	8001d5a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001934:	bf00      	nop
 8001936:	3780      	adds	r7, #128	@ 0x80
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40013800 	.word	0x40013800
 8001940:	40021000 	.word	0x40021000
 8001944:	48000800 	.word	0x48000800
 8001948:	20000154 	.word	0x20000154
 800194c:	40020008 	.word	0x40020008
 8001950:	200001b4 	.word	0x200001b4
 8001954:	4002001c 	.word	0x4002001c

08001958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <NMI_Handler+0x4>

08001960 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001964:	bf00      	nop
 8001966:	e7fd      	b.n	8001964 <HardFault_Handler+0x4>

08001968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800196c:	bf00      	nop
 800196e:	e7fd      	b.n	800196c <MemManage_Handler+0x4>

08001970 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001974:	bf00      	nop
 8001976:	e7fd      	b.n	8001974 <BusFault_Handler+0x4>

08001978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800197c:	bf00      	nop
 800197e:	e7fd      	b.n	800197c <UsageFault_Handler+0x4>

08001980 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ae:	f000 f8c1 	bl	8001b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80019bc:	4802      	ldr	r0, [pc, #8]	@ (80019c8 <DMA1_Channel1_IRQHandler+0x10>)
 80019be:	f000 fbca 	bl	8002156 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000154 	.word	0x20000154

080019cc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80019d0:	4802      	ldr	r0, [pc, #8]	@ (80019dc <DMA1_Channel2_IRQHandler+0x10>)
 80019d2:	f000 fbc0 	bl	8002156 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200001b4 	.word	0x200001b4

080019e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019e4:	4802      	ldr	r0, [pc, #8]	@ (80019f0 <TIM2_IRQHandler+0x10>)
 80019e6:	f002 f81a 	bl	8003a1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000028 	.word	0x20000028

080019f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019f8:	4802      	ldr	r0, [pc, #8]	@ (8001a04 <USART1_IRQHandler+0x10>)
 80019fa:	f003 f9d3 	bl	8004da4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200000c0 	.word	0x200000c0

08001a08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001a0c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001a10:	f000 fe8a 	bl	8002728 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a1c:	4b06      	ldr	r3, [pc, #24]	@ (8001a38 <SystemInit+0x20>)
 8001a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a22:	4a05      	ldr	r2, [pc, #20]	@ (8001a38 <SystemInit+0x20>)
 8001a24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a3c:	480d      	ldr	r0, [pc, #52]	@ (8001a74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a3e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a40:	f7ff ffea 	bl	8001a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a44:	480c      	ldr	r0, [pc, #48]	@ (8001a78 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a46:	490d      	ldr	r1, [pc, #52]	@ (8001a7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a48:	4a0d      	ldr	r2, [pc, #52]	@ (8001a80 <LoopForever+0xe>)
  movs r3, #0
 8001a4a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a4c:	e002      	b.n	8001a54 <LoopCopyDataInit>

08001a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a52:	3304      	adds	r3, #4

08001a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a58:	d3f9      	bcc.n	8001a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a5c:	4c0a      	ldr	r4, [pc, #40]	@ (8001a88 <LoopForever+0x16>)
  movs r3, #0
 8001a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a60:	e001      	b.n	8001a66 <LoopFillZerobss>

08001a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a64:	3204      	adds	r2, #4

08001a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a68:	d3fb      	bcc.n	8001a62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a6a:	f004 fe3d 	bl	80066e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a6e:	f7ff fbb5 	bl	80011dc <main>

08001a72 <LoopForever>:

LoopForever:
    b LoopForever
 8001a72:	e7fe      	b.n	8001a72 <LoopForever>
  ldr   r0, =_estack
 8001a74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a80:	08006798 	.word	0x08006798
  ldr r2, =_sbss
 8001a84:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a88:	2000025c 	.word	0x2000025c

08001a8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a8c:	e7fe      	b.n	8001a8c <ADC1_2_IRQHandler>

08001a8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a98:	2003      	movs	r0, #3
 8001a9a:	f000 f939 	bl	8001d10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f000 f80e 	bl	8001ac0 <HAL_InitTick>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d002      	beq.n	8001ab0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	71fb      	strb	r3, [r7, #7]
 8001aae:	e001      	b.n	8001ab4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ab0:	f7ff fdda 	bl	8001668 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ab4:	79fb      	ldrb	r3, [r7, #7]

}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001acc:	4b16      	ldr	r3, [pc, #88]	@ (8001b28 <HAL_InitTick+0x68>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d022      	beq.n	8001b1a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ad4:	4b15      	ldr	r3, [pc, #84]	@ (8001b2c <HAL_InitTick+0x6c>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b13      	ldr	r3, [pc, #76]	@ (8001b28 <HAL_InitTick+0x68>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ae0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f000 f944 	bl	8001d76 <HAL_SYSTICK_Config>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d10f      	bne.n	8001b14 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b0f      	cmp	r3, #15
 8001af8:	d809      	bhi.n	8001b0e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001afa:	2200      	movs	r2, #0
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b02:	f000 f910 	bl	8001d26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b06:	4a0a      	ldr	r2, [pc, #40]	@ (8001b30 <HAL_InitTick+0x70>)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	e007      	b.n	8001b1e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	73fb      	strb	r3, [r7, #15]
 8001b12:	e004      	b.n	8001b1e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	73fb      	strb	r3, [r7, #15]
 8001b18:	e001      	b.n	8001b1e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000008 	.word	0x20000008
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	20000004 	.word	0x20000004

08001b34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b38:	4b05      	ldr	r3, [pc, #20]	@ (8001b50 <HAL_IncTick+0x1c>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b05      	ldr	r3, [pc, #20]	@ (8001b54 <HAL_IncTick+0x20>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4413      	add	r3, r2
 8001b42:	4a03      	ldr	r2, [pc, #12]	@ (8001b50 <HAL_IncTick+0x1c>)
 8001b44:	6013      	str	r3, [r2, #0]
}
 8001b46:	bf00      	nop
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	20000258 	.word	0x20000258
 8001b54:	20000008 	.word	0x20000008

08001b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b5c:	4b03      	ldr	r3, [pc, #12]	@ (8001b6c <HAL_GetTick+0x14>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000258 	.word	0x20000258

08001b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b80:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ba2:	4a04      	ldr	r2, [pc, #16]	@ (8001bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	60d3      	str	r3, [r2, #12]
}
 8001ba8:	bf00      	nop
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bbc:	4b04      	ldr	r3, [pc, #16]	@ (8001bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	0a1b      	lsrs	r3, r3, #8
 8001bc2:	f003 0307 	and.w	r3, r3, #7
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	db0b      	blt.n	8001bfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	f003 021f 	and.w	r2, r3, #31
 8001bec:	4907      	ldr	r1, [pc, #28]	@ (8001c0c <__NVIC_EnableIRQ+0x38>)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	095b      	lsrs	r3, r3, #5
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000e100 	.word	0xe000e100

08001c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	6039      	str	r1, [r7, #0]
 8001c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	db0a      	blt.n	8001c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	490c      	ldr	r1, [pc, #48]	@ (8001c5c <__NVIC_SetPriority+0x4c>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	0112      	lsls	r2, r2, #4
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	440b      	add	r3, r1
 8001c34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c38:	e00a      	b.n	8001c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4908      	ldr	r1, [pc, #32]	@ (8001c60 <__NVIC_SetPriority+0x50>)
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	3b04      	subs	r3, #4
 8001c48:	0112      	lsls	r2, r2, #4
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	761a      	strb	r2, [r3, #24]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	e000e100 	.word	0xe000e100
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b089      	sub	sp, #36	@ 0x24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f1c3 0307 	rsb	r3, r3, #7
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	bf28      	it	cs
 8001c82:	2304      	movcs	r3, #4
 8001c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	2b06      	cmp	r3, #6
 8001c8c:	d902      	bls.n	8001c94 <NVIC_EncodePriority+0x30>
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3b03      	subs	r3, #3
 8001c92:	e000      	b.n	8001c96 <NVIC_EncodePriority+0x32>
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43da      	mvns	r2, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb6:	43d9      	mvns	r1, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	4313      	orrs	r3, r2
         );
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3724      	adds	r7, #36	@ 0x24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cdc:	d301      	bcc.n	8001ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e00f      	b.n	8001d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8001d0c <SysTick_Config+0x40>)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cea:	210f      	movs	r1, #15
 8001cec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001cf0:	f7ff ff8e 	bl	8001c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf4:	4b05      	ldr	r3, [pc, #20]	@ (8001d0c <SysTick_Config+0x40>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cfa:	4b04      	ldr	r3, [pc, #16]	@ (8001d0c <SysTick_Config+0x40>)
 8001cfc:	2207      	movs	r2, #7
 8001cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	e000e010 	.word	0xe000e010

08001d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff ff29 	bl	8001b70 <__NVIC_SetPriorityGrouping>
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b086      	sub	sp, #24
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	607a      	str	r2, [r7, #4]
 8001d32:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d34:	f7ff ff40 	bl	8001bb8 <__NVIC_GetPriorityGrouping>
 8001d38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	68b9      	ldr	r1, [r7, #8]
 8001d3e:	6978      	ldr	r0, [r7, #20]
 8001d40:	f7ff ff90 	bl	8001c64 <NVIC_EncodePriority>
 8001d44:	4602      	mov	r2, r0
 8001d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff5f 	bl	8001c10 <__NVIC_SetPriority>
}
 8001d52:	bf00      	nop
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	4603      	mov	r3, r0
 8001d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff33 	bl	8001bd4 <__NVIC_EnableIRQ>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ffa4 	bl	8001ccc <SysTick_Config>
 8001d84:	4603      	mov	r3, r0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e08d      	b.n	8001ebe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	461a      	mov	r2, r3
 8001da8:	4b47      	ldr	r3, [pc, #284]	@ (8001ec8 <HAL_DMA_Init+0x138>)
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d80f      	bhi.n	8001dce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	4b45      	ldr	r3, [pc, #276]	@ (8001ecc <HAL_DMA_Init+0x13c>)
 8001db6:	4413      	add	r3, r2
 8001db8:	4a45      	ldr	r2, [pc, #276]	@ (8001ed0 <HAL_DMA_Init+0x140>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	091b      	lsrs	r3, r3, #4
 8001dc0:	009a      	lsls	r2, r3, #2
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a42      	ldr	r2, [pc, #264]	@ (8001ed4 <HAL_DMA_Init+0x144>)
 8001dca:	641a      	str	r2, [r3, #64]	@ 0x40
 8001dcc:	e00e      	b.n	8001dec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4b40      	ldr	r3, [pc, #256]	@ (8001ed8 <HAL_DMA_Init+0x148>)
 8001dd6:	4413      	add	r3, r2
 8001dd8:	4a3d      	ldr	r2, [pc, #244]	@ (8001ed0 <HAL_DMA_Init+0x140>)
 8001dda:	fba2 2303 	umull	r2, r3, r2, r3
 8001dde:	091b      	lsrs	r3, r3, #4
 8001de0:	009a      	lsls	r2, r3, #2
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a3c      	ldr	r2, [pc, #240]	@ (8001edc <HAL_DMA_Init+0x14c>)
 8001dea:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2202      	movs	r2, #2
 8001df0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001e02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001e10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 fa76 	bl	8002330 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001e4c:	d102      	bne.n	8001e54 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e68:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d010      	beq.n	8001e94 <HAL_DMA_Init+0x104>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d80c      	bhi.n	8001e94 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 fa96 	bl	80023ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	e008      	b.n	8001ea6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40020407 	.word	0x40020407
 8001ecc:	bffdfff8 	.word	0xbffdfff8
 8001ed0:	cccccccd 	.word	0xcccccccd
 8001ed4:	40020000 	.word	0x40020000
 8001ed8:	bffdfbf8 	.word	0xbffdfbf8
 8001edc:	40020400 	.word	0x40020400

08001ee0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
 8001eec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d101      	bne.n	8001f00 <HAL_DMA_Start_IT+0x20>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e066      	b.n	8001fce <HAL_DMA_Start_IT+0xee>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d155      	bne.n	8001fc0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2202      	movs	r2, #2
 8001f18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0201 	bic.w	r2, r2, #1
 8001f30:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	68b9      	ldr	r1, [r7, #8]
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 f9bb 	bl	80022b4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d008      	beq.n	8001f58 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f042 020e 	orr.w	r2, r2, #14
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	e00f      	b.n	8001f78 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0204 	bic.w	r2, r2, #4
 8001f66:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 020a 	orr.w	r2, r2, #10
 8001f76:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d007      	beq.n	8001f96 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f94:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d007      	beq.n	8001fae <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f042 0201 	orr.w	r2, r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	e005      	b.n	8001fcc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b085      	sub	sp, #20
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d005      	beq.n	8001ffa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2204      	movs	r2, #4
 8001ff2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	73fb      	strb	r3, [r7, #15]
 8001ff8:	e037      	b.n	800206a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 020e 	bic.w	r2, r2, #14
 8002008:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002014:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002018:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0201 	bic.w	r2, r2, #1
 8002028:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202e:	f003 021f 	and.w	r2, r3, #31
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002036:	2101      	movs	r1, #1
 8002038:	fa01 f202 	lsl.w	r2, r1, r2
 800203c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002046:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00c      	beq.n	800206a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800205a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800205e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002068:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800207a:	7bfb      	ldrb	r3, [r7, #15]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002090:	2300      	movs	r3, #0
 8002092:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d00d      	beq.n	80020bc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2204      	movs	r2, #4
 80020a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	73fb      	strb	r3, [r7, #15]
 80020ba:	e047      	b.n	800214c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 020e 	bic.w	r2, r2, #14
 80020ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0201 	bic.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f0:	f003 021f 	and.w	r2, r3, #31
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f8:	2101      	movs	r1, #1
 80020fa:	fa01 f202 	lsl.w	r2, r1, r2
 80020fe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002108:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00c      	beq.n	800212c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800211c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002120:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800212a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	4798      	blx	r3
    }
  }
  return status;
 800214c:	7bfb      	ldrb	r3, [r7, #15]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b084      	sub	sp, #16
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002172:	f003 031f 	and.w	r3, r3, #31
 8002176:	2204      	movs	r2, #4
 8002178:	409a      	lsls	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	4013      	ands	r3, r2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d026      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x7a>
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d021      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0320 	and.w	r3, r3, #32
 8002196:	2b00      	cmp	r3, #0
 8002198:	d107      	bne.n	80021aa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0204 	bic.w	r2, r2, #4
 80021a8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ae:	f003 021f 	and.w	r2, r3, #31
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b6:	2104      	movs	r1, #4
 80021b8:	fa01 f202 	lsl.w	r2, r1, r2
 80021bc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d071      	beq.n	80022aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80021ce:	e06c      	b.n	80022aa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d4:	f003 031f 	and.w	r3, r3, #31
 80021d8:	2202      	movs	r2, #2
 80021da:	409a      	lsls	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4013      	ands	r3, r2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d02e      	beq.n	8002242 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d029      	beq.n	8002242 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0320 	and.w	r3, r3, #32
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10b      	bne.n	8002214 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 020a 	bic.w	r2, r2, #10
 800220a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002218:	f003 021f 	and.w	r2, r3, #31
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002220:	2102      	movs	r1, #2
 8002222:	fa01 f202 	lsl.w	r2, r1, r2
 8002226:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002234:	2b00      	cmp	r3, #0
 8002236:	d038      	beq.n	80022aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002240:	e033      	b.n	80022aa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002246:	f003 031f 	and.w	r3, r3, #31
 800224a:	2208      	movs	r2, #8
 800224c:	409a      	lsls	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4013      	ands	r3, r2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d02a      	beq.n	80022ac <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	2b00      	cmp	r3, #0
 800225e:	d025      	beq.n	80022ac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 020e 	bic.w	r2, r2, #14
 800226e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002274:	f003 021f 	and.w	r2, r3, #31
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227c:	2101      	movs	r1, #1
 800227e:	fa01 f202 	lsl.w	r2, r1, r2
 8002282:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d004      	beq.n	80022ac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80022aa:	bf00      	nop
 80022ac:	bf00      	nop
}
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
 80022c0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80022ca:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d004      	beq.n	80022de <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80022dc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e2:	f003 021f 	and.w	r2, r3, #31
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ea:	2101      	movs	r1, #1
 80022ec:	fa01 f202 	lsl.w	r2, r1, r2
 80022f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2b10      	cmp	r3, #16
 8002300:	d108      	bne.n	8002314 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002312:	e007      	b.n	8002324 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	60da      	str	r2, [r3, #12]
}
 8002324:	bf00      	nop
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002330:	b480      	push	{r7}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	4b16      	ldr	r3, [pc, #88]	@ (8002398 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002340:	429a      	cmp	r2, r3
 8002342:	d802      	bhi.n	800234a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002344:	4b15      	ldr	r3, [pc, #84]	@ (800239c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	e001      	b.n	800234e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800234a:	4b15      	ldr	r3, [pc, #84]	@ (80023a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800234c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	b2db      	uxtb	r3, r3
 8002358:	3b08      	subs	r3, #8
 800235a:	4a12      	ldr	r2, [pc, #72]	@ (80023a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800235c:	fba2 2303 	umull	r2, r3, r2, r3
 8002360:	091b      	lsrs	r3, r3, #4
 8002362:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002368:	089b      	lsrs	r3, r3, #2
 800236a:	009a      	lsls	r2, r3, #2
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4413      	add	r3, r2
 8002370:	461a      	mov	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a0b      	ldr	r2, [pc, #44]	@ (80023a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800237a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f003 031f 	and.w	r3, r3, #31
 8002382:	2201      	movs	r2, #1
 8002384:	409a      	lsls	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800238a:	bf00      	nop
 800238c:	371c      	adds	r7, #28
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	40020407 	.word	0x40020407
 800239c:	40020800 	.word	0x40020800
 80023a0:	40020820 	.word	0x40020820
 80023a4:	cccccccd 	.word	0xcccccccd
 80023a8:	40020880 	.word	0x40020880

080023ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	4b0b      	ldr	r3, [pc, #44]	@ (80023ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80023c0:	4413      	add	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	461a      	mov	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a08      	ldr	r2, [pc, #32]	@ (80023f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80023ce:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	f003 031f 	and.w	r3, r3, #31
 80023d8:	2201      	movs	r2, #1
 80023da:	409a      	lsls	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	1000823f 	.word	0x1000823f
 80023f0:	40020940 	.word	0x40020940

080023f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b087      	sub	sp, #28
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002402:	e15a      	b.n	80026ba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	2101      	movs	r1, #1
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	fa01 f303 	lsl.w	r3, r1, r3
 8002410:	4013      	ands	r3, r2
 8002412:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 814c 	beq.w	80026b4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	2b01      	cmp	r3, #1
 8002426:	d005      	beq.n	8002434 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002430:	2b02      	cmp	r3, #2
 8002432:	d130      	bne.n	8002496 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	2203      	movs	r2, #3
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800246a:	2201      	movs	r2, #1
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4013      	ands	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	091b      	lsrs	r3, r3, #4
 8002480:	f003 0201 	and.w	r2, r3, #1
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	2b03      	cmp	r3, #3
 80024a0:	d017      	beq.n	80024d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	2203      	movs	r2, #3
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43db      	mvns	r3, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4013      	ands	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d123      	bne.n	8002526 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	08da      	lsrs	r2, r3, #3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3208      	adds	r2, #8
 80024e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	220f      	movs	r2, #15
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43db      	mvns	r3, r3
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4013      	ands	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	691a      	ldr	r2, [r3, #16]
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	08da      	lsrs	r2, r3, #3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3208      	adds	r2, #8
 8002520:	6939      	ldr	r1, [r7, #16]
 8002522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	2203      	movs	r2, #3
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4013      	ands	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f003 0203 	and.w	r2, r3, #3
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 80a6 	beq.w	80026b4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002568:	4b5b      	ldr	r3, [pc, #364]	@ (80026d8 <HAL_GPIO_Init+0x2e4>)
 800256a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800256c:	4a5a      	ldr	r2, [pc, #360]	@ (80026d8 <HAL_GPIO_Init+0x2e4>)
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	6613      	str	r3, [r2, #96]	@ 0x60
 8002574:	4b58      	ldr	r3, [pc, #352]	@ (80026d8 <HAL_GPIO_Init+0x2e4>)
 8002576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002580:	4a56      	ldr	r2, [pc, #344]	@ (80026dc <HAL_GPIO_Init+0x2e8>)
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	089b      	lsrs	r3, r3, #2
 8002586:	3302      	adds	r3, #2
 8002588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	220f      	movs	r2, #15
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80025aa:	d01f      	beq.n	80025ec <HAL_GPIO_Init+0x1f8>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a4c      	ldr	r2, [pc, #304]	@ (80026e0 <HAL_GPIO_Init+0x2ec>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d019      	beq.n	80025e8 <HAL_GPIO_Init+0x1f4>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a4b      	ldr	r2, [pc, #300]	@ (80026e4 <HAL_GPIO_Init+0x2f0>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d013      	beq.n	80025e4 <HAL_GPIO_Init+0x1f0>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a4a      	ldr	r2, [pc, #296]	@ (80026e8 <HAL_GPIO_Init+0x2f4>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d00d      	beq.n	80025e0 <HAL_GPIO_Init+0x1ec>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a49      	ldr	r2, [pc, #292]	@ (80026ec <HAL_GPIO_Init+0x2f8>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d007      	beq.n	80025dc <HAL_GPIO_Init+0x1e8>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a48      	ldr	r2, [pc, #288]	@ (80026f0 <HAL_GPIO_Init+0x2fc>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d101      	bne.n	80025d8 <HAL_GPIO_Init+0x1e4>
 80025d4:	2305      	movs	r3, #5
 80025d6:	e00a      	b.n	80025ee <HAL_GPIO_Init+0x1fa>
 80025d8:	2306      	movs	r3, #6
 80025da:	e008      	b.n	80025ee <HAL_GPIO_Init+0x1fa>
 80025dc:	2304      	movs	r3, #4
 80025de:	e006      	b.n	80025ee <HAL_GPIO_Init+0x1fa>
 80025e0:	2303      	movs	r3, #3
 80025e2:	e004      	b.n	80025ee <HAL_GPIO_Init+0x1fa>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e002      	b.n	80025ee <HAL_GPIO_Init+0x1fa>
 80025e8:	2301      	movs	r3, #1
 80025ea:	e000      	b.n	80025ee <HAL_GPIO_Init+0x1fa>
 80025ec:	2300      	movs	r3, #0
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	f002 0203 	and.w	r2, r2, #3
 80025f4:	0092      	lsls	r2, r2, #2
 80025f6:	4093      	lsls	r3, r2
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025fe:	4937      	ldr	r1, [pc, #220]	@ (80026dc <HAL_GPIO_Init+0x2e8>)
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	089b      	lsrs	r3, r3, #2
 8002604:	3302      	adds	r3, #2
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800260c:	4b39      	ldr	r3, [pc, #228]	@ (80026f4 <HAL_GPIO_Init+0x300>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	43db      	mvns	r3, r3
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4013      	ands	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	4313      	orrs	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002630:	4a30      	ldr	r2, [pc, #192]	@ (80026f4 <HAL_GPIO_Init+0x300>)
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002636:	4b2f      	ldr	r3, [pc, #188]	@ (80026f4 <HAL_GPIO_Init+0x300>)
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	43db      	mvns	r3, r3
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	4013      	ands	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4313      	orrs	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800265a:	4a26      	ldr	r2, [pc, #152]	@ (80026f4 <HAL_GPIO_Init+0x300>)
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002660:	4b24      	ldr	r3, [pc, #144]	@ (80026f4 <HAL_GPIO_Init+0x300>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	43db      	mvns	r3, r3
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4013      	ands	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	4313      	orrs	r3, r2
 8002682:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002684:	4a1b      	ldr	r2, [pc, #108]	@ (80026f4 <HAL_GPIO_Init+0x300>)
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800268a:	4b1a      	ldr	r3, [pc, #104]	@ (80026f4 <HAL_GPIO_Init+0x300>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	43db      	mvns	r3, r3
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	4013      	ands	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026ae:	4a11      	ldr	r2, [pc, #68]	@ (80026f4 <HAL_GPIO_Init+0x300>)
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	3301      	adds	r3, #1
 80026b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	fa22 f303 	lsr.w	r3, r2, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f47f ae9d 	bne.w	8002404 <HAL_GPIO_Init+0x10>
  }
}
 80026ca:	bf00      	nop
 80026cc:	bf00      	nop
 80026ce:	371c      	adds	r7, #28
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	40021000 	.word	0x40021000
 80026dc:	40010000 	.word	0x40010000
 80026e0:	48000400 	.word	0x48000400
 80026e4:	48000800 	.word	0x48000800
 80026e8:	48000c00 	.word	0x48000c00
 80026ec:	48001000 	.word	0x48001000
 80026f0:	48001400 	.word	0x48001400
 80026f4:	40010400 	.word	0x40010400

080026f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	807b      	strh	r3, [r7, #2]
 8002704:	4613      	mov	r3, r2
 8002706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002708:	787b      	ldrb	r3, [r7, #1]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800270e:	887a      	ldrh	r2, [r7, #2]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002714:	e002      	b.n	800271c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002716:	887a      	ldrh	r2, [r7, #2]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002732:	4b08      	ldr	r3, [pc, #32]	@ (8002754 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002734:	695a      	ldr	r2, [r3, #20]
 8002736:	88fb      	ldrh	r3, [r7, #6]
 8002738:	4013      	ands	r3, r2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d006      	beq.n	800274c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800273e:	4a05      	ldr	r2, [pc, #20]	@ (8002754 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002740:	88fb      	ldrh	r3, [r7, #6]
 8002742:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002744:	88fb      	ldrh	r3, [r7, #6]
 8002746:	4618      	mov	r0, r3
 8002748:	f000 f806 	bl	8002758 <HAL_GPIO_EXTI_Callback>
  }
}
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40010400 	.word	0x40010400

08002758 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
	...

08002770 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d141      	bne.n	8002802 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800277e:	4b4b      	ldr	r3, [pc, #300]	@ (80028ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002786:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800278a:	d131      	bne.n	80027f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800278c:	4b47      	ldr	r3, [pc, #284]	@ (80028ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800278e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002792:	4a46      	ldr	r2, [pc, #280]	@ (80028ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002794:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002798:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800279c:	4b43      	ldr	r3, [pc, #268]	@ (80028ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80027a4:	4a41      	ldr	r2, [pc, #260]	@ (80028ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027ac:	4b40      	ldr	r3, [pc, #256]	@ (80028b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2232      	movs	r2, #50	@ 0x32
 80027b2:	fb02 f303 	mul.w	r3, r2, r3
 80027b6:	4a3f      	ldr	r2, [pc, #252]	@ (80028b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80027b8:	fba2 2303 	umull	r2, r3, r2, r3
 80027bc:	0c9b      	lsrs	r3, r3, #18
 80027be:	3301      	adds	r3, #1
 80027c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027c2:	e002      	b.n	80027ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027ca:	4b38      	ldr	r3, [pc, #224]	@ (80028ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027d6:	d102      	bne.n	80027de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f2      	bne.n	80027c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027de:	4b33      	ldr	r3, [pc, #204]	@ (80028ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027ea:	d158      	bne.n	800289e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e057      	b.n	80028a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027f0:	4b2e      	ldr	r3, [pc, #184]	@ (80028ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027f6:	4a2d      	ldr	r2, [pc, #180]	@ (80028ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002800:	e04d      	b.n	800289e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002808:	d141      	bne.n	800288e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800280a:	4b28      	ldr	r3, [pc, #160]	@ (80028ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002812:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002816:	d131      	bne.n	800287c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002818:	4b24      	ldr	r3, [pc, #144]	@ (80028ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800281a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800281e:	4a23      	ldr	r2, [pc, #140]	@ (80028ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002820:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002824:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002828:	4b20      	ldr	r3, [pc, #128]	@ (80028ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002830:	4a1e      	ldr	r2, [pc, #120]	@ (80028ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002832:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002836:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002838:	4b1d      	ldr	r3, [pc, #116]	@ (80028b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2232      	movs	r2, #50	@ 0x32
 800283e:	fb02 f303 	mul.w	r3, r2, r3
 8002842:	4a1c      	ldr	r2, [pc, #112]	@ (80028b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002844:	fba2 2303 	umull	r2, r3, r2, r3
 8002848:	0c9b      	lsrs	r3, r3, #18
 800284a:	3301      	adds	r3, #1
 800284c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800284e:	e002      	b.n	8002856 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	3b01      	subs	r3, #1
 8002854:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002856:	4b15      	ldr	r3, [pc, #84]	@ (80028ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800285e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002862:	d102      	bne.n	800286a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f2      	bne.n	8002850 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800286a:	4b10      	ldr	r3, [pc, #64]	@ (80028ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002872:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002876:	d112      	bne.n	800289e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e011      	b.n	80028a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800287c:	4b0b      	ldr	r3, [pc, #44]	@ (80028ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800287e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002882:	4a0a      	ldr	r2, [pc, #40]	@ (80028ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002888:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800288c:	e007      	b.n	800289e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800288e:	4b07      	ldr	r3, [pc, #28]	@ (80028ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002896:	4a05      	ldr	r2, [pc, #20]	@ (80028ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002898:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800289c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	40007000 	.word	0x40007000
 80028b0:	20000000 	.word	0x20000000
 80028b4:	431bde83 	.word	0x431bde83

080028b8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80028bc:	4b05      	ldr	r3, [pc, #20]	@ (80028d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	4a04      	ldr	r2, [pc, #16]	@ (80028d4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80028c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028c6:	6093      	str	r3, [r2, #8]
}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	40007000 	.word	0x40007000

080028d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e2fe      	b.n	8002ee8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d075      	beq.n	80029e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028f6:	4b97      	ldr	r3, [pc, #604]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 030c 	and.w	r3, r3, #12
 80028fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002900:	4b94      	ldr	r3, [pc, #592]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	2b0c      	cmp	r3, #12
 800290e:	d102      	bne.n	8002916 <HAL_RCC_OscConfig+0x3e>
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	2b03      	cmp	r3, #3
 8002914:	d002      	beq.n	800291c <HAL_RCC_OscConfig+0x44>
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	2b08      	cmp	r3, #8
 800291a:	d10b      	bne.n	8002934 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291c:	4b8d      	ldr	r3, [pc, #564]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d05b      	beq.n	80029e0 <HAL_RCC_OscConfig+0x108>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d157      	bne.n	80029e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e2d9      	b.n	8002ee8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800293c:	d106      	bne.n	800294c <HAL_RCC_OscConfig+0x74>
 800293e:	4b85      	ldr	r3, [pc, #532]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a84      	ldr	r2, [pc, #528]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 8002944:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	e01d      	b.n	8002988 <HAL_RCC_OscConfig+0xb0>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002954:	d10c      	bne.n	8002970 <HAL_RCC_OscConfig+0x98>
 8002956:	4b7f      	ldr	r3, [pc, #508]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a7e      	ldr	r2, [pc, #504]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 800295c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	4b7c      	ldr	r3, [pc, #496]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a7b      	ldr	r2, [pc, #492]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 8002968:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	e00b      	b.n	8002988 <HAL_RCC_OscConfig+0xb0>
 8002970:	4b78      	ldr	r3, [pc, #480]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a77      	ldr	r2, [pc, #476]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 8002976:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	4b75      	ldr	r3, [pc, #468]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a74      	ldr	r2, [pc, #464]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 8002982:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002986:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d013      	beq.n	80029b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002990:	f7ff f8e2 	bl	8001b58 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002998:	f7ff f8de 	bl	8001b58 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b64      	cmp	r3, #100	@ 0x64
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e29e      	b.n	8002ee8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029aa:	4b6a      	ldr	r3, [pc, #424]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0f0      	beq.n	8002998 <HAL_RCC_OscConfig+0xc0>
 80029b6:	e014      	b.n	80029e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b8:	f7ff f8ce 	bl	8001b58 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029c0:	f7ff f8ca 	bl	8001b58 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b64      	cmp	r3, #100	@ 0x64
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e28a      	b.n	8002ee8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029d2:	4b60      	ldr	r3, [pc, #384]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f0      	bne.n	80029c0 <HAL_RCC_OscConfig+0xe8>
 80029de:	e000      	b.n	80029e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d075      	beq.n	8002ada <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029ee:	4b59      	ldr	r3, [pc, #356]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 030c 	and.w	r3, r3, #12
 80029f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029f8:	4b56      	ldr	r3, [pc, #344]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	f003 0303 	and.w	r3, r3, #3
 8002a00:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	2b0c      	cmp	r3, #12
 8002a06:	d102      	bne.n	8002a0e <HAL_RCC_OscConfig+0x136>
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d002      	beq.n	8002a14 <HAL_RCC_OscConfig+0x13c>
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d11f      	bne.n	8002a54 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a14:	4b4f      	ldr	r3, [pc, #316]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d005      	beq.n	8002a2c <HAL_RCC_OscConfig+0x154>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e25d      	b.n	8002ee8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a2c:	4b49      	ldr	r3, [pc, #292]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	061b      	lsls	r3, r3, #24
 8002a3a:	4946      	ldr	r1, [pc, #280]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a40:	4b45      	ldr	r3, [pc, #276]	@ (8002b58 <HAL_RCC_OscConfig+0x280>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff f83b 	bl	8001ac0 <HAL_InitTick>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d043      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e249      	b.n	8002ee8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d023      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a5c:	4b3d      	ldr	r3, [pc, #244]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a3c      	ldr	r2, [pc, #240]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 8002a62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a68:	f7ff f876 	bl	8001b58 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a70:	f7ff f872 	bl	8001b58 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e232      	b.n	8002ee8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a82:	4b34      	ldr	r3, [pc, #208]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0f0      	beq.n	8002a70 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a8e:	4b31      	ldr	r3, [pc, #196]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	061b      	lsls	r3, r3, #24
 8002a9c:	492d      	ldr	r1, [pc, #180]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	604b      	str	r3, [r1, #4]
 8002aa2:	e01a      	b.n	8002ada <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a2a      	ldr	r2, [pc, #168]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 8002aaa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab0:	f7ff f852 	bl	8001b58 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ab8:	f7ff f84e 	bl	8001b58 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e20e      	b.n	8002ee8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002aca:	4b22      	ldr	r3, [pc, #136]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x1e0>
 8002ad6:	e000      	b.n	8002ada <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ad8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d041      	beq.n	8002b6a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d01c      	beq.n	8002b28 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aee:	4b19      	ldr	r3, [pc, #100]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 8002af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002af4:	4a17      	ldr	r2, [pc, #92]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 8002af6:	f043 0301 	orr.w	r3, r3, #1
 8002afa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afe:	f7ff f82b 	bl	8001b58 <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b06:	f7ff f827 	bl	8001b58 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e1e7      	b.n	8002ee8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b18:	4b0e      	ldr	r3, [pc, #56]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 8002b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0ef      	beq.n	8002b06 <HAL_RCC_OscConfig+0x22e>
 8002b26:	e020      	b.n	8002b6a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b28:	4b0a      	ldr	r3, [pc, #40]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 8002b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b2e:	4a09      	ldr	r2, [pc, #36]	@ (8002b54 <HAL_RCC_OscConfig+0x27c>)
 8002b30:	f023 0301 	bic.w	r3, r3, #1
 8002b34:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b38:	f7ff f80e 	bl	8001b58 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b3e:	e00d      	b.n	8002b5c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b40:	f7ff f80a 	bl	8001b58 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d906      	bls.n	8002b5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e1ca      	b.n	8002ee8 <HAL_RCC_OscConfig+0x610>
 8002b52:	bf00      	nop
 8002b54:	40021000 	.word	0x40021000
 8002b58:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b5c:	4b8c      	ldr	r3, [pc, #560]	@ (8002d90 <HAL_RCC_OscConfig+0x4b8>)
 8002b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1ea      	bne.n	8002b40 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 80a6 	beq.w	8002cc4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b7c:	4b84      	ldr	r3, [pc, #528]	@ (8002d90 <HAL_RCC_OscConfig+0x4b8>)
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_RCC_OscConfig+0x2b4>
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e000      	b.n	8002b8e <HAL_RCC_OscConfig+0x2b6>
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00d      	beq.n	8002bae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b92:	4b7f      	ldr	r3, [pc, #508]	@ (8002d90 <HAL_RCC_OscConfig+0x4b8>)
 8002b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b96:	4a7e      	ldr	r2, [pc, #504]	@ (8002d90 <HAL_RCC_OscConfig+0x4b8>)
 8002b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b9e:	4b7c      	ldr	r3, [pc, #496]	@ (8002d90 <HAL_RCC_OscConfig+0x4b8>)
 8002ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002baa:	2301      	movs	r3, #1
 8002bac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bae:	4b79      	ldr	r3, [pc, #484]	@ (8002d94 <HAL_RCC_OscConfig+0x4bc>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d118      	bne.n	8002bec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bba:	4b76      	ldr	r3, [pc, #472]	@ (8002d94 <HAL_RCC_OscConfig+0x4bc>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a75      	ldr	r2, [pc, #468]	@ (8002d94 <HAL_RCC_OscConfig+0x4bc>)
 8002bc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bc6:	f7fe ffc7 	bl	8001b58 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bce:	f7fe ffc3 	bl	8001b58 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e183      	b.n	8002ee8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002be0:	4b6c      	ldr	r3, [pc, #432]	@ (8002d94 <HAL_RCC_OscConfig+0x4bc>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d108      	bne.n	8002c06 <HAL_RCC_OscConfig+0x32e>
 8002bf4:	4b66      	ldr	r3, [pc, #408]	@ (8002d90 <HAL_RCC_OscConfig+0x4b8>)
 8002bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bfa:	4a65      	ldr	r2, [pc, #404]	@ (8002d90 <HAL_RCC_OscConfig+0x4b8>)
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c04:	e024      	b.n	8002c50 <HAL_RCC_OscConfig+0x378>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b05      	cmp	r3, #5
 8002c0c:	d110      	bne.n	8002c30 <HAL_RCC_OscConfig+0x358>
 8002c0e:	4b60      	ldr	r3, [pc, #384]	@ (8002d90 <HAL_RCC_OscConfig+0x4b8>)
 8002c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c14:	4a5e      	ldr	r2, [pc, #376]	@ (8002d90 <HAL_RCC_OscConfig+0x4b8>)
 8002c16:	f043 0304 	orr.w	r3, r3, #4
 8002c1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c1e:	4b5c      	ldr	r3, [pc, #368]	@ (8002d90 <HAL_RCC_OscConfig+0x4b8>)
 8002c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c24:	4a5a      	ldr	r2, [pc, #360]	@ (8002d90 <HAL_RCC_OscConfig+0x4b8>)
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c2e:	e00f      	b.n	8002c50 <HAL_RCC_OscConfig+0x378>
 8002c30:	4b57      	ldr	r3, [pc, #348]	@ (8002d90 <HAL_RCC_OscConfig+0x4b8>)
 8002c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c36:	4a56      	ldr	r2, [pc, #344]	@ (8002d90 <HAL_RCC_OscConfig+0x4b8>)
 8002c38:	f023 0301 	bic.w	r3, r3, #1
 8002c3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c40:	4b53      	ldr	r3, [pc, #332]	@ (8002d90 <HAL_RCC_OscConfig+0x4b8>)
 8002c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c46:	4a52      	ldr	r2, [pc, #328]	@ (8002d90 <HAL_RCC_OscConfig+0x4b8>)
 8002c48:	f023 0304 	bic.w	r3, r3, #4
 8002c4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d016      	beq.n	8002c86 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c58:	f7fe ff7e 	bl	8001b58 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c5e:	e00a      	b.n	8002c76 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c60:	f7fe ff7a 	bl	8001b58 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e138      	b.n	8002ee8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c76:	4b46      	ldr	r3, [pc, #280]	@ (8002d90 <HAL_RCC_OscConfig+0x4b8>)
 8002c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0ed      	beq.n	8002c60 <HAL_RCC_OscConfig+0x388>
 8002c84:	e015      	b.n	8002cb2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c86:	f7fe ff67 	bl	8001b58 <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c8c:	e00a      	b.n	8002ca4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c8e:	f7fe ff63 	bl	8001b58 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e121      	b.n	8002ee8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ca4:	4b3a      	ldr	r3, [pc, #232]	@ (8002d90 <HAL_RCC_OscConfig+0x4b8>)
 8002ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1ed      	bne.n	8002c8e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cb2:	7ffb      	ldrb	r3, [r7, #31]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d105      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb8:	4b35      	ldr	r3, [pc, #212]	@ (8002d90 <HAL_RCC_OscConfig+0x4b8>)
 8002cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cbc:	4a34      	ldr	r2, [pc, #208]	@ (8002d90 <HAL_RCC_OscConfig+0x4b8>)
 8002cbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cc2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0320 	and.w	r3, r3, #32
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d03c      	beq.n	8002d4a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d01c      	beq.n	8002d12 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002cd8:	4b2d      	ldr	r3, [pc, #180]	@ (8002d90 <HAL_RCC_OscConfig+0x4b8>)
 8002cda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002cde:	4a2c      	ldr	r2, [pc, #176]	@ (8002d90 <HAL_RCC_OscConfig+0x4b8>)
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce8:	f7fe ff36 	bl	8001b58 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cf0:	f7fe ff32 	bl	8001b58 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e0f2      	b.n	8002ee8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d02:	4b23      	ldr	r3, [pc, #140]	@ (8002d90 <HAL_RCC_OscConfig+0x4b8>)
 8002d04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0ef      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x418>
 8002d10:	e01b      	b.n	8002d4a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d12:	4b1f      	ldr	r3, [pc, #124]	@ (8002d90 <HAL_RCC_OscConfig+0x4b8>)
 8002d14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d18:	4a1d      	ldr	r2, [pc, #116]	@ (8002d90 <HAL_RCC_OscConfig+0x4b8>)
 8002d1a:	f023 0301 	bic.w	r3, r3, #1
 8002d1e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d22:	f7fe ff19 	bl	8001b58 <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d2a:	f7fe ff15 	bl	8001b58 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e0d5      	b.n	8002ee8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d3c:	4b14      	ldr	r3, [pc, #80]	@ (8002d90 <HAL_RCC_OscConfig+0x4b8>)
 8002d3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1ef      	bne.n	8002d2a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 80c9 	beq.w	8002ee6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d54:	4b0e      	ldr	r3, [pc, #56]	@ (8002d90 <HAL_RCC_OscConfig+0x4b8>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 030c 	and.w	r3, r3, #12
 8002d5c:	2b0c      	cmp	r3, #12
 8002d5e:	f000 8083 	beq.w	8002e68 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d15e      	bne.n	8002e28 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6a:	4b09      	ldr	r3, [pc, #36]	@ (8002d90 <HAL_RCC_OscConfig+0x4b8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a08      	ldr	r2, [pc, #32]	@ (8002d90 <HAL_RCC_OscConfig+0x4b8>)
 8002d70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d76:	f7fe feef 	bl	8001b58 <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d7c:	e00c      	b.n	8002d98 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d7e:	f7fe feeb 	bl	8001b58 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d905      	bls.n	8002d98 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e0ab      	b.n	8002ee8 <HAL_RCC_OscConfig+0x610>
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d98:	4b55      	ldr	r3, [pc, #340]	@ (8002ef0 <HAL_RCC_OscConfig+0x618>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1ec      	bne.n	8002d7e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002da4:	4b52      	ldr	r3, [pc, #328]	@ (8002ef0 <HAL_RCC_OscConfig+0x618>)
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	4b52      	ldr	r3, [pc, #328]	@ (8002ef4 <HAL_RCC_OscConfig+0x61c>)
 8002daa:	4013      	ands	r3, r2
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6a11      	ldr	r1, [r2, #32]
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002db4:	3a01      	subs	r2, #1
 8002db6:	0112      	lsls	r2, r2, #4
 8002db8:	4311      	orrs	r1, r2
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002dbe:	0212      	lsls	r2, r2, #8
 8002dc0:	4311      	orrs	r1, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002dc6:	0852      	lsrs	r2, r2, #1
 8002dc8:	3a01      	subs	r2, #1
 8002dca:	0552      	lsls	r2, r2, #21
 8002dcc:	4311      	orrs	r1, r2
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002dd2:	0852      	lsrs	r2, r2, #1
 8002dd4:	3a01      	subs	r2, #1
 8002dd6:	0652      	lsls	r2, r2, #25
 8002dd8:	4311      	orrs	r1, r2
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002dde:	06d2      	lsls	r2, r2, #27
 8002de0:	430a      	orrs	r2, r1
 8002de2:	4943      	ldr	r1, [pc, #268]	@ (8002ef0 <HAL_RCC_OscConfig+0x618>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002de8:	4b41      	ldr	r3, [pc, #260]	@ (8002ef0 <HAL_RCC_OscConfig+0x618>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a40      	ldr	r2, [pc, #256]	@ (8002ef0 <HAL_RCC_OscConfig+0x618>)
 8002dee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002df2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002df4:	4b3e      	ldr	r3, [pc, #248]	@ (8002ef0 <HAL_RCC_OscConfig+0x618>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	4a3d      	ldr	r2, [pc, #244]	@ (8002ef0 <HAL_RCC_OscConfig+0x618>)
 8002dfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dfe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e00:	f7fe feaa 	bl	8001b58 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e08:	f7fe fea6 	bl	8001b58 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e066      	b.n	8002ee8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e1a:	4b35      	ldr	r3, [pc, #212]	@ (8002ef0 <HAL_RCC_OscConfig+0x618>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f0      	beq.n	8002e08 <HAL_RCC_OscConfig+0x530>
 8002e26:	e05e      	b.n	8002ee6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e28:	4b31      	ldr	r3, [pc, #196]	@ (8002ef0 <HAL_RCC_OscConfig+0x618>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a30      	ldr	r2, [pc, #192]	@ (8002ef0 <HAL_RCC_OscConfig+0x618>)
 8002e2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e34:	f7fe fe90 	bl	8001b58 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3c:	f7fe fe8c 	bl	8001b58 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e04c      	b.n	8002ee8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e4e:	4b28      	ldr	r3, [pc, #160]	@ (8002ef0 <HAL_RCC_OscConfig+0x618>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1f0      	bne.n	8002e3c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002e5a:	4b25      	ldr	r3, [pc, #148]	@ (8002ef0 <HAL_RCC_OscConfig+0x618>)
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	4924      	ldr	r1, [pc, #144]	@ (8002ef0 <HAL_RCC_OscConfig+0x618>)
 8002e60:	4b25      	ldr	r3, [pc, #148]	@ (8002ef8 <HAL_RCC_OscConfig+0x620>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	60cb      	str	r3, [r1, #12]
 8002e66:	e03e      	b.n	8002ee6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e039      	b.n	8002ee8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002e74:	4b1e      	ldr	r3, [pc, #120]	@ (8002ef0 <HAL_RCC_OscConfig+0x618>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f003 0203 	and.w	r2, r3, #3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d12c      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e92:	3b01      	subs	r3, #1
 8002e94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d123      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d11b      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d113      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec4:	085b      	lsrs	r3, r3, #1
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d109      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ed8:	085b      	lsrs	r3, r3, #1
 8002eda:	3b01      	subs	r3, #1
 8002edc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d001      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e000      	b.n	8002ee8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3720      	adds	r7, #32
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	019f800c 	.word	0x019f800c
 8002ef8:	feeefffc 	.word	0xfeeefffc

08002efc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e11e      	b.n	8003152 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f14:	4b91      	ldr	r3, [pc, #580]	@ (800315c <HAL_RCC_ClockConfig+0x260>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 030f 	and.w	r3, r3, #15
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d910      	bls.n	8002f44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f22:	4b8e      	ldr	r3, [pc, #568]	@ (800315c <HAL_RCC_ClockConfig+0x260>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f023 020f 	bic.w	r2, r3, #15
 8002f2a:	498c      	ldr	r1, [pc, #560]	@ (800315c <HAL_RCC_ClockConfig+0x260>)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f32:	4b8a      	ldr	r3, [pc, #552]	@ (800315c <HAL_RCC_ClockConfig+0x260>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d001      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e106      	b.n	8003152 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d073      	beq.n	8003038 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	d129      	bne.n	8002fac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f58:	4b81      	ldr	r3, [pc, #516]	@ (8003160 <HAL_RCC_ClockConfig+0x264>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0f4      	b.n	8003152 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002f68:	f000 f99e 	bl	80032a8 <RCC_GetSysClockFreqFromPLLSource>
 8002f6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4a7c      	ldr	r2, [pc, #496]	@ (8003164 <HAL_RCC_ClockConfig+0x268>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d93f      	bls.n	8002ff6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002f76:	4b7a      	ldr	r3, [pc, #488]	@ (8003160 <HAL_RCC_ClockConfig+0x264>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d009      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d033      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d12f      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f96:	4b72      	ldr	r3, [pc, #456]	@ (8003160 <HAL_RCC_ClockConfig+0x264>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f9e:	4a70      	ldr	r2, [pc, #448]	@ (8003160 <HAL_RCC_ClockConfig+0x264>)
 8002fa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fa4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002fa6:	2380      	movs	r3, #128	@ 0x80
 8002fa8:	617b      	str	r3, [r7, #20]
 8002faa:	e024      	b.n	8002ff6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d107      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fb4:	4b6a      	ldr	r3, [pc, #424]	@ (8003160 <HAL_RCC_ClockConfig+0x264>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d109      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0c6      	b.n	8003152 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fc4:	4b66      	ldr	r3, [pc, #408]	@ (8003160 <HAL_RCC_ClockConfig+0x264>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e0be      	b.n	8003152 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002fd4:	f000 f8ce 	bl	8003174 <HAL_RCC_GetSysClockFreq>
 8002fd8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	4a61      	ldr	r2, [pc, #388]	@ (8003164 <HAL_RCC_ClockConfig+0x268>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d909      	bls.n	8002ff6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002fe2:	4b5f      	ldr	r3, [pc, #380]	@ (8003160 <HAL_RCC_ClockConfig+0x264>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002fea:	4a5d      	ldr	r2, [pc, #372]	@ (8003160 <HAL_RCC_ClockConfig+0x264>)
 8002fec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ff0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002ff2:	2380      	movs	r3, #128	@ 0x80
 8002ff4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ff6:	4b5a      	ldr	r3, [pc, #360]	@ (8003160 <HAL_RCC_ClockConfig+0x264>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f023 0203 	bic.w	r2, r3, #3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	4957      	ldr	r1, [pc, #348]	@ (8003160 <HAL_RCC_ClockConfig+0x264>)
 8003004:	4313      	orrs	r3, r2
 8003006:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003008:	f7fe fda6 	bl	8001b58 <HAL_GetTick>
 800300c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300e:	e00a      	b.n	8003026 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003010:	f7fe fda2 	bl	8001b58 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800301e:	4293      	cmp	r3, r2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e095      	b.n	8003152 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003026:	4b4e      	ldr	r3, [pc, #312]	@ (8003160 <HAL_RCC_ClockConfig+0x264>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 020c 	and.w	r2, r3, #12
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	429a      	cmp	r2, r3
 8003036:	d1eb      	bne.n	8003010 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d023      	beq.n	800308c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	d005      	beq.n	800305c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003050:	4b43      	ldr	r3, [pc, #268]	@ (8003160 <HAL_RCC_ClockConfig+0x264>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	4a42      	ldr	r2, [pc, #264]	@ (8003160 <HAL_RCC_ClockConfig+0x264>)
 8003056:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800305a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0308 	and.w	r3, r3, #8
 8003064:	2b00      	cmp	r3, #0
 8003066:	d007      	beq.n	8003078 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003068:	4b3d      	ldr	r3, [pc, #244]	@ (8003160 <HAL_RCC_ClockConfig+0x264>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003070:	4a3b      	ldr	r2, [pc, #236]	@ (8003160 <HAL_RCC_ClockConfig+0x264>)
 8003072:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003076:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003078:	4b39      	ldr	r3, [pc, #228]	@ (8003160 <HAL_RCC_ClockConfig+0x264>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	4936      	ldr	r1, [pc, #216]	@ (8003160 <HAL_RCC_ClockConfig+0x264>)
 8003086:	4313      	orrs	r3, r2
 8003088:	608b      	str	r3, [r1, #8]
 800308a:	e008      	b.n	800309e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	2b80      	cmp	r3, #128	@ 0x80
 8003090:	d105      	bne.n	800309e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003092:	4b33      	ldr	r3, [pc, #204]	@ (8003160 <HAL_RCC_ClockConfig+0x264>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	4a32      	ldr	r2, [pc, #200]	@ (8003160 <HAL_RCC_ClockConfig+0x264>)
 8003098:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800309c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800309e:	4b2f      	ldr	r3, [pc, #188]	@ (800315c <HAL_RCC_ClockConfig+0x260>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d21d      	bcs.n	80030e8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ac:	4b2b      	ldr	r3, [pc, #172]	@ (800315c <HAL_RCC_ClockConfig+0x260>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f023 020f 	bic.w	r2, r3, #15
 80030b4:	4929      	ldr	r1, [pc, #164]	@ (800315c <HAL_RCC_ClockConfig+0x260>)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80030bc:	f7fe fd4c 	bl	8001b58 <HAL_GetTick>
 80030c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c2:	e00a      	b.n	80030da <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c4:	f7fe fd48 	bl	8001b58 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e03b      	b.n	8003152 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030da:	4b20      	ldr	r3, [pc, #128]	@ (800315c <HAL_RCC_ClockConfig+0x260>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d1ed      	bne.n	80030c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d008      	beq.n	8003106 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003160 <HAL_RCC_ClockConfig+0x264>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	4917      	ldr	r1, [pc, #92]	@ (8003160 <HAL_RCC_ClockConfig+0x264>)
 8003102:	4313      	orrs	r3, r2
 8003104:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d009      	beq.n	8003126 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003112:	4b13      	ldr	r3, [pc, #76]	@ (8003160 <HAL_RCC_ClockConfig+0x264>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	490f      	ldr	r1, [pc, #60]	@ (8003160 <HAL_RCC_ClockConfig+0x264>)
 8003122:	4313      	orrs	r3, r2
 8003124:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003126:	f000 f825 	bl	8003174 <HAL_RCC_GetSysClockFreq>
 800312a:	4602      	mov	r2, r0
 800312c:	4b0c      	ldr	r3, [pc, #48]	@ (8003160 <HAL_RCC_ClockConfig+0x264>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	091b      	lsrs	r3, r3, #4
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	490c      	ldr	r1, [pc, #48]	@ (8003168 <HAL_RCC_ClockConfig+0x26c>)
 8003138:	5ccb      	ldrb	r3, [r1, r3]
 800313a:	f003 031f 	and.w	r3, r3, #31
 800313e:	fa22 f303 	lsr.w	r3, r2, r3
 8003142:	4a0a      	ldr	r2, [pc, #40]	@ (800316c <HAL_RCC_ClockConfig+0x270>)
 8003144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003146:	4b0a      	ldr	r3, [pc, #40]	@ (8003170 <HAL_RCC_ClockConfig+0x274>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f7fe fcb8 	bl	8001ac0 <HAL_InitTick>
 8003150:	4603      	mov	r3, r0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40022000 	.word	0x40022000
 8003160:	40021000 	.word	0x40021000
 8003164:	04c4b400 	.word	0x04c4b400
 8003168:	08006748 	.word	0x08006748
 800316c:	20000000 	.word	0x20000000
 8003170:	20000004 	.word	0x20000004

08003174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800317a:	4b2c      	ldr	r3, [pc, #176]	@ (800322c <HAL_RCC_GetSysClockFreq+0xb8>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 030c 	and.w	r3, r3, #12
 8003182:	2b04      	cmp	r3, #4
 8003184:	d102      	bne.n	800318c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003186:	4b2a      	ldr	r3, [pc, #168]	@ (8003230 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	e047      	b.n	800321c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800318c:	4b27      	ldr	r3, [pc, #156]	@ (800322c <HAL_RCC_GetSysClockFreq+0xb8>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 030c 	and.w	r3, r3, #12
 8003194:	2b08      	cmp	r3, #8
 8003196:	d102      	bne.n	800319e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003198:	4b26      	ldr	r3, [pc, #152]	@ (8003234 <HAL_RCC_GetSysClockFreq+0xc0>)
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	e03e      	b.n	800321c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800319e:	4b23      	ldr	r3, [pc, #140]	@ (800322c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 030c 	and.w	r3, r3, #12
 80031a6:	2b0c      	cmp	r3, #12
 80031a8:	d136      	bne.n	8003218 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031aa:	4b20      	ldr	r3, [pc, #128]	@ (800322c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031b4:	4b1d      	ldr	r3, [pc, #116]	@ (800322c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	091b      	lsrs	r3, r3, #4
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	3301      	adds	r3, #1
 80031c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d10c      	bne.n	80031e2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031c8:	4a1a      	ldr	r2, [pc, #104]	@ (8003234 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d0:	4a16      	ldr	r2, [pc, #88]	@ (800322c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031d2:	68d2      	ldr	r2, [r2, #12]
 80031d4:	0a12      	lsrs	r2, r2, #8
 80031d6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80031da:	fb02 f303 	mul.w	r3, r2, r3
 80031de:	617b      	str	r3, [r7, #20]
      break;
 80031e0:	e00c      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031e2:	4a13      	ldr	r2, [pc, #76]	@ (8003230 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ea:	4a10      	ldr	r2, [pc, #64]	@ (800322c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031ec:	68d2      	ldr	r2, [r2, #12]
 80031ee:	0a12      	lsrs	r2, r2, #8
 80031f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80031f4:	fb02 f303 	mul.w	r3, r2, r3
 80031f8:	617b      	str	r3, [r7, #20]
      break;
 80031fa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031fc:	4b0b      	ldr	r3, [pc, #44]	@ (800322c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	0e5b      	lsrs	r3, r3, #25
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	3301      	adds	r3, #1
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	fbb2 f3f3 	udiv	r3, r2, r3
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	e001      	b.n	800321c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800321c:	693b      	ldr	r3, [r7, #16]
}
 800321e:	4618      	mov	r0, r3
 8003220:	371c      	adds	r7, #28
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40021000 	.word	0x40021000
 8003230:	00f42400 	.word	0x00f42400
 8003234:	016e3600 	.word	0x016e3600

08003238 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800323c:	4b03      	ldr	r3, [pc, #12]	@ (800324c <HAL_RCC_GetHCLKFreq+0x14>)
 800323e:	681b      	ldr	r3, [r3, #0]
}
 8003240:	4618      	mov	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	20000000 	.word	0x20000000

08003250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003254:	f7ff fff0 	bl	8003238 <HAL_RCC_GetHCLKFreq>
 8003258:	4602      	mov	r2, r0
 800325a:	4b06      	ldr	r3, [pc, #24]	@ (8003274 <HAL_RCC_GetPCLK1Freq+0x24>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	0a1b      	lsrs	r3, r3, #8
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	4904      	ldr	r1, [pc, #16]	@ (8003278 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003266:	5ccb      	ldrb	r3, [r1, r3]
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003270:	4618      	mov	r0, r3
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40021000 	.word	0x40021000
 8003278:	08006758 	.word	0x08006758

0800327c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003280:	f7ff ffda 	bl	8003238 <HAL_RCC_GetHCLKFreq>
 8003284:	4602      	mov	r2, r0
 8003286:	4b06      	ldr	r3, [pc, #24]	@ (80032a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	0adb      	lsrs	r3, r3, #11
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	4904      	ldr	r1, [pc, #16]	@ (80032a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003292:	5ccb      	ldrb	r3, [r1, r3]
 8003294:	f003 031f 	and.w	r3, r3, #31
 8003298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800329c:	4618      	mov	r0, r3
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40021000 	.word	0x40021000
 80032a4:	08006758 	.word	0x08006758

080032a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003328 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003328 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	3301      	adds	r3, #1
 80032c4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	2b03      	cmp	r3, #3
 80032ca:	d10c      	bne.n	80032e6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032cc:	4a17      	ldr	r2, [pc, #92]	@ (800332c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d4:	4a14      	ldr	r2, [pc, #80]	@ (8003328 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032d6:	68d2      	ldr	r2, [r2, #12]
 80032d8:	0a12      	lsrs	r2, r2, #8
 80032da:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80032de:	fb02 f303 	mul.w	r3, r2, r3
 80032e2:	617b      	str	r3, [r7, #20]
    break;
 80032e4:	e00c      	b.n	8003300 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032e6:	4a12      	ldr	r2, [pc, #72]	@ (8003330 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ee:	4a0e      	ldr	r2, [pc, #56]	@ (8003328 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032f0:	68d2      	ldr	r2, [r2, #12]
 80032f2:	0a12      	lsrs	r2, r2, #8
 80032f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80032f8:	fb02 f303 	mul.w	r3, r2, r3
 80032fc:	617b      	str	r3, [r7, #20]
    break;
 80032fe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003300:	4b09      	ldr	r3, [pc, #36]	@ (8003328 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	0e5b      	lsrs	r3, r3, #25
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	3301      	adds	r3, #1
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	fbb2 f3f3 	udiv	r3, r2, r3
 8003318:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800331a:	687b      	ldr	r3, [r7, #4]
}
 800331c:	4618      	mov	r0, r3
 800331e:	371c      	adds	r7, #28
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	40021000 	.word	0x40021000
 800332c:	016e3600 	.word	0x016e3600
 8003330:	00f42400 	.word	0x00f42400

08003334 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800333c:	2300      	movs	r3, #0
 800333e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003340:	2300      	movs	r3, #0
 8003342:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 8098 	beq.w	8003482 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003352:	2300      	movs	r3, #0
 8003354:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003356:	4b43      	ldr	r3, [pc, #268]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800335a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10d      	bne.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003362:	4b40      	ldr	r3, [pc, #256]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003366:	4a3f      	ldr	r2, [pc, #252]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003368:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800336c:	6593      	str	r3, [r2, #88]	@ 0x58
 800336e:	4b3d      	ldr	r3, [pc, #244]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003376:	60bb      	str	r3, [r7, #8]
 8003378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800337a:	2301      	movs	r3, #1
 800337c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800337e:	4b3a      	ldr	r3, [pc, #232]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a39      	ldr	r2, [pc, #228]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003388:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800338a:	f7fe fbe5 	bl	8001b58 <HAL_GetTick>
 800338e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003390:	e009      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003392:	f7fe fbe1 	bl	8001b58 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d902      	bls.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	74fb      	strb	r3, [r7, #19]
        break;
 80033a4:	e005      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033a6:	4b30      	ldr	r3, [pc, #192]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0ef      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80033b2:	7cfb      	ldrb	r3, [r7, #19]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d159      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033b8:	4b2a      	ldr	r3, [pc, #168]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033c2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d01e      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d019      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033d4:	4b23      	ldr	r3, [pc, #140]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033e0:	4b20      	ldr	r3, [pc, #128]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033e6:	4a1f      	ldr	r2, [pc, #124]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033f0:	4b1c      	ldr	r3, [pc, #112]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003400:	4a18      	ldr	r2, [pc, #96]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d016      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003412:	f7fe fba1 	bl	8001b58 <HAL_GetTick>
 8003416:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003418:	e00b      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800341a:	f7fe fb9d 	bl	8001b58 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003428:	4293      	cmp	r3, r2
 800342a:	d902      	bls.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	74fb      	strb	r3, [r7, #19]
            break;
 8003430:	e006      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003432:	4b0c      	ldr	r3, [pc, #48]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003434:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0ec      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003440:	7cfb      	ldrb	r3, [r7, #19]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10b      	bne.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003446:	4b07      	ldr	r3, [pc, #28]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800344c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003454:	4903      	ldr	r1, [pc, #12]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003456:	4313      	orrs	r3, r2
 8003458:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800345c:	e008      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800345e:	7cfb      	ldrb	r3, [r7, #19]
 8003460:	74bb      	strb	r3, [r7, #18]
 8003462:	e005      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003464:	40021000 	.word	0x40021000
 8003468:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800346c:	7cfb      	ldrb	r3, [r7, #19]
 800346e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003470:	7c7b      	ldrb	r3, [r7, #17]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d105      	bne.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003476:	4ba7      	ldr	r3, [pc, #668]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800347a:	4aa6      	ldr	r2, [pc, #664]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800347c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003480:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00a      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800348e:	4ba1      	ldr	r3, [pc, #644]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003494:	f023 0203 	bic.w	r2, r3, #3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	499d      	ldr	r1, [pc, #628]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00a      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034b0:	4b98      	ldr	r3, [pc, #608]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034b6:	f023 020c 	bic.w	r2, r3, #12
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	4995      	ldr	r1, [pc, #596]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0304 	and.w	r3, r3, #4
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00a      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034d2:	4b90      	ldr	r3, [pc, #576]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	498c      	ldr	r1, [pc, #560]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0308 	and.w	r3, r3, #8
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00a      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034f4:	4b87      	ldr	r3, [pc, #540]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	4984      	ldr	r1, [pc, #528]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003504:	4313      	orrs	r3, r2
 8003506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0310 	and.w	r3, r3, #16
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003516:	4b7f      	ldr	r3, [pc, #508]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800351c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	497b      	ldr	r1, [pc, #492]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00a      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003538:	4b76      	ldr	r3, [pc, #472]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800353a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800353e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	4973      	ldr	r1, [pc, #460]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003548:	4313      	orrs	r3, r2
 800354a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800355a:	4b6e      	ldr	r3, [pc, #440]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800355c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003560:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	496a      	ldr	r1, [pc, #424]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800357c:	4b65      	ldr	r3, [pc, #404]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003582:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	4962      	ldr	r1, [pc, #392]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800359e:	4b5d      	ldr	r3, [pc, #372]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ac:	4959      	ldr	r1, [pc, #356]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00a      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035c0:	4b54      	ldr	r3, [pc, #336]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80035c6:	f023 0203 	bic.w	r2, r3, #3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ce:	4951      	ldr	r1, [pc, #324]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035e2:	4b4c      	ldr	r3, [pc, #304]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f0:	4948      	ldr	r1, [pc, #288]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003600:	2b00      	cmp	r3, #0
 8003602:	d015      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003604:	4b43      	ldr	r3, [pc, #268]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800360a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003612:	4940      	ldr	r1, [pc, #256]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003614:	4313      	orrs	r3, r2
 8003616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003622:	d105      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003624:	4b3b      	ldr	r3, [pc, #236]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	4a3a      	ldr	r2, [pc, #232]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800362a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800362e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003638:	2b00      	cmp	r3, #0
 800363a:	d015      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800363c:	4b35      	ldr	r3, [pc, #212]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800363e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003642:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800364a:	4932      	ldr	r1, [pc, #200]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800364c:	4313      	orrs	r3, r2
 800364e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003656:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800365a:	d105      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800365c:	4b2d      	ldr	r3, [pc, #180]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	4a2c      	ldr	r2, [pc, #176]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003662:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003666:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d015      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003674:	4b27      	ldr	r3, [pc, #156]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800367a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003682:	4924      	ldr	r1, [pc, #144]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003684:	4313      	orrs	r3, r2
 8003686:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800368e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003692:	d105      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003694:	4b1f      	ldr	r3, [pc, #124]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	4a1e      	ldr	r2, [pc, #120]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800369a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800369e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d015      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036ac:	4b19      	ldr	r3, [pc, #100]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ba:	4916      	ldr	r1, [pc, #88]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036ca:	d105      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036cc:	4b11      	ldr	r3, [pc, #68]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	4a10      	ldr	r2, [pc, #64]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036d6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d019      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f2:	4908      	ldr	r1, [pc, #32]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003702:	d109      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003704:	4b03      	ldr	r3, [pc, #12]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4a02      	ldr	r2, [pc, #8]	@ (8003714 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800370a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800370e:	60d3      	str	r3, [r2, #12]
 8003710:	e002      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003712:	bf00      	nop
 8003714:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d015      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003724:	4b29      	ldr	r3, [pc, #164]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800372a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003732:	4926      	ldr	r1, [pc, #152]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003734:	4313      	orrs	r3, r2
 8003736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003742:	d105      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003744:	4b21      	ldr	r3, [pc, #132]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	4a20      	ldr	r2, [pc, #128]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800374a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800374e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d015      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800375c:	4b1b      	ldr	r3, [pc, #108]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800375e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003762:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800376a:	4918      	ldr	r1, [pc, #96]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800376c:	4313      	orrs	r3, r2
 800376e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800377a:	d105      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800377c:	4b13      	ldr	r3, [pc, #76]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	4a12      	ldr	r2, [pc, #72]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003782:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003786:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d015      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003794:	4b0d      	ldr	r3, [pc, #52]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003796:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800379a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037a2:	490a      	ldr	r1, [pc, #40]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037b2:	d105      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037b4:	4b05      	ldr	r3, [pc, #20]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	4a04      	ldr	r2, [pc, #16]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80037c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3718      	adds	r7, #24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40021000 	.word	0x40021000

080037d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e049      	b.n	8003876 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d106      	bne.n	80037fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7fd ff5a 	bl	80016b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3304      	adds	r3, #4
 800380c:	4619      	mov	r1, r3
 800380e:	4610      	mov	r0, r2
 8003810:	f000 fca6 	bl	8004160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
	...

08003880 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b01      	cmp	r3, #1
 8003892:	d001      	beq.n	8003898 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e054      	b.n	8003942 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2202      	movs	r2, #2
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a26      	ldr	r2, [pc, #152]	@ (8003950 <HAL_TIM_Base_Start_IT+0xd0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d022      	beq.n	8003900 <HAL_TIM_Base_Start_IT+0x80>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038c2:	d01d      	beq.n	8003900 <HAL_TIM_Base_Start_IT+0x80>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a22      	ldr	r2, [pc, #136]	@ (8003954 <HAL_TIM_Base_Start_IT+0xd4>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d018      	beq.n	8003900 <HAL_TIM_Base_Start_IT+0x80>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a21      	ldr	r2, [pc, #132]	@ (8003958 <HAL_TIM_Base_Start_IT+0xd8>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d013      	beq.n	8003900 <HAL_TIM_Base_Start_IT+0x80>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a1f      	ldr	r2, [pc, #124]	@ (800395c <HAL_TIM_Base_Start_IT+0xdc>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00e      	beq.n	8003900 <HAL_TIM_Base_Start_IT+0x80>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a1e      	ldr	r2, [pc, #120]	@ (8003960 <HAL_TIM_Base_Start_IT+0xe0>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d009      	beq.n	8003900 <HAL_TIM_Base_Start_IT+0x80>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003964 <HAL_TIM_Base_Start_IT+0xe4>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d004      	beq.n	8003900 <HAL_TIM_Base_Start_IT+0x80>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a1b      	ldr	r2, [pc, #108]	@ (8003968 <HAL_TIM_Base_Start_IT+0xe8>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d115      	bne.n	800392c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689a      	ldr	r2, [r3, #8]
 8003906:	4b19      	ldr	r3, [pc, #100]	@ (800396c <HAL_TIM_Base_Start_IT+0xec>)
 8003908:	4013      	ands	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b06      	cmp	r3, #6
 8003910:	d015      	beq.n	800393e <HAL_TIM_Base_Start_IT+0xbe>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003918:	d011      	beq.n	800393e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0201 	orr.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800392a:	e008      	b.n	800393e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0201 	orr.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	e000      	b.n	8003940 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800393e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40012c00 	.word	0x40012c00
 8003954:	40000400 	.word	0x40000400
 8003958:	40000800 	.word	0x40000800
 800395c:	40000c00 	.word	0x40000c00
 8003960:	40013400 	.word	0x40013400
 8003964:	40014000 	.word	0x40014000
 8003968:	40015000 	.word	0x40015000
 800396c:	00010007 	.word	0x00010007

08003970 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e049      	b.n	8003a16 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d106      	bne.n	800399c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7fd feae 	bl	80016f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3304      	adds	r3, #4
 80039ac:	4619      	mov	r1, r3
 80039ae:	4610      	mov	r0, r2
 80039b0:	f000 fbd6 	bl	8004160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b084      	sub	sp, #16
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d020      	beq.n	8003a82 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d01b      	beq.n	8003a82 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f06f 0202 	mvn.w	r2, #2
 8003a52:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	f003 0303 	and.w	r3, r3, #3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d003      	beq.n	8003a70 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 fb5b 	bl	8004124 <HAL_TIM_IC_CaptureCallback>
 8003a6e:	e005      	b.n	8003a7c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 fb4d 	bl	8004110 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fb5e 	bl	8004138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d020      	beq.n	8003ace <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f003 0304 	and.w	r3, r3, #4
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d01b      	beq.n	8003ace <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f06f 0204 	mvn.w	r2, #4
 8003a9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 fb35 	bl	8004124 <HAL_TIM_IC_CaptureCallback>
 8003aba:	e005      	b.n	8003ac8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 fb27 	bl	8004110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 fb38 	bl	8004138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d020      	beq.n	8003b1a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d01b      	beq.n	8003b1a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f06f 0208 	mvn.w	r2, #8
 8003aea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2204      	movs	r2, #4
 8003af0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	f003 0303 	and.w	r3, r3, #3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 fb0f 	bl	8004124 <HAL_TIM_IC_CaptureCallback>
 8003b06:	e005      	b.n	8003b14 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 fb01 	bl	8004110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fb12 	bl	8004138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f003 0310 	and.w	r3, r3, #16
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d020      	beq.n	8003b66 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f003 0310 	and.w	r3, r3, #16
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d01b      	beq.n	8003b66 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f06f 0210 	mvn.w	r2, #16
 8003b36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2208      	movs	r2, #8
 8003b3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 fae9 	bl	8004124 <HAL_TIM_IC_CaptureCallback>
 8003b52:	e005      	b.n	8003b60 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 fadb 	bl	8004110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 faec 	bl	8004138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00c      	beq.n	8003b8a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d007      	beq.n	8003b8a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f06f 0201 	mvn.w	r2, #1
 8003b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7fd fd4f 	bl	8001628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d104      	bne.n	8003b9e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00c      	beq.n	8003bb8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d007      	beq.n	8003bb8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 ffee 	bl	8004b94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00c      	beq.n	8003bdc <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d007      	beq.n	8003bdc <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 ffe6 	bl	8004ba8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00c      	beq.n	8003c00 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d007      	beq.n	8003c00 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 faa6 	bl	800414c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f003 0320 	and.w	r3, r3, #32
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00c      	beq.n	8003c24 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f003 0320 	and.w	r3, r3, #32
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d007      	beq.n	8003c24 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f06f 0220 	mvn.w	r2, #32
 8003c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 ffae 	bl	8004b80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00c      	beq.n	8003c48 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d007      	beq.n	8003c48 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8003c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 ffba 	bl	8004bbc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00c      	beq.n	8003c6c <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d007      	beq.n	8003c6c <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 ffb2 	bl	8004bd0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00c      	beq.n	8003c90 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d007      	beq.n	8003c90 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 ffaa 	bl	8004be4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00c      	beq.n	8003cb4 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d007      	beq.n	8003cb4 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 ffa2 	bl	8004bf8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cb4:	bf00      	nop
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d101      	bne.n	8003cda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	e0ff      	b.n	8003eda <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b14      	cmp	r3, #20
 8003ce6:	f200 80f0 	bhi.w	8003eca <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003cea:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf0:	08003d45 	.word	0x08003d45
 8003cf4:	08003ecb 	.word	0x08003ecb
 8003cf8:	08003ecb 	.word	0x08003ecb
 8003cfc:	08003ecb 	.word	0x08003ecb
 8003d00:	08003d85 	.word	0x08003d85
 8003d04:	08003ecb 	.word	0x08003ecb
 8003d08:	08003ecb 	.word	0x08003ecb
 8003d0c:	08003ecb 	.word	0x08003ecb
 8003d10:	08003dc7 	.word	0x08003dc7
 8003d14:	08003ecb 	.word	0x08003ecb
 8003d18:	08003ecb 	.word	0x08003ecb
 8003d1c:	08003ecb 	.word	0x08003ecb
 8003d20:	08003e07 	.word	0x08003e07
 8003d24:	08003ecb 	.word	0x08003ecb
 8003d28:	08003ecb 	.word	0x08003ecb
 8003d2c:	08003ecb 	.word	0x08003ecb
 8003d30:	08003e49 	.word	0x08003e49
 8003d34:	08003ecb 	.word	0x08003ecb
 8003d38:	08003ecb 	.word	0x08003ecb
 8003d3c:	08003ecb 	.word	0x08003ecb
 8003d40:	08003e89 	.word	0x08003e89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68b9      	ldr	r1, [r7, #8]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 fabc 	bl	80042c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699a      	ldr	r2, [r3, #24]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0208 	orr.w	r2, r2, #8
 8003d5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699a      	ldr	r2, [r3, #24]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0204 	bic.w	r2, r2, #4
 8003d6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6999      	ldr	r1, [r3, #24]
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	691a      	ldr	r2, [r3, #16]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	619a      	str	r2, [r3, #24]
      break;
 8003d82:	e0a5      	b.n	8003ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68b9      	ldr	r1, [r7, #8]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 fb36 	bl	80043fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699a      	ldr	r2, [r3, #24]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699a      	ldr	r2, [r3, #24]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6999      	ldr	r1, [r3, #24]
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	021a      	lsls	r2, r3, #8
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	619a      	str	r2, [r3, #24]
      break;
 8003dc4:	e084      	b.n	8003ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68b9      	ldr	r1, [r7, #8]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 fba9 	bl	8004524 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69da      	ldr	r2, [r3, #28]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f042 0208 	orr.w	r2, r2, #8
 8003de0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69da      	ldr	r2, [r3, #28]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0204 	bic.w	r2, r2, #4
 8003df0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	69d9      	ldr	r1, [r3, #28]
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	691a      	ldr	r2, [r3, #16]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	61da      	str	r2, [r3, #28]
      break;
 8003e04:	e064      	b.n	8003ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68b9      	ldr	r1, [r7, #8]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 fc1b 	bl	8004648 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	69da      	ldr	r2, [r3, #28]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	69da      	ldr	r2, [r3, #28]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	69d9      	ldr	r1, [r3, #28]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	021a      	lsls	r2, r3, #8
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	61da      	str	r2, [r3, #28]
      break;
 8003e46:	e043      	b.n	8003ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68b9      	ldr	r1, [r7, #8]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 fc8e 	bl	8004770 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 0208 	orr.w	r2, r2, #8
 8003e62:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0204 	bic.w	r2, r2, #4
 8003e72:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	691a      	ldr	r2, [r3, #16]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003e86:	e023      	b.n	8003ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68b9      	ldr	r1, [r7, #8]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fcd8 	bl	8004844 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ea2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eb2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	021a      	lsls	r2, r3, #8
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003ec8:	e002      	b.n	8003ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	75fb      	strb	r3, [r7, #23]
      break;
 8003ece:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop

08003ee4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d101      	bne.n	8003f00 <HAL_TIM_ConfigClockSource+0x1c>
 8003efc:	2302      	movs	r3, #2
 8003efe:	e0f6      	b.n	80040ee <HAL_TIM_ConfigClockSource+0x20a>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003f1e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003f22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a6f      	ldr	r2, [pc, #444]	@ (80040f8 <HAL_TIM_ConfigClockSource+0x214>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	f000 80c1 	beq.w	80040c2 <HAL_TIM_ConfigClockSource+0x1de>
 8003f40:	4a6d      	ldr	r2, [pc, #436]	@ (80040f8 <HAL_TIM_ConfigClockSource+0x214>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	f200 80c6 	bhi.w	80040d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f48:	4a6c      	ldr	r2, [pc, #432]	@ (80040fc <HAL_TIM_ConfigClockSource+0x218>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	f000 80b9 	beq.w	80040c2 <HAL_TIM_ConfigClockSource+0x1de>
 8003f50:	4a6a      	ldr	r2, [pc, #424]	@ (80040fc <HAL_TIM_ConfigClockSource+0x218>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	f200 80be 	bhi.w	80040d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f58:	4a69      	ldr	r2, [pc, #420]	@ (8004100 <HAL_TIM_ConfigClockSource+0x21c>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	f000 80b1 	beq.w	80040c2 <HAL_TIM_ConfigClockSource+0x1de>
 8003f60:	4a67      	ldr	r2, [pc, #412]	@ (8004100 <HAL_TIM_ConfigClockSource+0x21c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	f200 80b6 	bhi.w	80040d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f68:	4a66      	ldr	r2, [pc, #408]	@ (8004104 <HAL_TIM_ConfigClockSource+0x220>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	f000 80a9 	beq.w	80040c2 <HAL_TIM_ConfigClockSource+0x1de>
 8003f70:	4a64      	ldr	r2, [pc, #400]	@ (8004104 <HAL_TIM_ConfigClockSource+0x220>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	f200 80ae 	bhi.w	80040d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f78:	4a63      	ldr	r2, [pc, #396]	@ (8004108 <HAL_TIM_ConfigClockSource+0x224>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	f000 80a1 	beq.w	80040c2 <HAL_TIM_ConfigClockSource+0x1de>
 8003f80:	4a61      	ldr	r2, [pc, #388]	@ (8004108 <HAL_TIM_ConfigClockSource+0x224>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	f200 80a6 	bhi.w	80040d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f88:	4a60      	ldr	r2, [pc, #384]	@ (800410c <HAL_TIM_ConfigClockSource+0x228>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	f000 8099 	beq.w	80040c2 <HAL_TIM_ConfigClockSource+0x1de>
 8003f90:	4a5e      	ldr	r2, [pc, #376]	@ (800410c <HAL_TIM_ConfigClockSource+0x228>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	f200 809e 	bhi.w	80040d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003f98:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003f9c:	f000 8091 	beq.w	80040c2 <HAL_TIM_ConfigClockSource+0x1de>
 8003fa0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003fa4:	f200 8096 	bhi.w	80040d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003fa8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fac:	f000 8089 	beq.w	80040c2 <HAL_TIM_ConfigClockSource+0x1de>
 8003fb0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fb4:	f200 808e 	bhi.w	80040d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003fb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fbc:	d03e      	beq.n	800403c <HAL_TIM_ConfigClockSource+0x158>
 8003fbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fc2:	f200 8087 	bhi.w	80040d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003fc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fca:	f000 8086 	beq.w	80040da <HAL_TIM_ConfigClockSource+0x1f6>
 8003fce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fd2:	d87f      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003fd4:	2b70      	cmp	r3, #112	@ 0x70
 8003fd6:	d01a      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x12a>
 8003fd8:	2b70      	cmp	r3, #112	@ 0x70
 8003fda:	d87b      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003fdc:	2b60      	cmp	r3, #96	@ 0x60
 8003fde:	d050      	beq.n	8004082 <HAL_TIM_ConfigClockSource+0x19e>
 8003fe0:	2b60      	cmp	r3, #96	@ 0x60
 8003fe2:	d877      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003fe4:	2b50      	cmp	r3, #80	@ 0x50
 8003fe6:	d03c      	beq.n	8004062 <HAL_TIM_ConfigClockSource+0x17e>
 8003fe8:	2b50      	cmp	r3, #80	@ 0x50
 8003fea:	d873      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003fec:	2b40      	cmp	r3, #64	@ 0x40
 8003fee:	d058      	beq.n	80040a2 <HAL_TIM_ConfigClockSource+0x1be>
 8003ff0:	2b40      	cmp	r3, #64	@ 0x40
 8003ff2:	d86f      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ff4:	2b30      	cmp	r3, #48	@ 0x30
 8003ff6:	d064      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x1de>
 8003ff8:	2b30      	cmp	r3, #48	@ 0x30
 8003ffa:	d86b      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ffc:	2b20      	cmp	r3, #32
 8003ffe:	d060      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x1de>
 8004000:	2b20      	cmp	r3, #32
 8004002:	d867      	bhi.n	80040d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8004004:	2b00      	cmp	r3, #0
 8004006:	d05c      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x1de>
 8004008:	2b10      	cmp	r3, #16
 800400a:	d05a      	beq.n	80040c2 <HAL_TIM_ConfigClockSource+0x1de>
 800400c:	e062      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800401e:	f000 fcf9 	bl	8004a14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004030:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	609a      	str	r2, [r3, #8]
      break;
 800403a:	e04f      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800404c:	f000 fce2 	bl	8004a14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800405e:	609a      	str	r2, [r3, #8]
      break;
 8004060:	e03c      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800406e:	461a      	mov	r2, r3
 8004070:	f000 fc54 	bl	800491c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2150      	movs	r1, #80	@ 0x50
 800407a:	4618      	mov	r0, r3
 800407c:	f000 fcad 	bl	80049da <TIM_ITRx_SetConfig>
      break;
 8004080:	e02c      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800408e:	461a      	mov	r2, r3
 8004090:	f000 fc73 	bl	800497a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2160      	movs	r1, #96	@ 0x60
 800409a:	4618      	mov	r0, r3
 800409c:	f000 fc9d 	bl	80049da <TIM_ITRx_SetConfig>
      break;
 80040a0:	e01c      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ae:	461a      	mov	r2, r3
 80040b0:	f000 fc34 	bl	800491c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2140      	movs	r1, #64	@ 0x40
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 fc8d 	bl	80049da <TIM_ITRx_SetConfig>
      break;
 80040c0:	e00c      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4619      	mov	r1, r3
 80040cc:	4610      	mov	r0, r2
 80040ce:	f000 fc84 	bl	80049da <TIM_ITRx_SetConfig>
      break;
 80040d2:	e003      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	73fb      	strb	r3, [r7, #15]
      break;
 80040d8:	e000      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80040da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	00100070 	.word	0x00100070
 80040fc:	00100060 	.word	0x00100060
 8004100:	00100050 	.word	0x00100050
 8004104:	00100040 	.word	0x00100040
 8004108:	00100030 	.word	0x00100030
 800410c:	00100020 	.word	0x00100020

08004110 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a4c      	ldr	r2, [pc, #304]	@ (80042a4 <TIM_Base_SetConfig+0x144>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d017      	beq.n	80041a8 <TIM_Base_SetConfig+0x48>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800417e:	d013      	beq.n	80041a8 <TIM_Base_SetConfig+0x48>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a49      	ldr	r2, [pc, #292]	@ (80042a8 <TIM_Base_SetConfig+0x148>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d00f      	beq.n	80041a8 <TIM_Base_SetConfig+0x48>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a48      	ldr	r2, [pc, #288]	@ (80042ac <TIM_Base_SetConfig+0x14c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d00b      	beq.n	80041a8 <TIM_Base_SetConfig+0x48>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a47      	ldr	r2, [pc, #284]	@ (80042b0 <TIM_Base_SetConfig+0x150>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d007      	beq.n	80041a8 <TIM_Base_SetConfig+0x48>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a46      	ldr	r2, [pc, #280]	@ (80042b4 <TIM_Base_SetConfig+0x154>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d003      	beq.n	80041a8 <TIM_Base_SetConfig+0x48>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a45      	ldr	r2, [pc, #276]	@ (80042b8 <TIM_Base_SetConfig+0x158>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d108      	bne.n	80041ba <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a39      	ldr	r2, [pc, #228]	@ (80042a4 <TIM_Base_SetConfig+0x144>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d023      	beq.n	800420a <TIM_Base_SetConfig+0xaa>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041c8:	d01f      	beq.n	800420a <TIM_Base_SetConfig+0xaa>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a36      	ldr	r2, [pc, #216]	@ (80042a8 <TIM_Base_SetConfig+0x148>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d01b      	beq.n	800420a <TIM_Base_SetConfig+0xaa>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a35      	ldr	r2, [pc, #212]	@ (80042ac <TIM_Base_SetConfig+0x14c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d017      	beq.n	800420a <TIM_Base_SetConfig+0xaa>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a34      	ldr	r2, [pc, #208]	@ (80042b0 <TIM_Base_SetConfig+0x150>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d013      	beq.n	800420a <TIM_Base_SetConfig+0xaa>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a33      	ldr	r2, [pc, #204]	@ (80042b4 <TIM_Base_SetConfig+0x154>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d00f      	beq.n	800420a <TIM_Base_SetConfig+0xaa>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a33      	ldr	r2, [pc, #204]	@ (80042bc <TIM_Base_SetConfig+0x15c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d00b      	beq.n	800420a <TIM_Base_SetConfig+0xaa>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a32      	ldr	r2, [pc, #200]	@ (80042c0 <TIM_Base_SetConfig+0x160>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d007      	beq.n	800420a <TIM_Base_SetConfig+0xaa>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a31      	ldr	r2, [pc, #196]	@ (80042c4 <TIM_Base_SetConfig+0x164>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d003      	beq.n	800420a <TIM_Base_SetConfig+0xaa>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a2c      	ldr	r2, [pc, #176]	@ (80042b8 <TIM_Base_SetConfig+0x158>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d108      	bne.n	800421c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4313      	orrs	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	4313      	orrs	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a18      	ldr	r2, [pc, #96]	@ (80042a4 <TIM_Base_SetConfig+0x144>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d013      	beq.n	8004270 <TIM_Base_SetConfig+0x110>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a1a      	ldr	r2, [pc, #104]	@ (80042b4 <TIM_Base_SetConfig+0x154>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d00f      	beq.n	8004270 <TIM_Base_SetConfig+0x110>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a1a      	ldr	r2, [pc, #104]	@ (80042bc <TIM_Base_SetConfig+0x15c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d00b      	beq.n	8004270 <TIM_Base_SetConfig+0x110>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a19      	ldr	r2, [pc, #100]	@ (80042c0 <TIM_Base_SetConfig+0x160>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d007      	beq.n	8004270 <TIM_Base_SetConfig+0x110>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a18      	ldr	r2, [pc, #96]	@ (80042c4 <TIM_Base_SetConfig+0x164>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d003      	beq.n	8004270 <TIM_Base_SetConfig+0x110>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a13      	ldr	r2, [pc, #76]	@ (80042b8 <TIM_Base_SetConfig+0x158>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d103      	bne.n	8004278 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	691a      	ldr	r2, [r3, #16]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b01      	cmp	r3, #1
 8004288:	d105      	bne.n	8004296 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f023 0201 	bic.w	r2, r3, #1
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	611a      	str	r2, [r3, #16]
  }
}
 8004296:	bf00      	nop
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	40012c00 	.word	0x40012c00
 80042a8:	40000400 	.word	0x40000400
 80042ac:	40000800 	.word	0x40000800
 80042b0:	40000c00 	.word	0x40000c00
 80042b4:	40013400 	.word	0x40013400
 80042b8:	40015000 	.word	0x40015000
 80042bc:	40014000 	.word	0x40014000
 80042c0:	40014400 	.word	0x40014400
 80042c4:	40014800 	.word	0x40014800

080042c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	f023 0201 	bic.w	r2, r3, #1
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f023 0303 	bic.w	r3, r3, #3
 8004302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	4313      	orrs	r3, r2
 800430c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f023 0302 	bic.w	r3, r3, #2
 8004314:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	4313      	orrs	r3, r2
 800431e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a30      	ldr	r2, [pc, #192]	@ (80043e4 <TIM_OC1_SetConfig+0x11c>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d013      	beq.n	8004350 <TIM_OC1_SetConfig+0x88>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a2f      	ldr	r2, [pc, #188]	@ (80043e8 <TIM_OC1_SetConfig+0x120>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d00f      	beq.n	8004350 <TIM_OC1_SetConfig+0x88>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a2e      	ldr	r2, [pc, #184]	@ (80043ec <TIM_OC1_SetConfig+0x124>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d00b      	beq.n	8004350 <TIM_OC1_SetConfig+0x88>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a2d      	ldr	r2, [pc, #180]	@ (80043f0 <TIM_OC1_SetConfig+0x128>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d007      	beq.n	8004350 <TIM_OC1_SetConfig+0x88>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a2c      	ldr	r2, [pc, #176]	@ (80043f4 <TIM_OC1_SetConfig+0x12c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d003      	beq.n	8004350 <TIM_OC1_SetConfig+0x88>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a2b      	ldr	r2, [pc, #172]	@ (80043f8 <TIM_OC1_SetConfig+0x130>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d10c      	bne.n	800436a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f023 0308 	bic.w	r3, r3, #8
 8004356:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	4313      	orrs	r3, r2
 8004360:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f023 0304 	bic.w	r3, r3, #4
 8004368:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a1d      	ldr	r2, [pc, #116]	@ (80043e4 <TIM_OC1_SetConfig+0x11c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d013      	beq.n	800439a <TIM_OC1_SetConfig+0xd2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a1c      	ldr	r2, [pc, #112]	@ (80043e8 <TIM_OC1_SetConfig+0x120>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d00f      	beq.n	800439a <TIM_OC1_SetConfig+0xd2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a1b      	ldr	r2, [pc, #108]	@ (80043ec <TIM_OC1_SetConfig+0x124>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d00b      	beq.n	800439a <TIM_OC1_SetConfig+0xd2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a1a      	ldr	r2, [pc, #104]	@ (80043f0 <TIM_OC1_SetConfig+0x128>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d007      	beq.n	800439a <TIM_OC1_SetConfig+0xd2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a19      	ldr	r2, [pc, #100]	@ (80043f4 <TIM_OC1_SetConfig+0x12c>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d003      	beq.n	800439a <TIM_OC1_SetConfig+0xd2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a18      	ldr	r2, [pc, #96]	@ (80043f8 <TIM_OC1_SetConfig+0x130>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d111      	bne.n	80043be <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	621a      	str	r2, [r3, #32]
}
 80043d8:	bf00      	nop
 80043da:	371c      	adds	r7, #28
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr
 80043e4:	40012c00 	.word	0x40012c00
 80043e8:	40013400 	.word	0x40013400
 80043ec:	40014000 	.word	0x40014000
 80043f0:	40014400 	.word	0x40014400
 80043f4:	40014800 	.word	0x40014800
 80043f8:	40015000 	.word	0x40015000

080043fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	f023 0210 	bic.w	r2, r3, #16
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800442a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800442e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	021b      	lsls	r3, r3, #8
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	4313      	orrs	r3, r2
 8004442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f023 0320 	bic.w	r3, r3, #32
 800444a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	4313      	orrs	r3, r2
 8004456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a2c      	ldr	r2, [pc, #176]	@ (800450c <TIM_OC2_SetConfig+0x110>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d007      	beq.n	8004470 <TIM_OC2_SetConfig+0x74>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a2b      	ldr	r2, [pc, #172]	@ (8004510 <TIM_OC2_SetConfig+0x114>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d003      	beq.n	8004470 <TIM_OC2_SetConfig+0x74>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a2a      	ldr	r2, [pc, #168]	@ (8004514 <TIM_OC2_SetConfig+0x118>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d10d      	bne.n	800448c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	011b      	lsls	r3, r3, #4
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	4313      	orrs	r3, r2
 8004482:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800448a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a1f      	ldr	r2, [pc, #124]	@ (800450c <TIM_OC2_SetConfig+0x110>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d013      	beq.n	80044bc <TIM_OC2_SetConfig+0xc0>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a1e      	ldr	r2, [pc, #120]	@ (8004510 <TIM_OC2_SetConfig+0x114>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d00f      	beq.n	80044bc <TIM_OC2_SetConfig+0xc0>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a1e      	ldr	r2, [pc, #120]	@ (8004518 <TIM_OC2_SetConfig+0x11c>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00b      	beq.n	80044bc <TIM_OC2_SetConfig+0xc0>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a1d      	ldr	r2, [pc, #116]	@ (800451c <TIM_OC2_SetConfig+0x120>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d007      	beq.n	80044bc <TIM_OC2_SetConfig+0xc0>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a1c      	ldr	r2, [pc, #112]	@ (8004520 <TIM_OC2_SetConfig+0x124>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d003      	beq.n	80044bc <TIM_OC2_SetConfig+0xc0>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a17      	ldr	r2, [pc, #92]	@ (8004514 <TIM_OC2_SetConfig+0x118>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d113      	bne.n	80044e4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	621a      	str	r2, [r3, #32]
}
 80044fe:	bf00      	nop
 8004500:	371c      	adds	r7, #28
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	40012c00 	.word	0x40012c00
 8004510:	40013400 	.word	0x40013400
 8004514:	40015000 	.word	0x40015000
 8004518:	40014000 	.word	0x40014000
 800451c:	40014400 	.word	0x40014400
 8004520:	40014800 	.word	0x40014800

08004524 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004524:	b480      	push	{r7}
 8004526:	b087      	sub	sp, #28
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0303 	bic.w	r3, r3, #3
 800455e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004570:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	021b      	lsls	r3, r3, #8
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	4313      	orrs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a2b      	ldr	r2, [pc, #172]	@ (8004630 <TIM_OC3_SetConfig+0x10c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d007      	beq.n	8004596 <TIM_OC3_SetConfig+0x72>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a2a      	ldr	r2, [pc, #168]	@ (8004634 <TIM_OC3_SetConfig+0x110>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d003      	beq.n	8004596 <TIM_OC3_SetConfig+0x72>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a29      	ldr	r2, [pc, #164]	@ (8004638 <TIM_OC3_SetConfig+0x114>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d10d      	bne.n	80045b2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800459c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	021b      	lsls	r3, r3, #8
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a1e      	ldr	r2, [pc, #120]	@ (8004630 <TIM_OC3_SetConfig+0x10c>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d013      	beq.n	80045e2 <TIM_OC3_SetConfig+0xbe>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004634 <TIM_OC3_SetConfig+0x110>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d00f      	beq.n	80045e2 <TIM_OC3_SetConfig+0xbe>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a1d      	ldr	r2, [pc, #116]	@ (800463c <TIM_OC3_SetConfig+0x118>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d00b      	beq.n	80045e2 <TIM_OC3_SetConfig+0xbe>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a1c      	ldr	r2, [pc, #112]	@ (8004640 <TIM_OC3_SetConfig+0x11c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d007      	beq.n	80045e2 <TIM_OC3_SetConfig+0xbe>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a1b      	ldr	r2, [pc, #108]	@ (8004644 <TIM_OC3_SetConfig+0x120>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d003      	beq.n	80045e2 <TIM_OC3_SetConfig+0xbe>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a16      	ldr	r2, [pc, #88]	@ (8004638 <TIM_OC3_SetConfig+0x114>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d113      	bne.n	800460a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	621a      	str	r2, [r3, #32]
}
 8004624:	bf00      	nop
 8004626:	371c      	adds	r7, #28
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	40012c00 	.word	0x40012c00
 8004634:	40013400 	.word	0x40013400
 8004638:	40015000 	.word	0x40015000
 800463c:	40014000 	.word	0x40014000
 8004640:	40014400 	.word	0x40014400
 8004644:	40014800 	.word	0x40014800

08004648 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004676:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800467a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	021b      	lsls	r3, r3, #8
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	4313      	orrs	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004696:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	031b      	lsls	r3, r3, #12
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a2c      	ldr	r2, [pc, #176]	@ (8004758 <TIM_OC4_SetConfig+0x110>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d007      	beq.n	80046bc <TIM_OC4_SetConfig+0x74>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a2b      	ldr	r2, [pc, #172]	@ (800475c <TIM_OC4_SetConfig+0x114>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d003      	beq.n	80046bc <TIM_OC4_SetConfig+0x74>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a2a      	ldr	r2, [pc, #168]	@ (8004760 <TIM_OC4_SetConfig+0x118>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d10d      	bne.n	80046d8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80046c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	031b      	lsls	r3, r3, #12
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a1f      	ldr	r2, [pc, #124]	@ (8004758 <TIM_OC4_SetConfig+0x110>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d013      	beq.n	8004708 <TIM_OC4_SetConfig+0xc0>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a1e      	ldr	r2, [pc, #120]	@ (800475c <TIM_OC4_SetConfig+0x114>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00f      	beq.n	8004708 <TIM_OC4_SetConfig+0xc0>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a1e      	ldr	r2, [pc, #120]	@ (8004764 <TIM_OC4_SetConfig+0x11c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d00b      	beq.n	8004708 <TIM_OC4_SetConfig+0xc0>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a1d      	ldr	r2, [pc, #116]	@ (8004768 <TIM_OC4_SetConfig+0x120>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d007      	beq.n	8004708 <TIM_OC4_SetConfig+0xc0>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a1c      	ldr	r2, [pc, #112]	@ (800476c <TIM_OC4_SetConfig+0x124>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d003      	beq.n	8004708 <TIM_OC4_SetConfig+0xc0>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a17      	ldr	r2, [pc, #92]	@ (8004760 <TIM_OC4_SetConfig+0x118>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d113      	bne.n	8004730 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800470e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004716:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	019b      	lsls	r3, r3, #6
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4313      	orrs	r3, r2
 8004722:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	019b      	lsls	r3, r3, #6
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	4313      	orrs	r3, r2
 800472e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	621a      	str	r2, [r3, #32]
}
 800474a:	bf00      	nop
 800474c:	371c      	adds	r7, #28
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	40012c00 	.word	0x40012c00
 800475c:	40013400 	.word	0x40013400
 8004760:	40015000 	.word	0x40015000
 8004764:	40014000 	.word	0x40014000
 8004768:	40014400 	.word	0x40014400
 800476c:	40014800 	.word	0x40014800

08004770 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004770:	b480      	push	{r7}
 8004772:	b087      	sub	sp, #28
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800479e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80047b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	041b      	lsls	r3, r3, #16
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4313      	orrs	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a19      	ldr	r2, [pc, #100]	@ (800482c <TIM_OC5_SetConfig+0xbc>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d013      	beq.n	80047f2 <TIM_OC5_SetConfig+0x82>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a18      	ldr	r2, [pc, #96]	@ (8004830 <TIM_OC5_SetConfig+0xc0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d00f      	beq.n	80047f2 <TIM_OC5_SetConfig+0x82>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a17      	ldr	r2, [pc, #92]	@ (8004834 <TIM_OC5_SetConfig+0xc4>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00b      	beq.n	80047f2 <TIM_OC5_SetConfig+0x82>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a16      	ldr	r2, [pc, #88]	@ (8004838 <TIM_OC5_SetConfig+0xc8>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d007      	beq.n	80047f2 <TIM_OC5_SetConfig+0x82>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a15      	ldr	r2, [pc, #84]	@ (800483c <TIM_OC5_SetConfig+0xcc>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d003      	beq.n	80047f2 <TIM_OC5_SetConfig+0x82>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a14      	ldr	r2, [pc, #80]	@ (8004840 <TIM_OC5_SetConfig+0xd0>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d109      	bne.n	8004806 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	021b      	lsls	r3, r3, #8
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	4313      	orrs	r3, r2
 8004804:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	621a      	str	r2, [r3, #32]
}
 8004820:	bf00      	nop
 8004822:	371c      	adds	r7, #28
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	40012c00 	.word	0x40012c00
 8004830:	40013400 	.word	0x40013400
 8004834:	40014000 	.word	0x40014000
 8004838:	40014400 	.word	0x40014400
 800483c:	40014800 	.word	0x40014800
 8004840:	40015000 	.word	0x40015000

08004844 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800486a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004872:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	021b      	lsls	r3, r3, #8
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	4313      	orrs	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800488a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	051b      	lsls	r3, r3, #20
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	4313      	orrs	r3, r2
 8004896:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a1a      	ldr	r2, [pc, #104]	@ (8004904 <TIM_OC6_SetConfig+0xc0>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d013      	beq.n	80048c8 <TIM_OC6_SetConfig+0x84>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a19      	ldr	r2, [pc, #100]	@ (8004908 <TIM_OC6_SetConfig+0xc4>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00f      	beq.n	80048c8 <TIM_OC6_SetConfig+0x84>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a18      	ldr	r2, [pc, #96]	@ (800490c <TIM_OC6_SetConfig+0xc8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00b      	beq.n	80048c8 <TIM_OC6_SetConfig+0x84>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a17      	ldr	r2, [pc, #92]	@ (8004910 <TIM_OC6_SetConfig+0xcc>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d007      	beq.n	80048c8 <TIM_OC6_SetConfig+0x84>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a16      	ldr	r2, [pc, #88]	@ (8004914 <TIM_OC6_SetConfig+0xd0>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d003      	beq.n	80048c8 <TIM_OC6_SetConfig+0x84>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a15      	ldr	r2, [pc, #84]	@ (8004918 <TIM_OC6_SetConfig+0xd4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d109      	bne.n	80048dc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	029b      	lsls	r3, r3, #10
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	4313      	orrs	r3, r2
 80048da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	621a      	str	r2, [r3, #32]
}
 80048f6:	bf00      	nop
 80048f8:	371c      	adds	r7, #28
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	40012c00 	.word	0x40012c00
 8004908:	40013400 	.word	0x40013400
 800490c:	40014000 	.word	0x40014000
 8004910:	40014400 	.word	0x40014400
 8004914:	40014800 	.word	0x40014800
 8004918:	40015000 	.word	0x40015000

0800491c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	f023 0201 	bic.w	r2, r3, #1
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4313      	orrs	r3, r2
 8004950:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f023 030a 	bic.w	r3, r3, #10
 8004958:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	4313      	orrs	r3, r2
 8004960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	621a      	str	r2, [r3, #32]
}
 800496e:	bf00      	nop
 8004970:	371c      	adds	r7, #28
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800497a:	b480      	push	{r7}
 800497c:	b087      	sub	sp, #28
 800497e:	af00      	add	r7, sp, #0
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	f023 0210 	bic.w	r2, r3, #16
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80049a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	031b      	lsls	r3, r3, #12
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80049b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	4313      	orrs	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	621a      	str	r2, [r3, #32]
}
 80049ce:	bf00      	nop
 80049d0:	371c      	adds	r7, #28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049da:	b480      	push	{r7}
 80049dc:	b085      	sub	sp, #20
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
 80049e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80049f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	f043 0307 	orr.w	r3, r3, #7
 8004a00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	609a      	str	r2, [r3, #8]
}
 8004a08:	bf00      	nop
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
 8004a20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	021a      	lsls	r2, r3, #8
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	431a      	orrs	r2, r3
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	609a      	str	r2, [r3, #8]
}
 8004a48:	bf00      	nop
 8004a4a:	371c      	adds	r7, #28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d101      	bne.n	8004a6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	e074      	b.n	8004b56 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a34      	ldr	r2, [pc, #208]	@ (8004b64 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d009      	beq.n	8004aaa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a33      	ldr	r2, [pc, #204]	@ (8004b68 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d004      	beq.n	8004aaa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a31      	ldr	r2, [pc, #196]	@ (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d108      	bne.n	8004abc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004ab0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ac6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a21      	ldr	r2, [pc, #132]	@ (8004b64 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d022      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aec:	d01d      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a1f      	ldr	r2, [pc, #124]	@ (8004b70 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d018      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a1d      	ldr	r2, [pc, #116]	@ (8004b74 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d013      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a1c      	ldr	r2, [pc, #112]	@ (8004b78 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d00e      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a15      	ldr	r2, [pc, #84]	@ (8004b68 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d009      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a18      	ldr	r2, [pc, #96]	@ (8004b7c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d004      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a11      	ldr	r2, [pc, #68]	@ (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d10c      	bne.n	8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	40012c00 	.word	0x40012c00
 8004b68:	40013400 	.word	0x40013400
 8004b6c:	40015000 	.word	0x40015000
 8004b70:	40000400 	.word	0x40000400
 8004b74:	40000800 	.word	0x40000800
 8004b78:	40000c00 	.word	0x40000c00
 8004b7c:	40014000 	.word	0x40014000

08004b80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08a      	sub	sp, #40	@ 0x28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	4613      	mov	r3, r2
 8004c18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c20:	2b20      	cmp	r3, #32
 8004c22:	d167      	bne.n	8004cf4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d002      	beq.n	8004c30 <HAL_UART_Transmit_DMA+0x24>
 8004c2a:	88fb      	ldrh	r3, [r7, #6]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e060      	b.n	8004cf6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	88fa      	ldrh	r2, [r7, #6]
 8004c3e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	88fa      	ldrh	r2, [r7, #6]
 8004c46:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2221      	movs	r2, #33	@ 0x21
 8004c56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d028      	beq.n	8004cb4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c66:	4a26      	ldr	r2, [pc, #152]	@ (8004d00 <HAL_UART_Transmit_DMA+0xf4>)
 8004c68:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c6e:	4a25      	ldr	r2, [pc, #148]	@ (8004d04 <HAL_UART_Transmit_DMA+0xf8>)
 8004c70:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c76:	4a24      	ldr	r2, [pc, #144]	@ (8004d08 <HAL_UART_Transmit_DMA+0xfc>)
 8004c78:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c7e:	2200      	movs	r2, #0
 8004c80:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3328      	adds	r3, #40	@ 0x28
 8004c92:	461a      	mov	r2, r3
 8004c94:	88fb      	ldrh	r3, [r7, #6]
 8004c96:	f7fd f923 	bl	8001ee0 <HAL_DMA_Start_IT>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d009      	beq.n	8004cb4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2210      	movs	r2, #16
 8004ca4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e020      	b.n	8004cf6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2240      	movs	r2, #64	@ 0x40
 8004cba:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3308      	adds	r3, #8
 8004cc2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	e853 3f00 	ldrex	r3, [r3]
 8004cca:	613b      	str	r3, [r7, #16]
   return(result);
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	3308      	adds	r3, #8
 8004cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cdc:	623a      	str	r2, [r7, #32]
 8004cde:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce0:	69f9      	ldr	r1, [r7, #28]
 8004ce2:	6a3a      	ldr	r2, [r7, #32]
 8004ce4:	e841 2300 	strex	r3, r2, [r1]
 8004ce8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1e5      	bne.n	8004cbc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	e000      	b.n	8004cf6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004cf4:	2302      	movs	r3, #2
  }
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3728      	adds	r7, #40	@ 0x28
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	080060ab 	.word	0x080060ab
 8004d04:	08006145 	.word	0x08006145
 8004d08:	080062cb 	.word	0x080062cb

08004d0c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b08a      	sub	sp, #40	@ 0x28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	4613      	mov	r3, r2
 8004d18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d20:	2b20      	cmp	r3, #32
 8004d22:	d137      	bne.n	8004d94 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <HAL_UART_Receive_DMA+0x24>
 8004d2a:	88fb      	ldrh	r3, [r7, #6]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e030      	b.n	8004d96 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a18      	ldr	r2, [pc, #96]	@ (8004da0 <HAL_UART_Receive_DMA+0x94>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d01f      	beq.n	8004d84 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d018      	beq.n	8004d84 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	e853 3f00 	ldrex	r3, [r3]
 8004d5e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d66:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d70:	623b      	str	r3, [r7, #32]
 8004d72:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d74:	69f9      	ldr	r1, [r7, #28]
 8004d76:	6a3a      	ldr	r2, [r7, #32]
 8004d78:	e841 2300 	strex	r3, r2, [r1]
 8004d7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1e6      	bne.n	8004d52 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004d84:	88fb      	ldrh	r3, [r7, #6]
 8004d86:	461a      	mov	r2, r3
 8004d88:	68b9      	ldr	r1, [r7, #8]
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f001 f840 	bl	8005e10 <UART_Start_Receive_DMA>
 8004d90:	4603      	mov	r3, r0
 8004d92:	e000      	b.n	8004d96 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d94:	2302      	movs	r3, #2
  }
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3728      	adds	r7, #40	@ 0x28
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	40008000 	.word	0x40008000

08004da4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b0ba      	sub	sp, #232	@ 0xe8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004dca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004dce:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004dd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d11b      	bne.n	8004e18 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004de4:	f003 0320 	and.w	r3, r3, #32
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d015      	beq.n	8004e18 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004df0:	f003 0320 	and.w	r3, r3, #32
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d105      	bne.n	8004e04 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004df8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d009      	beq.n	8004e18 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f000 8300 	beq.w	800540e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	4798      	blx	r3
      }
      return;
 8004e16:	e2fa      	b.n	800540e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004e18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 8123 	beq.w	8005068 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004e22:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004e26:	4b8d      	ldr	r3, [pc, #564]	@ (800505c <HAL_UART_IRQHandler+0x2b8>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d106      	bne.n	8004e3c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004e2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004e32:	4b8b      	ldr	r3, [pc, #556]	@ (8005060 <HAL_UART_IRQHandler+0x2bc>)
 8004e34:	4013      	ands	r3, r2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 8116 	beq.w	8005068 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d011      	beq.n	8004e6c <HAL_UART_IRQHandler+0xc8>
 8004e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00b      	beq.n	8004e6c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e62:	f043 0201 	orr.w	r2, r3, #1
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d011      	beq.n	8004e9c <HAL_UART_IRQHandler+0xf8>
 8004e78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00b      	beq.n	8004e9c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2202      	movs	r2, #2
 8004e8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e92:	f043 0204 	orr.w	r2, r3, #4
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d011      	beq.n	8004ecc <HAL_UART_IRQHandler+0x128>
 8004ea8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00b      	beq.n	8004ecc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2204      	movs	r2, #4
 8004eba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ec2:	f043 0202 	orr.w	r2, r3, #2
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ed0:	f003 0308 	and.w	r3, r3, #8
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d017      	beq.n	8004f08 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004edc:	f003 0320 	and.w	r3, r3, #32
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d105      	bne.n	8004ef0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004ee4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004ee8:	4b5c      	ldr	r3, [pc, #368]	@ (800505c <HAL_UART_IRQHandler+0x2b8>)
 8004eea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00b      	beq.n	8004f08 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2208      	movs	r2, #8
 8004ef6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004efe:	f043 0208 	orr.w	r2, r3, #8
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d012      	beq.n	8004f3a <HAL_UART_IRQHandler+0x196>
 8004f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f18:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00c      	beq.n	8004f3a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f30:	f043 0220 	orr.w	r2, r3, #32
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 8266 	beq.w	8005412 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f4a:	f003 0320 	and.w	r3, r3, #32
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d013      	beq.n	8004f7a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f56:	f003 0320 	and.w	r3, r3, #32
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d105      	bne.n	8004f6a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d007      	beq.n	8004f7a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f80:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f8e:	2b40      	cmp	r3, #64	@ 0x40
 8004f90:	d005      	beq.n	8004f9e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f96:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d054      	beq.n	8005048 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f001 f81d 	bl	8005fde <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fae:	2b40      	cmp	r3, #64	@ 0x40
 8004fb0:	d146      	bne.n	8005040 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	3308      	adds	r3, #8
 8004fb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004fc0:	e853 3f00 	ldrex	r3, [r3]
 8004fc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004fc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004fcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	3308      	adds	r3, #8
 8004fda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004fde:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004fe2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004fea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004fee:	e841 2300 	strex	r3, r2, [r1]
 8004ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004ff6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1d9      	bne.n	8004fb2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005004:	2b00      	cmp	r3, #0
 8005006:	d017      	beq.n	8005038 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800500e:	4a15      	ldr	r2, [pc, #84]	@ (8005064 <HAL_UART_IRQHandler+0x2c0>)
 8005010:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005018:	4618      	mov	r0, r3
 800501a:	f7fd f835 	bl	8002088 <HAL_DMA_Abort_IT>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d019      	beq.n	8005058 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800502a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005032:	4610      	mov	r0, r2
 8005034:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005036:	e00f      	b.n	8005058 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 fa1d 	bl	8005478 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800503e:	e00b      	b.n	8005058 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 fa19 	bl	8005478 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005046:	e007      	b.n	8005058 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 fa15 	bl	8005478 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005056:	e1dc      	b.n	8005412 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005058:	bf00      	nop
    return;
 800505a:	e1da      	b.n	8005412 <HAL_UART_IRQHandler+0x66e>
 800505c:	10000001 	.word	0x10000001
 8005060:	04000120 	.word	0x04000120
 8005064:	0800634b 	.word	0x0800634b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800506c:	2b01      	cmp	r3, #1
 800506e:	f040 8170 	bne.w	8005352 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005076:	f003 0310 	and.w	r3, r3, #16
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 8169 	beq.w	8005352 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005084:	f003 0310 	and.w	r3, r3, #16
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 8162 	beq.w	8005352 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2210      	movs	r2, #16
 8005094:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050a0:	2b40      	cmp	r3, #64	@ 0x40
 80050a2:	f040 80d8 	bne.w	8005256 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 80af 	beq.w	800521c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80050c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80050c8:	429a      	cmp	r2, r3
 80050ca:	f080 80a7 	bcs.w	800521c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80050d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0320 	and.w	r3, r3, #32
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	f040 8087 	bne.w	80051fa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80050f8:	e853 3f00 	ldrex	r3, [r3]
 80050fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005100:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005104:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005108:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	461a      	mov	r2, r3
 8005112:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005116:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800511a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005122:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005126:	e841 2300 	strex	r3, r2, [r1]
 800512a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800512e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1da      	bne.n	80050ec <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	3308      	adds	r3, #8
 800513c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005140:	e853 3f00 	ldrex	r3, [r3]
 8005144:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005146:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005148:	f023 0301 	bic.w	r3, r3, #1
 800514c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3308      	adds	r3, #8
 8005156:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800515a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800515e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005160:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005162:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005166:	e841 2300 	strex	r3, r2, [r1]
 800516a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800516c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1e1      	bne.n	8005136 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	3308      	adds	r3, #8
 8005178:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800517c:	e853 3f00 	ldrex	r3, [r3]
 8005180:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005182:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005184:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005188:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	3308      	adds	r3, #8
 8005192:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005196:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005198:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800519c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800519e:	e841 2300 	strex	r3, r2, [r1]
 80051a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80051a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1e3      	bne.n	8005172 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051c0:	e853 3f00 	ldrex	r3, [r3]
 80051c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80051c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051c8:	f023 0310 	bic.w	r3, r3, #16
 80051cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	461a      	mov	r2, r3
 80051d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051da:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051dc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80051e2:	e841 2300 	strex	r3, r2, [r1]
 80051e6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80051e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1e4      	bne.n	80051b8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7fc feee 	bl	8001fd6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2202      	movs	r2, #2
 80051fe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800520c:	b29b      	uxth	r3, r3
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	b29b      	uxth	r3, r3
 8005212:	4619      	mov	r1, r3
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 f939 	bl	800548c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800521a:	e0fc      	b.n	8005416 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005222:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005226:	429a      	cmp	r2, r3
 8005228:	f040 80f5 	bne.w	8005416 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0320 	and.w	r3, r3, #32
 800523a:	2b20      	cmp	r3, #32
 800523c:	f040 80eb 	bne.w	8005416 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2202      	movs	r2, #2
 8005244:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800524c:	4619      	mov	r1, r3
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f91c 	bl	800548c <HAL_UARTEx_RxEventCallback>
      return;
 8005254:	e0df      	b.n	8005416 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005262:	b29b      	uxth	r3, r3
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005270:	b29b      	uxth	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	f000 80d1 	beq.w	800541a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005278:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 80cc 	beq.w	800541a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800528a:	e853 3f00 	ldrex	r3, [r3]
 800528e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005292:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005296:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	461a      	mov	r2, r3
 80052a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80052a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80052a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052ac:	e841 2300 	strex	r3, r2, [r1]
 80052b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1e4      	bne.n	8005282 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3308      	adds	r3, #8
 80052be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c2:	e853 3f00 	ldrex	r3, [r3]
 80052c6:	623b      	str	r3, [r7, #32]
   return(result);
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052ce:	f023 0301 	bic.w	r3, r3, #1
 80052d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3308      	adds	r3, #8
 80052dc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80052e0:	633a      	str	r2, [r7, #48]	@ 0x30
 80052e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052e8:	e841 2300 	strex	r3, r2, [r1]
 80052ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1e1      	bne.n	80052b8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	e853 3f00 	ldrex	r3, [r3]
 8005314:	60fb      	str	r3, [r7, #12]
   return(result);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f023 0310 	bic.w	r3, r3, #16
 800531c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	461a      	mov	r2, r3
 8005326:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800532a:	61fb      	str	r3, [r7, #28]
 800532c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532e:	69b9      	ldr	r1, [r7, #24]
 8005330:	69fa      	ldr	r2, [r7, #28]
 8005332:	e841 2300 	strex	r3, r2, [r1]
 8005336:	617b      	str	r3, [r7, #20]
   return(result);
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1e4      	bne.n	8005308 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2202      	movs	r2, #2
 8005342:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005344:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005348:	4619      	mov	r1, r3
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f89e 	bl	800548c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005350:	e063      	b.n	800541a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005356:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00e      	beq.n	800537c <HAL_UART_IRQHandler+0x5d8>
 800535e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005362:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d008      	beq.n	800537c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005372:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f001 f88e 	bl	8006496 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800537a:	e051      	b.n	8005420 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800537c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005384:	2b00      	cmp	r3, #0
 8005386:	d014      	beq.n	80053b2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800538c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005390:	2b00      	cmp	r3, #0
 8005392:	d105      	bne.n	80053a0 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005394:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005398:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d008      	beq.n	80053b2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d03a      	beq.n	800541e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	4798      	blx	r3
    }
    return;
 80053b0:	e035      	b.n	800541e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80053b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d009      	beq.n	80053d2 <HAL_UART_IRQHandler+0x62e>
 80053be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 ffcf 	bl	800636e <UART_EndTransmit_IT>
    return;
 80053d0:	e026      	b.n	8005420 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80053d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d009      	beq.n	80053f2 <HAL_UART_IRQHandler+0x64e>
 80053de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053e2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f001 f867 	bl	80064be <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053f0:	e016      	b.n	8005420 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80053f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d010      	beq.n	8005420 <HAL_UART_IRQHandler+0x67c>
 80053fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005402:	2b00      	cmp	r3, #0
 8005404:	da0c      	bge.n	8005420 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f001 f84f 	bl	80064aa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800540c:	e008      	b.n	8005420 <HAL_UART_IRQHandler+0x67c>
      return;
 800540e:	bf00      	nop
 8005410:	e006      	b.n	8005420 <HAL_UART_IRQHandler+0x67c>
    return;
 8005412:	bf00      	nop
 8005414:	e004      	b.n	8005420 <HAL_UART_IRQHandler+0x67c>
      return;
 8005416:	bf00      	nop
 8005418:	e002      	b.n	8005420 <HAL_UART_IRQHandler+0x67c>
      return;
 800541a:	bf00      	nop
 800541c:	e000      	b.n	8005420 <HAL_UART_IRQHandler+0x67c>
    return;
 800541e:	bf00      	nop
  }
}
 8005420:	37e8      	adds	r7, #232	@ 0xe8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop

08005428 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	460b      	mov	r3, r1
 8005496:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054a8:	b08c      	sub	sp, #48	@ 0x30
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054ae:	2300      	movs	r3, #0
 80054b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	431a      	orrs	r2, r3
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	431a      	orrs	r2, r3
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	69db      	ldr	r3, [r3, #28]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	4baa      	ldr	r3, [pc, #680]	@ (800577c <UART_SetConfig+0x2d8>)
 80054d4:	4013      	ands	r3, r2
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	6812      	ldr	r2, [r2, #0]
 80054da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054dc:	430b      	orrs	r3, r1
 80054de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	68da      	ldr	r2, [r3, #12]
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a9f      	ldr	r2, [pc, #636]	@ (8005780 <UART_SetConfig+0x2dc>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d004      	beq.n	8005510 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800550c:	4313      	orrs	r3, r2
 800550e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800551a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	6812      	ldr	r2, [r2, #0]
 8005522:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005524:	430b      	orrs	r3, r1
 8005526:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552e:	f023 010f 	bic.w	r1, r3, #15
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a90      	ldr	r2, [pc, #576]	@ (8005784 <UART_SetConfig+0x2e0>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d125      	bne.n	8005594 <UART_SetConfig+0xf0>
 8005548:	4b8f      	ldr	r3, [pc, #572]	@ (8005788 <UART_SetConfig+0x2e4>)
 800554a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800554e:	f003 0303 	and.w	r3, r3, #3
 8005552:	2b03      	cmp	r3, #3
 8005554:	d81a      	bhi.n	800558c <UART_SetConfig+0xe8>
 8005556:	a201      	add	r2, pc, #4	@ (adr r2, 800555c <UART_SetConfig+0xb8>)
 8005558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555c:	0800556d 	.word	0x0800556d
 8005560:	0800557d 	.word	0x0800557d
 8005564:	08005575 	.word	0x08005575
 8005568:	08005585 	.word	0x08005585
 800556c:	2301      	movs	r3, #1
 800556e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005572:	e116      	b.n	80057a2 <UART_SetConfig+0x2fe>
 8005574:	2302      	movs	r3, #2
 8005576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800557a:	e112      	b.n	80057a2 <UART_SetConfig+0x2fe>
 800557c:	2304      	movs	r3, #4
 800557e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005582:	e10e      	b.n	80057a2 <UART_SetConfig+0x2fe>
 8005584:	2308      	movs	r3, #8
 8005586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800558a:	e10a      	b.n	80057a2 <UART_SetConfig+0x2fe>
 800558c:	2310      	movs	r3, #16
 800558e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005592:	e106      	b.n	80057a2 <UART_SetConfig+0x2fe>
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a7c      	ldr	r2, [pc, #496]	@ (800578c <UART_SetConfig+0x2e8>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d138      	bne.n	8005610 <UART_SetConfig+0x16c>
 800559e:	4b7a      	ldr	r3, [pc, #488]	@ (8005788 <UART_SetConfig+0x2e4>)
 80055a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a4:	f003 030c 	and.w	r3, r3, #12
 80055a8:	2b0c      	cmp	r3, #12
 80055aa:	d82d      	bhi.n	8005608 <UART_SetConfig+0x164>
 80055ac:	a201      	add	r2, pc, #4	@ (adr r2, 80055b4 <UART_SetConfig+0x110>)
 80055ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b2:	bf00      	nop
 80055b4:	080055e9 	.word	0x080055e9
 80055b8:	08005609 	.word	0x08005609
 80055bc:	08005609 	.word	0x08005609
 80055c0:	08005609 	.word	0x08005609
 80055c4:	080055f9 	.word	0x080055f9
 80055c8:	08005609 	.word	0x08005609
 80055cc:	08005609 	.word	0x08005609
 80055d0:	08005609 	.word	0x08005609
 80055d4:	080055f1 	.word	0x080055f1
 80055d8:	08005609 	.word	0x08005609
 80055dc:	08005609 	.word	0x08005609
 80055e0:	08005609 	.word	0x08005609
 80055e4:	08005601 	.word	0x08005601
 80055e8:	2300      	movs	r3, #0
 80055ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ee:	e0d8      	b.n	80057a2 <UART_SetConfig+0x2fe>
 80055f0:	2302      	movs	r3, #2
 80055f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055f6:	e0d4      	b.n	80057a2 <UART_SetConfig+0x2fe>
 80055f8:	2304      	movs	r3, #4
 80055fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055fe:	e0d0      	b.n	80057a2 <UART_SetConfig+0x2fe>
 8005600:	2308      	movs	r3, #8
 8005602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005606:	e0cc      	b.n	80057a2 <UART_SetConfig+0x2fe>
 8005608:	2310      	movs	r3, #16
 800560a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800560e:	e0c8      	b.n	80057a2 <UART_SetConfig+0x2fe>
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a5e      	ldr	r2, [pc, #376]	@ (8005790 <UART_SetConfig+0x2ec>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d125      	bne.n	8005666 <UART_SetConfig+0x1c2>
 800561a:	4b5b      	ldr	r3, [pc, #364]	@ (8005788 <UART_SetConfig+0x2e4>)
 800561c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005620:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005624:	2b30      	cmp	r3, #48	@ 0x30
 8005626:	d016      	beq.n	8005656 <UART_SetConfig+0x1b2>
 8005628:	2b30      	cmp	r3, #48	@ 0x30
 800562a:	d818      	bhi.n	800565e <UART_SetConfig+0x1ba>
 800562c:	2b20      	cmp	r3, #32
 800562e:	d00a      	beq.n	8005646 <UART_SetConfig+0x1a2>
 8005630:	2b20      	cmp	r3, #32
 8005632:	d814      	bhi.n	800565e <UART_SetConfig+0x1ba>
 8005634:	2b00      	cmp	r3, #0
 8005636:	d002      	beq.n	800563e <UART_SetConfig+0x19a>
 8005638:	2b10      	cmp	r3, #16
 800563a:	d008      	beq.n	800564e <UART_SetConfig+0x1aa>
 800563c:	e00f      	b.n	800565e <UART_SetConfig+0x1ba>
 800563e:	2300      	movs	r3, #0
 8005640:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005644:	e0ad      	b.n	80057a2 <UART_SetConfig+0x2fe>
 8005646:	2302      	movs	r3, #2
 8005648:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800564c:	e0a9      	b.n	80057a2 <UART_SetConfig+0x2fe>
 800564e:	2304      	movs	r3, #4
 8005650:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005654:	e0a5      	b.n	80057a2 <UART_SetConfig+0x2fe>
 8005656:	2308      	movs	r3, #8
 8005658:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800565c:	e0a1      	b.n	80057a2 <UART_SetConfig+0x2fe>
 800565e:	2310      	movs	r3, #16
 8005660:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005664:	e09d      	b.n	80057a2 <UART_SetConfig+0x2fe>
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a4a      	ldr	r2, [pc, #296]	@ (8005794 <UART_SetConfig+0x2f0>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d125      	bne.n	80056bc <UART_SetConfig+0x218>
 8005670:	4b45      	ldr	r3, [pc, #276]	@ (8005788 <UART_SetConfig+0x2e4>)
 8005672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005676:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800567a:	2bc0      	cmp	r3, #192	@ 0xc0
 800567c:	d016      	beq.n	80056ac <UART_SetConfig+0x208>
 800567e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005680:	d818      	bhi.n	80056b4 <UART_SetConfig+0x210>
 8005682:	2b80      	cmp	r3, #128	@ 0x80
 8005684:	d00a      	beq.n	800569c <UART_SetConfig+0x1f8>
 8005686:	2b80      	cmp	r3, #128	@ 0x80
 8005688:	d814      	bhi.n	80056b4 <UART_SetConfig+0x210>
 800568a:	2b00      	cmp	r3, #0
 800568c:	d002      	beq.n	8005694 <UART_SetConfig+0x1f0>
 800568e:	2b40      	cmp	r3, #64	@ 0x40
 8005690:	d008      	beq.n	80056a4 <UART_SetConfig+0x200>
 8005692:	e00f      	b.n	80056b4 <UART_SetConfig+0x210>
 8005694:	2300      	movs	r3, #0
 8005696:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800569a:	e082      	b.n	80057a2 <UART_SetConfig+0x2fe>
 800569c:	2302      	movs	r3, #2
 800569e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056a2:	e07e      	b.n	80057a2 <UART_SetConfig+0x2fe>
 80056a4:	2304      	movs	r3, #4
 80056a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056aa:	e07a      	b.n	80057a2 <UART_SetConfig+0x2fe>
 80056ac:	2308      	movs	r3, #8
 80056ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056b2:	e076      	b.n	80057a2 <UART_SetConfig+0x2fe>
 80056b4:	2310      	movs	r3, #16
 80056b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056ba:	e072      	b.n	80057a2 <UART_SetConfig+0x2fe>
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a35      	ldr	r2, [pc, #212]	@ (8005798 <UART_SetConfig+0x2f4>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d12a      	bne.n	800571c <UART_SetConfig+0x278>
 80056c6:	4b30      	ldr	r3, [pc, #192]	@ (8005788 <UART_SetConfig+0x2e4>)
 80056c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056d4:	d01a      	beq.n	800570c <UART_SetConfig+0x268>
 80056d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056da:	d81b      	bhi.n	8005714 <UART_SetConfig+0x270>
 80056dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056e0:	d00c      	beq.n	80056fc <UART_SetConfig+0x258>
 80056e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056e6:	d815      	bhi.n	8005714 <UART_SetConfig+0x270>
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d003      	beq.n	80056f4 <UART_SetConfig+0x250>
 80056ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056f0:	d008      	beq.n	8005704 <UART_SetConfig+0x260>
 80056f2:	e00f      	b.n	8005714 <UART_SetConfig+0x270>
 80056f4:	2300      	movs	r3, #0
 80056f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056fa:	e052      	b.n	80057a2 <UART_SetConfig+0x2fe>
 80056fc:	2302      	movs	r3, #2
 80056fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005702:	e04e      	b.n	80057a2 <UART_SetConfig+0x2fe>
 8005704:	2304      	movs	r3, #4
 8005706:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800570a:	e04a      	b.n	80057a2 <UART_SetConfig+0x2fe>
 800570c:	2308      	movs	r3, #8
 800570e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005712:	e046      	b.n	80057a2 <UART_SetConfig+0x2fe>
 8005714:	2310      	movs	r3, #16
 8005716:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800571a:	e042      	b.n	80057a2 <UART_SetConfig+0x2fe>
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a17      	ldr	r2, [pc, #92]	@ (8005780 <UART_SetConfig+0x2dc>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d13a      	bne.n	800579c <UART_SetConfig+0x2f8>
 8005726:	4b18      	ldr	r3, [pc, #96]	@ (8005788 <UART_SetConfig+0x2e4>)
 8005728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800572c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005730:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005734:	d01a      	beq.n	800576c <UART_SetConfig+0x2c8>
 8005736:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800573a:	d81b      	bhi.n	8005774 <UART_SetConfig+0x2d0>
 800573c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005740:	d00c      	beq.n	800575c <UART_SetConfig+0x2b8>
 8005742:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005746:	d815      	bhi.n	8005774 <UART_SetConfig+0x2d0>
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <UART_SetConfig+0x2b0>
 800574c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005750:	d008      	beq.n	8005764 <UART_SetConfig+0x2c0>
 8005752:	e00f      	b.n	8005774 <UART_SetConfig+0x2d0>
 8005754:	2300      	movs	r3, #0
 8005756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800575a:	e022      	b.n	80057a2 <UART_SetConfig+0x2fe>
 800575c:	2302      	movs	r3, #2
 800575e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005762:	e01e      	b.n	80057a2 <UART_SetConfig+0x2fe>
 8005764:	2304      	movs	r3, #4
 8005766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800576a:	e01a      	b.n	80057a2 <UART_SetConfig+0x2fe>
 800576c:	2308      	movs	r3, #8
 800576e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005772:	e016      	b.n	80057a2 <UART_SetConfig+0x2fe>
 8005774:	2310      	movs	r3, #16
 8005776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800577a:	e012      	b.n	80057a2 <UART_SetConfig+0x2fe>
 800577c:	cfff69f3 	.word	0xcfff69f3
 8005780:	40008000 	.word	0x40008000
 8005784:	40013800 	.word	0x40013800
 8005788:	40021000 	.word	0x40021000
 800578c:	40004400 	.word	0x40004400
 8005790:	40004800 	.word	0x40004800
 8005794:	40004c00 	.word	0x40004c00
 8005798:	40005000 	.word	0x40005000
 800579c:	2310      	movs	r3, #16
 800579e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4aae      	ldr	r2, [pc, #696]	@ (8005a60 <UART_SetConfig+0x5bc>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	f040 8097 	bne.w	80058dc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80057b2:	2b08      	cmp	r3, #8
 80057b4:	d823      	bhi.n	80057fe <UART_SetConfig+0x35a>
 80057b6:	a201      	add	r2, pc, #4	@ (adr r2, 80057bc <UART_SetConfig+0x318>)
 80057b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057bc:	080057e1 	.word	0x080057e1
 80057c0:	080057ff 	.word	0x080057ff
 80057c4:	080057e9 	.word	0x080057e9
 80057c8:	080057ff 	.word	0x080057ff
 80057cc:	080057ef 	.word	0x080057ef
 80057d0:	080057ff 	.word	0x080057ff
 80057d4:	080057ff 	.word	0x080057ff
 80057d8:	080057ff 	.word	0x080057ff
 80057dc:	080057f7 	.word	0x080057f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057e0:	f7fd fd36 	bl	8003250 <HAL_RCC_GetPCLK1Freq>
 80057e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057e6:	e010      	b.n	800580a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057e8:	4b9e      	ldr	r3, [pc, #632]	@ (8005a64 <UART_SetConfig+0x5c0>)
 80057ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80057ec:	e00d      	b.n	800580a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057ee:	f7fd fcc1 	bl	8003174 <HAL_RCC_GetSysClockFreq>
 80057f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057f4:	e009      	b.n	800580a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80057fc:	e005      	b.n	800580a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80057fe:	2300      	movs	r3, #0
 8005800:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005808:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800580a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 8130 	beq.w	8005a72 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005816:	4a94      	ldr	r2, [pc, #592]	@ (8005a68 <UART_SetConfig+0x5c4>)
 8005818:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800581c:	461a      	mov	r2, r3
 800581e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005820:	fbb3 f3f2 	udiv	r3, r3, r2
 8005824:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	4613      	mov	r3, r2
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	4413      	add	r3, r2
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	429a      	cmp	r2, r3
 8005834:	d305      	bcc.n	8005842 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	429a      	cmp	r2, r3
 8005840:	d903      	bls.n	800584a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005848:	e113      	b.n	8005a72 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800584a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584c:	2200      	movs	r2, #0
 800584e:	60bb      	str	r3, [r7, #8]
 8005850:	60fa      	str	r2, [r7, #12]
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005856:	4a84      	ldr	r2, [pc, #528]	@ (8005a68 <UART_SetConfig+0x5c4>)
 8005858:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800585c:	b29b      	uxth	r3, r3
 800585e:	2200      	movs	r2, #0
 8005860:	603b      	str	r3, [r7, #0]
 8005862:	607a      	str	r2, [r7, #4]
 8005864:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005868:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800586c:	f7fb f8f2 	bl	8000a54 <__aeabi_uldivmod>
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	4610      	mov	r0, r2
 8005876:	4619      	mov	r1, r3
 8005878:	f04f 0200 	mov.w	r2, #0
 800587c:	f04f 0300 	mov.w	r3, #0
 8005880:	020b      	lsls	r3, r1, #8
 8005882:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005886:	0202      	lsls	r2, r0, #8
 8005888:	6979      	ldr	r1, [r7, #20]
 800588a:	6849      	ldr	r1, [r1, #4]
 800588c:	0849      	lsrs	r1, r1, #1
 800588e:	2000      	movs	r0, #0
 8005890:	460c      	mov	r4, r1
 8005892:	4605      	mov	r5, r0
 8005894:	eb12 0804 	adds.w	r8, r2, r4
 8005898:	eb43 0905 	adc.w	r9, r3, r5
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	469a      	mov	sl, r3
 80058a4:	4693      	mov	fp, r2
 80058a6:	4652      	mov	r2, sl
 80058a8:	465b      	mov	r3, fp
 80058aa:	4640      	mov	r0, r8
 80058ac:	4649      	mov	r1, r9
 80058ae:	f7fb f8d1 	bl	8000a54 <__aeabi_uldivmod>
 80058b2:	4602      	mov	r2, r0
 80058b4:	460b      	mov	r3, r1
 80058b6:	4613      	mov	r3, r2
 80058b8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058c0:	d308      	bcc.n	80058d4 <UART_SetConfig+0x430>
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058c8:	d204      	bcs.n	80058d4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6a3a      	ldr	r2, [r7, #32]
 80058d0:	60da      	str	r2, [r3, #12]
 80058d2:	e0ce      	b.n	8005a72 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80058da:	e0ca      	b.n	8005a72 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	69db      	ldr	r3, [r3, #28]
 80058e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058e4:	d166      	bne.n	80059b4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80058e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80058ea:	2b08      	cmp	r3, #8
 80058ec:	d827      	bhi.n	800593e <UART_SetConfig+0x49a>
 80058ee:	a201      	add	r2, pc, #4	@ (adr r2, 80058f4 <UART_SetConfig+0x450>)
 80058f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f4:	08005919 	.word	0x08005919
 80058f8:	08005921 	.word	0x08005921
 80058fc:	08005929 	.word	0x08005929
 8005900:	0800593f 	.word	0x0800593f
 8005904:	0800592f 	.word	0x0800592f
 8005908:	0800593f 	.word	0x0800593f
 800590c:	0800593f 	.word	0x0800593f
 8005910:	0800593f 	.word	0x0800593f
 8005914:	08005937 	.word	0x08005937
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005918:	f7fd fc9a 	bl	8003250 <HAL_RCC_GetPCLK1Freq>
 800591c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800591e:	e014      	b.n	800594a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005920:	f7fd fcac 	bl	800327c <HAL_RCC_GetPCLK2Freq>
 8005924:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005926:	e010      	b.n	800594a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005928:	4b4e      	ldr	r3, [pc, #312]	@ (8005a64 <UART_SetConfig+0x5c0>)
 800592a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800592c:	e00d      	b.n	800594a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800592e:	f7fd fc21 	bl	8003174 <HAL_RCC_GetSysClockFreq>
 8005932:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005934:	e009      	b.n	800594a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005936:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800593a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800593c:	e005      	b.n	800594a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800593e:	2300      	movs	r3, #0
 8005940:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005948:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800594a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 8090 	beq.w	8005a72 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005956:	4a44      	ldr	r2, [pc, #272]	@ (8005a68 <UART_SetConfig+0x5c4>)
 8005958:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800595c:	461a      	mov	r2, r3
 800595e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005960:	fbb3 f3f2 	udiv	r3, r3, r2
 8005964:	005a      	lsls	r2, r3, #1
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	085b      	lsrs	r3, r3, #1
 800596c:	441a      	add	r2, r3
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	fbb2 f3f3 	udiv	r3, r2, r3
 8005976:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005978:	6a3b      	ldr	r3, [r7, #32]
 800597a:	2b0f      	cmp	r3, #15
 800597c:	d916      	bls.n	80059ac <UART_SetConfig+0x508>
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005984:	d212      	bcs.n	80059ac <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005986:	6a3b      	ldr	r3, [r7, #32]
 8005988:	b29b      	uxth	r3, r3
 800598a:	f023 030f 	bic.w	r3, r3, #15
 800598e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	085b      	lsrs	r3, r3, #1
 8005994:	b29b      	uxth	r3, r3
 8005996:	f003 0307 	and.w	r3, r3, #7
 800599a:	b29a      	uxth	r2, r3
 800599c:	8bfb      	ldrh	r3, [r7, #30]
 800599e:	4313      	orrs	r3, r2
 80059a0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	8bfa      	ldrh	r2, [r7, #30]
 80059a8:	60da      	str	r2, [r3, #12]
 80059aa:	e062      	b.n	8005a72 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80059b2:	e05e      	b.n	8005a72 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059b4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80059b8:	2b08      	cmp	r3, #8
 80059ba:	d828      	bhi.n	8005a0e <UART_SetConfig+0x56a>
 80059bc:	a201      	add	r2, pc, #4	@ (adr r2, 80059c4 <UART_SetConfig+0x520>)
 80059be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c2:	bf00      	nop
 80059c4:	080059e9 	.word	0x080059e9
 80059c8:	080059f1 	.word	0x080059f1
 80059cc:	080059f9 	.word	0x080059f9
 80059d0:	08005a0f 	.word	0x08005a0f
 80059d4:	080059ff 	.word	0x080059ff
 80059d8:	08005a0f 	.word	0x08005a0f
 80059dc:	08005a0f 	.word	0x08005a0f
 80059e0:	08005a0f 	.word	0x08005a0f
 80059e4:	08005a07 	.word	0x08005a07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059e8:	f7fd fc32 	bl	8003250 <HAL_RCC_GetPCLK1Freq>
 80059ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059ee:	e014      	b.n	8005a1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059f0:	f7fd fc44 	bl	800327c <HAL_RCC_GetPCLK2Freq>
 80059f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059f6:	e010      	b.n	8005a1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005a64 <UART_SetConfig+0x5c0>)
 80059fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80059fc:	e00d      	b.n	8005a1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059fe:	f7fd fbb9 	bl	8003174 <HAL_RCC_GetSysClockFreq>
 8005a02:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a04:	e009      	b.n	8005a1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a0c:	e005      	b.n	8005a1a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005a18:	bf00      	nop
    }

    if (pclk != 0U)
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d028      	beq.n	8005a72 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a24:	4a10      	ldr	r2, [pc, #64]	@ (8005a68 <UART_SetConfig+0x5c4>)
 8005a26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	085b      	lsrs	r3, r3, #1
 8005a38:	441a      	add	r2, r3
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a42:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a44:	6a3b      	ldr	r3, [r7, #32]
 8005a46:	2b0f      	cmp	r3, #15
 8005a48:	d910      	bls.n	8005a6c <UART_SetConfig+0x5c8>
 8005a4a:	6a3b      	ldr	r3, [r7, #32]
 8005a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a50:	d20c      	bcs.n	8005a6c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a52:	6a3b      	ldr	r3, [r7, #32]
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	60da      	str	r2, [r3, #12]
 8005a5c:	e009      	b.n	8005a72 <UART_SetConfig+0x5ce>
 8005a5e:	bf00      	nop
 8005a60:	40008000 	.word	0x40008000
 8005a64:	00f42400 	.word	0x00f42400
 8005a68:	08006760 	.word	0x08006760
      }
      else
      {
        ret = HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	2200      	movs	r2, #0
 8005a86:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005a8e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3730      	adds	r7, #48	@ 0x30
 8005a96:	46bd      	mov	sp, r7
 8005a98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005a9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa8:	f003 0308 	and.w	r3, r3, #8
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00a      	beq.n	8005ac6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00a      	beq.n	8005ae8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00a      	beq.n	8005b0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b0e:	f003 0304 	and.w	r3, r3, #4
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00a      	beq.n	8005b2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b30:	f003 0310 	and.w	r3, r3, #16
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00a      	beq.n	8005b4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b52:	f003 0320 	and.w	r3, r3, #32
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00a      	beq.n	8005b70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d01a      	beq.n	8005bb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b9a:	d10a      	bne.n	8005bb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00a      	beq.n	8005bd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	605a      	str	r2, [r3, #4]
  }
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b098      	sub	sp, #96	@ 0x60
 8005be4:	af02      	add	r7, sp, #8
 8005be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bf0:	f7fb ffb2 	bl	8001b58 <HAL_GetTick>
 8005bf4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0308 	and.w	r3, r3, #8
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	d12f      	bne.n	8005c64 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f88e 	bl	8005d34 <UART_WaitOnFlagUntilTimeout>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d022      	beq.n	8005c64 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c26:	e853 3f00 	ldrex	r3, [r3]
 8005c2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c32:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	461a      	mov	r2, r3
 8005c3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c3e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c44:	e841 2300 	strex	r3, r2, [r1]
 8005c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1e6      	bne.n	8005c1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e063      	b.n	8005d2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0304 	and.w	r3, r3, #4
 8005c6e:	2b04      	cmp	r3, #4
 8005c70:	d149      	bne.n	8005d06 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c72:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f857 	bl	8005d34 <UART_WaitOnFlagUntilTimeout>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d03c      	beq.n	8005d06 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c94:	e853 3f00 	ldrex	r3, [r3]
 8005c98:	623b      	str	r3, [r7, #32]
   return(result);
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ca0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005caa:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005cb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cb2:	e841 2300 	strex	r3, r2, [r1]
 8005cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1e6      	bne.n	8005c8c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3308      	adds	r3, #8
 8005cc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	e853 3f00 	ldrex	r3, [r3]
 8005ccc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f023 0301 	bic.w	r3, r3, #1
 8005cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	3308      	adds	r3, #8
 8005cdc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cde:	61fa      	str	r2, [r7, #28]
 8005ce0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce2:	69b9      	ldr	r1, [r7, #24]
 8005ce4:	69fa      	ldr	r2, [r7, #28]
 8005ce6:	e841 2300 	strex	r3, r2, [r1]
 8005cea:	617b      	str	r3, [r7, #20]
   return(result);
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1e5      	bne.n	8005cbe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e012      	b.n	8005d2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2220      	movs	r2, #32
 8005d12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3758      	adds	r7, #88	@ 0x58
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	603b      	str	r3, [r7, #0]
 8005d40:	4613      	mov	r3, r2
 8005d42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d44:	e04f      	b.n	8005de6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d4c:	d04b      	beq.n	8005de6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d4e:	f7fb ff03 	bl	8001b58 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	69ba      	ldr	r2, [r7, #24]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d302      	bcc.n	8005d64 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e04e      	b.n	8005e06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0304 	and.w	r3, r3, #4
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d037      	beq.n	8005de6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	2b80      	cmp	r3, #128	@ 0x80
 8005d7a:	d034      	beq.n	8005de6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	2b40      	cmp	r3, #64	@ 0x40
 8005d80:	d031      	beq.n	8005de6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	69db      	ldr	r3, [r3, #28]
 8005d88:	f003 0308 	and.w	r3, r3, #8
 8005d8c:	2b08      	cmp	r3, #8
 8005d8e:	d110      	bne.n	8005db2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2208      	movs	r2, #8
 8005d96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f000 f920 	bl	8005fde <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2208      	movs	r2, #8
 8005da2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e029      	b.n	8005e06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	69db      	ldr	r3, [r3, #28]
 8005db8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005dbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005dc0:	d111      	bne.n	8005de6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005dca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f000 f906 	bl	8005fde <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e00f      	b.n	8005e06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	69da      	ldr	r2, [r3, #28]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	4013      	ands	r3, r2
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	bf0c      	ite	eq
 8005df6:	2301      	moveq	r3, #1
 8005df8:	2300      	movne	r3, #0
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	79fb      	ldrb	r3, [r7, #7]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d0a0      	beq.n	8005d46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
	...

08005e10 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b096      	sub	sp, #88	@ 0x58
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	88fa      	ldrh	r2, [r7, #6]
 8005e28:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2222      	movs	r2, #34	@ 0x22
 8005e38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d02d      	beq.n	8005ea2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e4c:	4a40      	ldr	r2, [pc, #256]	@ (8005f50 <UART_Start_Receive_DMA+0x140>)
 8005e4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e56:	4a3f      	ldr	r2, [pc, #252]	@ (8005f54 <UART_Start_Receive_DMA+0x144>)
 8005e58:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e60:	4a3d      	ldr	r2, [pc, #244]	@ (8005f58 <UART_Start_Receive_DMA+0x148>)
 8005e62:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	3324      	adds	r3, #36	@ 0x24
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e80:	461a      	mov	r2, r3
 8005e82:	88fb      	ldrh	r3, [r7, #6]
 8005e84:	f7fc f82c 	bl	8001ee0 <HAL_DMA_Start_IT>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d009      	beq.n	8005ea2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2210      	movs	r2, #16
 8005e92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e051      	b.n	8005f46 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d018      	beq.n	8005edc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eb2:	e853 3f00 	ldrex	r3, [r3]
 8005eb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ebe:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005eca:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ecc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005ece:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ed0:	e841 2300 	strex	r3, r2, [r1]
 8005ed4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005ed6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1e6      	bne.n	8005eaa <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3308      	adds	r3, #8
 8005ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee6:	e853 3f00 	ldrex	r3, [r3]
 8005eea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eee:	f043 0301 	orr.w	r3, r3, #1
 8005ef2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	3308      	adds	r3, #8
 8005efa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005efc:	637a      	str	r2, [r7, #52]	@ 0x34
 8005efe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f00:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005f02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f04:	e841 2300 	strex	r3, r2, [r1]
 8005f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1e5      	bne.n	8005edc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3308      	adds	r3, #8
 8005f16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	e853 3f00 	ldrex	r3, [r3]
 8005f1e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	3308      	adds	r3, #8
 8005f2e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f30:	623a      	str	r2, [r7, #32]
 8005f32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f34:	69f9      	ldr	r1, [r7, #28]
 8005f36:	6a3a      	ldr	r2, [r7, #32]
 8005f38:	e841 2300 	strex	r3, r2, [r1]
 8005f3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1e5      	bne.n	8005f10 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3758      	adds	r7, #88	@ 0x58
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	08006161 	.word	0x08006161
 8005f54:	0800628d 	.word	0x0800628d
 8005f58:	080062cb 	.word	0x080062cb

08005f5c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b08f      	sub	sp, #60	@ 0x3c
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	e853 3f00 	ldrex	r3, [r3]
 8005f70:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005f78:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f84:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f8a:	e841 2300 	strex	r3, r2, [r1]
 8005f8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1e6      	bne.n	8005f64 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	3308      	adds	r3, #8
 8005f9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	e853 3f00 	ldrex	r3, [r3]
 8005fa4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005fac:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	3308      	adds	r3, #8
 8005fb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fb6:	61ba      	str	r2, [r7, #24]
 8005fb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fba:	6979      	ldr	r1, [r7, #20]
 8005fbc:	69ba      	ldr	r2, [r7, #24]
 8005fbe:	e841 2300 	strex	r3, r2, [r1]
 8005fc2:	613b      	str	r3, [r7, #16]
   return(result);
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1e5      	bne.n	8005f96 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2220      	movs	r2, #32
 8005fce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8005fd2:	bf00      	nop
 8005fd4:	373c      	adds	r7, #60	@ 0x3c
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b095      	sub	sp, #84	@ 0x54
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fee:	e853 3f00 	ldrex	r3, [r3]
 8005ff2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	461a      	mov	r2, r3
 8006002:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006004:	643b      	str	r3, [r7, #64]	@ 0x40
 8006006:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006008:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800600a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800600c:	e841 2300 	strex	r3, r2, [r1]
 8006010:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1e6      	bne.n	8005fe6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	3308      	adds	r3, #8
 800601e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	e853 3f00 	ldrex	r3, [r3]
 8006026:	61fb      	str	r3, [r7, #28]
   return(result);
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800602e:	f023 0301 	bic.w	r3, r3, #1
 8006032:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	3308      	adds	r3, #8
 800603a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800603c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800603e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006040:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006042:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006044:	e841 2300 	strex	r3, r2, [r1]
 8006048:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800604a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1e3      	bne.n	8006018 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006054:	2b01      	cmp	r3, #1
 8006056:	d118      	bne.n	800608a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	e853 3f00 	ldrex	r3, [r3]
 8006064:	60bb      	str	r3, [r7, #8]
   return(result);
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	f023 0310 	bic.w	r3, r3, #16
 800606c:	647b      	str	r3, [r7, #68]	@ 0x44
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	461a      	mov	r2, r3
 8006074:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006076:	61bb      	str	r3, [r7, #24]
 8006078:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607a:	6979      	ldr	r1, [r7, #20]
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	e841 2300 	strex	r3, r2, [r1]
 8006082:	613b      	str	r3, [r7, #16]
   return(result);
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1e6      	bne.n	8006058 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2220      	movs	r2, #32
 800608e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800609e:	bf00      	nop
 80060a0:	3754      	adds	r7, #84	@ 0x54
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b090      	sub	sp, #64	@ 0x40
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060b6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0320 	and.w	r3, r3, #32
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d137      	bne.n	8006136 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80060c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060c8:	2200      	movs	r2, #0
 80060ca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80060ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	3308      	adds	r3, #8
 80060d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d8:	e853 3f00 	ldrex	r3, [r3]
 80060dc:	623b      	str	r3, [r7, #32]
   return(result);
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	3308      	adds	r3, #8
 80060ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80060ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80060f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060f6:	e841 2300 	strex	r3, r2, [r1]
 80060fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1e5      	bne.n	80060ce <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	e853 3f00 	ldrex	r3, [r3]
 800610e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006116:	637b      	str	r3, [r7, #52]	@ 0x34
 8006118:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	461a      	mov	r2, r3
 800611e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006120:	61fb      	str	r3, [r7, #28]
 8006122:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006124:	69b9      	ldr	r1, [r7, #24]
 8006126:	69fa      	ldr	r2, [r7, #28]
 8006128:	e841 2300 	strex	r3, r2, [r1]
 800612c:	617b      	str	r3, [r7, #20]
   return(result);
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1e6      	bne.n	8006102 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006134:	e002      	b.n	800613c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006136:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006138:	f7ff f976 	bl	8005428 <HAL_UART_TxCpltCallback>
}
 800613c:	bf00      	nop
 800613e:	3740      	adds	r7, #64	@ 0x40
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006150:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f7ff f972 	bl	800543c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006158:	bf00      	nop
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b09c      	sub	sp, #112	@ 0x70
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800616c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0320 	and.w	r3, r3, #32
 8006178:	2b00      	cmp	r3, #0
 800617a:	d171      	bne.n	8006260 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800617c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800617e:	2200      	movs	r2, #0
 8006180:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006184:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800618c:	e853 3f00 	ldrex	r3, [r3]
 8006190:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006192:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006194:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006198:	66bb      	str	r3, [r7, #104]	@ 0x68
 800619a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80061a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80061a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80061a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80061aa:	e841 2300 	strex	r3, r2, [r1]
 80061ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80061b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1e6      	bne.n	8006184 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	3308      	adds	r3, #8
 80061bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c0:	e853 3f00 	ldrex	r3, [r3]
 80061c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061c8:	f023 0301 	bic.w	r3, r3, #1
 80061cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80061ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	3308      	adds	r3, #8
 80061d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80061d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80061d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80061dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061de:	e841 2300 	strex	r3, r2, [r1]
 80061e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80061e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1e5      	bne.n	80061b6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	3308      	adds	r3, #8
 80061f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f4:	e853 3f00 	ldrex	r3, [r3]
 80061f8:	623b      	str	r3, [r7, #32]
   return(result);
 80061fa:	6a3b      	ldr	r3, [r7, #32]
 80061fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006200:	663b      	str	r3, [r7, #96]	@ 0x60
 8006202:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	3308      	adds	r3, #8
 8006208:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800620a:	633a      	str	r2, [r7, #48]	@ 0x30
 800620c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006210:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006212:	e841 2300 	strex	r3, r2, [r1]
 8006216:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1e5      	bne.n	80061ea <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800621e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006220:	2220      	movs	r2, #32
 8006222:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006226:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006228:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800622a:	2b01      	cmp	r3, #1
 800622c:	d118      	bne.n	8006260 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800622e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	e853 3f00 	ldrex	r3, [r3]
 800623a:	60fb      	str	r3, [r7, #12]
   return(result);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f023 0310 	bic.w	r3, r3, #16
 8006242:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006244:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	461a      	mov	r2, r3
 800624a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800624c:	61fb      	str	r3, [r7, #28]
 800624e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006250:	69b9      	ldr	r1, [r7, #24]
 8006252:	69fa      	ldr	r2, [r7, #28]
 8006254:	e841 2300 	strex	r3, r2, [r1]
 8006258:	617b      	str	r3, [r7, #20]
   return(result);
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1e6      	bne.n	800622e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006260:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006262:	2200      	movs	r2, #0
 8006264:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006266:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006268:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800626a:	2b01      	cmp	r3, #1
 800626c:	d107      	bne.n	800627e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800626e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006270:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006274:	4619      	mov	r1, r3
 8006276:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006278:	f7ff f908 	bl	800548c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800627c:	e002      	b.n	8006284 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800627e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006280:	f7ff f8e6 	bl	8005450 <HAL_UART_RxCpltCallback>
}
 8006284:	bf00      	nop
 8006286:	3770      	adds	r7, #112	@ 0x70
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006298:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2201      	movs	r2, #1
 800629e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d109      	bne.n	80062bc <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80062ae:	085b      	lsrs	r3, r3, #1
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	4619      	mov	r1, r3
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f7ff f8e9 	bl	800548c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80062ba:	e002      	b.n	80062c2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f7ff f8d1 	bl	8005464 <HAL_UART_RxHalfCpltCallback>
}
 80062c2:	bf00      	nop
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b086      	sub	sp, #24
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062de:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062e6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062f2:	2b80      	cmp	r3, #128	@ 0x80
 80062f4:	d109      	bne.n	800630a <UART_DMAError+0x40>
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	2b21      	cmp	r3, #33	@ 0x21
 80062fa:	d106      	bne.n	800630a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	2200      	movs	r2, #0
 8006300:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006304:	6978      	ldr	r0, [r7, #20]
 8006306:	f7ff fe29 	bl	8005f5c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006314:	2b40      	cmp	r3, #64	@ 0x40
 8006316:	d109      	bne.n	800632c <UART_DMAError+0x62>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2b22      	cmp	r3, #34	@ 0x22
 800631c:	d106      	bne.n	800632c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2200      	movs	r2, #0
 8006322:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006326:	6978      	ldr	r0, [r7, #20]
 8006328:	f7ff fe59 	bl	8005fde <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006332:	f043 0210 	orr.w	r2, r3, #16
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800633c:	6978      	ldr	r0, [r7, #20]
 800633e:	f7ff f89b 	bl	8005478 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006342:	bf00      	nop
 8006344:	3718      	adds	r7, #24
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b084      	sub	sp, #16
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006356:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f7ff f889 	bl	8005478 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006366:	bf00      	nop
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b088      	sub	sp, #32
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	e853 3f00 	ldrex	r3, [r3]
 8006382:	60bb      	str	r3, [r7, #8]
   return(result);
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800638a:	61fb      	str	r3, [r7, #28]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	461a      	mov	r2, r3
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	61bb      	str	r3, [r7, #24]
 8006396:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006398:	6979      	ldr	r1, [r7, #20]
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	e841 2300 	strex	r3, r2, [r1]
 80063a0:	613b      	str	r3, [r7, #16]
   return(result);
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e6      	bne.n	8006376 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2220      	movs	r2, #32
 80063ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f7ff f836 	bl	8005428 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063bc:	bf00      	nop
 80063be:	3720      	adds	r7, #32
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
 80063d0:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e058      	b.n	800648e <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d106      	bne.n	80063f4 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f7fb f9d8 	bl	80017a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2224      	movs	r2, #36	@ 0x24
 80063f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f022 0201 	bic.w	r2, r2, #1
 800640a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006410:	2b00      	cmp	r3, #0
 8006412:	d002      	beq.n	800641a <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f7ff fb41 	bl	8005a9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f7ff f842 	bl	80054a4 <UART_SetConfig>
 8006420:	4603      	mov	r3, r0
 8006422:	2b01      	cmp	r3, #1
 8006424:	d101      	bne.n	800642a <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e031      	b.n	800648e <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	689a      	ldr	r2, [r3, #8]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006438:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	430a      	orrs	r2, r1
 800644c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	055b      	lsls	r3, r3, #21
 8006452:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	041b      	lsls	r3, r3, #16
 8006458:	697a      	ldr	r2, [r7, #20]
 800645a:	4313      	orrs	r3, r2
 800645c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8006468:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	6812      	ldr	r2, [r2, #0]
 8006470:	6979      	ldr	r1, [r7, #20]
 8006472:	430b      	orrs	r3, r1
 8006474:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f042 0201 	orr.w	r2, r2, #1
 8006484:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f7ff fbaa 	bl	8005be0 <UART_CheckIdleState>
 800648c:	4603      	mov	r3, r0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3718      	adds	r7, #24
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006496:	b480      	push	{r7}
 8006498:	b083      	sub	sp, #12
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800649e:	bf00      	nop
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b083      	sub	sp, #12
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80064b2:	bf00      	nop
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80064be:	b480      	push	{r7}
 80064c0:	b083      	sub	sp, #12
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80064c6:	bf00      	nop
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80064d2:	b480      	push	{r7}
 80064d4:	b085      	sub	sp, #20
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d101      	bne.n	80064e8 <HAL_UARTEx_DisableFifoMode+0x16>
 80064e4:	2302      	movs	r3, #2
 80064e6:	e027      	b.n	8006538 <HAL_UARTEx_DisableFifoMode+0x66>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2224      	movs	r2, #36	@ 0x24
 80064f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f022 0201 	bic.w	r2, r2, #1
 800650e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006516:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2220      	movs	r2, #32
 800652a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3714      	adds	r7, #20
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006554:	2b01      	cmp	r3, #1
 8006556:	d101      	bne.n	800655c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006558:	2302      	movs	r3, #2
 800655a:	e02d      	b.n	80065b8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2224      	movs	r2, #36	@ 0x24
 8006568:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f022 0201 	bic.w	r2, r2, #1
 8006582:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	430a      	orrs	r2, r1
 8006596:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 f84f 	bl	800663c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2220      	movs	r2, #32
 80065aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d101      	bne.n	80065d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80065d4:	2302      	movs	r3, #2
 80065d6:	e02d      	b.n	8006634 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2224      	movs	r2, #36	@ 0x24
 80065e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f022 0201 	bic.w	r2, r2, #1
 80065fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	430a      	orrs	r2, r1
 8006612:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 f811 	bl	800663c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2220      	movs	r2, #32
 8006626:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006648:	2b00      	cmp	r3, #0
 800664a:	d108      	bne.n	800665e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800665c:	e031      	b.n	80066c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800665e:	2308      	movs	r3, #8
 8006660:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006662:	2308      	movs	r3, #8
 8006664:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	0e5b      	lsrs	r3, r3, #25
 800666e:	b2db      	uxtb	r3, r3
 8006670:	f003 0307 	and.w	r3, r3, #7
 8006674:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	0f5b      	lsrs	r3, r3, #29
 800667e:	b2db      	uxtb	r3, r3
 8006680:	f003 0307 	and.w	r3, r3, #7
 8006684:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006686:	7bbb      	ldrb	r3, [r7, #14]
 8006688:	7b3a      	ldrb	r2, [r7, #12]
 800668a:	4911      	ldr	r1, [pc, #68]	@ (80066d0 <UARTEx_SetNbDataToProcess+0x94>)
 800668c:	5c8a      	ldrb	r2, [r1, r2]
 800668e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006692:	7b3a      	ldrb	r2, [r7, #12]
 8006694:	490f      	ldr	r1, [pc, #60]	@ (80066d4 <UARTEx_SetNbDataToProcess+0x98>)
 8006696:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006698:	fb93 f3f2 	sdiv	r3, r3, r2
 800669c:	b29a      	uxth	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
 80066a6:	7b7a      	ldrb	r2, [r7, #13]
 80066a8:	4909      	ldr	r1, [pc, #36]	@ (80066d0 <UARTEx_SetNbDataToProcess+0x94>)
 80066aa:	5c8a      	ldrb	r2, [r1, r2]
 80066ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80066b0:	7b7a      	ldrb	r2, [r7, #13]
 80066b2:	4908      	ldr	r1, [pc, #32]	@ (80066d4 <UARTEx_SetNbDataToProcess+0x98>)
 80066b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80066c2:	bf00      	nop
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	08006778 	.word	0x08006778
 80066d4:	08006780 	.word	0x08006780

080066d8 <memset>:
 80066d8:	4402      	add	r2, r0
 80066da:	4603      	mov	r3, r0
 80066dc:	4293      	cmp	r3, r2
 80066de:	d100      	bne.n	80066e2 <memset+0xa>
 80066e0:	4770      	bx	lr
 80066e2:	f803 1b01 	strb.w	r1, [r3], #1
 80066e6:	e7f9      	b.n	80066dc <memset+0x4>

080066e8 <__libc_init_array>:
 80066e8:	b570      	push	{r4, r5, r6, lr}
 80066ea:	4d0d      	ldr	r5, [pc, #52]	@ (8006720 <__libc_init_array+0x38>)
 80066ec:	4c0d      	ldr	r4, [pc, #52]	@ (8006724 <__libc_init_array+0x3c>)
 80066ee:	1b64      	subs	r4, r4, r5
 80066f0:	10a4      	asrs	r4, r4, #2
 80066f2:	2600      	movs	r6, #0
 80066f4:	42a6      	cmp	r6, r4
 80066f6:	d109      	bne.n	800670c <__libc_init_array+0x24>
 80066f8:	4d0b      	ldr	r5, [pc, #44]	@ (8006728 <__libc_init_array+0x40>)
 80066fa:	4c0c      	ldr	r4, [pc, #48]	@ (800672c <__libc_init_array+0x44>)
 80066fc:	f000 f818 	bl	8006730 <_init>
 8006700:	1b64      	subs	r4, r4, r5
 8006702:	10a4      	asrs	r4, r4, #2
 8006704:	2600      	movs	r6, #0
 8006706:	42a6      	cmp	r6, r4
 8006708:	d105      	bne.n	8006716 <__libc_init_array+0x2e>
 800670a:	bd70      	pop	{r4, r5, r6, pc}
 800670c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006710:	4798      	blx	r3
 8006712:	3601      	adds	r6, #1
 8006714:	e7ee      	b.n	80066f4 <__libc_init_array+0xc>
 8006716:	f855 3b04 	ldr.w	r3, [r5], #4
 800671a:	4798      	blx	r3
 800671c:	3601      	adds	r6, #1
 800671e:	e7f2      	b.n	8006706 <__libc_init_array+0x1e>
 8006720:	08006790 	.word	0x08006790
 8006724:	08006790 	.word	0x08006790
 8006728:	08006790 	.word	0x08006790
 800672c:	08006794 	.word	0x08006794

08006730 <_init>:
 8006730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006732:	bf00      	nop
 8006734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006736:	bc08      	pop	{r3}
 8006738:	469e      	mov	lr, r3
 800673a:	4770      	bx	lr

0800673c <_fini>:
 800673c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800673e:	bf00      	nop
 8006740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006742:	bc08      	pop	{r3}
 8006744:	469e      	mov	lr, r3
 8006746:	4770      	bx	lr
