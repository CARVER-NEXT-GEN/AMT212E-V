
AMT212E-V_Micro-ROS_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018520  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dd8  08018700  08018700  00019700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080194d8  080194d8  0001b14c  2**0
                  CONTENTS
  4 .ARM          00000008  080194d8  080194d8  0001a4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080194e0  080194e0  0001b14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080194e0  080194e0  0001a4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080194e8  080194e8  0001a4e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  080194ec  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ad40  20000150  08019638  0001b150  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000ae90  08019638  0001be90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b14c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023e86  00000000  00000000  0001b17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005120  00000000  00000000  0003f002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001be0  00000000  00000000  00044128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001566  00000000  00000000  00045d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d1f3  00000000  00000000  0004726e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023206  00000000  00000000  00074461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112ff1  00000000  00000000  00097667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001aa658  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081d4  00000000  00000000  001aa6d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009e  00000000  00000000  001b28a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000150 	.word	0x20000150
 80001fc:	00000000 	.word	0x00000000
 8000200:	080186e8 	.word	0x080186e8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000154 	.word	0x20000154
 800021c:	080186e8 	.word	0x080186e8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_ldivmod>:
 8000b2c:	b97b      	cbnz	r3, 8000b4e <__aeabi_ldivmod+0x22>
 8000b2e:	b972      	cbnz	r2, 8000b4e <__aeabi_ldivmod+0x22>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bfbe      	ittt	lt
 8000b34:	2000      	movlt	r0, #0
 8000b36:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b3a:	e006      	blt.n	8000b4a <__aeabi_ldivmod+0x1e>
 8000b3c:	bf08      	it	eq
 8000b3e:	2800      	cmpeq	r0, #0
 8000b40:	bf1c      	itt	ne
 8000b42:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b46:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b4a:	f000 b9b5 	b.w	8000eb8 <__aeabi_idiv0>
 8000b4e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b52:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b56:	2900      	cmp	r1, #0
 8000b58:	db09      	blt.n	8000b6e <__aeabi_ldivmod+0x42>
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	db1a      	blt.n	8000b94 <__aeabi_ldivmod+0x68>
 8000b5e:	f000 f84d 	bl	8000bfc <__udivmoddi4>
 8000b62:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6a:	b004      	add	sp, #16
 8000b6c:	4770      	bx	lr
 8000b6e:	4240      	negs	r0, r0
 8000b70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	db1b      	blt.n	8000bb0 <__aeabi_ldivmod+0x84>
 8000b78:	f000 f840 	bl	8000bfc <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4240      	negs	r0, r0
 8000b88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b8c:	4252      	negs	r2, r2
 8000b8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b92:	4770      	bx	lr
 8000b94:	4252      	negs	r2, r2
 8000b96:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b9a:	f000 f82f 	bl	8000bfc <__udivmoddi4>
 8000b9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba6:	b004      	add	sp, #16
 8000ba8:	4240      	negs	r0, r0
 8000baa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bae:	4770      	bx	lr
 8000bb0:	4252      	negs	r2, r2
 8000bb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bb6:	f000 f821 	bl	8000bfc <__udivmoddi4>
 8000bba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc2:	b004      	add	sp, #16
 8000bc4:	4252      	negs	r2, r2
 8000bc6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_uldivmod>:
 8000bcc:	b953      	cbnz	r3, 8000be4 <__aeabi_uldivmod+0x18>
 8000bce:	b94a      	cbnz	r2, 8000be4 <__aeabi_uldivmod+0x18>
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	bf08      	it	eq
 8000bd4:	2800      	cmpeq	r0, #0
 8000bd6:	bf1c      	itt	ne
 8000bd8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bdc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000be0:	f000 b96a 	b.w	8000eb8 <__aeabi_idiv0>
 8000be4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bec:	f000 f806 	bl	8000bfc <__udivmoddi4>
 8000bf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf8:	b004      	add	sp, #16
 8000bfa:	4770      	bx	lr

08000bfc <__udivmoddi4>:
 8000bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c00:	9d08      	ldr	r5, [sp, #32]
 8000c02:	460c      	mov	r4, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14e      	bne.n	8000ca6 <__udivmoddi4+0xaa>
 8000c08:	4694      	mov	ip, r2
 8000c0a:	458c      	cmp	ip, r1
 8000c0c:	4686      	mov	lr, r0
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	d962      	bls.n	8000cda <__udivmoddi4+0xde>
 8000c14:	b14a      	cbz	r2, 8000c2a <__udivmoddi4+0x2e>
 8000c16:	f1c2 0320 	rsb	r3, r2, #32
 8000c1a:	4091      	lsls	r1, r2
 8000c1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c24:	4319      	orrs	r1, r3
 8000c26:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2e:	fa1f f68c 	uxth.w	r6, ip
 8000c32:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c3a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c42:	fb04 f106 	mul.w	r1, r4, r6
 8000c46:	4299      	cmp	r1, r3
 8000c48:	d90a      	bls.n	8000c60 <__udivmoddi4+0x64>
 8000c4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c52:	f080 8112 	bcs.w	8000e7a <__udivmoddi4+0x27e>
 8000c56:	4299      	cmp	r1, r3
 8000c58:	f240 810f 	bls.w	8000e7a <__udivmoddi4+0x27e>
 8000c5c:	3c02      	subs	r4, #2
 8000c5e:	4463      	add	r3, ip
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	fa1f f38e 	uxth.w	r3, lr
 8000c66:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c72:	fb00 f606 	mul.w	r6, r0, r6
 8000c76:	429e      	cmp	r6, r3
 8000c78:	d90a      	bls.n	8000c90 <__udivmoddi4+0x94>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c82:	f080 80fc 	bcs.w	8000e7e <__udivmoddi4+0x282>
 8000c86:	429e      	cmp	r6, r3
 8000c88:	f240 80f9 	bls.w	8000e7e <__udivmoddi4+0x282>
 8000c8c:	4463      	add	r3, ip
 8000c8e:	3802      	subs	r0, #2
 8000c90:	1b9b      	subs	r3, r3, r6
 8000c92:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c96:	2100      	movs	r1, #0
 8000c98:	b11d      	cbz	r5, 8000ca2 <__udivmoddi4+0xa6>
 8000c9a:	40d3      	lsrs	r3, r2
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	e9c5 3200 	strd	r3, r2, [r5]
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d905      	bls.n	8000cb6 <__udivmoddi4+0xba>
 8000caa:	b10d      	cbz	r5, 8000cb0 <__udivmoddi4+0xb4>
 8000cac:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e7f5      	b.n	8000ca2 <__udivmoddi4+0xa6>
 8000cb6:	fab3 f183 	clz	r1, r3
 8000cba:	2900      	cmp	r1, #0
 8000cbc:	d146      	bne.n	8000d4c <__udivmoddi4+0x150>
 8000cbe:	42a3      	cmp	r3, r4
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0xcc>
 8000cc2:	4290      	cmp	r0, r2
 8000cc4:	f0c0 80f0 	bcc.w	8000ea8 <__udivmoddi4+0x2ac>
 8000cc8:	1a86      	subs	r6, r0, r2
 8000cca:	eb64 0303 	sbc.w	r3, r4, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	2d00      	cmp	r5, #0
 8000cd2:	d0e6      	beq.n	8000ca2 <__udivmoddi4+0xa6>
 8000cd4:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd8:	e7e3      	b.n	8000ca2 <__udivmoddi4+0xa6>
 8000cda:	2a00      	cmp	r2, #0
 8000cdc:	f040 8090 	bne.w	8000e00 <__udivmoddi4+0x204>
 8000ce0:	eba1 040c 	sub.w	r4, r1, ip
 8000ce4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce8:	fa1f f78c 	uxth.w	r7, ip
 8000cec:	2101      	movs	r1, #1
 8000cee:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb08 4416 	mls	r4, r8, r6, r4
 8000cfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfe:	fb07 f006 	mul.w	r0, r7, r6
 8000d02:	4298      	cmp	r0, r3
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x11c>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d0e:	d202      	bcs.n	8000d16 <__udivmoddi4+0x11a>
 8000d10:	4298      	cmp	r0, r3
 8000d12:	f200 80cd 	bhi.w	8000eb0 <__udivmoddi4+0x2b4>
 8000d16:	4626      	mov	r6, r4
 8000d18:	1a1c      	subs	r4, r3, r0
 8000d1a:	fa1f f38e 	uxth.w	r3, lr
 8000d1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d22:	fb08 4410 	mls	r4, r8, r0, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb00 f707 	mul.w	r7, r0, r7
 8000d2e:	429f      	cmp	r7, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x148>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x146>
 8000d3c:	429f      	cmp	r7, r3
 8000d3e:	f200 80b0 	bhi.w	8000ea2 <__udivmoddi4+0x2a6>
 8000d42:	4620      	mov	r0, r4
 8000d44:	1bdb      	subs	r3, r3, r7
 8000d46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0x9c>
 8000d4c:	f1c1 0620 	rsb	r6, r1, #32
 8000d50:	408b      	lsls	r3, r1
 8000d52:	fa22 f706 	lsr.w	r7, r2, r6
 8000d56:	431f      	orrs	r7, r3
 8000d58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d60:	ea43 030c 	orr.w	r3, r3, ip
 8000d64:	40f4      	lsrs	r4, r6
 8000d66:	fa00 f801 	lsl.w	r8, r0, r1
 8000d6a:	0c38      	lsrs	r0, r7, #16
 8000d6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d70:	fbb4 fef0 	udiv	lr, r4, r0
 8000d74:	fa1f fc87 	uxth.w	ip, r7
 8000d78:	fb00 441e 	mls	r4, r0, lr, r4
 8000d7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d80:	fb0e f90c 	mul.w	r9, lr, ip
 8000d84:	45a1      	cmp	r9, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	d90a      	bls.n	8000da2 <__udivmoddi4+0x1a6>
 8000d8c:	193c      	adds	r4, r7, r4
 8000d8e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d92:	f080 8084 	bcs.w	8000e9e <__udivmoddi4+0x2a2>
 8000d96:	45a1      	cmp	r9, r4
 8000d98:	f240 8081 	bls.w	8000e9e <__udivmoddi4+0x2a2>
 8000d9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000da0:	443c      	add	r4, r7
 8000da2:	eba4 0409 	sub.w	r4, r4, r9
 8000da6:	fa1f f983 	uxth.w	r9, r3
 8000daa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dae:	fb00 4413 	mls	r4, r0, r3, r4
 8000db2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dba:	45a4      	cmp	ip, r4
 8000dbc:	d907      	bls.n	8000dce <__udivmoddi4+0x1d2>
 8000dbe:	193c      	adds	r4, r7, r4
 8000dc0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000dc4:	d267      	bcs.n	8000e96 <__udivmoddi4+0x29a>
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d965      	bls.n	8000e96 <__udivmoddi4+0x29a>
 8000dca:	3b02      	subs	r3, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dd2:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd6:	eba4 040c 	sub.w	r4, r4, ip
 8000dda:	429c      	cmp	r4, r3
 8000ddc:	46ce      	mov	lr, r9
 8000dde:	469c      	mov	ip, r3
 8000de0:	d351      	bcc.n	8000e86 <__udivmoddi4+0x28a>
 8000de2:	d04e      	beq.n	8000e82 <__udivmoddi4+0x286>
 8000de4:	b155      	cbz	r5, 8000dfc <__udivmoddi4+0x200>
 8000de6:	ebb8 030e 	subs.w	r3, r8, lr
 8000dea:	eb64 040c 	sbc.w	r4, r4, ip
 8000dee:	fa04 f606 	lsl.w	r6, r4, r6
 8000df2:	40cb      	lsrs	r3, r1
 8000df4:	431e      	orrs	r6, r3
 8000df6:	40cc      	lsrs	r4, r1
 8000df8:	e9c5 6400 	strd	r6, r4, [r5]
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	e750      	b.n	8000ca2 <__udivmoddi4+0xa6>
 8000e00:	f1c2 0320 	rsb	r3, r2, #32
 8000e04:	fa20 f103 	lsr.w	r1, r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e10:	4094      	lsls	r4, r2
 8000e12:	430c      	orrs	r4, r1
 8000e14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e1c:	fa1f f78c 	uxth.w	r7, ip
 8000e20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e24:	fb08 3110 	mls	r1, r8, r0, r3
 8000e28:	0c23      	lsrs	r3, r4, #16
 8000e2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2e:	fb00 f107 	mul.w	r1, r0, r7
 8000e32:	4299      	cmp	r1, r3
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x24c>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e3e:	d22c      	bcs.n	8000e9a <__udivmoddi4+0x29e>
 8000e40:	4299      	cmp	r1, r3
 8000e42:	d92a      	bls.n	8000e9a <__udivmoddi4+0x29e>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1a5b      	subs	r3, r3, r1
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e50:	fb08 3311 	mls	r3, r8, r1, r3
 8000e54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e58:	fb01 f307 	mul.w	r3, r1, r7
 8000e5c:	42a3      	cmp	r3, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x276>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e68:	d213      	bcs.n	8000e92 <__udivmoddi4+0x296>
 8000e6a:	42a3      	cmp	r3, r4
 8000e6c:	d911      	bls.n	8000e92 <__udivmoddi4+0x296>
 8000e6e:	3902      	subs	r1, #2
 8000e70:	4464      	add	r4, ip
 8000e72:	1ae4      	subs	r4, r4, r3
 8000e74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e78:	e739      	b.n	8000cee <__udivmoddi4+0xf2>
 8000e7a:	4604      	mov	r4, r0
 8000e7c:	e6f0      	b.n	8000c60 <__udivmoddi4+0x64>
 8000e7e:	4608      	mov	r0, r1
 8000e80:	e706      	b.n	8000c90 <__udivmoddi4+0x94>
 8000e82:	45c8      	cmp	r8, r9
 8000e84:	d2ae      	bcs.n	8000de4 <__udivmoddi4+0x1e8>
 8000e86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8e:	3801      	subs	r0, #1
 8000e90:	e7a8      	b.n	8000de4 <__udivmoddi4+0x1e8>
 8000e92:	4631      	mov	r1, r6
 8000e94:	e7ed      	b.n	8000e72 <__udivmoddi4+0x276>
 8000e96:	4603      	mov	r3, r0
 8000e98:	e799      	b.n	8000dce <__udivmoddi4+0x1d2>
 8000e9a:	4630      	mov	r0, r6
 8000e9c:	e7d4      	b.n	8000e48 <__udivmoddi4+0x24c>
 8000e9e:	46d6      	mov	lr, sl
 8000ea0:	e77f      	b.n	8000da2 <__udivmoddi4+0x1a6>
 8000ea2:	4463      	add	r3, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e74d      	b.n	8000d44 <__udivmoddi4+0x148>
 8000ea8:	4606      	mov	r6, r0
 8000eaa:	4623      	mov	r3, r4
 8000eac:	4608      	mov	r0, r1
 8000eae:	e70f      	b.n	8000cd0 <__udivmoddi4+0xd4>
 8000eb0:	3e02      	subs	r6, #2
 8000eb2:	4463      	add	r3, ip
 8000eb4:	e730      	b.n	8000d18 <__udivmoddi4+0x11c>
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <AMT212EV_Init>:
 * (total count per revolute) that depend on the resolution.
 */


void AMT212EV_Init(AMT212EV *amt212ev ,UART_HandleTypeDef *huartx,uint16_t freq,int16_t cpr)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	461a      	mov	r2, r3
 8000eca:	460b      	mov	r3, r1
 8000ecc:	80fb      	strh	r3, [r7, #6]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	80bb      	strh	r3, [r7, #4]
	amt212ev->huartx = huartx;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	68ba      	ldr	r2, [r7, #8]
 8000ed6:	601a      	str	r2, [r3, #0]
	amt212ev->freq = freq;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	88fa      	ldrh	r2, [r7, #6]
 8000edc:	809a      	strh	r2, [r3, #4]
	amt212ev->cpr = cpr;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	88ba      	ldrh	r2, [r7, #4]
 8000ee2:	80da      	strh	r2, [r3, #6]
	amt212ev->left_limit = 0;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	82da      	strh	r2, [r3, #22]
	amt212ev->right_limit = 0;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	2200      	movs	r2, #0
 8000eee:	831a      	strh	r2, [r3, #24]
	amt212ev->dir = -1;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	22ff      	movs	r2, #255	@ 0xff
 8000ef4:	771a      	strb	r2, [r3, #28]
	amt212ev->raw_count = 0;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	829a      	strh	r2, [r3, #20]
	amt212ev->enc_home_pos = 2810;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f640 22fa 	movw	r2, #2810	@ 0xafa
 8000f02:	835a      	strh	r2, [r3, #26]
	amt212ev->degree = 0;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f04f 0200 	mov.w	r2, #0
 8000f0a:	629a      	str	r2, [r3, #40]	@ 0x28
	amt212ev->c[1] = 0;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	825a      	strh	r2, [r3, #18]
	amt212ev->c[0] = 0;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	2200      	movs	r2, #0
 8000f16:	821a      	strh	r2, [r3, #16]
	amt212ev->diff_count = 0;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	621a      	str	r2, [r3, #32]
	amt212ev->pulses = 0;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2200      	movs	r2, #0
 8000f22:	625a      	str	r2, [r3, #36]	@ 0x24
	amt212ev->revs = 0;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f04f 0200 	mov.w	r2, #0
 8000f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
	amt212ev->rads = 0;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f04f 0200 	mov.w	r2, #0
 8000f32:	631a      	str	r2, [r3, #48]	@ 0x30
	amt212ev->pps = 0;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f04f 0200 	mov.w	r2, #0
 8000f3a:	635a      	str	r2, [r3, #52]	@ 0x34
	amt212ev->radps = 0;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f04f 0200 	mov.w	r2, #0
 8000f42:	639a      	str	r2, [r3, #56]	@ 0x38
	amt212ev->rpm = 0;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f04f 0200 	mov.w	r2, #0
 8000f4a:	63da      	str	r2, [r3, #60]	@ 0x3c
	amt212ev->rx[0] = 0;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	amt212ev->rx[1] = 0;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	amt212ev->timeout = 0;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
	amt212ev->error_caught = 0;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

	// Start using UART DMA
	HAL_UART_Receive_DMA(huartx, amt212ev->rx, sizeof(amt212ev->rx));
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	3340      	adds	r3, #64	@ 0x40
 8000f6e:	2202      	movs	r2, #2
 8000f70:	4619      	mov	r1, r3
 8000f72:	68b8      	ldr	r0, [r7, #8]
 8000f74:	f005 f88a 	bl	800608c <HAL_UART_Receive_DMA>



}
 8000f78:	bf00      	nop
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <AMT212EV_ReadPosition>:

//void AMT212EV_Flip(AMT212EV *amt212ev){
//	amt212ev->dir = -1;
//}

void AMT212EV_ReadPosition(AMT212EV *amt212ev){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

	// Arrays to command an encoder
	uint8_t read_pos[1] = {0x54}; // Read Raw count data
 8000f88:	2354      	movs	r3, #84	@ 0x54
 8000f8a:	733b      	strb	r3, [r7, #12]

		if (HAL_UART_Transmit_DMA(amt212ev->huartx, read_pos, sizeof(read_pos)) != HAL_OK)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f107 010c 	add.w	r1, r7, #12
 8000f94:	2201      	movs	r2, #1
 8000f96:	4618      	mov	r0, r3
 8000f98:	f004 fff8 	bl	8005f8c <HAL_UART_Transmit_DMA>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <AMT212EV_ReadPosition+0x2a>
		{
			// Handle transmission error if necessary
			amt212ev->error_caught = READPOS;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
		}

}
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <AMT212EV_Processing_Data>:

	}
}


uint16_t AMT212EV_Processing_Data(AMT212EV *amt212ev){
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b084      	sub	sp, #16
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
	 // Extract encoder data
	    uint16_t data = (amt212ev->rx[1] << 8) | amt212ev->rx[0];
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000fc0:	021b      	lsls	r3, r3, #8
 8000fc2:	b21a      	sxth	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b21b      	sxth	r3, r3
 8000fd0:	81fb      	strh	r3, [r7, #14]

	    // Verify the checksum
	    if (verifyChecksumRS485(data)) {
 8000fd2:	89fb      	ldrh	r3, [r7, #14]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 f991 	bl	80012fc <verifyChecksumRS485>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d019      	beq.n	8001014 <AMT212EV_Processing_Data+0x62>
	    	if(amt212ev->cpr == 4096){
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000fe6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000fea:	d105      	bne.n	8000ff8 <AMT212EV_Processing_Data+0x46>
	    		 return data &= 0x0FFF;  // Mask to keep only 12 bits (valid data)
 8000fec:	89fb      	ldrh	r3, [r7, #14]
 8000fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ff2:	81fb      	strh	r3, [r7, #14]
 8000ff4:	89fb      	ldrh	r3, [r7, #14]
 8000ff6:	e012      	b.n	800101e <AMT212EV_Processing_Data+0x6c>

	    	}

	    	else if(amt212ev->cpr == 16384){
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000ffe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001002:	d105      	bne.n	8001010 <AMT212EV_Processing_Data+0x5e>
	    		 return data &= 0x3FFF; // Mask to keep only 14 bits (valid data)
 8001004:	89fb      	ldrh	r3, [r7, #14]
 8001006:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800100a:	81fb      	strh	r3, [r7, #14]
 800100c:	89fb      	ldrh	r3, [r7, #14]
 800100e:	e006      	b.n	800101e <AMT212EV_Processing_Data+0x6c>
	    	}

	        return data;
 8001010:	89fb      	ldrh	r3, [r7, #14]
 8001012:	e004      	b.n	800101e <AMT212EV_Processing_Data+0x6c>

	    } else {
	        // Handle checksum error by counting timeout
	    	amt212ev->timeout += 1;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	1c5a      	adds	r2, r3, #1
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	60da      	str	r2, [r3, #12]
	    }
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <AMT212EV_DiffCount>:


void AMT212EV_DiffCount(AMT212EV *amt212ev){
 8001028:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800102c:	b084      	sub	sp, #16
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]

	amt212ev->raw_count = AMT212EV_Processing_Data(amt212ev);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ffbd 	bl	8000fb2 <AMT212EV_Processing_Data>
 8001038:	4603      	mov	r3, r0
 800103a:	b21a      	sxth	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	829a      	strh	r2, [r3, #20]

	amt212ev->c[1] = (amt212ev->raw_count - amt212ev->enc_home_pos) * amt212ev->dir;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001046:	461a      	mov	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	b29a      	uxth	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8001058:	b29b      	uxth	r3, r3
 800105a:	fb12 f303 	smulbb	r3, r2, r3
 800105e:	b29b      	uxth	r3, r3
 8001060:	b21a      	sxth	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	825a      	strh	r2, [r3, #18]

	// Difference of Raw Position
	int32_t diff_count = amt212ev->c[1] - amt212ev->c[0];
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800106c:	461a      	mov	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	60fb      	str	r3, [r7, #12]

	if (diff_count > (amt212ev->cpr / 2)) {
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800107e:	0fda      	lsrs	r2, r3, #31
 8001080:	4413      	add	r3, r2
 8001082:	105b      	asrs	r3, r3, #1
 8001084:	b21b      	sxth	r3, r3
 8001086:	461a      	mov	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4293      	cmp	r3, r2
 800108c:	dd07      	ble.n	800109e <AMT212EV_DiffCount+0x76>
		diff_count -= amt212ev->cpr;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001094:	461a      	mov	r2, r3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	1a9b      	subs	r3, r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	e011      	b.n	80010c2 <AMT212EV_DiffCount+0x9a>
	} else if (diff_count < -(amt212ev->cpr / 2)) {
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010a4:	0fda      	lsrs	r2, r3, #31
 80010a6:	4413      	add	r3, r2
 80010a8:	105b      	asrs	r3, r3, #1
 80010aa:	b21b      	sxth	r3, r3
 80010ac:	425b      	negs	r3, r3
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	da06      	bge.n	80010c2 <AMT212EV_DiffCount+0x9a>
		diff_count += amt212ev->cpr;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010ba:	461a      	mov	r2, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	4413      	add	r3, r2
 80010c0:	60fb      	str	r3, [r7, #12]
	}
	amt212ev->diff_count = diff_count;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	621a      	str	r2, [r3, #32]
	amt212ev->pulses += amt212ev->diff_count;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a1b      	ldr	r3, [r3, #32]
 80010d0:	441a      	add	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	625a      	str	r2, [r3, #36]	@ 0x24
	amt212ev->revs += amt212ev->diff_count / (float)amt212ev->cpr;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	ee07 3a90 	vmov	s15, r3
 80010e4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010ee:	ee07 3a90 	vmov	s15, r3
 80010f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010f6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80010fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	amt212ev->degree += ((amt212ev->diff_count * 360.0) /(float) amt212ev->cpr) ;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fa55 	bl	80005b8 <__aeabi_f2d>
 800110e:	4604      	mov	r4, r0
 8001110:	460d      	mov	r5, r1
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6a1b      	ldr	r3, [r3, #32]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fa3c 	bl	8000594 <__aeabi_i2d>
 800111c:	f04f 0200 	mov.w	r2, #0
 8001120:	4b39      	ldr	r3, [pc, #228]	@ (8001208 <AMT212EV_DiffCount+0x1e0>)
 8001122:	f7ff faa1 	bl	8000668 <__aeabi_dmul>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4690      	mov	r8, r2
 800112c:	4699      	mov	r9, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001134:	ee07 3a90 	vmov	s15, r3
 8001138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800113c:	ee17 0a90 	vmov	r0, s15
 8001140:	f7ff fa3a 	bl	80005b8 <__aeabi_f2d>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4640      	mov	r0, r8
 800114a:	4649      	mov	r1, r9
 800114c:	f7ff fbb6 	bl	80008bc <__aeabi_ddiv>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4620      	mov	r0, r4
 8001156:	4629      	mov	r1, r5
 8001158:	f7ff f8d0 	bl	80002fc <__adddf3>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	f7ff fc92 	bl	8000a8c <__aeabi_d2f>
 8001168:	4602      	mov	r2, r0
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	629a      	str	r2, [r3, #40]	@ 0x28
	amt212ev->rads += ((amt212ev->diff_count * 2.0 * M_PI) /(float) amt212ev->cpr);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fa20 	bl	80005b8 <__aeabi_f2d>
 8001178:	4604      	mov	r4, r0
 800117a:	460d      	mov	r5, r1
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fa07 	bl	8000594 <__aeabi_i2d>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	f7ff f8b7 	bl	80002fc <__adddf3>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	4610      	mov	r0, r2
 8001194:	4619      	mov	r1, r3
 8001196:	a31a      	add	r3, pc, #104	@ (adr r3, 8001200 <AMT212EV_DiffCount+0x1d8>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	f7ff fa64 	bl	8000668 <__aeabi_dmul>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4690      	mov	r8, r2
 80011a6:	4699      	mov	r9, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80011ae:	ee07 3a90 	vmov	s15, r3
 80011b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b6:	ee17 0a90 	vmov	r0, s15
 80011ba:	f7ff f9fd 	bl	80005b8 <__aeabi_f2d>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4640      	mov	r0, r8
 80011c4:	4649      	mov	r1, r9
 80011c6:	f7ff fb79 	bl	80008bc <__aeabi_ddiv>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4620      	mov	r0, r4
 80011d0:	4629      	mov	r1, r5
 80011d2:	f7ff f893 	bl	80002fc <__adddf3>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4610      	mov	r0, r2
 80011dc:	4619      	mov	r1, r3
 80011de:	f7ff fc55 	bl	8000a8c <__aeabi_d2f>
 80011e2:	4602      	mov	r2, r0
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	631a      	str	r2, [r3, #48]	@ 0x30
	amt212ev->c[0] = amt212ev->c[1];
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	821a      	strh	r2, [r3, #16]

}
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011fc:	f3af 8000 	nop.w
 8001200:	54442d18 	.word	0x54442d18
 8001204:	400921fb 	.word	0x400921fb
 8001208:	40768000 	.word	0x40768000
 800120c:	00000000 	.word	0x00000000

08001210 <AMT212EV_Compute>:

void AMT212EV_Compute(AMT212EV *amt212ev){
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]


	amt212ev->pps = (amt212ev->diff_count * (float)amt212ev->freq) ; // Pulse per second
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a1b      	ldr	r3, [r3, #32]
 800121c:	ee07 3a90 	vmov	s15, r3
 8001220:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	889b      	ldrh	r3, [r3, #4]
 8001228:	ee07 3a90 	vmov	s15, r3
 800122c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001230:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	amt212ev->radps = amt212ev->pps * 2 * M_PI / (float)amt212ev->cpr;; // Radian per second
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001240:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001244:	ee17 0a90 	vmov	r0, s15
 8001248:	f7ff f9b6 	bl	80005b8 <__aeabi_f2d>
 800124c:	a329      	add	r3, pc, #164	@ (adr r3, 80012f4 <AMT212EV_Compute+0xe4>)
 800124e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001252:	f7ff fa09 	bl	8000668 <__aeabi_dmul>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4614      	mov	r4, r2
 800125c:	461d      	mov	r5, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001264:	ee07 3a90 	vmov	s15, r3
 8001268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800126c:	ee17 0a90 	vmov	r0, s15
 8001270:	f7ff f9a2 	bl	80005b8 <__aeabi_f2d>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4620      	mov	r0, r4
 800127a:	4629      	mov	r1, r5
 800127c:	f7ff fb1e 	bl	80008bc <__aeabi_ddiv>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	f7ff fc00 	bl	8000a8c <__aeabi_d2f>
 800128c:	4602      	mov	r2, r0
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	639a      	str	r2, [r3, #56]	@ 0x38
	amt212ev->rpm = amt212ev->pps * 60.0 / (float)amt212ev->cpr; // Round per second
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f98e 	bl	80005b8 <__aeabi_f2d>
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	4b13      	ldr	r3, [pc, #76]	@ (80012f0 <AMT212EV_Compute+0xe0>)
 80012a2:	f7ff f9e1 	bl	8000668 <__aeabi_dmul>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4614      	mov	r4, r2
 80012ac:	461d      	mov	r5, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80012b4:	ee07 3a90 	vmov	s15, r3
 80012b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012bc:	ee17 0a90 	vmov	r0, s15
 80012c0:	f7ff f97a 	bl	80005b8 <__aeabi_f2d>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4620      	mov	r0, r4
 80012ca:	4629      	mov	r1, r5
 80012cc:	f7ff faf6 	bl	80008bc <__aeabi_ddiv>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	f7ff fbd8 	bl	8000a8c <__aeabi_d2f>
 80012dc:	4602      	mov	r2, r0
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	63da      	str	r2, [r3, #60]	@ 0x3c



}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bdb0      	pop	{r4, r5, r7, pc}
 80012ea:	bf00      	nop
 80012ec:	f3af 8000 	nop.w
 80012f0:	404e0000 	.word	0x404e0000
 80012f4:	54442d18 	.word	0x54442d18
 80012f8:	400921fb 	.word	0x400921fb

080012fc <verifyChecksumRS485>:

}



bool verifyChecksumRS485(uint16_t currentPosition) {
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	80fb      	strh	r3, [r7, #6]
    uint16_t checksum = 0x3;
 8001306:	2303      	movs	r3, #3
 8001308:	81fb      	strh	r3, [r7, #14]

    // XOR 2-bit pairs
    for (int i = 0; i < 14; i += 2) {
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	e00f      	b.n	8001330 <verifyChecksumRS485+0x34>
        checksum ^= (currentPosition >> i) & 0x3;
 8001310:	88fa      	ldrh	r2, [r7, #6]
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	fa42 f303 	asr.w	r3, r2, r3
 8001318:	b21b      	sxth	r3, r3
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	b21a      	sxth	r2, r3
 8001320:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001324:	4053      	eors	r3, r2
 8001326:	b21b      	sxth	r3, r3
 8001328:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < 14; i += 2) {
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	3302      	adds	r3, #2
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	2b0d      	cmp	r3, #13
 8001334:	ddec      	ble.n	8001310 <verifyChecksumRS485+0x14>
    }
    return (checksum == (currentPosition >> 14));
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	0b9b      	lsrs	r3, r3, #14
 800133a:	b29b      	uxth	r3, r3
 800133c:	89fa      	ldrh	r2, [r7, #14]
 800133e:	429a      	cmp	r2, r3
 8001340:	bf0c      	ite	eq
 8001342:	2301      	moveq	r3, #1
 8001344:	2300      	movne	r3, #0
 8001346:	b2db      	uxtb	r3, r3
}
 8001348:	4618      	mov	r0, r3
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	AMT212EV_Init(&amt, &huart1, 1000, 16384);
 8001358:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800135c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001360:	4908      	ldr	r1, [pc, #32]	@ (8001384 <MX_FREERTOS_Init+0x30>)
 8001362:	4809      	ldr	r0, [pc, #36]	@ (8001388 <MX_FREERTOS_Init+0x34>)
 8001364:	f7ff fdaa 	bl	8000ebc <AMT212EV_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8001368:	4808      	ldr	r0, [pc, #32]	@ (800138c <MX_FREERTOS_Init+0x38>)
 800136a:	f003 fbef 	bl	8004b4c <HAL_TIM_Base_Start_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800136e:	4a08      	ldr	r2, [pc, #32]	@ (8001390 <MX_FREERTOS_Init+0x3c>)
 8001370:	2100      	movs	r1, #0
 8001372:	4808      	ldr	r0, [pc, #32]	@ (8001394 <MX_FREERTOS_Init+0x40>)
 8001374:	f006 fc94 	bl	8007ca0 <osThreadNew>
 8001378:	4603      	mov	r3, r0
 800137a:	4a07      	ldr	r2, [pc, #28]	@ (8001398 <MX_FREERTOS_Init+0x44>)
 800137c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20003ec4 	.word	0x20003ec4
 8001388:	2000016c 	.word	0x2000016c
 800138c:	20003d98 	.word	0x20003d98
 8001390:	080187a8 	.word	0x080187a8
 8001394:	0800139d 	.word	0x0800139d
 8001398:	200001d4 	.word	0x200001d4

0800139c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800139c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013a0:	b0ec      	sub	sp, #432	@ 0x1b0
 80013a2:	af02      	add	r7, sp, #8
 80013a4:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80013a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80013ac:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */

  // micro-ROS configuration
  rmw_uros_set_custom_transport(
 80013ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001524 <StartDefaultTask+0x188>)
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	4b5d      	ldr	r3, [pc, #372]	@ (8001528 <StartDefaultTask+0x18c>)
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	4b5d      	ldr	r3, [pc, #372]	@ (800152c <StartDefaultTask+0x190>)
 80013b8:	4a5d      	ldr	r2, [pc, #372]	@ (8001530 <StartDefaultTask+0x194>)
 80013ba:	495e      	ldr	r1, [pc, #376]	@ (8001534 <StartDefaultTask+0x198>)
 80013bc:	2001      	movs	r0, #1
 80013be:	f00b fe1f 	bl	800d000 <rmw_uros_set_custom_transport>
	cubemx_transport_open,
	cubemx_transport_close,
	cubemx_transport_write,
	cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80013c2:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 80013c6:	4618      	mov	r0, r3
 80013c8:	f00b fd36 	bl	800ce38 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 80013cc:	4b5a      	ldr	r3, [pc, #360]	@ (8001538 <StartDefaultTask+0x19c>)
 80013ce:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
  freeRTOS_allocator.deallocate = microros_deallocate;
 80013d2:	4b5a      	ldr	r3, [pc, #360]	@ (800153c <StartDefaultTask+0x1a0>)
 80013d4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
  freeRTOS_allocator.reallocate = microros_reallocate;
 80013d8:	4b59      	ldr	r3, [pc, #356]	@ (8001540 <StartDefaultTask+0x1a4>)
 80013da:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80013de:	4b59      	ldr	r3, [pc, #356]	@ (8001544 <StartDefaultTask+0x1a8>)
 80013e0:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80013e4:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 80013e8:	4618      	mov	r0, r3
 80013ea:	f00b fd33 	bl	800ce54 <rcutils_set_default_allocator>
 80013ee:	4603      	mov	r3, r0
 80013f0:	f083 0301 	eor.w	r3, r3, #1
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <StartDefaultTask+0x66>
	  printf("Error on default allocators (line %d)\n", __LINE__);
 80013fa:	21b4      	movs	r1, #180	@ 0xb4
 80013fc:	4852      	ldr	r0, [pc, #328]	@ (8001548 <StartDefaultTask+0x1ac>)
 80013fe:	f016 f8e9 	bl	80175d4 <iprintf>
  rclc_support_t support;
  rclc_executor_t executor;
  rcl_allocator_t allocator;
  rcl_init_options_t init_options;

  const unsigned int timer_period = RCL_MS_TO_NS(1);
 8001402:	4b52      	ldr	r3, [pc, #328]	@ (800154c <StartDefaultTask+0x1b0>)
 8001404:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
  const int timeout_ms = 5000;
 8001408:	f241 3388 	movw	r3, #5000	@ 0x1388
 800140c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
  int executor_num = 1;
 8001410:	2301      	movs	r3, #1
 8001412:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c

  const rosidl_message_type_support_t * amt_type_support =
  	  ROSIDL_GET_MSG_TYPE_SUPPORT(amt212ev_interfaces, msg, AmtRead);
 8001416:	f009 f99f 	bl	800a758 <rosidl_typesupport_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead>
 800141a:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198

  allocator = rcl_get_default_allocator();
 800141e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001422:	4618      	mov	r0, r3
 8001424:	f00b fd34 	bl	800ce90 <rcutils_get_default_allocator>
 8001428:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800142c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001430:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 8001434:	461d      	mov	r5, r3
 8001436:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800143a:	682b      	ldr	r3, [r5, #0]
 800143c:	6023      	str	r3, [r4, #0]

  executor = rclc_executor_get_zero_initialized_executor();
 800143e:	463b      	mov	r3, r7
 8001440:	4618      	mov	r0, r3
 8001442:	f00b f949 	bl	800c6d8 <rclc_executor_get_zero_initialized_executor>
 8001446:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800144a:	f5a3 72d4 	sub.w	r2, r3, #424	@ 0x1a8
 800144e:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001452:	4611      	mov	r1, r2
 8001454:	2288      	movs	r2, #136	@ 0x88
 8001456:	4618      	mov	r0, r3
 8001458:	f016 fa71 	bl	801793e <memcpy>

  init_options = rcl_get_zero_initialized_init_options();
 800145c:	f00a fbde 	bl	800bc1c <rcl_get_zero_initialized_init_options>
 8001460:	4602      	mov	r2, r0
 8001462:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001466:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800146a:	601a      	str	r2, [r3, #0]

  RCSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 800146c:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 8001470:	466a      	mov	r2, sp
 8001472:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001476:	e893 0003 	ldmia.w	r3, {r0, r1}
 800147a:	e882 0003 	stmia.w	r2, {r0, r1}
 800147e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001482:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001484:	4620      	mov	r0, r4
 8001486:	f00a fbcb 	bl	800bc20 <rcl_init_options_init>
  RCSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 198));
 800148a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800148e:	21c6      	movs	r1, #198	@ 0xc6
 8001490:	4618      	mov	r0, r3
 8001492:	f00a fcc1 	bl	800be18 <rcl_init_options_set_domain_id>

  // create support init_options
  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8001496:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 800149a:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 800149e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	4613      	mov	r3, r2
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	f00b fbe9 	bl	800cc80 <rclc_support_init_with_options>

  // create timer
  rclc_timer_init_default(&AMT_timer, &support, timer_period, timer_callback);
 80014ae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80014b2:	2200      	movs	r2, #0
 80014b4:	4698      	mov	r8, r3
 80014b6:	4691      	mov	r9, r2
 80014b8:	f507 71a6 	add.w	r1, r7, #332	@ 0x14c
 80014bc:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 80014c0:	4b23      	ldr	r3, [pc, #140]	@ (8001550 <StartDefaultTask+0x1b4>)
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	4642      	mov	r2, r8
 80014c6:	464b      	mov	r3, r9
 80014c8:	f00b fc7e 	bl	800cdc8 <rclc_timer_init_default>

  // create node
  rclc_node_init_default(&node, "uros_AMT_Node", "", &support);
 80014cc:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 80014d0:	4a20      	ldr	r2, [pc, #128]	@ (8001554 <StartDefaultTask+0x1b8>)
 80014d2:	4921      	ldr	r1, [pc, #132]	@ (8001558 <StartDefaultTask+0x1bc>)
 80014d4:	4821      	ldr	r0, [pc, #132]	@ (800155c <StartDefaultTask+0x1c0>)
 80014d6:	f00b fc07 	bl	800cce8 <rclc_node_init_default>

  // create publisher
  rclc_publisher_init_best_effort(&amt_publisher, &node, amt_type_support, "amt_publisher");
 80014da:	4b21      	ldr	r3, [pc, #132]	@ (8001560 <StartDefaultTask+0x1c4>)
 80014dc:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80014e0:	491e      	ldr	r1, [pc, #120]	@ (800155c <StartDefaultTask+0x1c0>)
 80014e2:	4820      	ldr	r0, [pc, #128]	@ (8001564 <StartDefaultTask+0x1c8>)
 80014e4:	f00b fc3c 	bl	800cd60 <rclc_publisher_init_best_effort>
  // create service server

  // create service client

  // create executor
  rclc_executor_init(&executor, &support.context, executor_num, &allocator);
 80014e8:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80014ec:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80014f0:	f507 71a6 	add.w	r1, r7, #332	@ 0x14c
 80014f4:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 80014f8:	f00b f8fa 	bl	800c6f0 <rclc_executor_init>

  rclc_executor_add_timer(&executor, &AMT_timer);
 80014fc:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8001500:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001504:	4611      	mov	r1, r2
 8001506:	4618      	mov	r0, r3
 8001508:	f00b f962 	bl	800c7d0 <rclc_executor_add_timer>

  rclc_executor_spin(&executor);
 800150c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001510:	4618      	mov	r0, r3
 8001512:	f00b fb73 	bl	800cbfc <rclc_executor_spin>
  rmw_uros_sync_session(timeout_ms);
 8001516:	f8d7 01a0 	ldr.w	r0, [r7, #416]	@ 0x1a0
 800151a:	f00c fb69 	bl	800dbf0 <rmw_uros_sync_session>

  for(;;)
 800151e:	bf00      	nop
 8001520:	e7fd      	b.n	800151e <StartDefaultTask+0x182>
 8001522:	bf00      	nop
 8001524:	08002bfd 	.word	0x08002bfd
 8001528:	08002b99 	.word	0x08002b99
 800152c:	08002b79 	.word	0x08002b79
 8001530:	08002b4d 	.word	0x08002b4d
 8001534:	20003e30 	.word	0x20003e30
 8001538:	08001dfd 	.word	0x08001dfd
 800153c:	08001e41 	.word	0x08001e41
 8001540:	08001e79 	.word	0x08001e79
 8001544:	08001ee5 	.word	0x08001ee5
 8001548:	0801870c 	.word	0x0801870c
 800154c:	000f4240 	.word	0x000f4240
 8001550:	08001569 	.word	0x08001569
 8001554:	08018734 	.word	0x08018734
 8001558:	08018738 	.word	0x08018738
 800155c:	200001b0 	.word	0x200001b0
 8001560:	08018748 	.word	0x08018748
 8001564:	200001b8 	.word	0x200001b8

08001568 <timer_callback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8001568:	b5b0      	push	{r4, r5, r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d016      	beq.n	80015a8 <timer_callback+0x40>
	{
		amt_publish(amt.rads,amt.radps);
 800157a:	4b0d      	ldr	r3, [pc, #52]	@ (80015b0 <timer_callback+0x48>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff f81a 	bl	80005b8 <__aeabi_f2d>
 8001584:	4604      	mov	r4, r0
 8001586:	460d      	mov	r5, r1
 8001588:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <timer_callback+0x48>)
 800158a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff f813 	bl	80005b8 <__aeabi_f2d>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	ec43 2b11 	vmov	d1, r2, r3
 800159a:	ec45 4b10 	vmov	d0, r4, r5
 800159e:	f000 f80b 	bl	80015b8 <amt_publish>
		HAL_IWDG_Refresh(&hiwdg);
 80015a2:	4804      	ldr	r0, [pc, #16]	@ (80015b4 <timer_callback+0x4c>)
 80015a4:	f002 fa08 	bl	80039b8 <HAL_IWDG_Refresh>
	}
}
 80015a8:	bf00      	nop
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bdb0      	pop	{r4, r5, r7, pc}
 80015b0:	2000016c 	.word	0x2000016c
 80015b4:	20003d2c 	.word	0x20003d2c

080015b8 <amt_publish>:

void amt_publish(double rads, double radps)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	ed87 0b02 	vstr	d0, [r7, #8]
 80015c2:	ed87 1b00 	vstr	d1, [r7]
	amt_msg.rads = rads;
 80015c6:	490d      	ldr	r1, [pc, #52]	@ (80015fc <amt_publish+0x44>)
 80015c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015cc:	e9c1 2300 	strd	r2, r3, [r1]
	amt_msg.radps = radps;
 80015d0:	490a      	ldr	r1, [pc, #40]	@ (80015fc <amt_publish+0x44>)
 80015d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015d6:	e9c1 2302 	strd	r2, r3, [r1, #8]
	rcl_ret_t ret = rcl_publish(&amt_publisher, &amt_msg, NULL);
 80015da:	2200      	movs	r2, #0
 80015dc:	4907      	ldr	r1, [pc, #28]	@ (80015fc <amt_publish+0x44>)
 80015de:	4808      	ldr	r0, [pc, #32]	@ (8001600 <amt_publish+0x48>)
 80015e0:	f00a fcec 	bl	800bfbc <rcl_publish>
 80015e4:	6178      	str	r0, [r7, #20]
	if (ret != RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <amt_publish+0x3c>
 80015ec:	21ff      	movs	r1, #255	@ 0xff
 80015ee:	4805      	ldr	r0, [pc, #20]	@ (8001604 <amt_publish+0x4c>)
 80015f0:	f015 fff0 	bl	80175d4 <iprintf>
}
 80015f4:	bf00      	nop
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	200001c0 	.word	0x200001c0
 8001600:	200001b8 	.word	0x200001b8
 8001604:	08018758 	.word	0x08018758

08001608 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	  if (htim->Instance == TIM1) {
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a11      	ldr	r2, [pc, #68]	@ (800165c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d101      	bne.n	800161e <HAL_TIM_PeriodElapsedCallback+0x16>
	    HAL_IncTick();
 800161a:	f001 fb85 	bl	8002d28 <HAL_IncTick>
	  }

	  if (htim->Instance == TIM2)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001626:	d114      	bne.n	8001652 <HAL_TIM_PeriodElapsedCallback+0x4a>
	  {
	    AMT212EV_ReadPosition(&amt);
 8001628:	480d      	ldr	r0, [pc, #52]	@ (8001660 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800162a:	f7ff fca9 	bl	8000f80 <AMT212EV_ReadPosition>
	    AMT212EV_DiffCount(&amt);
 800162e:	480c      	ldr	r0, [pc, #48]	@ (8001660 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001630:	f7ff fcfa 	bl	8001028 <AMT212EV_DiffCount>
	    AMT212EV_Compute(&amt);
 8001634:	480a      	ldr	r0, [pc, #40]	@ (8001660 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001636:	f7ff fdeb 	bl	8001210 <AMT212EV_Compute>

	    amt.radps = update_filter(amt.radps);
 800163a:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800163c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001640:	eeb0 0a67 	vmov.f32	s0, s15
 8001644:	f000 f810 	bl	8001668 <update_filter>
 8001648:	eef0 7a40 	vmov.f32	s15, s0
 800164c:	4b04      	ldr	r3, [pc, #16]	@ (8001660 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800164e:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	  }
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40012c00 	.word	0x40012c00
 8001660:	2000016c 	.word	0x2000016c
 8001664:	00000000 	.word	0x00000000

08001668 <update_filter>:

float update_filter(float input) {
 8001668:	b5b0      	push	{r4, r5, r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	ed87 0a01 	vstr	s0, [r7, #4]
    // Low-pass filter formula
    filtered_value = ALPHA * input + (1.0 - ALPHA) * filtered_value;
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7fe ffa0 	bl	80005b8 <__aeabi_f2d>
 8001678:	a318      	add	r3, pc, #96	@ (adr r3, 80016dc <update_filter+0x74>)
 800167a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167e:	f7fe fff3 	bl	8000668 <__aeabi_dmul>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4614      	mov	r4, r2
 8001688:	461d      	mov	r5, r3
 800168a:	4b13      	ldr	r3, [pc, #76]	@ (80016d8 <update_filter+0x70>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe ff92 	bl	80005b8 <__aeabi_f2d>
 8001694:	a30e      	add	r3, pc, #56	@ (adr r3, 80016d0 <update_filter+0x68>)
 8001696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169a:	f7fe ffe5 	bl	8000668 <__aeabi_dmul>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4620      	mov	r0, r4
 80016a4:	4629      	mov	r1, r5
 80016a6:	f7fe fe29 	bl	80002fc <__adddf3>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4610      	mov	r0, r2
 80016b0:	4619      	mov	r1, r3
 80016b2:	f7ff f9eb 	bl	8000a8c <__aeabi_d2f>
 80016b6:	4603      	mov	r3, r0
 80016b8:	4a07      	ldr	r2, [pc, #28]	@ (80016d8 <update_filter+0x70>)
 80016ba:	6013      	str	r3, [r2, #0]
    return filtered_value;
 80016bc:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <update_filter+0x70>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	ee07 3a90 	vmov	s15, r3
}
 80016c4:	eeb0 0a67 	vmov.f32	s0, s15
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bdb0      	pop	{r4, r5, r7, pc}
 80016ce:	bf00      	nop
 80016d0:	cccccccd 	.word	0xcccccccd
 80016d4:	3feccccc 	.word	0x3feccccc
 80016d8:	200001d0 	.word	0x200001d0
 80016dc:	9999999a 	.word	0x9999999a
 80016e0:	3fb99999 	.word	0x3fb99999

080016e4 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	@ 0x28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80016f0:	f007 fbaa 	bl	8008e48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80016f4:	4b5a      	ldr	r3, [pc, #360]	@ (8001860 <pvPortMallocMicroROS+0x17c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d101      	bne.n	8001700 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80016fc:	f000 f986 	bl	8001a0c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001700:	4b58      	ldr	r3, [pc, #352]	@ (8001864 <pvPortMallocMicroROS+0x180>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4013      	ands	r3, r2
 8001708:	2b00      	cmp	r3, #0
 800170a:	f040 8090 	bne.w	800182e <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d01e      	beq.n	8001752 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8001714:	2208      	movs	r2, #8
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	2b00      	cmp	r3, #0
 8001724:	d015      	beq.n	8001752 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f023 0307 	bic.w	r3, r3, #7
 800172c:	3308      	adds	r3, #8
 800172e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00b      	beq.n	8001752 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800173a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800173e:	f383 8811 	msr	BASEPRI, r3
 8001742:	f3bf 8f6f 	isb	sy
 8001746:	f3bf 8f4f 	dsb	sy
 800174a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	e7fd      	b.n	800174e <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d06a      	beq.n	800182e <pvPortMallocMicroROS+0x14a>
 8001758:	4b43      	ldr	r3, [pc, #268]	@ (8001868 <pvPortMallocMicroROS+0x184>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	429a      	cmp	r2, r3
 8001760:	d865      	bhi.n	800182e <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001762:	4b42      	ldr	r3, [pc, #264]	@ (800186c <pvPortMallocMicroROS+0x188>)
 8001764:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001766:	4b41      	ldr	r3, [pc, #260]	@ (800186c <pvPortMallocMicroROS+0x188>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800176c:	e004      	b.n	8001778 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 800176e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001770:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	429a      	cmp	r2, r3
 8001780:	d903      	bls.n	800178a <pvPortMallocMicroROS+0xa6>
 8001782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f1      	bne.n	800176e <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800178a:	4b35      	ldr	r3, [pc, #212]	@ (8001860 <pvPortMallocMicroROS+0x17c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001790:	429a      	cmp	r2, r3
 8001792:	d04c      	beq.n	800182e <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001794:	6a3b      	ldr	r3, [r7, #32]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2208      	movs	r2, #8
 800179a:	4413      	add	r3, r2
 800179c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800179e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	6a3b      	ldr	r3, [r7, #32]
 80017a4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80017a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	1ad2      	subs	r2, r2, r3
 80017ae:	2308      	movs	r3, #8
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d920      	bls.n	80017f8 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80017b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4413      	add	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00b      	beq.n	80017e0 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80017c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017cc:	f383 8811 	msr	BASEPRI, r3
 80017d0:	f3bf 8f6f 	isb	sy
 80017d4:	f3bf 8f4f 	dsb	sy
 80017d8:	613b      	str	r3, [r7, #16]
}
 80017da:	bf00      	nop
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80017e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	1ad2      	subs	r2, r2, r3
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80017ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80017f2:	69b8      	ldr	r0, [r7, #24]
 80017f4:	f000 f96c 	bl	8001ad0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80017f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001868 <pvPortMallocMicroROS+0x184>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	4a19      	ldr	r2, [pc, #100]	@ (8001868 <pvPortMallocMicroROS+0x184>)
 8001804:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001806:	4b18      	ldr	r3, [pc, #96]	@ (8001868 <pvPortMallocMicroROS+0x184>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	4b19      	ldr	r3, [pc, #100]	@ (8001870 <pvPortMallocMicroROS+0x18c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	429a      	cmp	r2, r3
 8001810:	d203      	bcs.n	800181a <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001812:	4b15      	ldr	r3, [pc, #84]	@ (8001868 <pvPortMallocMicroROS+0x184>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a16      	ldr	r2, [pc, #88]	@ (8001870 <pvPortMallocMicroROS+0x18c>)
 8001818:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800181a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	4b11      	ldr	r3, [pc, #68]	@ (8001864 <pvPortMallocMicroROS+0x180>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	431a      	orrs	r2, r3
 8001824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001826:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800182e:	f007 fb19 	bl	8008e64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	2b00      	cmp	r3, #0
 800183a:	d00b      	beq.n	8001854 <pvPortMallocMicroROS+0x170>
	__asm volatile
 800183c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001840:	f383 8811 	msr	BASEPRI, r3
 8001844:	f3bf 8f6f 	isb	sy
 8001848:	f3bf 8f4f 	dsb	sy
 800184c:	60fb      	str	r3, [r7, #12]
}
 800184e:	bf00      	nop
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001854:	69fb      	ldr	r3, [r7, #28]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3728      	adds	r7, #40	@ 0x28
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20003d1c 	.word	0x20003d1c
 8001864:	20003d28 	.word	0x20003d28
 8001868:	20003d20 	.word	0x20003d20
 800186c:	20003d14 	.word	0x20003d14
 8001870:	20003d24 	.word	0x20003d24

08001874 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d04a      	beq.n	800191c <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001886:	2308      	movs	r3, #8
 8001888:	425b      	negs	r3, r3
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	4413      	add	r3, r2
 800188e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	4b22      	ldr	r3, [pc, #136]	@ (8001924 <vPortFreeMicroROS+0xb0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4013      	ands	r3, r2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10b      	bne.n	80018ba <vPortFreeMicroROS+0x46>
	__asm volatile
 80018a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018a6:	f383 8811 	msr	BASEPRI, r3
 80018aa:	f3bf 8f6f 	isb	sy
 80018ae:	f3bf 8f4f 	dsb	sy
 80018b2:	60fb      	str	r3, [r7, #12]
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	e7fd      	b.n	80018b6 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00b      	beq.n	80018da <vPortFreeMicroROS+0x66>
	__asm volatile
 80018c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018c6:	f383 8811 	msr	BASEPRI, r3
 80018ca:	f3bf 8f6f 	isb	sy
 80018ce:	f3bf 8f4f 	dsb	sy
 80018d2:	60bb      	str	r3, [r7, #8]
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	e7fd      	b.n	80018d6 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	4b11      	ldr	r3, [pc, #68]	@ (8001924 <vPortFreeMicroROS+0xb0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d019      	beq.n	800191c <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d115      	bne.n	800191c <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001924 <vPortFreeMicroROS+0xb0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	43db      	mvns	r3, r3
 80018fa:	401a      	ands	r2, r3
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001900:	f007 faa2 	bl	8008e48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	4b07      	ldr	r3, [pc, #28]	@ (8001928 <vPortFreeMicroROS+0xb4>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4413      	add	r3, r2
 800190e:	4a06      	ldr	r2, [pc, #24]	@ (8001928 <vPortFreeMicroROS+0xb4>)
 8001910:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001912:	6938      	ldr	r0, [r7, #16]
 8001914:	f000 f8dc 	bl	8001ad0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001918:	f007 faa4 	bl	8008e64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800191c:	bf00      	nop
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20003d28 	.word	0x20003d28
 8001928:	20003d20 	.word	0x20003d20

0800192c <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 800192c:	b480      	push	{r7}
 800192e:	b087      	sub	sp, #28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001938:	2308      	movs	r3, #8
 800193a:	425b      	negs	r3, r3
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	4413      	add	r3, r2
 8001940:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <getBlockSize+0x38>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	43db      	mvns	r3, r3
 8001950:	4013      	ands	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]

	return count;
 8001954:	68fb      	ldr	r3, [r7, #12]
}
 8001956:	4618      	mov	r0, r3
 8001958:	371c      	adds	r7, #28
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20003d28 	.word	0x20003d28

08001968 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001972:	f007 fa69 	bl	8008e48 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001976:	6838      	ldr	r0, [r7, #0]
 8001978:	f7ff feb4 	bl	80016e4 <pvPortMallocMicroROS>
 800197c:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d017      	beq.n	80019b4 <pvPortReallocMicroROS+0x4c>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d014      	beq.n	80019b4 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff ffce 	bl	800192c <getBlockSize>
 8001990:	4603      	mov	r3, r0
 8001992:	2208      	movs	r2, #8
 8001994:	1a9b      	subs	r3, r3, r2
 8001996:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	429a      	cmp	r2, r3
 800199e:	d201      	bcs.n	80019a4 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	68b8      	ldr	r0, [r7, #8]
 80019aa:	f015 ffc8 	bl	801793e <memcpy>

		vPortFreeMicroROS(pv);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff ff60 	bl	8001874 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80019b4:	f007 fa56 	bl	8008e64 <xTaskResumeAll>

	return newmem;
 80019b8:	68bb      	ldr	r3, [r7, #8]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b086      	sub	sp, #24
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80019cc:	f007 fa3c 	bl	8008e48 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	fb02 f303 	mul.w	r3, r2, r3
 80019d8:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80019da:	6978      	ldr	r0, [r7, #20]
 80019dc:	f7ff fe82 	bl	80016e4 <pvPortMallocMicroROS>
 80019e0:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	613b      	str	r3, [r7, #16]

  	while(count--)
 80019e6:	e004      	b.n	80019f2 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	613a      	str	r2, [r7, #16]
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	1e5a      	subs	r2, r3, #1
 80019f6:	617a      	str	r2, [r7, #20]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1f5      	bne.n	80019e8 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80019fc:	f007 fa32 	bl	8008e64 <xTaskResumeAll>
  	return mem;
 8001a00:	68fb      	ldr	r3, [r7, #12]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001a12:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001a16:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001a18:	4b27      	ldr	r3, [pc, #156]	@ (8001ab8 <prvHeapInit+0xac>)
 8001a1a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00c      	beq.n	8001a40 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	3307      	adds	r3, #7
 8001a2a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f023 0307 	bic.w	r3, r3, #7
 8001a32:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001a34:	68ba      	ldr	r2, [r7, #8]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ab8 <prvHeapInit+0xac>)
 8001a3c:	4413      	add	r3, r2
 8001a3e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001a44:	4a1d      	ldr	r2, [pc, #116]	@ (8001abc <prvHeapInit+0xb0>)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001abc <prvHeapInit+0xb0>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	4413      	add	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001a58:	2208      	movs	r2, #8
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	1a9b      	subs	r3, r3, r2
 8001a5e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f023 0307 	bic.w	r3, r3, #7
 8001a66:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4a15      	ldr	r2, [pc, #84]	@ (8001ac0 <prvHeapInit+0xb4>)
 8001a6c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001a6e:	4b14      	ldr	r3, [pc, #80]	@ (8001ac0 <prvHeapInit+0xb4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2200      	movs	r2, #0
 8001a74:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001a76:	4b12      	ldr	r3, [pc, #72]	@ (8001ac0 <prvHeapInit+0xb4>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	1ad2      	subs	r2, r2, r3
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac0 <prvHeapInit+0xb4>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac4 <prvHeapInit+0xb8>)
 8001a9a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	4a09      	ldr	r2, [pc, #36]	@ (8001ac8 <prvHeapInit+0xbc>)
 8001aa2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001aa4:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <prvHeapInit+0xc0>)
 8001aa6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001aaa:	601a      	str	r2, [r3, #0]
}
 8001aac:	bf00      	nop
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	20003114 	.word	0x20003114
 8001abc:	20003d14 	.word	0x20003d14
 8001ac0:	20003d1c 	.word	0x20003d1c
 8001ac4:	20003d24 	.word	0x20003d24
 8001ac8:	20003d20 	.word	0x20003d20
 8001acc:	20003d28 	.word	0x20003d28

08001ad0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001ad8:	4b28      	ldr	r3, [pc, #160]	@ (8001b7c <prvInsertBlockIntoFreeList+0xac>)
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	e002      	b.n	8001ae4 <prvInsertBlockIntoFreeList+0x14>
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d8f7      	bhi.n	8001ade <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	4413      	add	r3, r2
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d108      	bne.n	8001b12 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	441a      	add	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	441a      	add	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d118      	bne.n	8001b58 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	4b15      	ldr	r3, [pc, #84]	@ (8001b80 <prvInsertBlockIntoFreeList+0xb0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d00d      	beq.n	8001b4e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	441a      	add	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	e008      	b.n	8001b60 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b80 <prvInsertBlockIntoFreeList+0xb0>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	e003      	b.n	8001b60 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d002      	beq.n	8001b6e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	20003d14 	.word	0x20003d14
 8001b80:	20003d1c 	.word	0x20003d1c

08001b84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c04 <MX_DMA_Init+0x80>)
 8001b8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b8e:	4a1d      	ldr	r2, [pc, #116]	@ (8001c04 <MX_DMA_Init+0x80>)
 8001b90:	f043 0304 	orr.w	r3, r3, #4
 8001b94:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b96:	4b1b      	ldr	r3, [pc, #108]	@ (8001c04 <MX_DMA_Init+0x80>)
 8001b98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ba2:	4b18      	ldr	r3, [pc, #96]	@ (8001c04 <MX_DMA_Init+0x80>)
 8001ba4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ba6:	4a17      	ldr	r2, [pc, #92]	@ (8001c04 <MX_DMA_Init+0x80>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6493      	str	r3, [r2, #72]	@ 0x48
 8001bae:	4b15      	ldr	r3, [pc, #84]	@ (8001c04 <MX_DMA_Init+0x80>)
 8001bb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	603b      	str	r3, [r7, #0]
 8001bb8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2105      	movs	r1, #5
 8001bbe:	200b      	movs	r0, #11
 8001bc0:	f001 f988 	bl	8002ed4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001bc4:	200b      	movs	r0, #11
 8001bc6:	f001 f99f 	bl	8002f08 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2105      	movs	r1, #5
 8001bce:	200c      	movs	r0, #12
 8001bd0:	f001 f980 	bl	8002ed4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001bd4:	200c      	movs	r0, #12
 8001bd6:	f001 f997 	bl	8002f08 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2105      	movs	r1, #5
 8001bde:	200d      	movs	r0, #13
 8001be0:	f001 f978 	bl	8002ed4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001be4:	200d      	movs	r0, #13
 8001be6:	f001 f98f 	bl	8002f08 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001bea:	2200      	movs	r2, #0
 8001bec:	2105      	movs	r1, #5
 8001bee:	200e      	movs	r0, #14
 8001bf0:	f001 f970 	bl	8002ed4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001bf4:	200e      	movs	r0, #14
 8001bf6:	f001 f987 	bl	8002f08 <HAL_NVIC_EnableIRQ>

}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40021000 	.word	0x40021000

08001c08 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	@ 0x28
 8001c0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0e:	f107 0314 	add.w	r3, r7, #20
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	609a      	str	r2, [r3, #8]
 8001c1a:	60da      	str	r2, [r3, #12]
 8001c1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1e:	4b2f      	ldr	r3, [pc, #188]	@ (8001cdc <MX_GPIO_Init+0xd4>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c22:	4a2e      	ldr	r2, [pc, #184]	@ (8001cdc <MX_GPIO_Init+0xd4>)
 8001c24:	f043 0304 	orr.w	r3, r3, #4
 8001c28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c2a:	4b2c      	ldr	r3, [pc, #176]	@ (8001cdc <MX_GPIO_Init+0xd4>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c2e:	f003 0304 	and.w	r3, r3, #4
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c36:	4b29      	ldr	r3, [pc, #164]	@ (8001cdc <MX_GPIO_Init+0xd4>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c3a:	4a28      	ldr	r2, [pc, #160]	@ (8001cdc <MX_GPIO_Init+0xd4>)
 8001c3c:	f043 0320 	orr.w	r3, r3, #32
 8001c40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c42:	4b26      	ldr	r3, [pc, #152]	@ (8001cdc <MX_GPIO_Init+0xd4>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c46:	f003 0320 	and.w	r3, r3, #32
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4e:	4b23      	ldr	r3, [pc, #140]	@ (8001cdc <MX_GPIO_Init+0xd4>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c52:	4a22      	ldr	r2, [pc, #136]	@ (8001cdc <MX_GPIO_Init+0xd4>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c5a:	4b20      	ldr	r3, [pc, #128]	@ (8001cdc <MX_GPIO_Init+0xd4>)
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	60bb      	str	r3, [r7, #8]
 8001c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c66:	4b1d      	ldr	r3, [pc, #116]	@ (8001cdc <MX_GPIO_Init+0xd4>)
 8001c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8001cdc <MX_GPIO_Init+0xd4>)
 8001c6c:	f043 0302 	orr.w	r3, r3, #2
 8001c70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c72:	4b1a      	ldr	r3, [pc, #104]	@ (8001cdc <MX_GPIO_Init+0xd4>)
 8001c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	607b      	str	r3, [r7, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2120      	movs	r1, #32
 8001c82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c86:	f001 fe0d 	bl	80038a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c90:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c9a:	f107 0314 	add.w	r3, r7, #20
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	480f      	ldr	r0, [pc, #60]	@ (8001ce0 <MX_GPIO_Init+0xd8>)
 8001ca2:	f001 fc7d 	bl	80035a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ca6:	2320      	movs	r3, #32
 8001ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001caa:	2301      	movs	r3, #1
 8001cac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cc0:	f001 fc6e 	bl	80035a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2105      	movs	r1, #5
 8001cc8:	2028      	movs	r0, #40	@ 0x28
 8001cca:	f001 f903 	bl	8002ed4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cce:	2028      	movs	r0, #40	@ 0x28
 8001cd0:	f001 f91a 	bl	8002f08 <HAL_NVIC_EnableIRQ>

}
 8001cd4:	bf00      	nop
 8001cd6:	3728      	adds	r7, #40	@ 0x28
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	48000800 	.word	0x48000800

08001ce4 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d18 <MX_IWDG_Init+0x34>)
 8001cea:	4a0c      	ldr	r2, [pc, #48]	@ (8001d1c <MX_IWDG_Init+0x38>)
 8001cec:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8001cee:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <MX_IWDG_Init+0x34>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8001cf4:	4b08      	ldr	r3, [pc, #32]	@ (8001d18 <MX_IWDG_Init+0x34>)
 8001cf6:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001cfa:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 8001cfc:	4b06      	ldr	r3, [pc, #24]	@ (8001d18 <MX_IWDG_Init+0x34>)
 8001cfe:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001d02:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001d04:	4804      	ldr	r0, [pc, #16]	@ (8001d18 <MX_IWDG_Init+0x34>)
 8001d06:	f001 fe08 	bl	800391a <HAL_IWDG_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8001d10:	f000 f86d 	bl	8001dee <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001d14:	bf00      	nop
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20003d2c 	.word	0x20003d2c
 8001d1c:	40003000 	.word	0x40003000

08001d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d24:	f000 ffe7 	bl	8002cf6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d28:	f000 f816 	bl	8001d58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d2c:	f7ff ff6c 	bl	8001c08 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d30:	f7ff ff28 	bl	8001b84 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001d34:	f000 fce8 	bl	8002708 <MX_LPUART1_UART_Init>
  MX_IWDG_Init();
 8001d38:	f7ff ffd4 	bl	8001ce4 <MX_IWDG_Init>
  MX_TIM2_Init();
 8001d3c:	f000 fba6 	bl	800248c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001d40:	f000 fd2c 	bl	800279c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001d44:	f000 fbf0 	bl	8002528 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001d48:	f005 ff60 	bl	8007c0c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001d4c:	f7ff fb02 	bl	8001354 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001d50:	f005 ff80 	bl	8007c54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d54:	bf00      	nop
 8001d56:	e7fd      	b.n	8001d54 <main+0x34>

08001d58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b094      	sub	sp, #80	@ 0x50
 8001d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d5e:	f107 0318 	add.w	r3, r7, #24
 8001d62:	2238      	movs	r2, #56	@ 0x38
 8001d64:	2100      	movs	r1, #0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f015 fd20 	bl	80177ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]
 8001d76:	60da      	str	r2, [r3, #12]
 8001d78:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f001 fe2c 	bl	80039d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001d80:	2309      	movs	r3, #9
 8001d82:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d88:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d92:	2303      	movs	r3, #3
 8001d94:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001d96:	2306      	movs	r3, #6
 8001d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001d9a:	2355      	movs	r3, #85	@ 0x55
 8001d9c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001da2:	2302      	movs	r3, #2
 8001da4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001da6:	2302      	movs	r3, #2
 8001da8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001daa:	f107 0318 	add.w	r3, r7, #24
 8001dae:	4618      	mov	r0, r3
 8001db0:	f001 fec6 	bl	8003b40 <HAL_RCC_OscConfig>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001dba:	f000 f818 	bl	8001dee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dbe:	230f      	movs	r3, #15
 8001dc0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001dd2:	1d3b      	adds	r3, r7, #4
 8001dd4:	2104      	movs	r1, #4
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f002 f9c4 	bl	8004164 <HAL_RCC_ClockConfig>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001de2:	f000 f804 	bl	8001dee <Error_Handler>
  }
}
 8001de6:	bf00      	nop
 8001de8:	3750      	adds	r7, #80	@ 0x50
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001df2:	b672      	cpsid	i
}
 8001df4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001df6:	bf00      	nop
 8001df8:	e7fd      	b.n	8001df6 <Error_Handler+0x8>
	...

08001dfc <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001e06:	4b0c      	ldr	r3, [pc, #48]	@ (8001e38 <microros_allocate+0x3c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4413      	add	r3, r2
 8001e10:	461a      	mov	r2, r3
 8001e12:	4b09      	ldr	r3, [pc, #36]	@ (8001e38 <microros_allocate+0x3c>)
 8001e14:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001e16:	4b09      	ldr	r3, [pc, #36]	@ (8001e3c <microros_allocate+0x40>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4413      	add	r3, r2
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <microros_allocate+0x40>)
 8001e24:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff fc5c 	bl	80016e4 <pvPortMallocMicroROS>
 8001e2c:	4603      	mov	r3, r0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20003d3c 	.word	0x20003d3c
 8001e3c:	20003d40 	.word	0x20003d40

08001e40 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00c      	beq.n	8001e6a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff fd6b 	bl	800192c <getBlockSize>
 8001e56:	4603      	mov	r3, r0
 8001e58:	4a06      	ldr	r2, [pc, #24]	@ (8001e74 <microros_deallocate+0x34>)
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	461a      	mov	r2, r3
 8001e60:	4b04      	ldr	r3, [pc, #16]	@ (8001e74 <microros_deallocate+0x34>)
 8001e62:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff fd05 	bl	8001874 <vPortFreeMicroROS>
  }
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20003d40 	.word	0x20003d40

08001e78 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001e84:	4b15      	ldr	r3, [pc, #84]	@ (8001edc <microros_reallocate+0x64>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4b12      	ldr	r3, [pc, #72]	@ (8001edc <microros_reallocate+0x64>)
 8001e92:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001e94:	4b12      	ldr	r3, [pc, #72]	@ (8001ee0 <microros_reallocate+0x68>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee0 <microros_reallocate+0x68>)
 8001ea2:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d104      	bne.n	8001eb4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001eaa:	68b8      	ldr	r0, [r7, #8]
 8001eac:	f7ff fc1a 	bl	80016e4 <pvPortMallocMicroROS>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	e00e      	b.n	8001ed2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f7ff fd39 	bl	800192c <getBlockSize>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	4a08      	ldr	r2, [pc, #32]	@ (8001ee0 <microros_reallocate+0x68>)
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <microros_reallocate+0x68>)
 8001ec6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f7ff fd4c 	bl	8001968 <pvPortReallocMicroROS>
 8001ed0:	4603      	mov	r3, r0
  }
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20003d3c 	.word	0x20003d3c
 8001ee0:	20003d40 	.word	0x20003d40

08001ee4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	fb02 f303 	mul.w	r3, r2, r3
 8001ef8:	4a0c      	ldr	r2, [pc, #48]	@ (8001f2c <microros_zero_allocate+0x48>)
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	4413      	add	r3, r2
 8001efe:	461a      	mov	r2, r3
 8001f00:	4b0a      	ldr	r3, [pc, #40]	@ (8001f2c <microros_zero_allocate+0x48>)
 8001f02:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	68ba      	ldr	r2, [r7, #8]
 8001f08:	fb02 f303 	mul.w	r3, r2, r3
 8001f0c:	4a08      	ldr	r2, [pc, #32]	@ (8001f30 <microros_zero_allocate+0x4c>)
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	4413      	add	r3, r2
 8001f12:	461a      	mov	r2, r3
 8001f14:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <microros_zero_allocate+0x4c>)
 8001f16:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001f18:	68b9      	ldr	r1, [r7, #8]
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f7ff fd51 	bl	80019c2 <pvPortCallocMicroROS>
 8001f20:	4603      	mov	r3, r0
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20003d3c 	.word	0x20003d3c
 8001f30:	20003d40 	.word	0x20003d40
 8001f34:	00000000 	.word	0x00000000

08001f38 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001f38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f3c:	b086      	sub	sp, #24
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001f4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f4e:	a320      	add	r3, pc, #128	@ (adr r3, 8001fd0 <UTILS_NanosecondsToTimespec+0x98>)
 8001f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f54:	f7fe fdea 	bl	8000b2c <__aeabi_ldivmod>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001f62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f66:	a31a      	add	r3, pc, #104	@ (adr r3, 8001fd0 <UTILS_NanosecondsToTimespec+0x98>)
 8001f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6c:	f7fe fdde 	bl	8000b2c <__aeabi_ldivmod>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	da20      	bge.n	8001fbe <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	4a11      	ldr	r2, [pc, #68]	@ (8001fc8 <UTILS_NanosecondsToTimespec+0x90>)
 8001f82:	fb82 1203 	smull	r1, r2, r2, r3
 8001f86:	1712      	asrs	r2, r2, #28
 8001f88:	17db      	asrs	r3, r3, #31
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f96:	6979      	ldr	r1, [r7, #20]
 8001f98:	17c8      	asrs	r0, r1, #31
 8001f9a:	460c      	mov	r4, r1
 8001f9c:	4605      	mov	r5, r0
 8001f9e:	ebb2 0804 	subs.w	r8, r2, r4
 8001fa2:	eb63 0905 	sbc.w	r9, r3, r5
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	4906      	ldr	r1, [pc, #24]	@ (8001fcc <UTILS_NanosecondsToTimespec+0x94>)
 8001fb4:	fb01 f303 	mul.w	r3, r1, r3
 8001fb8:	441a      	add	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	609a      	str	r2, [r3, #8]
    }
}
 8001fbe:	bf00      	nop
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001fc8:	44b82fa1 	.word	0x44b82fa1
 8001fcc:	3b9aca00 	.word	0x3b9aca00
 8001fd0:	3b9aca00 	.word	0x3b9aca00
 8001fd4:	00000000 	.word	0x00000000

08001fd8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fdc:	b08e      	sub	sp, #56	@ 0x38
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6278      	str	r0, [r7, #36]	@ 0x24
 8001fe2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001fe4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001fe8:	2300      	movs	r3, #0
 8001fea:	6013      	str	r3, [r2, #0]
 8001fec:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	f04f 0300 	mov.w	r3, #0
 8001ff6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001ffa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ffe:	4618      	mov	r0, r3
 8002000:	f007 f9ac 	bl	800935c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002006:	17da      	asrs	r2, r3, #31
 8002008:	61bb      	str	r3, [r7, #24]
 800200a:	61fa      	str	r2, [r7, #28]
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	f04f 0300 	mov.w	r3, #0
 8002014:	69b9      	ldr	r1, [r7, #24]
 8002016:	000b      	movs	r3, r1
 8002018:	2200      	movs	r2, #0
 800201a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800201e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002020:	2200      	movs	r2, #0
 8002022:	461c      	mov	r4, r3
 8002024:	4615      	mov	r5, r2
 8002026:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800202a:	1911      	adds	r1, r2, r4
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	416b      	adcs	r3, r5
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002036:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800203a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	f04f 0400 	mov.w	r4, #0
 8002046:	f04f 0500 	mov.w	r5, #0
 800204a:	015d      	lsls	r5, r3, #5
 800204c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002050:	0154      	lsls	r4, r2, #5
 8002052:	4622      	mov	r2, r4
 8002054:	462b      	mov	r3, r5
 8002056:	ebb2 0800 	subs.w	r8, r2, r0
 800205a:	eb63 0901 	sbc.w	r9, r3, r1
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	f04f 0300 	mov.w	r3, #0
 8002066:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800206a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800206e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002072:	4690      	mov	r8, r2
 8002074:	4699      	mov	r9, r3
 8002076:	eb18 0a00 	adds.w	sl, r8, r0
 800207a:	eb49 0b01 	adc.w	fp, r9, r1
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800208a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800208e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002092:	ebb2 040a 	subs.w	r4, r2, sl
 8002096:	603c      	str	r4, [r7, #0]
 8002098:	eb63 030b 	sbc.w	r3, r3, fp
 800209c:	607b      	str	r3, [r7, #4]
 800209e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020a2:	4623      	mov	r3, r4
 80020a4:	181b      	adds	r3, r3, r0
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	462b      	mov	r3, r5
 80020aa:	eb41 0303 	adc.w	r3, r1, r3
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	6a3a      	ldr	r2, [r7, #32]
 80020b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020b6:	f7ff ff3f 	bl	8001f38 <UTILS_NanosecondsToTimespec>

    return 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	4618      	mov	r0, r3
 80020be:	3738      	adds	r7, #56	@ 0x38
 80020c0:	46bd      	mov	sp, r7
 80020c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080020c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ce:	4b12      	ldr	r3, [pc, #72]	@ (8002118 <HAL_MspInit+0x50>)
 80020d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020d2:	4a11      	ldr	r2, [pc, #68]	@ (8002118 <HAL_MspInit+0x50>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80020da:	4b0f      	ldr	r3, [pc, #60]	@ (8002118 <HAL_MspInit+0x50>)
 80020dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	607b      	str	r3, [r7, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002118 <HAL_MspInit+0x50>)
 80020e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ea:	4a0b      	ldr	r2, [pc, #44]	@ (8002118 <HAL_MspInit+0x50>)
 80020ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80020f2:	4b09      	ldr	r3, [pc, #36]	@ (8002118 <HAL_MspInit+0x50>)
 80020f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020fa:	603b      	str	r3, [r7, #0]
 80020fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020fe:	2200      	movs	r2, #0
 8002100:	210f      	movs	r1, #15
 8002102:	f06f 0001 	mvn.w	r0, #1
 8002106:	f000 fee5 	bl	8002ed4 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800210a:	f001 fd09 	bl	8003b20 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000

0800211c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08c      	sub	sp, #48	@ 0x30
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800212c:	4b2c      	ldr	r3, [pc, #176]	@ (80021e0 <HAL_InitTick+0xc4>)
 800212e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002130:	4a2b      	ldr	r2, [pc, #172]	@ (80021e0 <HAL_InitTick+0xc4>)
 8002132:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002136:	6613      	str	r3, [r2, #96]	@ 0x60
 8002138:	4b29      	ldr	r3, [pc, #164]	@ (80021e0 <HAL_InitTick+0xc4>)
 800213a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800213c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002144:	f107 020c 	add.w	r2, r7, #12
 8002148:	f107 0310 	add.w	r3, r7, #16
 800214c:	4611      	mov	r1, r2
 800214e:	4618      	mov	r0, r3
 8002150:	f002 f9de 	bl	8004510 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002154:	f002 f9c6 	bl	80044e4 <HAL_RCC_GetPCLK2Freq>
 8002158:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800215a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800215c:	4a21      	ldr	r2, [pc, #132]	@ (80021e4 <HAL_InitTick+0xc8>)
 800215e:	fba2 2303 	umull	r2, r3, r2, r3
 8002162:	0c9b      	lsrs	r3, r3, #18
 8002164:	3b01      	subs	r3, #1
 8002166:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002168:	4b1f      	ldr	r3, [pc, #124]	@ (80021e8 <HAL_InitTick+0xcc>)
 800216a:	4a20      	ldr	r2, [pc, #128]	@ (80021ec <HAL_InitTick+0xd0>)
 800216c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800216e:	4b1e      	ldr	r3, [pc, #120]	@ (80021e8 <HAL_InitTick+0xcc>)
 8002170:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002174:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002176:	4a1c      	ldr	r2, [pc, #112]	@ (80021e8 <HAL_InitTick+0xcc>)
 8002178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800217c:	4b1a      	ldr	r3, [pc, #104]	@ (80021e8 <HAL_InitTick+0xcc>)
 800217e:	2200      	movs	r2, #0
 8002180:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002182:	4b19      	ldr	r3, [pc, #100]	@ (80021e8 <HAL_InitTick+0xcc>)
 8002184:	2200      	movs	r2, #0
 8002186:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8002188:	4817      	ldr	r0, [pc, #92]	@ (80021e8 <HAL_InitTick+0xcc>)
 800218a:	f002 fc87 	bl	8004a9c <HAL_TIM_Base_Init>
 800218e:	4603      	mov	r3, r0
 8002190:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002194:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002198:	2b00      	cmp	r3, #0
 800219a:	d11b      	bne.n	80021d4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800219c:	4812      	ldr	r0, [pc, #72]	@ (80021e8 <HAL_InitTick+0xcc>)
 800219e:	f002 fcd5 	bl	8004b4c <HAL_TIM_Base_Start_IT>
 80021a2:	4603      	mov	r3, r0
 80021a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80021a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d111      	bne.n	80021d4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80021b0:	2019      	movs	r0, #25
 80021b2:	f000 fea9 	bl	8002f08 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b0f      	cmp	r3, #15
 80021ba:	d808      	bhi.n	80021ce <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80021bc:	2200      	movs	r2, #0
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	2019      	movs	r0, #25
 80021c2:	f000 fe87 	bl	8002ed4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021c6:	4a0a      	ldr	r2, [pc, #40]	@ (80021f0 <HAL_InitTick+0xd4>)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6013      	str	r3, [r2, #0]
 80021cc:	e002      	b.n	80021d4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80021d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3730      	adds	r7, #48	@ 0x30
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40021000 	.word	0x40021000
 80021e4:	431bde83 	.word	0x431bde83
 80021e8:	20003d44 	.word	0x20003d44
 80021ec:	40012c00 	.word	0x40012c00
 80021f0:	20000008 	.word	0x20000008

080021f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021f8:	bf00      	nop
 80021fa:	e7fd      	b.n	80021f8 <NMI_Handler+0x4>

080021fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002200:	bf00      	nop
 8002202:	e7fd      	b.n	8002200 <HardFault_Handler+0x4>

08002204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002208:	bf00      	nop
 800220a:	e7fd      	b.n	8002208 <MemManage_Handler+0x4>

0800220c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002210:	bf00      	nop
 8002212:	e7fd      	b.n	8002210 <BusFault_Handler+0x4>

08002214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002218:	bf00      	nop
 800221a:	e7fd      	b.n	8002218 <UsageFault_Handler+0x4>

0800221c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002230:	4802      	ldr	r0, [pc, #8]	@ (800223c <DMA1_Channel1_IRQHandler+0x10>)
 8002232:	f001 f85a 	bl	80032ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20003f58 	.word	0x20003f58

08002240 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002244:	4802      	ldr	r0, [pc, #8]	@ (8002250 <DMA1_Channel2_IRQHandler+0x10>)
 8002246:	f001 f850 	bl	80032ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20003fb8 	.word	0x20003fb8

08002254 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002258:	4802      	ldr	r0, [pc, #8]	@ (8002264 <DMA1_Channel3_IRQHandler+0x10>)
 800225a:	f001 f846 	bl	80032ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20004018 	.word	0x20004018

08002268 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800226c:	4802      	ldr	r0, [pc, #8]	@ (8002278 <DMA1_Channel4_IRQHandler+0x10>)
 800226e:	f001 f83c 	bl	80032ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20004078 	.word	0x20004078

0800227c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002280:	4802      	ldr	r0, [pc, #8]	@ (800228c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002282:	f002 fd3c 	bl	8004cfe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20003d44 	.word	0x20003d44

08002290 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002294:	4802      	ldr	r0, [pc, #8]	@ (80022a0 <TIM2_IRQHandler+0x10>)
 8002296:	f002 fd32 	bl	8004cfe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20003d98 	.word	0x20003d98

080022a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022a8:	4802      	ldr	r0, [pc, #8]	@ (80022b4 <USART1_IRQHandler+0x10>)
 80022aa:	f003 ffd1 	bl	8006250 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20003ec4 	.word	0x20003ec4

080022b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80022bc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80022c0:	f001 fb08 	bl	80038d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80022cc:	4802      	ldr	r0, [pc, #8]	@ (80022d8 <LPUART1_IRQHandler+0x10>)
 80022ce:	f003 ffbf 	bl	8006250 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20003e30 	.word	0x20003e30

080022dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  return 1;
 80022e0:	2301      	movs	r3, #1
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <_kill>:

int _kill(int pid, int sig)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022f6:	f015 faed 	bl	80178d4 <__errno>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2216      	movs	r2, #22
 80022fe:	601a      	str	r2, [r3, #0]
  return -1;
 8002300:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002304:	4618      	mov	r0, r3
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <_exit>:

void _exit (int status)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002314:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff ffe7 	bl	80022ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800231e:	bf00      	nop
 8002320:	e7fd      	b.n	800231e <_exit+0x12>

08002322 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b086      	sub	sp, #24
 8002326:	af00      	add	r7, sp, #0
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	e00a      	b.n	800234a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002334:	f3af 8000 	nop.w
 8002338:	4601      	mov	r1, r0
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	1c5a      	adds	r2, r3, #1
 800233e:	60ba      	str	r2, [r7, #8]
 8002340:	b2ca      	uxtb	r2, r1
 8002342:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	3301      	adds	r3, #1
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	429a      	cmp	r2, r3
 8002350:	dbf0      	blt.n	8002334 <_read+0x12>
  }

  return len;
 8002352:	687b      	ldr	r3, [r7, #4]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	e009      	b.n	8002382 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	60ba      	str	r2, [r7, #8]
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	3301      	adds	r3, #1
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	429a      	cmp	r2, r3
 8002388:	dbf1      	blt.n	800236e <_write+0x12>
  }
  return len;
 800238a:	687b      	ldr	r3, [r7, #4]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <_close>:

int _close(int file)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800239c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023bc:	605a      	str	r2, [r3, #4]
  return 0;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <_isatty>:

int _isatty(int file)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023d4:	2301      	movs	r3, #1
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b085      	sub	sp, #20
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	60f8      	str	r0, [r7, #12]
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002404:	4a14      	ldr	r2, [pc, #80]	@ (8002458 <_sbrk+0x5c>)
 8002406:	4b15      	ldr	r3, [pc, #84]	@ (800245c <_sbrk+0x60>)
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002410:	4b13      	ldr	r3, [pc, #76]	@ (8002460 <_sbrk+0x64>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d102      	bne.n	800241e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002418:	4b11      	ldr	r3, [pc, #68]	@ (8002460 <_sbrk+0x64>)
 800241a:	4a12      	ldr	r2, [pc, #72]	@ (8002464 <_sbrk+0x68>)
 800241c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800241e:	4b10      	ldr	r3, [pc, #64]	@ (8002460 <_sbrk+0x64>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4413      	add	r3, r2
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	429a      	cmp	r2, r3
 800242a:	d207      	bcs.n	800243c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800242c:	f015 fa52 	bl	80178d4 <__errno>
 8002430:	4603      	mov	r3, r0
 8002432:	220c      	movs	r2, #12
 8002434:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002436:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800243a:	e009      	b.n	8002450 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800243c:	4b08      	ldr	r3, [pc, #32]	@ (8002460 <_sbrk+0x64>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002442:	4b07      	ldr	r3, [pc, #28]	@ (8002460 <_sbrk+0x64>)
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4413      	add	r3, r2
 800244a:	4a05      	ldr	r2, [pc, #20]	@ (8002460 <_sbrk+0x64>)
 800244c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800244e:	68fb      	ldr	r3, [r7, #12]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20020000 	.word	0x20020000
 800245c:	00000400 	.word	0x00000400
 8002460:	20003d94 	.word	0x20003d94
 8002464:	2000ae90 	.word	0x2000ae90

08002468 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800246c:	4b06      	ldr	r3, [pc, #24]	@ (8002488 <SystemInit+0x20>)
 800246e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002472:	4a05      	ldr	r2, [pc, #20]	@ (8002488 <SystemInit+0x20>)
 8002474:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002478:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800247c:	bf00      	nop
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002492:	f107 0310 	add.w	r3, r7, #16
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	605a      	str	r2, [r3, #4]
 800249c:	609a      	str	r2, [r3, #8]
 800249e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a0:	1d3b      	adds	r3, r7, #4
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	605a      	str	r2, [r3, #4]
 80024a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002524 <MX_TIM2_Init+0x98>)
 80024ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80024b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80024b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002524 <MX_TIM2_Init+0x98>)
 80024b4:	22a9      	movs	r2, #169	@ 0xa9
 80024b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002524 <MX_TIM2_Init+0x98>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80024be:	4b19      	ldr	r3, [pc, #100]	@ (8002524 <MX_TIM2_Init+0x98>)
 80024c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80024c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c6:	4b17      	ldr	r3, [pc, #92]	@ (8002524 <MX_TIM2_Init+0x98>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024cc:	4b15      	ldr	r3, [pc, #84]	@ (8002524 <MX_TIM2_Init+0x98>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024d2:	4814      	ldr	r0, [pc, #80]	@ (8002524 <MX_TIM2_Init+0x98>)
 80024d4:	f002 fae2 	bl	8004a9c <HAL_TIM_Base_Init>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80024de:	f7ff fc86 	bl	8001dee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024e8:	f107 0310 	add.w	r3, r7, #16
 80024ec:	4619      	mov	r1, r3
 80024ee:	480d      	ldr	r0, [pc, #52]	@ (8002524 <MX_TIM2_Init+0x98>)
 80024f0:	f002 fe68 	bl	80051c4 <HAL_TIM_ConfigClockSource>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80024fa:	f7ff fc78 	bl	8001dee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024fe:	2300      	movs	r3, #0
 8002500:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002506:	1d3b      	adds	r3, r7, #4
 8002508:	4619      	mov	r1, r3
 800250a:	4806      	ldr	r0, [pc, #24]	@ (8002524 <MX_TIM2_Init+0x98>)
 800250c:	f003 fc12 	bl	8005d34 <HAL_TIMEx_MasterConfigSynchronization>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002516:	f7ff fc6a 	bl	8001dee <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800251a:	bf00      	nop
 800251c:	3720      	adds	r7, #32
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20003d98 	.word	0x20003d98

08002528 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08e      	sub	sp, #56	@ 0x38
 800252c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800252e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	605a      	str	r2, [r3, #4]
 8002538:	609a      	str	r2, [r3, #8]
 800253a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800253c:	f107 031c 	add.w	r3, r7, #28
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002548:	463b      	mov	r3, r7
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	605a      	str	r2, [r3, #4]
 8002550:	609a      	str	r2, [r3, #8]
 8002552:	60da      	str	r2, [r3, #12]
 8002554:	611a      	str	r2, [r3, #16]
 8002556:	615a      	str	r2, [r3, #20]
 8002558:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800255a:	4b32      	ldr	r3, [pc, #200]	@ (8002624 <MX_TIM3_Init+0xfc>)
 800255c:	4a32      	ldr	r2, [pc, #200]	@ (8002628 <MX_TIM3_Init+0x100>)
 800255e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002560:	4b30      	ldr	r3, [pc, #192]	@ (8002624 <MX_TIM3_Init+0xfc>)
 8002562:	2200      	movs	r2, #0
 8002564:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002566:	4b2f      	ldr	r3, [pc, #188]	@ (8002624 <MX_TIM3_Init+0xfc>)
 8002568:	2200      	movs	r2, #0
 800256a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800256c:	4b2d      	ldr	r3, [pc, #180]	@ (8002624 <MX_TIM3_Init+0xfc>)
 800256e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002572:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002574:	4b2b      	ldr	r3, [pc, #172]	@ (8002624 <MX_TIM3_Init+0xfc>)
 8002576:	2200      	movs	r2, #0
 8002578:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800257a:	4b2a      	ldr	r3, [pc, #168]	@ (8002624 <MX_TIM3_Init+0xfc>)
 800257c:	2200      	movs	r2, #0
 800257e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002580:	4828      	ldr	r0, [pc, #160]	@ (8002624 <MX_TIM3_Init+0xfc>)
 8002582:	f002 fa8b 	bl	8004a9c <HAL_TIM_Base_Init>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800258c:	f7ff fc2f 	bl	8001dee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002590:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002594:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002596:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800259a:	4619      	mov	r1, r3
 800259c:	4821      	ldr	r0, [pc, #132]	@ (8002624 <MX_TIM3_Init+0xfc>)
 800259e:	f002 fe11 	bl	80051c4 <HAL_TIM_ConfigClockSource>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80025a8:	f7ff fc21 	bl	8001dee <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80025ac:	481d      	ldr	r0, [pc, #116]	@ (8002624 <MX_TIM3_Init+0xfc>)
 80025ae:	f002 fb45 	bl	8004c3c <HAL_TIM_PWM_Init>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80025b8:	f7ff fc19 	bl	8001dee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025bc:	2300      	movs	r3, #0
 80025be:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c0:	2300      	movs	r3, #0
 80025c2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025c4:	f107 031c 	add.w	r3, r7, #28
 80025c8:	4619      	mov	r1, r3
 80025ca:	4816      	ldr	r0, [pc, #88]	@ (8002624 <MX_TIM3_Init+0xfc>)
 80025cc:	f003 fbb2 	bl	8005d34 <HAL_TIMEx_MasterConfigSynchronization>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80025d6:	f7ff fc0a 	bl	8001dee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025da:	2360      	movs	r3, #96	@ 0x60
 80025dc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80025de:	2300      	movs	r3, #0
 80025e0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025e2:	2300      	movs	r3, #0
 80025e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025e6:	2300      	movs	r3, #0
 80025e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025ea:	463b      	mov	r3, r7
 80025ec:	2200      	movs	r2, #0
 80025ee:	4619      	mov	r1, r3
 80025f0:	480c      	ldr	r0, [pc, #48]	@ (8002624 <MX_TIM3_Init+0xfc>)
 80025f2:	f002 fcd3 	bl	8004f9c <HAL_TIM_PWM_ConfigChannel>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80025fc:	f7ff fbf7 	bl	8001dee <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002600:	463b      	mov	r3, r7
 8002602:	2204      	movs	r2, #4
 8002604:	4619      	mov	r1, r3
 8002606:	4807      	ldr	r0, [pc, #28]	@ (8002624 <MX_TIM3_Init+0xfc>)
 8002608:	f002 fcc8 	bl	8004f9c <HAL_TIM_PWM_ConfigChannel>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002612:	f7ff fbec 	bl	8001dee <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002616:	4803      	ldr	r0, [pc, #12]	@ (8002624 <MX_TIM3_Init+0xfc>)
 8002618:	f000 f840 	bl	800269c <HAL_TIM_MspPostInit>

}
 800261c:	bf00      	nop
 800261e:	3738      	adds	r7, #56	@ 0x38
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20003de4 	.word	0x20003de4
 8002628:	40000400 	.word	0x40000400

0800262c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800263c:	d114      	bne.n	8002668 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800263e:	4b15      	ldr	r3, [pc, #84]	@ (8002694 <HAL_TIM_Base_MspInit+0x68>)
 8002640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002642:	4a14      	ldr	r2, [pc, #80]	@ (8002694 <HAL_TIM_Base_MspInit+0x68>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	6593      	str	r3, [r2, #88]	@ 0x58
 800264a:	4b12      	ldr	r3, [pc, #72]	@ (8002694 <HAL_TIM_Base_MspInit+0x68>)
 800264c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002656:	2200      	movs	r2, #0
 8002658:	2105      	movs	r1, #5
 800265a:	201c      	movs	r0, #28
 800265c:	f000 fc3a 	bl	8002ed4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002660:	201c      	movs	r0, #28
 8002662:	f000 fc51 	bl	8002f08 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002666:	e010      	b.n	800268a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a0a      	ldr	r2, [pc, #40]	@ (8002698 <HAL_TIM_Base_MspInit+0x6c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d10b      	bne.n	800268a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002672:	4b08      	ldr	r3, [pc, #32]	@ (8002694 <HAL_TIM_Base_MspInit+0x68>)
 8002674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002676:	4a07      	ldr	r2, [pc, #28]	@ (8002694 <HAL_TIM_Base_MspInit+0x68>)
 8002678:	f043 0302 	orr.w	r3, r3, #2
 800267c:	6593      	str	r3, [r2, #88]	@ 0x58
 800267e:	4b05      	ldr	r3, [pc, #20]	@ (8002694 <HAL_TIM_Base_MspInit+0x68>)
 8002680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	68bb      	ldr	r3, [r7, #8]
}
 800268a:	bf00      	nop
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40021000 	.word	0x40021000
 8002698:	40000400 	.word	0x40000400

0800269c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b088      	sub	sp, #32
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a4:	f107 030c 	add.w	r3, r7, #12
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a11      	ldr	r2, [pc, #68]	@ (8002700 <HAL_TIM_MspPostInit+0x64>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d11c      	bne.n	80026f8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026be:	4b11      	ldr	r3, [pc, #68]	@ (8002704 <HAL_TIM_MspPostInit+0x68>)
 80026c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c2:	4a10      	ldr	r2, [pc, #64]	@ (8002704 <HAL_TIM_MspPostInit+0x68>)
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002704 <HAL_TIM_MspPostInit+0x68>)
 80026cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80026d6:	2350      	movs	r3, #80	@ 0x50
 80026d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026da:	2302      	movs	r3, #2
 80026dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026e6:	2302      	movs	r3, #2
 80026e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ea:	f107 030c 	add.w	r3, r7, #12
 80026ee:	4619      	mov	r1, r3
 80026f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026f4:	f000 ff54 	bl	80035a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80026f8:	bf00      	nop
 80026fa:	3720      	adds	r7, #32
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40000400 	.word	0x40000400
 8002704:	40021000 	.word	0x40021000

08002708 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800270c:	4b21      	ldr	r3, [pc, #132]	@ (8002794 <MX_LPUART1_UART_Init+0x8c>)
 800270e:	4a22      	ldr	r2, [pc, #136]	@ (8002798 <MX_LPUART1_UART_Init+0x90>)
 8002710:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002712:	4b20      	ldr	r3, [pc, #128]	@ (8002794 <MX_LPUART1_UART_Init+0x8c>)
 8002714:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002718:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800271a:	4b1e      	ldr	r3, [pc, #120]	@ (8002794 <MX_LPUART1_UART_Init+0x8c>)
 800271c:	2200      	movs	r2, #0
 800271e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002720:	4b1c      	ldr	r3, [pc, #112]	@ (8002794 <MX_LPUART1_UART_Init+0x8c>)
 8002722:	2200      	movs	r2, #0
 8002724:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002726:	4b1b      	ldr	r3, [pc, #108]	@ (8002794 <MX_LPUART1_UART_Init+0x8c>)
 8002728:	2200      	movs	r2, #0
 800272a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800272c:	4b19      	ldr	r3, [pc, #100]	@ (8002794 <MX_LPUART1_UART_Init+0x8c>)
 800272e:	220c      	movs	r2, #12
 8002730:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002732:	4b18      	ldr	r3, [pc, #96]	@ (8002794 <MX_LPUART1_UART_Init+0x8c>)
 8002734:	2200      	movs	r2, #0
 8002736:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002738:	4b16      	ldr	r3, [pc, #88]	@ (8002794 <MX_LPUART1_UART_Init+0x8c>)
 800273a:	2200      	movs	r2, #0
 800273c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800273e:	4b15      	ldr	r3, [pc, #84]	@ (8002794 <MX_LPUART1_UART_Init+0x8c>)
 8002740:	2200      	movs	r2, #0
 8002742:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002744:	4b13      	ldr	r3, [pc, #76]	@ (8002794 <MX_LPUART1_UART_Init+0x8c>)
 8002746:	2200      	movs	r2, #0
 8002748:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800274a:	4812      	ldr	r0, [pc, #72]	@ (8002794 <MX_LPUART1_UART_Init+0x8c>)
 800274c:	f003 fbce 	bl	8005eec <HAL_UART_Init>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8002756:	f7ff fb4a 	bl	8001dee <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800275a:	2100      	movs	r1, #0
 800275c:	480d      	ldr	r0, [pc, #52]	@ (8002794 <MX_LPUART1_UART_Init+0x8c>)
 800275e:	f005 f947 	bl	80079f0 <HAL_UARTEx_SetTxFifoThreshold>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8002768:	f7ff fb41 	bl	8001dee <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800276c:	2100      	movs	r1, #0
 800276e:	4809      	ldr	r0, [pc, #36]	@ (8002794 <MX_LPUART1_UART_Init+0x8c>)
 8002770:	f005 f97c 	bl	8007a6c <HAL_UARTEx_SetRxFifoThreshold>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800277a:	f7ff fb38 	bl	8001dee <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800277e:	4805      	ldr	r0, [pc, #20]	@ (8002794 <MX_LPUART1_UART_Init+0x8c>)
 8002780:	f005 f8fd 	bl	800797e <HAL_UARTEx_DisableFifoMode>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800278a:	f7ff fb30 	bl	8001dee <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20003e30 	.word	0x20003e30
 8002798:	40008000 	.word	0x40008000

0800279c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027a0:	4b24      	ldr	r3, [pc, #144]	@ (8002834 <MX_USART1_UART_Init+0x98>)
 80027a2:	4a25      	ldr	r2, [pc, #148]	@ (8002838 <MX_USART1_UART_Init+0x9c>)
 80027a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027a6:	4b23      	ldr	r3, [pc, #140]	@ (8002834 <MX_USART1_UART_Init+0x98>)
 80027a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027ae:	4b21      	ldr	r3, [pc, #132]	@ (8002834 <MX_USART1_UART_Init+0x98>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002834 <MX_USART1_UART_Init+0x98>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002834 <MX_USART1_UART_Init+0x98>)
 80027bc:	2200      	movs	r2, #0
 80027be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002834 <MX_USART1_UART_Init+0x98>)
 80027c2:	220c      	movs	r2, #12
 80027c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002834 <MX_USART1_UART_Init+0x98>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027cc:	4b19      	ldr	r3, [pc, #100]	@ (8002834 <MX_USART1_UART_Init+0x98>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027d2:	4b18      	ldr	r3, [pc, #96]	@ (8002834 <MX_USART1_UART_Init+0x98>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027d8:	4b16      	ldr	r3, [pc, #88]	@ (8002834 <MX_USART1_UART_Init+0x98>)
 80027da:	2200      	movs	r2, #0
 80027dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027de:	4b15      	ldr	r3, [pc, #84]	@ (8002834 <MX_USART1_UART_Init+0x98>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80027e4:	2300      	movs	r3, #0
 80027e6:	2200      	movs	r2, #0
 80027e8:	2100      	movs	r1, #0
 80027ea:	4812      	ldr	r0, [pc, #72]	@ (8002834 <MX_USART1_UART_Init+0x98>)
 80027ec:	f005 f840 	bl	8007870 <HAL_RS485Ex_Init>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 80027f6:	f7ff fafa 	bl	8001dee <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027fa:	2100      	movs	r1, #0
 80027fc:	480d      	ldr	r0, [pc, #52]	@ (8002834 <MX_USART1_UART_Init+0x98>)
 80027fe:	f005 f8f7 	bl	80079f0 <HAL_UARTEx_SetTxFifoThreshold>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 8002808:	f7ff faf1 	bl	8001dee <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800280c:	2100      	movs	r1, #0
 800280e:	4809      	ldr	r0, [pc, #36]	@ (8002834 <MX_USART1_UART_Init+0x98>)
 8002810:	f005 f92c 	bl	8007a6c <HAL_UARTEx_SetRxFifoThreshold>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 800281a:	f7ff fae8 	bl	8001dee <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800281e:	4805      	ldr	r0, [pc, #20]	@ (8002834 <MX_USART1_UART_Init+0x98>)
 8002820:	f005 f8ad 	bl	800797e <HAL_UARTEx_DisableFifoMode>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 800282a:	f7ff fae0 	bl	8001dee <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20003ec4 	.word	0x20003ec4
 8002838:	40013800 	.word	0x40013800

0800283c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b0a2      	sub	sp, #136	@ 0x88
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002844:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	60da      	str	r2, [r3, #12]
 8002852:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002854:	f107 0320 	add.w	r3, r7, #32
 8002858:	2254      	movs	r2, #84	@ 0x54
 800285a:	2100      	movs	r1, #0
 800285c:	4618      	mov	r0, r3
 800285e:	f014 ffa5 	bl	80177ac <memset>
  if(uartHandle->Instance==LPUART1)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a4d      	ldr	r2, [pc, #308]	@ (800299c <HAL_UART_MspInit+0x160>)
 8002868:	4293      	cmp	r3, r2
 800286a:	f040 80a3 	bne.w	80029b4 <HAL_UART_MspInit+0x178>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800286e:	2320      	movs	r3, #32
 8002870:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002872:	2300      	movs	r3, #0
 8002874:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002876:	f107 0320 	add.w	r3, r7, #32
 800287a:	4618      	mov	r0, r3
 800287c:	f001 fec0 	bl	8004600 <HAL_RCCEx_PeriphCLKConfig>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002886:	f7ff fab2 	bl	8001dee <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800288a:	4b45      	ldr	r3, [pc, #276]	@ (80029a0 <HAL_UART_MspInit+0x164>)
 800288c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288e:	4a44      	ldr	r2, [pc, #272]	@ (80029a0 <HAL_UART_MspInit+0x164>)
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002896:	4b42      	ldr	r3, [pc, #264]	@ (80029a0 <HAL_UART_MspInit+0x164>)
 8002898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	61fb      	str	r3, [r7, #28]
 80028a0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a2:	4b3f      	ldr	r3, [pc, #252]	@ (80029a0 <HAL_UART_MspInit+0x164>)
 80028a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a6:	4a3e      	ldr	r2, [pc, #248]	@ (80029a0 <HAL_UART_MspInit+0x164>)
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028ae:	4b3c      	ldr	r3, [pc, #240]	@ (80029a0 <HAL_UART_MspInit+0x164>)
 80028b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	61bb      	str	r3, [r7, #24]
 80028b8:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80028ba:	230c      	movs	r3, #12
 80028bc:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028be:	2302      	movs	r3, #2
 80028c0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c6:	2300      	movs	r3, #0
 80028c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80028cc:	230c      	movs	r3, #12
 80028ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80028d6:	4619      	mov	r1, r3
 80028d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028dc:	f000 fe60 	bl	80035a0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 80028e0:	4b30      	ldr	r3, [pc, #192]	@ (80029a4 <HAL_UART_MspInit+0x168>)
 80028e2:	4a31      	ldr	r2, [pc, #196]	@ (80029a8 <HAL_UART_MspInit+0x16c>)
 80028e4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80028e6:	4b2f      	ldr	r3, [pc, #188]	@ (80029a4 <HAL_UART_MspInit+0x168>)
 80028e8:	2222      	movs	r2, #34	@ 0x22
 80028ea:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028ec:	4b2d      	ldr	r3, [pc, #180]	@ (80029a4 <HAL_UART_MspInit+0x168>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028f2:	4b2c      	ldr	r3, [pc, #176]	@ (80029a4 <HAL_UART_MspInit+0x168>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028f8:	4b2a      	ldr	r3, [pc, #168]	@ (80029a4 <HAL_UART_MspInit+0x168>)
 80028fa:	2280      	movs	r2, #128	@ 0x80
 80028fc:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028fe:	4b29      	ldr	r3, [pc, #164]	@ (80029a4 <HAL_UART_MspInit+0x168>)
 8002900:	2200      	movs	r2, #0
 8002902:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002904:	4b27      	ldr	r3, [pc, #156]	@ (80029a4 <HAL_UART_MspInit+0x168>)
 8002906:	2200      	movs	r2, #0
 8002908:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 800290a:	4b26      	ldr	r3, [pc, #152]	@ (80029a4 <HAL_UART_MspInit+0x168>)
 800290c:	2220      	movs	r2, #32
 800290e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002910:	4b24      	ldr	r3, [pc, #144]	@ (80029a4 <HAL_UART_MspInit+0x168>)
 8002912:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002916:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002918:	4822      	ldr	r0, [pc, #136]	@ (80029a4 <HAL_UART_MspInit+0x168>)
 800291a:	f000 fb03 	bl	8002f24 <HAL_DMA_Init>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 8002924:	f7ff fa63 	bl	8001dee <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a1e      	ldr	r2, [pc, #120]	@ (80029a4 <HAL_UART_MspInit+0x168>)
 800292c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002930:	4a1c      	ldr	r2, [pc, #112]	@ (80029a4 <HAL_UART_MspInit+0x168>)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8002936:	4b1d      	ldr	r3, [pc, #116]	@ (80029ac <HAL_UART_MspInit+0x170>)
 8002938:	4a1d      	ldr	r2, [pc, #116]	@ (80029b0 <HAL_UART_MspInit+0x174>)
 800293a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800293c:	4b1b      	ldr	r3, [pc, #108]	@ (80029ac <HAL_UART_MspInit+0x170>)
 800293e:	2223      	movs	r2, #35	@ 0x23
 8002940:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002942:	4b1a      	ldr	r3, [pc, #104]	@ (80029ac <HAL_UART_MspInit+0x170>)
 8002944:	2210      	movs	r2, #16
 8002946:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002948:	4b18      	ldr	r3, [pc, #96]	@ (80029ac <HAL_UART_MspInit+0x170>)
 800294a:	2200      	movs	r2, #0
 800294c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800294e:	4b17      	ldr	r3, [pc, #92]	@ (80029ac <HAL_UART_MspInit+0x170>)
 8002950:	2280      	movs	r2, #128	@ 0x80
 8002952:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002954:	4b15      	ldr	r3, [pc, #84]	@ (80029ac <HAL_UART_MspInit+0x170>)
 8002956:	2200      	movs	r2, #0
 8002958:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800295a:	4b14      	ldr	r3, [pc, #80]	@ (80029ac <HAL_UART_MspInit+0x170>)
 800295c:	2200      	movs	r2, #0
 800295e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002960:	4b12      	ldr	r3, [pc, #72]	@ (80029ac <HAL_UART_MspInit+0x170>)
 8002962:	2200      	movs	r2, #0
 8002964:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002966:	4b11      	ldr	r3, [pc, #68]	@ (80029ac <HAL_UART_MspInit+0x170>)
 8002968:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800296c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800296e:	480f      	ldr	r0, [pc, #60]	@ (80029ac <HAL_UART_MspInit+0x170>)
 8002970:	f000 fad8 	bl	8002f24 <HAL_DMA_Init>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 800297a:	f7ff fa38 	bl	8001dee <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a0a      	ldr	r2, [pc, #40]	@ (80029ac <HAL_UART_MspInit+0x170>)
 8002982:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002984:	4a09      	ldr	r2, [pc, #36]	@ (80029ac <HAL_UART_MspInit+0x170>)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 800298a:	2200      	movs	r2, #0
 800298c:	2105      	movs	r1, #5
 800298e:	205b      	movs	r0, #91	@ 0x5b
 8002990:	f000 faa0 	bl	8002ed4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002994:	205b      	movs	r0, #91	@ 0x5b
 8002996:	f000 fab7 	bl	8002f08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800299a:	e0c4      	b.n	8002b26 <HAL_UART_MspInit+0x2ea>
 800299c:	40008000 	.word	0x40008000
 80029a0:	40021000 	.word	0x40021000
 80029a4:	20003f58 	.word	0x20003f58
 80029a8:	40020008 	.word	0x40020008
 80029ac:	20003fb8 	.word	0x20003fb8
 80029b0:	4002001c 	.word	0x4002001c
  else if(uartHandle->Instance==USART1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a5d      	ldr	r2, [pc, #372]	@ (8002b30 <HAL_UART_MspInit+0x2f4>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	f040 80b3 	bne.w	8002b26 <HAL_UART_MspInit+0x2ea>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80029c0:	2301      	movs	r3, #1
 80029c2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80029c4:	2300      	movs	r3, #0
 80029c6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029c8:	f107 0320 	add.w	r3, r7, #32
 80029cc:	4618      	mov	r0, r3
 80029ce:	f001 fe17 	bl	8004600 <HAL_RCCEx_PeriphCLKConfig>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 80029d8:	f7ff fa09 	bl	8001dee <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80029dc:	4b55      	ldr	r3, [pc, #340]	@ (8002b34 <HAL_UART_MspInit+0x2f8>)
 80029de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029e0:	4a54      	ldr	r2, [pc, #336]	@ (8002b34 <HAL_UART_MspInit+0x2f8>)
 80029e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80029e8:	4b52      	ldr	r3, [pc, #328]	@ (8002b34 <HAL_UART_MspInit+0x2f8>)
 80029ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029f0:	617b      	str	r3, [r7, #20]
 80029f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029f4:	4b4f      	ldr	r3, [pc, #316]	@ (8002b34 <HAL_UART_MspInit+0x2f8>)
 80029f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029f8:	4a4e      	ldr	r2, [pc, #312]	@ (8002b34 <HAL_UART_MspInit+0x2f8>)
 80029fa:	f043 0304 	orr.w	r3, r3, #4
 80029fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a00:	4b4c      	ldr	r3, [pc, #304]	@ (8002b34 <HAL_UART_MspInit+0x2f8>)
 8002a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0c:	4b49      	ldr	r3, [pc, #292]	@ (8002b34 <HAL_UART_MspInit+0x2f8>)
 8002a0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a10:	4a48      	ldr	r2, [pc, #288]	@ (8002b34 <HAL_UART_MspInit+0x2f8>)
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a18:	4b46      	ldr	r3, [pc, #280]	@ (8002b34 <HAL_UART_MspInit+0x2f8>)
 8002a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002a24:	2330      	movs	r3, #48	@ 0x30
 8002a26:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a30:	2300      	movs	r3, #0
 8002a32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a36:	2307      	movs	r3, #7
 8002a38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a3c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002a40:	4619      	mov	r1, r3
 8002a42:	483d      	ldr	r0, [pc, #244]	@ (8002b38 <HAL_UART_MspInit+0x2fc>)
 8002a44:	f000 fdac 	bl	80035a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a4c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a56:	2300      	movs	r3, #0
 8002a58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a5c:	2307      	movs	r3, #7
 8002a5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a62:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002a66:	4619      	mov	r1, r3
 8002a68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a6c:	f000 fd98 	bl	80035a0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8002a70:	4b32      	ldr	r3, [pc, #200]	@ (8002b3c <HAL_UART_MspInit+0x300>)
 8002a72:	4a33      	ldr	r2, [pc, #204]	@ (8002b40 <HAL_UART_MspInit+0x304>)
 8002a74:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002a76:	4b31      	ldr	r3, [pc, #196]	@ (8002b3c <HAL_UART_MspInit+0x300>)
 8002a78:	2218      	movs	r2, #24
 8002a7a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a7c:	4b2f      	ldr	r3, [pc, #188]	@ (8002b3c <HAL_UART_MspInit+0x300>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a82:	4b2e      	ldr	r3, [pc, #184]	@ (8002b3c <HAL_UART_MspInit+0x300>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a88:	4b2c      	ldr	r3, [pc, #176]	@ (8002b3c <HAL_UART_MspInit+0x300>)
 8002a8a:	2280      	movs	r2, #128	@ 0x80
 8002a8c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a8e:	4b2b      	ldr	r3, [pc, #172]	@ (8002b3c <HAL_UART_MspInit+0x300>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a94:	4b29      	ldr	r3, [pc, #164]	@ (8002b3c <HAL_UART_MspInit+0x300>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002a9a:	4b28      	ldr	r3, [pc, #160]	@ (8002b3c <HAL_UART_MspInit+0x300>)
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002aa0:	4b26      	ldr	r3, [pc, #152]	@ (8002b3c <HAL_UART_MspInit+0x300>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002aa6:	4825      	ldr	r0, [pc, #148]	@ (8002b3c <HAL_UART_MspInit+0x300>)
 8002aa8:	f000 fa3c 	bl	8002f24 <HAL_DMA_Init>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_UART_MspInit+0x27a>
      Error_Handler();
 8002ab2:	f7ff f99c 	bl	8001dee <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a20      	ldr	r2, [pc, #128]	@ (8002b3c <HAL_UART_MspInit+0x300>)
 8002aba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002abe:	4a1f      	ldr	r2, [pc, #124]	@ (8002b3c <HAL_UART_MspInit+0x300>)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002ac4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b44 <HAL_UART_MspInit+0x308>)
 8002ac6:	4a20      	ldr	r2, [pc, #128]	@ (8002b48 <HAL_UART_MspInit+0x30c>)
 8002ac8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002aca:	4b1e      	ldr	r3, [pc, #120]	@ (8002b44 <HAL_UART_MspInit+0x308>)
 8002acc:	2219      	movs	r2, #25
 8002ace:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ad0:	4b1c      	ldr	r3, [pc, #112]	@ (8002b44 <HAL_UART_MspInit+0x308>)
 8002ad2:	2210      	movs	r2, #16
 8002ad4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ad6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b44 <HAL_UART_MspInit+0x308>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002adc:	4b19      	ldr	r3, [pc, #100]	@ (8002b44 <HAL_UART_MspInit+0x308>)
 8002ade:	2280      	movs	r2, #128	@ 0x80
 8002ae0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ae2:	4b18      	ldr	r3, [pc, #96]	@ (8002b44 <HAL_UART_MspInit+0x308>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ae8:	4b16      	ldr	r3, [pc, #88]	@ (8002b44 <HAL_UART_MspInit+0x308>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002aee:	4b15      	ldr	r3, [pc, #84]	@ (8002b44 <HAL_UART_MspInit+0x308>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002af4:	4b13      	ldr	r3, [pc, #76]	@ (8002b44 <HAL_UART_MspInit+0x308>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002afa:	4812      	ldr	r0, [pc, #72]	@ (8002b44 <HAL_UART_MspInit+0x308>)
 8002afc:	f000 fa12 	bl	8002f24 <HAL_DMA_Init>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_UART_MspInit+0x2ce>
      Error_Handler();
 8002b06:	f7ff f972 	bl	8001dee <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b44 <HAL_UART_MspInit+0x308>)
 8002b0e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002b10:	4a0c      	ldr	r2, [pc, #48]	@ (8002b44 <HAL_UART_MspInit+0x308>)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002b16:	2200      	movs	r2, #0
 8002b18:	2105      	movs	r1, #5
 8002b1a:	2025      	movs	r0, #37	@ 0x25
 8002b1c:	f000 f9da 	bl	8002ed4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b20:	2025      	movs	r0, #37	@ 0x25
 8002b22:	f000 f9f1 	bl	8002f08 <HAL_NVIC_EnableIRQ>
}
 8002b26:	bf00      	nop
 8002b28:	3788      	adds	r7, #136	@ 0x88
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40013800 	.word	0x40013800
 8002b34:	40021000 	.word	0x40021000
 8002b38:	48000800 	.word	0x48000800
 8002b3c:	20004018 	.word	0x20004018
 8002b40:	40020030 	.word	0x40020030
 8002b44:	20004078 	.word	0x20004078
 8002b48:	40020044 	.word	0x40020044

08002b4c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002b5a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002b5c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b60:	4904      	ldr	r1, [pc, #16]	@ (8002b74 <cubemx_transport_open+0x28>)
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f003 fa92 	bl	800608c <HAL_UART_Receive_DMA>
    return true;
 8002b68:	2301      	movs	r3, #1
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	200040d8 	.word	0x200040d8

08002b78 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002b86:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f003 facb 	bl	8006124 <HAL_UART_DMAStop>
    return true;
 8002b8e:	2301      	movs	r3, #1
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002bac:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bb4:	2b20      	cmp	r3, #32
 8002bb6:	d11b      	bne.n	8002bf0 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	68b9      	ldr	r1, [r7, #8]
 8002bc0:	6978      	ldr	r0, [r7, #20]
 8002bc2:	f003 f9e3 	bl	8005f8c <HAL_UART_Transmit_DMA>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002bca:	e002      	b.n	8002bd2 <cubemx_transport_write+0x3a>
            osDelay(1);
 8002bcc:	2001      	movs	r0, #1
 8002bce:	f005 f8f9 	bl	8007dc4 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002bd2:	7cfb      	ldrb	r3, [r7, #19]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d104      	bne.n	8002be2 <cubemx_transport_write+0x4a>
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bde:	2b20      	cmp	r3, #32
 8002be0:	d1f4      	bne.n	8002bcc <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8002be2:	7cfb      	ldrb	r3, [r7, #19]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <cubemx_transport_write+0x54>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	e002      	b.n	8002bf2 <cubemx_transport_write+0x5a>
 8002bec:	2300      	movs	r3, #0
 8002bee:	e000      	b.n	8002bf2 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8002bf0:	2300      	movs	r3, #0
    }
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
 8002c08:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002c10:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c16:	b672      	cpsid	i
}
 8002c18:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002c28:	4a1b      	ldr	r2, [pc, #108]	@ (8002c98 <cubemx_transport_read+0x9c>)
 8002c2a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c2c:	b662      	cpsie	i
}
 8002c2e:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	3301      	adds	r3, #1
 8002c34:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002c36:	2001      	movs	r0, #1
 8002c38:	f005 f8c4 	bl	8007dc4 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002c3c:	4b17      	ldr	r3, [pc, #92]	@ (8002c9c <cubemx_transport_read+0xa0>)
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	4b15      	ldr	r3, [pc, #84]	@ (8002c98 <cubemx_transport_read+0x9c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d103      	bne.n	8002c50 <cubemx_transport_read+0x54>
 8002c48:	69fa      	ldr	r2, [r7, #28]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	dbe2      	blt.n	8002c16 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002c54:	e011      	b.n	8002c7a <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 8002c56:	4b11      	ldr	r3, [pc, #68]	@ (8002c9c <cubemx_transport_read+0xa0>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68b9      	ldr	r1, [r7, #8]
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	440b      	add	r3, r1
 8002c60:	490f      	ldr	r1, [pc, #60]	@ (8002ca0 <cubemx_transport_read+0xa4>)
 8002c62:	5c8a      	ldrb	r2, [r1, r2]
 8002c64:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002c66:	4b0d      	ldr	r3, [pc, #52]	@ (8002c9c <cubemx_transport_read+0xa0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c70:	4a0a      	ldr	r2, [pc, #40]	@ (8002c9c <cubemx_transport_read+0xa0>)
 8002c72:	6013      	str	r3, [r2, #0]
        wrote++;
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	3301      	adds	r3, #1
 8002c78:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002c7a:	4b08      	ldr	r3, [pc, #32]	@ (8002c9c <cubemx_transport_read+0xa0>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	4b06      	ldr	r3, [pc, #24]	@ (8002c98 <cubemx_transport_read+0x9c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d003      	beq.n	8002c8e <cubemx_transport_read+0x92>
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d3e3      	bcc.n	8002c56 <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8002c8e:	69bb      	ldr	r3, [r7, #24]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3720      	adds	r7, #32
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	200048dc 	.word	0x200048dc
 8002c9c:	200048d8 	.word	0x200048d8
 8002ca0:	200040d8 	.word	0x200040d8

08002ca4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ca4:	480d      	ldr	r0, [pc, #52]	@ (8002cdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ca6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ca8:	f7ff fbde 	bl	8002468 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cac:	480c      	ldr	r0, [pc, #48]	@ (8002ce0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cae:	490d      	ldr	r1, [pc, #52]	@ (8002ce4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cb0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ce8 <LoopForever+0xe>)
  movs r3, #0
 8002cb2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002cb4:	e002      	b.n	8002cbc <LoopCopyDataInit>

08002cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cba:	3304      	adds	r3, #4

08002cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cc0:	d3f9      	bcc.n	8002cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8002cec <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cc4:	4c0a      	ldr	r4, [pc, #40]	@ (8002cf0 <LoopForever+0x16>)
  movs r3, #0
 8002cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cc8:	e001      	b.n	8002cce <LoopFillZerobss>

08002cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ccc:	3204      	adds	r2, #4

08002cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cd0:	d3fb      	bcc.n	8002cca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cd2:	f014 fe05 	bl	80178e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cd6:	f7ff f823 	bl	8001d20 <main>

08002cda <LoopForever>:

LoopForever:
    b LoopForever
 8002cda:	e7fe      	b.n	8002cda <LoopForever>
  ldr   r0, =_estack
 8002cdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ce4:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8002ce8:	080194ec 	.word	0x080194ec
  ldr r2, =_sbss
 8002cec:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8002cf0:	2000ae90 	.word	0x2000ae90

08002cf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cf4:	e7fe      	b.n	8002cf4 <ADC1_2_IRQHandler>

08002cf6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d00:	2003      	movs	r0, #3
 8002d02:	f000 f8dc 	bl	8002ebe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d06:	200f      	movs	r0, #15
 8002d08:	f7ff fa08 	bl	800211c <HAL_InitTick>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	71fb      	strb	r3, [r7, #7]
 8002d16:	e001      	b.n	8002d1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d18:	f7ff f9d6 	bl	80020c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d1c:	79fb      	ldrb	r3, [r7, #7]

}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d2c:	4b05      	ldr	r3, [pc, #20]	@ (8002d44 <HAL_IncTick+0x1c>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	4b05      	ldr	r3, [pc, #20]	@ (8002d48 <HAL_IncTick+0x20>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4413      	add	r3, r2
 8002d36:	4a03      	ldr	r2, [pc, #12]	@ (8002d44 <HAL_IncTick+0x1c>)
 8002d38:	6013      	str	r3, [r2, #0]
}
 8002d3a:	bf00      	nop
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	200048e0 	.word	0x200048e0
 8002d48:	2000000c 	.word	0x2000000c

08002d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d50:	4b03      	ldr	r3, [pc, #12]	@ (8002d60 <HAL_GetTick+0x14>)
 8002d52:	681b      	ldr	r3, [r3, #0]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	200048e0 	.word	0x200048e0

08002d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d74:	4b0c      	ldr	r3, [pc, #48]	@ (8002da8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d80:	4013      	ands	r3, r2
 8002d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d96:	4a04      	ldr	r2, [pc, #16]	@ (8002da8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	60d3      	str	r3, [r2, #12]
}
 8002d9c:	bf00      	nop
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000ed00 	.word	0xe000ed00

08002dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002db0:	4b04      	ldr	r3, [pc, #16]	@ (8002dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	0a1b      	lsrs	r3, r3, #8
 8002db6:	f003 0307 	and.w	r3, r3, #7
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	e000ed00 	.word	0xe000ed00

08002dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	db0b      	blt.n	8002df2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	f003 021f 	and.w	r2, r3, #31
 8002de0:	4907      	ldr	r1, [pc, #28]	@ (8002e00 <__NVIC_EnableIRQ+0x38>)
 8002de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	2001      	movs	r0, #1
 8002dea:	fa00 f202 	lsl.w	r2, r0, r2
 8002dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	e000e100 	.word	0xe000e100

08002e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	6039      	str	r1, [r7, #0]
 8002e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	db0a      	blt.n	8002e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	490c      	ldr	r1, [pc, #48]	@ (8002e50 <__NVIC_SetPriority+0x4c>)
 8002e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e22:	0112      	lsls	r2, r2, #4
 8002e24:	b2d2      	uxtb	r2, r2
 8002e26:	440b      	add	r3, r1
 8002e28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e2c:	e00a      	b.n	8002e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	4908      	ldr	r1, [pc, #32]	@ (8002e54 <__NVIC_SetPriority+0x50>)
 8002e34:	79fb      	ldrb	r3, [r7, #7]
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	3b04      	subs	r3, #4
 8002e3c:	0112      	lsls	r2, r2, #4
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	440b      	add	r3, r1
 8002e42:	761a      	strb	r2, [r3, #24]
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	e000e100 	.word	0xe000e100
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b089      	sub	sp, #36	@ 0x24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f1c3 0307 	rsb	r3, r3, #7
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	bf28      	it	cs
 8002e76:	2304      	movcs	r3, #4
 8002e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	2b06      	cmp	r3, #6
 8002e80:	d902      	bls.n	8002e88 <NVIC_EncodePriority+0x30>
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	3b03      	subs	r3, #3
 8002e86:	e000      	b.n	8002e8a <NVIC_EncodePriority+0x32>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43da      	mvns	r2, r3
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	401a      	ands	r2, r3
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ea0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eaa:	43d9      	mvns	r1, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb0:	4313      	orrs	r3, r2
         );
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3724      	adds	r7, #36	@ 0x24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b082      	sub	sp, #8
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7ff ff4c 	bl	8002d64 <__NVIC_SetPriorityGrouping>
}
 8002ecc:	bf00      	nop
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
 8002ee0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ee2:	f7ff ff63 	bl	8002dac <__NVIC_GetPriorityGrouping>
 8002ee6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	68b9      	ldr	r1, [r7, #8]
 8002eec:	6978      	ldr	r0, [r7, #20]
 8002eee:	f7ff ffb3 	bl	8002e58 <NVIC_EncodePriority>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef8:	4611      	mov	r1, r2
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff ff82 	bl	8002e04 <__NVIC_SetPriority>
}
 8002f00:	bf00      	nop
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff ff56 	bl	8002dc8 <__NVIC_EnableIRQ>
}
 8002f1c:	bf00      	nop
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e08d      	b.n	8003052 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4b47      	ldr	r3, [pc, #284]	@ (800305c <HAL_DMA_Init+0x138>)
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d80f      	bhi.n	8002f62 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	461a      	mov	r2, r3
 8002f48:	4b45      	ldr	r3, [pc, #276]	@ (8003060 <HAL_DMA_Init+0x13c>)
 8002f4a:	4413      	add	r3, r2
 8002f4c:	4a45      	ldr	r2, [pc, #276]	@ (8003064 <HAL_DMA_Init+0x140>)
 8002f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f52:	091b      	lsrs	r3, r3, #4
 8002f54:	009a      	lsls	r2, r3, #2
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a42      	ldr	r2, [pc, #264]	@ (8003068 <HAL_DMA_Init+0x144>)
 8002f5e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f60:	e00e      	b.n	8002f80 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	461a      	mov	r2, r3
 8002f68:	4b40      	ldr	r3, [pc, #256]	@ (800306c <HAL_DMA_Init+0x148>)
 8002f6a:	4413      	add	r3, r2
 8002f6c:	4a3d      	ldr	r2, [pc, #244]	@ (8003064 <HAL_DMA_Init+0x140>)
 8002f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f72:	091b      	lsrs	r3, r3, #4
 8002f74:	009a      	lsls	r2, r3, #2
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a3c      	ldr	r2, [pc, #240]	@ (8003070 <HAL_DMA_Init+0x14c>)
 8002f7e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002f96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f9a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002fa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 fa82 	bl	80034dc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fe0:	d102      	bne.n	8002fe8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ffc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d010      	beq.n	8003028 <HAL_DMA_Init+0x104>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b04      	cmp	r3, #4
 800300c:	d80c      	bhi.n	8003028 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 faa2 	bl	8003558 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	e008      	b.n	800303a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40020407 	.word	0x40020407
 8003060:	bffdfff8 	.word	0xbffdfff8
 8003064:	cccccccd 	.word	0xcccccccd
 8003068:	40020000 	.word	0x40020000
 800306c:	bffdfbf8 	.word	0xbffdfbf8
 8003070:	40020400 	.word	0x40020400

08003074 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
 8003080:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_DMA_Start_IT+0x20>
 8003090:	2302      	movs	r3, #2
 8003092:	e066      	b.n	8003162 <HAL_DMA_Start_IT+0xee>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d155      	bne.n	8003154 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2202      	movs	r2, #2
 80030ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0201 	bic.w	r2, r2, #1
 80030c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	68b9      	ldr	r1, [r7, #8]
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f000 f9c7 	bl	8003460 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d008      	beq.n	80030ec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f042 020e 	orr.w	r2, r2, #14
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	e00f      	b.n	800310c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0204 	bic.w	r2, r2, #4
 80030fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 020a 	orr.w	r2, r2, #10
 800310a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d007      	beq.n	800312a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003124:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003128:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800312e:	2b00      	cmp	r3, #0
 8003130:	d007      	beq.n	8003142 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800313c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003140:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f042 0201 	orr.w	r2, r2, #1
 8003150:	601a      	str	r2, [r3, #0]
 8003152:	e005      	b.n	8003160 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800315c:	2302      	movs	r3, #2
 800315e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003160:	7dfb      	ldrb	r3, [r7, #23]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800316a:	b480      	push	{r7}
 800316c:	b085      	sub	sp, #20
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003172:	2300      	movs	r3, #0
 8003174:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d005      	beq.n	800318e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2204      	movs	r2, #4
 8003186:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	73fb      	strb	r3, [r7, #15]
 800318c:	e037      	b.n	80031fe <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 020e 	bic.w	r2, r2, #14
 800319c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031ac:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 0201 	bic.w	r2, r2, #1
 80031bc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c2:	f003 021f 	and.w	r2, r3, #31
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ca:	2101      	movs	r1, #1
 80031cc:	fa01 f202 	lsl.w	r2, r1, r2
 80031d0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80031da:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00c      	beq.n	80031fe <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031f2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80031fc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800320e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003224:	2300      	movs	r3, #0
 8003226:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d00d      	beq.n	8003250 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2204      	movs	r2, #4
 8003238:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	73fb      	strb	r3, [r7, #15]
 800324e:	e047      	b.n	80032e0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 020e 	bic.w	r2, r2, #14
 800325e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0201 	bic.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800327a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800327e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003284:	f003 021f 	and.w	r2, r3, #31
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328c:	2101      	movs	r1, #1
 800328e:	fa01 f202 	lsl.w	r2, r1, r2
 8003292:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800329c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00c      	beq.n	80032c0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032b4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80032be:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	4798      	blx	r3
    }
  }
  return status;
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b084      	sub	sp, #16
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003306:	f003 031f 	and.w	r3, r3, #31
 800330a:	2204      	movs	r2, #4
 800330c:	409a      	lsls	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4013      	ands	r3, r2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d026      	beq.n	8003364 <HAL_DMA_IRQHandler+0x7a>
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d021      	beq.n	8003364 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0320 	and.w	r3, r3, #32
 800332a:	2b00      	cmp	r3, #0
 800332c:	d107      	bne.n	800333e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0204 	bic.w	r2, r2, #4
 800333c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003342:	f003 021f 	and.w	r2, r3, #31
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334a:	2104      	movs	r1, #4
 800334c:	fa01 f202 	lsl.w	r2, r1, r2
 8003350:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003356:	2b00      	cmp	r3, #0
 8003358:	d071      	beq.n	800343e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003362:	e06c      	b.n	800343e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003368:	f003 031f 	and.w	r3, r3, #31
 800336c:	2202      	movs	r2, #2
 800336e:	409a      	lsls	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4013      	ands	r3, r2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d02e      	beq.n	80033d6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d029      	beq.n	80033d6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10b      	bne.n	80033a8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 020a 	bic.w	r2, r2, #10
 800339e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ac:	f003 021f 	and.w	r2, r3, #31
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b4:	2102      	movs	r1, #2
 80033b6:	fa01 f202 	lsl.w	r2, r1, r2
 80033ba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d038      	beq.n	800343e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80033d4:	e033      	b.n	800343e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033da:	f003 031f 	and.w	r3, r3, #31
 80033de:	2208      	movs	r2, #8
 80033e0:	409a      	lsls	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4013      	ands	r3, r2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d02a      	beq.n	8003440 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d025      	beq.n	8003440 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 020e 	bic.w	r2, r2, #14
 8003402:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003408:	f003 021f 	and.w	r2, r3, #31
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003410:	2101      	movs	r1, #1
 8003412:	fa01 f202 	lsl.w	r2, r1, r2
 8003416:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003432:	2b00      	cmp	r3, #0
 8003434:	d004      	beq.n	8003440 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800343e:	bf00      	nop
 8003440:	bf00      	nop
}
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8003454:	4618      	mov	r0, r3
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
 800346c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003476:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800347c:	2b00      	cmp	r3, #0
 800347e:	d004      	beq.n	800348a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003488:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800348e:	f003 021f 	and.w	r2, r3, #31
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003496:	2101      	movs	r1, #1
 8003498:	fa01 f202 	lsl.w	r2, r1, r2
 800349c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2b10      	cmp	r3, #16
 80034ac:	d108      	bne.n	80034c0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034be:	e007      	b.n	80034d0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	60da      	str	r2, [r3, #12]
}
 80034d0:	bf00      	nop
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	461a      	mov	r2, r3
 80034ea:	4b16      	ldr	r3, [pc, #88]	@ (8003544 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d802      	bhi.n	80034f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80034f0:	4b15      	ldr	r3, [pc, #84]	@ (8003548 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	e001      	b.n	80034fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80034f6:	4b15      	ldr	r3, [pc, #84]	@ (800354c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80034f8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	3b08      	subs	r3, #8
 8003506:	4a12      	ldr	r2, [pc, #72]	@ (8003550 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003508:	fba2 2303 	umull	r2, r3, r2, r3
 800350c:	091b      	lsrs	r3, r3, #4
 800350e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003514:	089b      	lsrs	r3, r3, #2
 8003516:	009a      	lsls	r2, r3, #2
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	4413      	add	r3, r2
 800351c:	461a      	mov	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a0b      	ldr	r2, [pc, #44]	@ (8003554 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003526:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f003 031f 	and.w	r3, r3, #31
 800352e:	2201      	movs	r2, #1
 8003530:	409a      	lsls	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003536:	bf00      	nop
 8003538:	371c      	adds	r7, #28
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	40020407 	.word	0x40020407
 8003548:	40020800 	.word	0x40020800
 800354c:	40020820 	.word	0x40020820
 8003550:	cccccccd 	.word	0xcccccccd
 8003554:	40020880 	.word	0x40020880

08003558 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	b2db      	uxtb	r3, r3
 8003566:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4b0b      	ldr	r3, [pc, #44]	@ (8003598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	461a      	mov	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a08      	ldr	r2, [pc, #32]	@ (800359c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800357a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	3b01      	subs	r3, #1
 8003580:	f003 031f 	and.w	r3, r3, #31
 8003584:	2201      	movs	r2, #1
 8003586:	409a      	lsls	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800358c:	bf00      	nop
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	1000823f 	.word	0x1000823f
 800359c:	40020940 	.word	0x40020940

080035a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b087      	sub	sp, #28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80035ae:	e15a      	b.n	8003866 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	2101      	movs	r1, #1
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	fa01 f303 	lsl.w	r3, r1, r3
 80035bc:	4013      	ands	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 814c 	beq.w	8003860 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d005      	beq.n	80035e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d130      	bne.n	8003642 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	2203      	movs	r2, #3
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4013      	ands	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003616:	2201      	movs	r2, #1
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43db      	mvns	r3, r3
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	4013      	ands	r3, r2
 8003624:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	091b      	lsrs	r3, r3, #4
 800362c:	f003 0201 	and.w	r2, r3, #1
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	2b03      	cmp	r3, #3
 800364c:	d017      	beq.n	800367e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	2203      	movs	r2, #3
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	43db      	mvns	r3, r3
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	4013      	ands	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f003 0303 	and.w	r3, r3, #3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d123      	bne.n	80036d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	08da      	lsrs	r2, r3, #3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3208      	adds	r2, #8
 8003692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003696:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	220f      	movs	r2, #15
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43db      	mvns	r3, r3
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4013      	ands	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	691a      	ldr	r2, [r3, #16]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	08da      	lsrs	r2, r3, #3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3208      	adds	r2, #8
 80036cc:	6939      	ldr	r1, [r7, #16]
 80036ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	2203      	movs	r2, #3
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	43db      	mvns	r3, r3
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	4013      	ands	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f003 0203 	and.w	r2, r3, #3
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 80a6 	beq.w	8003860 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003714:	4b5b      	ldr	r3, [pc, #364]	@ (8003884 <HAL_GPIO_Init+0x2e4>)
 8003716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003718:	4a5a      	ldr	r2, [pc, #360]	@ (8003884 <HAL_GPIO_Init+0x2e4>)
 800371a:	f043 0301 	orr.w	r3, r3, #1
 800371e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003720:	4b58      	ldr	r3, [pc, #352]	@ (8003884 <HAL_GPIO_Init+0x2e4>)
 8003722:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	60bb      	str	r3, [r7, #8]
 800372a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800372c:	4a56      	ldr	r2, [pc, #344]	@ (8003888 <HAL_GPIO_Init+0x2e8>)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	089b      	lsrs	r3, r3, #2
 8003732:	3302      	adds	r3, #2
 8003734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003738:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f003 0303 	and.w	r3, r3, #3
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	220f      	movs	r2, #15
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	43db      	mvns	r3, r3
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4013      	ands	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003756:	d01f      	beq.n	8003798 <HAL_GPIO_Init+0x1f8>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a4c      	ldr	r2, [pc, #304]	@ (800388c <HAL_GPIO_Init+0x2ec>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d019      	beq.n	8003794 <HAL_GPIO_Init+0x1f4>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a4b      	ldr	r2, [pc, #300]	@ (8003890 <HAL_GPIO_Init+0x2f0>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d013      	beq.n	8003790 <HAL_GPIO_Init+0x1f0>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a4a      	ldr	r2, [pc, #296]	@ (8003894 <HAL_GPIO_Init+0x2f4>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d00d      	beq.n	800378c <HAL_GPIO_Init+0x1ec>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a49      	ldr	r2, [pc, #292]	@ (8003898 <HAL_GPIO_Init+0x2f8>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d007      	beq.n	8003788 <HAL_GPIO_Init+0x1e8>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a48      	ldr	r2, [pc, #288]	@ (800389c <HAL_GPIO_Init+0x2fc>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d101      	bne.n	8003784 <HAL_GPIO_Init+0x1e4>
 8003780:	2305      	movs	r3, #5
 8003782:	e00a      	b.n	800379a <HAL_GPIO_Init+0x1fa>
 8003784:	2306      	movs	r3, #6
 8003786:	e008      	b.n	800379a <HAL_GPIO_Init+0x1fa>
 8003788:	2304      	movs	r3, #4
 800378a:	e006      	b.n	800379a <HAL_GPIO_Init+0x1fa>
 800378c:	2303      	movs	r3, #3
 800378e:	e004      	b.n	800379a <HAL_GPIO_Init+0x1fa>
 8003790:	2302      	movs	r3, #2
 8003792:	e002      	b.n	800379a <HAL_GPIO_Init+0x1fa>
 8003794:	2301      	movs	r3, #1
 8003796:	e000      	b.n	800379a <HAL_GPIO_Init+0x1fa>
 8003798:	2300      	movs	r3, #0
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	f002 0203 	and.w	r2, r2, #3
 80037a0:	0092      	lsls	r2, r2, #2
 80037a2:	4093      	lsls	r3, r2
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037aa:	4937      	ldr	r1, [pc, #220]	@ (8003888 <HAL_GPIO_Init+0x2e8>)
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	089b      	lsrs	r3, r3, #2
 80037b0:	3302      	adds	r3, #2
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037b8:	4b39      	ldr	r3, [pc, #228]	@ (80038a0 <HAL_GPIO_Init+0x300>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	43db      	mvns	r3, r3
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4013      	ands	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	4313      	orrs	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037dc:	4a30      	ldr	r2, [pc, #192]	@ (80038a0 <HAL_GPIO_Init+0x300>)
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037e2:	4b2f      	ldr	r3, [pc, #188]	@ (80038a0 <HAL_GPIO_Init+0x300>)
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	43db      	mvns	r3, r3
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4013      	ands	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4313      	orrs	r3, r2
 8003804:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003806:	4a26      	ldr	r2, [pc, #152]	@ (80038a0 <HAL_GPIO_Init+0x300>)
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800380c:	4b24      	ldr	r3, [pc, #144]	@ (80038a0 <HAL_GPIO_Init+0x300>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	43db      	mvns	r3, r3
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	4013      	ands	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4313      	orrs	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003830:	4a1b      	ldr	r2, [pc, #108]	@ (80038a0 <HAL_GPIO_Init+0x300>)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003836:	4b1a      	ldr	r3, [pc, #104]	@ (80038a0 <HAL_GPIO_Init+0x300>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	43db      	mvns	r3, r3
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	4013      	ands	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4313      	orrs	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800385a:	4a11      	ldr	r2, [pc, #68]	@ (80038a0 <HAL_GPIO_Init+0x300>)
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	3301      	adds	r3, #1
 8003864:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	fa22 f303 	lsr.w	r3, r2, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	f47f ae9d 	bne.w	80035b0 <HAL_GPIO_Init+0x10>
  }
}
 8003876:	bf00      	nop
 8003878:	bf00      	nop
 800387a:	371c      	adds	r7, #28
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	40021000 	.word	0x40021000
 8003888:	40010000 	.word	0x40010000
 800388c:	48000400 	.word	0x48000400
 8003890:	48000800 	.word	0x48000800
 8003894:	48000c00 	.word	0x48000c00
 8003898:	48001000 	.word	0x48001000
 800389c:	48001400 	.word	0x48001400
 80038a0:	40010400 	.word	0x40010400

080038a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	807b      	strh	r3, [r7, #2]
 80038b0:	4613      	mov	r3, r2
 80038b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038b4:	787b      	ldrb	r3, [r7, #1]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038ba:	887a      	ldrh	r2, [r7, #2]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038c0:	e002      	b.n	80038c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038c2:	887a      	ldrh	r2, [r7, #2]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	4603      	mov	r3, r0
 80038dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80038de:	4b08      	ldr	r3, [pc, #32]	@ (8003900 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038e0:	695a      	ldr	r2, [r3, #20]
 80038e2:	88fb      	ldrh	r3, [r7, #6]
 80038e4:	4013      	ands	r3, r2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d006      	beq.n	80038f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038ea:	4a05      	ldr	r2, [pc, #20]	@ (8003900 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038ec:	88fb      	ldrh	r3, [r7, #6]
 80038ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038f0:	88fb      	ldrh	r3, [r7, #6]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 f806 	bl	8003904 <HAL_GPIO_EXTI_Callback>
  }
}
 80038f8:	bf00      	nop
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40010400 	.word	0x40010400

08003904 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800390e:	bf00      	nop
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b084      	sub	sp, #16
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e041      	b.n	80039b0 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8003934:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f245 5255 	movw	r2, #21845	@ 0x5555
 800393e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6852      	ldr	r2, [r2, #4]
 8003948:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6892      	ldr	r2, [r2, #8]
 8003952:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003954:	f7ff f9fa 	bl	8002d4c <HAL_GetTick>
 8003958:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800395a:	e00f      	b.n	800397c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800395c:	f7ff f9f6 	bl	8002d4c <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b31      	cmp	r3, #49	@ 0x31
 8003968:	d908      	bls.n	800397c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e019      	b.n	80039b0 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1e8      	bne.n	800395c <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	429a      	cmp	r2, r3
 8003996:	d005      	beq.n	80039a4 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	68d2      	ldr	r2, [r2, #12]
 80039a0:	611a      	str	r2, [r3, #16]
 80039a2:	e004      	b.n	80039ae <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80039ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80039c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d141      	bne.n	8003a6a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039e6:	4b4b      	ldr	r3, [pc, #300]	@ (8003b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80039ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039f2:	d131      	bne.n	8003a58 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039f4:	4b47      	ldr	r3, [pc, #284]	@ (8003b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039fa:	4a46      	ldr	r2, [pc, #280]	@ (8003b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a04:	4b43      	ldr	r3, [pc, #268]	@ (8003b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a0c:	4a41      	ldr	r2, [pc, #260]	@ (8003b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a14:	4b40      	ldr	r3, [pc, #256]	@ (8003b18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2232      	movs	r2, #50	@ 0x32
 8003a1a:	fb02 f303 	mul.w	r3, r2, r3
 8003a1e:	4a3f      	ldr	r2, [pc, #252]	@ (8003b1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a20:	fba2 2303 	umull	r2, r3, r2, r3
 8003a24:	0c9b      	lsrs	r3, r3, #18
 8003a26:	3301      	adds	r3, #1
 8003a28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a2a:	e002      	b.n	8003a32 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a32:	4b38      	ldr	r3, [pc, #224]	@ (8003b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a3e:	d102      	bne.n	8003a46 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f2      	bne.n	8003a2c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a46:	4b33      	ldr	r3, [pc, #204]	@ (8003b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a52:	d158      	bne.n	8003b06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e057      	b.n	8003b08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a58:	4b2e      	ldr	r3, [pc, #184]	@ (8003b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a5e:	4a2d      	ldr	r2, [pc, #180]	@ (8003b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003a68:	e04d      	b.n	8003b06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a70:	d141      	bne.n	8003af6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a72:	4b28      	ldr	r3, [pc, #160]	@ (8003b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a7e:	d131      	bne.n	8003ae4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a80:	4b24      	ldr	r3, [pc, #144]	@ (8003b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a86:	4a23      	ldr	r2, [pc, #140]	@ (8003b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a90:	4b20      	ldr	r3, [pc, #128]	@ (8003b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a98:	4a1e      	ldr	r2, [pc, #120]	@ (8003b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2232      	movs	r2, #50	@ 0x32
 8003aa6:	fb02 f303 	mul.w	r3, r2, r3
 8003aaa:	4a1c      	ldr	r2, [pc, #112]	@ (8003b1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003aac:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab0:	0c9b      	lsrs	r3, r3, #18
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ab6:	e002      	b.n	8003abe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003abe:	4b15      	ldr	r3, [pc, #84]	@ (8003b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ac6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aca:	d102      	bne.n	8003ad2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f2      	bne.n	8003ab8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ad2:	4b10      	ldr	r3, [pc, #64]	@ (8003b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ada:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ade:	d112      	bne.n	8003b06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e011      	b.n	8003b08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8003b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003aea:	4a0a      	ldr	r2, [pc, #40]	@ (8003b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003af0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003af4:	e007      	b.n	8003b06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003af6:	4b07      	ldr	r3, [pc, #28]	@ (8003b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003afe:	4a05      	ldr	r2, [pc, #20]	@ (8003b14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b00:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b04:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	40007000 	.word	0x40007000
 8003b18:	20000004 	.word	0x20000004
 8003b1c:	431bde83 	.word	0x431bde83

08003b20 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003b24:	4b05      	ldr	r3, [pc, #20]	@ (8003b3c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	4a04      	ldr	r2, [pc, #16]	@ (8003b3c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003b2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b2e:	6093      	str	r3, [r2, #8]
}
 8003b30:	bf00      	nop
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40007000 	.word	0x40007000

08003b40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b088      	sub	sp, #32
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e2fe      	b.n	8004150 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d075      	beq.n	8003c4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b5e:	4b97      	ldr	r3, [pc, #604]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 030c 	and.w	r3, r3, #12
 8003b66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b68:	4b94      	ldr	r3, [pc, #592]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f003 0303 	and.w	r3, r3, #3
 8003b70:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	2b0c      	cmp	r3, #12
 8003b76:	d102      	bne.n	8003b7e <HAL_RCC_OscConfig+0x3e>
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	2b03      	cmp	r3, #3
 8003b7c:	d002      	beq.n	8003b84 <HAL_RCC_OscConfig+0x44>
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	d10b      	bne.n	8003b9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b84:	4b8d      	ldr	r3, [pc, #564]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d05b      	beq.n	8003c48 <HAL_RCC_OscConfig+0x108>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d157      	bne.n	8003c48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e2d9      	b.n	8004150 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ba4:	d106      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x74>
 8003ba6:	4b85      	ldr	r3, [pc, #532]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a84      	ldr	r2, [pc, #528]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003bac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	e01d      	b.n	8003bf0 <HAL_RCC_OscConfig+0xb0>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bbc:	d10c      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x98>
 8003bbe:	4b7f      	ldr	r3, [pc, #508]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a7e      	ldr	r2, [pc, #504]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003bc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	4b7c      	ldr	r3, [pc, #496]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a7b      	ldr	r2, [pc, #492]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003bd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	e00b      	b.n	8003bf0 <HAL_RCC_OscConfig+0xb0>
 8003bd8:	4b78      	ldr	r3, [pc, #480]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a77      	ldr	r2, [pc, #476]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003bde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003be2:	6013      	str	r3, [r2, #0]
 8003be4:	4b75      	ldr	r3, [pc, #468]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a74      	ldr	r2, [pc, #464]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003bea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d013      	beq.n	8003c20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf8:	f7ff f8a8 	bl	8002d4c <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c00:	f7ff f8a4 	bl	8002d4c <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b64      	cmp	r3, #100	@ 0x64
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e29e      	b.n	8004150 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c12:	4b6a      	ldr	r3, [pc, #424]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0f0      	beq.n	8003c00 <HAL_RCC_OscConfig+0xc0>
 8003c1e:	e014      	b.n	8003c4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c20:	f7ff f894 	bl	8002d4c <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c28:	f7ff f890 	bl	8002d4c <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b64      	cmp	r3, #100	@ 0x64
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e28a      	b.n	8004150 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c3a:	4b60      	ldr	r3, [pc, #384]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0xe8>
 8003c46:	e000      	b.n	8003c4a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d075      	beq.n	8003d42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c56:	4b59      	ldr	r3, [pc, #356]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
 8003c5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c60:	4b56      	ldr	r3, [pc, #344]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f003 0303 	and.w	r3, r3, #3
 8003c68:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	2b0c      	cmp	r3, #12
 8003c6e:	d102      	bne.n	8003c76 <HAL_RCC_OscConfig+0x136>
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d002      	beq.n	8003c7c <HAL_RCC_OscConfig+0x13c>
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	d11f      	bne.n	8003cbc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c7c:	4b4f      	ldr	r3, [pc, #316]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <HAL_RCC_OscConfig+0x154>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e25d      	b.n	8004150 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c94:	4b49      	ldr	r3, [pc, #292]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	061b      	lsls	r3, r3, #24
 8003ca2:	4946      	ldr	r1, [pc, #280]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ca8:	4b45      	ldr	r3, [pc, #276]	@ (8003dc0 <HAL_RCC_OscConfig+0x280>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7fe fa35 	bl	800211c <HAL_InitTick>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d043      	beq.n	8003d40 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e249      	b.n	8004150 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d023      	beq.n	8003d0c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cc4:	4b3d      	ldr	r3, [pc, #244]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a3c      	ldr	r2, [pc, #240]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003cca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd0:	f7ff f83c 	bl	8002d4c <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cd8:	f7ff f838 	bl	8002d4c <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e232      	b.n	8004150 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cea:	4b34      	ldr	r3, [pc, #208]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0f0      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf6:	4b31      	ldr	r3, [pc, #196]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	061b      	lsls	r3, r3, #24
 8003d04:	492d      	ldr	r1, [pc, #180]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	604b      	str	r3, [r1, #4]
 8003d0a:	e01a      	b.n	8003d42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d0c:	4b2b      	ldr	r3, [pc, #172]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a2a      	ldr	r2, [pc, #168]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003d12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d18:	f7ff f818 	bl	8002d4c <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d20:	f7ff f814 	bl	8002d4c <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e20e      	b.n	8004150 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d32:	4b22      	ldr	r3, [pc, #136]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f0      	bne.n	8003d20 <HAL_RCC_OscConfig+0x1e0>
 8003d3e:	e000      	b.n	8003d42 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d40:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d041      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d01c      	beq.n	8003d90 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d56:	4b19      	ldr	r3, [pc, #100]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d5c:	4a17      	ldr	r2, [pc, #92]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003d5e:	f043 0301 	orr.w	r3, r3, #1
 8003d62:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d66:	f7fe fff1 	bl	8002d4c <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d6e:	f7fe ffed 	bl	8002d4c <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e1e7      	b.n	8004150 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d80:	4b0e      	ldr	r3, [pc, #56]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0ef      	beq.n	8003d6e <HAL_RCC_OscConfig+0x22e>
 8003d8e:	e020      	b.n	8003dd2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d90:	4b0a      	ldr	r3, [pc, #40]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d96:	4a09      	ldr	r2, [pc, #36]	@ (8003dbc <HAL_RCC_OscConfig+0x27c>)
 8003d98:	f023 0301 	bic.w	r3, r3, #1
 8003d9c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da0:	f7fe ffd4 	bl	8002d4c <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003da6:	e00d      	b.n	8003dc4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003da8:	f7fe ffd0 	bl	8002d4c <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d906      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e1ca      	b.n	8004150 <HAL_RCC_OscConfig+0x610>
 8003dba:	bf00      	nop
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dc4:	4b8c      	ldr	r3, [pc, #560]	@ (8003ff8 <HAL_RCC_OscConfig+0x4b8>)
 8003dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1ea      	bne.n	8003da8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0304 	and.w	r3, r3, #4
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 80a6 	beq.w	8003f2c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003de0:	2300      	movs	r3, #0
 8003de2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003de4:	4b84      	ldr	r3, [pc, #528]	@ (8003ff8 <HAL_RCC_OscConfig+0x4b8>)
 8003de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <HAL_RCC_OscConfig+0x2b4>
 8003df0:	2301      	movs	r3, #1
 8003df2:	e000      	b.n	8003df6 <HAL_RCC_OscConfig+0x2b6>
 8003df4:	2300      	movs	r3, #0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00d      	beq.n	8003e16 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dfa:	4b7f      	ldr	r3, [pc, #508]	@ (8003ff8 <HAL_RCC_OscConfig+0x4b8>)
 8003dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dfe:	4a7e      	ldr	r2, [pc, #504]	@ (8003ff8 <HAL_RCC_OscConfig+0x4b8>)
 8003e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e04:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e06:	4b7c      	ldr	r3, [pc, #496]	@ (8003ff8 <HAL_RCC_OscConfig+0x4b8>)
 8003e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e12:	2301      	movs	r3, #1
 8003e14:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e16:	4b79      	ldr	r3, [pc, #484]	@ (8003ffc <HAL_RCC_OscConfig+0x4bc>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d118      	bne.n	8003e54 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e22:	4b76      	ldr	r3, [pc, #472]	@ (8003ffc <HAL_RCC_OscConfig+0x4bc>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a75      	ldr	r2, [pc, #468]	@ (8003ffc <HAL_RCC_OscConfig+0x4bc>)
 8003e28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e2e:	f7fe ff8d 	bl	8002d4c <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e36:	f7fe ff89 	bl	8002d4c <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e183      	b.n	8004150 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e48:	4b6c      	ldr	r3, [pc, #432]	@ (8003ffc <HAL_RCC_OscConfig+0x4bc>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0f0      	beq.n	8003e36 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d108      	bne.n	8003e6e <HAL_RCC_OscConfig+0x32e>
 8003e5c:	4b66      	ldr	r3, [pc, #408]	@ (8003ff8 <HAL_RCC_OscConfig+0x4b8>)
 8003e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e62:	4a65      	ldr	r2, [pc, #404]	@ (8003ff8 <HAL_RCC_OscConfig+0x4b8>)
 8003e64:	f043 0301 	orr.w	r3, r3, #1
 8003e68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e6c:	e024      	b.n	8003eb8 <HAL_RCC_OscConfig+0x378>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2b05      	cmp	r3, #5
 8003e74:	d110      	bne.n	8003e98 <HAL_RCC_OscConfig+0x358>
 8003e76:	4b60      	ldr	r3, [pc, #384]	@ (8003ff8 <HAL_RCC_OscConfig+0x4b8>)
 8003e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e7c:	4a5e      	ldr	r2, [pc, #376]	@ (8003ff8 <HAL_RCC_OscConfig+0x4b8>)
 8003e7e:	f043 0304 	orr.w	r3, r3, #4
 8003e82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e86:	4b5c      	ldr	r3, [pc, #368]	@ (8003ff8 <HAL_RCC_OscConfig+0x4b8>)
 8003e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e8c:	4a5a      	ldr	r2, [pc, #360]	@ (8003ff8 <HAL_RCC_OscConfig+0x4b8>)
 8003e8e:	f043 0301 	orr.w	r3, r3, #1
 8003e92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e96:	e00f      	b.n	8003eb8 <HAL_RCC_OscConfig+0x378>
 8003e98:	4b57      	ldr	r3, [pc, #348]	@ (8003ff8 <HAL_RCC_OscConfig+0x4b8>)
 8003e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9e:	4a56      	ldr	r2, [pc, #344]	@ (8003ff8 <HAL_RCC_OscConfig+0x4b8>)
 8003ea0:	f023 0301 	bic.w	r3, r3, #1
 8003ea4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ea8:	4b53      	ldr	r3, [pc, #332]	@ (8003ff8 <HAL_RCC_OscConfig+0x4b8>)
 8003eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eae:	4a52      	ldr	r2, [pc, #328]	@ (8003ff8 <HAL_RCC_OscConfig+0x4b8>)
 8003eb0:	f023 0304 	bic.w	r3, r3, #4
 8003eb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d016      	beq.n	8003eee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec0:	f7fe ff44 	bl	8002d4c <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ec6:	e00a      	b.n	8003ede <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec8:	f7fe ff40 	bl	8002d4c <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e138      	b.n	8004150 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ede:	4b46      	ldr	r3, [pc, #280]	@ (8003ff8 <HAL_RCC_OscConfig+0x4b8>)
 8003ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0ed      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x388>
 8003eec:	e015      	b.n	8003f1a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eee:	f7fe ff2d 	bl	8002d4c <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ef4:	e00a      	b.n	8003f0c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef6:	f7fe ff29 	bl	8002d4c <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e121      	b.n	8004150 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f0c:	4b3a      	ldr	r3, [pc, #232]	@ (8003ff8 <HAL_RCC_OscConfig+0x4b8>)
 8003f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1ed      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f1a:	7ffb      	ldrb	r3, [r7, #31]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d105      	bne.n	8003f2c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f20:	4b35      	ldr	r3, [pc, #212]	@ (8003ff8 <HAL_RCC_OscConfig+0x4b8>)
 8003f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f24:	4a34      	ldr	r2, [pc, #208]	@ (8003ff8 <HAL_RCC_OscConfig+0x4b8>)
 8003f26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f2a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0320 	and.w	r3, r3, #32
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d03c      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d01c      	beq.n	8003f7a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f40:	4b2d      	ldr	r3, [pc, #180]	@ (8003ff8 <HAL_RCC_OscConfig+0x4b8>)
 8003f42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f46:	4a2c      	ldr	r2, [pc, #176]	@ (8003ff8 <HAL_RCC_OscConfig+0x4b8>)
 8003f48:	f043 0301 	orr.w	r3, r3, #1
 8003f4c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f50:	f7fe fefc 	bl	8002d4c <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f58:	f7fe fef8 	bl	8002d4c <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e0f2      	b.n	8004150 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f6a:	4b23      	ldr	r3, [pc, #140]	@ (8003ff8 <HAL_RCC_OscConfig+0x4b8>)
 8003f6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0ef      	beq.n	8003f58 <HAL_RCC_OscConfig+0x418>
 8003f78:	e01b      	b.n	8003fb2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f7a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ff8 <HAL_RCC_OscConfig+0x4b8>)
 8003f7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f80:	4a1d      	ldr	r2, [pc, #116]	@ (8003ff8 <HAL_RCC_OscConfig+0x4b8>)
 8003f82:	f023 0301 	bic.w	r3, r3, #1
 8003f86:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8a:	f7fe fedf 	bl	8002d4c <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f92:	f7fe fedb 	bl	8002d4c <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e0d5      	b.n	8004150 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fa4:	4b14      	ldr	r3, [pc, #80]	@ (8003ff8 <HAL_RCC_OscConfig+0x4b8>)
 8003fa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1ef      	bne.n	8003f92 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 80c9 	beq.w	800414e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff8 <HAL_RCC_OscConfig+0x4b8>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f003 030c 	and.w	r3, r3, #12
 8003fc4:	2b0c      	cmp	r3, #12
 8003fc6:	f000 8083 	beq.w	80040d0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d15e      	bne.n	8004090 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd2:	4b09      	ldr	r3, [pc, #36]	@ (8003ff8 <HAL_RCC_OscConfig+0x4b8>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a08      	ldr	r2, [pc, #32]	@ (8003ff8 <HAL_RCC_OscConfig+0x4b8>)
 8003fd8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fde:	f7fe feb5 	bl	8002d4c <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fe4:	e00c      	b.n	8004000 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe6:	f7fe feb1 	bl	8002d4c <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d905      	bls.n	8004000 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e0ab      	b.n	8004150 <HAL_RCC_OscConfig+0x610>
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004000:	4b55      	ldr	r3, [pc, #340]	@ (8004158 <HAL_RCC_OscConfig+0x618>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1ec      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800400c:	4b52      	ldr	r3, [pc, #328]	@ (8004158 <HAL_RCC_OscConfig+0x618>)
 800400e:	68da      	ldr	r2, [r3, #12]
 8004010:	4b52      	ldr	r3, [pc, #328]	@ (800415c <HAL_RCC_OscConfig+0x61c>)
 8004012:	4013      	ands	r3, r2
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	6a11      	ldr	r1, [r2, #32]
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800401c:	3a01      	subs	r2, #1
 800401e:	0112      	lsls	r2, r2, #4
 8004020:	4311      	orrs	r1, r2
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004026:	0212      	lsls	r2, r2, #8
 8004028:	4311      	orrs	r1, r2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800402e:	0852      	lsrs	r2, r2, #1
 8004030:	3a01      	subs	r2, #1
 8004032:	0552      	lsls	r2, r2, #21
 8004034:	4311      	orrs	r1, r2
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800403a:	0852      	lsrs	r2, r2, #1
 800403c:	3a01      	subs	r2, #1
 800403e:	0652      	lsls	r2, r2, #25
 8004040:	4311      	orrs	r1, r2
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004046:	06d2      	lsls	r2, r2, #27
 8004048:	430a      	orrs	r2, r1
 800404a:	4943      	ldr	r1, [pc, #268]	@ (8004158 <HAL_RCC_OscConfig+0x618>)
 800404c:	4313      	orrs	r3, r2
 800404e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004050:	4b41      	ldr	r3, [pc, #260]	@ (8004158 <HAL_RCC_OscConfig+0x618>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a40      	ldr	r2, [pc, #256]	@ (8004158 <HAL_RCC_OscConfig+0x618>)
 8004056:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800405a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800405c:	4b3e      	ldr	r3, [pc, #248]	@ (8004158 <HAL_RCC_OscConfig+0x618>)
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	4a3d      	ldr	r2, [pc, #244]	@ (8004158 <HAL_RCC_OscConfig+0x618>)
 8004062:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004066:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004068:	f7fe fe70 	bl	8002d4c <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004070:	f7fe fe6c 	bl	8002d4c <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e066      	b.n	8004150 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004082:	4b35      	ldr	r3, [pc, #212]	@ (8004158 <HAL_RCC_OscConfig+0x618>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f0      	beq.n	8004070 <HAL_RCC_OscConfig+0x530>
 800408e:	e05e      	b.n	800414e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004090:	4b31      	ldr	r3, [pc, #196]	@ (8004158 <HAL_RCC_OscConfig+0x618>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a30      	ldr	r2, [pc, #192]	@ (8004158 <HAL_RCC_OscConfig+0x618>)
 8004096:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800409a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409c:	f7fe fe56 	bl	8002d4c <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a4:	f7fe fe52 	bl	8002d4c <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e04c      	b.n	8004150 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040b6:	4b28      	ldr	r3, [pc, #160]	@ (8004158 <HAL_RCC_OscConfig+0x618>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1f0      	bne.n	80040a4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80040c2:	4b25      	ldr	r3, [pc, #148]	@ (8004158 <HAL_RCC_OscConfig+0x618>)
 80040c4:	68da      	ldr	r2, [r3, #12]
 80040c6:	4924      	ldr	r1, [pc, #144]	@ (8004158 <HAL_RCC_OscConfig+0x618>)
 80040c8:	4b25      	ldr	r3, [pc, #148]	@ (8004160 <HAL_RCC_OscConfig+0x620>)
 80040ca:	4013      	ands	r3, r2
 80040cc:	60cb      	str	r3, [r1, #12]
 80040ce:	e03e      	b.n	800414e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d101      	bne.n	80040dc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e039      	b.n	8004150 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80040dc:	4b1e      	ldr	r3, [pc, #120]	@ (8004158 <HAL_RCC_OscConfig+0x618>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f003 0203 	and.w	r2, r3, #3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d12c      	bne.n	800414a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fa:	3b01      	subs	r3, #1
 80040fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040fe:	429a      	cmp	r2, r3
 8004100:	d123      	bne.n	800414a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800410e:	429a      	cmp	r2, r3
 8004110:	d11b      	bne.n	800414a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800411e:	429a      	cmp	r2, r3
 8004120:	d113      	bne.n	800414a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412c:	085b      	lsrs	r3, r3, #1
 800412e:	3b01      	subs	r3, #1
 8004130:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004132:	429a      	cmp	r2, r3
 8004134:	d109      	bne.n	800414a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004140:	085b      	lsrs	r3, r3, #1
 8004142:	3b01      	subs	r3, #1
 8004144:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004146:	429a      	cmp	r2, r3
 8004148:	d001      	beq.n	800414e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e000      	b.n	8004150 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3720      	adds	r7, #32
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40021000 	.word	0x40021000
 800415c:	019f800c 	.word	0x019f800c
 8004160:	feeefffc 	.word	0xfeeefffc

08004164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e11e      	b.n	80043ba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800417c:	4b91      	ldr	r3, [pc, #580]	@ (80043c4 <HAL_RCC_ClockConfig+0x260>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 030f 	and.w	r3, r3, #15
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d910      	bls.n	80041ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418a:	4b8e      	ldr	r3, [pc, #568]	@ (80043c4 <HAL_RCC_ClockConfig+0x260>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f023 020f 	bic.w	r2, r3, #15
 8004192:	498c      	ldr	r1, [pc, #560]	@ (80043c4 <HAL_RCC_ClockConfig+0x260>)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	4313      	orrs	r3, r2
 8004198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800419a:	4b8a      	ldr	r3, [pc, #552]	@ (80043c4 <HAL_RCC_ClockConfig+0x260>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d001      	beq.n	80041ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e106      	b.n	80043ba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d073      	beq.n	80042a0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2b03      	cmp	r3, #3
 80041be:	d129      	bne.n	8004214 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041c0:	4b81      	ldr	r3, [pc, #516]	@ (80043c8 <HAL_RCC_ClockConfig+0x264>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e0f4      	b.n	80043ba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80041d0:	f000 f9d0 	bl	8004574 <RCC_GetSysClockFreqFromPLLSource>
 80041d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	4a7c      	ldr	r2, [pc, #496]	@ (80043cc <HAL_RCC_ClockConfig+0x268>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d93f      	bls.n	800425e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80041de:	4b7a      	ldr	r3, [pc, #488]	@ (80043c8 <HAL_RCC_ClockConfig+0x264>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d009      	beq.n	80041fe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d033      	beq.n	800425e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d12f      	bne.n	800425e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041fe:	4b72      	ldr	r3, [pc, #456]	@ (80043c8 <HAL_RCC_ClockConfig+0x264>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004206:	4a70      	ldr	r2, [pc, #448]	@ (80043c8 <HAL_RCC_ClockConfig+0x264>)
 8004208:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800420c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800420e:	2380      	movs	r3, #128	@ 0x80
 8004210:	617b      	str	r3, [r7, #20]
 8004212:	e024      	b.n	800425e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b02      	cmp	r3, #2
 800421a:	d107      	bne.n	800422c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800421c:	4b6a      	ldr	r3, [pc, #424]	@ (80043c8 <HAL_RCC_ClockConfig+0x264>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d109      	bne.n	800423c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e0c6      	b.n	80043ba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800422c:	4b66      	ldr	r3, [pc, #408]	@ (80043c8 <HAL_RCC_ClockConfig+0x264>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e0be      	b.n	80043ba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800423c:	f000 f8ce 	bl	80043dc <HAL_RCC_GetSysClockFreq>
 8004240:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	4a61      	ldr	r2, [pc, #388]	@ (80043cc <HAL_RCC_ClockConfig+0x268>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d909      	bls.n	800425e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800424a:	4b5f      	ldr	r3, [pc, #380]	@ (80043c8 <HAL_RCC_ClockConfig+0x264>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004252:	4a5d      	ldr	r2, [pc, #372]	@ (80043c8 <HAL_RCC_ClockConfig+0x264>)
 8004254:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004258:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800425a:	2380      	movs	r3, #128	@ 0x80
 800425c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800425e:	4b5a      	ldr	r3, [pc, #360]	@ (80043c8 <HAL_RCC_ClockConfig+0x264>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f023 0203 	bic.w	r2, r3, #3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	4957      	ldr	r1, [pc, #348]	@ (80043c8 <HAL_RCC_ClockConfig+0x264>)
 800426c:	4313      	orrs	r3, r2
 800426e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004270:	f7fe fd6c 	bl	8002d4c <HAL_GetTick>
 8004274:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004276:	e00a      	b.n	800428e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004278:	f7fe fd68 	bl	8002d4c <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004286:	4293      	cmp	r3, r2
 8004288:	d901      	bls.n	800428e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e095      	b.n	80043ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800428e:	4b4e      	ldr	r3, [pc, #312]	@ (80043c8 <HAL_RCC_ClockConfig+0x264>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 020c 	and.w	r2, r3, #12
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	429a      	cmp	r2, r3
 800429e:	d1eb      	bne.n	8004278 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d023      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d005      	beq.n	80042c4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042b8:	4b43      	ldr	r3, [pc, #268]	@ (80043c8 <HAL_RCC_ClockConfig+0x264>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	4a42      	ldr	r2, [pc, #264]	@ (80043c8 <HAL_RCC_ClockConfig+0x264>)
 80042be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80042c2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0308 	and.w	r3, r3, #8
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d007      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80042d0:	4b3d      	ldr	r3, [pc, #244]	@ (80043c8 <HAL_RCC_ClockConfig+0x264>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80042d8:	4a3b      	ldr	r2, [pc, #236]	@ (80043c8 <HAL_RCC_ClockConfig+0x264>)
 80042da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80042de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042e0:	4b39      	ldr	r3, [pc, #228]	@ (80043c8 <HAL_RCC_ClockConfig+0x264>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	4936      	ldr	r1, [pc, #216]	@ (80043c8 <HAL_RCC_ClockConfig+0x264>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	608b      	str	r3, [r1, #8]
 80042f2:	e008      	b.n	8004306 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	2b80      	cmp	r3, #128	@ 0x80
 80042f8:	d105      	bne.n	8004306 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80042fa:	4b33      	ldr	r3, [pc, #204]	@ (80043c8 <HAL_RCC_ClockConfig+0x264>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	4a32      	ldr	r2, [pc, #200]	@ (80043c8 <HAL_RCC_ClockConfig+0x264>)
 8004300:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004304:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004306:	4b2f      	ldr	r3, [pc, #188]	@ (80043c4 <HAL_RCC_ClockConfig+0x260>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	429a      	cmp	r2, r3
 8004312:	d21d      	bcs.n	8004350 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004314:	4b2b      	ldr	r3, [pc, #172]	@ (80043c4 <HAL_RCC_ClockConfig+0x260>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f023 020f 	bic.w	r2, r3, #15
 800431c:	4929      	ldr	r1, [pc, #164]	@ (80043c4 <HAL_RCC_ClockConfig+0x260>)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	4313      	orrs	r3, r2
 8004322:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004324:	f7fe fd12 	bl	8002d4c <HAL_GetTick>
 8004328:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800432a:	e00a      	b.n	8004342 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800432c:	f7fe fd0e 	bl	8002d4c <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800433a:	4293      	cmp	r3, r2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e03b      	b.n	80043ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004342:	4b20      	ldr	r3, [pc, #128]	@ (80043c4 <HAL_RCC_ClockConfig+0x260>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d1ed      	bne.n	800432c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b00      	cmp	r3, #0
 800435a:	d008      	beq.n	800436e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800435c:	4b1a      	ldr	r3, [pc, #104]	@ (80043c8 <HAL_RCC_ClockConfig+0x264>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	4917      	ldr	r1, [pc, #92]	@ (80043c8 <HAL_RCC_ClockConfig+0x264>)
 800436a:	4313      	orrs	r3, r2
 800436c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0308 	and.w	r3, r3, #8
 8004376:	2b00      	cmp	r3, #0
 8004378:	d009      	beq.n	800438e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800437a:	4b13      	ldr	r3, [pc, #76]	@ (80043c8 <HAL_RCC_ClockConfig+0x264>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	490f      	ldr	r1, [pc, #60]	@ (80043c8 <HAL_RCC_ClockConfig+0x264>)
 800438a:	4313      	orrs	r3, r2
 800438c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800438e:	f000 f825 	bl	80043dc <HAL_RCC_GetSysClockFreq>
 8004392:	4602      	mov	r2, r0
 8004394:	4b0c      	ldr	r3, [pc, #48]	@ (80043c8 <HAL_RCC_ClockConfig+0x264>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	091b      	lsrs	r3, r3, #4
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	490c      	ldr	r1, [pc, #48]	@ (80043d0 <HAL_RCC_ClockConfig+0x26c>)
 80043a0:	5ccb      	ldrb	r3, [r1, r3]
 80043a2:	f003 031f 	and.w	r3, r3, #31
 80043a6:	fa22 f303 	lsr.w	r3, r2, r3
 80043aa:	4a0a      	ldr	r2, [pc, #40]	@ (80043d4 <HAL_RCC_ClockConfig+0x270>)
 80043ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80043ae:	4b0a      	ldr	r3, [pc, #40]	@ (80043d8 <HAL_RCC_ClockConfig+0x274>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7fd feb2 	bl	800211c <HAL_InitTick>
 80043b8:	4603      	mov	r3, r0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3718      	adds	r7, #24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40022000 	.word	0x40022000
 80043c8:	40021000 	.word	0x40021000
 80043cc:	04c4b400 	.word	0x04c4b400
 80043d0:	080187cc 	.word	0x080187cc
 80043d4:	20000004 	.word	0x20000004
 80043d8:	20000008 	.word	0x20000008

080043dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80043e2:	4b2c      	ldr	r3, [pc, #176]	@ (8004494 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 030c 	and.w	r3, r3, #12
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	d102      	bne.n	80043f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043ee:	4b2a      	ldr	r3, [pc, #168]	@ (8004498 <HAL_RCC_GetSysClockFreq+0xbc>)
 80043f0:	613b      	str	r3, [r7, #16]
 80043f2:	e047      	b.n	8004484 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80043f4:	4b27      	ldr	r3, [pc, #156]	@ (8004494 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f003 030c 	and.w	r3, r3, #12
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d102      	bne.n	8004406 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004400:	4b26      	ldr	r3, [pc, #152]	@ (800449c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	e03e      	b.n	8004484 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004406:	4b23      	ldr	r3, [pc, #140]	@ (8004494 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 030c 	and.w	r3, r3, #12
 800440e:	2b0c      	cmp	r3, #12
 8004410:	d136      	bne.n	8004480 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004412:	4b20      	ldr	r3, [pc, #128]	@ (8004494 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f003 0303 	and.w	r3, r3, #3
 800441a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800441c:	4b1d      	ldr	r3, [pc, #116]	@ (8004494 <HAL_RCC_GetSysClockFreq+0xb8>)
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	091b      	lsrs	r3, r3, #4
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	3301      	adds	r3, #1
 8004428:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b03      	cmp	r3, #3
 800442e:	d10c      	bne.n	800444a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004430:	4a1a      	ldr	r2, [pc, #104]	@ (800449c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	fbb2 f3f3 	udiv	r3, r2, r3
 8004438:	4a16      	ldr	r2, [pc, #88]	@ (8004494 <HAL_RCC_GetSysClockFreq+0xb8>)
 800443a:	68d2      	ldr	r2, [r2, #12]
 800443c:	0a12      	lsrs	r2, r2, #8
 800443e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004442:	fb02 f303 	mul.w	r3, r2, r3
 8004446:	617b      	str	r3, [r7, #20]
      break;
 8004448:	e00c      	b.n	8004464 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800444a:	4a13      	ldr	r2, [pc, #76]	@ (8004498 <HAL_RCC_GetSysClockFreq+0xbc>)
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004452:	4a10      	ldr	r2, [pc, #64]	@ (8004494 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004454:	68d2      	ldr	r2, [r2, #12]
 8004456:	0a12      	lsrs	r2, r2, #8
 8004458:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800445c:	fb02 f303 	mul.w	r3, r2, r3
 8004460:	617b      	str	r3, [r7, #20]
      break;
 8004462:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004464:	4b0b      	ldr	r3, [pc, #44]	@ (8004494 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	0e5b      	lsrs	r3, r3, #25
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	3301      	adds	r3, #1
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	fbb2 f3f3 	udiv	r3, r2, r3
 800447c:	613b      	str	r3, [r7, #16]
 800447e:	e001      	b.n	8004484 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004484:	693b      	ldr	r3, [r7, #16]
}
 8004486:	4618      	mov	r0, r3
 8004488:	371c      	adds	r7, #28
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40021000 	.word	0x40021000
 8004498:	00f42400 	.word	0x00f42400
 800449c:	016e3600 	.word	0x016e3600

080044a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044a4:	4b03      	ldr	r3, [pc, #12]	@ (80044b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80044a6:	681b      	ldr	r3, [r3, #0]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	20000004 	.word	0x20000004

080044b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80044bc:	f7ff fff0 	bl	80044a0 <HAL_RCC_GetHCLKFreq>
 80044c0:	4602      	mov	r2, r0
 80044c2:	4b06      	ldr	r3, [pc, #24]	@ (80044dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	0a1b      	lsrs	r3, r3, #8
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	4904      	ldr	r1, [pc, #16]	@ (80044e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044ce:	5ccb      	ldrb	r3, [r1, r3]
 80044d0:	f003 031f 	and.w	r3, r3, #31
 80044d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d8:	4618      	mov	r0, r3
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40021000 	.word	0x40021000
 80044e0:	080187dc 	.word	0x080187dc

080044e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044e8:	f7ff ffda 	bl	80044a0 <HAL_RCC_GetHCLKFreq>
 80044ec:	4602      	mov	r2, r0
 80044ee:	4b06      	ldr	r3, [pc, #24]	@ (8004508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	0adb      	lsrs	r3, r3, #11
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	4904      	ldr	r1, [pc, #16]	@ (800450c <HAL_RCC_GetPCLK2Freq+0x28>)
 80044fa:	5ccb      	ldrb	r3, [r1, r3]
 80044fc:	f003 031f 	and.w	r3, r3, #31
 8004500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004504:	4618      	mov	r0, r3
 8004506:	bd80      	pop	{r7, pc}
 8004508:	40021000 	.word	0x40021000
 800450c:	080187dc 	.word	0x080187dc

08004510 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	220f      	movs	r2, #15
 800451e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004520:	4b12      	ldr	r3, [pc, #72]	@ (800456c <HAL_RCC_GetClockConfig+0x5c>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f003 0203 	and.w	r2, r3, #3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800452c:	4b0f      	ldr	r3, [pc, #60]	@ (800456c <HAL_RCC_GetClockConfig+0x5c>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004538:	4b0c      	ldr	r3, [pc, #48]	@ (800456c <HAL_RCC_GetClockConfig+0x5c>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004544:	4b09      	ldr	r3, [pc, #36]	@ (800456c <HAL_RCC_GetClockConfig+0x5c>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	08db      	lsrs	r3, r3, #3
 800454a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004552:	4b07      	ldr	r3, [pc, #28]	@ (8004570 <HAL_RCC_GetClockConfig+0x60>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 020f 	and.w	r2, r3, #15
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	601a      	str	r2, [r3, #0]
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	40021000 	.word	0x40021000
 8004570:	40022000 	.word	0x40022000

08004574 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800457a:	4b1e      	ldr	r3, [pc, #120]	@ (80045f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004584:	4b1b      	ldr	r3, [pc, #108]	@ (80045f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	091b      	lsrs	r3, r3, #4
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	3301      	adds	r3, #1
 8004590:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	2b03      	cmp	r3, #3
 8004596:	d10c      	bne.n	80045b2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004598:	4a17      	ldr	r2, [pc, #92]	@ (80045f8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a0:	4a14      	ldr	r2, [pc, #80]	@ (80045f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045a2:	68d2      	ldr	r2, [r2, #12]
 80045a4:	0a12      	lsrs	r2, r2, #8
 80045a6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80045aa:	fb02 f303 	mul.w	r3, r2, r3
 80045ae:	617b      	str	r3, [r7, #20]
    break;
 80045b0:	e00c      	b.n	80045cc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045b2:	4a12      	ldr	r2, [pc, #72]	@ (80045fc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ba:	4a0e      	ldr	r2, [pc, #56]	@ (80045f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045bc:	68d2      	ldr	r2, [r2, #12]
 80045be:	0a12      	lsrs	r2, r2, #8
 80045c0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80045c4:	fb02 f303 	mul.w	r3, r2, r3
 80045c8:	617b      	str	r3, [r7, #20]
    break;
 80045ca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045cc:	4b09      	ldr	r3, [pc, #36]	@ (80045f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	0e5b      	lsrs	r3, r3, #25
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	3301      	adds	r3, #1
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80045e6:	687b      	ldr	r3, [r7, #4]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	371c      	adds	r7, #28
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	40021000 	.word	0x40021000
 80045f8:	016e3600 	.word	0x016e3600
 80045fc:	00f42400 	.word	0x00f42400

08004600 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004608:	2300      	movs	r3, #0
 800460a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800460c:	2300      	movs	r3, #0
 800460e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 8098 	beq.w	800474e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800461e:	2300      	movs	r3, #0
 8004620:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004622:	4b43      	ldr	r3, [pc, #268]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10d      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800462e:	4b40      	ldr	r3, [pc, #256]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004632:	4a3f      	ldr	r2, [pc, #252]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004638:	6593      	str	r3, [r2, #88]	@ 0x58
 800463a:	4b3d      	ldr	r3, [pc, #244]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800463c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800463e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004642:	60bb      	str	r3, [r7, #8]
 8004644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004646:	2301      	movs	r3, #1
 8004648:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800464a:	4b3a      	ldr	r3, [pc, #232]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a39      	ldr	r2, [pc, #228]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004654:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004656:	f7fe fb79 	bl	8002d4c <HAL_GetTick>
 800465a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800465c:	e009      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800465e:	f7fe fb75 	bl	8002d4c <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d902      	bls.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	74fb      	strb	r3, [r7, #19]
        break;
 8004670:	e005      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004672:	4b30      	ldr	r3, [pc, #192]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0ef      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800467e:	7cfb      	ldrb	r3, [r7, #19]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d159      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004684:	4b2a      	ldr	r3, [pc, #168]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800468a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800468e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d01e      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	429a      	cmp	r2, r3
 800469e:	d019      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046a0:	4b23      	ldr	r3, [pc, #140]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046ac:	4b20      	ldr	r3, [pc, #128]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046b2:	4a1f      	ldr	r2, [pc, #124]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046bc:	4b1c      	ldr	r3, [pc, #112]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c2:	4a1b      	ldr	r2, [pc, #108]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046cc:	4a18      	ldr	r2, [pc, #96]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d016      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046de:	f7fe fb35 	bl	8002d4c <HAL_GetTick>
 80046e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046e4:	e00b      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046e6:	f7fe fb31 	bl	8002d4c <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d902      	bls.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	74fb      	strb	r3, [r7, #19]
            break;
 80046fc:	e006      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0ec      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800470c:	7cfb      	ldrb	r3, [r7, #19]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10b      	bne.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004712:	4b07      	ldr	r3, [pc, #28]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004714:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004718:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004720:	4903      	ldr	r1, [pc, #12]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004728:	e008      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800472a:	7cfb      	ldrb	r3, [r7, #19]
 800472c:	74bb      	strb	r3, [r7, #18]
 800472e:	e005      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004730:	40021000 	.word	0x40021000
 8004734:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004738:	7cfb      	ldrb	r3, [r7, #19]
 800473a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800473c:	7c7b      	ldrb	r3, [r7, #17]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d105      	bne.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004742:	4ba7      	ldr	r3, [pc, #668]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004746:	4aa6      	ldr	r2, [pc, #664]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004748:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800474c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00a      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800475a:	4ba1      	ldr	r3, [pc, #644]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800475c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004760:	f023 0203 	bic.w	r2, r3, #3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	499d      	ldr	r1, [pc, #628]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800476a:	4313      	orrs	r3, r2
 800476c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00a      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800477c:	4b98      	ldr	r3, [pc, #608]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800477e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004782:	f023 020c 	bic.w	r2, r3, #12
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	4995      	ldr	r1, [pc, #596]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800478c:	4313      	orrs	r3, r2
 800478e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0304 	and.w	r3, r3, #4
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00a      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800479e:	4b90      	ldr	r3, [pc, #576]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	498c      	ldr	r1, [pc, #560]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00a      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047c0:	4b87      	ldr	r3, [pc, #540]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	4984      	ldr	r1, [pc, #528]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0310 	and.w	r3, r3, #16
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047e2:	4b7f      	ldr	r3, [pc, #508]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	497b      	ldr	r1, [pc, #492]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00a      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004804:	4b76      	ldr	r3, [pc, #472]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800480a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	4973      	ldr	r1, [pc, #460]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004814:	4313      	orrs	r3, r2
 8004816:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004826:	4b6e      	ldr	r3, [pc, #440]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800482c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	496a      	ldr	r1, [pc, #424]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004836:	4313      	orrs	r3, r2
 8004838:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00a      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004848:	4b65      	ldr	r3, [pc, #404]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800484a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800484e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	4962      	ldr	r1, [pc, #392]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004858:	4313      	orrs	r3, r2
 800485a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00a      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800486a:	4b5d      	ldr	r3, [pc, #372]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800486c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004870:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004878:	4959      	ldr	r1, [pc, #356]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800487a:	4313      	orrs	r3, r2
 800487c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00a      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800488c:	4b54      	ldr	r3, [pc, #336]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800488e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004892:	f023 0203 	bic.w	r2, r3, #3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489a:	4951      	ldr	r1, [pc, #324]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800489c:	4313      	orrs	r3, r2
 800489e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00a      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048ae:	4b4c      	ldr	r3, [pc, #304]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048bc:	4948      	ldr	r1, [pc, #288]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d015      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048d0:	4b43      	ldr	r3, [pc, #268]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048de:	4940      	ldr	r1, [pc, #256]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048ee:	d105      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048f0:	4b3b      	ldr	r3, [pc, #236]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	4a3a      	ldr	r2, [pc, #232]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048fa:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004904:	2b00      	cmp	r3, #0
 8004906:	d015      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004908:	4b35      	ldr	r3, [pc, #212]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800490a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800490e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004916:	4932      	ldr	r1, [pc, #200]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004918:	4313      	orrs	r3, r2
 800491a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004922:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004926:	d105      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004928:	4b2d      	ldr	r3, [pc, #180]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	4a2c      	ldr	r2, [pc, #176]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800492e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004932:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d015      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004940:	4b27      	ldr	r3, [pc, #156]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004946:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800494e:	4924      	ldr	r1, [pc, #144]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004950:	4313      	orrs	r3, r2
 8004952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800495e:	d105      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004960:	4b1f      	ldr	r3, [pc, #124]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	4a1e      	ldr	r2, [pc, #120]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004966:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800496a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d015      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004978:	4b19      	ldr	r3, [pc, #100]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800497a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800497e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004986:	4916      	ldr	r1, [pc, #88]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004988:	4313      	orrs	r3, r2
 800498a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004992:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004996:	d105      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004998:	4b11      	ldr	r3, [pc, #68]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	4a10      	ldr	r2, [pc, #64]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800499e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049a2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d019      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049b0:	4b0b      	ldr	r3, [pc, #44]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049be:	4908      	ldr	r1, [pc, #32]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049ce:	d109      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049d0:	4b03      	ldr	r3, [pc, #12]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	4a02      	ldr	r2, [pc, #8]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049da:	60d3      	str	r3, [r2, #12]
 80049dc:	e002      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80049de:	bf00      	nop
 80049e0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d015      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80049f0:	4b29      	ldr	r3, [pc, #164]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049fe:	4926      	ldr	r1, [pc, #152]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a0e:	d105      	bne.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a10:	4b21      	ldr	r3, [pc, #132]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	4a20      	ldr	r2, [pc, #128]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a1a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d015      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004a28:	4b1b      	ldr	r3, [pc, #108]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a2e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a36:	4918      	ldr	r1, [pc, #96]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a46:	d105      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a48:	4b13      	ldr	r3, [pc, #76]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	4a12      	ldr	r2, [pc, #72]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a52:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d015      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004a60:	4b0d      	ldr	r3, [pc, #52]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a6e:	490a      	ldr	r1, [pc, #40]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a7e:	d105      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a80:	4b05      	ldr	r3, [pc, #20]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	4a04      	ldr	r2, [pc, #16]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a8a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004a8c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3718      	adds	r7, #24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	40021000 	.word	0x40021000

08004a9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e049      	b.n	8004b42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d106      	bne.n	8004ac8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7fd fdb2 	bl	800262c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	3304      	adds	r3, #4
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4610      	mov	r0, r2
 8004adc:	f000 fcb0 	bl	8005440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
	...

08004b4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d001      	beq.n	8004b64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e054      	b.n	8004c0e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0201 	orr.w	r2, r2, #1
 8004b7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a26      	ldr	r2, [pc, #152]	@ (8004c1c <HAL_TIM_Base_Start_IT+0xd0>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d022      	beq.n	8004bcc <HAL_TIM_Base_Start_IT+0x80>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b8e:	d01d      	beq.n	8004bcc <HAL_TIM_Base_Start_IT+0x80>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a22      	ldr	r2, [pc, #136]	@ (8004c20 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d018      	beq.n	8004bcc <HAL_TIM_Base_Start_IT+0x80>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a21      	ldr	r2, [pc, #132]	@ (8004c24 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d013      	beq.n	8004bcc <HAL_TIM_Base_Start_IT+0x80>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a1f      	ldr	r2, [pc, #124]	@ (8004c28 <HAL_TIM_Base_Start_IT+0xdc>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d00e      	beq.n	8004bcc <HAL_TIM_Base_Start_IT+0x80>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a1e      	ldr	r2, [pc, #120]	@ (8004c2c <HAL_TIM_Base_Start_IT+0xe0>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d009      	beq.n	8004bcc <HAL_TIM_Base_Start_IT+0x80>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a1c      	ldr	r2, [pc, #112]	@ (8004c30 <HAL_TIM_Base_Start_IT+0xe4>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d004      	beq.n	8004bcc <HAL_TIM_Base_Start_IT+0x80>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a1b      	ldr	r2, [pc, #108]	@ (8004c34 <HAL_TIM_Base_Start_IT+0xe8>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d115      	bne.n	8004bf8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689a      	ldr	r2, [r3, #8]
 8004bd2:	4b19      	ldr	r3, [pc, #100]	@ (8004c38 <HAL_TIM_Base_Start_IT+0xec>)
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b06      	cmp	r3, #6
 8004bdc:	d015      	beq.n	8004c0a <HAL_TIM_Base_Start_IT+0xbe>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004be4:	d011      	beq.n	8004c0a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f042 0201 	orr.w	r2, r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf6:	e008      	b.n	8004c0a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0201 	orr.w	r2, r2, #1
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	e000      	b.n	8004c0c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	40012c00 	.word	0x40012c00
 8004c20:	40000400 	.word	0x40000400
 8004c24:	40000800 	.word	0x40000800
 8004c28:	40000c00 	.word	0x40000c00
 8004c2c:	40013400 	.word	0x40013400
 8004c30:	40014000 	.word	0x40014000
 8004c34:	40015000 	.word	0x40015000
 8004c38:	00010007 	.word	0x00010007

08004c3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e049      	b.n	8004ce2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d106      	bne.n	8004c68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f841 	bl	8004cea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3304      	adds	r3, #4
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4610      	mov	r0, r2
 8004c7c:	f000 fbe0 	bl	8005440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004cf2:	bf00      	nop
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b084      	sub	sp, #16
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d020      	beq.n	8004d62 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d01b      	beq.n	8004d62 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f06f 0202 	mvn.w	r2, #2
 8004d32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	f003 0303 	and.w	r3, r3, #3
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d003      	beq.n	8004d50 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 fb5b 	bl	8005404 <HAL_TIM_IC_CaptureCallback>
 8004d4e:	e005      	b.n	8004d5c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 fb4d 	bl	80053f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 fb5e 	bl	8005418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d020      	beq.n	8004dae <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f003 0304 	and.w	r3, r3, #4
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d01b      	beq.n	8004dae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f06f 0204 	mvn.w	r2, #4
 8004d7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 fb35 	bl	8005404 <HAL_TIM_IC_CaptureCallback>
 8004d9a:	e005      	b.n	8004da8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 fb27 	bl	80053f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 fb38 	bl	8005418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d020      	beq.n	8004dfa <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f003 0308 	and.w	r3, r3, #8
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d01b      	beq.n	8004dfa <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f06f 0208 	mvn.w	r2, #8
 8004dca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2204      	movs	r2, #4
 8004dd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	f003 0303 	and.w	r3, r3, #3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d003      	beq.n	8004de8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 fb0f 	bl	8005404 <HAL_TIM_IC_CaptureCallback>
 8004de6:	e005      	b.n	8004df4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 fb01 	bl	80053f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 fb12 	bl	8005418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	f003 0310 	and.w	r3, r3, #16
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d020      	beq.n	8004e46 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f003 0310 	and.w	r3, r3, #16
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d01b      	beq.n	8004e46 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f06f 0210 	mvn.w	r2, #16
 8004e16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2208      	movs	r2, #8
 8004e1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	69db      	ldr	r3, [r3, #28]
 8004e24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 fae9 	bl	8005404 <HAL_TIM_IC_CaptureCallback>
 8004e32:	e005      	b.n	8004e40 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 fadb 	bl	80053f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 faec 	bl	8005418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00c      	beq.n	8004e6a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d007      	beq.n	8004e6a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f06f 0201 	mvn.w	r2, #1
 8004e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7fc fbcf 	bl	8001608 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d104      	bne.n	8004e7e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00c      	beq.n	8004e98 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d007      	beq.n	8004e98 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 ffee 	bl	8005e74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00c      	beq.n	8004ebc <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d007      	beq.n	8004ebc <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 ffe6 	bl	8005e88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00c      	beq.n	8004ee0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d007      	beq.n	8004ee0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 faa6 	bl	800542c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f003 0320 	and.w	r3, r3, #32
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00c      	beq.n	8004f04 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f003 0320 	and.w	r3, r3, #32
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d007      	beq.n	8004f04 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f06f 0220 	mvn.w	r2, #32
 8004efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 ffae 	bl	8005e60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00c      	beq.n	8004f28 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d007      	beq.n	8004f28 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 ffba 	bl	8005e9c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00c      	beq.n	8004f4c <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d007      	beq.n	8004f4c <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 ffb2 	bl	8005eb0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00c      	beq.n	8004f70 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d007      	beq.n	8004f70 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 ffaa 	bl	8005ec4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00c      	beq.n	8004f94 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d007      	beq.n	8004f94 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 ffa2 	bl	8005ed8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f94:	bf00      	nop
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d101      	bne.n	8004fba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	e0ff      	b.n	80051ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b14      	cmp	r3, #20
 8004fc6:	f200 80f0 	bhi.w	80051aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004fca:	a201      	add	r2, pc, #4	@ (adr r2, 8004fd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd0:	08005025 	.word	0x08005025
 8004fd4:	080051ab 	.word	0x080051ab
 8004fd8:	080051ab 	.word	0x080051ab
 8004fdc:	080051ab 	.word	0x080051ab
 8004fe0:	08005065 	.word	0x08005065
 8004fe4:	080051ab 	.word	0x080051ab
 8004fe8:	080051ab 	.word	0x080051ab
 8004fec:	080051ab 	.word	0x080051ab
 8004ff0:	080050a7 	.word	0x080050a7
 8004ff4:	080051ab 	.word	0x080051ab
 8004ff8:	080051ab 	.word	0x080051ab
 8004ffc:	080051ab 	.word	0x080051ab
 8005000:	080050e7 	.word	0x080050e7
 8005004:	080051ab 	.word	0x080051ab
 8005008:	080051ab 	.word	0x080051ab
 800500c:	080051ab 	.word	0x080051ab
 8005010:	08005129 	.word	0x08005129
 8005014:	080051ab 	.word	0x080051ab
 8005018:	080051ab 	.word	0x080051ab
 800501c:	080051ab 	.word	0x080051ab
 8005020:	08005169 	.word	0x08005169
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68b9      	ldr	r1, [r7, #8]
 800502a:	4618      	mov	r0, r3
 800502c:	f000 fabc 	bl	80055a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699a      	ldr	r2, [r3, #24]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 0208 	orr.w	r2, r2, #8
 800503e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	699a      	ldr	r2, [r3, #24]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0204 	bic.w	r2, r2, #4
 800504e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6999      	ldr	r1, [r3, #24]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	691a      	ldr	r2, [r3, #16]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	619a      	str	r2, [r3, #24]
      break;
 8005062:	e0a5      	b.n	80051b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68b9      	ldr	r1, [r7, #8]
 800506a:	4618      	mov	r0, r3
 800506c:	f000 fb36 	bl	80056dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	699a      	ldr	r2, [r3, #24]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800507e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	699a      	ldr	r2, [r3, #24]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800508e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6999      	ldr	r1, [r3, #24]
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	021a      	lsls	r2, r3, #8
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	619a      	str	r2, [r3, #24]
      break;
 80050a4:	e084      	b.n	80051b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68b9      	ldr	r1, [r7, #8]
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 fba9 	bl	8005804 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	69da      	ldr	r2, [r3, #28]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f042 0208 	orr.w	r2, r2, #8
 80050c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	69da      	ldr	r2, [r3, #28]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0204 	bic.w	r2, r2, #4
 80050d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69d9      	ldr	r1, [r3, #28]
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	691a      	ldr	r2, [r3, #16]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	430a      	orrs	r2, r1
 80050e2:	61da      	str	r2, [r3, #28]
      break;
 80050e4:	e064      	b.n	80051b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68b9      	ldr	r1, [r7, #8]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f000 fc1b 	bl	8005928 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	69da      	ldr	r2, [r3, #28]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005100:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	69da      	ldr	r2, [r3, #28]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005110:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	69d9      	ldr	r1, [r3, #28]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	021a      	lsls	r2, r3, #8
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	61da      	str	r2, [r3, #28]
      break;
 8005126:	e043      	b.n	80051b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68b9      	ldr	r1, [r7, #8]
 800512e:	4618      	mov	r0, r3
 8005130:	f000 fc8e 	bl	8005a50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0208 	orr.w	r2, r2, #8
 8005142:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 0204 	bic.w	r2, r2, #4
 8005152:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	691a      	ldr	r2, [r3, #16]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005166:	e023      	b.n	80051b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68b9      	ldr	r1, [r7, #8]
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fcd8 	bl	8005b24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005182:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005192:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	021a      	lsls	r2, r3, #8
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80051a8:	e002      	b.n	80051b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	75fb      	strb	r3, [r7, #23]
      break;
 80051ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80051b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop

080051c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d101      	bne.n	80051e0 <HAL_TIM_ConfigClockSource+0x1c>
 80051dc:	2302      	movs	r3, #2
 80051de:	e0f6      	b.n	80053ce <HAL_TIM_ConfigClockSource+0x20a>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80051fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005202:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800520a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a6f      	ldr	r2, [pc, #444]	@ (80053d8 <HAL_TIM_ConfigClockSource+0x214>)
 800521a:	4293      	cmp	r3, r2
 800521c:	f000 80c1 	beq.w	80053a2 <HAL_TIM_ConfigClockSource+0x1de>
 8005220:	4a6d      	ldr	r2, [pc, #436]	@ (80053d8 <HAL_TIM_ConfigClockSource+0x214>)
 8005222:	4293      	cmp	r3, r2
 8005224:	f200 80c6 	bhi.w	80053b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005228:	4a6c      	ldr	r2, [pc, #432]	@ (80053dc <HAL_TIM_ConfigClockSource+0x218>)
 800522a:	4293      	cmp	r3, r2
 800522c:	f000 80b9 	beq.w	80053a2 <HAL_TIM_ConfigClockSource+0x1de>
 8005230:	4a6a      	ldr	r2, [pc, #424]	@ (80053dc <HAL_TIM_ConfigClockSource+0x218>)
 8005232:	4293      	cmp	r3, r2
 8005234:	f200 80be 	bhi.w	80053b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005238:	4a69      	ldr	r2, [pc, #420]	@ (80053e0 <HAL_TIM_ConfigClockSource+0x21c>)
 800523a:	4293      	cmp	r3, r2
 800523c:	f000 80b1 	beq.w	80053a2 <HAL_TIM_ConfigClockSource+0x1de>
 8005240:	4a67      	ldr	r2, [pc, #412]	@ (80053e0 <HAL_TIM_ConfigClockSource+0x21c>)
 8005242:	4293      	cmp	r3, r2
 8005244:	f200 80b6 	bhi.w	80053b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005248:	4a66      	ldr	r2, [pc, #408]	@ (80053e4 <HAL_TIM_ConfigClockSource+0x220>)
 800524a:	4293      	cmp	r3, r2
 800524c:	f000 80a9 	beq.w	80053a2 <HAL_TIM_ConfigClockSource+0x1de>
 8005250:	4a64      	ldr	r2, [pc, #400]	@ (80053e4 <HAL_TIM_ConfigClockSource+0x220>)
 8005252:	4293      	cmp	r3, r2
 8005254:	f200 80ae 	bhi.w	80053b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005258:	4a63      	ldr	r2, [pc, #396]	@ (80053e8 <HAL_TIM_ConfigClockSource+0x224>)
 800525a:	4293      	cmp	r3, r2
 800525c:	f000 80a1 	beq.w	80053a2 <HAL_TIM_ConfigClockSource+0x1de>
 8005260:	4a61      	ldr	r2, [pc, #388]	@ (80053e8 <HAL_TIM_ConfigClockSource+0x224>)
 8005262:	4293      	cmp	r3, r2
 8005264:	f200 80a6 	bhi.w	80053b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005268:	4a60      	ldr	r2, [pc, #384]	@ (80053ec <HAL_TIM_ConfigClockSource+0x228>)
 800526a:	4293      	cmp	r3, r2
 800526c:	f000 8099 	beq.w	80053a2 <HAL_TIM_ConfigClockSource+0x1de>
 8005270:	4a5e      	ldr	r2, [pc, #376]	@ (80053ec <HAL_TIM_ConfigClockSource+0x228>)
 8005272:	4293      	cmp	r3, r2
 8005274:	f200 809e 	bhi.w	80053b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005278:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800527c:	f000 8091 	beq.w	80053a2 <HAL_TIM_ConfigClockSource+0x1de>
 8005280:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005284:	f200 8096 	bhi.w	80053b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005288:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800528c:	f000 8089 	beq.w	80053a2 <HAL_TIM_ConfigClockSource+0x1de>
 8005290:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005294:	f200 808e 	bhi.w	80053b4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005298:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800529c:	d03e      	beq.n	800531c <HAL_TIM_ConfigClockSource+0x158>
 800529e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052a2:	f200 8087 	bhi.w	80053b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80052a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052aa:	f000 8086 	beq.w	80053ba <HAL_TIM_ConfigClockSource+0x1f6>
 80052ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052b2:	d87f      	bhi.n	80053b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80052b4:	2b70      	cmp	r3, #112	@ 0x70
 80052b6:	d01a      	beq.n	80052ee <HAL_TIM_ConfigClockSource+0x12a>
 80052b8:	2b70      	cmp	r3, #112	@ 0x70
 80052ba:	d87b      	bhi.n	80053b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80052bc:	2b60      	cmp	r3, #96	@ 0x60
 80052be:	d050      	beq.n	8005362 <HAL_TIM_ConfigClockSource+0x19e>
 80052c0:	2b60      	cmp	r3, #96	@ 0x60
 80052c2:	d877      	bhi.n	80053b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80052c4:	2b50      	cmp	r3, #80	@ 0x50
 80052c6:	d03c      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x17e>
 80052c8:	2b50      	cmp	r3, #80	@ 0x50
 80052ca:	d873      	bhi.n	80053b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80052cc:	2b40      	cmp	r3, #64	@ 0x40
 80052ce:	d058      	beq.n	8005382 <HAL_TIM_ConfigClockSource+0x1be>
 80052d0:	2b40      	cmp	r3, #64	@ 0x40
 80052d2:	d86f      	bhi.n	80053b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80052d4:	2b30      	cmp	r3, #48	@ 0x30
 80052d6:	d064      	beq.n	80053a2 <HAL_TIM_ConfigClockSource+0x1de>
 80052d8:	2b30      	cmp	r3, #48	@ 0x30
 80052da:	d86b      	bhi.n	80053b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80052dc:	2b20      	cmp	r3, #32
 80052de:	d060      	beq.n	80053a2 <HAL_TIM_ConfigClockSource+0x1de>
 80052e0:	2b20      	cmp	r3, #32
 80052e2:	d867      	bhi.n	80053b4 <HAL_TIM_ConfigClockSource+0x1f0>
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d05c      	beq.n	80053a2 <HAL_TIM_ConfigClockSource+0x1de>
 80052e8:	2b10      	cmp	r3, #16
 80052ea:	d05a      	beq.n	80053a2 <HAL_TIM_ConfigClockSource+0x1de>
 80052ec:	e062      	b.n	80053b4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052fe:	f000 fcf9 	bl	8005cf4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005310:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	609a      	str	r2, [r3, #8]
      break;
 800531a:	e04f      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800532c:	f000 fce2 	bl	8005cf4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689a      	ldr	r2, [r3, #8]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800533e:	609a      	str	r2, [r3, #8]
      break;
 8005340:	e03c      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800534e:	461a      	mov	r2, r3
 8005350:	f000 fc54 	bl	8005bfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2150      	movs	r1, #80	@ 0x50
 800535a:	4618      	mov	r0, r3
 800535c:	f000 fcad 	bl	8005cba <TIM_ITRx_SetConfig>
      break;
 8005360:	e02c      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800536e:	461a      	mov	r2, r3
 8005370:	f000 fc73 	bl	8005c5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2160      	movs	r1, #96	@ 0x60
 800537a:	4618      	mov	r0, r3
 800537c:	f000 fc9d 	bl	8005cba <TIM_ITRx_SetConfig>
      break;
 8005380:	e01c      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800538e:	461a      	mov	r2, r3
 8005390:	f000 fc34 	bl	8005bfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2140      	movs	r1, #64	@ 0x40
 800539a:	4618      	mov	r0, r3
 800539c:	f000 fc8d 	bl	8005cba <TIM_ITRx_SetConfig>
      break;
 80053a0:	e00c      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4619      	mov	r1, r3
 80053ac:	4610      	mov	r0, r2
 80053ae:	f000 fc84 	bl	8005cba <TIM_ITRx_SetConfig>
      break;
 80053b2:	e003      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	73fb      	strb	r3, [r7, #15]
      break;
 80053b8:	e000      	b.n	80053bc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80053ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	00100070 	.word	0x00100070
 80053dc:	00100060 	.word	0x00100060
 80053e0:	00100050 	.word	0x00100050
 80053e4:	00100040 	.word	0x00100040
 80053e8:	00100030 	.word	0x00100030
 80053ec:	00100020 	.word	0x00100020

080053f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a4c      	ldr	r2, [pc, #304]	@ (8005584 <TIM_Base_SetConfig+0x144>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d017      	beq.n	8005488 <TIM_Base_SetConfig+0x48>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800545e:	d013      	beq.n	8005488 <TIM_Base_SetConfig+0x48>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a49      	ldr	r2, [pc, #292]	@ (8005588 <TIM_Base_SetConfig+0x148>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d00f      	beq.n	8005488 <TIM_Base_SetConfig+0x48>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a48      	ldr	r2, [pc, #288]	@ (800558c <TIM_Base_SetConfig+0x14c>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d00b      	beq.n	8005488 <TIM_Base_SetConfig+0x48>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a47      	ldr	r2, [pc, #284]	@ (8005590 <TIM_Base_SetConfig+0x150>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d007      	beq.n	8005488 <TIM_Base_SetConfig+0x48>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a46      	ldr	r2, [pc, #280]	@ (8005594 <TIM_Base_SetConfig+0x154>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d003      	beq.n	8005488 <TIM_Base_SetConfig+0x48>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a45      	ldr	r2, [pc, #276]	@ (8005598 <TIM_Base_SetConfig+0x158>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d108      	bne.n	800549a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800548e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a39      	ldr	r2, [pc, #228]	@ (8005584 <TIM_Base_SetConfig+0x144>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d023      	beq.n	80054ea <TIM_Base_SetConfig+0xaa>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054a8:	d01f      	beq.n	80054ea <TIM_Base_SetConfig+0xaa>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a36      	ldr	r2, [pc, #216]	@ (8005588 <TIM_Base_SetConfig+0x148>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d01b      	beq.n	80054ea <TIM_Base_SetConfig+0xaa>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a35      	ldr	r2, [pc, #212]	@ (800558c <TIM_Base_SetConfig+0x14c>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d017      	beq.n	80054ea <TIM_Base_SetConfig+0xaa>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a34      	ldr	r2, [pc, #208]	@ (8005590 <TIM_Base_SetConfig+0x150>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d013      	beq.n	80054ea <TIM_Base_SetConfig+0xaa>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a33      	ldr	r2, [pc, #204]	@ (8005594 <TIM_Base_SetConfig+0x154>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d00f      	beq.n	80054ea <TIM_Base_SetConfig+0xaa>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a33      	ldr	r2, [pc, #204]	@ (800559c <TIM_Base_SetConfig+0x15c>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d00b      	beq.n	80054ea <TIM_Base_SetConfig+0xaa>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a32      	ldr	r2, [pc, #200]	@ (80055a0 <TIM_Base_SetConfig+0x160>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d007      	beq.n	80054ea <TIM_Base_SetConfig+0xaa>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a31      	ldr	r2, [pc, #196]	@ (80055a4 <TIM_Base_SetConfig+0x164>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d003      	beq.n	80054ea <TIM_Base_SetConfig+0xaa>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a2c      	ldr	r2, [pc, #176]	@ (8005598 <TIM_Base_SetConfig+0x158>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d108      	bne.n	80054fc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	4313      	orrs	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a18      	ldr	r2, [pc, #96]	@ (8005584 <TIM_Base_SetConfig+0x144>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d013      	beq.n	8005550 <TIM_Base_SetConfig+0x110>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a1a      	ldr	r2, [pc, #104]	@ (8005594 <TIM_Base_SetConfig+0x154>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d00f      	beq.n	8005550 <TIM_Base_SetConfig+0x110>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a1a      	ldr	r2, [pc, #104]	@ (800559c <TIM_Base_SetConfig+0x15c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d00b      	beq.n	8005550 <TIM_Base_SetConfig+0x110>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a19      	ldr	r2, [pc, #100]	@ (80055a0 <TIM_Base_SetConfig+0x160>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d007      	beq.n	8005550 <TIM_Base_SetConfig+0x110>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a18      	ldr	r2, [pc, #96]	@ (80055a4 <TIM_Base_SetConfig+0x164>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d003      	beq.n	8005550 <TIM_Base_SetConfig+0x110>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a13      	ldr	r2, [pc, #76]	@ (8005598 <TIM_Base_SetConfig+0x158>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d103      	bne.n	8005558 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	691a      	ldr	r2, [r3, #16]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b01      	cmp	r3, #1
 8005568:	d105      	bne.n	8005576 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	f023 0201 	bic.w	r2, r3, #1
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	611a      	str	r2, [r3, #16]
  }
}
 8005576:	bf00      	nop
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	40012c00 	.word	0x40012c00
 8005588:	40000400 	.word	0x40000400
 800558c:	40000800 	.word	0x40000800
 8005590:	40000c00 	.word	0x40000c00
 8005594:	40013400 	.word	0x40013400
 8005598:	40015000 	.word	0x40015000
 800559c:	40014000 	.word	0x40014000
 80055a0:	40014400 	.word	0x40014400
 80055a4:	40014800 	.word	0x40014800

080055a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a1b      	ldr	r3, [r3, #32]
 80055bc:	f023 0201 	bic.w	r2, r3, #1
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f023 0303 	bic.w	r3, r3, #3
 80055e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f023 0302 	bic.w	r3, r3, #2
 80055f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a30      	ldr	r2, [pc, #192]	@ (80056c4 <TIM_OC1_SetConfig+0x11c>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d013      	beq.n	8005630 <TIM_OC1_SetConfig+0x88>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a2f      	ldr	r2, [pc, #188]	@ (80056c8 <TIM_OC1_SetConfig+0x120>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d00f      	beq.n	8005630 <TIM_OC1_SetConfig+0x88>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a2e      	ldr	r2, [pc, #184]	@ (80056cc <TIM_OC1_SetConfig+0x124>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d00b      	beq.n	8005630 <TIM_OC1_SetConfig+0x88>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a2d      	ldr	r2, [pc, #180]	@ (80056d0 <TIM_OC1_SetConfig+0x128>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d007      	beq.n	8005630 <TIM_OC1_SetConfig+0x88>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a2c      	ldr	r2, [pc, #176]	@ (80056d4 <TIM_OC1_SetConfig+0x12c>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d003      	beq.n	8005630 <TIM_OC1_SetConfig+0x88>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a2b      	ldr	r2, [pc, #172]	@ (80056d8 <TIM_OC1_SetConfig+0x130>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d10c      	bne.n	800564a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f023 0308 	bic.w	r3, r3, #8
 8005636:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	4313      	orrs	r3, r2
 8005640:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f023 0304 	bic.w	r3, r3, #4
 8005648:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a1d      	ldr	r2, [pc, #116]	@ (80056c4 <TIM_OC1_SetConfig+0x11c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d013      	beq.n	800567a <TIM_OC1_SetConfig+0xd2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a1c      	ldr	r2, [pc, #112]	@ (80056c8 <TIM_OC1_SetConfig+0x120>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d00f      	beq.n	800567a <TIM_OC1_SetConfig+0xd2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a1b      	ldr	r2, [pc, #108]	@ (80056cc <TIM_OC1_SetConfig+0x124>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d00b      	beq.n	800567a <TIM_OC1_SetConfig+0xd2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a1a      	ldr	r2, [pc, #104]	@ (80056d0 <TIM_OC1_SetConfig+0x128>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d007      	beq.n	800567a <TIM_OC1_SetConfig+0xd2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a19      	ldr	r2, [pc, #100]	@ (80056d4 <TIM_OC1_SetConfig+0x12c>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d003      	beq.n	800567a <TIM_OC1_SetConfig+0xd2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a18      	ldr	r2, [pc, #96]	@ (80056d8 <TIM_OC1_SetConfig+0x130>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d111      	bne.n	800569e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	4313      	orrs	r3, r2
 8005692:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	4313      	orrs	r3, r2
 800569c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685a      	ldr	r2, [r3, #4]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	621a      	str	r2, [r3, #32]
}
 80056b8:	bf00      	nop
 80056ba:	371c      	adds	r7, #28
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	40012c00 	.word	0x40012c00
 80056c8:	40013400 	.word	0x40013400
 80056cc:	40014000 	.word	0x40014000
 80056d0:	40014400 	.word	0x40014400
 80056d4:	40014800 	.word	0x40014800
 80056d8:	40015000 	.word	0x40015000

080056dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056dc:	b480      	push	{r7}
 80056de:	b087      	sub	sp, #28
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	f023 0210 	bic.w	r2, r3, #16
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800570a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800570e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	021b      	lsls	r3, r3, #8
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	4313      	orrs	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f023 0320 	bic.w	r3, r3, #32
 800572a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	011b      	lsls	r3, r3, #4
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	4313      	orrs	r3, r2
 8005736:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a2c      	ldr	r2, [pc, #176]	@ (80057ec <TIM_OC2_SetConfig+0x110>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d007      	beq.n	8005750 <TIM_OC2_SetConfig+0x74>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a2b      	ldr	r2, [pc, #172]	@ (80057f0 <TIM_OC2_SetConfig+0x114>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d003      	beq.n	8005750 <TIM_OC2_SetConfig+0x74>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a2a      	ldr	r2, [pc, #168]	@ (80057f4 <TIM_OC2_SetConfig+0x118>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d10d      	bne.n	800576c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	011b      	lsls	r3, r3, #4
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	4313      	orrs	r3, r2
 8005762:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800576a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a1f      	ldr	r2, [pc, #124]	@ (80057ec <TIM_OC2_SetConfig+0x110>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d013      	beq.n	800579c <TIM_OC2_SetConfig+0xc0>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a1e      	ldr	r2, [pc, #120]	@ (80057f0 <TIM_OC2_SetConfig+0x114>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d00f      	beq.n	800579c <TIM_OC2_SetConfig+0xc0>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a1e      	ldr	r2, [pc, #120]	@ (80057f8 <TIM_OC2_SetConfig+0x11c>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d00b      	beq.n	800579c <TIM_OC2_SetConfig+0xc0>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a1d      	ldr	r2, [pc, #116]	@ (80057fc <TIM_OC2_SetConfig+0x120>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d007      	beq.n	800579c <TIM_OC2_SetConfig+0xc0>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a1c      	ldr	r2, [pc, #112]	@ (8005800 <TIM_OC2_SetConfig+0x124>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d003      	beq.n	800579c <TIM_OC2_SetConfig+0xc0>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a17      	ldr	r2, [pc, #92]	@ (80057f4 <TIM_OC2_SetConfig+0x118>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d113      	bne.n	80057c4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	621a      	str	r2, [r3, #32]
}
 80057de:	bf00      	nop
 80057e0:	371c      	adds	r7, #28
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	40012c00 	.word	0x40012c00
 80057f0:	40013400 	.word	0x40013400
 80057f4:	40015000 	.word	0x40015000
 80057f8:	40014000 	.word	0x40014000
 80057fc:	40014400 	.word	0x40014400
 8005800:	40014800 	.word	0x40014800

08005804 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005804:	b480      	push	{r7}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f023 0303 	bic.w	r3, r3, #3
 800583e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005850:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	021b      	lsls	r3, r3, #8
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	4313      	orrs	r3, r2
 800585c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a2b      	ldr	r2, [pc, #172]	@ (8005910 <TIM_OC3_SetConfig+0x10c>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d007      	beq.n	8005876 <TIM_OC3_SetConfig+0x72>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a2a      	ldr	r2, [pc, #168]	@ (8005914 <TIM_OC3_SetConfig+0x110>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d003      	beq.n	8005876 <TIM_OC3_SetConfig+0x72>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a29      	ldr	r2, [pc, #164]	@ (8005918 <TIM_OC3_SetConfig+0x114>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d10d      	bne.n	8005892 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800587c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	021b      	lsls	r3, r3, #8
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	4313      	orrs	r3, r2
 8005888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a1e      	ldr	r2, [pc, #120]	@ (8005910 <TIM_OC3_SetConfig+0x10c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d013      	beq.n	80058c2 <TIM_OC3_SetConfig+0xbe>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a1d      	ldr	r2, [pc, #116]	@ (8005914 <TIM_OC3_SetConfig+0x110>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d00f      	beq.n	80058c2 <TIM_OC3_SetConfig+0xbe>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a1d      	ldr	r2, [pc, #116]	@ (800591c <TIM_OC3_SetConfig+0x118>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d00b      	beq.n	80058c2 <TIM_OC3_SetConfig+0xbe>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a1c      	ldr	r2, [pc, #112]	@ (8005920 <TIM_OC3_SetConfig+0x11c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d007      	beq.n	80058c2 <TIM_OC3_SetConfig+0xbe>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a1b      	ldr	r2, [pc, #108]	@ (8005924 <TIM_OC3_SetConfig+0x120>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d003      	beq.n	80058c2 <TIM_OC3_SetConfig+0xbe>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a16      	ldr	r2, [pc, #88]	@ (8005918 <TIM_OC3_SetConfig+0x114>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d113      	bne.n	80058ea <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	011b      	lsls	r3, r3, #4
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	4313      	orrs	r3, r2
 80058dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	011b      	lsls	r3, r3, #4
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	621a      	str	r2, [r3, #32]
}
 8005904:	bf00      	nop
 8005906:	371c      	adds	r7, #28
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr
 8005910:	40012c00 	.word	0x40012c00
 8005914:	40013400 	.word	0x40013400
 8005918:	40015000 	.word	0x40015000
 800591c:	40014000 	.word	0x40014000
 8005920:	40014400 	.word	0x40014400
 8005924:	40014800 	.word	0x40014800

08005928 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005956:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800595a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	021b      	lsls	r3, r3, #8
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	4313      	orrs	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005976:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	031b      	lsls	r3, r3, #12
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	4313      	orrs	r3, r2
 8005982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a2c      	ldr	r2, [pc, #176]	@ (8005a38 <TIM_OC4_SetConfig+0x110>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d007      	beq.n	800599c <TIM_OC4_SetConfig+0x74>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a2b      	ldr	r2, [pc, #172]	@ (8005a3c <TIM_OC4_SetConfig+0x114>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d003      	beq.n	800599c <TIM_OC4_SetConfig+0x74>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a2a      	ldr	r2, [pc, #168]	@ (8005a40 <TIM_OC4_SetConfig+0x118>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d10d      	bne.n	80059b8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80059a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	031b      	lsls	r3, r3, #12
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a1f      	ldr	r2, [pc, #124]	@ (8005a38 <TIM_OC4_SetConfig+0x110>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d013      	beq.n	80059e8 <TIM_OC4_SetConfig+0xc0>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a1e      	ldr	r2, [pc, #120]	@ (8005a3c <TIM_OC4_SetConfig+0x114>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d00f      	beq.n	80059e8 <TIM_OC4_SetConfig+0xc0>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a1e      	ldr	r2, [pc, #120]	@ (8005a44 <TIM_OC4_SetConfig+0x11c>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d00b      	beq.n	80059e8 <TIM_OC4_SetConfig+0xc0>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a1d      	ldr	r2, [pc, #116]	@ (8005a48 <TIM_OC4_SetConfig+0x120>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d007      	beq.n	80059e8 <TIM_OC4_SetConfig+0xc0>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a1c      	ldr	r2, [pc, #112]	@ (8005a4c <TIM_OC4_SetConfig+0x124>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d003      	beq.n	80059e8 <TIM_OC4_SetConfig+0xc0>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a17      	ldr	r2, [pc, #92]	@ (8005a40 <TIM_OC4_SetConfig+0x118>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d113      	bne.n	8005a10 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059ee:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80059f6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	019b      	lsls	r3, r3, #6
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	019b      	lsls	r3, r3, #6
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	621a      	str	r2, [r3, #32]
}
 8005a2a:	bf00      	nop
 8005a2c:	371c      	adds	r7, #28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40012c00 	.word	0x40012c00
 8005a3c:	40013400 	.word	0x40013400
 8005a40:	40015000 	.word	0x40015000
 8005a44:	40014000 	.word	0x40014000
 8005a48:	40014400 	.word	0x40014400
 8005a4c:	40014800 	.word	0x40014800

08005a50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a1b      	ldr	r3, [r3, #32]
 8005a64:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005a94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	041b      	lsls	r3, r3, #16
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a19      	ldr	r2, [pc, #100]	@ (8005b0c <TIM_OC5_SetConfig+0xbc>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d013      	beq.n	8005ad2 <TIM_OC5_SetConfig+0x82>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a18      	ldr	r2, [pc, #96]	@ (8005b10 <TIM_OC5_SetConfig+0xc0>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d00f      	beq.n	8005ad2 <TIM_OC5_SetConfig+0x82>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a17      	ldr	r2, [pc, #92]	@ (8005b14 <TIM_OC5_SetConfig+0xc4>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00b      	beq.n	8005ad2 <TIM_OC5_SetConfig+0x82>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a16      	ldr	r2, [pc, #88]	@ (8005b18 <TIM_OC5_SetConfig+0xc8>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d007      	beq.n	8005ad2 <TIM_OC5_SetConfig+0x82>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a15      	ldr	r2, [pc, #84]	@ (8005b1c <TIM_OC5_SetConfig+0xcc>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d003      	beq.n	8005ad2 <TIM_OC5_SetConfig+0x82>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a14      	ldr	r2, [pc, #80]	@ (8005b20 <TIM_OC5_SetConfig+0xd0>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d109      	bne.n	8005ae6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	021b      	lsls	r3, r3, #8
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685a      	ldr	r2, [r3, #4]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	621a      	str	r2, [r3, #32]
}
 8005b00:	bf00      	nop
 8005b02:	371c      	adds	r7, #28
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	40012c00 	.word	0x40012c00
 8005b10:	40013400 	.word	0x40013400
 8005b14:	40014000 	.word	0x40014000
 8005b18:	40014400 	.word	0x40014400
 8005b1c:	40014800 	.word	0x40014800
 8005b20:	40015000 	.word	0x40015000

08005b24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b087      	sub	sp, #28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	021b      	lsls	r3, r3, #8
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005b6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	051b      	lsls	r3, r3, #20
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a1a      	ldr	r2, [pc, #104]	@ (8005be4 <TIM_OC6_SetConfig+0xc0>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d013      	beq.n	8005ba8 <TIM_OC6_SetConfig+0x84>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a19      	ldr	r2, [pc, #100]	@ (8005be8 <TIM_OC6_SetConfig+0xc4>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d00f      	beq.n	8005ba8 <TIM_OC6_SetConfig+0x84>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a18      	ldr	r2, [pc, #96]	@ (8005bec <TIM_OC6_SetConfig+0xc8>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d00b      	beq.n	8005ba8 <TIM_OC6_SetConfig+0x84>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a17      	ldr	r2, [pc, #92]	@ (8005bf0 <TIM_OC6_SetConfig+0xcc>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d007      	beq.n	8005ba8 <TIM_OC6_SetConfig+0x84>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a16      	ldr	r2, [pc, #88]	@ (8005bf4 <TIM_OC6_SetConfig+0xd0>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d003      	beq.n	8005ba8 <TIM_OC6_SetConfig+0x84>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a15      	ldr	r2, [pc, #84]	@ (8005bf8 <TIM_OC6_SetConfig+0xd4>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d109      	bne.n	8005bbc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005bae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	029b      	lsls	r3, r3, #10
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	621a      	str	r2, [r3, #32]
}
 8005bd6:	bf00      	nop
 8005bd8:	371c      	adds	r7, #28
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	40012c00 	.word	0x40012c00
 8005be8:	40013400 	.word	0x40013400
 8005bec:	40014000 	.word	0x40014000
 8005bf0:	40014400 	.word	0x40014400
 8005bf4:	40014800 	.word	0x40014800
 8005bf8:	40015000 	.word	0x40015000

08005bfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	f023 0201 	bic.w	r2, r3, #1
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	011b      	lsls	r3, r3, #4
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	f023 030a 	bic.w	r3, r3, #10
 8005c38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	621a      	str	r2, [r3, #32]
}
 8005c4e:	bf00      	nop
 8005c50:	371c      	adds	r7, #28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b087      	sub	sp, #28
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	60f8      	str	r0, [r7, #12]
 8005c62:	60b9      	str	r1, [r7, #8]
 8005c64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	f023 0210 	bic.w	r2, r3, #16
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	031b      	lsls	r3, r3, #12
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c96:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	011b      	lsls	r3, r3, #4
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	621a      	str	r2, [r3, #32]
}
 8005cae:	bf00      	nop
 8005cb0:	371c      	adds	r7, #28
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b085      	sub	sp, #20
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
 8005cc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005cd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	f043 0307 	orr.w	r3, r3, #7
 8005ce0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	609a      	str	r2, [r3, #8]
}
 8005ce8:	bf00      	nop
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b087      	sub	sp, #28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
 8005d00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	021a      	lsls	r2, r3, #8
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	431a      	orrs	r2, r3
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	609a      	str	r2, [r3, #8]
}
 8005d28:	bf00      	nop
 8005d2a:	371c      	adds	r7, #28
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d101      	bne.n	8005d4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d48:	2302      	movs	r3, #2
 8005d4a:	e074      	b.n	8005e36 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2202      	movs	r2, #2
 8005d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a34      	ldr	r2, [pc, #208]	@ (8005e44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d009      	beq.n	8005d8a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a33      	ldr	r2, [pc, #204]	@ (8005e48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d004      	beq.n	8005d8a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a31      	ldr	r2, [pc, #196]	@ (8005e4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d108      	bne.n	8005d9c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005d90:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005da6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a21      	ldr	r2, [pc, #132]	@ (8005e44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d022      	beq.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dcc:	d01d      	beq.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a1f      	ldr	r2, [pc, #124]	@ (8005e50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d018      	beq.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a1d      	ldr	r2, [pc, #116]	@ (8005e54 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d013      	beq.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a1c      	ldr	r2, [pc, #112]	@ (8005e58 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d00e      	beq.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a15      	ldr	r2, [pc, #84]	@ (8005e48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d009      	beq.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a18      	ldr	r2, [pc, #96]	@ (8005e5c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d004      	beq.n	8005e0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a11      	ldr	r2, [pc, #68]	@ (8005e4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d10c      	bne.n	8005e24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	40012c00 	.word	0x40012c00
 8005e48:	40013400 	.word	0x40013400
 8005e4c:	40015000 	.word	0x40015000
 8005e50:	40000400 	.word	0x40000400
 8005e54:	40000800 	.word	0x40000800
 8005e58:	40000c00 	.word	0x40000c00
 8005e5c:	40014000 	.word	0x40014000

08005e60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e042      	b.n	8005f84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d106      	bne.n	8005f16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7fc fc93 	bl	800283c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2224      	movs	r2, #36	@ 0x24
 8005f1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 0201 	bic.w	r2, r2, #1
 8005f2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d002      	beq.n	8005f3c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f001 f806 	bl	8006f48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fd07 	bl	8006950 <UART_SetConfig>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d101      	bne.n	8005f4c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e01b      	b.n	8005f84 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689a      	ldr	r2, [r3, #8]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f042 0201 	orr.w	r2, r2, #1
 8005f7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f001 f885 	bl	800708c <UART_CheckIdleState>
 8005f82:	4603      	mov	r3, r0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b08a      	sub	sp, #40	@ 0x28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	4613      	mov	r3, r2
 8005f98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fa0:	2b20      	cmp	r3, #32
 8005fa2:	d167      	bne.n	8006074 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d002      	beq.n	8005fb0 <HAL_UART_Transmit_DMA+0x24>
 8005faa:	88fb      	ldrh	r3, [r7, #6]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d101      	bne.n	8005fb4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e060      	b.n	8006076 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	88fa      	ldrh	r2, [r7, #6]
 8005fbe:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	88fa      	ldrh	r2, [r7, #6]
 8005fc6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2221      	movs	r2, #33	@ 0x21
 8005fd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d028      	beq.n	8006034 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005fe6:	4a26      	ldr	r2, [pc, #152]	@ (8006080 <HAL_UART_Transmit_DMA+0xf4>)
 8005fe8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005fee:	4a25      	ldr	r2, [pc, #148]	@ (8006084 <HAL_UART_Transmit_DMA+0xf8>)
 8005ff0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ff6:	4a24      	ldr	r2, [pc, #144]	@ (8006088 <HAL_UART_Transmit_DMA+0xfc>)
 8005ff8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ffe:	2200      	movs	r2, #0
 8006000:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800600a:	4619      	mov	r1, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	3328      	adds	r3, #40	@ 0x28
 8006012:	461a      	mov	r2, r3
 8006014:	88fb      	ldrh	r3, [r7, #6]
 8006016:	f7fd f82d 	bl	8003074 <HAL_DMA_Start_IT>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d009      	beq.n	8006034 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2210      	movs	r2, #16
 8006024:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2220      	movs	r2, #32
 800602c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e020      	b.n	8006076 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2240      	movs	r2, #64	@ 0x40
 800603a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	3308      	adds	r3, #8
 8006042:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	e853 3f00 	ldrex	r3, [r3]
 800604a:	613b      	str	r3, [r7, #16]
   return(result);
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006052:	627b      	str	r3, [r7, #36]	@ 0x24
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	3308      	adds	r3, #8
 800605a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800605c:	623a      	str	r2, [r7, #32]
 800605e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006060:	69f9      	ldr	r1, [r7, #28]
 8006062:	6a3a      	ldr	r2, [r7, #32]
 8006064:	e841 2300 	strex	r3, r2, [r1]
 8006068:	61bb      	str	r3, [r7, #24]
   return(result);
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1e5      	bne.n	800603c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006070:	2300      	movs	r3, #0
 8006072:	e000      	b.n	8006076 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006074:	2302      	movs	r3, #2
  }
}
 8006076:	4618      	mov	r0, r3
 8006078:	3728      	adds	r7, #40	@ 0x28
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	08007557 	.word	0x08007557
 8006084:	080075f1 	.word	0x080075f1
 8006088:	08007777 	.word	0x08007777

0800608c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08a      	sub	sp, #40	@ 0x28
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	4613      	mov	r3, r2
 8006098:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060a0:	2b20      	cmp	r3, #32
 80060a2:	d137      	bne.n	8006114 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d002      	beq.n	80060b0 <HAL_UART_Receive_DMA+0x24>
 80060aa:	88fb      	ldrh	r3, [r7, #6]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d101      	bne.n	80060b4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e030      	b.n	8006116 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a18      	ldr	r2, [pc, #96]	@ (8006120 <HAL_UART_Receive_DMA+0x94>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d01f      	beq.n	8006104 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d018      	beq.n	8006104 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	e853 3f00 	ldrex	r3, [r3]
 80060de:	613b      	str	r3, [r7, #16]
   return(result);
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80060e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	461a      	mov	r2, r3
 80060ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f0:	623b      	str	r3, [r7, #32]
 80060f2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f4:	69f9      	ldr	r1, [r7, #28]
 80060f6:	6a3a      	ldr	r2, [r7, #32]
 80060f8:	e841 2300 	strex	r3, r2, [r1]
 80060fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1e6      	bne.n	80060d2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006104:	88fb      	ldrh	r3, [r7, #6]
 8006106:	461a      	mov	r2, r3
 8006108:	68b9      	ldr	r1, [r7, #8]
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f001 f8d6 	bl	80072bc <UART_Start_Receive_DMA>
 8006110:	4603      	mov	r3, r0
 8006112:	e000      	b.n	8006116 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006114:	2302      	movs	r3, #2
  }
}
 8006116:	4618      	mov	r0, r3
 8006118:	3728      	adds	r7, #40	@ 0x28
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	40008000 	.word	0x40008000

08006124 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b090      	sub	sp, #64	@ 0x40
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006132:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800613a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006146:	2b80      	cmp	r3, #128	@ 0x80
 8006148:	d139      	bne.n	80061be <HAL_UART_DMAStop+0x9a>
 800614a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800614c:	2b21      	cmp	r3, #33	@ 0x21
 800614e:	d136      	bne.n	80061be <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3308      	adds	r3, #8
 8006156:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006158:	6a3b      	ldr	r3, [r7, #32]
 800615a:	e853 3f00 	ldrex	r3, [r3]
 800615e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006166:	637b      	str	r3, [r7, #52]	@ 0x34
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	3308      	adds	r3, #8
 800616e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006170:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006172:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006174:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006176:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006178:	e841 2300 	strex	r3, r2, [r1]
 800617c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800617e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1e5      	bne.n	8006150 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006188:	2b00      	cmp	r3, #0
 800618a:	d015      	beq.n	80061b8 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006190:	4618      	mov	r0, r3
 8006192:	f7fc ffea 	bl	800316a <HAL_DMA_Abort>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00d      	beq.n	80061b8 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7fd f951 	bl	8003448 <HAL_DMA_GetError>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b20      	cmp	r3, #32
 80061aa:	d105      	bne.n	80061b8 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2210      	movs	r2, #16
 80061b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e047      	b.n	8006248 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f001 f925 	bl	8007408 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061c8:	2b40      	cmp	r3, #64	@ 0x40
 80061ca:	d13c      	bne.n	8006246 <HAL_UART_DMAStop+0x122>
 80061cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ce:	2b22      	cmp	r3, #34	@ 0x22
 80061d0:	d139      	bne.n	8006246 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	3308      	adds	r3, #8
 80061d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	e853 3f00 	ldrex	r3, [r3]
 80061e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	3308      	adds	r3, #8
 80061f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061f2:	61ba      	str	r2, [r7, #24]
 80061f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f6:	6979      	ldr	r1, [r7, #20]
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	e841 2300 	strex	r3, r2, [r1]
 80061fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1e5      	bne.n	80061d2 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800620c:	2b00      	cmp	r3, #0
 800620e:	d017      	beq.n	8006240 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006216:	4618      	mov	r0, r3
 8006218:	f7fc ffa7 	bl	800316a <HAL_DMA_Abort>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00e      	beq.n	8006240 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006228:	4618      	mov	r0, r3
 800622a:	f7fd f90d 	bl	8003448 <HAL_DMA_GetError>
 800622e:	4603      	mov	r3, r0
 8006230:	2b20      	cmp	r3, #32
 8006232:	d105      	bne.n	8006240 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2210      	movs	r2, #16
 8006238:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e003      	b.n	8006248 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f001 f922 	bl	800748a <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3740      	adds	r7, #64	@ 0x40
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b0ba      	sub	sp, #232	@ 0xe8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006276:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800627a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800627e:	4013      	ands	r3, r2
 8006280:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006284:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006288:	2b00      	cmp	r3, #0
 800628a:	d11b      	bne.n	80062c4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800628c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006290:	f003 0320 	and.w	r3, r3, #32
 8006294:	2b00      	cmp	r3, #0
 8006296:	d015      	beq.n	80062c4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800629c:	f003 0320 	and.w	r3, r3, #32
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d105      	bne.n	80062b0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80062a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d009      	beq.n	80062c4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f000 8300 	beq.w	80068ba <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	4798      	blx	r3
      }
      return;
 80062c2:	e2fa      	b.n	80068ba <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80062c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 8123 	beq.w	8006514 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80062ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80062d2:	4b8d      	ldr	r3, [pc, #564]	@ (8006508 <HAL_UART_IRQHandler+0x2b8>)
 80062d4:	4013      	ands	r3, r2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d106      	bne.n	80062e8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80062da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80062de:	4b8b      	ldr	r3, [pc, #556]	@ (800650c <HAL_UART_IRQHandler+0x2bc>)
 80062e0:	4013      	ands	r3, r2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f000 8116 	beq.w	8006514 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80062e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d011      	beq.n	8006318 <HAL_UART_IRQHandler+0xc8>
 80062f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00b      	beq.n	8006318 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2201      	movs	r2, #1
 8006306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800630e:	f043 0201 	orr.w	r2, r3, #1
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800631c:	f003 0302 	and.w	r3, r3, #2
 8006320:	2b00      	cmp	r3, #0
 8006322:	d011      	beq.n	8006348 <HAL_UART_IRQHandler+0xf8>
 8006324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00b      	beq.n	8006348 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2202      	movs	r2, #2
 8006336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800633e:	f043 0204 	orr.w	r2, r3, #4
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800634c:	f003 0304 	and.w	r3, r3, #4
 8006350:	2b00      	cmp	r3, #0
 8006352:	d011      	beq.n	8006378 <HAL_UART_IRQHandler+0x128>
 8006354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006358:	f003 0301 	and.w	r3, r3, #1
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00b      	beq.n	8006378 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2204      	movs	r2, #4
 8006366:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800636e:	f043 0202 	orr.w	r2, r3, #2
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800637c:	f003 0308 	and.w	r3, r3, #8
 8006380:	2b00      	cmp	r3, #0
 8006382:	d017      	beq.n	80063b4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006388:	f003 0320 	and.w	r3, r3, #32
 800638c:	2b00      	cmp	r3, #0
 800638e:	d105      	bne.n	800639c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006390:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006394:	4b5c      	ldr	r3, [pc, #368]	@ (8006508 <HAL_UART_IRQHandler+0x2b8>)
 8006396:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00b      	beq.n	80063b4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2208      	movs	r2, #8
 80063a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063aa:	f043 0208 	orr.w	r2, r3, #8
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80063b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d012      	beq.n	80063e6 <HAL_UART_IRQHandler+0x196>
 80063c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00c      	beq.n	80063e6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80063d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063dc:	f043 0220 	orr.w	r2, r3, #32
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f000 8266 	beq.w	80068be <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80063f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063f6:	f003 0320 	and.w	r3, r3, #32
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d013      	beq.n	8006426 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80063fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006402:	f003 0320 	and.w	r3, r3, #32
 8006406:	2b00      	cmp	r3, #0
 8006408:	d105      	bne.n	8006416 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800640a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800640e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d007      	beq.n	8006426 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800642c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800643a:	2b40      	cmp	r3, #64	@ 0x40
 800643c:	d005      	beq.n	800644a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800643e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006442:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006446:	2b00      	cmp	r3, #0
 8006448:	d054      	beq.n	80064f4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f001 f81d 	bl	800748a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800645a:	2b40      	cmp	r3, #64	@ 0x40
 800645c:	d146      	bne.n	80064ec <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	3308      	adds	r3, #8
 8006464:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006468:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800646c:	e853 3f00 	ldrex	r3, [r3]
 8006470:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006474:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006478:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800647c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	3308      	adds	r3, #8
 8006486:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800648a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800648e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006492:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006496:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800649a:	e841 2300 	strex	r3, r2, [r1]
 800649e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80064a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1d9      	bne.n	800645e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d017      	beq.n	80064e4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064ba:	4a15      	ldr	r2, [pc, #84]	@ (8006510 <HAL_UART_IRQHandler+0x2c0>)
 80064bc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7fc fea9 	bl	800321c <HAL_DMA_Abort_IT>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d019      	beq.n	8006504 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80064de:	4610      	mov	r0, r2
 80064e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064e2:	e00f      	b.n	8006504 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 fa1d 	bl	8006924 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ea:	e00b      	b.n	8006504 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 fa19 	bl	8006924 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f2:	e007      	b.n	8006504 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 fa15 	bl	8006924 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006502:	e1dc      	b.n	80068be <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006504:	bf00      	nop
    return;
 8006506:	e1da      	b.n	80068be <HAL_UART_IRQHandler+0x66e>
 8006508:	10000001 	.word	0x10000001
 800650c:	04000120 	.word	0x04000120
 8006510:	080077f7 	.word	0x080077f7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006518:	2b01      	cmp	r3, #1
 800651a:	f040 8170 	bne.w	80067fe <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800651e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006522:	f003 0310 	and.w	r3, r3, #16
 8006526:	2b00      	cmp	r3, #0
 8006528:	f000 8169 	beq.w	80067fe <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800652c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006530:	f003 0310 	and.w	r3, r3, #16
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 8162 	beq.w	80067fe <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2210      	movs	r2, #16
 8006540:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800654c:	2b40      	cmp	r3, #64	@ 0x40
 800654e:	f040 80d8 	bne.w	8006702 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006560:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 80af 	beq.w	80066c8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006570:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006574:	429a      	cmp	r2, r3
 8006576:	f080 80a7 	bcs.w	80066c8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006580:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0320 	and.w	r3, r3, #32
 8006592:	2b00      	cmp	r3, #0
 8006594:	f040 8087 	bne.w	80066a6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80065a4:	e853 3f00 	ldrex	r3, [r3]
 80065a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80065ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80065b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	461a      	mov	r2, r3
 80065be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80065c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80065c6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80065ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80065d2:	e841 2300 	strex	r3, r2, [r1]
 80065d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80065da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1da      	bne.n	8006598 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	3308      	adds	r3, #8
 80065e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065ec:	e853 3f00 	ldrex	r3, [r3]
 80065f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80065f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065f4:	f023 0301 	bic.w	r3, r3, #1
 80065f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3308      	adds	r3, #8
 8006602:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006606:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800660a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800660e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006612:	e841 2300 	strex	r3, r2, [r1]
 8006616:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006618:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1e1      	bne.n	80065e2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	3308      	adds	r3, #8
 8006624:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006626:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006628:	e853 3f00 	ldrex	r3, [r3]
 800662c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800662e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006630:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006634:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3308      	adds	r3, #8
 800663e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006642:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006644:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006646:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006648:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800664a:	e841 2300 	strex	r3, r2, [r1]
 800664e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006650:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1e3      	bne.n	800661e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2220      	movs	r2, #32
 800665a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800666c:	e853 3f00 	ldrex	r3, [r3]
 8006670:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006672:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006674:	f023 0310 	bic.w	r3, r3, #16
 8006678:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	461a      	mov	r2, r3
 8006682:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006686:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006688:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800668c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800668e:	e841 2300 	strex	r3, r2, [r1]
 8006692:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006694:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1e4      	bne.n	8006664 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7fc fd62 	bl	800316a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2202      	movs	r2, #2
 80066aa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	b29b      	uxth	r3, r3
 80066be:	4619      	mov	r1, r3
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f939 	bl	8006938 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80066c6:	e0fc      	b.n	80068c2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80066ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066d2:	429a      	cmp	r2, r3
 80066d4:	f040 80f5 	bne.w	80068c2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0320 	and.w	r3, r3, #32
 80066e6:	2b20      	cmp	r3, #32
 80066e8:	f040 80eb 	bne.w	80068c2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2202      	movs	r2, #2
 80066f0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80066f8:	4619      	mov	r1, r3
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f91c 	bl	8006938 <HAL_UARTEx_RxEventCallback>
      return;
 8006700:	e0df      	b.n	80068c2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800670e:	b29b      	uxth	r3, r3
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800671c:	b29b      	uxth	r3, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	f000 80d1 	beq.w	80068c6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006724:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006728:	2b00      	cmp	r3, #0
 800672a:	f000 80cc 	beq.w	80068c6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006736:	e853 3f00 	ldrex	r3, [r3]
 800673a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800673c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800673e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006742:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	461a      	mov	r2, r3
 800674c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006750:	647b      	str	r3, [r7, #68]	@ 0x44
 8006752:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006754:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006756:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006758:	e841 2300 	strex	r3, r2, [r1]
 800675c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800675e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1e4      	bne.n	800672e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	3308      	adds	r3, #8
 800676a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676e:	e853 3f00 	ldrex	r3, [r3]
 8006772:	623b      	str	r3, [r7, #32]
   return(result);
 8006774:	6a3b      	ldr	r3, [r7, #32]
 8006776:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800677a:	f023 0301 	bic.w	r3, r3, #1
 800677e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	3308      	adds	r3, #8
 8006788:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800678c:	633a      	str	r2, [r7, #48]	@ 0x30
 800678e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006790:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006792:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006794:	e841 2300 	strex	r3, r2, [r1]
 8006798:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800679a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1e1      	bne.n	8006764 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2220      	movs	r2, #32
 80067a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	e853 3f00 	ldrex	r3, [r3]
 80067c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f023 0310 	bic.w	r3, r3, #16
 80067c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	461a      	mov	r2, r3
 80067d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80067d6:	61fb      	str	r3, [r7, #28]
 80067d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067da:	69b9      	ldr	r1, [r7, #24]
 80067dc:	69fa      	ldr	r2, [r7, #28]
 80067de:	e841 2300 	strex	r3, r2, [r1]
 80067e2:	617b      	str	r3, [r7, #20]
   return(result);
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1e4      	bne.n	80067b4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2202      	movs	r2, #2
 80067ee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067f4:	4619      	mov	r1, r3
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f89e 	bl	8006938 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067fc:	e063      	b.n	80068c6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80067fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006802:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00e      	beq.n	8006828 <HAL_UART_IRQHandler+0x5d8>
 800680a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800680e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d008      	beq.n	8006828 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800681e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f001 f88e 	bl	8007942 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006826:	e051      	b.n	80068cc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800682c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006830:	2b00      	cmp	r3, #0
 8006832:	d014      	beq.n	800685e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800683c:	2b00      	cmp	r3, #0
 800683e:	d105      	bne.n	800684c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006840:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006844:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d008      	beq.n	800685e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006850:	2b00      	cmp	r3, #0
 8006852:	d03a      	beq.n	80068ca <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	4798      	blx	r3
    }
    return;
 800685c:	e035      	b.n	80068ca <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800685e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006866:	2b00      	cmp	r3, #0
 8006868:	d009      	beq.n	800687e <HAL_UART_IRQHandler+0x62e>
 800686a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800686e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006872:	2b00      	cmp	r3, #0
 8006874:	d003      	beq.n	800687e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 ffcf 	bl	800781a <UART_EndTransmit_IT>
    return;
 800687c:	e026      	b.n	80068cc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800687e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006882:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d009      	beq.n	800689e <HAL_UART_IRQHandler+0x64e>
 800688a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800688e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d003      	beq.n	800689e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f001 f867 	bl	800796a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800689c:	e016      	b.n	80068cc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800689e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d010      	beq.n	80068cc <HAL_UART_IRQHandler+0x67c>
 80068aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	da0c      	bge.n	80068cc <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f001 f84f 	bl	8007956 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068b8:	e008      	b.n	80068cc <HAL_UART_IRQHandler+0x67c>
      return;
 80068ba:	bf00      	nop
 80068bc:	e006      	b.n	80068cc <HAL_UART_IRQHandler+0x67c>
    return;
 80068be:	bf00      	nop
 80068c0:	e004      	b.n	80068cc <HAL_UART_IRQHandler+0x67c>
      return;
 80068c2:	bf00      	nop
 80068c4:	e002      	b.n	80068cc <HAL_UART_IRQHandler+0x67c>
      return;
 80068c6:	bf00      	nop
 80068c8:	e000      	b.n	80068cc <HAL_UART_IRQHandler+0x67c>
    return;
 80068ca:	bf00      	nop
  }
}
 80068cc:	37e8      	adds	r7, #232	@ 0xe8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop

080068d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	460b      	mov	r3, r1
 8006942:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006944:	bf00      	nop
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006954:	b08c      	sub	sp, #48	@ 0x30
 8006956:	af00      	add	r7, sp, #0
 8006958:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800695a:	2300      	movs	r3, #0
 800695c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	431a      	orrs	r2, r3
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	431a      	orrs	r2, r3
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	69db      	ldr	r3, [r3, #28]
 8006974:	4313      	orrs	r3, r2
 8006976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	4baa      	ldr	r3, [pc, #680]	@ (8006c28 <UART_SetConfig+0x2d8>)
 8006980:	4013      	ands	r3, r2
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	6812      	ldr	r2, [r2, #0]
 8006986:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006988:	430b      	orrs	r3, r1
 800698a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	68da      	ldr	r2, [r3, #12]
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	430a      	orrs	r2, r1
 80069a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a9f      	ldr	r2, [pc, #636]	@ (8006c2c <UART_SetConfig+0x2dc>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d004      	beq.n	80069bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069b8:	4313      	orrs	r3, r2
 80069ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80069c6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80069ca:	697a      	ldr	r2, [r7, #20]
 80069cc:	6812      	ldr	r2, [r2, #0]
 80069ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069d0:	430b      	orrs	r3, r1
 80069d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069da:	f023 010f 	bic.w	r1, r3, #15
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	430a      	orrs	r2, r1
 80069e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a90      	ldr	r2, [pc, #576]	@ (8006c30 <UART_SetConfig+0x2e0>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d125      	bne.n	8006a40 <UART_SetConfig+0xf0>
 80069f4:	4b8f      	ldr	r3, [pc, #572]	@ (8006c34 <UART_SetConfig+0x2e4>)
 80069f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069fa:	f003 0303 	and.w	r3, r3, #3
 80069fe:	2b03      	cmp	r3, #3
 8006a00:	d81a      	bhi.n	8006a38 <UART_SetConfig+0xe8>
 8006a02:	a201      	add	r2, pc, #4	@ (adr r2, 8006a08 <UART_SetConfig+0xb8>)
 8006a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a08:	08006a19 	.word	0x08006a19
 8006a0c:	08006a29 	.word	0x08006a29
 8006a10:	08006a21 	.word	0x08006a21
 8006a14:	08006a31 	.word	0x08006a31
 8006a18:	2301      	movs	r3, #1
 8006a1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a1e:	e116      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006a20:	2302      	movs	r3, #2
 8006a22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a26:	e112      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006a28:	2304      	movs	r3, #4
 8006a2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a2e:	e10e      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006a30:	2308      	movs	r3, #8
 8006a32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a36:	e10a      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006a38:	2310      	movs	r3, #16
 8006a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a3e:	e106      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a7c      	ldr	r2, [pc, #496]	@ (8006c38 <UART_SetConfig+0x2e8>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d138      	bne.n	8006abc <UART_SetConfig+0x16c>
 8006a4a:	4b7a      	ldr	r3, [pc, #488]	@ (8006c34 <UART_SetConfig+0x2e4>)
 8006a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a50:	f003 030c 	and.w	r3, r3, #12
 8006a54:	2b0c      	cmp	r3, #12
 8006a56:	d82d      	bhi.n	8006ab4 <UART_SetConfig+0x164>
 8006a58:	a201      	add	r2, pc, #4	@ (adr r2, 8006a60 <UART_SetConfig+0x110>)
 8006a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5e:	bf00      	nop
 8006a60:	08006a95 	.word	0x08006a95
 8006a64:	08006ab5 	.word	0x08006ab5
 8006a68:	08006ab5 	.word	0x08006ab5
 8006a6c:	08006ab5 	.word	0x08006ab5
 8006a70:	08006aa5 	.word	0x08006aa5
 8006a74:	08006ab5 	.word	0x08006ab5
 8006a78:	08006ab5 	.word	0x08006ab5
 8006a7c:	08006ab5 	.word	0x08006ab5
 8006a80:	08006a9d 	.word	0x08006a9d
 8006a84:	08006ab5 	.word	0x08006ab5
 8006a88:	08006ab5 	.word	0x08006ab5
 8006a8c:	08006ab5 	.word	0x08006ab5
 8006a90:	08006aad 	.word	0x08006aad
 8006a94:	2300      	movs	r3, #0
 8006a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a9a:	e0d8      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006a9c:	2302      	movs	r3, #2
 8006a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aa2:	e0d4      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006aa4:	2304      	movs	r3, #4
 8006aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aaa:	e0d0      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006aac:	2308      	movs	r3, #8
 8006aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ab2:	e0cc      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006ab4:	2310      	movs	r3, #16
 8006ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aba:	e0c8      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a5e      	ldr	r2, [pc, #376]	@ (8006c3c <UART_SetConfig+0x2ec>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d125      	bne.n	8006b12 <UART_SetConfig+0x1c2>
 8006ac6:	4b5b      	ldr	r3, [pc, #364]	@ (8006c34 <UART_SetConfig+0x2e4>)
 8006ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006acc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006ad0:	2b30      	cmp	r3, #48	@ 0x30
 8006ad2:	d016      	beq.n	8006b02 <UART_SetConfig+0x1b2>
 8006ad4:	2b30      	cmp	r3, #48	@ 0x30
 8006ad6:	d818      	bhi.n	8006b0a <UART_SetConfig+0x1ba>
 8006ad8:	2b20      	cmp	r3, #32
 8006ada:	d00a      	beq.n	8006af2 <UART_SetConfig+0x1a2>
 8006adc:	2b20      	cmp	r3, #32
 8006ade:	d814      	bhi.n	8006b0a <UART_SetConfig+0x1ba>
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d002      	beq.n	8006aea <UART_SetConfig+0x19a>
 8006ae4:	2b10      	cmp	r3, #16
 8006ae6:	d008      	beq.n	8006afa <UART_SetConfig+0x1aa>
 8006ae8:	e00f      	b.n	8006b0a <UART_SetConfig+0x1ba>
 8006aea:	2300      	movs	r3, #0
 8006aec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006af0:	e0ad      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006af2:	2302      	movs	r3, #2
 8006af4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006af8:	e0a9      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006afa:	2304      	movs	r3, #4
 8006afc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b00:	e0a5      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006b02:	2308      	movs	r3, #8
 8006b04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b08:	e0a1      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006b0a:	2310      	movs	r3, #16
 8006b0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b10:	e09d      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a4a      	ldr	r2, [pc, #296]	@ (8006c40 <UART_SetConfig+0x2f0>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d125      	bne.n	8006b68 <UART_SetConfig+0x218>
 8006b1c:	4b45      	ldr	r3, [pc, #276]	@ (8006c34 <UART_SetConfig+0x2e4>)
 8006b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b22:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006b26:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b28:	d016      	beq.n	8006b58 <UART_SetConfig+0x208>
 8006b2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b2c:	d818      	bhi.n	8006b60 <UART_SetConfig+0x210>
 8006b2e:	2b80      	cmp	r3, #128	@ 0x80
 8006b30:	d00a      	beq.n	8006b48 <UART_SetConfig+0x1f8>
 8006b32:	2b80      	cmp	r3, #128	@ 0x80
 8006b34:	d814      	bhi.n	8006b60 <UART_SetConfig+0x210>
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d002      	beq.n	8006b40 <UART_SetConfig+0x1f0>
 8006b3a:	2b40      	cmp	r3, #64	@ 0x40
 8006b3c:	d008      	beq.n	8006b50 <UART_SetConfig+0x200>
 8006b3e:	e00f      	b.n	8006b60 <UART_SetConfig+0x210>
 8006b40:	2300      	movs	r3, #0
 8006b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b46:	e082      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006b48:	2302      	movs	r3, #2
 8006b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b4e:	e07e      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006b50:	2304      	movs	r3, #4
 8006b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b56:	e07a      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006b58:	2308      	movs	r3, #8
 8006b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b5e:	e076      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006b60:	2310      	movs	r3, #16
 8006b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b66:	e072      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a35      	ldr	r2, [pc, #212]	@ (8006c44 <UART_SetConfig+0x2f4>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d12a      	bne.n	8006bc8 <UART_SetConfig+0x278>
 8006b72:	4b30      	ldr	r3, [pc, #192]	@ (8006c34 <UART_SetConfig+0x2e4>)
 8006b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b80:	d01a      	beq.n	8006bb8 <UART_SetConfig+0x268>
 8006b82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b86:	d81b      	bhi.n	8006bc0 <UART_SetConfig+0x270>
 8006b88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b8c:	d00c      	beq.n	8006ba8 <UART_SetConfig+0x258>
 8006b8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b92:	d815      	bhi.n	8006bc0 <UART_SetConfig+0x270>
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d003      	beq.n	8006ba0 <UART_SetConfig+0x250>
 8006b98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b9c:	d008      	beq.n	8006bb0 <UART_SetConfig+0x260>
 8006b9e:	e00f      	b.n	8006bc0 <UART_SetConfig+0x270>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ba6:	e052      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006ba8:	2302      	movs	r3, #2
 8006baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bae:	e04e      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006bb0:	2304      	movs	r3, #4
 8006bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bb6:	e04a      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006bb8:	2308      	movs	r3, #8
 8006bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bbe:	e046      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006bc0:	2310      	movs	r3, #16
 8006bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bc6:	e042      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a17      	ldr	r2, [pc, #92]	@ (8006c2c <UART_SetConfig+0x2dc>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d13a      	bne.n	8006c48 <UART_SetConfig+0x2f8>
 8006bd2:	4b18      	ldr	r3, [pc, #96]	@ (8006c34 <UART_SetConfig+0x2e4>)
 8006bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bd8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006bdc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006be0:	d01a      	beq.n	8006c18 <UART_SetConfig+0x2c8>
 8006be2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006be6:	d81b      	bhi.n	8006c20 <UART_SetConfig+0x2d0>
 8006be8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bec:	d00c      	beq.n	8006c08 <UART_SetConfig+0x2b8>
 8006bee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bf2:	d815      	bhi.n	8006c20 <UART_SetConfig+0x2d0>
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d003      	beq.n	8006c00 <UART_SetConfig+0x2b0>
 8006bf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bfc:	d008      	beq.n	8006c10 <UART_SetConfig+0x2c0>
 8006bfe:	e00f      	b.n	8006c20 <UART_SetConfig+0x2d0>
 8006c00:	2300      	movs	r3, #0
 8006c02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c06:	e022      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006c08:	2302      	movs	r3, #2
 8006c0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c0e:	e01e      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006c10:	2304      	movs	r3, #4
 8006c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c16:	e01a      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006c18:	2308      	movs	r3, #8
 8006c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c1e:	e016      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006c20:	2310      	movs	r3, #16
 8006c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c26:	e012      	b.n	8006c4e <UART_SetConfig+0x2fe>
 8006c28:	cfff69f3 	.word	0xcfff69f3
 8006c2c:	40008000 	.word	0x40008000
 8006c30:	40013800 	.word	0x40013800
 8006c34:	40021000 	.word	0x40021000
 8006c38:	40004400 	.word	0x40004400
 8006c3c:	40004800 	.word	0x40004800
 8006c40:	40004c00 	.word	0x40004c00
 8006c44:	40005000 	.word	0x40005000
 8006c48:	2310      	movs	r3, #16
 8006c4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4aae      	ldr	r2, [pc, #696]	@ (8006f0c <UART_SetConfig+0x5bc>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	f040 8097 	bne.w	8006d88 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c5a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c5e:	2b08      	cmp	r3, #8
 8006c60:	d823      	bhi.n	8006caa <UART_SetConfig+0x35a>
 8006c62:	a201      	add	r2, pc, #4	@ (adr r2, 8006c68 <UART_SetConfig+0x318>)
 8006c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c68:	08006c8d 	.word	0x08006c8d
 8006c6c:	08006cab 	.word	0x08006cab
 8006c70:	08006c95 	.word	0x08006c95
 8006c74:	08006cab 	.word	0x08006cab
 8006c78:	08006c9b 	.word	0x08006c9b
 8006c7c:	08006cab 	.word	0x08006cab
 8006c80:	08006cab 	.word	0x08006cab
 8006c84:	08006cab 	.word	0x08006cab
 8006c88:	08006ca3 	.word	0x08006ca3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c8c:	f7fd fc14 	bl	80044b8 <HAL_RCC_GetPCLK1Freq>
 8006c90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c92:	e010      	b.n	8006cb6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c94:	4b9e      	ldr	r3, [pc, #632]	@ (8006f10 <UART_SetConfig+0x5c0>)
 8006c96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c98:	e00d      	b.n	8006cb6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c9a:	f7fd fb9f 	bl	80043dc <HAL_RCC_GetSysClockFreq>
 8006c9e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ca0:	e009      	b.n	8006cb6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ca2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ca6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ca8:	e005      	b.n	8006cb6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006caa:	2300      	movs	r3, #0
 8006cac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006cb4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 8130 	beq.w	8006f1e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc2:	4a94      	ldr	r2, [pc, #592]	@ (8006f14 <UART_SetConfig+0x5c4>)
 8006cc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cc8:	461a      	mov	r2, r3
 8006cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ccc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cd0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	005b      	lsls	r3, r3, #1
 8006cda:	4413      	add	r3, r2
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d305      	bcc.n	8006cee <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ce8:	69ba      	ldr	r2, [r7, #24]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d903      	bls.n	8006cf6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006cf4:	e113      	b.n	8006f1e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	60bb      	str	r3, [r7, #8]
 8006cfc:	60fa      	str	r2, [r7, #12]
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d02:	4a84      	ldr	r2, [pc, #528]	@ (8006f14 <UART_SetConfig+0x5c4>)
 8006d04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	603b      	str	r3, [r7, #0]
 8006d0e:	607a      	str	r2, [r7, #4]
 8006d10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d18:	f7f9 ff58 	bl	8000bcc <__aeabi_uldivmod>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	460b      	mov	r3, r1
 8006d20:	4610      	mov	r0, r2
 8006d22:	4619      	mov	r1, r3
 8006d24:	f04f 0200 	mov.w	r2, #0
 8006d28:	f04f 0300 	mov.w	r3, #0
 8006d2c:	020b      	lsls	r3, r1, #8
 8006d2e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d32:	0202      	lsls	r2, r0, #8
 8006d34:	6979      	ldr	r1, [r7, #20]
 8006d36:	6849      	ldr	r1, [r1, #4]
 8006d38:	0849      	lsrs	r1, r1, #1
 8006d3a:	2000      	movs	r0, #0
 8006d3c:	460c      	mov	r4, r1
 8006d3e:	4605      	mov	r5, r0
 8006d40:	eb12 0804 	adds.w	r8, r2, r4
 8006d44:	eb43 0905 	adc.w	r9, r3, r5
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	469a      	mov	sl, r3
 8006d50:	4693      	mov	fp, r2
 8006d52:	4652      	mov	r2, sl
 8006d54:	465b      	mov	r3, fp
 8006d56:	4640      	mov	r0, r8
 8006d58:	4649      	mov	r1, r9
 8006d5a:	f7f9 ff37 	bl	8000bcc <__aeabi_uldivmod>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	4613      	mov	r3, r2
 8006d64:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d6c:	d308      	bcc.n	8006d80 <UART_SetConfig+0x430>
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d74:	d204      	bcs.n	8006d80 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	6a3a      	ldr	r2, [r7, #32]
 8006d7c:	60da      	str	r2, [r3, #12]
 8006d7e:	e0ce      	b.n	8006f1e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d86:	e0ca      	b.n	8006f1e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	69db      	ldr	r3, [r3, #28]
 8006d8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d90:	d166      	bne.n	8006e60 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006d92:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d96:	2b08      	cmp	r3, #8
 8006d98:	d827      	bhi.n	8006dea <UART_SetConfig+0x49a>
 8006d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006da0 <UART_SetConfig+0x450>)
 8006d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da0:	08006dc5 	.word	0x08006dc5
 8006da4:	08006dcd 	.word	0x08006dcd
 8006da8:	08006dd5 	.word	0x08006dd5
 8006dac:	08006deb 	.word	0x08006deb
 8006db0:	08006ddb 	.word	0x08006ddb
 8006db4:	08006deb 	.word	0x08006deb
 8006db8:	08006deb 	.word	0x08006deb
 8006dbc:	08006deb 	.word	0x08006deb
 8006dc0:	08006de3 	.word	0x08006de3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dc4:	f7fd fb78 	bl	80044b8 <HAL_RCC_GetPCLK1Freq>
 8006dc8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dca:	e014      	b.n	8006df6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dcc:	f7fd fb8a 	bl	80044e4 <HAL_RCC_GetPCLK2Freq>
 8006dd0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dd2:	e010      	b.n	8006df6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dd4:	4b4e      	ldr	r3, [pc, #312]	@ (8006f10 <UART_SetConfig+0x5c0>)
 8006dd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006dd8:	e00d      	b.n	8006df6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dda:	f7fd faff 	bl	80043dc <HAL_RCC_GetSysClockFreq>
 8006dde:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006de0:	e009      	b.n	8006df6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006de2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006de6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006de8:	e005      	b.n	8006df6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006dea:	2300      	movs	r3, #0
 8006dec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006df4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f000 8090 	beq.w	8006f1e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e02:	4a44      	ldr	r2, [pc, #272]	@ (8006f14 <UART_SetConfig+0x5c4>)
 8006e04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e10:	005a      	lsls	r2, r3, #1
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	085b      	lsrs	r3, r3, #1
 8006e18:	441a      	add	r2, r3
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e22:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e24:	6a3b      	ldr	r3, [r7, #32]
 8006e26:	2b0f      	cmp	r3, #15
 8006e28:	d916      	bls.n	8006e58 <UART_SetConfig+0x508>
 8006e2a:	6a3b      	ldr	r3, [r7, #32]
 8006e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e30:	d212      	bcs.n	8006e58 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e32:	6a3b      	ldr	r3, [r7, #32]
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	f023 030f 	bic.w	r3, r3, #15
 8006e3a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e3c:	6a3b      	ldr	r3, [r7, #32]
 8006e3e:	085b      	lsrs	r3, r3, #1
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	f003 0307 	and.w	r3, r3, #7
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	8bfb      	ldrh	r3, [r7, #30]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	8bfa      	ldrh	r2, [r7, #30]
 8006e54:	60da      	str	r2, [r3, #12]
 8006e56:	e062      	b.n	8006f1e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006e5e:	e05e      	b.n	8006f1e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e60:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006e64:	2b08      	cmp	r3, #8
 8006e66:	d828      	bhi.n	8006eba <UART_SetConfig+0x56a>
 8006e68:	a201      	add	r2, pc, #4	@ (adr r2, 8006e70 <UART_SetConfig+0x520>)
 8006e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6e:	bf00      	nop
 8006e70:	08006e95 	.word	0x08006e95
 8006e74:	08006e9d 	.word	0x08006e9d
 8006e78:	08006ea5 	.word	0x08006ea5
 8006e7c:	08006ebb 	.word	0x08006ebb
 8006e80:	08006eab 	.word	0x08006eab
 8006e84:	08006ebb 	.word	0x08006ebb
 8006e88:	08006ebb 	.word	0x08006ebb
 8006e8c:	08006ebb 	.word	0x08006ebb
 8006e90:	08006eb3 	.word	0x08006eb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e94:	f7fd fb10 	bl	80044b8 <HAL_RCC_GetPCLK1Freq>
 8006e98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e9a:	e014      	b.n	8006ec6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e9c:	f7fd fb22 	bl	80044e4 <HAL_RCC_GetPCLK2Freq>
 8006ea0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ea2:	e010      	b.n	8006ec6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8006f10 <UART_SetConfig+0x5c0>)
 8006ea6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ea8:	e00d      	b.n	8006ec6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eaa:	f7fd fa97 	bl	80043dc <HAL_RCC_GetSysClockFreq>
 8006eae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006eb0:	e009      	b.n	8006ec6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006eb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006eb8:	e005      	b.n	8006ec6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006ec4:	bf00      	nop
    }

    if (pclk != 0U)
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d028      	beq.n	8006f1e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed0:	4a10      	ldr	r2, [pc, #64]	@ (8006f14 <UART_SetConfig+0x5c4>)
 8006ed2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eda:	fbb3 f2f2 	udiv	r2, r3, r2
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	085b      	lsrs	r3, r3, #1
 8006ee4:	441a      	add	r2, r3
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ef0:	6a3b      	ldr	r3, [r7, #32]
 8006ef2:	2b0f      	cmp	r3, #15
 8006ef4:	d910      	bls.n	8006f18 <UART_SetConfig+0x5c8>
 8006ef6:	6a3b      	ldr	r3, [r7, #32]
 8006ef8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006efc:	d20c      	bcs.n	8006f18 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006efe:	6a3b      	ldr	r3, [r7, #32]
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	60da      	str	r2, [r3, #12]
 8006f08:	e009      	b.n	8006f1e <UART_SetConfig+0x5ce>
 8006f0a:	bf00      	nop
 8006f0c:	40008000 	.word	0x40008000
 8006f10:	00f42400 	.word	0x00f42400
 8006f14:	080187e4 	.word	0x080187e4
      }
      else
      {
        ret = HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	2200      	movs	r2, #0
 8006f32:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	2200      	movs	r2, #0
 8006f38:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006f3a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3730      	adds	r7, #48	@ 0x30
 8006f42:	46bd      	mov	sp, r7
 8006f44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006f48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f54:	f003 0308 	and.w	r3, r3, #8
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00a      	beq.n	8006f72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	430a      	orrs	r2, r1
 8006f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00a      	beq.n	8006f94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	430a      	orrs	r2, r1
 8006f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f98:	f003 0302 	and.w	r3, r3, #2
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00a      	beq.n	8006fb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	430a      	orrs	r2, r1
 8006fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fba:	f003 0304 	and.w	r3, r3, #4
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00a      	beq.n	8006fd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fdc:	f003 0310 	and.w	r3, r3, #16
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00a      	beq.n	8006ffa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ffe:	f003 0320 	and.w	r3, r3, #32
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00a      	beq.n	800701c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	430a      	orrs	r2, r1
 800701a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007024:	2b00      	cmp	r3, #0
 8007026:	d01a      	beq.n	800705e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	430a      	orrs	r2, r1
 800703c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007042:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007046:	d10a      	bne.n	800705e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	430a      	orrs	r2, r1
 800705c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00a      	beq.n	8007080 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	430a      	orrs	r2, r1
 800707e:	605a      	str	r2, [r3, #4]
  }
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b098      	sub	sp, #96	@ 0x60
 8007090:	af02      	add	r7, sp, #8
 8007092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800709c:	f7fb fe56 	bl	8002d4c <HAL_GetTick>
 80070a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0308 	and.w	r3, r3, #8
 80070ac:	2b08      	cmp	r3, #8
 80070ae:	d12f      	bne.n	8007110 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80070b4:	9300      	str	r3, [sp, #0]
 80070b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070b8:	2200      	movs	r2, #0
 80070ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f88e 	bl	80071e0 <UART_WaitOnFlagUntilTimeout>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d022      	beq.n	8007110 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d2:	e853 3f00 	ldrex	r3, [r3]
 80070d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80070d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070de:	653b      	str	r3, [r7, #80]	@ 0x50
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	461a      	mov	r2, r3
 80070e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80070ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80070ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070f0:	e841 2300 	strex	r3, r2, [r1]
 80070f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1e6      	bne.n	80070ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2220      	movs	r2, #32
 8007100:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800710c:	2303      	movs	r3, #3
 800710e:	e063      	b.n	80071d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0304 	and.w	r3, r3, #4
 800711a:	2b04      	cmp	r3, #4
 800711c:	d149      	bne.n	80071b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800711e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007122:	9300      	str	r3, [sp, #0]
 8007124:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007126:	2200      	movs	r2, #0
 8007128:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f857 	bl	80071e0 <UART_WaitOnFlagUntilTimeout>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d03c      	beq.n	80071b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007140:	e853 3f00 	ldrex	r3, [r3]
 8007144:	623b      	str	r3, [r7, #32]
   return(result);
 8007146:	6a3b      	ldr	r3, [r7, #32]
 8007148:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800714c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	461a      	mov	r2, r3
 8007154:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007156:	633b      	str	r3, [r7, #48]	@ 0x30
 8007158:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800715c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800715e:	e841 2300 	strex	r3, r2, [r1]
 8007162:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1e6      	bne.n	8007138 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	3308      	adds	r3, #8
 8007170:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	e853 3f00 	ldrex	r3, [r3]
 8007178:	60fb      	str	r3, [r7, #12]
   return(result);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f023 0301 	bic.w	r3, r3, #1
 8007180:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	3308      	adds	r3, #8
 8007188:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800718a:	61fa      	str	r2, [r7, #28]
 800718c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718e:	69b9      	ldr	r1, [r7, #24]
 8007190:	69fa      	ldr	r2, [r7, #28]
 8007192:	e841 2300 	strex	r3, r2, [r1]
 8007196:	617b      	str	r3, [r7, #20]
   return(result);
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1e5      	bne.n	800716a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2220      	movs	r2, #32
 80071a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e012      	b.n	80071d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2220      	movs	r2, #32
 80071b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2220      	movs	r2, #32
 80071be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3758      	adds	r7, #88	@ 0x58
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	603b      	str	r3, [r7, #0]
 80071ec:	4613      	mov	r3, r2
 80071ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071f0:	e04f      	b.n	8007292 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071f8:	d04b      	beq.n	8007292 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071fa:	f7fb fda7 	bl	8002d4c <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	69ba      	ldr	r2, [r7, #24]
 8007206:	429a      	cmp	r2, r3
 8007208:	d302      	bcc.n	8007210 <UART_WaitOnFlagUntilTimeout+0x30>
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d101      	bne.n	8007214 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e04e      	b.n	80072b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0304 	and.w	r3, r3, #4
 800721e:	2b00      	cmp	r3, #0
 8007220:	d037      	beq.n	8007292 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	2b80      	cmp	r3, #128	@ 0x80
 8007226:	d034      	beq.n	8007292 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	2b40      	cmp	r3, #64	@ 0x40
 800722c:	d031      	beq.n	8007292 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	69db      	ldr	r3, [r3, #28]
 8007234:	f003 0308 	and.w	r3, r3, #8
 8007238:	2b08      	cmp	r3, #8
 800723a:	d110      	bne.n	800725e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2208      	movs	r2, #8
 8007242:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f000 f920 	bl	800748a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2208      	movs	r2, #8
 800724e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e029      	b.n	80072b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	69db      	ldr	r3, [r3, #28]
 8007264:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007268:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800726c:	d111      	bne.n	8007292 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007276:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	f000 f906 	bl	800748a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2220      	movs	r2, #32
 8007282:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e00f      	b.n	80072b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	69da      	ldr	r2, [r3, #28]
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	4013      	ands	r3, r2
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	429a      	cmp	r2, r3
 80072a0:	bf0c      	ite	eq
 80072a2:	2301      	moveq	r3, #1
 80072a4:	2300      	movne	r3, #0
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	461a      	mov	r2, r3
 80072aa:	79fb      	ldrb	r3, [r7, #7]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d0a0      	beq.n	80071f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
	...

080072bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b096      	sub	sp, #88	@ 0x58
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	4613      	mov	r3, r2
 80072c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	88fa      	ldrh	r2, [r7, #6]
 80072d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2222      	movs	r2, #34	@ 0x22
 80072e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d02d      	beq.n	800734e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072f8:	4a40      	ldr	r2, [pc, #256]	@ (80073fc <UART_Start_Receive_DMA+0x140>)
 80072fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007302:	4a3f      	ldr	r2, [pc, #252]	@ (8007400 <UART_Start_Receive_DMA+0x144>)
 8007304:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800730c:	4a3d      	ldr	r2, [pc, #244]	@ (8007404 <UART_Start_Receive_DMA+0x148>)
 800730e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007316:	2200      	movs	r2, #0
 8007318:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3324      	adds	r3, #36	@ 0x24
 8007326:	4619      	mov	r1, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800732c:	461a      	mov	r2, r3
 800732e:	88fb      	ldrh	r3, [r7, #6]
 8007330:	f7fb fea0 	bl	8003074 <HAL_DMA_Start_IT>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d009      	beq.n	800734e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2210      	movs	r2, #16
 800733e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2220      	movs	r2, #32
 8007346:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e051      	b.n	80073f2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d018      	beq.n	8007388 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800735e:	e853 3f00 	ldrex	r3, [r3]
 8007362:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007366:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800736a:	657b      	str	r3, [r7, #84]	@ 0x54
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	461a      	mov	r2, r3
 8007372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007374:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007376:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007378:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800737a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800737c:	e841 2300 	strex	r3, r2, [r1]
 8007380:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007382:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1e6      	bne.n	8007356 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	3308      	adds	r3, #8
 800738e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007392:	e853 3f00 	ldrex	r3, [r3]
 8007396:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739a:	f043 0301 	orr.w	r3, r3, #1
 800739e:	653b      	str	r3, [r7, #80]	@ 0x50
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	3308      	adds	r3, #8
 80073a6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80073a8:	637a      	str	r2, [r7, #52]	@ 0x34
 80073aa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80073ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80073b0:	e841 2300 	strex	r3, r2, [r1]
 80073b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80073b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1e5      	bne.n	8007388 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	3308      	adds	r3, #8
 80073c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	e853 3f00 	ldrex	r3, [r3]
 80073ca:	613b      	str	r3, [r7, #16]
   return(result);
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	3308      	adds	r3, #8
 80073da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80073dc:	623a      	str	r2, [r7, #32]
 80073de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e0:	69f9      	ldr	r1, [r7, #28]
 80073e2:	6a3a      	ldr	r2, [r7, #32]
 80073e4:	e841 2300 	strex	r3, r2, [r1]
 80073e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1e5      	bne.n	80073bc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3758      	adds	r7, #88	@ 0x58
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	0800760d 	.word	0x0800760d
 8007400:	08007739 	.word	0x08007739
 8007404:	08007777 	.word	0x08007777

08007408 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007408:	b480      	push	{r7}
 800740a:	b08f      	sub	sp, #60	@ 0x3c
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007416:	6a3b      	ldr	r3, [r7, #32]
 8007418:	e853 3f00 	ldrex	r3, [r3]
 800741c:	61fb      	str	r3, [r7, #28]
   return(result);
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007424:	637b      	str	r3, [r7, #52]	@ 0x34
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	461a      	mov	r2, r3
 800742c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800742e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007430:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007432:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007434:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007436:	e841 2300 	strex	r3, r2, [r1]
 800743a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800743c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1e6      	bne.n	8007410 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	3308      	adds	r3, #8
 8007448:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	e853 3f00 	ldrex	r3, [r3]
 8007450:	60bb      	str	r3, [r7, #8]
   return(result);
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007458:	633b      	str	r3, [r7, #48]	@ 0x30
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	3308      	adds	r3, #8
 8007460:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007462:	61ba      	str	r2, [r7, #24]
 8007464:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007466:	6979      	ldr	r1, [r7, #20]
 8007468:	69ba      	ldr	r2, [r7, #24]
 800746a:	e841 2300 	strex	r3, r2, [r1]
 800746e:	613b      	str	r3, [r7, #16]
   return(result);
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1e5      	bne.n	8007442 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2220      	movs	r2, #32
 800747a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800747e:	bf00      	nop
 8007480:	373c      	adds	r7, #60	@ 0x3c
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800748a:	b480      	push	{r7}
 800748c:	b095      	sub	sp, #84	@ 0x54
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800749a:	e853 3f00 	ldrex	r3, [r3]
 800749e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80074a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	461a      	mov	r2, r3
 80074ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80074b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80074b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80074b8:	e841 2300 	strex	r3, r2, [r1]
 80074bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80074be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1e6      	bne.n	8007492 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	3308      	adds	r3, #8
 80074ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074cc:	6a3b      	ldr	r3, [r7, #32]
 80074ce:	e853 3f00 	ldrex	r3, [r3]
 80074d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074da:	f023 0301 	bic.w	r3, r3, #1
 80074de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3308      	adds	r3, #8
 80074e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80074ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074f0:	e841 2300 	strex	r3, r2, [r1]
 80074f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80074f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1e3      	bne.n	80074c4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007500:	2b01      	cmp	r3, #1
 8007502:	d118      	bne.n	8007536 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	e853 3f00 	ldrex	r3, [r3]
 8007510:	60bb      	str	r3, [r7, #8]
   return(result);
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	f023 0310 	bic.w	r3, r3, #16
 8007518:	647b      	str	r3, [r7, #68]	@ 0x44
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	461a      	mov	r2, r3
 8007520:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007522:	61bb      	str	r3, [r7, #24]
 8007524:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007526:	6979      	ldr	r1, [r7, #20]
 8007528:	69ba      	ldr	r2, [r7, #24]
 800752a:	e841 2300 	strex	r3, r2, [r1]
 800752e:	613b      	str	r3, [r7, #16]
   return(result);
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1e6      	bne.n	8007504 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2220      	movs	r2, #32
 800753a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800754a:	bf00      	nop
 800754c:	3754      	adds	r7, #84	@ 0x54
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b090      	sub	sp, #64	@ 0x40
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007562:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 0320 	and.w	r3, r3, #32
 800756e:	2b00      	cmp	r3, #0
 8007570:	d137      	bne.n	80075e2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007574:	2200      	movs	r2, #0
 8007576:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800757a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	3308      	adds	r3, #8
 8007580:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007584:	e853 3f00 	ldrex	r3, [r3]
 8007588:	623b      	str	r3, [r7, #32]
   return(result);
 800758a:	6a3b      	ldr	r3, [r7, #32]
 800758c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007590:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	3308      	adds	r3, #8
 8007598:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800759a:	633a      	str	r2, [r7, #48]	@ 0x30
 800759c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075a2:	e841 2300 	strex	r3, r2, [r1]
 80075a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80075a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1e5      	bne.n	800757a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	e853 3f00 	ldrex	r3, [r3]
 80075ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80075c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	461a      	mov	r2, r3
 80075ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075cc:	61fb      	str	r3, [r7, #28]
 80075ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d0:	69b9      	ldr	r1, [r7, #24]
 80075d2:	69fa      	ldr	r2, [r7, #28]
 80075d4:	e841 2300 	strex	r3, r2, [r1]
 80075d8:	617b      	str	r3, [r7, #20]
   return(result);
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d1e6      	bne.n	80075ae <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80075e0:	e002      	b.n	80075e8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80075e2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80075e4:	f7ff f976 	bl	80068d4 <HAL_UART_TxCpltCallback>
}
 80075e8:	bf00      	nop
 80075ea:	3740      	adds	r7, #64	@ 0x40
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f7ff f972 	bl	80068e8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007604:	bf00      	nop
 8007606:	3710      	adds	r7, #16
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b09c      	sub	sp, #112	@ 0x70
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007618:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0320 	and.w	r3, r3, #32
 8007624:	2b00      	cmp	r3, #0
 8007626:	d171      	bne.n	800770c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007628:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800762a:	2200      	movs	r2, #0
 800762c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007630:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007636:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007638:	e853 3f00 	ldrex	r3, [r3]
 800763c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800763e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007640:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007644:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007646:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	461a      	mov	r2, r3
 800764c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800764e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007650:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007652:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007654:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007656:	e841 2300 	strex	r3, r2, [r1]
 800765a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800765c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1e6      	bne.n	8007630 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007662:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	3308      	adds	r3, #8
 8007668:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800766c:	e853 3f00 	ldrex	r3, [r3]
 8007670:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007674:	f023 0301 	bic.w	r3, r3, #1
 8007678:	667b      	str	r3, [r7, #100]	@ 0x64
 800767a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	3308      	adds	r3, #8
 8007680:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007682:	647a      	str	r2, [r7, #68]	@ 0x44
 8007684:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007686:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007688:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800768a:	e841 2300 	strex	r3, r2, [r1]
 800768e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1e5      	bne.n	8007662 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007696:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	3308      	adds	r3, #8
 800769c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a0:	e853 3f00 	ldrex	r3, [r3]
 80076a4:	623b      	str	r3, [r7, #32]
   return(result);
 80076a6:	6a3b      	ldr	r3, [r7, #32]
 80076a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80076ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	3308      	adds	r3, #8
 80076b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80076b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80076b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076be:	e841 2300 	strex	r3, r2, [r1]
 80076c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1e5      	bne.n	8007696 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80076ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076cc:	2220      	movs	r2, #32
 80076ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d118      	bne.n	800770c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	e853 3f00 	ldrex	r3, [r3]
 80076e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f023 0310 	bic.w	r3, r3, #16
 80076ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	461a      	mov	r2, r3
 80076f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076f8:	61fb      	str	r3, [r7, #28]
 80076fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fc:	69b9      	ldr	r1, [r7, #24]
 80076fe:	69fa      	ldr	r2, [r7, #28]
 8007700:	e841 2300 	strex	r3, r2, [r1]
 8007704:	617b      	str	r3, [r7, #20]
   return(result);
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d1e6      	bne.n	80076da <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800770c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800770e:	2200      	movs	r2, #0
 8007710:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007712:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007714:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007716:	2b01      	cmp	r3, #1
 8007718:	d107      	bne.n	800772a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800771a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800771c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007720:	4619      	mov	r1, r3
 8007722:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007724:	f7ff f908 	bl	8006938 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007728:	e002      	b.n	8007730 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800772a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800772c:	f7ff f8e6 	bl	80068fc <HAL_UART_RxCpltCallback>
}
 8007730:	bf00      	nop
 8007732:	3770      	adds	r7, #112	@ 0x70
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007744:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2201      	movs	r2, #1
 800774a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007750:	2b01      	cmp	r3, #1
 8007752:	d109      	bne.n	8007768 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800775a:	085b      	lsrs	r3, r3, #1
 800775c:	b29b      	uxth	r3, r3
 800775e:	4619      	mov	r1, r3
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f7ff f8e9 	bl	8006938 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007766:	e002      	b.n	800776e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f7ff f8d1 	bl	8006910 <HAL_UART_RxHalfCpltCallback>
}
 800776e:	bf00      	nop
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b086      	sub	sp, #24
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007782:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800778a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007792:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800779e:	2b80      	cmp	r3, #128	@ 0x80
 80077a0:	d109      	bne.n	80077b6 <UART_DMAError+0x40>
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	2b21      	cmp	r3, #33	@ 0x21
 80077a6:	d106      	bne.n	80077b6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80077b0:	6978      	ldr	r0, [r7, #20]
 80077b2:	f7ff fe29 	bl	8007408 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077c0:	2b40      	cmp	r3, #64	@ 0x40
 80077c2:	d109      	bne.n	80077d8 <UART_DMAError+0x62>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2b22      	cmp	r3, #34	@ 0x22
 80077c8:	d106      	bne.n	80077d8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80077d2:	6978      	ldr	r0, [r7, #20]
 80077d4:	f7ff fe59 	bl	800748a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077de:	f043 0210 	orr.w	r2, r3, #16
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077e8:	6978      	ldr	r0, [r7, #20]
 80077ea:	f7ff f89b 	bl	8006924 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077ee:	bf00      	nop
 80077f0:	3718      	adds	r7, #24
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b084      	sub	sp, #16
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007802:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f7ff f889 	bl	8006924 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007812:	bf00      	nop
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b088      	sub	sp, #32
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	e853 3f00 	ldrex	r3, [r3]
 800782e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007836:	61fb      	str	r3, [r7, #28]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	461a      	mov	r2, r3
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	61bb      	str	r3, [r7, #24]
 8007842:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007844:	6979      	ldr	r1, [r7, #20]
 8007846:	69ba      	ldr	r2, [r7, #24]
 8007848:	e841 2300 	strex	r3, r2, [r1]
 800784c:	613b      	str	r3, [r7, #16]
   return(result);
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1e6      	bne.n	8007822 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2220      	movs	r2, #32
 8007858:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7ff f836 	bl	80068d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007868:	bf00      	nop
 800786a:	3720      	adds	r7, #32
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	607a      	str	r2, [r7, #4]
 800787c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d101      	bne.n	8007888 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	e058      	b.n	800793a <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800788e:	2b00      	cmp	r3, #0
 8007890:	d106      	bne.n	80078a0 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f7fa ffce 	bl	800283c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2224      	movs	r2, #36	@ 0x24
 80078a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f022 0201 	bic.w	r2, r2, #1
 80078b6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d002      	beq.n	80078c6 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f7ff fb41 	bl	8006f48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f7ff f842 	bl	8006950 <UART_SetConfig>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d101      	bne.n	80078d6 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e031      	b.n	800793a <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	689a      	ldr	r2, [r3, #8]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80078e4:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68ba      	ldr	r2, [r7, #8]
 80078f6:	430a      	orrs	r2, r1
 80078f8:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	055b      	lsls	r3, r3, #21
 80078fe:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	041b      	lsls	r3, r3, #16
 8007904:	697a      	ldr	r2, [r7, #20]
 8007906:	4313      	orrs	r3, r2
 8007908:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8007914:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	6812      	ldr	r2, [r2, #0]
 800791c:	6979      	ldr	r1, [r7, #20]
 800791e:	430b      	orrs	r3, r1
 8007920:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f042 0201 	orr.w	r2, r2, #1
 8007930:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007932:	68f8      	ldr	r0, [r7, #12]
 8007934:	f7ff fbaa 	bl	800708c <UART_CheckIdleState>
 8007938:	4603      	mov	r3, r0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3718      	adds	r7, #24
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007942:	b480      	push	{r7}
 8007944:	b083      	sub	sp, #12
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800794a:	bf00      	nop
 800794c:	370c      	adds	r7, #12
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr

08007956 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007956:	b480      	push	{r7}
 8007958:	b083      	sub	sp, #12
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800795e:	bf00      	nop
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800796a:	b480      	push	{r7}
 800796c:	b083      	sub	sp, #12
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007972:	bf00      	nop
 8007974:	370c      	adds	r7, #12
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800797e:	b480      	push	{r7}
 8007980:	b085      	sub	sp, #20
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800798c:	2b01      	cmp	r3, #1
 800798e:	d101      	bne.n	8007994 <HAL_UARTEx_DisableFifoMode+0x16>
 8007990:	2302      	movs	r3, #2
 8007992:	e027      	b.n	80079e4 <HAL_UARTEx_DisableFifoMode+0x66>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2224      	movs	r2, #36	@ 0x24
 80079a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f022 0201 	bic.w	r2, r2, #1
 80079ba:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80079c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2220      	movs	r2, #32
 80079d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3714      	adds	r7, #20
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d101      	bne.n	8007a08 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a04:	2302      	movs	r3, #2
 8007a06:	e02d      	b.n	8007a64 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2224      	movs	r2, #36	@ 0x24
 8007a14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f022 0201 	bic.w	r2, r2, #1
 8007a2e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	430a      	orrs	r2, r1
 8007a42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f84f 	bl	8007ae8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2220      	movs	r2, #32
 8007a56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3710      	adds	r7, #16
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d101      	bne.n	8007a84 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a80:	2302      	movs	r3, #2
 8007a82:	e02d      	b.n	8007ae0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2224      	movs	r2, #36	@ 0x24
 8007a90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f022 0201 	bic.w	r2, r2, #1
 8007aaa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	683a      	ldr	r2, [r7, #0]
 8007abc:	430a      	orrs	r2, r1
 8007abe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 f811 	bl	8007ae8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2220      	movs	r2, #32
 8007ad2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3710      	adds	r7, #16
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d108      	bne.n	8007b0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b08:	e031      	b.n	8007b6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b0a:	2308      	movs	r3, #8
 8007b0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b0e:	2308      	movs	r3, #8
 8007b10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	0e5b      	lsrs	r3, r3, #25
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	f003 0307 	and.w	r3, r3, #7
 8007b20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	0f5b      	lsrs	r3, r3, #29
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	f003 0307 	and.w	r3, r3, #7
 8007b30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b32:	7bbb      	ldrb	r3, [r7, #14]
 8007b34:	7b3a      	ldrb	r2, [r7, #12]
 8007b36:	4911      	ldr	r1, [pc, #68]	@ (8007b7c <UARTEx_SetNbDataToProcess+0x94>)
 8007b38:	5c8a      	ldrb	r2, [r1, r2]
 8007b3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007b3e:	7b3a      	ldrb	r2, [r7, #12]
 8007b40:	490f      	ldr	r1, [pc, #60]	@ (8007b80 <UARTEx_SetNbDataToProcess+0x98>)
 8007b42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b44:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b50:	7bfb      	ldrb	r3, [r7, #15]
 8007b52:	7b7a      	ldrb	r2, [r7, #13]
 8007b54:	4909      	ldr	r1, [pc, #36]	@ (8007b7c <UARTEx_SetNbDataToProcess+0x94>)
 8007b56:	5c8a      	ldrb	r2, [r1, r2]
 8007b58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007b5c:	7b7a      	ldrb	r2, [r7, #13]
 8007b5e:	4908      	ldr	r1, [pc, #32]	@ (8007b80 <UARTEx_SetNbDataToProcess+0x98>)
 8007b60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b62:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007b6e:	bf00      	nop
 8007b70:	3714      	adds	r7, #20
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	080187fc 	.word	0x080187fc
 8007b80:	08018804 	.word	0x08018804

08007b84 <__NVIC_SetPriority>:
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	6039      	str	r1, [r7, #0]
 8007b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	db0a      	blt.n	8007bae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	b2da      	uxtb	r2, r3
 8007b9c:	490c      	ldr	r1, [pc, #48]	@ (8007bd0 <__NVIC_SetPriority+0x4c>)
 8007b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ba2:	0112      	lsls	r2, r2, #4
 8007ba4:	b2d2      	uxtb	r2, r2
 8007ba6:	440b      	add	r3, r1
 8007ba8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007bac:	e00a      	b.n	8007bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	b2da      	uxtb	r2, r3
 8007bb2:	4908      	ldr	r1, [pc, #32]	@ (8007bd4 <__NVIC_SetPriority+0x50>)
 8007bb4:	79fb      	ldrb	r3, [r7, #7]
 8007bb6:	f003 030f 	and.w	r3, r3, #15
 8007bba:	3b04      	subs	r3, #4
 8007bbc:	0112      	lsls	r2, r2, #4
 8007bbe:	b2d2      	uxtb	r2, r2
 8007bc0:	440b      	add	r3, r1
 8007bc2:	761a      	strb	r2, [r3, #24]
}
 8007bc4:	bf00      	nop
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr
 8007bd0:	e000e100 	.word	0xe000e100
 8007bd4:	e000ed00 	.word	0xe000ed00

08007bd8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007bdc:	4b05      	ldr	r3, [pc, #20]	@ (8007bf4 <SysTick_Handler+0x1c>)
 8007bde:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007be0:	f001 fd40 	bl	8009664 <xTaskGetSchedulerState>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d001      	beq.n	8007bee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007bea:	f002 fb35 	bl	800a258 <xPortSysTickHandler>
  }
}
 8007bee:	bf00      	nop
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	e000e010 	.word	0xe000e010

08007bf8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	f06f 0004 	mvn.w	r0, #4
 8007c02:	f7ff ffbf 	bl	8007b84 <__NVIC_SetPriority>
#endif
}
 8007c06:	bf00      	nop
 8007c08:	bd80      	pop	{r7, pc}
	...

08007c0c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c12:	f3ef 8305 	mrs	r3, IPSR
 8007c16:	603b      	str	r3, [r7, #0]
  return(result);
 8007c18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d003      	beq.n	8007c26 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007c1e:	f06f 0305 	mvn.w	r3, #5
 8007c22:	607b      	str	r3, [r7, #4]
 8007c24:	e00c      	b.n	8007c40 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007c26:	4b0a      	ldr	r3, [pc, #40]	@ (8007c50 <osKernelInitialize+0x44>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d105      	bne.n	8007c3a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007c2e:	4b08      	ldr	r3, [pc, #32]	@ (8007c50 <osKernelInitialize+0x44>)
 8007c30:	2201      	movs	r2, #1
 8007c32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007c34:	2300      	movs	r3, #0
 8007c36:	607b      	str	r3, [r7, #4]
 8007c38:	e002      	b.n	8007c40 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007c3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007c3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007c40:	687b      	ldr	r3, [r7, #4]
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	370c      	adds	r7, #12
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop
 8007c50:	200048e4 	.word	0x200048e4

08007c54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c5a:	f3ef 8305 	mrs	r3, IPSR
 8007c5e:	603b      	str	r3, [r7, #0]
  return(result);
 8007c60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d003      	beq.n	8007c6e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007c66:	f06f 0305 	mvn.w	r3, #5
 8007c6a:	607b      	str	r3, [r7, #4]
 8007c6c:	e010      	b.n	8007c90 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8007c9c <osKernelStart+0x48>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d109      	bne.n	8007c8a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007c76:	f7ff ffbf 	bl	8007bf8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007c7a:	4b08      	ldr	r3, [pc, #32]	@ (8007c9c <osKernelStart+0x48>)
 8007c7c:	2202      	movs	r2, #2
 8007c7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007c80:	f001 f87a 	bl	8008d78 <vTaskStartScheduler>
      stat = osOK;
 8007c84:	2300      	movs	r3, #0
 8007c86:	607b      	str	r3, [r7, #4]
 8007c88:	e002      	b.n	8007c90 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007c8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007c8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007c90:	687b      	ldr	r3, [r7, #4]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	200048e4 	.word	0x200048e4

08007ca0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b08e      	sub	sp, #56	@ 0x38
 8007ca4:	af04      	add	r7, sp, #16
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007cac:	2300      	movs	r3, #0
 8007cae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cb0:	f3ef 8305 	mrs	r3, IPSR
 8007cb4:	617b      	str	r3, [r7, #20]
  return(result);
 8007cb6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d17e      	bne.n	8007dba <osThreadNew+0x11a>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d07b      	beq.n	8007dba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007cc2:	2380      	movs	r3, #128	@ 0x80
 8007cc4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007cc6:	2318      	movs	r3, #24
 8007cc8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007cce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007cd2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d045      	beq.n	8007d66 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d002      	beq.n	8007ce8 <osThreadNew+0x48>
        name = attr->name;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d002      	beq.n	8007cf6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d008      	beq.n	8007d0e <osThreadNew+0x6e>
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	2b38      	cmp	r3, #56	@ 0x38
 8007d00:	d805      	bhi.n	8007d0e <osThreadNew+0x6e>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	f003 0301 	and.w	r3, r3, #1
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d001      	beq.n	8007d12 <osThreadNew+0x72>
        return (NULL);
 8007d0e:	2300      	movs	r3, #0
 8007d10:	e054      	b.n	8007dbc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	695b      	ldr	r3, [r3, #20]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d003      	beq.n	8007d22 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	089b      	lsrs	r3, r3, #2
 8007d20:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00e      	beq.n	8007d48 <osThreadNew+0xa8>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	2b5b      	cmp	r3, #91	@ 0x5b
 8007d30:	d90a      	bls.n	8007d48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d006      	beq.n	8007d48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d002      	beq.n	8007d48 <osThreadNew+0xa8>
        mem = 1;
 8007d42:	2301      	movs	r3, #1
 8007d44:	61bb      	str	r3, [r7, #24]
 8007d46:	e010      	b.n	8007d6a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d10c      	bne.n	8007d6a <osThreadNew+0xca>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d108      	bne.n	8007d6a <osThreadNew+0xca>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d104      	bne.n	8007d6a <osThreadNew+0xca>
          mem = 0;
 8007d60:	2300      	movs	r3, #0
 8007d62:	61bb      	str	r3, [r7, #24]
 8007d64:	e001      	b.n	8007d6a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007d66:	2300      	movs	r3, #0
 8007d68:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d110      	bne.n	8007d92 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007d78:	9202      	str	r2, [sp, #8]
 8007d7a:	9301      	str	r3, [sp, #4]
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	9300      	str	r3, [sp, #0]
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	6a3a      	ldr	r2, [r7, #32]
 8007d84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f000 fe1a 	bl	80089c0 <xTaskCreateStatic>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	613b      	str	r3, [r7, #16]
 8007d90:	e013      	b.n	8007dba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d110      	bne.n	8007dba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007d98:	6a3b      	ldr	r3, [r7, #32]
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	f107 0310 	add.w	r3, r7, #16
 8007da0:	9301      	str	r3, [sp, #4]
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	9300      	str	r3, [sp, #0]
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f000 fe68 	bl	8008a80 <xTaskCreate>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d001      	beq.n	8007dba <osThreadNew+0x11a>
            hTask = NULL;
 8007db6:	2300      	movs	r3, #0
 8007db8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007dba:	693b      	ldr	r3, [r7, #16]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3728      	adds	r7, #40	@ 0x28
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dcc:	f3ef 8305 	mrs	r3, IPSR
 8007dd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8007dd2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d003      	beq.n	8007de0 <osDelay+0x1c>
    stat = osErrorISR;
 8007dd8:	f06f 0305 	mvn.w	r3, #5
 8007ddc:	60fb      	str	r3, [r7, #12]
 8007dde:	e007      	b.n	8007df0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007de0:	2300      	movs	r3, #0
 8007de2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d002      	beq.n	8007df0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 ff8e 	bl	8008d0c <vTaskDelay>
    }
  }

  return (stat);
 8007df0:	68fb      	ldr	r3, [r7, #12]
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
	...

08007dfc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	4a07      	ldr	r2, [pc, #28]	@ (8007e28 <vApplicationGetIdleTaskMemory+0x2c>)
 8007e0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	4a06      	ldr	r2, [pc, #24]	@ (8007e2c <vApplicationGetIdleTaskMemory+0x30>)
 8007e12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2280      	movs	r2, #128	@ 0x80
 8007e18:	601a      	str	r2, [r3, #0]
}
 8007e1a:	bf00      	nop
 8007e1c:	3714      	adds	r7, #20
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	200048e8 	.word	0x200048e8
 8007e2c:	20004944 	.word	0x20004944

08007e30 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	4a07      	ldr	r2, [pc, #28]	@ (8007e5c <vApplicationGetTimerTaskMemory+0x2c>)
 8007e40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	4a06      	ldr	r2, [pc, #24]	@ (8007e60 <vApplicationGetTimerTaskMemory+0x30>)
 8007e46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007e4e:	601a      	str	r2, [r3, #0]
}
 8007e50:	bf00      	nop
 8007e52:	3714      	adds	r7, #20
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr
 8007e5c:	20004b44 	.word	0x20004b44
 8007e60:	20004ba0 	.word	0x20004ba0

08007e64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f103 0208 	add.w	r2, r3, #8
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f103 0208 	add.w	r2, r3, #8
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f103 0208 	add.w	r2, r3, #8
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e98:	bf00      	nop
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007eb2:	bf00      	nop
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr

08007ebe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	b085      	sub	sp, #20
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
 8007ec6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	689a      	ldr	r2, [r3, #8]
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	683a      	ldr	r2, [r7, #0]
 8007ee2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	683a      	ldr	r2, [r7, #0]
 8007ee8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	1c5a      	adds	r2, r3, #1
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	601a      	str	r2, [r3, #0]
}
 8007efa:	bf00      	nop
 8007efc:	3714      	adds	r7, #20
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr

08007f06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f06:	b480      	push	{r7}
 8007f08:	b085      	sub	sp, #20
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
 8007f0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f1c:	d103      	bne.n	8007f26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	60fb      	str	r3, [r7, #12]
 8007f24:	e00c      	b.n	8007f40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	3308      	adds	r3, #8
 8007f2a:	60fb      	str	r3, [r7, #12]
 8007f2c:	e002      	b.n	8007f34 <vListInsert+0x2e>
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	60fb      	str	r3, [r7, #12]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d2f6      	bcs.n	8007f2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	685a      	ldr	r2, [r3, #4]
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	683a      	ldr	r2, [r7, #0]
 8007f4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	68fa      	ldr	r2, [r7, #12]
 8007f54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	683a      	ldr	r2, [r7, #0]
 8007f5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	1c5a      	adds	r2, r3, #1
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	601a      	str	r2, [r3, #0]
}
 8007f6c:	bf00      	nop
 8007f6e:	3714      	adds	r7, #20
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	6892      	ldr	r2, [r2, #8]
 8007f8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	6852      	ldr	r2, [r2, #4]
 8007f98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d103      	bne.n	8007fac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	689a      	ldr	r2, [r3, #8]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	1e5a      	subs	r2, r3, #1
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3714      	adds	r7, #20
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d10b      	bne.n	8007ff8 <xQueueGenericReset+0x2c>
	__asm volatile
 8007fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe4:	f383 8811 	msr	BASEPRI, r3
 8007fe8:	f3bf 8f6f 	isb	sy
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	60bb      	str	r3, [r7, #8]
}
 8007ff2:	bf00      	nop
 8007ff4:	bf00      	nop
 8007ff6:	e7fd      	b.n	8007ff4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007ff8:	f002 f89e 	bl	800a138 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008004:	68f9      	ldr	r1, [r7, #12]
 8008006:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008008:	fb01 f303 	mul.w	r3, r1, r3
 800800c:	441a      	add	r2, r3
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2200      	movs	r2, #0
 8008016:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008028:	3b01      	subs	r3, #1
 800802a:	68f9      	ldr	r1, [r7, #12]
 800802c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800802e:	fb01 f303 	mul.w	r3, r1, r3
 8008032:	441a      	add	r2, r3
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	22ff      	movs	r2, #255	@ 0xff
 800803c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	22ff      	movs	r2, #255	@ 0xff
 8008044:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d114      	bne.n	8008078 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d01a      	beq.n	800808c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	3310      	adds	r3, #16
 800805a:	4618      	mov	r0, r3
 800805c:	f001 f91a 	bl	8009294 <xTaskRemoveFromEventList>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d012      	beq.n	800808c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008066:	4b0d      	ldr	r3, [pc, #52]	@ (800809c <xQueueGenericReset+0xd0>)
 8008068:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800806c:	601a      	str	r2, [r3, #0]
 800806e:	f3bf 8f4f 	dsb	sy
 8008072:	f3bf 8f6f 	isb	sy
 8008076:	e009      	b.n	800808c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	3310      	adds	r3, #16
 800807c:	4618      	mov	r0, r3
 800807e:	f7ff fef1 	bl	8007e64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	3324      	adds	r3, #36	@ 0x24
 8008086:	4618      	mov	r0, r3
 8008088:	f7ff feec 	bl	8007e64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800808c:	f002 f886 	bl	800a19c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008090:	2301      	movs	r3, #1
}
 8008092:	4618      	mov	r0, r3
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	e000ed04 	.word	0xe000ed04

080080a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b08e      	sub	sp, #56	@ 0x38
 80080a4:	af02      	add	r7, sp, #8
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	60b9      	str	r1, [r7, #8]
 80080aa:	607a      	str	r2, [r7, #4]
 80080ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d10b      	bne.n	80080cc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80080b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b8:	f383 8811 	msr	BASEPRI, r3
 80080bc:	f3bf 8f6f 	isb	sy
 80080c0:	f3bf 8f4f 	dsb	sy
 80080c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80080c6:	bf00      	nop
 80080c8:	bf00      	nop
 80080ca:	e7fd      	b.n	80080c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10b      	bne.n	80080ea <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80080d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d6:	f383 8811 	msr	BASEPRI, r3
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80080e4:	bf00      	nop
 80080e6:	bf00      	nop
 80080e8:	e7fd      	b.n	80080e6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d002      	beq.n	80080f6 <xQueueGenericCreateStatic+0x56>
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d001      	beq.n	80080fa <xQueueGenericCreateStatic+0x5a>
 80080f6:	2301      	movs	r3, #1
 80080f8:	e000      	b.n	80080fc <xQueueGenericCreateStatic+0x5c>
 80080fa:	2300      	movs	r3, #0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10b      	bne.n	8008118 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008104:	f383 8811 	msr	BASEPRI, r3
 8008108:	f3bf 8f6f 	isb	sy
 800810c:	f3bf 8f4f 	dsb	sy
 8008110:	623b      	str	r3, [r7, #32]
}
 8008112:	bf00      	nop
 8008114:	bf00      	nop
 8008116:	e7fd      	b.n	8008114 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d102      	bne.n	8008124 <xQueueGenericCreateStatic+0x84>
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d101      	bne.n	8008128 <xQueueGenericCreateStatic+0x88>
 8008124:	2301      	movs	r3, #1
 8008126:	e000      	b.n	800812a <xQueueGenericCreateStatic+0x8a>
 8008128:	2300      	movs	r3, #0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d10b      	bne.n	8008146 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800812e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008132:	f383 8811 	msr	BASEPRI, r3
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	61fb      	str	r3, [r7, #28]
}
 8008140:	bf00      	nop
 8008142:	bf00      	nop
 8008144:	e7fd      	b.n	8008142 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008146:	2350      	movs	r3, #80	@ 0x50
 8008148:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	2b50      	cmp	r3, #80	@ 0x50
 800814e:	d00b      	beq.n	8008168 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008154:	f383 8811 	msr	BASEPRI, r3
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	61bb      	str	r3, [r7, #24]
}
 8008162:	bf00      	nop
 8008164:	bf00      	nop
 8008166:	e7fd      	b.n	8008164 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008168:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800816e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00d      	beq.n	8008190 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008176:	2201      	movs	r2, #1
 8008178:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800817c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008182:	9300      	str	r3, [sp, #0]
 8008184:	4613      	mov	r3, r2
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	68b9      	ldr	r1, [r7, #8]
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f000 f805 	bl	800819a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008192:	4618      	mov	r0, r3
 8008194:	3730      	adds	r7, #48	@ 0x30
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b084      	sub	sp, #16
 800819e:	af00      	add	r7, sp, #0
 80081a0:	60f8      	str	r0, [r7, #12]
 80081a2:	60b9      	str	r1, [r7, #8]
 80081a4:	607a      	str	r2, [r7, #4]
 80081a6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d103      	bne.n	80081b6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	69ba      	ldr	r2, [r7, #24]
 80081b2:	601a      	str	r2, [r3, #0]
 80081b4:	e002      	b.n	80081bc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	68fa      	ldr	r2, [r7, #12]
 80081c0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081c8:	2101      	movs	r1, #1
 80081ca:	69b8      	ldr	r0, [r7, #24]
 80081cc:	f7ff fefe 	bl	8007fcc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	78fa      	ldrb	r2, [r7, #3]
 80081d4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80081d8:	bf00      	nop
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b08e      	sub	sp, #56	@ 0x38
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]
 80081ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80081ee:	2300      	movs	r3, #0
 80081f0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80081f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10b      	bne.n	8008214 <xQueueGenericSend+0x34>
	__asm volatile
 80081fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008200:	f383 8811 	msr	BASEPRI, r3
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800820e:	bf00      	nop
 8008210:	bf00      	nop
 8008212:	e7fd      	b.n	8008210 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d103      	bne.n	8008222 <xQueueGenericSend+0x42>
 800821a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800821e:	2b00      	cmp	r3, #0
 8008220:	d101      	bne.n	8008226 <xQueueGenericSend+0x46>
 8008222:	2301      	movs	r3, #1
 8008224:	e000      	b.n	8008228 <xQueueGenericSend+0x48>
 8008226:	2300      	movs	r3, #0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10b      	bne.n	8008244 <xQueueGenericSend+0x64>
	__asm volatile
 800822c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008230:	f383 8811 	msr	BASEPRI, r3
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800823e:	bf00      	nop
 8008240:	bf00      	nop
 8008242:	e7fd      	b.n	8008240 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	2b02      	cmp	r3, #2
 8008248:	d103      	bne.n	8008252 <xQueueGenericSend+0x72>
 800824a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800824c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800824e:	2b01      	cmp	r3, #1
 8008250:	d101      	bne.n	8008256 <xQueueGenericSend+0x76>
 8008252:	2301      	movs	r3, #1
 8008254:	e000      	b.n	8008258 <xQueueGenericSend+0x78>
 8008256:	2300      	movs	r3, #0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10b      	bne.n	8008274 <xQueueGenericSend+0x94>
	__asm volatile
 800825c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008260:	f383 8811 	msr	BASEPRI, r3
 8008264:	f3bf 8f6f 	isb	sy
 8008268:	f3bf 8f4f 	dsb	sy
 800826c:	623b      	str	r3, [r7, #32]
}
 800826e:	bf00      	nop
 8008270:	bf00      	nop
 8008272:	e7fd      	b.n	8008270 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008274:	f001 f9f6 	bl	8009664 <xTaskGetSchedulerState>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d102      	bne.n	8008284 <xQueueGenericSend+0xa4>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d101      	bne.n	8008288 <xQueueGenericSend+0xa8>
 8008284:	2301      	movs	r3, #1
 8008286:	e000      	b.n	800828a <xQueueGenericSend+0xaa>
 8008288:	2300      	movs	r3, #0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d10b      	bne.n	80082a6 <xQueueGenericSend+0xc6>
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	61fb      	str	r3, [r7, #28]
}
 80082a0:	bf00      	nop
 80082a2:	bf00      	nop
 80082a4:	e7fd      	b.n	80082a2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80082a6:	f001 ff47 	bl	800a138 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80082aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d302      	bcc.n	80082bc <xQueueGenericSend+0xdc>
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d129      	bne.n	8008310 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	68b9      	ldr	r1, [r7, #8]
 80082c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082c2:	f000 fa0f 	bl	80086e4 <prvCopyDataToQueue>
 80082c6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d010      	beq.n	80082f2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d2:	3324      	adds	r3, #36	@ 0x24
 80082d4:	4618      	mov	r0, r3
 80082d6:	f000 ffdd 	bl	8009294 <xTaskRemoveFromEventList>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d013      	beq.n	8008308 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80082e0:	4b3f      	ldr	r3, [pc, #252]	@ (80083e0 <xQueueGenericSend+0x200>)
 80082e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082e6:	601a      	str	r2, [r3, #0]
 80082e8:	f3bf 8f4f 	dsb	sy
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	e00a      	b.n	8008308 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80082f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d007      	beq.n	8008308 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80082f8:	4b39      	ldr	r3, [pc, #228]	@ (80083e0 <xQueueGenericSend+0x200>)
 80082fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082fe:	601a      	str	r2, [r3, #0]
 8008300:	f3bf 8f4f 	dsb	sy
 8008304:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008308:	f001 ff48 	bl	800a19c <vPortExitCritical>
				return pdPASS;
 800830c:	2301      	movs	r3, #1
 800830e:	e063      	b.n	80083d8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d103      	bne.n	800831e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008316:	f001 ff41 	bl	800a19c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800831a:	2300      	movs	r3, #0
 800831c:	e05c      	b.n	80083d8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800831e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008320:	2b00      	cmp	r3, #0
 8008322:	d106      	bne.n	8008332 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008324:	f107 0314 	add.w	r3, r7, #20
 8008328:	4618      	mov	r0, r3
 800832a:	f001 f83f 	bl	80093ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800832e:	2301      	movs	r3, #1
 8008330:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008332:	f001 ff33 	bl	800a19c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008336:	f000 fd87 	bl	8008e48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800833a:	f001 fefd 	bl	800a138 <vPortEnterCritical>
 800833e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008340:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008344:	b25b      	sxtb	r3, r3
 8008346:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800834a:	d103      	bne.n	8008354 <xQueueGenericSend+0x174>
 800834c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800834e:	2200      	movs	r2, #0
 8008350:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008356:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800835a:	b25b      	sxtb	r3, r3
 800835c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008360:	d103      	bne.n	800836a <xQueueGenericSend+0x18a>
 8008362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008364:	2200      	movs	r2, #0
 8008366:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800836a:	f001 ff17 	bl	800a19c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800836e:	1d3a      	adds	r2, r7, #4
 8008370:	f107 0314 	add.w	r3, r7, #20
 8008374:	4611      	mov	r1, r2
 8008376:	4618      	mov	r0, r3
 8008378:	f001 f82e 	bl	80093d8 <xTaskCheckForTimeOut>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d124      	bne.n	80083cc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008382:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008384:	f000 faa6 	bl	80088d4 <prvIsQueueFull>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d018      	beq.n	80083c0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800838e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008390:	3310      	adds	r3, #16
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	4611      	mov	r1, r2
 8008396:	4618      	mov	r0, r3
 8008398:	f000 ff2a 	bl	80091f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800839c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800839e:	f000 fa31 	bl	8008804 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80083a2:	f000 fd5f 	bl	8008e64 <xTaskResumeAll>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f47f af7c 	bne.w	80082a6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80083ae:	4b0c      	ldr	r3, [pc, #48]	@ (80083e0 <xQueueGenericSend+0x200>)
 80083b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083b4:	601a      	str	r2, [r3, #0]
 80083b6:	f3bf 8f4f 	dsb	sy
 80083ba:	f3bf 8f6f 	isb	sy
 80083be:	e772      	b.n	80082a6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80083c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80083c2:	f000 fa1f 	bl	8008804 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083c6:	f000 fd4d 	bl	8008e64 <xTaskResumeAll>
 80083ca:	e76c      	b.n	80082a6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80083cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80083ce:	f000 fa19 	bl	8008804 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083d2:	f000 fd47 	bl	8008e64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80083d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3738      	adds	r7, #56	@ 0x38
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	e000ed04 	.word	0xe000ed04

080083e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b090      	sub	sp, #64	@ 0x40
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
 80083f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80083f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10b      	bne.n	8008414 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80083fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008400:	f383 8811 	msr	BASEPRI, r3
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800840e:	bf00      	nop
 8008410:	bf00      	nop
 8008412:	e7fd      	b.n	8008410 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d103      	bne.n	8008422 <xQueueGenericSendFromISR+0x3e>
 800841a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800841c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800841e:	2b00      	cmp	r3, #0
 8008420:	d101      	bne.n	8008426 <xQueueGenericSendFromISR+0x42>
 8008422:	2301      	movs	r3, #1
 8008424:	e000      	b.n	8008428 <xQueueGenericSendFromISR+0x44>
 8008426:	2300      	movs	r3, #0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d10b      	bne.n	8008444 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800842c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008430:	f383 8811 	msr	BASEPRI, r3
 8008434:	f3bf 8f6f 	isb	sy
 8008438:	f3bf 8f4f 	dsb	sy
 800843c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800843e:	bf00      	nop
 8008440:	bf00      	nop
 8008442:	e7fd      	b.n	8008440 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	2b02      	cmp	r3, #2
 8008448:	d103      	bne.n	8008452 <xQueueGenericSendFromISR+0x6e>
 800844a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800844c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800844e:	2b01      	cmp	r3, #1
 8008450:	d101      	bne.n	8008456 <xQueueGenericSendFromISR+0x72>
 8008452:	2301      	movs	r3, #1
 8008454:	e000      	b.n	8008458 <xQueueGenericSendFromISR+0x74>
 8008456:	2300      	movs	r3, #0
 8008458:	2b00      	cmp	r3, #0
 800845a:	d10b      	bne.n	8008474 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800845c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008460:	f383 8811 	msr	BASEPRI, r3
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	623b      	str	r3, [r7, #32]
}
 800846e:	bf00      	nop
 8008470:	bf00      	nop
 8008472:	e7fd      	b.n	8008470 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008474:	f001 ff40 	bl	800a2f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008478:	f3ef 8211 	mrs	r2, BASEPRI
 800847c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008480:	f383 8811 	msr	BASEPRI, r3
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	61fa      	str	r2, [r7, #28]
 800848e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008490:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008492:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008496:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800849a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800849c:	429a      	cmp	r2, r3
 800849e:	d302      	bcc.n	80084a6 <xQueueGenericSendFromISR+0xc2>
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d12f      	bne.n	8008506 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80084a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80084b6:	683a      	ldr	r2, [r7, #0]
 80084b8:	68b9      	ldr	r1, [r7, #8]
 80084ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80084bc:	f000 f912 	bl	80086e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80084c0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80084c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80084c8:	d112      	bne.n	80084f0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d016      	beq.n	8008500 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d4:	3324      	adds	r3, #36	@ 0x24
 80084d6:	4618      	mov	r0, r3
 80084d8:	f000 fedc 	bl	8009294 <xTaskRemoveFromEventList>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00e      	beq.n	8008500 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00b      	beq.n	8008500 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	601a      	str	r2, [r3, #0]
 80084ee:	e007      	b.n	8008500 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80084f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80084f4:	3301      	adds	r3, #1
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	b25a      	sxtb	r2, r3
 80084fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008500:	2301      	movs	r3, #1
 8008502:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008504:	e001      	b.n	800850a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008506:	2300      	movs	r3, #0
 8008508:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800850a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800850c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008514:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008518:	4618      	mov	r0, r3
 800851a:	3740      	adds	r7, #64	@ 0x40
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b08c      	sub	sp, #48	@ 0x30
 8008524:	af00      	add	r7, sp, #0
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800852c:	2300      	movs	r3, #0
 800852e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008536:	2b00      	cmp	r3, #0
 8008538:	d10b      	bne.n	8008552 <xQueueReceive+0x32>
	__asm volatile
 800853a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800853e:	f383 8811 	msr	BASEPRI, r3
 8008542:	f3bf 8f6f 	isb	sy
 8008546:	f3bf 8f4f 	dsb	sy
 800854a:	623b      	str	r3, [r7, #32]
}
 800854c:	bf00      	nop
 800854e:	bf00      	nop
 8008550:	e7fd      	b.n	800854e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d103      	bne.n	8008560 <xQueueReceive+0x40>
 8008558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800855a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800855c:	2b00      	cmp	r3, #0
 800855e:	d101      	bne.n	8008564 <xQueueReceive+0x44>
 8008560:	2301      	movs	r3, #1
 8008562:	e000      	b.n	8008566 <xQueueReceive+0x46>
 8008564:	2300      	movs	r3, #0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d10b      	bne.n	8008582 <xQueueReceive+0x62>
	__asm volatile
 800856a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800856e:	f383 8811 	msr	BASEPRI, r3
 8008572:	f3bf 8f6f 	isb	sy
 8008576:	f3bf 8f4f 	dsb	sy
 800857a:	61fb      	str	r3, [r7, #28]
}
 800857c:	bf00      	nop
 800857e:	bf00      	nop
 8008580:	e7fd      	b.n	800857e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008582:	f001 f86f 	bl	8009664 <xTaskGetSchedulerState>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d102      	bne.n	8008592 <xQueueReceive+0x72>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d101      	bne.n	8008596 <xQueueReceive+0x76>
 8008592:	2301      	movs	r3, #1
 8008594:	e000      	b.n	8008598 <xQueueReceive+0x78>
 8008596:	2300      	movs	r3, #0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d10b      	bne.n	80085b4 <xQueueReceive+0x94>
	__asm volatile
 800859c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a0:	f383 8811 	msr	BASEPRI, r3
 80085a4:	f3bf 8f6f 	isb	sy
 80085a8:	f3bf 8f4f 	dsb	sy
 80085ac:	61bb      	str	r3, [r7, #24]
}
 80085ae:	bf00      	nop
 80085b0:	bf00      	nop
 80085b2:	e7fd      	b.n	80085b0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80085b4:	f001 fdc0 	bl	800a138 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085bc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d01f      	beq.n	8008604 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80085c4:	68b9      	ldr	r1, [r7, #8]
 80085c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085c8:	f000 f8f6 	bl	80087b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80085cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ce:	1e5a      	subs	r2, r3, #1
 80085d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d6:	691b      	ldr	r3, [r3, #16]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d00f      	beq.n	80085fc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085de:	3310      	adds	r3, #16
 80085e0:	4618      	mov	r0, r3
 80085e2:	f000 fe57 	bl	8009294 <xTaskRemoveFromEventList>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d007      	beq.n	80085fc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80085ec:	4b3c      	ldr	r3, [pc, #240]	@ (80086e0 <xQueueReceive+0x1c0>)
 80085ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085f2:	601a      	str	r2, [r3, #0]
 80085f4:	f3bf 8f4f 	dsb	sy
 80085f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80085fc:	f001 fdce 	bl	800a19c <vPortExitCritical>
				return pdPASS;
 8008600:	2301      	movs	r3, #1
 8008602:	e069      	b.n	80086d8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d103      	bne.n	8008612 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800860a:	f001 fdc7 	bl	800a19c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800860e:	2300      	movs	r3, #0
 8008610:	e062      	b.n	80086d8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008614:	2b00      	cmp	r3, #0
 8008616:	d106      	bne.n	8008626 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008618:	f107 0310 	add.w	r3, r7, #16
 800861c:	4618      	mov	r0, r3
 800861e:	f000 fec5 	bl	80093ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008622:	2301      	movs	r3, #1
 8008624:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008626:	f001 fdb9 	bl	800a19c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800862a:	f000 fc0d 	bl	8008e48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800862e:	f001 fd83 	bl	800a138 <vPortEnterCritical>
 8008632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008634:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008638:	b25b      	sxtb	r3, r3
 800863a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800863e:	d103      	bne.n	8008648 <xQueueReceive+0x128>
 8008640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008642:	2200      	movs	r2, #0
 8008644:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800864a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800864e:	b25b      	sxtb	r3, r3
 8008650:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008654:	d103      	bne.n	800865e <xQueueReceive+0x13e>
 8008656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008658:	2200      	movs	r2, #0
 800865a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800865e:	f001 fd9d 	bl	800a19c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008662:	1d3a      	adds	r2, r7, #4
 8008664:	f107 0310 	add.w	r3, r7, #16
 8008668:	4611      	mov	r1, r2
 800866a:	4618      	mov	r0, r3
 800866c:	f000 feb4 	bl	80093d8 <xTaskCheckForTimeOut>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d123      	bne.n	80086be <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008676:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008678:	f000 f916 	bl	80088a8 <prvIsQueueEmpty>
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d017      	beq.n	80086b2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008684:	3324      	adds	r3, #36	@ 0x24
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	4611      	mov	r1, r2
 800868a:	4618      	mov	r0, r3
 800868c:	f000 fdb0 	bl	80091f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008690:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008692:	f000 f8b7 	bl	8008804 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008696:	f000 fbe5 	bl	8008e64 <xTaskResumeAll>
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d189      	bne.n	80085b4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80086a0:	4b0f      	ldr	r3, [pc, #60]	@ (80086e0 <xQueueReceive+0x1c0>)
 80086a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086a6:	601a      	str	r2, [r3, #0]
 80086a8:	f3bf 8f4f 	dsb	sy
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	e780      	b.n	80085b4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80086b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086b4:	f000 f8a6 	bl	8008804 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086b8:	f000 fbd4 	bl	8008e64 <xTaskResumeAll>
 80086bc:	e77a      	b.n	80085b4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80086be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086c0:	f000 f8a0 	bl	8008804 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086c4:	f000 fbce 	bl	8008e64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086ca:	f000 f8ed 	bl	80088a8 <prvIsQueueEmpty>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f43f af6f 	beq.w	80085b4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80086d6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3730      	adds	r7, #48	@ 0x30
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	e000ed04 	.word	0xe000ed04

080086e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b086      	sub	sp, #24
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80086f0:	2300      	movs	r3, #0
 80086f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d10d      	bne.n	800871e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d14d      	bne.n	80087a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	4618      	mov	r0, r3
 8008710:	f000 ffc6 	bl	80096a0 <xTaskPriorityDisinherit>
 8008714:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2200      	movs	r2, #0
 800871a:	609a      	str	r2, [r3, #8]
 800871c:	e043      	b.n	80087a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d119      	bne.n	8008758 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6858      	ldr	r0, [r3, #4]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800872c:	461a      	mov	r2, r3
 800872e:	68b9      	ldr	r1, [r7, #8]
 8008730:	f00f f905 	bl	801793e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	685a      	ldr	r2, [r3, #4]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800873c:	441a      	add	r2, r3
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	685a      	ldr	r2, [r3, #4]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	429a      	cmp	r2, r3
 800874c:	d32b      	bcc.n	80087a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	605a      	str	r2, [r3, #4]
 8008756:	e026      	b.n	80087a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	68d8      	ldr	r0, [r3, #12]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008760:	461a      	mov	r2, r3
 8008762:	68b9      	ldr	r1, [r7, #8]
 8008764:	f00f f8eb 	bl	801793e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	68da      	ldr	r2, [r3, #12]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008770:	425b      	negs	r3, r3
 8008772:	441a      	add	r2, r3
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	68da      	ldr	r2, [r3, #12]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	429a      	cmp	r2, r3
 8008782:	d207      	bcs.n	8008794 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	689a      	ldr	r2, [r3, #8]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800878c:	425b      	negs	r3, r3
 800878e:	441a      	add	r2, r3
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2b02      	cmp	r3, #2
 8008798:	d105      	bne.n	80087a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d002      	beq.n	80087a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	3b01      	subs	r3, #1
 80087a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	1c5a      	adds	r2, r3, #1
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80087ae:	697b      	ldr	r3, [r7, #20]
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3718      	adds	r7, #24
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d018      	beq.n	80087fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	68da      	ldr	r2, [r3, #12]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087d2:	441a      	add	r2, r3
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	68da      	ldr	r2, [r3, #12]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d303      	bcc.n	80087ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	68d9      	ldr	r1, [r3, #12]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087f4:	461a      	mov	r2, r3
 80087f6:	6838      	ldr	r0, [r7, #0]
 80087f8:	f00f f8a1 	bl	801793e <memcpy>
	}
}
 80087fc:	bf00      	nop
 80087fe:	3708      	adds	r7, #8
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800880c:	f001 fc94 	bl	800a138 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008816:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008818:	e011      	b.n	800883e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800881e:	2b00      	cmp	r3, #0
 8008820:	d012      	beq.n	8008848 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	3324      	adds	r3, #36	@ 0x24
 8008826:	4618      	mov	r0, r3
 8008828:	f000 fd34 	bl	8009294 <xTaskRemoveFromEventList>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d001      	beq.n	8008836 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008832:	f000 fe35 	bl	80094a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008836:	7bfb      	ldrb	r3, [r7, #15]
 8008838:	3b01      	subs	r3, #1
 800883a:	b2db      	uxtb	r3, r3
 800883c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800883e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008842:	2b00      	cmp	r3, #0
 8008844:	dce9      	bgt.n	800881a <prvUnlockQueue+0x16>
 8008846:	e000      	b.n	800884a <prvUnlockQueue+0x46>
					break;
 8008848:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	22ff      	movs	r2, #255	@ 0xff
 800884e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008852:	f001 fca3 	bl	800a19c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008856:	f001 fc6f 	bl	800a138 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008860:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008862:	e011      	b.n	8008888 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	691b      	ldr	r3, [r3, #16]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d012      	beq.n	8008892 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	3310      	adds	r3, #16
 8008870:	4618      	mov	r0, r3
 8008872:	f000 fd0f 	bl	8009294 <xTaskRemoveFromEventList>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d001      	beq.n	8008880 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800887c:	f000 fe10 	bl	80094a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008880:	7bbb      	ldrb	r3, [r7, #14]
 8008882:	3b01      	subs	r3, #1
 8008884:	b2db      	uxtb	r3, r3
 8008886:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008888:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800888c:	2b00      	cmp	r3, #0
 800888e:	dce9      	bgt.n	8008864 <prvUnlockQueue+0x60>
 8008890:	e000      	b.n	8008894 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008892:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	22ff      	movs	r2, #255	@ 0xff
 8008898:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800889c:	f001 fc7e 	bl	800a19c <vPortExitCritical>
}
 80088a0:	bf00      	nop
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80088b0:	f001 fc42 	bl	800a138 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d102      	bne.n	80088c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80088bc:	2301      	movs	r3, #1
 80088be:	60fb      	str	r3, [r7, #12]
 80088c0:	e001      	b.n	80088c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80088c2:	2300      	movs	r3, #0
 80088c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80088c6:	f001 fc69 	bl	800a19c <vPortExitCritical>

	return xReturn;
 80088ca:	68fb      	ldr	r3, [r7, #12]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80088dc:	f001 fc2c 	bl	800a138 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d102      	bne.n	80088f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80088ec:	2301      	movs	r3, #1
 80088ee:	60fb      	str	r3, [r7, #12]
 80088f0:	e001      	b.n	80088f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80088f2:	2300      	movs	r3, #0
 80088f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80088f6:	f001 fc51 	bl	800a19c <vPortExitCritical>

	return xReturn;
 80088fa:	68fb      	ldr	r3, [r7, #12]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008904:	b480      	push	{r7}
 8008906:	b085      	sub	sp, #20
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800890e:	2300      	movs	r3, #0
 8008910:	60fb      	str	r3, [r7, #12]
 8008912:	e014      	b.n	800893e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008914:	4a0f      	ldr	r2, [pc, #60]	@ (8008954 <vQueueAddToRegistry+0x50>)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d10b      	bne.n	8008938 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008920:	490c      	ldr	r1, [pc, #48]	@ (8008954 <vQueueAddToRegistry+0x50>)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	683a      	ldr	r2, [r7, #0]
 8008926:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800892a:	4a0a      	ldr	r2, [pc, #40]	@ (8008954 <vQueueAddToRegistry+0x50>)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	00db      	lsls	r3, r3, #3
 8008930:	4413      	add	r3, r2
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008936:	e006      	b.n	8008946 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	3301      	adds	r3, #1
 800893c:	60fb      	str	r3, [r7, #12]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2b07      	cmp	r3, #7
 8008942:	d9e7      	bls.n	8008914 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008944:	bf00      	nop
 8008946:	bf00      	nop
 8008948:	3714      	adds	r7, #20
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop
 8008954:	20004fa0 	.word	0x20004fa0

08008958 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008958:	b580      	push	{r7, lr}
 800895a:	b086      	sub	sp, #24
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008968:	f001 fbe6 	bl	800a138 <vPortEnterCritical>
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008972:	b25b      	sxtb	r3, r3
 8008974:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008978:	d103      	bne.n	8008982 <vQueueWaitForMessageRestricted+0x2a>
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	2200      	movs	r2, #0
 800897e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008988:	b25b      	sxtb	r3, r3
 800898a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800898e:	d103      	bne.n	8008998 <vQueueWaitForMessageRestricted+0x40>
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	2200      	movs	r2, #0
 8008994:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008998:	f001 fc00 	bl	800a19c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d106      	bne.n	80089b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	3324      	adds	r3, #36	@ 0x24
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	68b9      	ldr	r1, [r7, #8]
 80089ac:	4618      	mov	r0, r3
 80089ae:	f000 fc45 	bl	800923c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80089b2:	6978      	ldr	r0, [r7, #20]
 80089b4:	f7ff ff26 	bl	8008804 <prvUnlockQueue>
	}
 80089b8:	bf00      	nop
 80089ba:	3718      	adds	r7, #24
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b08e      	sub	sp, #56	@ 0x38
 80089c4:	af04      	add	r7, sp, #16
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	607a      	str	r2, [r7, #4]
 80089cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80089ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d10b      	bne.n	80089ec <xTaskCreateStatic+0x2c>
	__asm volatile
 80089d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d8:	f383 8811 	msr	BASEPRI, r3
 80089dc:	f3bf 8f6f 	isb	sy
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	623b      	str	r3, [r7, #32]
}
 80089e6:	bf00      	nop
 80089e8:	bf00      	nop
 80089ea:	e7fd      	b.n	80089e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80089ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d10b      	bne.n	8008a0a <xTaskCreateStatic+0x4a>
	__asm volatile
 80089f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f6:	f383 8811 	msr	BASEPRI, r3
 80089fa:	f3bf 8f6f 	isb	sy
 80089fe:	f3bf 8f4f 	dsb	sy
 8008a02:	61fb      	str	r3, [r7, #28]
}
 8008a04:	bf00      	nop
 8008a06:	bf00      	nop
 8008a08:	e7fd      	b.n	8008a06 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008a0a:	235c      	movs	r3, #92	@ 0x5c
 8008a0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	2b5c      	cmp	r3, #92	@ 0x5c
 8008a12:	d00b      	beq.n	8008a2c <xTaskCreateStatic+0x6c>
	__asm volatile
 8008a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a18:	f383 8811 	msr	BASEPRI, r3
 8008a1c:	f3bf 8f6f 	isb	sy
 8008a20:	f3bf 8f4f 	dsb	sy
 8008a24:	61bb      	str	r3, [r7, #24]
}
 8008a26:	bf00      	nop
 8008a28:	bf00      	nop
 8008a2a:	e7fd      	b.n	8008a28 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008a2c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d01e      	beq.n	8008a72 <xTaskCreateStatic+0xb2>
 8008a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d01b      	beq.n	8008a72 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a3c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a42:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a46:	2202      	movs	r2, #2
 8008a48:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	9303      	str	r3, [sp, #12]
 8008a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a52:	9302      	str	r3, [sp, #8]
 8008a54:	f107 0314 	add.w	r3, r7, #20
 8008a58:	9301      	str	r3, [sp, #4]
 8008a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a5c:	9300      	str	r3, [sp, #0]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	68b9      	ldr	r1, [r7, #8]
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f000 f850 	bl	8008b0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a6a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008a6c:	f000 f8de 	bl	8008c2c <prvAddNewTaskToReadyList>
 8008a70:	e001      	b.n	8008a76 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008a72:	2300      	movs	r3, #0
 8008a74:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008a76:	697b      	ldr	r3, [r7, #20]
	}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3728      	adds	r7, #40	@ 0x28
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b08c      	sub	sp, #48	@ 0x30
 8008a84:	af04      	add	r7, sp, #16
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	603b      	str	r3, [r7, #0]
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008a90:	88fb      	ldrh	r3, [r7, #6]
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	4618      	mov	r0, r3
 8008a96:	f001 fc71 	bl	800a37c <pvPortMalloc>
 8008a9a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00e      	beq.n	8008ac0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008aa2:	205c      	movs	r0, #92	@ 0x5c
 8008aa4:	f001 fc6a 	bl	800a37c <pvPortMalloc>
 8008aa8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d003      	beq.n	8008ab8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	697a      	ldr	r2, [r7, #20]
 8008ab4:	631a      	str	r2, [r3, #48]	@ 0x30
 8008ab6:	e005      	b.n	8008ac4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008ab8:	6978      	ldr	r0, [r7, #20]
 8008aba:	f001 fd2d 	bl	800a518 <vPortFree>
 8008abe:	e001      	b.n	8008ac4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d017      	beq.n	8008afa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ad2:	88fa      	ldrh	r2, [r7, #6]
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	9303      	str	r3, [sp, #12]
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	9302      	str	r3, [sp, #8]
 8008adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ade:	9301      	str	r3, [sp, #4]
 8008ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae2:	9300      	str	r3, [sp, #0]
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	68b9      	ldr	r1, [r7, #8]
 8008ae8:	68f8      	ldr	r0, [r7, #12]
 8008aea:	f000 f80e 	bl	8008b0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008aee:	69f8      	ldr	r0, [r7, #28]
 8008af0:	f000 f89c 	bl	8008c2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008af4:	2301      	movs	r3, #1
 8008af6:	61bb      	str	r3, [r7, #24]
 8008af8:	e002      	b.n	8008b00 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008afa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008afe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008b00:	69bb      	ldr	r3, [r7, #24]
	}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3720      	adds	r7, #32
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b088      	sub	sp, #32
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	60f8      	str	r0, [r7, #12]
 8008b12:	60b9      	str	r1, [r7, #8]
 8008b14:	607a      	str	r2, [r7, #4]
 8008b16:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	461a      	mov	r2, r3
 8008b22:	21a5      	movs	r1, #165	@ 0xa5
 8008b24:	f00e fe42 	bl	80177ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008b32:	3b01      	subs	r3, #1
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	4413      	add	r3, r2
 8008b38:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	f023 0307 	bic.w	r3, r3, #7
 8008b40:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008b42:	69bb      	ldr	r3, [r7, #24]
 8008b44:	f003 0307 	and.w	r3, r3, #7
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00b      	beq.n	8008b64 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b50:	f383 8811 	msr	BASEPRI, r3
 8008b54:	f3bf 8f6f 	isb	sy
 8008b58:	f3bf 8f4f 	dsb	sy
 8008b5c:	617b      	str	r3, [r7, #20]
}
 8008b5e:	bf00      	nop
 8008b60:	bf00      	nop
 8008b62:	e7fd      	b.n	8008b60 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d01f      	beq.n	8008baa <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	61fb      	str	r3, [r7, #28]
 8008b6e:	e012      	b.n	8008b96 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008b70:	68ba      	ldr	r2, [r7, #8]
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	4413      	add	r3, r2
 8008b76:	7819      	ldrb	r1, [r3, #0]
 8008b78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	3334      	adds	r3, #52	@ 0x34
 8008b80:	460a      	mov	r2, r1
 8008b82:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008b84:	68ba      	ldr	r2, [r7, #8]
 8008b86:	69fb      	ldr	r3, [r7, #28]
 8008b88:	4413      	add	r3, r2
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d006      	beq.n	8008b9e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	3301      	adds	r3, #1
 8008b94:	61fb      	str	r3, [r7, #28]
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	2b0f      	cmp	r3, #15
 8008b9a:	d9e9      	bls.n	8008b70 <prvInitialiseNewTask+0x66>
 8008b9c:	e000      	b.n	8008ba0 <prvInitialiseNewTask+0x96>
			{
				break;
 8008b9e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ba8:	e003      	b.n	8008bb2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bac:	2200      	movs	r2, #0
 8008bae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb4:	2b37      	cmp	r3, #55	@ 0x37
 8008bb6:	d901      	bls.n	8008bbc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008bb8:	2337      	movs	r3, #55	@ 0x37
 8008bba:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008bc0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008bc6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bca:	2200      	movs	r2, #0
 8008bcc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd0:	3304      	adds	r3, #4
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7ff f966 	bl	8007ea4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bda:	3318      	adds	r3, #24
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7ff f961 	bl	8007ea4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008be6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bea:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bf6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c00:	2200      	movs	r2, #0
 8008c02:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c06:	683a      	ldr	r2, [r7, #0]
 8008c08:	68f9      	ldr	r1, [r7, #12]
 8008c0a:	69b8      	ldr	r0, [r7, #24]
 8008c0c:	f001 f966 	bl	8009edc <pxPortInitialiseStack>
 8008c10:	4602      	mov	r2, r0
 8008c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c14:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d002      	beq.n	8008c22 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c22:	bf00      	nop
 8008c24:	3720      	adds	r7, #32
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
	...

08008c2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008c34:	f001 fa80 	bl	800a138 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008c38:	4b2d      	ldr	r3, [pc, #180]	@ (8008cf0 <prvAddNewTaskToReadyList+0xc4>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	4a2c      	ldr	r2, [pc, #176]	@ (8008cf0 <prvAddNewTaskToReadyList+0xc4>)
 8008c40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008c42:	4b2c      	ldr	r3, [pc, #176]	@ (8008cf4 <prvAddNewTaskToReadyList+0xc8>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d109      	bne.n	8008c5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008c4a:	4a2a      	ldr	r2, [pc, #168]	@ (8008cf4 <prvAddNewTaskToReadyList+0xc8>)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008c50:	4b27      	ldr	r3, [pc, #156]	@ (8008cf0 <prvAddNewTaskToReadyList+0xc4>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d110      	bne.n	8008c7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008c58:	f000 fc46 	bl	80094e8 <prvInitialiseTaskLists>
 8008c5c:	e00d      	b.n	8008c7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008c5e:	4b26      	ldr	r3, [pc, #152]	@ (8008cf8 <prvAddNewTaskToReadyList+0xcc>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d109      	bne.n	8008c7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008c66:	4b23      	ldr	r3, [pc, #140]	@ (8008cf4 <prvAddNewTaskToReadyList+0xc8>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d802      	bhi.n	8008c7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008c74:	4a1f      	ldr	r2, [pc, #124]	@ (8008cf4 <prvAddNewTaskToReadyList+0xc8>)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008c7a:	4b20      	ldr	r3, [pc, #128]	@ (8008cfc <prvAddNewTaskToReadyList+0xd0>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	4a1e      	ldr	r2, [pc, #120]	@ (8008cfc <prvAddNewTaskToReadyList+0xd0>)
 8008c82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008c84:	4b1d      	ldr	r3, [pc, #116]	@ (8008cfc <prvAddNewTaskToReadyList+0xd0>)
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c90:	4b1b      	ldr	r3, [pc, #108]	@ (8008d00 <prvAddNewTaskToReadyList+0xd4>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d903      	bls.n	8008ca0 <prvAddNewTaskToReadyList+0x74>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c9c:	4a18      	ldr	r2, [pc, #96]	@ (8008d00 <prvAddNewTaskToReadyList+0xd4>)
 8008c9e:	6013      	str	r3, [r2, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	4413      	add	r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	4a15      	ldr	r2, [pc, #84]	@ (8008d04 <prvAddNewTaskToReadyList+0xd8>)
 8008cae:	441a      	add	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	3304      	adds	r3, #4
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	4610      	mov	r0, r2
 8008cb8:	f7ff f901 	bl	8007ebe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008cbc:	f001 fa6e 	bl	800a19c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8008cf8 <prvAddNewTaskToReadyList+0xcc>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00e      	beq.n	8008ce6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8008cf4 <prvAddNewTaskToReadyList+0xc8>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d207      	bcs.n	8008ce6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8008d08 <prvAddNewTaskToReadyList+0xdc>)
 8008cd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cdc:	601a      	str	r2, [r3, #0]
 8008cde:	f3bf 8f4f 	dsb	sy
 8008ce2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ce6:	bf00      	nop
 8008ce8:	3708      	adds	r7, #8
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	200054b4 	.word	0x200054b4
 8008cf4:	20004fe0 	.word	0x20004fe0
 8008cf8:	200054c0 	.word	0x200054c0
 8008cfc:	200054d0 	.word	0x200054d0
 8008d00:	200054bc 	.word	0x200054bc
 8008d04:	20004fe4 	.word	0x20004fe4
 8008d08:	e000ed04 	.word	0xe000ed04

08008d0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008d14:	2300      	movs	r3, #0
 8008d16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d018      	beq.n	8008d50 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008d1e:	4b14      	ldr	r3, [pc, #80]	@ (8008d70 <vTaskDelay+0x64>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00b      	beq.n	8008d3e <vTaskDelay+0x32>
	__asm volatile
 8008d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d2a:	f383 8811 	msr	BASEPRI, r3
 8008d2e:	f3bf 8f6f 	isb	sy
 8008d32:	f3bf 8f4f 	dsb	sy
 8008d36:	60bb      	str	r3, [r7, #8]
}
 8008d38:	bf00      	nop
 8008d3a:	bf00      	nop
 8008d3c:	e7fd      	b.n	8008d3a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008d3e:	f000 f883 	bl	8008e48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008d42:	2100      	movs	r1, #0
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 fd1b 	bl	8009780 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008d4a:	f000 f88b 	bl	8008e64 <xTaskResumeAll>
 8008d4e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d107      	bne.n	8008d66 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008d56:	4b07      	ldr	r3, [pc, #28]	@ (8008d74 <vTaskDelay+0x68>)
 8008d58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d5c:	601a      	str	r2, [r3, #0]
 8008d5e:	f3bf 8f4f 	dsb	sy
 8008d62:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d66:	bf00      	nop
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	200054dc 	.word	0x200054dc
 8008d74:	e000ed04 	.word	0xe000ed04

08008d78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b08a      	sub	sp, #40	@ 0x28
 8008d7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008d82:	2300      	movs	r3, #0
 8008d84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008d86:	463a      	mov	r2, r7
 8008d88:	1d39      	adds	r1, r7, #4
 8008d8a:	f107 0308 	add.w	r3, r7, #8
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7ff f834 	bl	8007dfc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008d94:	6839      	ldr	r1, [r7, #0]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	68ba      	ldr	r2, [r7, #8]
 8008d9a:	9202      	str	r2, [sp, #8]
 8008d9c:	9301      	str	r3, [sp, #4]
 8008d9e:	2300      	movs	r3, #0
 8008da0:	9300      	str	r3, [sp, #0]
 8008da2:	2300      	movs	r3, #0
 8008da4:	460a      	mov	r2, r1
 8008da6:	4922      	ldr	r1, [pc, #136]	@ (8008e30 <vTaskStartScheduler+0xb8>)
 8008da8:	4822      	ldr	r0, [pc, #136]	@ (8008e34 <vTaskStartScheduler+0xbc>)
 8008daa:	f7ff fe09 	bl	80089c0 <xTaskCreateStatic>
 8008dae:	4603      	mov	r3, r0
 8008db0:	4a21      	ldr	r2, [pc, #132]	@ (8008e38 <vTaskStartScheduler+0xc0>)
 8008db2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008db4:	4b20      	ldr	r3, [pc, #128]	@ (8008e38 <vTaskStartScheduler+0xc0>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d002      	beq.n	8008dc2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	617b      	str	r3, [r7, #20]
 8008dc0:	e001      	b.n	8008dc6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d102      	bne.n	8008dd2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008dcc:	f000 fd2c 	bl	8009828 <xTimerCreateTimerTask>
 8008dd0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d116      	bne.n	8008e06 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ddc:	f383 8811 	msr	BASEPRI, r3
 8008de0:	f3bf 8f6f 	isb	sy
 8008de4:	f3bf 8f4f 	dsb	sy
 8008de8:	613b      	str	r3, [r7, #16]
}
 8008dea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008dec:	4b13      	ldr	r3, [pc, #76]	@ (8008e3c <vTaskStartScheduler+0xc4>)
 8008dee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008df2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008df4:	4b12      	ldr	r3, [pc, #72]	@ (8008e40 <vTaskStartScheduler+0xc8>)
 8008df6:	2201      	movs	r2, #1
 8008df8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008dfa:	4b12      	ldr	r3, [pc, #72]	@ (8008e44 <vTaskStartScheduler+0xcc>)
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008e00:	f001 f8f6 	bl	8009ff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008e04:	e00f      	b.n	8008e26 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e0c:	d10b      	bne.n	8008e26 <vTaskStartScheduler+0xae>
	__asm volatile
 8008e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	60fb      	str	r3, [r7, #12]
}
 8008e20:	bf00      	nop
 8008e22:	bf00      	nop
 8008e24:	e7fd      	b.n	8008e22 <vTaskStartScheduler+0xaa>
}
 8008e26:	bf00      	nop
 8008e28:	3718      	adds	r7, #24
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	08018774 	.word	0x08018774
 8008e34:	080094b9 	.word	0x080094b9
 8008e38:	200054d8 	.word	0x200054d8
 8008e3c:	200054d4 	.word	0x200054d4
 8008e40:	200054c0 	.word	0x200054c0
 8008e44:	200054b8 	.word	0x200054b8

08008e48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008e48:	b480      	push	{r7}
 8008e4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008e4c:	4b04      	ldr	r3, [pc, #16]	@ (8008e60 <vTaskSuspendAll+0x18>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	3301      	adds	r3, #1
 8008e52:	4a03      	ldr	r2, [pc, #12]	@ (8008e60 <vTaskSuspendAll+0x18>)
 8008e54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008e56:	bf00      	nop
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr
 8008e60:	200054dc 	.word	0x200054dc

08008e64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008e72:	4b42      	ldr	r3, [pc, #264]	@ (8008f7c <xTaskResumeAll+0x118>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10b      	bne.n	8008e92 <xTaskResumeAll+0x2e>
	__asm volatile
 8008e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e7e:	f383 8811 	msr	BASEPRI, r3
 8008e82:	f3bf 8f6f 	isb	sy
 8008e86:	f3bf 8f4f 	dsb	sy
 8008e8a:	603b      	str	r3, [r7, #0]
}
 8008e8c:	bf00      	nop
 8008e8e:	bf00      	nop
 8008e90:	e7fd      	b.n	8008e8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008e92:	f001 f951 	bl	800a138 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008e96:	4b39      	ldr	r3, [pc, #228]	@ (8008f7c <xTaskResumeAll+0x118>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	4a37      	ldr	r2, [pc, #220]	@ (8008f7c <xTaskResumeAll+0x118>)
 8008e9e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ea0:	4b36      	ldr	r3, [pc, #216]	@ (8008f7c <xTaskResumeAll+0x118>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d162      	bne.n	8008f6e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ea8:	4b35      	ldr	r3, [pc, #212]	@ (8008f80 <xTaskResumeAll+0x11c>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d05e      	beq.n	8008f6e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008eb0:	e02f      	b.n	8008f12 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eb2:	4b34      	ldr	r3, [pc, #208]	@ (8008f84 <xTaskResumeAll+0x120>)
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	3318      	adds	r3, #24
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7ff f85a 	bl	8007f78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	3304      	adds	r3, #4
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7ff f855 	bl	8007f78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8008f88 <xTaskResumeAll+0x124>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d903      	bls.n	8008ee2 <xTaskResumeAll+0x7e>
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ede:	4a2a      	ldr	r2, [pc, #168]	@ (8008f88 <xTaskResumeAll+0x124>)
 8008ee0:	6013      	str	r3, [r2, #0]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	4413      	add	r3, r2
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	4a27      	ldr	r2, [pc, #156]	@ (8008f8c <xTaskResumeAll+0x128>)
 8008ef0:	441a      	add	r2, r3
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	3304      	adds	r3, #4
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	4610      	mov	r0, r2
 8008efa:	f7fe ffe0 	bl	8007ebe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f02:	4b23      	ldr	r3, [pc, #140]	@ (8008f90 <xTaskResumeAll+0x12c>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d302      	bcc.n	8008f12 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008f0c:	4b21      	ldr	r3, [pc, #132]	@ (8008f94 <xTaskResumeAll+0x130>)
 8008f0e:	2201      	movs	r2, #1
 8008f10:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f12:	4b1c      	ldr	r3, [pc, #112]	@ (8008f84 <xTaskResumeAll+0x120>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1cb      	bne.n	8008eb2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d001      	beq.n	8008f24 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f20:	f000 fb80 	bl	8009624 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008f24:	4b1c      	ldr	r3, [pc, #112]	@ (8008f98 <xTaskResumeAll+0x134>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d010      	beq.n	8008f52 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008f30:	f000 f846 	bl	8008fc0 <xTaskIncrementTick>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d002      	beq.n	8008f40 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008f3a:	4b16      	ldr	r3, [pc, #88]	@ (8008f94 <xTaskResumeAll+0x130>)
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	3b01      	subs	r3, #1
 8008f44:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d1f1      	bne.n	8008f30 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008f4c:	4b12      	ldr	r3, [pc, #72]	@ (8008f98 <xTaskResumeAll+0x134>)
 8008f4e:	2200      	movs	r2, #0
 8008f50:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008f52:	4b10      	ldr	r3, [pc, #64]	@ (8008f94 <xTaskResumeAll+0x130>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d009      	beq.n	8008f6e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8008f9c <xTaskResumeAll+0x138>)
 8008f60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f64:	601a      	str	r2, [r3, #0]
 8008f66:	f3bf 8f4f 	dsb	sy
 8008f6a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f6e:	f001 f915 	bl	800a19c <vPortExitCritical>

	return xAlreadyYielded;
 8008f72:	68bb      	ldr	r3, [r7, #8]
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3710      	adds	r7, #16
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	200054dc 	.word	0x200054dc
 8008f80:	200054b4 	.word	0x200054b4
 8008f84:	20005474 	.word	0x20005474
 8008f88:	200054bc 	.word	0x200054bc
 8008f8c:	20004fe4 	.word	0x20004fe4
 8008f90:	20004fe0 	.word	0x20004fe0
 8008f94:	200054c8 	.word	0x200054c8
 8008f98:	200054c4 	.word	0x200054c4
 8008f9c:	e000ed04 	.word	0xe000ed04

08008fa0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008fa6:	4b05      	ldr	r3, [pc, #20]	@ (8008fbc <xTaskGetTickCount+0x1c>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008fac:	687b      	ldr	r3, [r7, #4]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	370c      	adds	r7, #12
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	200054b8 	.word	0x200054b8

08008fc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b086      	sub	sp, #24
 8008fc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fca:	4b4f      	ldr	r3, [pc, #316]	@ (8009108 <xTaskIncrementTick+0x148>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	f040 8090 	bne.w	80090f4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008fd4:	4b4d      	ldr	r3, [pc, #308]	@ (800910c <xTaskIncrementTick+0x14c>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	3301      	adds	r3, #1
 8008fda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008fdc:	4a4b      	ldr	r2, [pc, #300]	@ (800910c <xTaskIncrementTick+0x14c>)
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d121      	bne.n	800902c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008fe8:	4b49      	ldr	r3, [pc, #292]	@ (8009110 <xTaskIncrementTick+0x150>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00b      	beq.n	800900a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ff6:	f383 8811 	msr	BASEPRI, r3
 8008ffa:	f3bf 8f6f 	isb	sy
 8008ffe:	f3bf 8f4f 	dsb	sy
 8009002:	603b      	str	r3, [r7, #0]
}
 8009004:	bf00      	nop
 8009006:	bf00      	nop
 8009008:	e7fd      	b.n	8009006 <xTaskIncrementTick+0x46>
 800900a:	4b41      	ldr	r3, [pc, #260]	@ (8009110 <xTaskIncrementTick+0x150>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	60fb      	str	r3, [r7, #12]
 8009010:	4b40      	ldr	r3, [pc, #256]	@ (8009114 <xTaskIncrementTick+0x154>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a3e      	ldr	r2, [pc, #248]	@ (8009110 <xTaskIncrementTick+0x150>)
 8009016:	6013      	str	r3, [r2, #0]
 8009018:	4a3e      	ldr	r2, [pc, #248]	@ (8009114 <xTaskIncrementTick+0x154>)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6013      	str	r3, [r2, #0]
 800901e:	4b3e      	ldr	r3, [pc, #248]	@ (8009118 <xTaskIncrementTick+0x158>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	3301      	adds	r3, #1
 8009024:	4a3c      	ldr	r2, [pc, #240]	@ (8009118 <xTaskIncrementTick+0x158>)
 8009026:	6013      	str	r3, [r2, #0]
 8009028:	f000 fafc 	bl	8009624 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800902c:	4b3b      	ldr	r3, [pc, #236]	@ (800911c <xTaskIncrementTick+0x15c>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	693a      	ldr	r2, [r7, #16]
 8009032:	429a      	cmp	r2, r3
 8009034:	d349      	bcc.n	80090ca <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009036:	4b36      	ldr	r3, [pc, #216]	@ (8009110 <xTaskIncrementTick+0x150>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d104      	bne.n	800904a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009040:	4b36      	ldr	r3, [pc, #216]	@ (800911c <xTaskIncrementTick+0x15c>)
 8009042:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009046:	601a      	str	r2, [r3, #0]
					break;
 8009048:	e03f      	b.n	80090ca <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800904a:	4b31      	ldr	r3, [pc, #196]	@ (8009110 <xTaskIncrementTick+0x150>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800905a:	693a      	ldr	r2, [r7, #16]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	429a      	cmp	r2, r3
 8009060:	d203      	bcs.n	800906a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009062:	4a2e      	ldr	r2, [pc, #184]	@ (800911c <xTaskIncrementTick+0x15c>)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009068:	e02f      	b.n	80090ca <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	3304      	adds	r3, #4
 800906e:	4618      	mov	r0, r3
 8009070:	f7fe ff82 	bl	8007f78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009078:	2b00      	cmp	r3, #0
 800907a:	d004      	beq.n	8009086 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	3318      	adds	r3, #24
 8009080:	4618      	mov	r0, r3
 8009082:	f7fe ff79 	bl	8007f78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800908a:	4b25      	ldr	r3, [pc, #148]	@ (8009120 <xTaskIncrementTick+0x160>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	429a      	cmp	r2, r3
 8009090:	d903      	bls.n	800909a <xTaskIncrementTick+0xda>
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009096:	4a22      	ldr	r2, [pc, #136]	@ (8009120 <xTaskIncrementTick+0x160>)
 8009098:	6013      	str	r3, [r2, #0]
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800909e:	4613      	mov	r3, r2
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	4413      	add	r3, r2
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	4a1f      	ldr	r2, [pc, #124]	@ (8009124 <xTaskIncrementTick+0x164>)
 80090a8:	441a      	add	r2, r3
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	3304      	adds	r3, #4
 80090ae:	4619      	mov	r1, r3
 80090b0:	4610      	mov	r0, r2
 80090b2:	f7fe ff04 	bl	8007ebe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090ba:	4b1b      	ldr	r3, [pc, #108]	@ (8009128 <xTaskIncrementTick+0x168>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d3b8      	bcc.n	8009036 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80090c4:	2301      	movs	r3, #1
 80090c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090c8:	e7b5      	b.n	8009036 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80090ca:	4b17      	ldr	r3, [pc, #92]	@ (8009128 <xTaskIncrementTick+0x168>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090d0:	4914      	ldr	r1, [pc, #80]	@ (8009124 <xTaskIncrementTick+0x164>)
 80090d2:	4613      	mov	r3, r2
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	4413      	add	r3, r2
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	440b      	add	r3, r1
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d901      	bls.n	80090e6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80090e2:	2301      	movs	r3, #1
 80090e4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80090e6:	4b11      	ldr	r3, [pc, #68]	@ (800912c <xTaskIncrementTick+0x16c>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d007      	beq.n	80090fe <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80090ee:	2301      	movs	r3, #1
 80090f0:	617b      	str	r3, [r7, #20]
 80090f2:	e004      	b.n	80090fe <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80090f4:	4b0e      	ldr	r3, [pc, #56]	@ (8009130 <xTaskIncrementTick+0x170>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	3301      	adds	r3, #1
 80090fa:	4a0d      	ldr	r2, [pc, #52]	@ (8009130 <xTaskIncrementTick+0x170>)
 80090fc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80090fe:	697b      	ldr	r3, [r7, #20]
}
 8009100:	4618      	mov	r0, r3
 8009102:	3718      	adds	r7, #24
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	200054dc 	.word	0x200054dc
 800910c:	200054b8 	.word	0x200054b8
 8009110:	2000546c 	.word	0x2000546c
 8009114:	20005470 	.word	0x20005470
 8009118:	200054cc 	.word	0x200054cc
 800911c:	200054d4 	.word	0x200054d4
 8009120:	200054bc 	.word	0x200054bc
 8009124:	20004fe4 	.word	0x20004fe4
 8009128:	20004fe0 	.word	0x20004fe0
 800912c:	200054c8 	.word	0x200054c8
 8009130:	200054c4 	.word	0x200054c4

08009134 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800913a:	4b28      	ldr	r3, [pc, #160]	@ (80091dc <vTaskSwitchContext+0xa8>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d003      	beq.n	800914a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009142:	4b27      	ldr	r3, [pc, #156]	@ (80091e0 <vTaskSwitchContext+0xac>)
 8009144:	2201      	movs	r2, #1
 8009146:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009148:	e042      	b.n	80091d0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800914a:	4b25      	ldr	r3, [pc, #148]	@ (80091e0 <vTaskSwitchContext+0xac>)
 800914c:	2200      	movs	r2, #0
 800914e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009150:	4b24      	ldr	r3, [pc, #144]	@ (80091e4 <vTaskSwitchContext+0xb0>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	60fb      	str	r3, [r7, #12]
 8009156:	e011      	b.n	800917c <vTaskSwitchContext+0x48>
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d10b      	bne.n	8009176 <vTaskSwitchContext+0x42>
	__asm volatile
 800915e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009162:	f383 8811 	msr	BASEPRI, r3
 8009166:	f3bf 8f6f 	isb	sy
 800916a:	f3bf 8f4f 	dsb	sy
 800916e:	607b      	str	r3, [r7, #4]
}
 8009170:	bf00      	nop
 8009172:	bf00      	nop
 8009174:	e7fd      	b.n	8009172 <vTaskSwitchContext+0x3e>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	3b01      	subs	r3, #1
 800917a:	60fb      	str	r3, [r7, #12]
 800917c:	491a      	ldr	r1, [pc, #104]	@ (80091e8 <vTaskSwitchContext+0xb4>)
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	4613      	mov	r3, r2
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	4413      	add	r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	440b      	add	r3, r1
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d0e3      	beq.n	8009158 <vTaskSwitchContext+0x24>
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	4613      	mov	r3, r2
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	4413      	add	r3, r2
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	4a13      	ldr	r2, [pc, #76]	@ (80091e8 <vTaskSwitchContext+0xb4>)
 800919c:	4413      	add	r3, r2
 800919e:	60bb      	str	r3, [r7, #8]
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	685a      	ldr	r2, [r3, #4]
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	605a      	str	r2, [r3, #4]
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	685a      	ldr	r2, [r3, #4]
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	3308      	adds	r3, #8
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d104      	bne.n	80091c0 <vTaskSwitchContext+0x8c>
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	685a      	ldr	r2, [r3, #4]
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	605a      	str	r2, [r3, #4]
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	4a09      	ldr	r2, [pc, #36]	@ (80091ec <vTaskSwitchContext+0xb8>)
 80091c8:	6013      	str	r3, [r2, #0]
 80091ca:	4a06      	ldr	r2, [pc, #24]	@ (80091e4 <vTaskSwitchContext+0xb0>)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	6013      	str	r3, [r2, #0]
}
 80091d0:	bf00      	nop
 80091d2:	3714      	adds	r7, #20
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr
 80091dc:	200054dc 	.word	0x200054dc
 80091e0:	200054c8 	.word	0x200054c8
 80091e4:	200054bc 	.word	0x200054bc
 80091e8:	20004fe4 	.word	0x20004fe4
 80091ec:	20004fe0 	.word	0x20004fe0

080091f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d10b      	bne.n	8009218 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009204:	f383 8811 	msr	BASEPRI, r3
 8009208:	f3bf 8f6f 	isb	sy
 800920c:	f3bf 8f4f 	dsb	sy
 8009210:	60fb      	str	r3, [r7, #12]
}
 8009212:	bf00      	nop
 8009214:	bf00      	nop
 8009216:	e7fd      	b.n	8009214 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009218:	4b07      	ldr	r3, [pc, #28]	@ (8009238 <vTaskPlaceOnEventList+0x48>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	3318      	adds	r3, #24
 800921e:	4619      	mov	r1, r3
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f7fe fe70 	bl	8007f06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009226:	2101      	movs	r1, #1
 8009228:	6838      	ldr	r0, [r7, #0]
 800922a:	f000 faa9 	bl	8009780 <prvAddCurrentTaskToDelayedList>
}
 800922e:	bf00      	nop
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	20004fe0 	.word	0x20004fe0

0800923c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800923c:	b580      	push	{r7, lr}
 800923e:	b086      	sub	sp, #24
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d10b      	bne.n	8009266 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800924e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009252:	f383 8811 	msr	BASEPRI, r3
 8009256:	f3bf 8f6f 	isb	sy
 800925a:	f3bf 8f4f 	dsb	sy
 800925e:	617b      	str	r3, [r7, #20]
}
 8009260:	bf00      	nop
 8009262:	bf00      	nop
 8009264:	e7fd      	b.n	8009262 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009266:	4b0a      	ldr	r3, [pc, #40]	@ (8009290 <vTaskPlaceOnEventListRestricted+0x54>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	3318      	adds	r3, #24
 800926c:	4619      	mov	r1, r3
 800926e:	68f8      	ldr	r0, [r7, #12]
 8009270:	f7fe fe25 	bl	8007ebe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d002      	beq.n	8009280 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800927a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800927e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009280:	6879      	ldr	r1, [r7, #4]
 8009282:	68b8      	ldr	r0, [r7, #8]
 8009284:	f000 fa7c 	bl	8009780 <prvAddCurrentTaskToDelayedList>
	}
 8009288:	bf00      	nop
 800928a:	3718      	adds	r7, #24
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	20004fe0 	.word	0x20004fe0

08009294 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b086      	sub	sp, #24
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d10b      	bne.n	80092c2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80092aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ae:	f383 8811 	msr	BASEPRI, r3
 80092b2:	f3bf 8f6f 	isb	sy
 80092b6:	f3bf 8f4f 	dsb	sy
 80092ba:	60fb      	str	r3, [r7, #12]
}
 80092bc:	bf00      	nop
 80092be:	bf00      	nop
 80092c0:	e7fd      	b.n	80092be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	3318      	adds	r3, #24
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7fe fe56 	bl	8007f78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092cc:	4b1d      	ldr	r3, [pc, #116]	@ (8009344 <xTaskRemoveFromEventList+0xb0>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d11d      	bne.n	8009310 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	3304      	adds	r3, #4
 80092d8:	4618      	mov	r0, r3
 80092da:	f7fe fe4d 	bl	8007f78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092e2:	4b19      	ldr	r3, [pc, #100]	@ (8009348 <xTaskRemoveFromEventList+0xb4>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d903      	bls.n	80092f2 <xTaskRemoveFromEventList+0x5e>
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ee:	4a16      	ldr	r2, [pc, #88]	@ (8009348 <xTaskRemoveFromEventList+0xb4>)
 80092f0:	6013      	str	r3, [r2, #0]
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092f6:	4613      	mov	r3, r2
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	4413      	add	r3, r2
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	4a13      	ldr	r2, [pc, #76]	@ (800934c <xTaskRemoveFromEventList+0xb8>)
 8009300:	441a      	add	r2, r3
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	3304      	adds	r3, #4
 8009306:	4619      	mov	r1, r3
 8009308:	4610      	mov	r0, r2
 800930a:	f7fe fdd8 	bl	8007ebe <vListInsertEnd>
 800930e:	e005      	b.n	800931c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	3318      	adds	r3, #24
 8009314:	4619      	mov	r1, r3
 8009316:	480e      	ldr	r0, [pc, #56]	@ (8009350 <xTaskRemoveFromEventList+0xbc>)
 8009318:	f7fe fdd1 	bl	8007ebe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009320:	4b0c      	ldr	r3, [pc, #48]	@ (8009354 <xTaskRemoveFromEventList+0xc0>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009326:	429a      	cmp	r2, r3
 8009328:	d905      	bls.n	8009336 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800932a:	2301      	movs	r3, #1
 800932c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800932e:	4b0a      	ldr	r3, [pc, #40]	@ (8009358 <xTaskRemoveFromEventList+0xc4>)
 8009330:	2201      	movs	r2, #1
 8009332:	601a      	str	r2, [r3, #0]
 8009334:	e001      	b.n	800933a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009336:	2300      	movs	r3, #0
 8009338:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800933a:	697b      	ldr	r3, [r7, #20]
}
 800933c:	4618      	mov	r0, r3
 800933e:	3718      	adds	r7, #24
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}
 8009344:	200054dc 	.word	0x200054dc
 8009348:	200054bc 	.word	0x200054bc
 800934c:	20004fe4 	.word	0x20004fe4
 8009350:	20005474 	.word	0x20005474
 8009354:	20004fe0 	.word	0x20004fe0
 8009358:	200054c8 	.word	0x200054c8

0800935c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d10b      	bne.n	8009382 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800936a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800936e:	f383 8811 	msr	BASEPRI, r3
 8009372:	f3bf 8f6f 	isb	sy
 8009376:	f3bf 8f4f 	dsb	sy
 800937a:	60fb      	str	r3, [r7, #12]
}
 800937c:	bf00      	nop
 800937e:	bf00      	nop
 8009380:	e7fd      	b.n	800937e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8009382:	f000 fed9 	bl	800a138 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009386:	4b07      	ldr	r3, [pc, #28]	@ (80093a4 <vTaskSetTimeOutState+0x48>)
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800938e:	4b06      	ldr	r3, [pc, #24]	@ (80093a8 <vTaskSetTimeOutState+0x4c>)
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8009396:	f000 ff01 	bl	800a19c <vPortExitCritical>
}
 800939a:	bf00      	nop
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	200054cc 	.word	0x200054cc
 80093a8:	200054b8 	.word	0x200054b8

080093ac <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80093b4:	4b06      	ldr	r3, [pc, #24]	@ (80093d0 <vTaskInternalSetTimeOutState+0x24>)
 80093b6:	681a      	ldr	r2, [r3, #0]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80093bc:	4b05      	ldr	r3, [pc, #20]	@ (80093d4 <vTaskInternalSetTimeOutState+0x28>)
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	605a      	str	r2, [r3, #4]
}
 80093c4:	bf00      	nop
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr
 80093d0:	200054cc 	.word	0x200054cc
 80093d4:	200054b8 	.word	0x200054b8

080093d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b088      	sub	sp, #32
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d10b      	bne.n	8009400 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80093e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ec:	f383 8811 	msr	BASEPRI, r3
 80093f0:	f3bf 8f6f 	isb	sy
 80093f4:	f3bf 8f4f 	dsb	sy
 80093f8:	613b      	str	r3, [r7, #16]
}
 80093fa:	bf00      	nop
 80093fc:	bf00      	nop
 80093fe:	e7fd      	b.n	80093fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d10b      	bne.n	800941e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800940a:	f383 8811 	msr	BASEPRI, r3
 800940e:	f3bf 8f6f 	isb	sy
 8009412:	f3bf 8f4f 	dsb	sy
 8009416:	60fb      	str	r3, [r7, #12]
}
 8009418:	bf00      	nop
 800941a:	bf00      	nop
 800941c:	e7fd      	b.n	800941a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800941e:	f000 fe8b 	bl	800a138 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009422:	4b1d      	ldr	r3, [pc, #116]	@ (8009498 <xTaskCheckForTimeOut+0xc0>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	69ba      	ldr	r2, [r7, #24]
 800942e:	1ad3      	subs	r3, r2, r3
 8009430:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800943a:	d102      	bne.n	8009442 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800943c:	2300      	movs	r3, #0
 800943e:	61fb      	str	r3, [r7, #28]
 8009440:	e023      	b.n	800948a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	4b15      	ldr	r3, [pc, #84]	@ (800949c <xTaskCheckForTimeOut+0xc4>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	429a      	cmp	r2, r3
 800944c:	d007      	beq.n	800945e <xTaskCheckForTimeOut+0x86>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	69ba      	ldr	r2, [r7, #24]
 8009454:	429a      	cmp	r2, r3
 8009456:	d302      	bcc.n	800945e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009458:	2301      	movs	r3, #1
 800945a:	61fb      	str	r3, [r7, #28]
 800945c:	e015      	b.n	800948a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	697a      	ldr	r2, [r7, #20]
 8009464:	429a      	cmp	r2, r3
 8009466:	d20b      	bcs.n	8009480 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	1ad2      	subs	r2, r2, r3
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f7ff ff99 	bl	80093ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800947a:	2300      	movs	r3, #0
 800947c:	61fb      	str	r3, [r7, #28]
 800947e:	e004      	b.n	800948a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	2200      	movs	r2, #0
 8009484:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009486:	2301      	movs	r3, #1
 8009488:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800948a:	f000 fe87 	bl	800a19c <vPortExitCritical>

	return xReturn;
 800948e:	69fb      	ldr	r3, [r7, #28]
}
 8009490:	4618      	mov	r0, r3
 8009492:	3720      	adds	r7, #32
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	200054b8 	.word	0x200054b8
 800949c:	200054cc 	.word	0x200054cc

080094a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80094a0:	b480      	push	{r7}
 80094a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80094a4:	4b03      	ldr	r3, [pc, #12]	@ (80094b4 <vTaskMissedYield+0x14>)
 80094a6:	2201      	movs	r2, #1
 80094a8:	601a      	str	r2, [r3, #0]
}
 80094aa:	bf00      	nop
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr
 80094b4:	200054c8 	.word	0x200054c8

080094b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80094c0:	f000 f852 	bl	8009568 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80094c4:	4b06      	ldr	r3, [pc, #24]	@ (80094e0 <prvIdleTask+0x28>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d9f9      	bls.n	80094c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80094cc:	4b05      	ldr	r3, [pc, #20]	@ (80094e4 <prvIdleTask+0x2c>)
 80094ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094d2:	601a      	str	r2, [r3, #0]
 80094d4:	f3bf 8f4f 	dsb	sy
 80094d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80094dc:	e7f0      	b.n	80094c0 <prvIdleTask+0x8>
 80094de:	bf00      	nop
 80094e0:	20004fe4 	.word	0x20004fe4
 80094e4:	e000ed04 	.word	0xe000ed04

080094e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094ee:	2300      	movs	r3, #0
 80094f0:	607b      	str	r3, [r7, #4]
 80094f2:	e00c      	b.n	800950e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	4613      	mov	r3, r2
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	4413      	add	r3, r2
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	4a12      	ldr	r2, [pc, #72]	@ (8009548 <prvInitialiseTaskLists+0x60>)
 8009500:	4413      	add	r3, r2
 8009502:	4618      	mov	r0, r3
 8009504:	f7fe fcae 	bl	8007e64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	3301      	adds	r3, #1
 800950c:	607b      	str	r3, [r7, #4]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2b37      	cmp	r3, #55	@ 0x37
 8009512:	d9ef      	bls.n	80094f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009514:	480d      	ldr	r0, [pc, #52]	@ (800954c <prvInitialiseTaskLists+0x64>)
 8009516:	f7fe fca5 	bl	8007e64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800951a:	480d      	ldr	r0, [pc, #52]	@ (8009550 <prvInitialiseTaskLists+0x68>)
 800951c:	f7fe fca2 	bl	8007e64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009520:	480c      	ldr	r0, [pc, #48]	@ (8009554 <prvInitialiseTaskLists+0x6c>)
 8009522:	f7fe fc9f 	bl	8007e64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009526:	480c      	ldr	r0, [pc, #48]	@ (8009558 <prvInitialiseTaskLists+0x70>)
 8009528:	f7fe fc9c 	bl	8007e64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800952c:	480b      	ldr	r0, [pc, #44]	@ (800955c <prvInitialiseTaskLists+0x74>)
 800952e:	f7fe fc99 	bl	8007e64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009532:	4b0b      	ldr	r3, [pc, #44]	@ (8009560 <prvInitialiseTaskLists+0x78>)
 8009534:	4a05      	ldr	r2, [pc, #20]	@ (800954c <prvInitialiseTaskLists+0x64>)
 8009536:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009538:	4b0a      	ldr	r3, [pc, #40]	@ (8009564 <prvInitialiseTaskLists+0x7c>)
 800953a:	4a05      	ldr	r2, [pc, #20]	@ (8009550 <prvInitialiseTaskLists+0x68>)
 800953c:	601a      	str	r2, [r3, #0]
}
 800953e:	bf00      	nop
 8009540:	3708      	adds	r7, #8
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	20004fe4 	.word	0x20004fe4
 800954c:	20005444 	.word	0x20005444
 8009550:	20005458 	.word	0x20005458
 8009554:	20005474 	.word	0x20005474
 8009558:	20005488 	.word	0x20005488
 800955c:	200054a0 	.word	0x200054a0
 8009560:	2000546c 	.word	0x2000546c
 8009564:	20005470 	.word	0x20005470

08009568 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800956e:	e019      	b.n	80095a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009570:	f000 fde2 	bl	800a138 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009574:	4b10      	ldr	r3, [pc, #64]	@ (80095b8 <prvCheckTasksWaitingTermination+0x50>)
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	3304      	adds	r3, #4
 8009580:	4618      	mov	r0, r3
 8009582:	f7fe fcf9 	bl	8007f78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009586:	4b0d      	ldr	r3, [pc, #52]	@ (80095bc <prvCheckTasksWaitingTermination+0x54>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	3b01      	subs	r3, #1
 800958c:	4a0b      	ldr	r2, [pc, #44]	@ (80095bc <prvCheckTasksWaitingTermination+0x54>)
 800958e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009590:	4b0b      	ldr	r3, [pc, #44]	@ (80095c0 <prvCheckTasksWaitingTermination+0x58>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	3b01      	subs	r3, #1
 8009596:	4a0a      	ldr	r2, [pc, #40]	@ (80095c0 <prvCheckTasksWaitingTermination+0x58>)
 8009598:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800959a:	f000 fdff 	bl	800a19c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 f810 	bl	80095c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095a4:	4b06      	ldr	r3, [pc, #24]	@ (80095c0 <prvCheckTasksWaitingTermination+0x58>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d1e1      	bne.n	8009570 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80095ac:	bf00      	nop
 80095ae:	bf00      	nop
 80095b0:	3708      	adds	r7, #8
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	20005488 	.word	0x20005488
 80095bc:	200054b4 	.word	0x200054b4
 80095c0:	2000549c 	.word	0x2000549c

080095c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d108      	bne.n	80095e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095da:	4618      	mov	r0, r3
 80095dc:	f000 ff9c 	bl	800a518 <vPortFree>
				vPortFree( pxTCB );
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 ff99 	bl	800a518 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80095e6:	e019      	b.n	800961c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d103      	bne.n	80095fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 ff90 	bl	800a518 <vPortFree>
	}
 80095f8:	e010      	b.n	800961c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009600:	2b02      	cmp	r3, #2
 8009602:	d00b      	beq.n	800961c <prvDeleteTCB+0x58>
	__asm volatile
 8009604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009608:	f383 8811 	msr	BASEPRI, r3
 800960c:	f3bf 8f6f 	isb	sy
 8009610:	f3bf 8f4f 	dsb	sy
 8009614:	60fb      	str	r3, [r7, #12]
}
 8009616:	bf00      	nop
 8009618:	bf00      	nop
 800961a:	e7fd      	b.n	8009618 <prvDeleteTCB+0x54>
	}
 800961c:	bf00      	nop
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800962a:	4b0c      	ldr	r3, [pc, #48]	@ (800965c <prvResetNextTaskUnblockTime+0x38>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d104      	bne.n	800963e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009634:	4b0a      	ldr	r3, [pc, #40]	@ (8009660 <prvResetNextTaskUnblockTime+0x3c>)
 8009636:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800963a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800963c:	e008      	b.n	8009650 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800963e:	4b07      	ldr	r3, [pc, #28]	@ (800965c <prvResetNextTaskUnblockTime+0x38>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	68db      	ldr	r3, [r3, #12]
 8009646:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	4a04      	ldr	r2, [pc, #16]	@ (8009660 <prvResetNextTaskUnblockTime+0x3c>)
 800964e:	6013      	str	r3, [r2, #0]
}
 8009650:	bf00      	nop
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr
 800965c:	2000546c 	.word	0x2000546c
 8009660:	200054d4 	.word	0x200054d4

08009664 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800966a:	4b0b      	ldr	r3, [pc, #44]	@ (8009698 <xTaskGetSchedulerState+0x34>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d102      	bne.n	8009678 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009672:	2301      	movs	r3, #1
 8009674:	607b      	str	r3, [r7, #4]
 8009676:	e008      	b.n	800968a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009678:	4b08      	ldr	r3, [pc, #32]	@ (800969c <xTaskGetSchedulerState+0x38>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d102      	bne.n	8009686 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009680:	2302      	movs	r3, #2
 8009682:	607b      	str	r3, [r7, #4]
 8009684:	e001      	b.n	800968a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009686:	2300      	movs	r3, #0
 8009688:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800968a:	687b      	ldr	r3, [r7, #4]
	}
 800968c:	4618      	mov	r0, r3
 800968e:	370c      	adds	r7, #12
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr
 8009698:	200054c0 	.word	0x200054c0
 800969c:	200054dc 	.word	0x200054dc

080096a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80096ac:	2300      	movs	r3, #0
 80096ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d058      	beq.n	8009768 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80096b6:	4b2f      	ldr	r3, [pc, #188]	@ (8009774 <xTaskPriorityDisinherit+0xd4>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	693a      	ldr	r2, [r7, #16]
 80096bc:	429a      	cmp	r2, r3
 80096be:	d00b      	beq.n	80096d8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80096c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096c4:	f383 8811 	msr	BASEPRI, r3
 80096c8:	f3bf 8f6f 	isb	sy
 80096cc:	f3bf 8f4f 	dsb	sy
 80096d0:	60fb      	str	r3, [r7, #12]
}
 80096d2:	bf00      	nop
 80096d4:	bf00      	nop
 80096d6:	e7fd      	b.n	80096d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d10b      	bne.n	80096f8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80096e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e4:	f383 8811 	msr	BASEPRI, r3
 80096e8:	f3bf 8f6f 	isb	sy
 80096ec:	f3bf 8f4f 	dsb	sy
 80096f0:	60bb      	str	r3, [r7, #8]
}
 80096f2:	bf00      	nop
 80096f4:	bf00      	nop
 80096f6:	e7fd      	b.n	80096f4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096fc:	1e5a      	subs	r2, r3, #1
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800970a:	429a      	cmp	r2, r3
 800970c:	d02c      	beq.n	8009768 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009712:	2b00      	cmp	r3, #0
 8009714:	d128      	bne.n	8009768 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	3304      	adds	r3, #4
 800971a:	4618      	mov	r0, r3
 800971c:	f7fe fc2c 	bl	8007f78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800972c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009738:	4b0f      	ldr	r3, [pc, #60]	@ (8009778 <xTaskPriorityDisinherit+0xd8>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	429a      	cmp	r2, r3
 800973e:	d903      	bls.n	8009748 <xTaskPriorityDisinherit+0xa8>
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009744:	4a0c      	ldr	r2, [pc, #48]	@ (8009778 <xTaskPriorityDisinherit+0xd8>)
 8009746:	6013      	str	r3, [r2, #0]
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800974c:	4613      	mov	r3, r2
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	4413      	add	r3, r2
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	4a09      	ldr	r2, [pc, #36]	@ (800977c <xTaskPriorityDisinherit+0xdc>)
 8009756:	441a      	add	r2, r3
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	3304      	adds	r3, #4
 800975c:	4619      	mov	r1, r3
 800975e:	4610      	mov	r0, r2
 8009760:	f7fe fbad 	bl	8007ebe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009764:	2301      	movs	r3, #1
 8009766:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009768:	697b      	ldr	r3, [r7, #20]
	}
 800976a:	4618      	mov	r0, r3
 800976c:	3718      	adds	r7, #24
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	20004fe0 	.word	0x20004fe0
 8009778:	200054bc 	.word	0x200054bc
 800977c:	20004fe4 	.word	0x20004fe4

08009780 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800978a:	4b21      	ldr	r3, [pc, #132]	@ (8009810 <prvAddCurrentTaskToDelayedList+0x90>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009790:	4b20      	ldr	r3, [pc, #128]	@ (8009814 <prvAddCurrentTaskToDelayedList+0x94>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	3304      	adds	r3, #4
 8009796:	4618      	mov	r0, r3
 8009798:	f7fe fbee 	bl	8007f78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80097a2:	d10a      	bne.n	80097ba <prvAddCurrentTaskToDelayedList+0x3a>
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d007      	beq.n	80097ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097aa:	4b1a      	ldr	r3, [pc, #104]	@ (8009814 <prvAddCurrentTaskToDelayedList+0x94>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	3304      	adds	r3, #4
 80097b0:	4619      	mov	r1, r3
 80097b2:	4819      	ldr	r0, [pc, #100]	@ (8009818 <prvAddCurrentTaskToDelayedList+0x98>)
 80097b4:	f7fe fb83 	bl	8007ebe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80097b8:	e026      	b.n	8009808 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80097ba:	68fa      	ldr	r2, [r7, #12]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	4413      	add	r3, r2
 80097c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80097c2:	4b14      	ldr	r3, [pc, #80]	@ (8009814 <prvAddCurrentTaskToDelayedList+0x94>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	68ba      	ldr	r2, [r7, #8]
 80097c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80097ca:	68ba      	ldr	r2, [r7, #8]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d209      	bcs.n	80097e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097d2:	4b12      	ldr	r3, [pc, #72]	@ (800981c <prvAddCurrentTaskToDelayedList+0x9c>)
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	4b0f      	ldr	r3, [pc, #60]	@ (8009814 <prvAddCurrentTaskToDelayedList+0x94>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	3304      	adds	r3, #4
 80097dc:	4619      	mov	r1, r3
 80097de:	4610      	mov	r0, r2
 80097e0:	f7fe fb91 	bl	8007f06 <vListInsert>
}
 80097e4:	e010      	b.n	8009808 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097e6:	4b0e      	ldr	r3, [pc, #56]	@ (8009820 <prvAddCurrentTaskToDelayedList+0xa0>)
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	4b0a      	ldr	r3, [pc, #40]	@ (8009814 <prvAddCurrentTaskToDelayedList+0x94>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	3304      	adds	r3, #4
 80097f0:	4619      	mov	r1, r3
 80097f2:	4610      	mov	r0, r2
 80097f4:	f7fe fb87 	bl	8007f06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80097f8:	4b0a      	ldr	r3, [pc, #40]	@ (8009824 <prvAddCurrentTaskToDelayedList+0xa4>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68ba      	ldr	r2, [r7, #8]
 80097fe:	429a      	cmp	r2, r3
 8009800:	d202      	bcs.n	8009808 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009802:	4a08      	ldr	r2, [pc, #32]	@ (8009824 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	6013      	str	r3, [r2, #0]
}
 8009808:	bf00      	nop
 800980a:	3710      	adds	r7, #16
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}
 8009810:	200054b8 	.word	0x200054b8
 8009814:	20004fe0 	.word	0x20004fe0
 8009818:	200054a0 	.word	0x200054a0
 800981c:	20005470 	.word	0x20005470
 8009820:	2000546c 	.word	0x2000546c
 8009824:	200054d4 	.word	0x200054d4

08009828 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b08a      	sub	sp, #40	@ 0x28
 800982c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800982e:	2300      	movs	r3, #0
 8009830:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009832:	f000 fb13 	bl	8009e5c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009836:	4b1d      	ldr	r3, [pc, #116]	@ (80098ac <xTimerCreateTimerTask+0x84>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d021      	beq.n	8009882 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800983e:	2300      	movs	r3, #0
 8009840:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009842:	2300      	movs	r3, #0
 8009844:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009846:	1d3a      	adds	r2, r7, #4
 8009848:	f107 0108 	add.w	r1, r7, #8
 800984c:	f107 030c 	add.w	r3, r7, #12
 8009850:	4618      	mov	r0, r3
 8009852:	f7fe faed 	bl	8007e30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009856:	6879      	ldr	r1, [r7, #4]
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	68fa      	ldr	r2, [r7, #12]
 800985c:	9202      	str	r2, [sp, #8]
 800985e:	9301      	str	r3, [sp, #4]
 8009860:	2302      	movs	r3, #2
 8009862:	9300      	str	r3, [sp, #0]
 8009864:	2300      	movs	r3, #0
 8009866:	460a      	mov	r2, r1
 8009868:	4911      	ldr	r1, [pc, #68]	@ (80098b0 <xTimerCreateTimerTask+0x88>)
 800986a:	4812      	ldr	r0, [pc, #72]	@ (80098b4 <xTimerCreateTimerTask+0x8c>)
 800986c:	f7ff f8a8 	bl	80089c0 <xTaskCreateStatic>
 8009870:	4603      	mov	r3, r0
 8009872:	4a11      	ldr	r2, [pc, #68]	@ (80098b8 <xTimerCreateTimerTask+0x90>)
 8009874:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009876:	4b10      	ldr	r3, [pc, #64]	@ (80098b8 <xTimerCreateTimerTask+0x90>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d001      	beq.n	8009882 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800987e:	2301      	movs	r3, #1
 8009880:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d10b      	bne.n	80098a0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800988c:	f383 8811 	msr	BASEPRI, r3
 8009890:	f3bf 8f6f 	isb	sy
 8009894:	f3bf 8f4f 	dsb	sy
 8009898:	613b      	str	r3, [r7, #16]
}
 800989a:	bf00      	nop
 800989c:	bf00      	nop
 800989e:	e7fd      	b.n	800989c <xTimerCreateTimerTask+0x74>
	return xReturn;
 80098a0:	697b      	ldr	r3, [r7, #20]
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3718      	adds	r7, #24
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop
 80098ac:	20005510 	.word	0x20005510
 80098b0:	0801877c 	.word	0x0801877c
 80098b4:	080099f5 	.word	0x080099f5
 80098b8:	20005514 	.word	0x20005514

080098bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b08a      	sub	sp, #40	@ 0x28
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	607a      	str	r2, [r7, #4]
 80098c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80098ca:	2300      	movs	r3, #0
 80098cc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d10b      	bne.n	80098ec <xTimerGenericCommand+0x30>
	__asm volatile
 80098d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098d8:	f383 8811 	msr	BASEPRI, r3
 80098dc:	f3bf 8f6f 	isb	sy
 80098e0:	f3bf 8f4f 	dsb	sy
 80098e4:	623b      	str	r3, [r7, #32]
}
 80098e6:	bf00      	nop
 80098e8:	bf00      	nop
 80098ea:	e7fd      	b.n	80098e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80098ec:	4b19      	ldr	r3, [pc, #100]	@ (8009954 <xTimerGenericCommand+0x98>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d02a      	beq.n	800994a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	2b05      	cmp	r3, #5
 8009904:	dc18      	bgt.n	8009938 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009906:	f7ff fead 	bl	8009664 <xTaskGetSchedulerState>
 800990a:	4603      	mov	r3, r0
 800990c:	2b02      	cmp	r3, #2
 800990e:	d109      	bne.n	8009924 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009910:	4b10      	ldr	r3, [pc, #64]	@ (8009954 <xTimerGenericCommand+0x98>)
 8009912:	6818      	ldr	r0, [r3, #0]
 8009914:	f107 0110 	add.w	r1, r7, #16
 8009918:	2300      	movs	r3, #0
 800991a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800991c:	f7fe fc60 	bl	80081e0 <xQueueGenericSend>
 8009920:	6278      	str	r0, [r7, #36]	@ 0x24
 8009922:	e012      	b.n	800994a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009924:	4b0b      	ldr	r3, [pc, #44]	@ (8009954 <xTimerGenericCommand+0x98>)
 8009926:	6818      	ldr	r0, [r3, #0]
 8009928:	f107 0110 	add.w	r1, r7, #16
 800992c:	2300      	movs	r3, #0
 800992e:	2200      	movs	r2, #0
 8009930:	f7fe fc56 	bl	80081e0 <xQueueGenericSend>
 8009934:	6278      	str	r0, [r7, #36]	@ 0x24
 8009936:	e008      	b.n	800994a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009938:	4b06      	ldr	r3, [pc, #24]	@ (8009954 <xTimerGenericCommand+0x98>)
 800993a:	6818      	ldr	r0, [r3, #0]
 800993c:	f107 0110 	add.w	r1, r7, #16
 8009940:	2300      	movs	r3, #0
 8009942:	683a      	ldr	r2, [r7, #0]
 8009944:	f7fe fd4e 	bl	80083e4 <xQueueGenericSendFromISR>
 8009948:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800994a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800994c:	4618      	mov	r0, r3
 800994e:	3728      	adds	r7, #40	@ 0x28
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	20005510 	.word	0x20005510

08009958 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b088      	sub	sp, #32
 800995c:	af02      	add	r7, sp, #8
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009962:	4b23      	ldr	r3, [pc, #140]	@ (80099f0 <prvProcessExpiredTimer+0x98>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	68db      	ldr	r3, [r3, #12]
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	3304      	adds	r3, #4
 8009970:	4618      	mov	r0, r3
 8009972:	f7fe fb01 	bl	8007f78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800997c:	f003 0304 	and.w	r3, r3, #4
 8009980:	2b00      	cmp	r3, #0
 8009982:	d023      	beq.n	80099cc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	699a      	ldr	r2, [r3, #24]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	18d1      	adds	r1, r2, r3
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	683a      	ldr	r2, [r7, #0]
 8009990:	6978      	ldr	r0, [r7, #20]
 8009992:	f000 f8d5 	bl	8009b40 <prvInsertTimerInActiveList>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d020      	beq.n	80099de <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800999c:	2300      	movs	r3, #0
 800999e:	9300      	str	r3, [sp, #0]
 80099a0:	2300      	movs	r3, #0
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	2100      	movs	r1, #0
 80099a6:	6978      	ldr	r0, [r7, #20]
 80099a8:	f7ff ff88 	bl	80098bc <xTimerGenericCommand>
 80099ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d114      	bne.n	80099de <prvProcessExpiredTimer+0x86>
	__asm volatile
 80099b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b8:	f383 8811 	msr	BASEPRI, r3
 80099bc:	f3bf 8f6f 	isb	sy
 80099c0:	f3bf 8f4f 	dsb	sy
 80099c4:	60fb      	str	r3, [r7, #12]
}
 80099c6:	bf00      	nop
 80099c8:	bf00      	nop
 80099ca:	e7fd      	b.n	80099c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099d2:	f023 0301 	bic.w	r3, r3, #1
 80099d6:	b2da      	uxtb	r2, r3
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	6a1b      	ldr	r3, [r3, #32]
 80099e2:	6978      	ldr	r0, [r7, #20]
 80099e4:	4798      	blx	r3
}
 80099e6:	bf00      	nop
 80099e8:	3718      	adds	r7, #24
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	20005508 	.word	0x20005508

080099f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80099fc:	f107 0308 	add.w	r3, r7, #8
 8009a00:	4618      	mov	r0, r3
 8009a02:	f000 f859 	bl	8009ab8 <prvGetNextExpireTime>
 8009a06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	68f8      	ldr	r0, [r7, #12]
 8009a0e:	f000 f805 	bl	8009a1c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009a12:	f000 f8d7 	bl	8009bc4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a16:	bf00      	nop
 8009a18:	e7f0      	b.n	80099fc <prvTimerTask+0x8>
	...

08009a1c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009a26:	f7ff fa0f 	bl	8008e48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a2a:	f107 0308 	add.w	r3, r7, #8
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f000 f866 	bl	8009b00 <prvSampleTimeNow>
 8009a34:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d130      	bne.n	8009a9e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d10a      	bne.n	8009a58 <prvProcessTimerOrBlockTask+0x3c>
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d806      	bhi.n	8009a58 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009a4a:	f7ff fa0b 	bl	8008e64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009a4e:	68f9      	ldr	r1, [r7, #12]
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f7ff ff81 	bl	8009958 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009a56:	e024      	b.n	8009aa2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d008      	beq.n	8009a70 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009a5e:	4b13      	ldr	r3, [pc, #76]	@ (8009aac <prvProcessTimerOrBlockTask+0x90>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d101      	bne.n	8009a6c <prvProcessTimerOrBlockTask+0x50>
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e000      	b.n	8009a6e <prvProcessTimerOrBlockTask+0x52>
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009a70:	4b0f      	ldr	r3, [pc, #60]	@ (8009ab0 <prvProcessTimerOrBlockTask+0x94>)
 8009a72:	6818      	ldr	r0, [r3, #0]
 8009a74:	687a      	ldr	r2, [r7, #4]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	1ad3      	subs	r3, r2, r3
 8009a7a:	683a      	ldr	r2, [r7, #0]
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	f7fe ff6b 	bl	8008958 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009a82:	f7ff f9ef 	bl	8008e64 <xTaskResumeAll>
 8009a86:	4603      	mov	r3, r0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d10a      	bne.n	8009aa2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009a8c:	4b09      	ldr	r3, [pc, #36]	@ (8009ab4 <prvProcessTimerOrBlockTask+0x98>)
 8009a8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a92:	601a      	str	r2, [r3, #0]
 8009a94:	f3bf 8f4f 	dsb	sy
 8009a98:	f3bf 8f6f 	isb	sy
}
 8009a9c:	e001      	b.n	8009aa2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009a9e:	f7ff f9e1 	bl	8008e64 <xTaskResumeAll>
}
 8009aa2:	bf00      	nop
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	2000550c 	.word	0x2000550c
 8009ab0:	20005510 	.word	0x20005510
 8009ab4:	e000ed04 	.word	0xe000ed04

08009ab8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8009afc <prvGetNextExpireTime+0x44>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d101      	bne.n	8009ace <prvGetNextExpireTime+0x16>
 8009aca:	2201      	movs	r2, #1
 8009acc:	e000      	b.n	8009ad0 <prvGetNextExpireTime+0x18>
 8009ace:	2200      	movs	r2, #0
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d105      	bne.n	8009ae8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009adc:	4b07      	ldr	r3, [pc, #28]	@ (8009afc <prvGetNextExpireTime+0x44>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	68db      	ldr	r3, [r3, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	60fb      	str	r3, [r7, #12]
 8009ae6:	e001      	b.n	8009aec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009aec:	68fb      	ldr	r3, [r7, #12]
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3714      	adds	r7, #20
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	20005508 	.word	0x20005508

08009b00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009b08:	f7ff fa4a 	bl	8008fa0 <xTaskGetTickCount>
 8009b0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8009b3c <prvSampleTimeNow+0x3c>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	68fa      	ldr	r2, [r7, #12]
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d205      	bcs.n	8009b24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009b18:	f000 f93a 	bl	8009d90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	601a      	str	r2, [r3, #0]
 8009b22:	e002      	b.n	8009b2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009b2a:	4a04      	ldr	r2, [pc, #16]	@ (8009b3c <prvSampleTimeNow+0x3c>)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009b30:	68fb      	ldr	r3, [r7, #12]
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3710      	adds	r7, #16
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	20005518 	.word	0x20005518

08009b40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b086      	sub	sp, #24
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	607a      	str	r2, [r7, #4]
 8009b4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	68ba      	ldr	r2, [r7, #8]
 8009b56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	68fa      	ldr	r2, [r7, #12]
 8009b5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009b5e:	68ba      	ldr	r2, [r7, #8]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d812      	bhi.n	8009b8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	1ad2      	subs	r2, r2, r3
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	699b      	ldr	r3, [r3, #24]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d302      	bcc.n	8009b7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009b74:	2301      	movs	r3, #1
 8009b76:	617b      	str	r3, [r7, #20]
 8009b78:	e01b      	b.n	8009bb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009b7a:	4b10      	ldr	r3, [pc, #64]	@ (8009bbc <prvInsertTimerInActiveList+0x7c>)
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	3304      	adds	r3, #4
 8009b82:	4619      	mov	r1, r3
 8009b84:	4610      	mov	r0, r2
 8009b86:	f7fe f9be 	bl	8007f06 <vListInsert>
 8009b8a:	e012      	b.n	8009bb2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d206      	bcs.n	8009ba2 <prvInsertTimerInActiveList+0x62>
 8009b94:	68ba      	ldr	r2, [r7, #8]
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	d302      	bcc.n	8009ba2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	617b      	str	r3, [r7, #20]
 8009ba0:	e007      	b.n	8009bb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ba2:	4b07      	ldr	r3, [pc, #28]	@ (8009bc0 <prvInsertTimerInActiveList+0x80>)
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	3304      	adds	r3, #4
 8009baa:	4619      	mov	r1, r3
 8009bac:	4610      	mov	r0, r2
 8009bae:	f7fe f9aa 	bl	8007f06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009bb2:	697b      	ldr	r3, [r7, #20]
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3718      	adds	r7, #24
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	2000550c 	.word	0x2000550c
 8009bc0:	20005508 	.word	0x20005508

08009bc4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b08e      	sub	sp, #56	@ 0x38
 8009bc8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009bca:	e0ce      	b.n	8009d6a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	da19      	bge.n	8009c06 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009bd2:	1d3b      	adds	r3, r7, #4
 8009bd4:	3304      	adds	r3, #4
 8009bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d10b      	bne.n	8009bf6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be2:	f383 8811 	msr	BASEPRI, r3
 8009be6:	f3bf 8f6f 	isb	sy
 8009bea:	f3bf 8f4f 	dsb	sy
 8009bee:	61fb      	str	r3, [r7, #28]
}
 8009bf0:	bf00      	nop
 8009bf2:	bf00      	nop
 8009bf4:	e7fd      	b.n	8009bf2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bfc:	6850      	ldr	r0, [r2, #4]
 8009bfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c00:	6892      	ldr	r2, [r2, #8]
 8009c02:	4611      	mov	r1, r2
 8009c04:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	f2c0 80ae 	blt.w	8009d6a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c14:	695b      	ldr	r3, [r3, #20]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d004      	beq.n	8009c24 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c1c:	3304      	adds	r3, #4
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7fe f9aa 	bl	8007f78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c24:	463b      	mov	r3, r7
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7ff ff6a 	bl	8009b00 <prvSampleTimeNow>
 8009c2c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2b09      	cmp	r3, #9
 8009c32:	f200 8097 	bhi.w	8009d64 <prvProcessReceivedCommands+0x1a0>
 8009c36:	a201      	add	r2, pc, #4	@ (adr r2, 8009c3c <prvProcessReceivedCommands+0x78>)
 8009c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c3c:	08009c65 	.word	0x08009c65
 8009c40:	08009c65 	.word	0x08009c65
 8009c44:	08009c65 	.word	0x08009c65
 8009c48:	08009cdb 	.word	0x08009cdb
 8009c4c:	08009cef 	.word	0x08009cef
 8009c50:	08009d3b 	.word	0x08009d3b
 8009c54:	08009c65 	.word	0x08009c65
 8009c58:	08009c65 	.word	0x08009c65
 8009c5c:	08009cdb 	.word	0x08009cdb
 8009c60:	08009cef 	.word	0x08009cef
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c6a:	f043 0301 	orr.w	r3, r3, #1
 8009c6e:	b2da      	uxtb	r2, r3
 8009c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c7a:	699b      	ldr	r3, [r3, #24]
 8009c7c:	18d1      	adds	r1, r2, r3
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c84:	f7ff ff5c 	bl	8009b40 <prvInsertTimerInActiveList>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d06c      	beq.n	8009d68 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c90:	6a1b      	ldr	r3, [r3, #32]
 8009c92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c94:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c9c:	f003 0304 	and.w	r3, r3, #4
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d061      	beq.n	8009d68 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009ca4:	68ba      	ldr	r2, [r7, #8]
 8009ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ca8:	699b      	ldr	r3, [r3, #24]
 8009caa:	441a      	add	r2, r3
 8009cac:	2300      	movs	r3, #0
 8009cae:	9300      	str	r3, [sp, #0]
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	2100      	movs	r1, #0
 8009cb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009cb6:	f7ff fe01 	bl	80098bc <xTimerGenericCommand>
 8009cba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009cbc:	6a3b      	ldr	r3, [r7, #32]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d152      	bne.n	8009d68 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc6:	f383 8811 	msr	BASEPRI, r3
 8009cca:	f3bf 8f6f 	isb	sy
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	61bb      	str	r3, [r7, #24]
}
 8009cd4:	bf00      	nop
 8009cd6:	bf00      	nop
 8009cd8:	e7fd      	b.n	8009cd6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ce0:	f023 0301 	bic.w	r3, r3, #1
 8009ce4:	b2da      	uxtb	r2, r3
 8009ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ce8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009cec:	e03d      	b.n	8009d6a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cf0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009cf4:	f043 0301 	orr.w	r3, r3, #1
 8009cf8:	b2da      	uxtb	r2, r3
 8009cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cfc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009d00:	68ba      	ldr	r2, [r7, #8]
 8009d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d04:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d08:	699b      	ldr	r3, [r3, #24]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d10b      	bne.n	8009d26 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	617b      	str	r3, [r7, #20]
}
 8009d20:	bf00      	nop
 8009d22:	bf00      	nop
 8009d24:	e7fd      	b.n	8009d22 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d28:	699a      	ldr	r2, [r3, #24]
 8009d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d2c:	18d1      	adds	r1, r2, r3
 8009d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d34:	f7ff ff04 	bl	8009b40 <prvInsertTimerInActiveList>
					break;
 8009d38:	e017      	b.n	8009d6a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d40:	f003 0302 	and.w	r3, r3, #2
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d103      	bne.n	8009d50 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009d48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d4a:	f000 fbe5 	bl	800a518 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009d4e:	e00c      	b.n	8009d6a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d56:	f023 0301 	bic.w	r3, r3, #1
 8009d5a:	b2da      	uxtb	r2, r3
 8009d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009d62:	e002      	b.n	8009d6a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009d64:	bf00      	nop
 8009d66:	e000      	b.n	8009d6a <prvProcessReceivedCommands+0x1a6>
					break;
 8009d68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d6a:	4b08      	ldr	r3, [pc, #32]	@ (8009d8c <prvProcessReceivedCommands+0x1c8>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	1d39      	adds	r1, r7, #4
 8009d70:	2200      	movs	r2, #0
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7fe fbd4 	bl	8008520 <xQueueReceive>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	f47f af26 	bne.w	8009bcc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009d80:	bf00      	nop
 8009d82:	bf00      	nop
 8009d84:	3730      	adds	r7, #48	@ 0x30
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	20005510 	.word	0x20005510

08009d90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b088      	sub	sp, #32
 8009d94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d96:	e049      	b.n	8009e2c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d98:	4b2e      	ldr	r3, [pc, #184]	@ (8009e54 <prvSwitchTimerLists+0xc4>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009da2:	4b2c      	ldr	r3, [pc, #176]	@ (8009e54 <prvSwitchTimerLists+0xc4>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	3304      	adds	r3, #4
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7fe f8e1 	bl	8007f78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	6a1b      	ldr	r3, [r3, #32]
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009dc4:	f003 0304 	and.w	r3, r3, #4
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d02f      	beq.n	8009e2c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	699b      	ldr	r3, [r3, #24]
 8009dd0:	693a      	ldr	r2, [r7, #16]
 8009dd2:	4413      	add	r3, r2
 8009dd4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009dd6:	68ba      	ldr	r2, [r7, #8]
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d90e      	bls.n	8009dfc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	68ba      	ldr	r2, [r7, #8]
 8009de2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	68fa      	ldr	r2, [r7, #12]
 8009de8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009dea:	4b1a      	ldr	r3, [pc, #104]	@ (8009e54 <prvSwitchTimerLists+0xc4>)
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	3304      	adds	r3, #4
 8009df2:	4619      	mov	r1, r3
 8009df4:	4610      	mov	r0, r2
 8009df6:	f7fe f886 	bl	8007f06 <vListInsert>
 8009dfa:	e017      	b.n	8009e2c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	9300      	str	r3, [sp, #0]
 8009e00:	2300      	movs	r3, #0
 8009e02:	693a      	ldr	r2, [r7, #16]
 8009e04:	2100      	movs	r1, #0
 8009e06:	68f8      	ldr	r0, [r7, #12]
 8009e08:	f7ff fd58 	bl	80098bc <xTimerGenericCommand>
 8009e0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d10b      	bne.n	8009e2c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e18:	f383 8811 	msr	BASEPRI, r3
 8009e1c:	f3bf 8f6f 	isb	sy
 8009e20:	f3bf 8f4f 	dsb	sy
 8009e24:	603b      	str	r3, [r7, #0]
}
 8009e26:	bf00      	nop
 8009e28:	bf00      	nop
 8009e2a:	e7fd      	b.n	8009e28 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e2c:	4b09      	ldr	r3, [pc, #36]	@ (8009e54 <prvSwitchTimerLists+0xc4>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d1b0      	bne.n	8009d98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009e36:	4b07      	ldr	r3, [pc, #28]	@ (8009e54 <prvSwitchTimerLists+0xc4>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009e3c:	4b06      	ldr	r3, [pc, #24]	@ (8009e58 <prvSwitchTimerLists+0xc8>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a04      	ldr	r2, [pc, #16]	@ (8009e54 <prvSwitchTimerLists+0xc4>)
 8009e42:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009e44:	4a04      	ldr	r2, [pc, #16]	@ (8009e58 <prvSwitchTimerLists+0xc8>)
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	6013      	str	r3, [r2, #0]
}
 8009e4a:	bf00      	nop
 8009e4c:	3718      	adds	r7, #24
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	20005508 	.word	0x20005508
 8009e58:	2000550c 	.word	0x2000550c

08009e5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009e62:	f000 f969 	bl	800a138 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009e66:	4b15      	ldr	r3, [pc, #84]	@ (8009ebc <prvCheckForValidListAndQueue+0x60>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d120      	bne.n	8009eb0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009e6e:	4814      	ldr	r0, [pc, #80]	@ (8009ec0 <prvCheckForValidListAndQueue+0x64>)
 8009e70:	f7fd fff8 	bl	8007e64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009e74:	4813      	ldr	r0, [pc, #76]	@ (8009ec4 <prvCheckForValidListAndQueue+0x68>)
 8009e76:	f7fd fff5 	bl	8007e64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009e7a:	4b13      	ldr	r3, [pc, #76]	@ (8009ec8 <prvCheckForValidListAndQueue+0x6c>)
 8009e7c:	4a10      	ldr	r2, [pc, #64]	@ (8009ec0 <prvCheckForValidListAndQueue+0x64>)
 8009e7e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009e80:	4b12      	ldr	r3, [pc, #72]	@ (8009ecc <prvCheckForValidListAndQueue+0x70>)
 8009e82:	4a10      	ldr	r2, [pc, #64]	@ (8009ec4 <prvCheckForValidListAndQueue+0x68>)
 8009e84:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009e86:	2300      	movs	r3, #0
 8009e88:	9300      	str	r3, [sp, #0]
 8009e8a:	4b11      	ldr	r3, [pc, #68]	@ (8009ed0 <prvCheckForValidListAndQueue+0x74>)
 8009e8c:	4a11      	ldr	r2, [pc, #68]	@ (8009ed4 <prvCheckForValidListAndQueue+0x78>)
 8009e8e:	2110      	movs	r1, #16
 8009e90:	200a      	movs	r0, #10
 8009e92:	f7fe f905 	bl	80080a0 <xQueueGenericCreateStatic>
 8009e96:	4603      	mov	r3, r0
 8009e98:	4a08      	ldr	r2, [pc, #32]	@ (8009ebc <prvCheckForValidListAndQueue+0x60>)
 8009e9a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009e9c:	4b07      	ldr	r3, [pc, #28]	@ (8009ebc <prvCheckForValidListAndQueue+0x60>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d005      	beq.n	8009eb0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009ea4:	4b05      	ldr	r3, [pc, #20]	@ (8009ebc <prvCheckForValidListAndQueue+0x60>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	490b      	ldr	r1, [pc, #44]	@ (8009ed8 <prvCheckForValidListAndQueue+0x7c>)
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7fe fd2a 	bl	8008904 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009eb0:	f000 f974 	bl	800a19c <vPortExitCritical>
}
 8009eb4:	bf00      	nop
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	20005510 	.word	0x20005510
 8009ec0:	200054e0 	.word	0x200054e0
 8009ec4:	200054f4 	.word	0x200054f4
 8009ec8:	20005508 	.word	0x20005508
 8009ecc:	2000550c 	.word	0x2000550c
 8009ed0:	200055bc 	.word	0x200055bc
 8009ed4:	2000551c 	.word	0x2000551c
 8009ed8:	08018784 	.word	0x08018784

08009edc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	3b04      	subs	r3, #4
 8009eec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009ef4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	3b04      	subs	r3, #4
 8009efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	f023 0201 	bic.w	r2, r3, #1
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	3b04      	subs	r3, #4
 8009f0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009f0c:	4a0c      	ldr	r2, [pc, #48]	@ (8009f40 <pxPortInitialiseStack+0x64>)
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	3b14      	subs	r3, #20
 8009f16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	3b04      	subs	r3, #4
 8009f22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f06f 0202 	mvn.w	r2, #2
 8009f2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	3b20      	subs	r3, #32
 8009f30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009f32:	68fb      	ldr	r3, [r7, #12]
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3714      	adds	r7, #20
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr
 8009f40:	08009f45 	.word	0x08009f45

08009f44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f4e:	4b13      	ldr	r3, [pc, #76]	@ (8009f9c <prvTaskExitError+0x58>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009f56:	d00b      	beq.n	8009f70 <prvTaskExitError+0x2c>
	__asm volatile
 8009f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f5c:	f383 8811 	msr	BASEPRI, r3
 8009f60:	f3bf 8f6f 	isb	sy
 8009f64:	f3bf 8f4f 	dsb	sy
 8009f68:	60fb      	str	r3, [r7, #12]
}
 8009f6a:	bf00      	nop
 8009f6c:	bf00      	nop
 8009f6e:	e7fd      	b.n	8009f6c <prvTaskExitError+0x28>
	__asm volatile
 8009f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f74:	f383 8811 	msr	BASEPRI, r3
 8009f78:	f3bf 8f6f 	isb	sy
 8009f7c:	f3bf 8f4f 	dsb	sy
 8009f80:	60bb      	str	r3, [r7, #8]
}
 8009f82:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009f84:	bf00      	nop
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d0fc      	beq.n	8009f86 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009f8c:	bf00      	nop
 8009f8e:	bf00      	nop
 8009f90:	3714      	adds	r7, #20
 8009f92:	46bd      	mov	sp, r7
 8009f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f98:	4770      	bx	lr
 8009f9a:	bf00      	nop
 8009f9c:	20000010 	.word	0x20000010

08009fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009fa0:	4b07      	ldr	r3, [pc, #28]	@ (8009fc0 <pxCurrentTCBConst2>)
 8009fa2:	6819      	ldr	r1, [r3, #0]
 8009fa4:	6808      	ldr	r0, [r1, #0]
 8009fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009faa:	f380 8809 	msr	PSP, r0
 8009fae:	f3bf 8f6f 	isb	sy
 8009fb2:	f04f 0000 	mov.w	r0, #0
 8009fb6:	f380 8811 	msr	BASEPRI, r0
 8009fba:	4770      	bx	lr
 8009fbc:	f3af 8000 	nop.w

08009fc0 <pxCurrentTCBConst2>:
 8009fc0:	20004fe0 	.word	0x20004fe0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009fc4:	bf00      	nop
 8009fc6:	bf00      	nop

08009fc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009fc8:	4808      	ldr	r0, [pc, #32]	@ (8009fec <prvPortStartFirstTask+0x24>)
 8009fca:	6800      	ldr	r0, [r0, #0]
 8009fcc:	6800      	ldr	r0, [r0, #0]
 8009fce:	f380 8808 	msr	MSP, r0
 8009fd2:	f04f 0000 	mov.w	r0, #0
 8009fd6:	f380 8814 	msr	CONTROL, r0
 8009fda:	b662      	cpsie	i
 8009fdc:	b661      	cpsie	f
 8009fde:	f3bf 8f4f 	dsb	sy
 8009fe2:	f3bf 8f6f 	isb	sy
 8009fe6:	df00      	svc	0
 8009fe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009fea:	bf00      	nop
 8009fec:	e000ed08 	.word	0xe000ed08

08009ff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b086      	sub	sp, #24
 8009ff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009ff6:	4b47      	ldr	r3, [pc, #284]	@ (800a114 <xPortStartScheduler+0x124>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4a47      	ldr	r2, [pc, #284]	@ (800a118 <xPortStartScheduler+0x128>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d10b      	bne.n	800a018 <xPortStartScheduler+0x28>
	__asm volatile
 800a000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a004:	f383 8811 	msr	BASEPRI, r3
 800a008:	f3bf 8f6f 	isb	sy
 800a00c:	f3bf 8f4f 	dsb	sy
 800a010:	613b      	str	r3, [r7, #16]
}
 800a012:	bf00      	nop
 800a014:	bf00      	nop
 800a016:	e7fd      	b.n	800a014 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a018:	4b3e      	ldr	r3, [pc, #248]	@ (800a114 <xPortStartScheduler+0x124>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a3f      	ldr	r2, [pc, #252]	@ (800a11c <xPortStartScheduler+0x12c>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d10b      	bne.n	800a03a <xPortStartScheduler+0x4a>
	__asm volatile
 800a022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a026:	f383 8811 	msr	BASEPRI, r3
 800a02a:	f3bf 8f6f 	isb	sy
 800a02e:	f3bf 8f4f 	dsb	sy
 800a032:	60fb      	str	r3, [r7, #12]
}
 800a034:	bf00      	nop
 800a036:	bf00      	nop
 800a038:	e7fd      	b.n	800a036 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a03a:	4b39      	ldr	r3, [pc, #228]	@ (800a120 <xPortStartScheduler+0x130>)
 800a03c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	b2db      	uxtb	r3, r3
 800a044:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	22ff      	movs	r2, #255	@ 0xff
 800a04a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	b2db      	uxtb	r3, r3
 800a052:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a054:	78fb      	ldrb	r3, [r7, #3]
 800a056:	b2db      	uxtb	r3, r3
 800a058:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a05c:	b2da      	uxtb	r2, r3
 800a05e:	4b31      	ldr	r3, [pc, #196]	@ (800a124 <xPortStartScheduler+0x134>)
 800a060:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a062:	4b31      	ldr	r3, [pc, #196]	@ (800a128 <xPortStartScheduler+0x138>)
 800a064:	2207      	movs	r2, #7
 800a066:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a068:	e009      	b.n	800a07e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a06a:	4b2f      	ldr	r3, [pc, #188]	@ (800a128 <xPortStartScheduler+0x138>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	3b01      	subs	r3, #1
 800a070:	4a2d      	ldr	r2, [pc, #180]	@ (800a128 <xPortStartScheduler+0x138>)
 800a072:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a074:	78fb      	ldrb	r3, [r7, #3]
 800a076:	b2db      	uxtb	r3, r3
 800a078:	005b      	lsls	r3, r3, #1
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a07e:	78fb      	ldrb	r3, [r7, #3]
 800a080:	b2db      	uxtb	r3, r3
 800a082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a086:	2b80      	cmp	r3, #128	@ 0x80
 800a088:	d0ef      	beq.n	800a06a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a08a:	4b27      	ldr	r3, [pc, #156]	@ (800a128 <xPortStartScheduler+0x138>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f1c3 0307 	rsb	r3, r3, #7
 800a092:	2b04      	cmp	r3, #4
 800a094:	d00b      	beq.n	800a0ae <xPortStartScheduler+0xbe>
	__asm volatile
 800a096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a09a:	f383 8811 	msr	BASEPRI, r3
 800a09e:	f3bf 8f6f 	isb	sy
 800a0a2:	f3bf 8f4f 	dsb	sy
 800a0a6:	60bb      	str	r3, [r7, #8]
}
 800a0a8:	bf00      	nop
 800a0aa:	bf00      	nop
 800a0ac:	e7fd      	b.n	800a0aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a0ae:	4b1e      	ldr	r3, [pc, #120]	@ (800a128 <xPortStartScheduler+0x138>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	021b      	lsls	r3, r3, #8
 800a0b4:	4a1c      	ldr	r2, [pc, #112]	@ (800a128 <xPortStartScheduler+0x138>)
 800a0b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a0b8:	4b1b      	ldr	r3, [pc, #108]	@ (800a128 <xPortStartScheduler+0x138>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a0c0:	4a19      	ldr	r2, [pc, #100]	@ (800a128 <xPortStartScheduler+0x138>)
 800a0c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	b2da      	uxtb	r2, r3
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a0cc:	4b17      	ldr	r3, [pc, #92]	@ (800a12c <xPortStartScheduler+0x13c>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a16      	ldr	r2, [pc, #88]	@ (800a12c <xPortStartScheduler+0x13c>)
 800a0d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a0d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a0d8:	4b14      	ldr	r3, [pc, #80]	@ (800a12c <xPortStartScheduler+0x13c>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a13      	ldr	r2, [pc, #76]	@ (800a12c <xPortStartScheduler+0x13c>)
 800a0de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a0e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a0e4:	f000 f8da 	bl	800a29c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a0e8:	4b11      	ldr	r3, [pc, #68]	@ (800a130 <xPortStartScheduler+0x140>)
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a0ee:	f000 f8f9 	bl	800a2e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a0f2:	4b10      	ldr	r3, [pc, #64]	@ (800a134 <xPortStartScheduler+0x144>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a0f      	ldr	r2, [pc, #60]	@ (800a134 <xPortStartScheduler+0x144>)
 800a0f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a0fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a0fe:	f7ff ff63 	bl	8009fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a102:	f7ff f817 	bl	8009134 <vTaskSwitchContext>
	prvTaskExitError();
 800a106:	f7ff ff1d 	bl	8009f44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a10a:	2300      	movs	r3, #0
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3718      	adds	r7, #24
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	e000ed00 	.word	0xe000ed00
 800a118:	410fc271 	.word	0x410fc271
 800a11c:	410fc270 	.word	0x410fc270
 800a120:	e000e400 	.word	0xe000e400
 800a124:	2000560c 	.word	0x2000560c
 800a128:	20005610 	.word	0x20005610
 800a12c:	e000ed20 	.word	0xe000ed20
 800a130:	20000010 	.word	0x20000010
 800a134:	e000ef34 	.word	0xe000ef34

0800a138 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
	__asm volatile
 800a13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a142:	f383 8811 	msr	BASEPRI, r3
 800a146:	f3bf 8f6f 	isb	sy
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	607b      	str	r3, [r7, #4]
}
 800a150:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a152:	4b10      	ldr	r3, [pc, #64]	@ (800a194 <vPortEnterCritical+0x5c>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	3301      	adds	r3, #1
 800a158:	4a0e      	ldr	r2, [pc, #56]	@ (800a194 <vPortEnterCritical+0x5c>)
 800a15a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a15c:	4b0d      	ldr	r3, [pc, #52]	@ (800a194 <vPortEnterCritical+0x5c>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2b01      	cmp	r3, #1
 800a162:	d110      	bne.n	800a186 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a164:	4b0c      	ldr	r3, [pc, #48]	@ (800a198 <vPortEnterCritical+0x60>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00b      	beq.n	800a186 <vPortEnterCritical+0x4e>
	__asm volatile
 800a16e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a172:	f383 8811 	msr	BASEPRI, r3
 800a176:	f3bf 8f6f 	isb	sy
 800a17a:	f3bf 8f4f 	dsb	sy
 800a17e:	603b      	str	r3, [r7, #0]
}
 800a180:	bf00      	nop
 800a182:	bf00      	nop
 800a184:	e7fd      	b.n	800a182 <vPortEnterCritical+0x4a>
	}
}
 800a186:	bf00      	nop
 800a188:	370c      	adds	r7, #12
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop
 800a194:	20000010 	.word	0x20000010
 800a198:	e000ed04 	.word	0xe000ed04

0800a19c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a1a2:	4b12      	ldr	r3, [pc, #72]	@ (800a1ec <vPortExitCritical+0x50>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d10b      	bne.n	800a1c2 <vPortExitCritical+0x26>
	__asm volatile
 800a1aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ae:	f383 8811 	msr	BASEPRI, r3
 800a1b2:	f3bf 8f6f 	isb	sy
 800a1b6:	f3bf 8f4f 	dsb	sy
 800a1ba:	607b      	str	r3, [r7, #4]
}
 800a1bc:	bf00      	nop
 800a1be:	bf00      	nop
 800a1c0:	e7fd      	b.n	800a1be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a1c2:	4b0a      	ldr	r3, [pc, #40]	@ (800a1ec <vPortExitCritical+0x50>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	3b01      	subs	r3, #1
 800a1c8:	4a08      	ldr	r2, [pc, #32]	@ (800a1ec <vPortExitCritical+0x50>)
 800a1ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a1cc:	4b07      	ldr	r3, [pc, #28]	@ (800a1ec <vPortExitCritical+0x50>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d105      	bne.n	800a1e0 <vPortExitCritical+0x44>
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	f383 8811 	msr	BASEPRI, r3
}
 800a1de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a1e0:	bf00      	nop
 800a1e2:	370c      	adds	r7, #12
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr
 800a1ec:	20000010 	.word	0x20000010

0800a1f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a1f0:	f3ef 8009 	mrs	r0, PSP
 800a1f4:	f3bf 8f6f 	isb	sy
 800a1f8:	4b15      	ldr	r3, [pc, #84]	@ (800a250 <pxCurrentTCBConst>)
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	f01e 0f10 	tst.w	lr, #16
 800a200:	bf08      	it	eq
 800a202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a20a:	6010      	str	r0, [r2, #0]
 800a20c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a210:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a214:	f380 8811 	msr	BASEPRI, r0
 800a218:	f3bf 8f4f 	dsb	sy
 800a21c:	f3bf 8f6f 	isb	sy
 800a220:	f7fe ff88 	bl	8009134 <vTaskSwitchContext>
 800a224:	f04f 0000 	mov.w	r0, #0
 800a228:	f380 8811 	msr	BASEPRI, r0
 800a22c:	bc09      	pop	{r0, r3}
 800a22e:	6819      	ldr	r1, [r3, #0]
 800a230:	6808      	ldr	r0, [r1, #0]
 800a232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a236:	f01e 0f10 	tst.w	lr, #16
 800a23a:	bf08      	it	eq
 800a23c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a240:	f380 8809 	msr	PSP, r0
 800a244:	f3bf 8f6f 	isb	sy
 800a248:	4770      	bx	lr
 800a24a:	bf00      	nop
 800a24c:	f3af 8000 	nop.w

0800a250 <pxCurrentTCBConst>:
 800a250:	20004fe0 	.word	0x20004fe0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a254:	bf00      	nop
 800a256:	bf00      	nop

0800a258 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
	__asm volatile
 800a25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a262:	f383 8811 	msr	BASEPRI, r3
 800a266:	f3bf 8f6f 	isb	sy
 800a26a:	f3bf 8f4f 	dsb	sy
 800a26e:	607b      	str	r3, [r7, #4]
}
 800a270:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a272:	f7fe fea5 	bl	8008fc0 <xTaskIncrementTick>
 800a276:	4603      	mov	r3, r0
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d003      	beq.n	800a284 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a27c:	4b06      	ldr	r3, [pc, #24]	@ (800a298 <xPortSysTickHandler+0x40>)
 800a27e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a282:	601a      	str	r2, [r3, #0]
 800a284:	2300      	movs	r3, #0
 800a286:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	f383 8811 	msr	BASEPRI, r3
}
 800a28e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a290:	bf00      	nop
 800a292:	3708      	adds	r7, #8
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}
 800a298:	e000ed04 	.word	0xe000ed04

0800a29c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a29c:	b480      	push	{r7}
 800a29e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a2a0:	4b0b      	ldr	r3, [pc, #44]	@ (800a2d0 <vPortSetupTimerInterrupt+0x34>)
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a2a6:	4b0b      	ldr	r3, [pc, #44]	@ (800a2d4 <vPortSetupTimerInterrupt+0x38>)
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a2ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a2d8 <vPortSetupTimerInterrupt+0x3c>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a0a      	ldr	r2, [pc, #40]	@ (800a2dc <vPortSetupTimerInterrupt+0x40>)
 800a2b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a2b6:	099b      	lsrs	r3, r3, #6
 800a2b8:	4a09      	ldr	r2, [pc, #36]	@ (800a2e0 <vPortSetupTimerInterrupt+0x44>)
 800a2ba:	3b01      	subs	r3, #1
 800a2bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a2be:	4b04      	ldr	r3, [pc, #16]	@ (800a2d0 <vPortSetupTimerInterrupt+0x34>)
 800a2c0:	2207      	movs	r2, #7
 800a2c2:	601a      	str	r2, [r3, #0]
}
 800a2c4:	bf00      	nop
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr
 800a2ce:	bf00      	nop
 800a2d0:	e000e010 	.word	0xe000e010
 800a2d4:	e000e018 	.word	0xe000e018
 800a2d8:	20000004 	.word	0x20000004
 800a2dc:	10624dd3 	.word	0x10624dd3
 800a2e0:	e000e014 	.word	0xe000e014

0800a2e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a2e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a2f4 <vPortEnableVFP+0x10>
 800a2e8:	6801      	ldr	r1, [r0, #0]
 800a2ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a2ee:	6001      	str	r1, [r0, #0]
 800a2f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a2f2:	bf00      	nop
 800a2f4:	e000ed88 	.word	0xe000ed88

0800a2f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a2fe:	f3ef 8305 	mrs	r3, IPSR
 800a302:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2b0f      	cmp	r3, #15
 800a308:	d915      	bls.n	800a336 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a30a:	4a18      	ldr	r2, [pc, #96]	@ (800a36c <vPortValidateInterruptPriority+0x74>)
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	4413      	add	r3, r2
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a314:	4b16      	ldr	r3, [pc, #88]	@ (800a370 <vPortValidateInterruptPriority+0x78>)
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	7afa      	ldrb	r2, [r7, #11]
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d20b      	bcs.n	800a336 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a322:	f383 8811 	msr	BASEPRI, r3
 800a326:	f3bf 8f6f 	isb	sy
 800a32a:	f3bf 8f4f 	dsb	sy
 800a32e:	607b      	str	r3, [r7, #4]
}
 800a330:	bf00      	nop
 800a332:	bf00      	nop
 800a334:	e7fd      	b.n	800a332 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a336:	4b0f      	ldr	r3, [pc, #60]	@ (800a374 <vPortValidateInterruptPriority+0x7c>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a33e:	4b0e      	ldr	r3, [pc, #56]	@ (800a378 <vPortValidateInterruptPriority+0x80>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	429a      	cmp	r2, r3
 800a344:	d90b      	bls.n	800a35e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a34a:	f383 8811 	msr	BASEPRI, r3
 800a34e:	f3bf 8f6f 	isb	sy
 800a352:	f3bf 8f4f 	dsb	sy
 800a356:	603b      	str	r3, [r7, #0]
}
 800a358:	bf00      	nop
 800a35a:	bf00      	nop
 800a35c:	e7fd      	b.n	800a35a <vPortValidateInterruptPriority+0x62>
	}
 800a35e:	bf00      	nop
 800a360:	3714      	adds	r7, #20
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr
 800a36a:	bf00      	nop
 800a36c:	e000e3f0 	.word	0xe000e3f0
 800a370:	2000560c 	.word	0x2000560c
 800a374:	e000ed0c 	.word	0xe000ed0c
 800a378:	20005610 	.word	0x20005610

0800a37c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b08a      	sub	sp, #40	@ 0x28
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a384:	2300      	movs	r3, #0
 800a386:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a388:	f7fe fd5e 	bl	8008e48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a38c:	4b5c      	ldr	r3, [pc, #368]	@ (800a500 <pvPortMalloc+0x184>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d101      	bne.n	800a398 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a394:	f000 f924 	bl	800a5e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a398:	4b5a      	ldr	r3, [pc, #360]	@ (800a504 <pvPortMalloc+0x188>)
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	4013      	ands	r3, r2
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	f040 8095 	bne.w	800a4d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d01e      	beq.n	800a3ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a3ac:	2208      	movs	r2, #8
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f003 0307 	and.w	r3, r3, #7
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d015      	beq.n	800a3ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f023 0307 	bic.w	r3, r3, #7
 800a3c4:	3308      	adds	r3, #8
 800a3c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f003 0307 	and.w	r3, r3, #7
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d00b      	beq.n	800a3ea <pvPortMalloc+0x6e>
	__asm volatile
 800a3d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3d6:	f383 8811 	msr	BASEPRI, r3
 800a3da:	f3bf 8f6f 	isb	sy
 800a3de:	f3bf 8f4f 	dsb	sy
 800a3e2:	617b      	str	r3, [r7, #20]
}
 800a3e4:	bf00      	nop
 800a3e6:	bf00      	nop
 800a3e8:	e7fd      	b.n	800a3e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d06f      	beq.n	800a4d0 <pvPortMalloc+0x154>
 800a3f0:	4b45      	ldr	r3, [pc, #276]	@ (800a508 <pvPortMalloc+0x18c>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d86a      	bhi.n	800a4d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a3fa:	4b44      	ldr	r3, [pc, #272]	@ (800a50c <pvPortMalloc+0x190>)
 800a3fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a3fe:	4b43      	ldr	r3, [pc, #268]	@ (800a50c <pvPortMalloc+0x190>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a404:	e004      	b.n	800a410 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a408:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	429a      	cmp	r2, r3
 800a418:	d903      	bls.n	800a422 <pvPortMalloc+0xa6>
 800a41a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d1f1      	bne.n	800a406 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a422:	4b37      	ldr	r3, [pc, #220]	@ (800a500 <pvPortMalloc+0x184>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a428:	429a      	cmp	r2, r3
 800a42a:	d051      	beq.n	800a4d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a42c:	6a3b      	ldr	r3, [r7, #32]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	2208      	movs	r2, #8
 800a432:	4413      	add	r3, r2
 800a434:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	6a3b      	ldr	r3, [r7, #32]
 800a43c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a440:	685a      	ldr	r2, [r3, #4]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	1ad2      	subs	r2, r2, r3
 800a446:	2308      	movs	r3, #8
 800a448:	005b      	lsls	r3, r3, #1
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d920      	bls.n	800a490 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a44e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	4413      	add	r3, r2
 800a454:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	f003 0307 	and.w	r3, r3, #7
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d00b      	beq.n	800a478 <pvPortMalloc+0xfc>
	__asm volatile
 800a460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a464:	f383 8811 	msr	BASEPRI, r3
 800a468:	f3bf 8f6f 	isb	sy
 800a46c:	f3bf 8f4f 	dsb	sy
 800a470:	613b      	str	r3, [r7, #16]
}
 800a472:	bf00      	nop
 800a474:	bf00      	nop
 800a476:	e7fd      	b.n	800a474 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	1ad2      	subs	r2, r2, r3
 800a480:	69bb      	ldr	r3, [r7, #24]
 800a482:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a48a:	69b8      	ldr	r0, [r7, #24]
 800a48c:	f000 f90a 	bl	800a6a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a490:	4b1d      	ldr	r3, [pc, #116]	@ (800a508 <pvPortMalloc+0x18c>)
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	1ad3      	subs	r3, r2, r3
 800a49a:	4a1b      	ldr	r2, [pc, #108]	@ (800a508 <pvPortMalloc+0x18c>)
 800a49c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a49e:	4b1a      	ldr	r3, [pc, #104]	@ (800a508 <pvPortMalloc+0x18c>)
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	4b1b      	ldr	r3, [pc, #108]	@ (800a510 <pvPortMalloc+0x194>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d203      	bcs.n	800a4b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a4aa:	4b17      	ldr	r3, [pc, #92]	@ (800a508 <pvPortMalloc+0x18c>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4a18      	ldr	r2, [pc, #96]	@ (800a510 <pvPortMalloc+0x194>)
 800a4b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a4b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b4:	685a      	ldr	r2, [r3, #4]
 800a4b6:	4b13      	ldr	r3, [pc, #76]	@ (800a504 <pvPortMalloc+0x188>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	431a      	orrs	r2, r3
 800a4bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a4c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a4c6:	4b13      	ldr	r3, [pc, #76]	@ (800a514 <pvPortMalloc+0x198>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	4a11      	ldr	r2, [pc, #68]	@ (800a514 <pvPortMalloc+0x198>)
 800a4ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a4d0:	f7fe fcc8 	bl	8008e64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4d4:	69fb      	ldr	r3, [r7, #28]
 800a4d6:	f003 0307 	and.w	r3, r3, #7
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00b      	beq.n	800a4f6 <pvPortMalloc+0x17a>
	__asm volatile
 800a4de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4e2:	f383 8811 	msr	BASEPRI, r3
 800a4e6:	f3bf 8f6f 	isb	sy
 800a4ea:	f3bf 8f4f 	dsb	sy
 800a4ee:	60fb      	str	r3, [r7, #12]
}
 800a4f0:	bf00      	nop
 800a4f2:	bf00      	nop
 800a4f4:	e7fd      	b.n	800a4f2 <pvPortMalloc+0x176>
	return pvReturn;
 800a4f6:	69fb      	ldr	r3, [r7, #28]
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3728      	adds	r7, #40	@ 0x28
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}
 800a500:	2000621c 	.word	0x2000621c
 800a504:	20006230 	.word	0x20006230
 800a508:	20006220 	.word	0x20006220
 800a50c:	20006214 	.word	0x20006214
 800a510:	20006224 	.word	0x20006224
 800a514:	20006228 	.word	0x20006228

0800a518 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b086      	sub	sp, #24
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d04f      	beq.n	800a5ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a52a:	2308      	movs	r3, #8
 800a52c:	425b      	negs	r3, r3
 800a52e:	697a      	ldr	r2, [r7, #20]
 800a530:	4413      	add	r3, r2
 800a532:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	685a      	ldr	r2, [r3, #4]
 800a53c:	4b25      	ldr	r3, [pc, #148]	@ (800a5d4 <vPortFree+0xbc>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4013      	ands	r3, r2
 800a542:	2b00      	cmp	r3, #0
 800a544:	d10b      	bne.n	800a55e <vPortFree+0x46>
	__asm volatile
 800a546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a54a:	f383 8811 	msr	BASEPRI, r3
 800a54e:	f3bf 8f6f 	isb	sy
 800a552:	f3bf 8f4f 	dsb	sy
 800a556:	60fb      	str	r3, [r7, #12]
}
 800a558:	bf00      	nop
 800a55a:	bf00      	nop
 800a55c:	e7fd      	b.n	800a55a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d00b      	beq.n	800a57e <vPortFree+0x66>
	__asm volatile
 800a566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a56a:	f383 8811 	msr	BASEPRI, r3
 800a56e:	f3bf 8f6f 	isb	sy
 800a572:	f3bf 8f4f 	dsb	sy
 800a576:	60bb      	str	r3, [r7, #8]
}
 800a578:	bf00      	nop
 800a57a:	bf00      	nop
 800a57c:	e7fd      	b.n	800a57a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	685a      	ldr	r2, [r3, #4]
 800a582:	4b14      	ldr	r3, [pc, #80]	@ (800a5d4 <vPortFree+0xbc>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4013      	ands	r3, r2
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d01e      	beq.n	800a5ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d11a      	bne.n	800a5ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	685a      	ldr	r2, [r3, #4]
 800a598:	4b0e      	ldr	r3, [pc, #56]	@ (800a5d4 <vPortFree+0xbc>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	43db      	mvns	r3, r3
 800a59e:	401a      	ands	r2, r3
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a5a4:	f7fe fc50 	bl	8008e48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	685a      	ldr	r2, [r3, #4]
 800a5ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a5d8 <vPortFree+0xc0>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	4a09      	ldr	r2, [pc, #36]	@ (800a5d8 <vPortFree+0xc0>)
 800a5b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a5b6:	6938      	ldr	r0, [r7, #16]
 800a5b8:	f000 f874 	bl	800a6a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a5bc:	4b07      	ldr	r3, [pc, #28]	@ (800a5dc <vPortFree+0xc4>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	4a06      	ldr	r2, [pc, #24]	@ (800a5dc <vPortFree+0xc4>)
 800a5c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a5c6:	f7fe fc4d 	bl	8008e64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a5ca:	bf00      	nop
 800a5cc:	3718      	adds	r7, #24
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	20006230 	.word	0x20006230
 800a5d8:	20006220 	.word	0x20006220
 800a5dc:	2000622c 	.word	0x2000622c

0800a5e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b085      	sub	sp, #20
 800a5e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a5e6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a5ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a5ec:	4b27      	ldr	r3, [pc, #156]	@ (800a68c <prvHeapInit+0xac>)
 800a5ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f003 0307 	and.w	r3, r3, #7
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d00c      	beq.n	800a614 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	3307      	adds	r3, #7
 800a5fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f023 0307 	bic.w	r3, r3, #7
 800a606:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a608:	68ba      	ldr	r2, [r7, #8]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	1ad3      	subs	r3, r2, r3
 800a60e:	4a1f      	ldr	r2, [pc, #124]	@ (800a68c <prvHeapInit+0xac>)
 800a610:	4413      	add	r3, r2
 800a612:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a618:	4a1d      	ldr	r2, [pc, #116]	@ (800a690 <prvHeapInit+0xb0>)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a61e:	4b1c      	ldr	r3, [pc, #112]	@ (800a690 <prvHeapInit+0xb0>)
 800a620:	2200      	movs	r2, #0
 800a622:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	68ba      	ldr	r2, [r7, #8]
 800a628:	4413      	add	r3, r2
 800a62a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a62c:	2208      	movs	r2, #8
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	1a9b      	subs	r3, r3, r2
 800a632:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f023 0307 	bic.w	r3, r3, #7
 800a63a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	4a15      	ldr	r2, [pc, #84]	@ (800a694 <prvHeapInit+0xb4>)
 800a640:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a642:	4b14      	ldr	r3, [pc, #80]	@ (800a694 <prvHeapInit+0xb4>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	2200      	movs	r2, #0
 800a648:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a64a:	4b12      	ldr	r3, [pc, #72]	@ (800a694 <prvHeapInit+0xb4>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	2200      	movs	r2, #0
 800a650:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	68fa      	ldr	r2, [r7, #12]
 800a65a:	1ad2      	subs	r2, r2, r3
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a660:	4b0c      	ldr	r3, [pc, #48]	@ (800a694 <prvHeapInit+0xb4>)
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	4a0a      	ldr	r2, [pc, #40]	@ (800a698 <prvHeapInit+0xb8>)
 800a66e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	4a09      	ldr	r2, [pc, #36]	@ (800a69c <prvHeapInit+0xbc>)
 800a676:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a678:	4b09      	ldr	r3, [pc, #36]	@ (800a6a0 <prvHeapInit+0xc0>)
 800a67a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a67e:	601a      	str	r2, [r3, #0]
}
 800a680:	bf00      	nop
 800a682:	3714      	adds	r7, #20
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr
 800a68c:	20005614 	.word	0x20005614
 800a690:	20006214 	.word	0x20006214
 800a694:	2000621c 	.word	0x2000621c
 800a698:	20006224 	.word	0x20006224
 800a69c:	20006220 	.word	0x20006220
 800a6a0:	20006230 	.word	0x20006230

0800a6a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b085      	sub	sp, #20
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a6ac:	4b28      	ldr	r3, [pc, #160]	@ (800a750 <prvInsertBlockIntoFreeList+0xac>)
 800a6ae:	60fb      	str	r3, [r7, #12]
 800a6b0:	e002      	b.n	800a6b8 <prvInsertBlockIntoFreeList+0x14>
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	60fb      	str	r3, [r7, #12]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d8f7      	bhi.n	800a6b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	68ba      	ldr	r2, [r7, #8]
 800a6cc:	4413      	add	r3, r2
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d108      	bne.n	800a6e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	685a      	ldr	r2, [r3, #4]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	441a      	add	r2, r3
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	68ba      	ldr	r2, [r7, #8]
 800a6f0:	441a      	add	r2, r3
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d118      	bne.n	800a72c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	4b15      	ldr	r3, [pc, #84]	@ (800a754 <prvInsertBlockIntoFreeList+0xb0>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	429a      	cmp	r2, r3
 800a704:	d00d      	beq.n	800a722 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	685a      	ldr	r2, [r3, #4]
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	441a      	add	r2, r3
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	601a      	str	r2, [r3, #0]
 800a720:	e008      	b.n	800a734 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a722:	4b0c      	ldr	r3, [pc, #48]	@ (800a754 <prvInsertBlockIntoFreeList+0xb0>)
 800a724:	681a      	ldr	r2, [r3, #0]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	601a      	str	r2, [r3, #0]
 800a72a:	e003      	b.n	800a734 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a734:	68fa      	ldr	r2, [r7, #12]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	429a      	cmp	r2, r3
 800a73a:	d002      	beq.n	800a742 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a742:	bf00      	nop
 800a744:	3714      	adds	r7, #20
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop
 800a750:	20006214 	.word	0x20006214
 800a754:	2000621c 	.word	0x2000621c

0800a758 <rosidl_typesupport_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead>:
 800a758:	4b04      	ldr	r3, [pc, #16]	@ (800a76c <rosidl_typesupport_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead+0x14>)
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	b10a      	cbz	r2, 800a762 <rosidl_typesupport_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead+0xa>
 800a75e:	4803      	ldr	r0, [pc, #12]	@ (800a76c <rosidl_typesupport_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead+0x14>)
 800a760:	4770      	bx	lr
 800a762:	4a03      	ldr	r2, [pc, #12]	@ (800a770 <rosidl_typesupport_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead+0x18>)
 800a764:	4801      	ldr	r0, [pc, #4]	@ (800a76c <rosidl_typesupport_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead+0x14>)
 800a766:	6812      	ldr	r2, [r2, #0]
 800a768:	601a      	str	r2, [r3, #0]
 800a76a:	4770      	bx	lr
 800a76c:	2000001c 	.word	0x2000001c
 800a770:	200000e8 	.word	0x200000e8

0800a774 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead>:
 800a774:	4a02      	ldr	r2, [pc, #8]	@ (800a780 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead+0xc>)
 800a776:	4b03      	ldr	r3, [pc, #12]	@ (800a784 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead+0x10>)
 800a778:	6812      	ldr	r2, [r2, #0]
 800a77a:	601a      	str	r2, [r3, #0]
 800a77c:	4770      	bx	lr
 800a77e:	bf00      	nop
 800a780:	200000e8 	.word	0x200000e8
 800a784:	2000001c 	.word	0x2000001c

0800a788 <amt212ev_interfaces__msg__AmtRead__rosidl_typesupport_introspection_c__AmtRead_init_function>:
 800a788:	f003 bde4 	b.w	800e354 <amt212ev_interfaces__msg__AmtRead__init>

0800a78c <amt212ev_interfaces__msg__AmtRead__rosidl_typesupport_introspection_c__AmtRead_fini_function>:
 800a78c:	f003 bde6 	b.w	800e35c <amt212ev_interfaces__msg__AmtRead__fini>

0800a790 <rosidl_typesupport_introspection_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead>:
 800a790:	4b04      	ldr	r3, [pc, #16]	@ (800a7a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead+0x14>)
 800a792:	681a      	ldr	r2, [r3, #0]
 800a794:	b10a      	cbz	r2, 800a79a <rosidl_typesupport_introspection_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead+0xa>
 800a796:	4803      	ldr	r0, [pc, #12]	@ (800a7a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead+0x14>)
 800a798:	4770      	bx	lr
 800a79a:	4a03      	ldr	r2, [pc, #12]	@ (800a7a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead+0x18>)
 800a79c:	4801      	ldr	r0, [pc, #4]	@ (800a7a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead+0x14>)
 800a79e:	6812      	ldr	r2, [r2, #0]
 800a7a0:	601a      	str	r2, [r3, #0]
 800a7a2:	4770      	bx	lr
 800a7a4:	200000a0 	.word	0x200000a0
 800a7a8:	200000ec 	.word	0x200000ec

0800a7ac <get_serialized_size_amt212ev_interfaces__msg__AmtRead>:
 800a7ac:	b188      	cbz	r0, 800a7d2 <get_serialized_size_amt212ev_interfaces__msg__AmtRead+0x26>
 800a7ae:	b538      	push	{r3, r4, r5, lr}
 800a7b0:	460d      	mov	r5, r1
 800a7b2:	4628      	mov	r0, r5
 800a7b4:	2108      	movs	r1, #8
 800a7b6:	f001 f9c5 	bl	800bb44 <ucdr_alignment>
 800a7ba:	f105 0308 	add.w	r3, r5, #8
 800a7be:	181c      	adds	r4, r3, r0
 800a7c0:	2108      	movs	r1, #8
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	f001 f9be 	bl	800bb44 <ucdr_alignment>
 800a7c8:	f1c5 0508 	rsb	r5, r5, #8
 800a7cc:	4428      	add	r0, r5
 800a7ce:	4420      	add	r0, r4
 800a7d0:	bd38      	pop	{r3, r4, r5, pc}
 800a7d2:	4770      	bx	lr

0800a7d4 <_AmtRead__cdr_deserialize>:
 800a7d4:	b538      	push	{r3, r4, r5, lr}
 800a7d6:	460c      	mov	r4, r1
 800a7d8:	b149      	cbz	r1, 800a7ee <_AmtRead__cdr_deserialize+0x1a>
 800a7da:	4605      	mov	r5, r0
 800a7dc:	f001 f894 	bl	800b908 <ucdr_deserialize_double>
 800a7e0:	f104 0108 	add.w	r1, r4, #8
 800a7e4:	4628      	mov	r0, r5
 800a7e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7ea:	f001 b88d 	b.w	800b908 <ucdr_deserialize_double>
 800a7ee:	4608      	mov	r0, r1
 800a7f0:	bd38      	pop	{r3, r4, r5, pc}
 800a7f2:	bf00      	nop

0800a7f4 <_AmtRead__cdr_serialize>:
 800a7f4:	b170      	cbz	r0, 800a814 <_AmtRead__cdr_serialize+0x20>
 800a7f6:	b538      	push	{r3, r4, r5, lr}
 800a7f8:	ed90 0b00 	vldr	d0, [r0]
 800a7fc:	460d      	mov	r5, r1
 800a7fe:	4604      	mov	r4, r0
 800a800:	4608      	mov	r0, r1
 800a802:	f000 ffb1 	bl	800b768 <ucdr_serialize_double>
 800a806:	ed94 0b02 	vldr	d0, [r4, #8]
 800a80a:	4628      	mov	r0, r5
 800a80c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a810:	f000 bfaa 	b.w	800b768 <ucdr_serialize_double>
 800a814:	4770      	bx	lr
 800a816:	bf00      	nop

0800a818 <_AmtRead__get_serialized_size>:
 800a818:	b168      	cbz	r0, 800a836 <_AmtRead__get_serialized_size+0x1e>
 800a81a:	b510      	push	{r4, lr}
 800a81c:	2108      	movs	r1, #8
 800a81e:	2000      	movs	r0, #0
 800a820:	f001 f990 	bl	800bb44 <ucdr_alignment>
 800a824:	f100 0408 	add.w	r4, r0, #8
 800a828:	2108      	movs	r1, #8
 800a82a:	4620      	mov	r0, r4
 800a82c:	f001 f98a 	bl	800bb44 <ucdr_alignment>
 800a830:	3008      	adds	r0, #8
 800a832:	4420      	add	r0, r4
 800a834:	bd10      	pop	{r4, pc}
 800a836:	4770      	bx	lr

0800a838 <_AmtRead__max_serialized_size>:
 800a838:	b510      	push	{r4, lr}
 800a83a:	2108      	movs	r1, #8
 800a83c:	2000      	movs	r0, #0
 800a83e:	f001 f981 	bl	800bb44 <ucdr_alignment>
 800a842:	f100 0408 	add.w	r4, r0, #8
 800a846:	2108      	movs	r1, #8
 800a848:	4620      	mov	r0, r4
 800a84a:	f001 f97b 	bl	800bb44 <ucdr_alignment>
 800a84e:	3008      	adds	r0, #8
 800a850:	4420      	add	r0, r4
 800a852:	bd10      	pop	{r4, pc}

0800a854 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead>:
 800a854:	4800      	ldr	r0, [pc, #0]	@ (800a858 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead+0x4>)
 800a856:	4770      	bx	lr
 800a858:	200000ac 	.word	0x200000ac

0800a85c <ucdr_serialize_bool>:
 800a85c:	b538      	push	{r3, r4, r5, lr}
 800a85e:	460d      	mov	r5, r1
 800a860:	2101      	movs	r1, #1
 800a862:	4604      	mov	r4, r0
 800a864:	f001 f922 	bl	800baac <ucdr_check_final_buffer_behavior>
 800a868:	b148      	cbz	r0, 800a87e <ucdr_serialize_bool+0x22>
 800a86a:	68a3      	ldr	r3, [r4, #8]
 800a86c:	701d      	strb	r5, [r3, #0]
 800a86e:	68a2      	ldr	r2, [r4, #8]
 800a870:	6923      	ldr	r3, [r4, #16]
 800a872:	2101      	movs	r1, #1
 800a874:	440a      	add	r2, r1
 800a876:	440b      	add	r3, r1
 800a878:	60a2      	str	r2, [r4, #8]
 800a87a:	6123      	str	r3, [r4, #16]
 800a87c:	7561      	strb	r1, [r4, #21]
 800a87e:	7da0      	ldrb	r0, [r4, #22]
 800a880:	f080 0001 	eor.w	r0, r0, #1
 800a884:	bd38      	pop	{r3, r4, r5, pc}
 800a886:	bf00      	nop

0800a888 <ucdr_deserialize_bool>:
 800a888:	b538      	push	{r3, r4, r5, lr}
 800a88a:	460d      	mov	r5, r1
 800a88c:	2101      	movs	r1, #1
 800a88e:	4604      	mov	r4, r0
 800a890:	f001 f90c 	bl	800baac <ucdr_check_final_buffer_behavior>
 800a894:	b160      	cbz	r0, 800a8b0 <ucdr_deserialize_bool+0x28>
 800a896:	68a2      	ldr	r2, [r4, #8]
 800a898:	6923      	ldr	r3, [r4, #16]
 800a89a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800a89e:	3900      	subs	r1, #0
 800a8a0:	bf18      	it	ne
 800a8a2:	2101      	movne	r1, #1
 800a8a4:	7029      	strb	r1, [r5, #0]
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	2101      	movs	r1, #1
 800a8aa:	60a2      	str	r2, [r4, #8]
 800a8ac:	6123      	str	r3, [r4, #16]
 800a8ae:	7561      	strb	r1, [r4, #21]
 800a8b0:	7da0      	ldrb	r0, [r4, #22]
 800a8b2:	f080 0001 	eor.w	r0, r0, #1
 800a8b6:	bd38      	pop	{r3, r4, r5, pc}

0800a8b8 <ucdr_serialize_uint8_t>:
 800a8b8:	b538      	push	{r3, r4, r5, lr}
 800a8ba:	460d      	mov	r5, r1
 800a8bc:	2101      	movs	r1, #1
 800a8be:	4604      	mov	r4, r0
 800a8c0:	f001 f8f4 	bl	800baac <ucdr_check_final_buffer_behavior>
 800a8c4:	b148      	cbz	r0, 800a8da <ucdr_serialize_uint8_t+0x22>
 800a8c6:	68a3      	ldr	r3, [r4, #8]
 800a8c8:	701d      	strb	r5, [r3, #0]
 800a8ca:	68a2      	ldr	r2, [r4, #8]
 800a8cc:	6923      	ldr	r3, [r4, #16]
 800a8ce:	2101      	movs	r1, #1
 800a8d0:	440a      	add	r2, r1
 800a8d2:	440b      	add	r3, r1
 800a8d4:	60a2      	str	r2, [r4, #8]
 800a8d6:	6123      	str	r3, [r4, #16]
 800a8d8:	7561      	strb	r1, [r4, #21]
 800a8da:	7da0      	ldrb	r0, [r4, #22]
 800a8dc:	f080 0001 	eor.w	r0, r0, #1
 800a8e0:	bd38      	pop	{r3, r4, r5, pc}
 800a8e2:	bf00      	nop

0800a8e4 <ucdr_deserialize_uint8_t>:
 800a8e4:	b538      	push	{r3, r4, r5, lr}
 800a8e6:	460d      	mov	r5, r1
 800a8e8:	2101      	movs	r1, #1
 800a8ea:	4604      	mov	r4, r0
 800a8ec:	f001 f8de 	bl	800baac <ucdr_check_final_buffer_behavior>
 800a8f0:	b150      	cbz	r0, 800a908 <ucdr_deserialize_uint8_t+0x24>
 800a8f2:	68a3      	ldr	r3, [r4, #8]
 800a8f4:	781b      	ldrb	r3, [r3, #0]
 800a8f6:	702b      	strb	r3, [r5, #0]
 800a8f8:	68a2      	ldr	r2, [r4, #8]
 800a8fa:	6923      	ldr	r3, [r4, #16]
 800a8fc:	2101      	movs	r1, #1
 800a8fe:	440a      	add	r2, r1
 800a900:	440b      	add	r3, r1
 800a902:	60a2      	str	r2, [r4, #8]
 800a904:	6123      	str	r3, [r4, #16]
 800a906:	7561      	strb	r1, [r4, #21]
 800a908:	7da0      	ldrb	r0, [r4, #22]
 800a90a:	f080 0001 	eor.w	r0, r0, #1
 800a90e:	bd38      	pop	{r3, r4, r5, pc}

0800a910 <ucdr_serialize_uint16_t>:
 800a910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a914:	b082      	sub	sp, #8
 800a916:	460b      	mov	r3, r1
 800a918:	2102      	movs	r1, #2
 800a91a:	4604      	mov	r4, r0
 800a91c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a920:	f001 f918 	bl	800bb54 <ucdr_buffer_alignment>
 800a924:	4601      	mov	r1, r0
 800a926:	4620      	mov	r0, r4
 800a928:	7d67      	ldrb	r7, [r4, #21]
 800a92a:	f001 f957 	bl	800bbdc <ucdr_advance_buffer>
 800a92e:	2102      	movs	r1, #2
 800a930:	4620      	mov	r0, r4
 800a932:	f001 f8af 	bl	800ba94 <ucdr_check_buffer_available_for>
 800a936:	bb78      	cbnz	r0, 800a998 <ucdr_serialize_uint16_t+0x88>
 800a938:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a93c:	42ab      	cmp	r3, r5
 800a93e:	d926      	bls.n	800a98e <ucdr_serialize_uint16_t+0x7e>
 800a940:	1b5e      	subs	r6, r3, r5
 800a942:	60a3      	str	r3, [r4, #8]
 800a944:	6923      	ldr	r3, [r4, #16]
 800a946:	f1c6 0802 	rsb	r8, r6, #2
 800a94a:	4433      	add	r3, r6
 800a94c:	6123      	str	r3, [r4, #16]
 800a94e:	4641      	mov	r1, r8
 800a950:	4620      	mov	r0, r4
 800a952:	f001 f8ab 	bl	800baac <ucdr_check_final_buffer_behavior>
 800a956:	2800      	cmp	r0, #0
 800a958:	d03b      	beq.n	800a9d2 <ucdr_serialize_uint16_t+0xc2>
 800a95a:	7d23      	ldrb	r3, [r4, #20]
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d04a      	beq.n	800a9f6 <ucdr_serialize_uint16_t+0xe6>
 800a960:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a964:	702b      	strb	r3, [r5, #0]
 800a966:	2e00      	cmp	r6, #0
 800a968:	d040      	beq.n	800a9ec <ucdr_serialize_uint16_t+0xdc>
 800a96a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a96e:	706b      	strb	r3, [r5, #1]
 800a970:	6923      	ldr	r3, [r4, #16]
 800a972:	68a2      	ldr	r2, [r4, #8]
 800a974:	7da0      	ldrb	r0, [r4, #22]
 800a976:	3302      	adds	r3, #2
 800a978:	1b9e      	subs	r6, r3, r6
 800a97a:	4442      	add	r2, r8
 800a97c:	2302      	movs	r3, #2
 800a97e:	f080 0001 	eor.w	r0, r0, #1
 800a982:	60a2      	str	r2, [r4, #8]
 800a984:	6126      	str	r6, [r4, #16]
 800a986:	7563      	strb	r3, [r4, #21]
 800a988:	b002      	add	sp, #8
 800a98a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a98e:	2102      	movs	r1, #2
 800a990:	4620      	mov	r0, r4
 800a992:	f001 f88b 	bl	800baac <ucdr_check_final_buffer_behavior>
 800a996:	b190      	cbz	r0, 800a9be <ucdr_serialize_uint16_t+0xae>
 800a998:	7d23      	ldrb	r3, [r4, #20]
 800a99a:	2b01      	cmp	r3, #1
 800a99c:	68a3      	ldr	r3, [r4, #8]
 800a99e:	d014      	beq.n	800a9ca <ucdr_serialize_uint16_t+0xba>
 800a9a0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a9a4:	701a      	strb	r2, [r3, #0]
 800a9a6:	68a3      	ldr	r3, [r4, #8]
 800a9a8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a9ac:	705a      	strb	r2, [r3, #1]
 800a9ae:	68a2      	ldr	r2, [r4, #8]
 800a9b0:	6923      	ldr	r3, [r4, #16]
 800a9b2:	3202      	adds	r2, #2
 800a9b4:	3302      	adds	r3, #2
 800a9b6:	2102      	movs	r1, #2
 800a9b8:	60a2      	str	r2, [r4, #8]
 800a9ba:	6123      	str	r3, [r4, #16]
 800a9bc:	7561      	strb	r1, [r4, #21]
 800a9be:	7da0      	ldrb	r0, [r4, #22]
 800a9c0:	f080 0001 	eor.w	r0, r0, #1
 800a9c4:	b002      	add	sp, #8
 800a9c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9ca:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a9ce:	801a      	strh	r2, [r3, #0]
 800a9d0:	e7ed      	b.n	800a9ae <ucdr_serialize_uint16_t+0x9e>
 800a9d2:	68a2      	ldr	r2, [r4, #8]
 800a9d4:	6923      	ldr	r3, [r4, #16]
 800a9d6:	7da0      	ldrb	r0, [r4, #22]
 800a9d8:	7567      	strb	r7, [r4, #21]
 800a9da:	1b92      	subs	r2, r2, r6
 800a9dc:	1b9b      	subs	r3, r3, r6
 800a9de:	f080 0001 	eor.w	r0, r0, #1
 800a9e2:	60a2      	str	r2, [r4, #8]
 800a9e4:	6123      	str	r3, [r4, #16]
 800a9e6:	b002      	add	sp, #8
 800a9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9ec:	68a3      	ldr	r3, [r4, #8]
 800a9ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a9f2:	701a      	strb	r2, [r3, #0]
 800a9f4:	e7bc      	b.n	800a970 <ucdr_serialize_uint16_t+0x60>
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	f10d 0506 	add.w	r5, sp, #6
 800a9fc:	4629      	mov	r1, r5
 800a9fe:	4632      	mov	r2, r6
 800aa00:	f00c ff9d 	bl	801793e <memcpy>
 800aa04:	68a0      	ldr	r0, [r4, #8]
 800aa06:	4642      	mov	r2, r8
 800aa08:	19a9      	adds	r1, r5, r6
 800aa0a:	f00c ff98 	bl	801793e <memcpy>
 800aa0e:	e7af      	b.n	800a970 <ucdr_serialize_uint16_t+0x60>

0800aa10 <ucdr_serialize_endian_uint16_t>:
 800aa10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa14:	b083      	sub	sp, #12
 800aa16:	460d      	mov	r5, r1
 800aa18:	2102      	movs	r1, #2
 800aa1a:	4604      	mov	r4, r0
 800aa1c:	f8ad 2006 	strh.w	r2, [sp, #6]
 800aa20:	f001 f898 	bl	800bb54 <ucdr_buffer_alignment>
 800aa24:	4601      	mov	r1, r0
 800aa26:	4620      	mov	r0, r4
 800aa28:	f894 8015 	ldrb.w	r8, [r4, #21]
 800aa2c:	f001 f8d6 	bl	800bbdc <ucdr_advance_buffer>
 800aa30:	2102      	movs	r1, #2
 800aa32:	4620      	mov	r0, r4
 800aa34:	f001 f82e 	bl	800ba94 <ucdr_check_buffer_available_for>
 800aa38:	bb70      	cbnz	r0, 800aa98 <ucdr_serialize_endian_uint16_t+0x88>
 800aa3a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800aa3e:	42be      	cmp	r6, r7
 800aa40:	d925      	bls.n	800aa8e <ucdr_serialize_endian_uint16_t+0x7e>
 800aa42:	6923      	ldr	r3, [r4, #16]
 800aa44:	60a6      	str	r6, [r4, #8]
 800aa46:	1bf6      	subs	r6, r6, r7
 800aa48:	4433      	add	r3, r6
 800aa4a:	f1c6 0902 	rsb	r9, r6, #2
 800aa4e:	6123      	str	r3, [r4, #16]
 800aa50:	4649      	mov	r1, r9
 800aa52:	4620      	mov	r0, r4
 800aa54:	f001 f82a 	bl	800baac <ucdr_check_final_buffer_behavior>
 800aa58:	2800      	cmp	r0, #0
 800aa5a:	d039      	beq.n	800aad0 <ucdr_serialize_endian_uint16_t+0xc0>
 800aa5c:	2d01      	cmp	r5, #1
 800aa5e:	d04a      	beq.n	800aaf6 <ucdr_serialize_endian_uint16_t+0xe6>
 800aa60:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800aa64:	703b      	strb	r3, [r7, #0]
 800aa66:	2e00      	cmp	r6, #0
 800aa68:	d040      	beq.n	800aaec <ucdr_serialize_endian_uint16_t+0xdc>
 800aa6a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800aa6e:	707b      	strb	r3, [r7, #1]
 800aa70:	6923      	ldr	r3, [r4, #16]
 800aa72:	68a2      	ldr	r2, [r4, #8]
 800aa74:	7da0      	ldrb	r0, [r4, #22]
 800aa76:	3302      	adds	r3, #2
 800aa78:	444a      	add	r2, r9
 800aa7a:	1b9b      	subs	r3, r3, r6
 800aa7c:	2102      	movs	r1, #2
 800aa7e:	f080 0001 	eor.w	r0, r0, #1
 800aa82:	60a2      	str	r2, [r4, #8]
 800aa84:	6123      	str	r3, [r4, #16]
 800aa86:	7561      	strb	r1, [r4, #21]
 800aa88:	b003      	add	sp, #12
 800aa8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa8e:	2102      	movs	r1, #2
 800aa90:	4620      	mov	r0, r4
 800aa92:	f001 f80b 	bl	800baac <ucdr_check_final_buffer_behavior>
 800aa96:	b188      	cbz	r0, 800aabc <ucdr_serialize_endian_uint16_t+0xac>
 800aa98:	2d01      	cmp	r5, #1
 800aa9a:	68a3      	ldr	r3, [r4, #8]
 800aa9c:	d014      	beq.n	800aac8 <ucdr_serialize_endian_uint16_t+0xb8>
 800aa9e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800aaa2:	701a      	strb	r2, [r3, #0]
 800aaa4:	68a3      	ldr	r3, [r4, #8]
 800aaa6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aaaa:	705a      	strb	r2, [r3, #1]
 800aaac:	68a2      	ldr	r2, [r4, #8]
 800aaae:	6923      	ldr	r3, [r4, #16]
 800aab0:	3202      	adds	r2, #2
 800aab2:	3302      	adds	r3, #2
 800aab4:	2102      	movs	r1, #2
 800aab6:	60a2      	str	r2, [r4, #8]
 800aab8:	6123      	str	r3, [r4, #16]
 800aaba:	7561      	strb	r1, [r4, #21]
 800aabc:	7da0      	ldrb	r0, [r4, #22]
 800aabe:	f080 0001 	eor.w	r0, r0, #1
 800aac2:	b003      	add	sp, #12
 800aac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aac8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800aacc:	801a      	strh	r2, [r3, #0]
 800aace:	e7ed      	b.n	800aaac <ucdr_serialize_endian_uint16_t+0x9c>
 800aad0:	68a2      	ldr	r2, [r4, #8]
 800aad2:	6923      	ldr	r3, [r4, #16]
 800aad4:	7da0      	ldrb	r0, [r4, #22]
 800aad6:	f884 8015 	strb.w	r8, [r4, #21]
 800aada:	1b92      	subs	r2, r2, r6
 800aadc:	1b9b      	subs	r3, r3, r6
 800aade:	f080 0001 	eor.w	r0, r0, #1
 800aae2:	60a2      	str	r2, [r4, #8]
 800aae4:	6123      	str	r3, [r4, #16]
 800aae6:	b003      	add	sp, #12
 800aae8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aaec:	68a3      	ldr	r3, [r4, #8]
 800aaee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aaf2:	701a      	strb	r2, [r3, #0]
 800aaf4:	e7bc      	b.n	800aa70 <ucdr_serialize_endian_uint16_t+0x60>
 800aaf6:	f10d 0506 	add.w	r5, sp, #6
 800aafa:	4629      	mov	r1, r5
 800aafc:	4632      	mov	r2, r6
 800aafe:	4638      	mov	r0, r7
 800ab00:	f00c ff1d 	bl	801793e <memcpy>
 800ab04:	68a0      	ldr	r0, [r4, #8]
 800ab06:	464a      	mov	r2, r9
 800ab08:	19a9      	adds	r1, r5, r6
 800ab0a:	f00c ff18 	bl	801793e <memcpy>
 800ab0e:	e7af      	b.n	800aa70 <ucdr_serialize_endian_uint16_t+0x60>

0800ab10 <ucdr_deserialize_uint16_t>:
 800ab10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab14:	460d      	mov	r5, r1
 800ab16:	2102      	movs	r1, #2
 800ab18:	4604      	mov	r4, r0
 800ab1a:	f001 f81b 	bl	800bb54 <ucdr_buffer_alignment>
 800ab1e:	4601      	mov	r1, r0
 800ab20:	4620      	mov	r0, r4
 800ab22:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ab26:	f001 f859 	bl	800bbdc <ucdr_advance_buffer>
 800ab2a:	2102      	movs	r1, #2
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	f000 ffb1 	bl	800ba94 <ucdr_check_buffer_available_for>
 800ab32:	bb60      	cbnz	r0, 800ab8e <ucdr_deserialize_uint16_t+0x7e>
 800ab34:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ab38:	42be      	cmp	r6, r7
 800ab3a:	d923      	bls.n	800ab84 <ucdr_deserialize_uint16_t+0x74>
 800ab3c:	6923      	ldr	r3, [r4, #16]
 800ab3e:	60a6      	str	r6, [r4, #8]
 800ab40:	1bf6      	subs	r6, r6, r7
 800ab42:	4433      	add	r3, r6
 800ab44:	f1c6 0902 	rsb	r9, r6, #2
 800ab48:	6123      	str	r3, [r4, #16]
 800ab4a:	4649      	mov	r1, r9
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	f000 ffad 	bl	800baac <ucdr_check_final_buffer_behavior>
 800ab52:	2800      	cmp	r0, #0
 800ab54:	d034      	beq.n	800abc0 <ucdr_deserialize_uint16_t+0xb0>
 800ab56:	7d23      	ldrb	r3, [r4, #20]
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d042      	beq.n	800abe2 <ucdr_deserialize_uint16_t+0xd2>
 800ab5c:	787b      	ldrb	r3, [r7, #1]
 800ab5e:	702b      	strb	r3, [r5, #0]
 800ab60:	2e00      	cmp	r6, #0
 800ab62:	d03a      	beq.n	800abda <ucdr_deserialize_uint16_t+0xca>
 800ab64:	783b      	ldrb	r3, [r7, #0]
 800ab66:	706b      	strb	r3, [r5, #1]
 800ab68:	6923      	ldr	r3, [r4, #16]
 800ab6a:	68a2      	ldr	r2, [r4, #8]
 800ab6c:	7da0      	ldrb	r0, [r4, #22]
 800ab6e:	2102      	movs	r1, #2
 800ab70:	3302      	adds	r3, #2
 800ab72:	444a      	add	r2, r9
 800ab74:	1b9b      	subs	r3, r3, r6
 800ab76:	7561      	strb	r1, [r4, #21]
 800ab78:	60a2      	str	r2, [r4, #8]
 800ab7a:	6123      	str	r3, [r4, #16]
 800ab7c:	f080 0001 	eor.w	r0, r0, #1
 800ab80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab84:	2102      	movs	r1, #2
 800ab86:	4620      	mov	r0, r4
 800ab88:	f000 ff90 	bl	800baac <ucdr_check_final_buffer_behavior>
 800ab8c:	b180      	cbz	r0, 800abb0 <ucdr_deserialize_uint16_t+0xa0>
 800ab8e:	7d23      	ldrb	r3, [r4, #20]
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	68a3      	ldr	r3, [r4, #8]
 800ab94:	d011      	beq.n	800abba <ucdr_deserialize_uint16_t+0xaa>
 800ab96:	785b      	ldrb	r3, [r3, #1]
 800ab98:	702b      	strb	r3, [r5, #0]
 800ab9a:	68a3      	ldr	r3, [r4, #8]
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	706b      	strb	r3, [r5, #1]
 800aba0:	68a2      	ldr	r2, [r4, #8]
 800aba2:	6923      	ldr	r3, [r4, #16]
 800aba4:	3202      	adds	r2, #2
 800aba6:	3302      	adds	r3, #2
 800aba8:	2102      	movs	r1, #2
 800abaa:	60a2      	str	r2, [r4, #8]
 800abac:	6123      	str	r3, [r4, #16]
 800abae:	7561      	strb	r1, [r4, #21]
 800abb0:	7da0      	ldrb	r0, [r4, #22]
 800abb2:	f080 0001 	eor.w	r0, r0, #1
 800abb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abba:	881b      	ldrh	r3, [r3, #0]
 800abbc:	802b      	strh	r3, [r5, #0]
 800abbe:	e7ef      	b.n	800aba0 <ucdr_deserialize_uint16_t+0x90>
 800abc0:	68a2      	ldr	r2, [r4, #8]
 800abc2:	6923      	ldr	r3, [r4, #16]
 800abc4:	7da0      	ldrb	r0, [r4, #22]
 800abc6:	f884 8015 	strb.w	r8, [r4, #21]
 800abca:	1b92      	subs	r2, r2, r6
 800abcc:	1b9b      	subs	r3, r3, r6
 800abce:	60a2      	str	r2, [r4, #8]
 800abd0:	6123      	str	r3, [r4, #16]
 800abd2:	f080 0001 	eor.w	r0, r0, #1
 800abd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abda:	68a3      	ldr	r3, [r4, #8]
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	706b      	strb	r3, [r5, #1]
 800abe0:	e7c2      	b.n	800ab68 <ucdr_deserialize_uint16_t+0x58>
 800abe2:	4639      	mov	r1, r7
 800abe4:	4632      	mov	r2, r6
 800abe6:	4628      	mov	r0, r5
 800abe8:	f00c fea9 	bl	801793e <memcpy>
 800abec:	68a1      	ldr	r1, [r4, #8]
 800abee:	464a      	mov	r2, r9
 800abf0:	19a8      	adds	r0, r5, r6
 800abf2:	f00c fea4 	bl	801793e <memcpy>
 800abf6:	e7b7      	b.n	800ab68 <ucdr_deserialize_uint16_t+0x58>

0800abf8 <ucdr_deserialize_endian_uint16_t>:
 800abf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abfc:	460e      	mov	r6, r1
 800abfe:	2102      	movs	r1, #2
 800ac00:	4604      	mov	r4, r0
 800ac02:	4615      	mov	r5, r2
 800ac04:	f000 ffa6 	bl	800bb54 <ucdr_buffer_alignment>
 800ac08:	4601      	mov	r1, r0
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ac10:	f000 ffe4 	bl	800bbdc <ucdr_advance_buffer>
 800ac14:	2102      	movs	r1, #2
 800ac16:	4620      	mov	r0, r4
 800ac18:	f000 ff3c 	bl	800ba94 <ucdr_check_buffer_available_for>
 800ac1c:	bb70      	cbnz	r0, 800ac7c <ucdr_deserialize_endian_uint16_t+0x84>
 800ac1e:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800ac22:	4547      	cmp	r7, r8
 800ac24:	d925      	bls.n	800ac72 <ucdr_deserialize_endian_uint16_t+0x7a>
 800ac26:	6923      	ldr	r3, [r4, #16]
 800ac28:	60a7      	str	r7, [r4, #8]
 800ac2a:	eba7 0708 	sub.w	r7, r7, r8
 800ac2e:	443b      	add	r3, r7
 800ac30:	f1c7 0a02 	rsb	sl, r7, #2
 800ac34:	6123      	str	r3, [r4, #16]
 800ac36:	4651      	mov	r1, sl
 800ac38:	4620      	mov	r0, r4
 800ac3a:	f000 ff37 	bl	800baac <ucdr_check_final_buffer_behavior>
 800ac3e:	2800      	cmp	r0, #0
 800ac40:	d034      	beq.n	800acac <ucdr_deserialize_endian_uint16_t+0xb4>
 800ac42:	2e01      	cmp	r6, #1
 800ac44:	d043      	beq.n	800acce <ucdr_deserialize_endian_uint16_t+0xd6>
 800ac46:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ac4a:	702b      	strb	r3, [r5, #0]
 800ac4c:	2f00      	cmp	r7, #0
 800ac4e:	d03a      	beq.n	800acc6 <ucdr_deserialize_endian_uint16_t+0xce>
 800ac50:	f898 3000 	ldrb.w	r3, [r8]
 800ac54:	706b      	strb	r3, [r5, #1]
 800ac56:	6923      	ldr	r3, [r4, #16]
 800ac58:	68a2      	ldr	r2, [r4, #8]
 800ac5a:	7da0      	ldrb	r0, [r4, #22]
 800ac5c:	2102      	movs	r1, #2
 800ac5e:	3302      	adds	r3, #2
 800ac60:	4452      	add	r2, sl
 800ac62:	1bdb      	subs	r3, r3, r7
 800ac64:	7561      	strb	r1, [r4, #21]
 800ac66:	60a2      	str	r2, [r4, #8]
 800ac68:	6123      	str	r3, [r4, #16]
 800ac6a:	f080 0001 	eor.w	r0, r0, #1
 800ac6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac72:	2102      	movs	r1, #2
 800ac74:	4620      	mov	r0, r4
 800ac76:	f000 ff19 	bl	800baac <ucdr_check_final_buffer_behavior>
 800ac7a:	b178      	cbz	r0, 800ac9c <ucdr_deserialize_endian_uint16_t+0xa4>
 800ac7c:	2e01      	cmp	r6, #1
 800ac7e:	68a3      	ldr	r3, [r4, #8]
 800ac80:	d011      	beq.n	800aca6 <ucdr_deserialize_endian_uint16_t+0xae>
 800ac82:	785b      	ldrb	r3, [r3, #1]
 800ac84:	702b      	strb	r3, [r5, #0]
 800ac86:	68a3      	ldr	r3, [r4, #8]
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	706b      	strb	r3, [r5, #1]
 800ac8c:	68a2      	ldr	r2, [r4, #8]
 800ac8e:	6923      	ldr	r3, [r4, #16]
 800ac90:	3202      	adds	r2, #2
 800ac92:	3302      	adds	r3, #2
 800ac94:	2102      	movs	r1, #2
 800ac96:	60a2      	str	r2, [r4, #8]
 800ac98:	6123      	str	r3, [r4, #16]
 800ac9a:	7561      	strb	r1, [r4, #21]
 800ac9c:	7da0      	ldrb	r0, [r4, #22]
 800ac9e:	f080 0001 	eor.w	r0, r0, #1
 800aca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aca6:	881b      	ldrh	r3, [r3, #0]
 800aca8:	802b      	strh	r3, [r5, #0]
 800acaa:	e7ef      	b.n	800ac8c <ucdr_deserialize_endian_uint16_t+0x94>
 800acac:	68a2      	ldr	r2, [r4, #8]
 800acae:	6923      	ldr	r3, [r4, #16]
 800acb0:	7da0      	ldrb	r0, [r4, #22]
 800acb2:	f884 9015 	strb.w	r9, [r4, #21]
 800acb6:	1bd2      	subs	r2, r2, r7
 800acb8:	1bdb      	subs	r3, r3, r7
 800acba:	60a2      	str	r2, [r4, #8]
 800acbc:	6123      	str	r3, [r4, #16]
 800acbe:	f080 0001 	eor.w	r0, r0, #1
 800acc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acc6:	68a3      	ldr	r3, [r4, #8]
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	706b      	strb	r3, [r5, #1]
 800accc:	e7c3      	b.n	800ac56 <ucdr_deserialize_endian_uint16_t+0x5e>
 800acce:	4641      	mov	r1, r8
 800acd0:	463a      	mov	r2, r7
 800acd2:	4628      	mov	r0, r5
 800acd4:	f00c fe33 	bl	801793e <memcpy>
 800acd8:	68a1      	ldr	r1, [r4, #8]
 800acda:	4652      	mov	r2, sl
 800acdc:	19e8      	adds	r0, r5, r7
 800acde:	f00c fe2e 	bl	801793e <memcpy>
 800ace2:	e7b8      	b.n	800ac56 <ucdr_deserialize_endian_uint16_t+0x5e>

0800ace4 <ucdr_serialize_uint32_t>:
 800ace4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ace8:	b082      	sub	sp, #8
 800acea:	4604      	mov	r4, r0
 800acec:	9101      	str	r1, [sp, #4]
 800acee:	2104      	movs	r1, #4
 800acf0:	f000 ff30 	bl	800bb54 <ucdr_buffer_alignment>
 800acf4:	4601      	mov	r1, r0
 800acf6:	4620      	mov	r0, r4
 800acf8:	7d67      	ldrb	r7, [r4, #21]
 800acfa:	f000 ff6f 	bl	800bbdc <ucdr_advance_buffer>
 800acfe:	2104      	movs	r1, #4
 800ad00:	4620      	mov	r0, r4
 800ad02:	f000 fec7 	bl	800ba94 <ucdr_check_buffer_available_for>
 800ad06:	2800      	cmp	r0, #0
 800ad08:	d139      	bne.n	800ad7e <ucdr_serialize_uint32_t+0x9a>
 800ad0a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ad0e:	42ab      	cmp	r3, r5
 800ad10:	d930      	bls.n	800ad74 <ucdr_serialize_uint32_t+0x90>
 800ad12:	1b5e      	subs	r6, r3, r5
 800ad14:	60a3      	str	r3, [r4, #8]
 800ad16:	6923      	ldr	r3, [r4, #16]
 800ad18:	f1c6 0804 	rsb	r8, r6, #4
 800ad1c:	4433      	add	r3, r6
 800ad1e:	6123      	str	r3, [r4, #16]
 800ad20:	4641      	mov	r1, r8
 800ad22:	4620      	mov	r0, r4
 800ad24:	f000 fec2 	bl	800baac <ucdr_check_final_buffer_behavior>
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	d04c      	beq.n	800adc6 <ucdr_serialize_uint32_t+0xe2>
 800ad2c:	7d23      	ldrb	r3, [r4, #20]
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d063      	beq.n	800adfa <ucdr_serialize_uint32_t+0x116>
 800ad32:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ad36:	702b      	strb	r3, [r5, #0]
 800ad38:	2e00      	cmp	r6, #0
 800ad3a:	d051      	beq.n	800ade0 <ucdr_serialize_uint32_t+0xfc>
 800ad3c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ad40:	706b      	strb	r3, [r5, #1]
 800ad42:	2e01      	cmp	r6, #1
 800ad44:	d050      	beq.n	800ade8 <ucdr_serialize_uint32_t+0x104>
 800ad46:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ad4a:	70ab      	strb	r3, [r5, #2]
 800ad4c:	2e02      	cmp	r6, #2
 800ad4e:	d04f      	beq.n	800adf0 <ucdr_serialize_uint32_t+0x10c>
 800ad50:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ad54:	70eb      	strb	r3, [r5, #3]
 800ad56:	6923      	ldr	r3, [r4, #16]
 800ad58:	68a2      	ldr	r2, [r4, #8]
 800ad5a:	7da0      	ldrb	r0, [r4, #22]
 800ad5c:	3304      	adds	r3, #4
 800ad5e:	1b9e      	subs	r6, r3, r6
 800ad60:	4442      	add	r2, r8
 800ad62:	2304      	movs	r3, #4
 800ad64:	f080 0001 	eor.w	r0, r0, #1
 800ad68:	60a2      	str	r2, [r4, #8]
 800ad6a:	6126      	str	r6, [r4, #16]
 800ad6c:	7563      	strb	r3, [r4, #21]
 800ad6e:	b002      	add	sp, #8
 800ad70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad74:	2104      	movs	r1, #4
 800ad76:	4620      	mov	r0, r4
 800ad78:	f000 fe98 	bl	800baac <ucdr_check_final_buffer_behavior>
 800ad7c:	b1d0      	cbz	r0, 800adb4 <ucdr_serialize_uint32_t+0xd0>
 800ad7e:	7d23      	ldrb	r3, [r4, #20]
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	68a3      	ldr	r3, [r4, #8]
 800ad84:	d01c      	beq.n	800adc0 <ucdr_serialize_uint32_t+0xdc>
 800ad86:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ad8a:	701a      	strb	r2, [r3, #0]
 800ad8c:	68a3      	ldr	r3, [r4, #8]
 800ad8e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ad92:	705a      	strb	r2, [r3, #1]
 800ad94:	68a3      	ldr	r3, [r4, #8]
 800ad96:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ad9a:	709a      	strb	r2, [r3, #2]
 800ad9c:	68a3      	ldr	r3, [r4, #8]
 800ad9e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ada2:	70da      	strb	r2, [r3, #3]
 800ada4:	68a2      	ldr	r2, [r4, #8]
 800ada6:	6923      	ldr	r3, [r4, #16]
 800ada8:	3204      	adds	r2, #4
 800adaa:	3304      	adds	r3, #4
 800adac:	2104      	movs	r1, #4
 800adae:	60a2      	str	r2, [r4, #8]
 800adb0:	6123      	str	r3, [r4, #16]
 800adb2:	7561      	strb	r1, [r4, #21]
 800adb4:	7da0      	ldrb	r0, [r4, #22]
 800adb6:	f080 0001 	eor.w	r0, r0, #1
 800adba:	b002      	add	sp, #8
 800adbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adc0:	9a01      	ldr	r2, [sp, #4]
 800adc2:	601a      	str	r2, [r3, #0]
 800adc4:	e7ee      	b.n	800ada4 <ucdr_serialize_uint32_t+0xc0>
 800adc6:	68a2      	ldr	r2, [r4, #8]
 800adc8:	6923      	ldr	r3, [r4, #16]
 800adca:	7da0      	ldrb	r0, [r4, #22]
 800adcc:	7567      	strb	r7, [r4, #21]
 800adce:	1b92      	subs	r2, r2, r6
 800add0:	1b9b      	subs	r3, r3, r6
 800add2:	f080 0001 	eor.w	r0, r0, #1
 800add6:	60a2      	str	r2, [r4, #8]
 800add8:	6123      	str	r3, [r4, #16]
 800adda:	b002      	add	sp, #8
 800addc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ade0:	68a3      	ldr	r3, [r4, #8]
 800ade2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ade6:	701a      	strb	r2, [r3, #0]
 800ade8:	68a3      	ldr	r3, [r4, #8]
 800adea:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800adee:	701a      	strb	r2, [r3, #0]
 800adf0:	68a3      	ldr	r3, [r4, #8]
 800adf2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800adf6:	701a      	strb	r2, [r3, #0]
 800adf8:	e7ad      	b.n	800ad56 <ucdr_serialize_uint32_t+0x72>
 800adfa:	4628      	mov	r0, r5
 800adfc:	ad01      	add	r5, sp, #4
 800adfe:	4629      	mov	r1, r5
 800ae00:	4632      	mov	r2, r6
 800ae02:	f00c fd9c 	bl	801793e <memcpy>
 800ae06:	68a0      	ldr	r0, [r4, #8]
 800ae08:	4642      	mov	r2, r8
 800ae0a:	19a9      	adds	r1, r5, r6
 800ae0c:	f00c fd97 	bl	801793e <memcpy>
 800ae10:	e7a1      	b.n	800ad56 <ucdr_serialize_uint32_t+0x72>
 800ae12:	bf00      	nop

0800ae14 <ucdr_serialize_endian_uint32_t>:
 800ae14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae18:	b083      	sub	sp, #12
 800ae1a:	460d      	mov	r5, r1
 800ae1c:	2104      	movs	r1, #4
 800ae1e:	4604      	mov	r4, r0
 800ae20:	9201      	str	r2, [sp, #4]
 800ae22:	f000 fe97 	bl	800bb54 <ucdr_buffer_alignment>
 800ae26:	4601      	mov	r1, r0
 800ae28:	4620      	mov	r0, r4
 800ae2a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ae2e:	f000 fed5 	bl	800bbdc <ucdr_advance_buffer>
 800ae32:	2104      	movs	r1, #4
 800ae34:	4620      	mov	r0, r4
 800ae36:	f000 fe2d 	bl	800ba94 <ucdr_check_buffer_available_for>
 800ae3a:	2800      	cmp	r0, #0
 800ae3c:	d138      	bne.n	800aeb0 <ucdr_serialize_endian_uint32_t+0x9c>
 800ae3e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ae42:	42b7      	cmp	r7, r6
 800ae44:	d92f      	bls.n	800aea6 <ucdr_serialize_endian_uint32_t+0x92>
 800ae46:	6923      	ldr	r3, [r4, #16]
 800ae48:	60a7      	str	r7, [r4, #8]
 800ae4a:	1bbf      	subs	r7, r7, r6
 800ae4c:	443b      	add	r3, r7
 800ae4e:	f1c7 0904 	rsb	r9, r7, #4
 800ae52:	6123      	str	r3, [r4, #16]
 800ae54:	4649      	mov	r1, r9
 800ae56:	4620      	mov	r0, r4
 800ae58:	f000 fe28 	bl	800baac <ucdr_check_final_buffer_behavior>
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	d04a      	beq.n	800aef6 <ucdr_serialize_endian_uint32_t+0xe2>
 800ae60:	2d01      	cmp	r5, #1
 800ae62:	d063      	beq.n	800af2c <ucdr_serialize_endian_uint32_t+0x118>
 800ae64:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ae68:	7033      	strb	r3, [r6, #0]
 800ae6a:	2f00      	cmp	r7, #0
 800ae6c:	d051      	beq.n	800af12 <ucdr_serialize_endian_uint32_t+0xfe>
 800ae6e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ae72:	7073      	strb	r3, [r6, #1]
 800ae74:	2f01      	cmp	r7, #1
 800ae76:	d050      	beq.n	800af1a <ucdr_serialize_endian_uint32_t+0x106>
 800ae78:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ae7c:	70b3      	strb	r3, [r6, #2]
 800ae7e:	2f02      	cmp	r7, #2
 800ae80:	d04f      	beq.n	800af22 <ucdr_serialize_endian_uint32_t+0x10e>
 800ae82:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ae86:	70f3      	strb	r3, [r6, #3]
 800ae88:	6923      	ldr	r3, [r4, #16]
 800ae8a:	68a2      	ldr	r2, [r4, #8]
 800ae8c:	7da0      	ldrb	r0, [r4, #22]
 800ae8e:	3304      	adds	r3, #4
 800ae90:	444a      	add	r2, r9
 800ae92:	1bdb      	subs	r3, r3, r7
 800ae94:	2104      	movs	r1, #4
 800ae96:	f080 0001 	eor.w	r0, r0, #1
 800ae9a:	60a2      	str	r2, [r4, #8]
 800ae9c:	6123      	str	r3, [r4, #16]
 800ae9e:	7561      	strb	r1, [r4, #21]
 800aea0:	b003      	add	sp, #12
 800aea2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aea6:	2104      	movs	r1, #4
 800aea8:	4620      	mov	r0, r4
 800aeaa:	f000 fdff 	bl	800baac <ucdr_check_final_buffer_behavior>
 800aeae:	b1c8      	cbz	r0, 800aee4 <ucdr_serialize_endian_uint32_t+0xd0>
 800aeb0:	2d01      	cmp	r5, #1
 800aeb2:	68a3      	ldr	r3, [r4, #8]
 800aeb4:	d01c      	beq.n	800aef0 <ucdr_serialize_endian_uint32_t+0xdc>
 800aeb6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800aeba:	701a      	strb	r2, [r3, #0]
 800aebc:	68a3      	ldr	r3, [r4, #8]
 800aebe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aec2:	705a      	strb	r2, [r3, #1]
 800aec4:	68a3      	ldr	r3, [r4, #8]
 800aec6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800aeca:	709a      	strb	r2, [r3, #2]
 800aecc:	68a3      	ldr	r3, [r4, #8]
 800aece:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800aed2:	70da      	strb	r2, [r3, #3]
 800aed4:	68a2      	ldr	r2, [r4, #8]
 800aed6:	6923      	ldr	r3, [r4, #16]
 800aed8:	3204      	adds	r2, #4
 800aeda:	3304      	adds	r3, #4
 800aedc:	2104      	movs	r1, #4
 800aede:	60a2      	str	r2, [r4, #8]
 800aee0:	6123      	str	r3, [r4, #16]
 800aee2:	7561      	strb	r1, [r4, #21]
 800aee4:	7da0      	ldrb	r0, [r4, #22]
 800aee6:	f080 0001 	eor.w	r0, r0, #1
 800aeea:	b003      	add	sp, #12
 800aeec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aef0:	9a01      	ldr	r2, [sp, #4]
 800aef2:	601a      	str	r2, [r3, #0]
 800aef4:	e7ee      	b.n	800aed4 <ucdr_serialize_endian_uint32_t+0xc0>
 800aef6:	68a2      	ldr	r2, [r4, #8]
 800aef8:	6923      	ldr	r3, [r4, #16]
 800aefa:	7da0      	ldrb	r0, [r4, #22]
 800aefc:	f884 8015 	strb.w	r8, [r4, #21]
 800af00:	1bd2      	subs	r2, r2, r7
 800af02:	1bdb      	subs	r3, r3, r7
 800af04:	f080 0001 	eor.w	r0, r0, #1
 800af08:	60a2      	str	r2, [r4, #8]
 800af0a:	6123      	str	r3, [r4, #16]
 800af0c:	b003      	add	sp, #12
 800af0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af12:	68a3      	ldr	r3, [r4, #8]
 800af14:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800af18:	701a      	strb	r2, [r3, #0]
 800af1a:	68a3      	ldr	r3, [r4, #8]
 800af1c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800af20:	701a      	strb	r2, [r3, #0]
 800af22:	68a3      	ldr	r3, [r4, #8]
 800af24:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800af28:	701a      	strb	r2, [r3, #0]
 800af2a:	e7ad      	b.n	800ae88 <ucdr_serialize_endian_uint32_t+0x74>
 800af2c:	ad01      	add	r5, sp, #4
 800af2e:	4629      	mov	r1, r5
 800af30:	463a      	mov	r2, r7
 800af32:	4630      	mov	r0, r6
 800af34:	f00c fd03 	bl	801793e <memcpy>
 800af38:	68a0      	ldr	r0, [r4, #8]
 800af3a:	464a      	mov	r2, r9
 800af3c:	19e9      	adds	r1, r5, r7
 800af3e:	f00c fcfe 	bl	801793e <memcpy>
 800af42:	e7a1      	b.n	800ae88 <ucdr_serialize_endian_uint32_t+0x74>

0800af44 <ucdr_deserialize_uint32_t>:
 800af44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af48:	460d      	mov	r5, r1
 800af4a:	2104      	movs	r1, #4
 800af4c:	4604      	mov	r4, r0
 800af4e:	f000 fe01 	bl	800bb54 <ucdr_buffer_alignment>
 800af52:	4601      	mov	r1, r0
 800af54:	4620      	mov	r0, r4
 800af56:	f894 8015 	ldrb.w	r8, [r4, #21]
 800af5a:	f000 fe3f 	bl	800bbdc <ucdr_advance_buffer>
 800af5e:	2104      	movs	r1, #4
 800af60:	4620      	mov	r0, r4
 800af62:	f000 fd97 	bl	800ba94 <ucdr_check_buffer_available_for>
 800af66:	2800      	cmp	r0, #0
 800af68:	d138      	bne.n	800afdc <ucdr_deserialize_uint32_t+0x98>
 800af6a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800af6e:	42b7      	cmp	r7, r6
 800af70:	d92f      	bls.n	800afd2 <ucdr_deserialize_uint32_t+0x8e>
 800af72:	6923      	ldr	r3, [r4, #16]
 800af74:	60a7      	str	r7, [r4, #8]
 800af76:	1bbf      	subs	r7, r7, r6
 800af78:	443b      	add	r3, r7
 800af7a:	f1c7 0904 	rsb	r9, r7, #4
 800af7e:	6123      	str	r3, [r4, #16]
 800af80:	4649      	mov	r1, r9
 800af82:	4620      	mov	r0, r4
 800af84:	f000 fd92 	bl	800baac <ucdr_check_final_buffer_behavior>
 800af88:	2800      	cmp	r0, #0
 800af8a:	d046      	beq.n	800b01a <ucdr_deserialize_uint32_t+0xd6>
 800af8c:	7d23      	ldrb	r3, [r4, #20]
 800af8e:	2b01      	cmp	r3, #1
 800af90:	d05c      	beq.n	800b04c <ucdr_deserialize_uint32_t+0x108>
 800af92:	78f3      	ldrb	r3, [r6, #3]
 800af94:	702b      	strb	r3, [r5, #0]
 800af96:	2f00      	cmp	r7, #0
 800af98:	d04c      	beq.n	800b034 <ucdr_deserialize_uint32_t+0xf0>
 800af9a:	78b3      	ldrb	r3, [r6, #2]
 800af9c:	706b      	strb	r3, [r5, #1]
 800af9e:	2f01      	cmp	r7, #1
 800afa0:	f105 0302 	add.w	r3, r5, #2
 800afa4:	d04a      	beq.n	800b03c <ucdr_deserialize_uint32_t+0xf8>
 800afa6:	7873      	ldrb	r3, [r6, #1]
 800afa8:	70ab      	strb	r3, [r5, #2]
 800afaa:	2f02      	cmp	r7, #2
 800afac:	f105 0303 	add.w	r3, r5, #3
 800afb0:	d048      	beq.n	800b044 <ucdr_deserialize_uint32_t+0x100>
 800afb2:	7833      	ldrb	r3, [r6, #0]
 800afb4:	70eb      	strb	r3, [r5, #3]
 800afb6:	6923      	ldr	r3, [r4, #16]
 800afb8:	68a2      	ldr	r2, [r4, #8]
 800afba:	7da0      	ldrb	r0, [r4, #22]
 800afbc:	2104      	movs	r1, #4
 800afbe:	3304      	adds	r3, #4
 800afc0:	444a      	add	r2, r9
 800afc2:	1bdb      	subs	r3, r3, r7
 800afc4:	7561      	strb	r1, [r4, #21]
 800afc6:	60a2      	str	r2, [r4, #8]
 800afc8:	6123      	str	r3, [r4, #16]
 800afca:	f080 0001 	eor.w	r0, r0, #1
 800afce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afd2:	2104      	movs	r1, #4
 800afd4:	4620      	mov	r0, r4
 800afd6:	f000 fd69 	bl	800baac <ucdr_check_final_buffer_behavior>
 800afda:	b1b0      	cbz	r0, 800b00a <ucdr_deserialize_uint32_t+0xc6>
 800afdc:	7d23      	ldrb	r3, [r4, #20]
 800afde:	2b01      	cmp	r3, #1
 800afe0:	68a3      	ldr	r3, [r4, #8]
 800afe2:	d017      	beq.n	800b014 <ucdr_deserialize_uint32_t+0xd0>
 800afe4:	78db      	ldrb	r3, [r3, #3]
 800afe6:	702b      	strb	r3, [r5, #0]
 800afe8:	68a3      	ldr	r3, [r4, #8]
 800afea:	789b      	ldrb	r3, [r3, #2]
 800afec:	706b      	strb	r3, [r5, #1]
 800afee:	68a3      	ldr	r3, [r4, #8]
 800aff0:	785b      	ldrb	r3, [r3, #1]
 800aff2:	70ab      	strb	r3, [r5, #2]
 800aff4:	68a3      	ldr	r3, [r4, #8]
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	70eb      	strb	r3, [r5, #3]
 800affa:	68a2      	ldr	r2, [r4, #8]
 800affc:	6923      	ldr	r3, [r4, #16]
 800affe:	3204      	adds	r2, #4
 800b000:	3304      	adds	r3, #4
 800b002:	2104      	movs	r1, #4
 800b004:	60a2      	str	r2, [r4, #8]
 800b006:	6123      	str	r3, [r4, #16]
 800b008:	7561      	strb	r1, [r4, #21]
 800b00a:	7da0      	ldrb	r0, [r4, #22]
 800b00c:	f080 0001 	eor.w	r0, r0, #1
 800b010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	602b      	str	r3, [r5, #0]
 800b018:	e7ef      	b.n	800affa <ucdr_deserialize_uint32_t+0xb6>
 800b01a:	68a2      	ldr	r2, [r4, #8]
 800b01c:	6923      	ldr	r3, [r4, #16]
 800b01e:	7da0      	ldrb	r0, [r4, #22]
 800b020:	f884 8015 	strb.w	r8, [r4, #21]
 800b024:	1bd2      	subs	r2, r2, r7
 800b026:	1bdb      	subs	r3, r3, r7
 800b028:	60a2      	str	r2, [r4, #8]
 800b02a:	6123      	str	r3, [r4, #16]
 800b02c:	f080 0001 	eor.w	r0, r0, #1
 800b030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b034:	68a3      	ldr	r3, [r4, #8]
 800b036:	789b      	ldrb	r3, [r3, #2]
 800b038:	706b      	strb	r3, [r5, #1]
 800b03a:	1cab      	adds	r3, r5, #2
 800b03c:	68a2      	ldr	r2, [r4, #8]
 800b03e:	7852      	ldrb	r2, [r2, #1]
 800b040:	f803 2b01 	strb.w	r2, [r3], #1
 800b044:	68a2      	ldr	r2, [r4, #8]
 800b046:	7812      	ldrb	r2, [r2, #0]
 800b048:	701a      	strb	r2, [r3, #0]
 800b04a:	e7b4      	b.n	800afb6 <ucdr_deserialize_uint32_t+0x72>
 800b04c:	4631      	mov	r1, r6
 800b04e:	463a      	mov	r2, r7
 800b050:	4628      	mov	r0, r5
 800b052:	f00c fc74 	bl	801793e <memcpy>
 800b056:	68a1      	ldr	r1, [r4, #8]
 800b058:	464a      	mov	r2, r9
 800b05a:	19e8      	adds	r0, r5, r7
 800b05c:	f00c fc6f 	bl	801793e <memcpy>
 800b060:	e7a9      	b.n	800afb6 <ucdr_deserialize_uint32_t+0x72>
 800b062:	bf00      	nop

0800b064 <ucdr_deserialize_endian_uint32_t>:
 800b064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b068:	460e      	mov	r6, r1
 800b06a:	2104      	movs	r1, #4
 800b06c:	4604      	mov	r4, r0
 800b06e:	4615      	mov	r5, r2
 800b070:	f000 fd70 	bl	800bb54 <ucdr_buffer_alignment>
 800b074:	4601      	mov	r1, r0
 800b076:	4620      	mov	r0, r4
 800b078:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b07c:	f000 fdae 	bl	800bbdc <ucdr_advance_buffer>
 800b080:	2104      	movs	r1, #4
 800b082:	4620      	mov	r0, r4
 800b084:	f000 fd06 	bl	800ba94 <ucdr_check_buffer_available_for>
 800b088:	2800      	cmp	r0, #0
 800b08a:	d13c      	bne.n	800b106 <ucdr_deserialize_endian_uint32_t+0xa2>
 800b08c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800b090:	42bb      	cmp	r3, r7
 800b092:	d933      	bls.n	800b0fc <ucdr_deserialize_endian_uint32_t+0x98>
 800b094:	eba3 0807 	sub.w	r8, r3, r7
 800b098:	60a3      	str	r3, [r4, #8]
 800b09a:	6923      	ldr	r3, [r4, #16]
 800b09c:	f1c8 0a04 	rsb	sl, r8, #4
 800b0a0:	4443      	add	r3, r8
 800b0a2:	6123      	str	r3, [r4, #16]
 800b0a4:	4651      	mov	r1, sl
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	f000 fd00 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b0ac:	2800      	cmp	r0, #0
 800b0ae:	d048      	beq.n	800b142 <ucdr_deserialize_endian_uint32_t+0xde>
 800b0b0:	2e01      	cmp	r6, #1
 800b0b2:	d061      	beq.n	800b178 <ucdr_deserialize_endian_uint32_t+0x114>
 800b0b4:	78fb      	ldrb	r3, [r7, #3]
 800b0b6:	702b      	strb	r3, [r5, #0]
 800b0b8:	f1b8 0f00 	cmp.w	r8, #0
 800b0bc:	d050      	beq.n	800b160 <ucdr_deserialize_endian_uint32_t+0xfc>
 800b0be:	78bb      	ldrb	r3, [r7, #2]
 800b0c0:	706b      	strb	r3, [r5, #1]
 800b0c2:	f1b8 0f01 	cmp.w	r8, #1
 800b0c6:	f105 0302 	add.w	r3, r5, #2
 800b0ca:	d04d      	beq.n	800b168 <ucdr_deserialize_endian_uint32_t+0x104>
 800b0cc:	787b      	ldrb	r3, [r7, #1]
 800b0ce:	70ab      	strb	r3, [r5, #2]
 800b0d0:	f1b8 0f02 	cmp.w	r8, #2
 800b0d4:	f105 0303 	add.w	r3, r5, #3
 800b0d8:	d04a      	beq.n	800b170 <ucdr_deserialize_endian_uint32_t+0x10c>
 800b0da:	783b      	ldrb	r3, [r7, #0]
 800b0dc:	70eb      	strb	r3, [r5, #3]
 800b0de:	6923      	ldr	r3, [r4, #16]
 800b0e0:	68a2      	ldr	r2, [r4, #8]
 800b0e2:	7da0      	ldrb	r0, [r4, #22]
 800b0e4:	2104      	movs	r1, #4
 800b0e6:	3304      	adds	r3, #4
 800b0e8:	4452      	add	r2, sl
 800b0ea:	eba3 0308 	sub.w	r3, r3, r8
 800b0ee:	7561      	strb	r1, [r4, #21]
 800b0f0:	60a2      	str	r2, [r4, #8]
 800b0f2:	6123      	str	r3, [r4, #16]
 800b0f4:	f080 0001 	eor.w	r0, r0, #1
 800b0f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0fc:	2104      	movs	r1, #4
 800b0fe:	4620      	mov	r0, r4
 800b100:	f000 fcd4 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b104:	b1a8      	cbz	r0, 800b132 <ucdr_deserialize_endian_uint32_t+0xce>
 800b106:	2e01      	cmp	r6, #1
 800b108:	68a3      	ldr	r3, [r4, #8]
 800b10a:	d017      	beq.n	800b13c <ucdr_deserialize_endian_uint32_t+0xd8>
 800b10c:	78db      	ldrb	r3, [r3, #3]
 800b10e:	702b      	strb	r3, [r5, #0]
 800b110:	68a3      	ldr	r3, [r4, #8]
 800b112:	789b      	ldrb	r3, [r3, #2]
 800b114:	706b      	strb	r3, [r5, #1]
 800b116:	68a3      	ldr	r3, [r4, #8]
 800b118:	785b      	ldrb	r3, [r3, #1]
 800b11a:	70ab      	strb	r3, [r5, #2]
 800b11c:	68a3      	ldr	r3, [r4, #8]
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	70eb      	strb	r3, [r5, #3]
 800b122:	68a2      	ldr	r2, [r4, #8]
 800b124:	6923      	ldr	r3, [r4, #16]
 800b126:	3204      	adds	r2, #4
 800b128:	3304      	adds	r3, #4
 800b12a:	2104      	movs	r1, #4
 800b12c:	60a2      	str	r2, [r4, #8]
 800b12e:	6123      	str	r3, [r4, #16]
 800b130:	7561      	strb	r1, [r4, #21]
 800b132:	7da0      	ldrb	r0, [r4, #22]
 800b134:	f080 0001 	eor.w	r0, r0, #1
 800b138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	602b      	str	r3, [r5, #0]
 800b140:	e7ef      	b.n	800b122 <ucdr_deserialize_endian_uint32_t+0xbe>
 800b142:	68a2      	ldr	r2, [r4, #8]
 800b144:	6923      	ldr	r3, [r4, #16]
 800b146:	7da0      	ldrb	r0, [r4, #22]
 800b148:	f884 9015 	strb.w	r9, [r4, #21]
 800b14c:	eba2 0208 	sub.w	r2, r2, r8
 800b150:	eba3 0308 	sub.w	r3, r3, r8
 800b154:	60a2      	str	r2, [r4, #8]
 800b156:	6123      	str	r3, [r4, #16]
 800b158:	f080 0001 	eor.w	r0, r0, #1
 800b15c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b160:	68a3      	ldr	r3, [r4, #8]
 800b162:	789b      	ldrb	r3, [r3, #2]
 800b164:	706b      	strb	r3, [r5, #1]
 800b166:	1cab      	adds	r3, r5, #2
 800b168:	68a2      	ldr	r2, [r4, #8]
 800b16a:	7852      	ldrb	r2, [r2, #1]
 800b16c:	f803 2b01 	strb.w	r2, [r3], #1
 800b170:	68a2      	ldr	r2, [r4, #8]
 800b172:	7812      	ldrb	r2, [r2, #0]
 800b174:	701a      	strb	r2, [r3, #0]
 800b176:	e7b2      	b.n	800b0de <ucdr_deserialize_endian_uint32_t+0x7a>
 800b178:	4639      	mov	r1, r7
 800b17a:	4642      	mov	r2, r8
 800b17c:	4628      	mov	r0, r5
 800b17e:	f00c fbde 	bl	801793e <memcpy>
 800b182:	68a1      	ldr	r1, [r4, #8]
 800b184:	4652      	mov	r2, sl
 800b186:	eb05 0008 	add.w	r0, r5, r8
 800b18a:	f00c fbd8 	bl	801793e <memcpy>
 800b18e:	e7a6      	b.n	800b0de <ucdr_deserialize_endian_uint32_t+0x7a>

0800b190 <ucdr_serialize_uint64_t>:
 800b190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b194:	2108      	movs	r1, #8
 800b196:	b082      	sub	sp, #8
 800b198:	4604      	mov	r4, r0
 800b19a:	e9cd 2300 	strd	r2, r3, [sp]
 800b19e:	f000 fcd9 	bl	800bb54 <ucdr_buffer_alignment>
 800b1a2:	4601      	mov	r1, r0
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	7d67      	ldrb	r7, [r4, #21]
 800b1a8:	f000 fd18 	bl	800bbdc <ucdr_advance_buffer>
 800b1ac:	2108      	movs	r1, #8
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	f000 fc70 	bl	800ba94 <ucdr_check_buffer_available_for>
 800b1b4:	2800      	cmp	r0, #0
 800b1b6:	d14e      	bne.n	800b256 <ucdr_serialize_uint64_t+0xc6>
 800b1b8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b1bc:	42ab      	cmp	r3, r5
 800b1be:	d945      	bls.n	800b24c <ucdr_serialize_uint64_t+0xbc>
 800b1c0:	1b5e      	subs	r6, r3, r5
 800b1c2:	60a3      	str	r3, [r4, #8]
 800b1c4:	6923      	ldr	r3, [r4, #16]
 800b1c6:	f1c6 0808 	rsb	r8, r6, #8
 800b1ca:	4433      	add	r3, r6
 800b1cc:	6123      	str	r3, [r4, #16]
 800b1ce:	4641      	mov	r1, r8
 800b1d0:	4620      	mov	r0, r4
 800b1d2:	f000 fc6b 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b1d6:	2800      	cmp	r0, #0
 800b1d8:	d074      	beq.n	800b2c4 <ucdr_serialize_uint64_t+0x134>
 800b1da:	7d23      	ldrb	r3, [r4, #20]
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	f000 809b 	beq.w	800b318 <ucdr_serialize_uint64_t+0x188>
 800b1e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b1e6:	702b      	strb	r3, [r5, #0]
 800b1e8:	2e00      	cmp	r6, #0
 800b1ea:	d078      	beq.n	800b2de <ucdr_serialize_uint64_t+0x14e>
 800b1ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b1f0:	706b      	strb	r3, [r5, #1]
 800b1f2:	2e01      	cmp	r6, #1
 800b1f4:	d077      	beq.n	800b2e6 <ucdr_serialize_uint64_t+0x156>
 800b1f6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b1fa:	70ab      	strb	r3, [r5, #2]
 800b1fc:	2e02      	cmp	r6, #2
 800b1fe:	d076      	beq.n	800b2ee <ucdr_serialize_uint64_t+0x15e>
 800b200:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b204:	70eb      	strb	r3, [r5, #3]
 800b206:	2e03      	cmp	r6, #3
 800b208:	d075      	beq.n	800b2f6 <ucdr_serialize_uint64_t+0x166>
 800b20a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b20e:	712b      	strb	r3, [r5, #4]
 800b210:	2e04      	cmp	r6, #4
 800b212:	d074      	beq.n	800b2fe <ucdr_serialize_uint64_t+0x16e>
 800b214:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b218:	716b      	strb	r3, [r5, #5]
 800b21a:	2e05      	cmp	r6, #5
 800b21c:	d073      	beq.n	800b306 <ucdr_serialize_uint64_t+0x176>
 800b21e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b222:	71ab      	strb	r3, [r5, #6]
 800b224:	2e06      	cmp	r6, #6
 800b226:	d072      	beq.n	800b30e <ucdr_serialize_uint64_t+0x17e>
 800b228:	f89d 3000 	ldrb.w	r3, [sp]
 800b22c:	71eb      	strb	r3, [r5, #7]
 800b22e:	6923      	ldr	r3, [r4, #16]
 800b230:	68a2      	ldr	r2, [r4, #8]
 800b232:	7da0      	ldrb	r0, [r4, #22]
 800b234:	3308      	adds	r3, #8
 800b236:	1b9e      	subs	r6, r3, r6
 800b238:	4442      	add	r2, r8
 800b23a:	2308      	movs	r3, #8
 800b23c:	f080 0001 	eor.w	r0, r0, #1
 800b240:	60a2      	str	r2, [r4, #8]
 800b242:	6126      	str	r6, [r4, #16]
 800b244:	7563      	strb	r3, [r4, #21]
 800b246:	b002      	add	sp, #8
 800b248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b24c:	2108      	movs	r1, #8
 800b24e:	4620      	mov	r0, r4
 800b250:	f000 fc2c 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b254:	b350      	cbz	r0, 800b2ac <ucdr_serialize_uint64_t+0x11c>
 800b256:	7d23      	ldrb	r3, [r4, #20]
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d02d      	beq.n	800b2b8 <ucdr_serialize_uint64_t+0x128>
 800b25c:	68a3      	ldr	r3, [r4, #8]
 800b25e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b262:	701a      	strb	r2, [r3, #0]
 800b264:	68a3      	ldr	r3, [r4, #8]
 800b266:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b26a:	705a      	strb	r2, [r3, #1]
 800b26c:	68a3      	ldr	r3, [r4, #8]
 800b26e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b272:	709a      	strb	r2, [r3, #2]
 800b274:	68a3      	ldr	r3, [r4, #8]
 800b276:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b27a:	70da      	strb	r2, [r3, #3]
 800b27c:	68a3      	ldr	r3, [r4, #8]
 800b27e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b282:	711a      	strb	r2, [r3, #4]
 800b284:	68a3      	ldr	r3, [r4, #8]
 800b286:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b28a:	715a      	strb	r2, [r3, #5]
 800b28c:	68a3      	ldr	r3, [r4, #8]
 800b28e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b292:	719a      	strb	r2, [r3, #6]
 800b294:	68a3      	ldr	r3, [r4, #8]
 800b296:	f89d 2000 	ldrb.w	r2, [sp]
 800b29a:	71da      	strb	r2, [r3, #7]
 800b29c:	68a2      	ldr	r2, [r4, #8]
 800b29e:	6923      	ldr	r3, [r4, #16]
 800b2a0:	3208      	adds	r2, #8
 800b2a2:	3308      	adds	r3, #8
 800b2a4:	2108      	movs	r1, #8
 800b2a6:	60a2      	str	r2, [r4, #8]
 800b2a8:	6123      	str	r3, [r4, #16]
 800b2aa:	7561      	strb	r1, [r4, #21]
 800b2ac:	7da0      	ldrb	r0, [r4, #22]
 800b2ae:	f080 0001 	eor.w	r0, r0, #1
 800b2b2:	b002      	add	sp, #8
 800b2b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2b8:	466b      	mov	r3, sp
 800b2ba:	cb03      	ldmia	r3!, {r0, r1}
 800b2bc:	68a3      	ldr	r3, [r4, #8]
 800b2be:	6018      	str	r0, [r3, #0]
 800b2c0:	6059      	str	r1, [r3, #4]
 800b2c2:	e7eb      	b.n	800b29c <ucdr_serialize_uint64_t+0x10c>
 800b2c4:	68a2      	ldr	r2, [r4, #8]
 800b2c6:	6923      	ldr	r3, [r4, #16]
 800b2c8:	7da0      	ldrb	r0, [r4, #22]
 800b2ca:	7567      	strb	r7, [r4, #21]
 800b2cc:	1b92      	subs	r2, r2, r6
 800b2ce:	1b9b      	subs	r3, r3, r6
 800b2d0:	f080 0001 	eor.w	r0, r0, #1
 800b2d4:	60a2      	str	r2, [r4, #8]
 800b2d6:	6123      	str	r3, [r4, #16]
 800b2d8:	b002      	add	sp, #8
 800b2da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2de:	68a3      	ldr	r3, [r4, #8]
 800b2e0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b2e4:	701a      	strb	r2, [r3, #0]
 800b2e6:	68a3      	ldr	r3, [r4, #8]
 800b2e8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b2ec:	701a      	strb	r2, [r3, #0]
 800b2ee:	68a3      	ldr	r3, [r4, #8]
 800b2f0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b2f4:	701a      	strb	r2, [r3, #0]
 800b2f6:	68a3      	ldr	r3, [r4, #8]
 800b2f8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b2fc:	701a      	strb	r2, [r3, #0]
 800b2fe:	68a3      	ldr	r3, [r4, #8]
 800b300:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b304:	701a      	strb	r2, [r3, #0]
 800b306:	68a3      	ldr	r3, [r4, #8]
 800b308:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b30c:	701a      	strb	r2, [r3, #0]
 800b30e:	68a3      	ldr	r3, [r4, #8]
 800b310:	f89d 2000 	ldrb.w	r2, [sp]
 800b314:	701a      	strb	r2, [r3, #0]
 800b316:	e78a      	b.n	800b22e <ucdr_serialize_uint64_t+0x9e>
 800b318:	4628      	mov	r0, r5
 800b31a:	466d      	mov	r5, sp
 800b31c:	4629      	mov	r1, r5
 800b31e:	4632      	mov	r2, r6
 800b320:	f00c fb0d 	bl	801793e <memcpy>
 800b324:	68a0      	ldr	r0, [r4, #8]
 800b326:	4642      	mov	r2, r8
 800b328:	19a9      	adds	r1, r5, r6
 800b32a:	f00c fb08 	bl	801793e <memcpy>
 800b32e:	e77e      	b.n	800b22e <ucdr_serialize_uint64_t+0x9e>

0800b330 <ucdr_serialize_int16_t>:
 800b330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b334:	b082      	sub	sp, #8
 800b336:	460b      	mov	r3, r1
 800b338:	2102      	movs	r1, #2
 800b33a:	4604      	mov	r4, r0
 800b33c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b340:	f000 fc08 	bl	800bb54 <ucdr_buffer_alignment>
 800b344:	4601      	mov	r1, r0
 800b346:	4620      	mov	r0, r4
 800b348:	7d67      	ldrb	r7, [r4, #21]
 800b34a:	f000 fc47 	bl	800bbdc <ucdr_advance_buffer>
 800b34e:	2102      	movs	r1, #2
 800b350:	4620      	mov	r0, r4
 800b352:	f000 fb9f 	bl	800ba94 <ucdr_check_buffer_available_for>
 800b356:	bb78      	cbnz	r0, 800b3b8 <ucdr_serialize_int16_t+0x88>
 800b358:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b35c:	42ab      	cmp	r3, r5
 800b35e:	d926      	bls.n	800b3ae <ucdr_serialize_int16_t+0x7e>
 800b360:	1b5e      	subs	r6, r3, r5
 800b362:	60a3      	str	r3, [r4, #8]
 800b364:	6923      	ldr	r3, [r4, #16]
 800b366:	f1c6 0802 	rsb	r8, r6, #2
 800b36a:	4433      	add	r3, r6
 800b36c:	6123      	str	r3, [r4, #16]
 800b36e:	4641      	mov	r1, r8
 800b370:	4620      	mov	r0, r4
 800b372:	f000 fb9b 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b376:	2800      	cmp	r0, #0
 800b378:	d03b      	beq.n	800b3f2 <ucdr_serialize_int16_t+0xc2>
 800b37a:	7d23      	ldrb	r3, [r4, #20]
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d04a      	beq.n	800b416 <ucdr_serialize_int16_t+0xe6>
 800b380:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b384:	702b      	strb	r3, [r5, #0]
 800b386:	2e00      	cmp	r6, #0
 800b388:	d040      	beq.n	800b40c <ucdr_serialize_int16_t+0xdc>
 800b38a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b38e:	706b      	strb	r3, [r5, #1]
 800b390:	6923      	ldr	r3, [r4, #16]
 800b392:	68a2      	ldr	r2, [r4, #8]
 800b394:	7da0      	ldrb	r0, [r4, #22]
 800b396:	3302      	adds	r3, #2
 800b398:	1b9e      	subs	r6, r3, r6
 800b39a:	4442      	add	r2, r8
 800b39c:	2302      	movs	r3, #2
 800b39e:	f080 0001 	eor.w	r0, r0, #1
 800b3a2:	60a2      	str	r2, [r4, #8]
 800b3a4:	6126      	str	r6, [r4, #16]
 800b3a6:	7563      	strb	r3, [r4, #21]
 800b3a8:	b002      	add	sp, #8
 800b3aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3ae:	2102      	movs	r1, #2
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	f000 fb7b 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b3b6:	b190      	cbz	r0, 800b3de <ucdr_serialize_int16_t+0xae>
 800b3b8:	7d23      	ldrb	r3, [r4, #20]
 800b3ba:	2b01      	cmp	r3, #1
 800b3bc:	68a3      	ldr	r3, [r4, #8]
 800b3be:	d014      	beq.n	800b3ea <ucdr_serialize_int16_t+0xba>
 800b3c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b3c4:	701a      	strb	r2, [r3, #0]
 800b3c6:	68a3      	ldr	r3, [r4, #8]
 800b3c8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b3cc:	705a      	strb	r2, [r3, #1]
 800b3ce:	68a2      	ldr	r2, [r4, #8]
 800b3d0:	6923      	ldr	r3, [r4, #16]
 800b3d2:	3202      	adds	r2, #2
 800b3d4:	3302      	adds	r3, #2
 800b3d6:	2102      	movs	r1, #2
 800b3d8:	60a2      	str	r2, [r4, #8]
 800b3da:	6123      	str	r3, [r4, #16]
 800b3dc:	7561      	strb	r1, [r4, #21]
 800b3de:	7da0      	ldrb	r0, [r4, #22]
 800b3e0:	f080 0001 	eor.w	r0, r0, #1
 800b3e4:	b002      	add	sp, #8
 800b3e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3ea:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b3ee:	801a      	strh	r2, [r3, #0]
 800b3f0:	e7ed      	b.n	800b3ce <ucdr_serialize_int16_t+0x9e>
 800b3f2:	68a2      	ldr	r2, [r4, #8]
 800b3f4:	6923      	ldr	r3, [r4, #16]
 800b3f6:	7da0      	ldrb	r0, [r4, #22]
 800b3f8:	7567      	strb	r7, [r4, #21]
 800b3fa:	1b92      	subs	r2, r2, r6
 800b3fc:	1b9b      	subs	r3, r3, r6
 800b3fe:	f080 0001 	eor.w	r0, r0, #1
 800b402:	60a2      	str	r2, [r4, #8]
 800b404:	6123      	str	r3, [r4, #16]
 800b406:	b002      	add	sp, #8
 800b408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b40c:	68a3      	ldr	r3, [r4, #8]
 800b40e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b412:	701a      	strb	r2, [r3, #0]
 800b414:	e7bc      	b.n	800b390 <ucdr_serialize_int16_t+0x60>
 800b416:	4628      	mov	r0, r5
 800b418:	f10d 0506 	add.w	r5, sp, #6
 800b41c:	4629      	mov	r1, r5
 800b41e:	4632      	mov	r2, r6
 800b420:	f00c fa8d 	bl	801793e <memcpy>
 800b424:	68a0      	ldr	r0, [r4, #8]
 800b426:	4642      	mov	r2, r8
 800b428:	19a9      	adds	r1, r5, r6
 800b42a:	f00c fa88 	bl	801793e <memcpy>
 800b42e:	e7af      	b.n	800b390 <ucdr_serialize_int16_t+0x60>

0800b430 <ucdr_deserialize_int16_t>:
 800b430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b434:	460d      	mov	r5, r1
 800b436:	2102      	movs	r1, #2
 800b438:	4604      	mov	r4, r0
 800b43a:	f000 fb8b 	bl	800bb54 <ucdr_buffer_alignment>
 800b43e:	4601      	mov	r1, r0
 800b440:	4620      	mov	r0, r4
 800b442:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b446:	f000 fbc9 	bl	800bbdc <ucdr_advance_buffer>
 800b44a:	2102      	movs	r1, #2
 800b44c:	4620      	mov	r0, r4
 800b44e:	f000 fb21 	bl	800ba94 <ucdr_check_buffer_available_for>
 800b452:	bb60      	cbnz	r0, 800b4ae <ucdr_deserialize_int16_t+0x7e>
 800b454:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b458:	42be      	cmp	r6, r7
 800b45a:	d923      	bls.n	800b4a4 <ucdr_deserialize_int16_t+0x74>
 800b45c:	6923      	ldr	r3, [r4, #16]
 800b45e:	60a6      	str	r6, [r4, #8]
 800b460:	1bf6      	subs	r6, r6, r7
 800b462:	4433      	add	r3, r6
 800b464:	f1c6 0902 	rsb	r9, r6, #2
 800b468:	6123      	str	r3, [r4, #16]
 800b46a:	4649      	mov	r1, r9
 800b46c:	4620      	mov	r0, r4
 800b46e:	f000 fb1d 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b472:	2800      	cmp	r0, #0
 800b474:	d034      	beq.n	800b4e0 <ucdr_deserialize_int16_t+0xb0>
 800b476:	7d23      	ldrb	r3, [r4, #20]
 800b478:	2b01      	cmp	r3, #1
 800b47a:	d042      	beq.n	800b502 <ucdr_deserialize_int16_t+0xd2>
 800b47c:	787b      	ldrb	r3, [r7, #1]
 800b47e:	702b      	strb	r3, [r5, #0]
 800b480:	2e00      	cmp	r6, #0
 800b482:	d03a      	beq.n	800b4fa <ucdr_deserialize_int16_t+0xca>
 800b484:	783b      	ldrb	r3, [r7, #0]
 800b486:	706b      	strb	r3, [r5, #1]
 800b488:	6923      	ldr	r3, [r4, #16]
 800b48a:	68a2      	ldr	r2, [r4, #8]
 800b48c:	7da0      	ldrb	r0, [r4, #22]
 800b48e:	2102      	movs	r1, #2
 800b490:	3302      	adds	r3, #2
 800b492:	444a      	add	r2, r9
 800b494:	1b9b      	subs	r3, r3, r6
 800b496:	7561      	strb	r1, [r4, #21]
 800b498:	60a2      	str	r2, [r4, #8]
 800b49a:	6123      	str	r3, [r4, #16]
 800b49c:	f080 0001 	eor.w	r0, r0, #1
 800b4a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4a4:	2102      	movs	r1, #2
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	f000 fb00 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b4ac:	b180      	cbz	r0, 800b4d0 <ucdr_deserialize_int16_t+0xa0>
 800b4ae:	7d23      	ldrb	r3, [r4, #20]
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	68a3      	ldr	r3, [r4, #8]
 800b4b4:	d011      	beq.n	800b4da <ucdr_deserialize_int16_t+0xaa>
 800b4b6:	785b      	ldrb	r3, [r3, #1]
 800b4b8:	702b      	strb	r3, [r5, #0]
 800b4ba:	68a3      	ldr	r3, [r4, #8]
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	706b      	strb	r3, [r5, #1]
 800b4c0:	68a2      	ldr	r2, [r4, #8]
 800b4c2:	6923      	ldr	r3, [r4, #16]
 800b4c4:	3202      	adds	r2, #2
 800b4c6:	3302      	adds	r3, #2
 800b4c8:	2102      	movs	r1, #2
 800b4ca:	60a2      	str	r2, [r4, #8]
 800b4cc:	6123      	str	r3, [r4, #16]
 800b4ce:	7561      	strb	r1, [r4, #21]
 800b4d0:	7da0      	ldrb	r0, [r4, #22]
 800b4d2:	f080 0001 	eor.w	r0, r0, #1
 800b4d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4da:	881b      	ldrh	r3, [r3, #0]
 800b4dc:	802b      	strh	r3, [r5, #0]
 800b4de:	e7ef      	b.n	800b4c0 <ucdr_deserialize_int16_t+0x90>
 800b4e0:	68a2      	ldr	r2, [r4, #8]
 800b4e2:	6923      	ldr	r3, [r4, #16]
 800b4e4:	7da0      	ldrb	r0, [r4, #22]
 800b4e6:	f884 8015 	strb.w	r8, [r4, #21]
 800b4ea:	1b92      	subs	r2, r2, r6
 800b4ec:	1b9b      	subs	r3, r3, r6
 800b4ee:	60a2      	str	r2, [r4, #8]
 800b4f0:	6123      	str	r3, [r4, #16]
 800b4f2:	f080 0001 	eor.w	r0, r0, #1
 800b4f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4fa:	68a3      	ldr	r3, [r4, #8]
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	706b      	strb	r3, [r5, #1]
 800b500:	e7c2      	b.n	800b488 <ucdr_deserialize_int16_t+0x58>
 800b502:	4639      	mov	r1, r7
 800b504:	4632      	mov	r2, r6
 800b506:	4628      	mov	r0, r5
 800b508:	f00c fa19 	bl	801793e <memcpy>
 800b50c:	68a1      	ldr	r1, [r4, #8]
 800b50e:	464a      	mov	r2, r9
 800b510:	19a8      	adds	r0, r5, r6
 800b512:	f00c fa14 	bl	801793e <memcpy>
 800b516:	e7b7      	b.n	800b488 <ucdr_deserialize_int16_t+0x58>

0800b518 <ucdr_serialize_int32_t>:
 800b518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b51c:	b082      	sub	sp, #8
 800b51e:	4604      	mov	r4, r0
 800b520:	9101      	str	r1, [sp, #4]
 800b522:	2104      	movs	r1, #4
 800b524:	f000 fb16 	bl	800bb54 <ucdr_buffer_alignment>
 800b528:	4601      	mov	r1, r0
 800b52a:	4620      	mov	r0, r4
 800b52c:	7d67      	ldrb	r7, [r4, #21]
 800b52e:	f000 fb55 	bl	800bbdc <ucdr_advance_buffer>
 800b532:	2104      	movs	r1, #4
 800b534:	4620      	mov	r0, r4
 800b536:	f000 faad 	bl	800ba94 <ucdr_check_buffer_available_for>
 800b53a:	2800      	cmp	r0, #0
 800b53c:	d139      	bne.n	800b5b2 <ucdr_serialize_int32_t+0x9a>
 800b53e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b542:	42ab      	cmp	r3, r5
 800b544:	d930      	bls.n	800b5a8 <ucdr_serialize_int32_t+0x90>
 800b546:	1b5e      	subs	r6, r3, r5
 800b548:	60a3      	str	r3, [r4, #8]
 800b54a:	6923      	ldr	r3, [r4, #16]
 800b54c:	f1c6 0804 	rsb	r8, r6, #4
 800b550:	4433      	add	r3, r6
 800b552:	6123      	str	r3, [r4, #16]
 800b554:	4641      	mov	r1, r8
 800b556:	4620      	mov	r0, r4
 800b558:	f000 faa8 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b55c:	2800      	cmp	r0, #0
 800b55e:	d04c      	beq.n	800b5fa <ucdr_serialize_int32_t+0xe2>
 800b560:	7d23      	ldrb	r3, [r4, #20]
 800b562:	2b01      	cmp	r3, #1
 800b564:	d063      	beq.n	800b62e <ucdr_serialize_int32_t+0x116>
 800b566:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b56a:	702b      	strb	r3, [r5, #0]
 800b56c:	2e00      	cmp	r6, #0
 800b56e:	d051      	beq.n	800b614 <ucdr_serialize_int32_t+0xfc>
 800b570:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b574:	706b      	strb	r3, [r5, #1]
 800b576:	2e01      	cmp	r6, #1
 800b578:	d050      	beq.n	800b61c <ucdr_serialize_int32_t+0x104>
 800b57a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b57e:	70ab      	strb	r3, [r5, #2]
 800b580:	2e02      	cmp	r6, #2
 800b582:	d04f      	beq.n	800b624 <ucdr_serialize_int32_t+0x10c>
 800b584:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b588:	70eb      	strb	r3, [r5, #3]
 800b58a:	6923      	ldr	r3, [r4, #16]
 800b58c:	68a2      	ldr	r2, [r4, #8]
 800b58e:	7da0      	ldrb	r0, [r4, #22]
 800b590:	3304      	adds	r3, #4
 800b592:	1b9e      	subs	r6, r3, r6
 800b594:	4442      	add	r2, r8
 800b596:	2304      	movs	r3, #4
 800b598:	f080 0001 	eor.w	r0, r0, #1
 800b59c:	60a2      	str	r2, [r4, #8]
 800b59e:	6126      	str	r6, [r4, #16]
 800b5a0:	7563      	strb	r3, [r4, #21]
 800b5a2:	b002      	add	sp, #8
 800b5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5a8:	2104      	movs	r1, #4
 800b5aa:	4620      	mov	r0, r4
 800b5ac:	f000 fa7e 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b5b0:	b1d0      	cbz	r0, 800b5e8 <ucdr_serialize_int32_t+0xd0>
 800b5b2:	7d23      	ldrb	r3, [r4, #20]
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	68a3      	ldr	r3, [r4, #8]
 800b5b8:	d01c      	beq.n	800b5f4 <ucdr_serialize_int32_t+0xdc>
 800b5ba:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b5be:	701a      	strb	r2, [r3, #0]
 800b5c0:	68a3      	ldr	r3, [r4, #8]
 800b5c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b5c6:	705a      	strb	r2, [r3, #1]
 800b5c8:	68a3      	ldr	r3, [r4, #8]
 800b5ca:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b5ce:	709a      	strb	r2, [r3, #2]
 800b5d0:	68a3      	ldr	r3, [r4, #8]
 800b5d2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b5d6:	70da      	strb	r2, [r3, #3]
 800b5d8:	68a2      	ldr	r2, [r4, #8]
 800b5da:	6923      	ldr	r3, [r4, #16]
 800b5dc:	3204      	adds	r2, #4
 800b5de:	3304      	adds	r3, #4
 800b5e0:	2104      	movs	r1, #4
 800b5e2:	60a2      	str	r2, [r4, #8]
 800b5e4:	6123      	str	r3, [r4, #16]
 800b5e6:	7561      	strb	r1, [r4, #21]
 800b5e8:	7da0      	ldrb	r0, [r4, #22]
 800b5ea:	f080 0001 	eor.w	r0, r0, #1
 800b5ee:	b002      	add	sp, #8
 800b5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5f4:	9a01      	ldr	r2, [sp, #4]
 800b5f6:	601a      	str	r2, [r3, #0]
 800b5f8:	e7ee      	b.n	800b5d8 <ucdr_serialize_int32_t+0xc0>
 800b5fa:	68a2      	ldr	r2, [r4, #8]
 800b5fc:	6923      	ldr	r3, [r4, #16]
 800b5fe:	7da0      	ldrb	r0, [r4, #22]
 800b600:	7567      	strb	r7, [r4, #21]
 800b602:	1b92      	subs	r2, r2, r6
 800b604:	1b9b      	subs	r3, r3, r6
 800b606:	f080 0001 	eor.w	r0, r0, #1
 800b60a:	60a2      	str	r2, [r4, #8]
 800b60c:	6123      	str	r3, [r4, #16]
 800b60e:	b002      	add	sp, #8
 800b610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b614:	68a3      	ldr	r3, [r4, #8]
 800b616:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b61a:	701a      	strb	r2, [r3, #0]
 800b61c:	68a3      	ldr	r3, [r4, #8]
 800b61e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b622:	701a      	strb	r2, [r3, #0]
 800b624:	68a3      	ldr	r3, [r4, #8]
 800b626:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b62a:	701a      	strb	r2, [r3, #0]
 800b62c:	e7ad      	b.n	800b58a <ucdr_serialize_int32_t+0x72>
 800b62e:	4628      	mov	r0, r5
 800b630:	ad01      	add	r5, sp, #4
 800b632:	4629      	mov	r1, r5
 800b634:	4632      	mov	r2, r6
 800b636:	f00c f982 	bl	801793e <memcpy>
 800b63a:	68a0      	ldr	r0, [r4, #8]
 800b63c:	4642      	mov	r2, r8
 800b63e:	19a9      	adds	r1, r5, r6
 800b640:	f00c f97d 	bl	801793e <memcpy>
 800b644:	e7a1      	b.n	800b58a <ucdr_serialize_int32_t+0x72>
 800b646:	bf00      	nop

0800b648 <ucdr_deserialize_int32_t>:
 800b648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b64c:	460d      	mov	r5, r1
 800b64e:	2104      	movs	r1, #4
 800b650:	4604      	mov	r4, r0
 800b652:	f000 fa7f 	bl	800bb54 <ucdr_buffer_alignment>
 800b656:	4601      	mov	r1, r0
 800b658:	4620      	mov	r0, r4
 800b65a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b65e:	f000 fabd 	bl	800bbdc <ucdr_advance_buffer>
 800b662:	2104      	movs	r1, #4
 800b664:	4620      	mov	r0, r4
 800b666:	f000 fa15 	bl	800ba94 <ucdr_check_buffer_available_for>
 800b66a:	2800      	cmp	r0, #0
 800b66c:	d138      	bne.n	800b6e0 <ucdr_deserialize_int32_t+0x98>
 800b66e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b672:	42b7      	cmp	r7, r6
 800b674:	d92f      	bls.n	800b6d6 <ucdr_deserialize_int32_t+0x8e>
 800b676:	6923      	ldr	r3, [r4, #16]
 800b678:	60a7      	str	r7, [r4, #8]
 800b67a:	1bbf      	subs	r7, r7, r6
 800b67c:	443b      	add	r3, r7
 800b67e:	f1c7 0904 	rsb	r9, r7, #4
 800b682:	6123      	str	r3, [r4, #16]
 800b684:	4649      	mov	r1, r9
 800b686:	4620      	mov	r0, r4
 800b688:	f000 fa10 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b68c:	2800      	cmp	r0, #0
 800b68e:	d046      	beq.n	800b71e <ucdr_deserialize_int32_t+0xd6>
 800b690:	7d23      	ldrb	r3, [r4, #20]
 800b692:	2b01      	cmp	r3, #1
 800b694:	d05c      	beq.n	800b750 <ucdr_deserialize_int32_t+0x108>
 800b696:	78f3      	ldrb	r3, [r6, #3]
 800b698:	702b      	strb	r3, [r5, #0]
 800b69a:	2f00      	cmp	r7, #0
 800b69c:	d04c      	beq.n	800b738 <ucdr_deserialize_int32_t+0xf0>
 800b69e:	78b3      	ldrb	r3, [r6, #2]
 800b6a0:	706b      	strb	r3, [r5, #1]
 800b6a2:	2f01      	cmp	r7, #1
 800b6a4:	f105 0302 	add.w	r3, r5, #2
 800b6a8:	d04a      	beq.n	800b740 <ucdr_deserialize_int32_t+0xf8>
 800b6aa:	7873      	ldrb	r3, [r6, #1]
 800b6ac:	70ab      	strb	r3, [r5, #2]
 800b6ae:	2f02      	cmp	r7, #2
 800b6b0:	f105 0303 	add.w	r3, r5, #3
 800b6b4:	d048      	beq.n	800b748 <ucdr_deserialize_int32_t+0x100>
 800b6b6:	7833      	ldrb	r3, [r6, #0]
 800b6b8:	70eb      	strb	r3, [r5, #3]
 800b6ba:	6923      	ldr	r3, [r4, #16]
 800b6bc:	68a2      	ldr	r2, [r4, #8]
 800b6be:	7da0      	ldrb	r0, [r4, #22]
 800b6c0:	2104      	movs	r1, #4
 800b6c2:	3304      	adds	r3, #4
 800b6c4:	444a      	add	r2, r9
 800b6c6:	1bdb      	subs	r3, r3, r7
 800b6c8:	7561      	strb	r1, [r4, #21]
 800b6ca:	60a2      	str	r2, [r4, #8]
 800b6cc:	6123      	str	r3, [r4, #16]
 800b6ce:	f080 0001 	eor.w	r0, r0, #1
 800b6d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6d6:	2104      	movs	r1, #4
 800b6d8:	4620      	mov	r0, r4
 800b6da:	f000 f9e7 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b6de:	b1b0      	cbz	r0, 800b70e <ucdr_deserialize_int32_t+0xc6>
 800b6e0:	7d23      	ldrb	r3, [r4, #20]
 800b6e2:	2b01      	cmp	r3, #1
 800b6e4:	68a3      	ldr	r3, [r4, #8]
 800b6e6:	d017      	beq.n	800b718 <ucdr_deserialize_int32_t+0xd0>
 800b6e8:	78db      	ldrb	r3, [r3, #3]
 800b6ea:	702b      	strb	r3, [r5, #0]
 800b6ec:	68a3      	ldr	r3, [r4, #8]
 800b6ee:	789b      	ldrb	r3, [r3, #2]
 800b6f0:	706b      	strb	r3, [r5, #1]
 800b6f2:	68a3      	ldr	r3, [r4, #8]
 800b6f4:	785b      	ldrb	r3, [r3, #1]
 800b6f6:	70ab      	strb	r3, [r5, #2]
 800b6f8:	68a3      	ldr	r3, [r4, #8]
 800b6fa:	781b      	ldrb	r3, [r3, #0]
 800b6fc:	70eb      	strb	r3, [r5, #3]
 800b6fe:	68a2      	ldr	r2, [r4, #8]
 800b700:	6923      	ldr	r3, [r4, #16]
 800b702:	3204      	adds	r2, #4
 800b704:	3304      	adds	r3, #4
 800b706:	2104      	movs	r1, #4
 800b708:	60a2      	str	r2, [r4, #8]
 800b70a:	6123      	str	r3, [r4, #16]
 800b70c:	7561      	strb	r1, [r4, #21]
 800b70e:	7da0      	ldrb	r0, [r4, #22]
 800b710:	f080 0001 	eor.w	r0, r0, #1
 800b714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	602b      	str	r3, [r5, #0]
 800b71c:	e7ef      	b.n	800b6fe <ucdr_deserialize_int32_t+0xb6>
 800b71e:	68a2      	ldr	r2, [r4, #8]
 800b720:	6923      	ldr	r3, [r4, #16]
 800b722:	7da0      	ldrb	r0, [r4, #22]
 800b724:	f884 8015 	strb.w	r8, [r4, #21]
 800b728:	1bd2      	subs	r2, r2, r7
 800b72a:	1bdb      	subs	r3, r3, r7
 800b72c:	60a2      	str	r2, [r4, #8]
 800b72e:	6123      	str	r3, [r4, #16]
 800b730:	f080 0001 	eor.w	r0, r0, #1
 800b734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b738:	68a3      	ldr	r3, [r4, #8]
 800b73a:	789b      	ldrb	r3, [r3, #2]
 800b73c:	706b      	strb	r3, [r5, #1]
 800b73e:	1cab      	adds	r3, r5, #2
 800b740:	68a2      	ldr	r2, [r4, #8]
 800b742:	7852      	ldrb	r2, [r2, #1]
 800b744:	f803 2b01 	strb.w	r2, [r3], #1
 800b748:	68a2      	ldr	r2, [r4, #8]
 800b74a:	7812      	ldrb	r2, [r2, #0]
 800b74c:	701a      	strb	r2, [r3, #0]
 800b74e:	e7b4      	b.n	800b6ba <ucdr_deserialize_int32_t+0x72>
 800b750:	4631      	mov	r1, r6
 800b752:	463a      	mov	r2, r7
 800b754:	4628      	mov	r0, r5
 800b756:	f00c f8f2 	bl	801793e <memcpy>
 800b75a:	68a1      	ldr	r1, [r4, #8]
 800b75c:	464a      	mov	r2, r9
 800b75e:	19e8      	adds	r0, r5, r7
 800b760:	f00c f8ed 	bl	801793e <memcpy>
 800b764:	e7a9      	b.n	800b6ba <ucdr_deserialize_int32_t+0x72>
 800b766:	bf00      	nop

0800b768 <ucdr_serialize_double>:
 800b768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b76c:	2108      	movs	r1, #8
 800b76e:	b082      	sub	sp, #8
 800b770:	4604      	mov	r4, r0
 800b772:	ed8d 0b00 	vstr	d0, [sp]
 800b776:	f000 f9ed 	bl	800bb54 <ucdr_buffer_alignment>
 800b77a:	4601      	mov	r1, r0
 800b77c:	4620      	mov	r0, r4
 800b77e:	7d67      	ldrb	r7, [r4, #21]
 800b780:	f000 fa2c 	bl	800bbdc <ucdr_advance_buffer>
 800b784:	2108      	movs	r1, #8
 800b786:	4620      	mov	r0, r4
 800b788:	f000 f984 	bl	800ba94 <ucdr_check_buffer_available_for>
 800b78c:	2800      	cmp	r0, #0
 800b78e:	d14e      	bne.n	800b82e <ucdr_serialize_double+0xc6>
 800b790:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b794:	42ab      	cmp	r3, r5
 800b796:	d945      	bls.n	800b824 <ucdr_serialize_double+0xbc>
 800b798:	1b5e      	subs	r6, r3, r5
 800b79a:	60a3      	str	r3, [r4, #8]
 800b79c:	6923      	ldr	r3, [r4, #16]
 800b79e:	f1c6 0808 	rsb	r8, r6, #8
 800b7a2:	4433      	add	r3, r6
 800b7a4:	6123      	str	r3, [r4, #16]
 800b7a6:	4641      	mov	r1, r8
 800b7a8:	4620      	mov	r0, r4
 800b7aa:	f000 f97f 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b7ae:	2800      	cmp	r0, #0
 800b7b0:	d074      	beq.n	800b89c <ucdr_serialize_double+0x134>
 800b7b2:	7d23      	ldrb	r3, [r4, #20]
 800b7b4:	2b01      	cmp	r3, #1
 800b7b6:	f000 809b 	beq.w	800b8f0 <ucdr_serialize_double+0x188>
 800b7ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b7be:	702b      	strb	r3, [r5, #0]
 800b7c0:	2e00      	cmp	r6, #0
 800b7c2:	d078      	beq.n	800b8b6 <ucdr_serialize_double+0x14e>
 800b7c4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b7c8:	706b      	strb	r3, [r5, #1]
 800b7ca:	2e01      	cmp	r6, #1
 800b7cc:	d077      	beq.n	800b8be <ucdr_serialize_double+0x156>
 800b7ce:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b7d2:	70ab      	strb	r3, [r5, #2]
 800b7d4:	2e02      	cmp	r6, #2
 800b7d6:	d076      	beq.n	800b8c6 <ucdr_serialize_double+0x15e>
 800b7d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b7dc:	70eb      	strb	r3, [r5, #3]
 800b7de:	2e03      	cmp	r6, #3
 800b7e0:	d075      	beq.n	800b8ce <ucdr_serialize_double+0x166>
 800b7e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b7e6:	712b      	strb	r3, [r5, #4]
 800b7e8:	2e04      	cmp	r6, #4
 800b7ea:	d074      	beq.n	800b8d6 <ucdr_serialize_double+0x16e>
 800b7ec:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b7f0:	716b      	strb	r3, [r5, #5]
 800b7f2:	2e05      	cmp	r6, #5
 800b7f4:	d073      	beq.n	800b8de <ucdr_serialize_double+0x176>
 800b7f6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b7fa:	71ab      	strb	r3, [r5, #6]
 800b7fc:	2e06      	cmp	r6, #6
 800b7fe:	d072      	beq.n	800b8e6 <ucdr_serialize_double+0x17e>
 800b800:	f89d 3000 	ldrb.w	r3, [sp]
 800b804:	71eb      	strb	r3, [r5, #7]
 800b806:	6923      	ldr	r3, [r4, #16]
 800b808:	68a2      	ldr	r2, [r4, #8]
 800b80a:	7da0      	ldrb	r0, [r4, #22]
 800b80c:	3308      	adds	r3, #8
 800b80e:	1b9e      	subs	r6, r3, r6
 800b810:	4442      	add	r2, r8
 800b812:	2308      	movs	r3, #8
 800b814:	f080 0001 	eor.w	r0, r0, #1
 800b818:	60a2      	str	r2, [r4, #8]
 800b81a:	6126      	str	r6, [r4, #16]
 800b81c:	7563      	strb	r3, [r4, #21]
 800b81e:	b002      	add	sp, #8
 800b820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b824:	2108      	movs	r1, #8
 800b826:	4620      	mov	r0, r4
 800b828:	f000 f940 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b82c:	b350      	cbz	r0, 800b884 <ucdr_serialize_double+0x11c>
 800b82e:	7d23      	ldrb	r3, [r4, #20]
 800b830:	2b01      	cmp	r3, #1
 800b832:	d02d      	beq.n	800b890 <ucdr_serialize_double+0x128>
 800b834:	68a3      	ldr	r3, [r4, #8]
 800b836:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b83a:	701a      	strb	r2, [r3, #0]
 800b83c:	68a3      	ldr	r3, [r4, #8]
 800b83e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b842:	705a      	strb	r2, [r3, #1]
 800b844:	68a3      	ldr	r3, [r4, #8]
 800b846:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b84a:	709a      	strb	r2, [r3, #2]
 800b84c:	68a3      	ldr	r3, [r4, #8]
 800b84e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b852:	70da      	strb	r2, [r3, #3]
 800b854:	68a3      	ldr	r3, [r4, #8]
 800b856:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b85a:	711a      	strb	r2, [r3, #4]
 800b85c:	68a3      	ldr	r3, [r4, #8]
 800b85e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b862:	715a      	strb	r2, [r3, #5]
 800b864:	68a3      	ldr	r3, [r4, #8]
 800b866:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b86a:	719a      	strb	r2, [r3, #6]
 800b86c:	68a3      	ldr	r3, [r4, #8]
 800b86e:	f89d 2000 	ldrb.w	r2, [sp]
 800b872:	71da      	strb	r2, [r3, #7]
 800b874:	68a2      	ldr	r2, [r4, #8]
 800b876:	6923      	ldr	r3, [r4, #16]
 800b878:	3208      	adds	r2, #8
 800b87a:	3308      	adds	r3, #8
 800b87c:	2108      	movs	r1, #8
 800b87e:	60a2      	str	r2, [r4, #8]
 800b880:	6123      	str	r3, [r4, #16]
 800b882:	7561      	strb	r1, [r4, #21]
 800b884:	7da0      	ldrb	r0, [r4, #22]
 800b886:	f080 0001 	eor.w	r0, r0, #1
 800b88a:	b002      	add	sp, #8
 800b88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b890:	466b      	mov	r3, sp
 800b892:	cb03      	ldmia	r3!, {r0, r1}
 800b894:	68a3      	ldr	r3, [r4, #8]
 800b896:	6018      	str	r0, [r3, #0]
 800b898:	6059      	str	r1, [r3, #4]
 800b89a:	e7eb      	b.n	800b874 <ucdr_serialize_double+0x10c>
 800b89c:	68a2      	ldr	r2, [r4, #8]
 800b89e:	6923      	ldr	r3, [r4, #16]
 800b8a0:	7da0      	ldrb	r0, [r4, #22]
 800b8a2:	7567      	strb	r7, [r4, #21]
 800b8a4:	1b92      	subs	r2, r2, r6
 800b8a6:	1b9b      	subs	r3, r3, r6
 800b8a8:	f080 0001 	eor.w	r0, r0, #1
 800b8ac:	60a2      	str	r2, [r4, #8]
 800b8ae:	6123      	str	r3, [r4, #16]
 800b8b0:	b002      	add	sp, #8
 800b8b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8b6:	68a3      	ldr	r3, [r4, #8]
 800b8b8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b8bc:	701a      	strb	r2, [r3, #0]
 800b8be:	68a3      	ldr	r3, [r4, #8]
 800b8c0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b8c4:	701a      	strb	r2, [r3, #0]
 800b8c6:	68a3      	ldr	r3, [r4, #8]
 800b8c8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b8cc:	701a      	strb	r2, [r3, #0]
 800b8ce:	68a3      	ldr	r3, [r4, #8]
 800b8d0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b8d4:	701a      	strb	r2, [r3, #0]
 800b8d6:	68a3      	ldr	r3, [r4, #8]
 800b8d8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b8dc:	701a      	strb	r2, [r3, #0]
 800b8de:	68a3      	ldr	r3, [r4, #8]
 800b8e0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b8e4:	701a      	strb	r2, [r3, #0]
 800b8e6:	68a3      	ldr	r3, [r4, #8]
 800b8e8:	f89d 2000 	ldrb.w	r2, [sp]
 800b8ec:	701a      	strb	r2, [r3, #0]
 800b8ee:	e78a      	b.n	800b806 <ucdr_serialize_double+0x9e>
 800b8f0:	4628      	mov	r0, r5
 800b8f2:	466d      	mov	r5, sp
 800b8f4:	4629      	mov	r1, r5
 800b8f6:	4632      	mov	r2, r6
 800b8f8:	f00c f821 	bl	801793e <memcpy>
 800b8fc:	68a0      	ldr	r0, [r4, #8]
 800b8fe:	4642      	mov	r2, r8
 800b900:	19a9      	adds	r1, r5, r6
 800b902:	f00c f81c 	bl	801793e <memcpy>
 800b906:	e77e      	b.n	800b806 <ucdr_serialize_double+0x9e>

0800b908 <ucdr_deserialize_double>:
 800b908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b90c:	460d      	mov	r5, r1
 800b90e:	2108      	movs	r1, #8
 800b910:	4604      	mov	r4, r0
 800b912:	f000 f91f 	bl	800bb54 <ucdr_buffer_alignment>
 800b916:	4601      	mov	r1, r0
 800b918:	4620      	mov	r0, r4
 800b91a:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b91e:	f000 f95d 	bl	800bbdc <ucdr_advance_buffer>
 800b922:	2108      	movs	r1, #8
 800b924:	4620      	mov	r0, r4
 800b926:	f000 f8b5 	bl	800ba94 <ucdr_check_buffer_available_for>
 800b92a:	2800      	cmp	r0, #0
 800b92c:	d151      	bne.n	800b9d2 <ucdr_deserialize_double+0xca>
 800b92e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b932:	42be      	cmp	r6, r7
 800b934:	d948      	bls.n	800b9c8 <ucdr_deserialize_double+0xc0>
 800b936:	6923      	ldr	r3, [r4, #16]
 800b938:	60a6      	str	r6, [r4, #8]
 800b93a:	1bf6      	subs	r6, r6, r7
 800b93c:	4433      	add	r3, r6
 800b93e:	f1c6 0808 	rsb	r8, r6, #8
 800b942:	6123      	str	r3, [r4, #16]
 800b944:	4641      	mov	r1, r8
 800b946:	4620      	mov	r0, r4
 800b948:	f000 f8b0 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b94c:	2800      	cmp	r0, #0
 800b94e:	d06d      	beq.n	800ba2c <ucdr_deserialize_double+0x124>
 800b950:	7d23      	ldrb	r3, [r4, #20]
 800b952:	2b01      	cmp	r3, #1
 800b954:	f000 8093 	beq.w	800ba7e <ucdr_deserialize_double+0x176>
 800b958:	79fb      	ldrb	r3, [r7, #7]
 800b95a:	702b      	strb	r3, [r5, #0]
 800b95c:	2e00      	cmp	r6, #0
 800b95e:	d072      	beq.n	800ba46 <ucdr_deserialize_double+0x13e>
 800b960:	79bb      	ldrb	r3, [r7, #6]
 800b962:	706b      	strb	r3, [r5, #1]
 800b964:	2e01      	cmp	r6, #1
 800b966:	f105 0302 	add.w	r3, r5, #2
 800b96a:	d070      	beq.n	800ba4e <ucdr_deserialize_double+0x146>
 800b96c:	797b      	ldrb	r3, [r7, #5]
 800b96e:	70ab      	strb	r3, [r5, #2]
 800b970:	2e02      	cmp	r6, #2
 800b972:	f105 0303 	add.w	r3, r5, #3
 800b976:	d06e      	beq.n	800ba56 <ucdr_deserialize_double+0x14e>
 800b978:	793b      	ldrb	r3, [r7, #4]
 800b97a:	70eb      	strb	r3, [r5, #3]
 800b97c:	2e03      	cmp	r6, #3
 800b97e:	f105 0304 	add.w	r3, r5, #4
 800b982:	d06c      	beq.n	800ba5e <ucdr_deserialize_double+0x156>
 800b984:	78fb      	ldrb	r3, [r7, #3]
 800b986:	712b      	strb	r3, [r5, #4]
 800b988:	2e04      	cmp	r6, #4
 800b98a:	f105 0305 	add.w	r3, r5, #5
 800b98e:	d06a      	beq.n	800ba66 <ucdr_deserialize_double+0x15e>
 800b990:	78bb      	ldrb	r3, [r7, #2]
 800b992:	716b      	strb	r3, [r5, #5]
 800b994:	2e05      	cmp	r6, #5
 800b996:	f105 0306 	add.w	r3, r5, #6
 800b99a:	d068      	beq.n	800ba6e <ucdr_deserialize_double+0x166>
 800b99c:	787b      	ldrb	r3, [r7, #1]
 800b99e:	71ab      	strb	r3, [r5, #6]
 800b9a0:	2e06      	cmp	r6, #6
 800b9a2:	f105 0307 	add.w	r3, r5, #7
 800b9a6:	d066      	beq.n	800ba76 <ucdr_deserialize_double+0x16e>
 800b9a8:	783b      	ldrb	r3, [r7, #0]
 800b9aa:	71eb      	strb	r3, [r5, #7]
 800b9ac:	6923      	ldr	r3, [r4, #16]
 800b9ae:	68a2      	ldr	r2, [r4, #8]
 800b9b0:	7da0      	ldrb	r0, [r4, #22]
 800b9b2:	3308      	adds	r3, #8
 800b9b4:	1b9e      	subs	r6, r3, r6
 800b9b6:	2308      	movs	r3, #8
 800b9b8:	4442      	add	r2, r8
 800b9ba:	7563      	strb	r3, [r4, #21]
 800b9bc:	60a2      	str	r2, [r4, #8]
 800b9be:	6126      	str	r6, [r4, #16]
 800b9c0:	f080 0001 	eor.w	r0, r0, #1
 800b9c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9c8:	2108      	movs	r1, #8
 800b9ca:	4620      	mov	r0, r4
 800b9cc:	f000 f86e 	bl	800baac <ucdr_check_final_buffer_behavior>
 800b9d0:	b310      	cbz	r0, 800ba18 <ucdr_deserialize_double+0x110>
 800b9d2:	7d23      	ldrb	r3, [r4, #20]
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	68a3      	ldr	r3, [r4, #8]
 800b9d8:	d023      	beq.n	800ba22 <ucdr_deserialize_double+0x11a>
 800b9da:	79db      	ldrb	r3, [r3, #7]
 800b9dc:	702b      	strb	r3, [r5, #0]
 800b9de:	68a3      	ldr	r3, [r4, #8]
 800b9e0:	799b      	ldrb	r3, [r3, #6]
 800b9e2:	706b      	strb	r3, [r5, #1]
 800b9e4:	68a3      	ldr	r3, [r4, #8]
 800b9e6:	795b      	ldrb	r3, [r3, #5]
 800b9e8:	70ab      	strb	r3, [r5, #2]
 800b9ea:	68a3      	ldr	r3, [r4, #8]
 800b9ec:	791b      	ldrb	r3, [r3, #4]
 800b9ee:	70eb      	strb	r3, [r5, #3]
 800b9f0:	68a3      	ldr	r3, [r4, #8]
 800b9f2:	78db      	ldrb	r3, [r3, #3]
 800b9f4:	712b      	strb	r3, [r5, #4]
 800b9f6:	68a3      	ldr	r3, [r4, #8]
 800b9f8:	789b      	ldrb	r3, [r3, #2]
 800b9fa:	716b      	strb	r3, [r5, #5]
 800b9fc:	68a3      	ldr	r3, [r4, #8]
 800b9fe:	785b      	ldrb	r3, [r3, #1]
 800ba00:	71ab      	strb	r3, [r5, #6]
 800ba02:	68a3      	ldr	r3, [r4, #8]
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	71eb      	strb	r3, [r5, #7]
 800ba08:	68a2      	ldr	r2, [r4, #8]
 800ba0a:	6923      	ldr	r3, [r4, #16]
 800ba0c:	3208      	adds	r2, #8
 800ba0e:	3308      	adds	r3, #8
 800ba10:	2108      	movs	r1, #8
 800ba12:	60a2      	str	r2, [r4, #8]
 800ba14:	6123      	str	r3, [r4, #16]
 800ba16:	7561      	strb	r1, [r4, #21]
 800ba18:	7da0      	ldrb	r0, [r4, #22]
 800ba1a:	f080 0001 	eor.w	r0, r0, #1
 800ba1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	606b      	str	r3, [r5, #4]
 800ba28:	602a      	str	r2, [r5, #0]
 800ba2a:	e7ed      	b.n	800ba08 <ucdr_deserialize_double+0x100>
 800ba2c:	68a2      	ldr	r2, [r4, #8]
 800ba2e:	6923      	ldr	r3, [r4, #16]
 800ba30:	7da0      	ldrb	r0, [r4, #22]
 800ba32:	f884 9015 	strb.w	r9, [r4, #21]
 800ba36:	1b92      	subs	r2, r2, r6
 800ba38:	1b9b      	subs	r3, r3, r6
 800ba3a:	60a2      	str	r2, [r4, #8]
 800ba3c:	6123      	str	r3, [r4, #16]
 800ba3e:	f080 0001 	eor.w	r0, r0, #1
 800ba42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba46:	68a3      	ldr	r3, [r4, #8]
 800ba48:	799b      	ldrb	r3, [r3, #6]
 800ba4a:	706b      	strb	r3, [r5, #1]
 800ba4c:	1cab      	adds	r3, r5, #2
 800ba4e:	68a2      	ldr	r2, [r4, #8]
 800ba50:	7952      	ldrb	r2, [r2, #5]
 800ba52:	f803 2b01 	strb.w	r2, [r3], #1
 800ba56:	68a2      	ldr	r2, [r4, #8]
 800ba58:	7912      	ldrb	r2, [r2, #4]
 800ba5a:	f803 2b01 	strb.w	r2, [r3], #1
 800ba5e:	68a2      	ldr	r2, [r4, #8]
 800ba60:	78d2      	ldrb	r2, [r2, #3]
 800ba62:	f803 2b01 	strb.w	r2, [r3], #1
 800ba66:	68a2      	ldr	r2, [r4, #8]
 800ba68:	7892      	ldrb	r2, [r2, #2]
 800ba6a:	f803 2b01 	strb.w	r2, [r3], #1
 800ba6e:	68a2      	ldr	r2, [r4, #8]
 800ba70:	7852      	ldrb	r2, [r2, #1]
 800ba72:	f803 2b01 	strb.w	r2, [r3], #1
 800ba76:	68a2      	ldr	r2, [r4, #8]
 800ba78:	7812      	ldrb	r2, [r2, #0]
 800ba7a:	701a      	strb	r2, [r3, #0]
 800ba7c:	e796      	b.n	800b9ac <ucdr_deserialize_double+0xa4>
 800ba7e:	4639      	mov	r1, r7
 800ba80:	4632      	mov	r2, r6
 800ba82:	4628      	mov	r0, r5
 800ba84:	f00b ff5b 	bl	801793e <memcpy>
 800ba88:	68a1      	ldr	r1, [r4, #8]
 800ba8a:	4642      	mov	r2, r8
 800ba8c:	19a8      	adds	r0, r5, r6
 800ba8e:	f00b ff56 	bl	801793e <memcpy>
 800ba92:	e78b      	b.n	800b9ac <ucdr_deserialize_double+0xa4>

0800ba94 <ucdr_check_buffer_available_for>:
 800ba94:	7d83      	ldrb	r3, [r0, #22]
 800ba96:	b93b      	cbnz	r3, 800baa8 <ucdr_check_buffer_available_for+0x14>
 800ba98:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800ba9c:	4419      	add	r1, r3
 800ba9e:	4288      	cmp	r0, r1
 800baa0:	bf34      	ite	cc
 800baa2:	2000      	movcc	r0, #0
 800baa4:	2001      	movcs	r0, #1
 800baa6:	4770      	bx	lr
 800baa8:	2000      	movs	r0, #0
 800baaa:	4770      	bx	lr

0800baac <ucdr_check_final_buffer_behavior>:
 800baac:	7d83      	ldrb	r3, [r0, #22]
 800baae:	b943      	cbnz	r3, 800bac2 <ucdr_check_final_buffer_behavior+0x16>
 800bab0:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800bab4:	4291      	cmp	r1, r2
 800bab6:	b510      	push	{r4, lr}
 800bab8:	4604      	mov	r4, r0
 800baba:	d205      	bcs.n	800bac8 <ucdr_check_final_buffer_behavior+0x1c>
 800babc:	2301      	movs	r3, #1
 800babe:	4618      	mov	r0, r3
 800bac0:	bd10      	pop	{r4, pc}
 800bac2:	2300      	movs	r3, #0
 800bac4:	4618      	mov	r0, r3
 800bac6:	4770      	bx	lr
 800bac8:	6982      	ldr	r2, [r0, #24]
 800baca:	b13a      	cbz	r2, 800badc <ucdr_check_final_buffer_behavior+0x30>
 800bacc:	69c1      	ldr	r1, [r0, #28]
 800bace:	4790      	blx	r2
 800bad0:	f080 0301 	eor.w	r3, r0, #1
 800bad4:	b2db      	uxtb	r3, r3
 800bad6:	75a0      	strb	r0, [r4, #22]
 800bad8:	4618      	mov	r0, r3
 800bada:	bd10      	pop	{r4, pc}
 800badc:	2001      	movs	r0, #1
 800bade:	75a0      	strb	r0, [r4, #22]
 800bae0:	e7fa      	b.n	800bad8 <ucdr_check_final_buffer_behavior+0x2c>
 800bae2:	bf00      	nop

0800bae4 <ucdr_set_on_full_buffer_callback>:
 800bae4:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800bae8:	4770      	bx	lr
 800baea:	bf00      	nop

0800baec <ucdr_init_buffer_origin_offset_endian>:
 800baec:	b410      	push	{r4}
 800baee:	9c01      	ldr	r4, [sp, #4]
 800baf0:	6001      	str	r1, [r0, #0]
 800baf2:	440a      	add	r2, r1
 800baf4:	6042      	str	r2, [r0, #4]
 800baf6:	190a      	adds	r2, r1, r4
 800baf8:	441c      	add	r4, r3
 800bafa:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800bafe:	6082      	str	r2, [r0, #8]
 800bb00:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800bb04:	7503      	strb	r3, [r0, #20]
 800bb06:	2200      	movs	r2, #0
 800bb08:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800bb0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb10:	7542      	strb	r2, [r0, #21]
 800bb12:	7582      	strb	r2, [r0, #22]
 800bb14:	4770      	bx	lr
 800bb16:	bf00      	nop

0800bb18 <ucdr_init_buffer_origin_offset>:
 800bb18:	b510      	push	{r4, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	9c04      	ldr	r4, [sp, #16]
 800bb1e:	9400      	str	r4, [sp, #0]
 800bb20:	2401      	movs	r4, #1
 800bb22:	9401      	str	r4, [sp, #4]
 800bb24:	f7ff ffe2 	bl	800baec <ucdr_init_buffer_origin_offset_endian>
 800bb28:	b002      	add	sp, #8
 800bb2a:	bd10      	pop	{r4, pc}

0800bb2c <ucdr_init_buffer_origin>:
 800bb2c:	b510      	push	{r4, lr}
 800bb2e:	b082      	sub	sp, #8
 800bb30:	2400      	movs	r4, #0
 800bb32:	9400      	str	r4, [sp, #0]
 800bb34:	f7ff fff0 	bl	800bb18 <ucdr_init_buffer_origin_offset>
 800bb38:	b002      	add	sp, #8
 800bb3a:	bd10      	pop	{r4, pc}

0800bb3c <ucdr_init_buffer>:
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	f7ff bff5 	b.w	800bb2c <ucdr_init_buffer_origin>
 800bb42:	bf00      	nop

0800bb44 <ucdr_alignment>:
 800bb44:	fbb0 f3f1 	udiv	r3, r0, r1
 800bb48:	fb03 0011 	mls	r0, r3, r1, r0
 800bb4c:	1a08      	subs	r0, r1, r0
 800bb4e:	3901      	subs	r1, #1
 800bb50:	4008      	ands	r0, r1
 800bb52:	4770      	bx	lr

0800bb54 <ucdr_buffer_alignment>:
 800bb54:	7d43      	ldrb	r3, [r0, #21]
 800bb56:	428b      	cmp	r3, r1
 800bb58:	d208      	bcs.n	800bb6c <ucdr_buffer_alignment+0x18>
 800bb5a:	6900      	ldr	r0, [r0, #16]
 800bb5c:	fbb0 f3f1 	udiv	r3, r0, r1
 800bb60:	fb01 0013 	mls	r0, r1, r3, r0
 800bb64:	1a08      	subs	r0, r1, r0
 800bb66:	3901      	subs	r1, #1
 800bb68:	4008      	ands	r0, r1
 800bb6a:	4770      	bx	lr
 800bb6c:	2000      	movs	r0, #0
 800bb6e:	4770      	bx	lr

0800bb70 <ucdr_align_to>:
 800bb70:	b538      	push	{r3, r4, r5, lr}
 800bb72:	4604      	mov	r4, r0
 800bb74:	460d      	mov	r5, r1
 800bb76:	f7ff ffed 	bl	800bb54 <ucdr_buffer_alignment>
 800bb7a:	68a3      	ldr	r3, [r4, #8]
 800bb7c:	6921      	ldr	r1, [r4, #16]
 800bb7e:	7565      	strb	r5, [r4, #21]
 800bb80:	181a      	adds	r2, r3, r0
 800bb82:	6863      	ldr	r3, [r4, #4]
 800bb84:	4293      	cmp	r3, r2
 800bb86:	4408      	add	r0, r1
 800bb88:	bf28      	it	cs
 800bb8a:	4613      	movcs	r3, r2
 800bb8c:	6120      	str	r0, [r4, #16]
 800bb8e:	60a3      	str	r3, [r4, #8]
 800bb90:	bd38      	pop	{r3, r4, r5, pc}
 800bb92:	bf00      	nop

0800bb94 <ucdr_buffer_length>:
 800bb94:	6882      	ldr	r2, [r0, #8]
 800bb96:	6800      	ldr	r0, [r0, #0]
 800bb98:	1a10      	subs	r0, r2, r0
 800bb9a:	4770      	bx	lr

0800bb9c <ucdr_buffer_remaining>:
 800bb9c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800bba0:	1a10      	subs	r0, r2, r0
 800bba2:	4770      	bx	lr

0800bba4 <ucdr_check_final_buffer_behavior_array>:
 800bba4:	b538      	push	{r3, r4, r5, lr}
 800bba6:	7d83      	ldrb	r3, [r0, #22]
 800bba8:	b963      	cbnz	r3, 800bbc4 <ucdr_check_final_buffer_behavior_array+0x20>
 800bbaa:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800bbae:	429a      	cmp	r2, r3
 800bbb0:	4604      	mov	r4, r0
 800bbb2:	460d      	mov	r5, r1
 800bbb4:	d308      	bcc.n	800bbc8 <ucdr_check_final_buffer_behavior_array+0x24>
 800bbb6:	b139      	cbz	r1, 800bbc8 <ucdr_check_final_buffer_behavior_array+0x24>
 800bbb8:	6983      	ldr	r3, [r0, #24]
 800bbba:	b163      	cbz	r3, 800bbd6 <ucdr_check_final_buffer_behavior_array+0x32>
 800bbbc:	69c1      	ldr	r1, [r0, #28]
 800bbbe:	4798      	blx	r3
 800bbc0:	75a0      	strb	r0, [r4, #22]
 800bbc2:	b108      	cbz	r0, 800bbc8 <ucdr_check_final_buffer_behavior_array+0x24>
 800bbc4:	2000      	movs	r0, #0
 800bbc6:	bd38      	pop	{r3, r4, r5, pc}
 800bbc8:	4620      	mov	r0, r4
 800bbca:	f7ff ffe7 	bl	800bb9c <ucdr_buffer_remaining>
 800bbce:	42a8      	cmp	r0, r5
 800bbd0:	bf28      	it	cs
 800bbd2:	4628      	movcs	r0, r5
 800bbd4:	bd38      	pop	{r3, r4, r5, pc}
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	7583      	strb	r3, [r0, #22]
 800bbda:	e7f3      	b.n	800bbc4 <ucdr_check_final_buffer_behavior_array+0x20>

0800bbdc <ucdr_advance_buffer>:
 800bbdc:	b538      	push	{r3, r4, r5, lr}
 800bbde:	4604      	mov	r4, r0
 800bbe0:	460d      	mov	r5, r1
 800bbe2:	f7ff ff57 	bl	800ba94 <ucdr_check_buffer_available_for>
 800bbe6:	b178      	cbz	r0, 800bc08 <ucdr_advance_buffer+0x2c>
 800bbe8:	6923      	ldr	r3, [r4, #16]
 800bbea:	68a2      	ldr	r2, [r4, #8]
 800bbec:	442b      	add	r3, r5
 800bbee:	6123      	str	r3, [r4, #16]
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	442a      	add	r2, r5
 800bbf4:	7563      	strb	r3, [r4, #21]
 800bbf6:	60a2      	str	r2, [r4, #8]
 800bbf8:	bd38      	pop	{r3, r4, r5, pc}
 800bbfa:	68a2      	ldr	r2, [r4, #8]
 800bbfc:	6923      	ldr	r3, [r4, #16]
 800bbfe:	4402      	add	r2, r0
 800bc00:	4403      	add	r3, r0
 800bc02:	1a2d      	subs	r5, r5, r0
 800bc04:	60a2      	str	r2, [r4, #8]
 800bc06:	6123      	str	r3, [r4, #16]
 800bc08:	4629      	mov	r1, r5
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	4620      	mov	r0, r4
 800bc0e:	f7ff ffc9 	bl	800bba4 <ucdr_check_final_buffer_behavior_array>
 800bc12:	2800      	cmp	r0, #0
 800bc14:	d1f1      	bne.n	800bbfa <ucdr_advance_buffer+0x1e>
 800bc16:	2301      	movs	r3, #1
 800bc18:	7563      	strb	r3, [r4, #21]
 800bc1a:	bd38      	pop	{r3, r4, r5, pc}

0800bc1c <rcl_get_zero_initialized_init_options>:
 800bc1c:	2000      	movs	r0, #0
 800bc1e:	4770      	bx	lr

0800bc20 <rcl_init_options_init>:
 800bc20:	b084      	sub	sp, #16
 800bc22:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc24:	b097      	sub	sp, #92	@ 0x5c
 800bc26:	ae1d      	add	r6, sp, #116	@ 0x74
 800bc28:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	d058      	beq.n	800bce2 <rcl_init_options_init+0xc2>
 800bc30:	6803      	ldr	r3, [r0, #0]
 800bc32:	4605      	mov	r5, r0
 800bc34:	b133      	cbz	r3, 800bc44 <rcl_init_options_init+0x24>
 800bc36:	2464      	movs	r4, #100	@ 0x64
 800bc38:	4620      	mov	r0, r4
 800bc3a:	b017      	add	sp, #92	@ 0x5c
 800bc3c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bc40:	b004      	add	sp, #16
 800bc42:	4770      	bx	lr
 800bc44:	4630      	mov	r0, r6
 800bc46:	f001 f931 	bl	800ceac <rcutils_allocator_is_valid>
 800bc4a:	2800      	cmp	r0, #0
 800bc4c:	d049      	beq.n	800bce2 <rcl_init_options_init+0xc2>
 800bc4e:	46b4      	mov	ip, r6
 800bc50:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bc54:	ac11      	add	r4, sp, #68	@ 0x44
 800bc56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bc58:	f8dc 3000 	ldr.w	r3, [ip]
 800bc5c:	6023      	str	r3, [r4, #0]
 800bc5e:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800bc60:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bc62:	2050      	movs	r0, #80	@ 0x50
 800bc64:	4798      	blx	r3
 800bc66:	4604      	mov	r4, r0
 800bc68:	6028      	str	r0, [r5, #0]
 800bc6a:	2800      	cmp	r0, #0
 800bc6c:	d03b      	beq.n	800bce6 <rcl_init_options_init+0xc6>
 800bc6e:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800bc72:	4686      	mov	lr, r0
 800bc74:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bc78:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bc7c:	f8dc 3000 	ldr.w	r3, [ip]
 800bc80:	f8ce 3000 	str.w	r3, [lr]
 800bc84:	a802      	add	r0, sp, #8
 800bc86:	f001 f9a3 	bl	800cfd0 <rmw_get_zero_initialized_init_options>
 800bc8a:	f10d 0e08 	add.w	lr, sp, #8
 800bc8e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bc92:	f104 0c18 	add.w	ip, r4, #24
 800bc96:	682f      	ldr	r7, [r5, #0]
 800bc98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bc9c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bca0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bca4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bca8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bcac:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800bcb0:	ac20      	add	r4, sp, #128	@ 0x80
 800bcb2:	e88c 0003 	stmia.w	ip, {r0, r1}
 800bcb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bcba:	e88d 0003 	stmia.w	sp, {r0, r1}
 800bcbe:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800bcc2:	f107 0018 	add.w	r0, r7, #24
 800bcc6:	f001 f9b1 	bl	800d02c <rmw_init_options_init>
 800bcca:	4604      	mov	r4, r0
 800bccc:	2800      	cmp	r0, #0
 800bcce:	d0b3      	beq.n	800bc38 <rcl_init_options_init+0x18>
 800bcd0:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800bcd2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800bcd4:	6828      	ldr	r0, [r5, #0]
 800bcd6:	4798      	blx	r3
 800bcd8:	4620      	mov	r0, r4
 800bcda:	f005 ff6b 	bl	8011bb4 <rcl_convert_rmw_ret_to_rcl_ret>
 800bcde:	4604      	mov	r4, r0
 800bce0:	e7aa      	b.n	800bc38 <rcl_init_options_init+0x18>
 800bce2:	240b      	movs	r4, #11
 800bce4:	e7a8      	b.n	800bc38 <rcl_init_options_init+0x18>
 800bce6:	240a      	movs	r4, #10
 800bce8:	e7a6      	b.n	800bc38 <rcl_init_options_init+0x18>
 800bcea:	bf00      	nop

0800bcec <rcl_init_options_fini>:
 800bcec:	b530      	push	{r4, r5, lr}
 800bcee:	b087      	sub	sp, #28
 800bcf0:	b1f0      	cbz	r0, 800bd30 <rcl_init_options_fini+0x44>
 800bcf2:	6803      	ldr	r3, [r0, #0]
 800bcf4:	4604      	mov	r4, r0
 800bcf6:	b1db      	cbz	r3, 800bd30 <rcl_init_options_fini+0x44>
 800bcf8:	469c      	mov	ip, r3
 800bcfa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bcfe:	f10d 0e04 	add.w	lr, sp, #4
 800bd02:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bd06:	f8dc 3000 	ldr.w	r3, [ip]
 800bd0a:	f8ce 3000 	str.w	r3, [lr]
 800bd0e:	a801      	add	r0, sp, #4
 800bd10:	f001 f8cc 	bl	800ceac <rcutils_allocator_is_valid>
 800bd14:	b160      	cbz	r0, 800bd30 <rcl_init_options_fini+0x44>
 800bd16:	6820      	ldr	r0, [r4, #0]
 800bd18:	3018      	adds	r0, #24
 800bd1a:	f001 fa37 	bl	800d18c <rmw_init_options_fini>
 800bd1e:	4605      	mov	r5, r0
 800bd20:	b950      	cbnz	r0, 800bd38 <rcl_init_options_fini+0x4c>
 800bd22:	6820      	ldr	r0, [r4, #0]
 800bd24:	9b02      	ldr	r3, [sp, #8]
 800bd26:	9905      	ldr	r1, [sp, #20]
 800bd28:	4798      	blx	r3
 800bd2a:	4628      	mov	r0, r5
 800bd2c:	b007      	add	sp, #28
 800bd2e:	bd30      	pop	{r4, r5, pc}
 800bd30:	250b      	movs	r5, #11
 800bd32:	4628      	mov	r0, r5
 800bd34:	b007      	add	sp, #28
 800bd36:	bd30      	pop	{r4, r5, pc}
 800bd38:	f005 ff3c 	bl	8011bb4 <rcl_convert_rmw_ret_to_rcl_ret>
 800bd3c:	4605      	mov	r5, r0
 800bd3e:	e7f8      	b.n	800bd32 <rcl_init_options_fini+0x46>

0800bd40 <rcl_init_options_copy>:
 800bd40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd44:	b094      	sub	sp, #80	@ 0x50
 800bd46:	2800      	cmp	r0, #0
 800bd48:	d058      	beq.n	800bdfc <rcl_init_options_copy+0xbc>
 800bd4a:	4604      	mov	r4, r0
 800bd4c:	6800      	ldr	r0, [r0, #0]
 800bd4e:	2800      	cmp	r0, #0
 800bd50:	d054      	beq.n	800bdfc <rcl_init_options_copy+0xbc>
 800bd52:	460e      	mov	r6, r1
 800bd54:	f001 f8aa 	bl	800ceac <rcutils_allocator_is_valid>
 800bd58:	2800      	cmp	r0, #0
 800bd5a:	d04f      	beq.n	800bdfc <rcl_init_options_copy+0xbc>
 800bd5c:	2e00      	cmp	r6, #0
 800bd5e:	d04d      	beq.n	800bdfc <rcl_init_options_copy+0xbc>
 800bd60:	6833      	ldr	r3, [r6, #0]
 800bd62:	b123      	cbz	r3, 800bd6e <rcl_init_options_copy+0x2e>
 800bd64:	2464      	movs	r4, #100	@ 0x64
 800bd66:	4620      	mov	r0, r4
 800bd68:	b014      	add	sp, #80	@ 0x50
 800bd6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd6e:	6827      	ldr	r7, [r4, #0]
 800bd70:	46bc      	mov	ip, r7
 800bd72:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bd76:	ad0f      	add	r5, sp, #60	@ 0x3c
 800bd78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bd7a:	f8dc 3000 	ldr.w	r3, [ip]
 800bd7e:	f8d7 8000 	ldr.w	r8, [r7]
 800bd82:	602b      	str	r3, [r5, #0]
 800bd84:	4619      	mov	r1, r3
 800bd86:	2050      	movs	r0, #80	@ 0x50
 800bd88:	47c0      	blx	r8
 800bd8a:	4605      	mov	r5, r0
 800bd8c:	6030      	str	r0, [r6, #0]
 800bd8e:	b3d0      	cbz	r0, 800be06 <rcl_init_options_copy+0xc6>
 800bd90:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800bd94:	4686      	mov	lr, r0
 800bd96:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bd9a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bd9e:	f8dc 3000 	ldr.w	r3, [ip]
 800bda2:	f8ce 3000 	str.w	r3, [lr]
 800bda6:	4668      	mov	r0, sp
 800bda8:	f001 f912 	bl	800cfd0 <rmw_get_zero_initialized_init_options>
 800bdac:	46ee      	mov	lr, sp
 800bdae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bdb2:	f105 0c18 	add.w	ip, r5, #24
 800bdb6:	6824      	ldr	r4, [r4, #0]
 800bdb8:	6835      	ldr	r5, [r6, #0]
 800bdba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bdbe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bdc2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bdc6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bdca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bdce:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800bdd2:	e88c 0003 	stmia.w	ip, {r0, r1}
 800bdd6:	f104 0018 	add.w	r0, r4, #24
 800bdda:	f105 0118 	add.w	r1, r5, #24
 800bdde:	f001 f98d 	bl	800d0fc <rmw_init_options_copy>
 800bde2:	4604      	mov	r4, r0
 800bde4:	2800      	cmp	r0, #0
 800bde6:	d0be      	beq.n	800bd66 <rcl_init_options_copy+0x26>
 800bde8:	f001 f86e 	bl	800cec8 <rcutils_get_error_string>
 800bdec:	f001 f884 	bl	800cef8 <rcutils_reset_error>
 800bdf0:	4630      	mov	r0, r6
 800bdf2:	f7ff ff7b 	bl	800bcec <rcl_init_options_fini>
 800bdf6:	b140      	cbz	r0, 800be0a <rcl_init_options_copy+0xca>
 800bdf8:	4604      	mov	r4, r0
 800bdfa:	e7b4      	b.n	800bd66 <rcl_init_options_copy+0x26>
 800bdfc:	240b      	movs	r4, #11
 800bdfe:	4620      	mov	r0, r4
 800be00:	b014      	add	sp, #80	@ 0x50
 800be02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be06:	240a      	movs	r4, #10
 800be08:	e7ad      	b.n	800bd66 <rcl_init_options_copy+0x26>
 800be0a:	4620      	mov	r0, r4
 800be0c:	b014      	add	sp, #80	@ 0x50
 800be0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be12:	f005 becf 	b.w	8011bb4 <rcl_convert_rmw_ret_to_rcl_ret>
 800be16:	bf00      	nop

0800be18 <rcl_init_options_set_domain_id>:
 800be18:	b120      	cbz	r0, 800be24 <rcl_init_options_set_domain_id+0xc>
 800be1a:	6803      	ldr	r3, [r0, #0]
 800be1c:	b113      	cbz	r3, 800be24 <rcl_init_options_set_domain_id+0xc>
 800be1e:	6259      	str	r1, [r3, #36]	@ 0x24
 800be20:	2000      	movs	r0, #0
 800be22:	4770      	bx	lr
 800be24:	200b      	movs	r0, #11
 800be26:	4770      	bx	lr

0800be28 <rcl_get_zero_initialized_publisher>:
 800be28:	4b01      	ldr	r3, [pc, #4]	@ (800be30 <rcl_get_zero_initialized_publisher+0x8>)
 800be2a:	6818      	ldr	r0, [r3, #0]
 800be2c:	4770      	bx	lr
 800be2e:	bf00      	nop
 800be30:	080189c8 	.word	0x080189c8

0800be34 <rcl_publisher_init>:
 800be34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be38:	b088      	sub	sp, #32
 800be3a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800be3c:	2d00      	cmp	r5, #0
 800be3e:	d069      	beq.n	800bf14 <rcl_publisher_init+0xe0>
 800be40:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800be44:	4604      	mov	r4, r0
 800be46:	4648      	mov	r0, r9
 800be48:	460e      	mov	r6, r1
 800be4a:	4690      	mov	r8, r2
 800be4c:	461f      	mov	r7, r3
 800be4e:	f001 f82d 	bl	800ceac <rcutils_allocator_is_valid>
 800be52:	2800      	cmp	r0, #0
 800be54:	d05e      	beq.n	800bf14 <rcl_publisher_init+0xe0>
 800be56:	2c00      	cmp	r4, #0
 800be58:	d05c      	beq.n	800bf14 <rcl_publisher_init+0xe0>
 800be5a:	f8d4 a000 	ldr.w	sl, [r4]
 800be5e:	f1ba 0f00 	cmp.w	sl, #0
 800be62:	d004      	beq.n	800be6e <rcl_publisher_init+0x3a>
 800be64:	2764      	movs	r7, #100	@ 0x64
 800be66:	4638      	mov	r0, r7
 800be68:	b008      	add	sp, #32
 800be6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be6e:	4630      	mov	r0, r6
 800be70:	f006 f99a 	bl	80121a8 <rcl_node_is_valid>
 800be74:	2800      	cmp	r0, #0
 800be76:	d052      	beq.n	800bf1e <rcl_publisher_init+0xea>
 800be78:	f1b8 0f00 	cmp.w	r8, #0
 800be7c:	d04a      	beq.n	800bf14 <rcl_publisher_init+0xe0>
 800be7e:	2f00      	cmp	r7, #0
 800be80:	d048      	beq.n	800bf14 <rcl_publisher_init+0xe0>
 800be82:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800be86:	aa07      	add	r2, sp, #28
 800be88:	9205      	str	r2, [sp, #20]
 800be8a:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800be8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800be92:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800be96:	f8cd a01c 	str.w	sl, [sp, #28]
 800be9a:	4639      	mov	r1, r7
 800be9c:	e899 000c 	ldmia.w	r9, {r2, r3}
 800bea0:	4630      	mov	r0, r6
 800bea2:	f006 f9d5 	bl	8012250 <rcl_node_resolve_name>
 800bea6:	4607      	mov	r7, r0
 800bea8:	2800      	cmp	r0, #0
 800beaa:	d14f      	bne.n	800bf4c <rcl_publisher_init+0x118>
 800beac:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800beae:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800beb0:	20c8      	movs	r0, #200	@ 0xc8
 800beb2:	4798      	blx	r3
 800beb4:	6020      	str	r0, [r4, #0]
 800beb6:	2800      	cmp	r0, #0
 800beb8:	d04e      	beq.n	800bf58 <rcl_publisher_init+0x124>
 800beba:	4630      	mov	r0, r6
 800bebc:	f006 f996 	bl	80121ec <rcl_node_get_rmw_handle>
 800bec0:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800bec4:	9300      	str	r3, [sp, #0]
 800bec6:	9a07      	ldr	r2, [sp, #28]
 800bec8:	6827      	ldr	r7, [r4, #0]
 800beca:	462b      	mov	r3, r5
 800becc:	4641      	mov	r1, r8
 800bece:	f001 fc85 	bl	800d7dc <rmw_create_publisher>
 800bed2:	6823      	ldr	r3, [r4, #0]
 800bed4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800bed8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800bedc:	b370      	cbz	r0, 800bf3c <rcl_publisher_init+0x108>
 800bede:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800bee2:	f001 fd59 	bl	800d998 <rmw_publisher_get_actual_qos>
 800bee6:	6823      	ldr	r3, [r4, #0]
 800bee8:	4607      	mov	r7, r0
 800beea:	b9d0      	cbnz	r0, 800bf22 <rcl_publisher_init+0xee>
 800beec:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800bef0:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800bef4:	4629      	mov	r1, r5
 800bef6:	2270      	movs	r2, #112	@ 0x70
 800bef8:	4618      	mov	r0, r3
 800befa:	f00b fd20 	bl	801793e <memcpy>
 800befe:	6832      	ldr	r2, [r6, #0]
 800bf00:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800bf04:	9807      	ldr	r0, [sp, #28]
 800bf06:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800bf08:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800bf0a:	4798      	blx	r3
 800bf0c:	4638      	mov	r0, r7
 800bf0e:	b008      	add	sp, #32
 800bf10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf14:	270b      	movs	r7, #11
 800bf16:	4638      	mov	r0, r7
 800bf18:	b008      	add	sp, #32
 800bf1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf1e:	27c8      	movs	r7, #200	@ 0xc8
 800bf20:	e7a1      	b.n	800be66 <rcl_publisher_init+0x32>
 800bf22:	b18b      	cbz	r3, 800bf48 <rcl_publisher_init+0x114>
 800bf24:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800bf28:	b142      	cbz	r2, 800bf3c <rcl_publisher_init+0x108>
 800bf2a:	4630      	mov	r0, r6
 800bf2c:	f006 f95e 	bl	80121ec <rcl_node_get_rmw_handle>
 800bf30:	6823      	ldr	r3, [r4, #0]
 800bf32:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800bf36:	f001 fd3f 	bl	800d9b8 <rmw_destroy_publisher>
 800bf3a:	6823      	ldr	r3, [r4, #0]
 800bf3c:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800bf3e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800bf40:	4618      	mov	r0, r3
 800bf42:	4790      	blx	r2
 800bf44:	2300      	movs	r3, #0
 800bf46:	6023      	str	r3, [r4, #0]
 800bf48:	2701      	movs	r7, #1
 800bf4a:	e7db      	b.n	800bf04 <rcl_publisher_init+0xd0>
 800bf4c:	2867      	cmp	r0, #103	@ 0x67
 800bf4e:	d0d9      	beq.n	800bf04 <rcl_publisher_init+0xd0>
 800bf50:	2869      	cmp	r0, #105	@ 0x69
 800bf52:	d003      	beq.n	800bf5c <rcl_publisher_init+0x128>
 800bf54:	280a      	cmp	r0, #10
 800bf56:	d1f7      	bne.n	800bf48 <rcl_publisher_init+0x114>
 800bf58:	270a      	movs	r7, #10
 800bf5a:	e7d3      	b.n	800bf04 <rcl_publisher_init+0xd0>
 800bf5c:	2767      	movs	r7, #103	@ 0x67
 800bf5e:	e7d1      	b.n	800bf04 <rcl_publisher_init+0xd0>

0800bf60 <rcl_publisher_get_default_options>:
 800bf60:	b570      	push	{r4, r5, r6, lr}
 800bf62:	4d14      	ldr	r5, [pc, #80]	@ (800bfb4 <rcl_publisher_get_default_options+0x54>)
 800bf64:	4914      	ldr	r1, [pc, #80]	@ (800bfb8 <rcl_publisher_get_default_options+0x58>)
 800bf66:	b088      	sub	sp, #32
 800bf68:	4604      	mov	r4, r0
 800bf6a:	2250      	movs	r2, #80	@ 0x50
 800bf6c:	4628      	mov	r0, r5
 800bf6e:	f00b fce6 	bl	801793e <memcpy>
 800bf72:	a802      	add	r0, sp, #8
 800bf74:	f000 ff8c 	bl	800ce90 <rcutils_get_default_allocator>
 800bf78:	f10d 0c08 	add.w	ip, sp, #8
 800bf7c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bf80:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800bf84:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bf88:	466e      	mov	r6, sp
 800bf8a:	f8dc 3000 	ldr.w	r3, [ip]
 800bf8e:	f8ce 3000 	str.w	r3, [lr]
 800bf92:	4630      	mov	r0, r6
 800bf94:	f001 f82c 	bl	800cff0 <rmw_get_default_publisher_options>
 800bf98:	e896 0003 	ldmia.w	r6, {r0, r1}
 800bf9c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800bfa0:	e883 0003 	stmia.w	r3, {r0, r1}
 800bfa4:	2270      	movs	r2, #112	@ 0x70
 800bfa6:	4629      	mov	r1, r5
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	f00b fcc8 	bl	801793e <memcpy>
 800bfae:	4620      	mov	r0, r4
 800bfb0:	b008      	add	sp, #32
 800bfb2:	bd70      	pop	{r4, r5, r6, pc}
 800bfb4:	20006238 	.word	0x20006238
 800bfb8:	080189d0 	.word	0x080189d0

0800bfbc <rcl_publish>:
 800bfbc:	b1f8      	cbz	r0, 800bffe <rcl_publish+0x42>
 800bfbe:	6803      	ldr	r3, [r0, #0]
 800bfc0:	b570      	push	{r4, r5, r6, lr}
 800bfc2:	4604      	mov	r4, r0
 800bfc4:	b1b3      	cbz	r3, 800bff4 <rcl_publish+0x38>
 800bfc6:	4616      	mov	r6, r2
 800bfc8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800bfcc:	b192      	cbz	r2, 800bff4 <rcl_publish+0x38>
 800bfce:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800bfd2:	460d      	mov	r5, r1
 800bfd4:	f005 fe0c 	bl	8011bf0 <rcl_context_is_valid>
 800bfd8:	b160      	cbz	r0, 800bff4 <rcl_publish+0x38>
 800bfda:	6823      	ldr	r3, [r4, #0]
 800bfdc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800bfe0:	b140      	cbz	r0, 800bff4 <rcl_publish+0x38>
 800bfe2:	b155      	cbz	r5, 800bffa <rcl_publish+0x3e>
 800bfe4:	4632      	mov	r2, r6
 800bfe6:	4629      	mov	r1, r5
 800bfe8:	f001 fb98 	bl	800d71c <rmw_publish>
 800bfec:	3800      	subs	r0, #0
 800bfee:	bf18      	it	ne
 800bff0:	2001      	movne	r0, #1
 800bff2:	bd70      	pop	{r4, r5, r6, pc}
 800bff4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800bff8:	bd70      	pop	{r4, r5, r6, pc}
 800bffa:	200b      	movs	r0, #11
 800bffc:	bd70      	pop	{r4, r5, r6, pc}
 800bffe:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c002:	4770      	bx	lr

0800c004 <rcl_publisher_is_valid>:
 800c004:	b1a0      	cbz	r0, 800c030 <rcl_publisher_is_valid+0x2c>
 800c006:	6803      	ldr	r3, [r0, #0]
 800c008:	b510      	push	{r4, lr}
 800c00a:	4604      	mov	r4, r0
 800c00c:	b173      	cbz	r3, 800c02c <rcl_publisher_is_valid+0x28>
 800c00e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c012:	b15a      	cbz	r2, 800c02c <rcl_publisher_is_valid+0x28>
 800c014:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c018:	f005 fdea 	bl	8011bf0 <rcl_context_is_valid>
 800c01c:	b130      	cbz	r0, 800c02c <rcl_publisher_is_valid+0x28>
 800c01e:	6823      	ldr	r3, [r4, #0]
 800c020:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c024:	3800      	subs	r0, #0
 800c026:	bf18      	it	ne
 800c028:	2001      	movne	r0, #1
 800c02a:	bd10      	pop	{r4, pc}
 800c02c:	2000      	movs	r0, #0
 800c02e:	bd10      	pop	{r4, pc}
 800c030:	2000      	movs	r0, #0
 800c032:	4770      	bx	lr

0800c034 <rcl_publisher_is_valid_except_context>:
 800c034:	b130      	cbz	r0, 800c044 <rcl_publisher_is_valid_except_context+0x10>
 800c036:	6800      	ldr	r0, [r0, #0]
 800c038:	b120      	cbz	r0, 800c044 <rcl_publisher_is_valid_except_context+0x10>
 800c03a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800c03e:	3800      	subs	r0, #0
 800c040:	bf18      	it	ne
 800c042:	2001      	movne	r0, #1
 800c044:	4770      	bx	lr
 800c046:	bf00      	nop

0800c048 <_rclc_check_for_new_data>:
 800c048:	2800      	cmp	r0, #0
 800c04a:	d046      	beq.n	800c0da <_rclc_check_for_new_data+0x92>
 800c04c:	b510      	push	{r4, lr}
 800c04e:	7802      	ldrb	r2, [r0, #0]
 800c050:	b084      	sub	sp, #16
 800c052:	4603      	mov	r3, r0
 800c054:	2a0a      	cmp	r2, #10
 800c056:	d842      	bhi.n	800c0de <_rclc_check_for_new_data+0x96>
 800c058:	e8df f002 	tbb	[pc, r2]
 800c05c:	14181212 	.word	0x14181212
 800c060:	06060614 	.word	0x06060614
 800c064:	2e1a      	.short	0x2e1a
 800c066:	16          	.byte	0x16
 800c067:	00          	.byte	0x00
 800c068:	6a0a      	ldr	r2, [r1, #32]
 800c06a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c06c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c070:	2000      	movs	r0, #0
 800c072:	1a12      	subs	r2, r2, r0
 800c074:	bf18      	it	ne
 800c076:	2201      	movne	r2, #1
 800c078:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c07c:	b004      	add	sp, #16
 800c07e:	bd10      	pop	{r4, pc}
 800c080:	680a      	ldr	r2, [r1, #0]
 800c082:	e7f2      	b.n	800c06a <_rclc_check_for_new_data+0x22>
 800c084:	698a      	ldr	r2, [r1, #24]
 800c086:	e7f0      	b.n	800c06a <_rclc_check_for_new_data+0x22>
 800c088:	688a      	ldr	r2, [r1, #8]
 800c08a:	e7ee      	b.n	800c06a <_rclc_check_for_new_data+0x22>
 800c08c:	690a      	ldr	r2, [r1, #16]
 800c08e:	e7ec      	b.n	800c06a <_rclc_check_for_new_data+0x22>
 800c090:	685c      	ldr	r4, [r3, #4]
 800c092:	4608      	mov	r0, r1
 800c094:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800c098:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800c09c:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800c0a0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800c0a4:	9300      	str	r3, [sp, #0]
 800c0a6:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800c0aa:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800c0ae:	f104 0110 	add.w	r1, r4, #16
 800c0b2:	f007 fec9 	bl	8013e48 <rcl_action_client_wait_set_get_entities_ready>
 800c0b6:	e7e1      	b.n	800c07c <_rclc_check_for_new_data+0x34>
 800c0b8:	685c      	ldr	r4, [r3, #4]
 800c0ba:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800c0be:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800c0c2:	e9cd 3200 	strd	r3, r2, [sp]
 800c0c6:	4608      	mov	r0, r1
 800c0c8:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800c0cc:	f104 0220 	add.w	r2, r4, #32
 800c0d0:	f104 0110 	add.w	r1, r4, #16
 800c0d4:	f008 f8d0 	bl	8014278 <rcl_action_server_wait_set_get_entities_ready>
 800c0d8:	e7d0      	b.n	800c07c <_rclc_check_for_new_data+0x34>
 800c0da:	200b      	movs	r0, #11
 800c0dc:	4770      	bx	lr
 800c0de:	2001      	movs	r0, #1
 800c0e0:	e7cc      	b.n	800c07c <_rclc_check_for_new_data+0x34>
 800c0e2:	bf00      	nop

0800c0e4 <_rclc_take_new_data>:
 800c0e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0e6:	b09b      	sub	sp, #108	@ 0x6c
 800c0e8:	2800      	cmp	r0, #0
 800c0ea:	f000 8088 	beq.w	800c1fe <_rclc_take_new_data+0x11a>
 800c0ee:	7803      	ldrb	r3, [r0, #0]
 800c0f0:	4604      	mov	r4, r0
 800c0f2:	2b0a      	cmp	r3, #10
 800c0f4:	f200 8167 	bhi.w	800c3c6 <_rclc_take_new_data+0x2e2>
 800c0f8:	e8df f003 	tbb	[pc, r3]
 800c0fc:	44152d2d 	.word	0x44152d2d
 800c100:	19191944 	.word	0x19191944
 800c104:	065a      	.short	0x065a
 800c106:	15          	.byte	0x15
 800c107:	00          	.byte	0x00
 800c108:	6840      	ldr	r0, [r0, #4]
 800c10a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	f040 80b2 	bne.w	800c278 <_rclc_take_new_data+0x194>
 800c114:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800c118:	2b00      	cmp	r3, #0
 800c11a:	f040 80e4 	bne.w	800c2e6 <_rclc_take_new_data+0x202>
 800c11e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c122:	2b00      	cmp	r3, #0
 800c124:	d16f      	bne.n	800c206 <_rclc_take_new_data+0x122>
 800c126:	2500      	movs	r5, #0
 800c128:	4628      	mov	r0, r5
 800c12a:	b01b      	add	sp, #108	@ 0x6c
 800c12c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c12e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c130:	6a0b      	ldr	r3, [r1, #32]
 800c132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d0f5      	beq.n	800c126 <_rclc_take_new_data+0x42>
 800c13a:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c13e:	f104 0110 	add.w	r1, r4, #16
 800c142:	f006 fa2f 	bl	80125a4 <rcl_take_request>
 800c146:	4605      	mov	r5, r0
 800c148:	2800      	cmp	r0, #0
 800c14a:	d0ec      	beq.n	800c126 <_rclc_take_new_data+0x42>
 800c14c:	f240 2359 	movw	r3, #601	@ 0x259
 800c150:	4298      	cmp	r0, r3
 800c152:	d013      	beq.n	800c17c <_rclc_take_new_data+0x98>
 800c154:	e029      	b.n	800c1aa <_rclc_take_new_data+0xc6>
 800c156:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c158:	680b      	ldr	r3, [r1, #0]
 800c15a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d0e1      	beq.n	800c126 <_rclc_take_new_data+0x42>
 800c162:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800c166:	2300      	movs	r3, #0
 800c168:	aa0a      	add	r2, sp, #40	@ 0x28
 800c16a:	f006 fa7d 	bl	8012668 <rcl_take>
 800c16e:	4605      	mov	r5, r0
 800c170:	2800      	cmp	r0, #0
 800c172:	d0d9      	beq.n	800c128 <_rclc_take_new_data+0x44>
 800c174:	f240 1391 	movw	r3, #401	@ 0x191
 800c178:	4298      	cmp	r0, r3
 800c17a:	d116      	bne.n	800c1aa <_rclc_take_new_data+0xc6>
 800c17c:	2300      	movs	r3, #0
 800c17e:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800c182:	e7d1      	b.n	800c128 <_rclc_take_new_data+0x44>
 800c184:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c186:	698b      	ldr	r3, [r1, #24]
 800c188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d0ca      	beq.n	800c126 <_rclc_take_new_data+0x42>
 800c190:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c194:	f104 0110 	add.w	r1, r4, #16
 800c198:	f005 fcba 	bl	8011b10 <rcl_take_response>
 800c19c:	4605      	mov	r5, r0
 800c19e:	2800      	cmp	r0, #0
 800c1a0:	d0c1      	beq.n	800c126 <_rclc_take_new_data+0x42>
 800c1a2:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800c1a6:	4298      	cmp	r0, r3
 800c1a8:	d0be      	beq.n	800c128 <_rclc_take_new_data+0x44>
 800c1aa:	f000 fea5 	bl	800cef8 <rcutils_reset_error>
 800c1ae:	e7bb      	b.n	800c128 <_rclc_take_new_data+0x44>
 800c1b0:	6840      	ldr	r0, [r0, #4]
 800c1b2:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d17d      	bne.n	800c2b6 <_rclc_take_new_data+0x1d2>
 800c1ba:	69c3      	ldr	r3, [r0, #28]
 800c1bc:	b11b      	cbz	r3, 800c1c6 <_rclc_take_new_data+0xe2>
 800c1be:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d144      	bne.n	800c250 <_rclc_take_new_data+0x16c>
 800c1c6:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	f040 80ac 	bne.w	800c328 <_rclc_take_new_data+0x244>
 800c1d0:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d0a6      	beq.n	800c126 <_rclc_take_new_data+0x42>
 800c1d8:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800c1da:	a90a      	add	r1, sp, #40	@ 0x28
 800c1dc:	3010      	adds	r0, #16
 800c1de:	f007 fd0b 	bl	8013bf8 <rcl_action_take_result_response>
 800c1e2:	4605      	mov	r5, r0
 800c1e4:	2800      	cmp	r0, #0
 800c1e6:	d1e0      	bne.n	800c1aa <_rclc_take_new_data+0xc6>
 800c1e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c1ec:	6860      	ldr	r0, [r4, #4]
 800c1ee:	f008 f967 	bl	80144c0 <rclc_action_find_handle_by_result_request_sequence_number>
 800c1f2:	2800      	cmp	r0, #0
 800c1f4:	d098      	beq.n	800c128 <_rclc_take_new_data+0x44>
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800c1fc:	e794      	b.n	800c128 <_rclc_take_new_data+0x44>
 800c1fe:	250b      	movs	r5, #11
 800c200:	4628      	mov	r0, r5
 800c202:	b01b      	add	sp, #108	@ 0x6c
 800c204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c206:	ae04      	add	r6, sp, #16
 800c208:	aa0a      	add	r2, sp, #40	@ 0x28
 800c20a:	3010      	adds	r0, #16
 800c20c:	4631      	mov	r1, r6
 800c20e:	f007 ff67 	bl	80140e0 <rcl_action_take_cancel_request>
 800c212:	4605      	mov	r5, r0
 800c214:	2800      	cmp	r0, #0
 800c216:	d1c8      	bne.n	800c1aa <_rclc_take_new_data+0xc6>
 800c218:	6860      	ldr	r0, [r4, #4]
 800c21a:	a90a      	add	r1, sp, #40	@ 0x28
 800c21c:	f008 f90e 	bl	801443c <rclc_action_find_goal_handle_by_uuid>
 800c220:	4607      	mov	r7, r0
 800c222:	2800      	cmp	r0, #0
 800c224:	f000 80bb 	beq.w	800c39e <_rclc_take_new_data+0x2ba>
 800c228:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800c22c:	2101      	movs	r1, #1
 800c22e:	f008 f88f 	bl	8014350 <rcl_action_transition_goal_state>
 800c232:	2803      	cmp	r0, #3
 800c234:	4684      	mov	ip, r0
 800c236:	f040 80a7 	bne.w	800c388 <_rclc_take_new_data+0x2a4>
 800c23a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c23c:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800c240:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c242:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c246:	e884 0003 	stmia.w	r4, {r0, r1}
 800c24a:	f887 c008 	strb.w	ip, [r7, #8]
 800c24e:	e76b      	b.n	800c128 <_rclc_take_new_data+0x44>
 800c250:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c252:	3010      	adds	r0, #16
 800c254:	f007 fd50 	bl	8013cf8 <rcl_action_take_feedback>
 800c258:	4605      	mov	r5, r0
 800c25a:	2800      	cmp	r0, #0
 800c25c:	d1a5      	bne.n	800c1aa <_rclc_take_new_data+0xc6>
 800c25e:	6860      	ldr	r0, [r4, #4]
 800c260:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c262:	f008 f8eb 	bl	801443c <rclc_action_find_goal_handle_by_uuid>
 800c266:	4603      	mov	r3, r0
 800c268:	2800      	cmp	r0, #0
 800c26a:	f000 80a3 	beq.w	800c3b4 <_rclc_take_new_data+0x2d0>
 800c26e:	2201      	movs	r2, #1
 800c270:	6860      	ldr	r0, [r4, #4]
 800c272:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800c276:	e7a6      	b.n	800c1c6 <_rclc_take_new_data+0xe2>
 800c278:	f008 f8ba 	bl	80143f0 <rclc_action_take_goal_handle>
 800c27c:	4606      	mov	r6, r0
 800c27e:	6860      	ldr	r0, [r4, #4]
 800c280:	2e00      	cmp	r6, #0
 800c282:	f43f af47 	beq.w	800c114 <_rclc_take_new_data+0x30>
 800c286:	6070      	str	r0, [r6, #4]
 800c288:	69f2      	ldr	r2, [r6, #28]
 800c28a:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800c28e:	3010      	adds	r0, #16
 800c290:	f007 fe6e 	bl	8013f70 <rcl_action_take_goal_request>
 800c294:	4605      	mov	r5, r0
 800c296:	2800      	cmp	r0, #0
 800c298:	f040 808e 	bne.w	800c3b8 <_rclc_take_new_data+0x2d4>
 800c29c:	69f7      	ldr	r7, [r6, #28]
 800c29e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c2a0:	7235      	strb	r5, [r6, #8]
 800c2a2:	f8c6 0009 	str.w	r0, [r6, #9]
 800c2a6:	f8c6 100d 	str.w	r1, [r6, #13]
 800c2aa:	6860      	ldr	r0, [r4, #4]
 800c2ac:	f8c6 2011 	str.w	r2, [r6, #17]
 800c2b0:	f8c6 3015 	str.w	r3, [r6, #21]
 800c2b4:	e72e      	b.n	800c114 <_rclc_take_new_data+0x30>
 800c2b6:	aa04      	add	r2, sp, #16
 800c2b8:	a90a      	add	r1, sp, #40	@ 0x28
 800c2ba:	3010      	adds	r0, #16
 800c2bc:	f007 fc24 	bl	8013b08 <rcl_action_take_goal_response>
 800c2c0:	4605      	mov	r5, r0
 800c2c2:	2800      	cmp	r0, #0
 800c2c4:	f47f af71 	bne.w	800c1aa <_rclc_take_new_data+0xc6>
 800c2c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c2cc:	6860      	ldr	r0, [r4, #4]
 800c2ce:	f008 f8e5 	bl	801449c <rclc_action_find_handle_by_goal_request_sequence_number>
 800c2d2:	b130      	cbz	r0, 800c2e2 <_rclc_take_new_data+0x1fe>
 800c2d4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c2d8:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c2dc:	2201      	movs	r2, #1
 800c2de:	f880 2020 	strb.w	r2, [r0, #32]
 800c2e2:	6860      	ldr	r0, [r4, #4]
 800c2e4:	e769      	b.n	800c1ba <_rclc_take_new_data+0xd6>
 800c2e6:	aa04      	add	r2, sp, #16
 800c2e8:	3010      	adds	r0, #16
 800c2ea:	a90a      	add	r1, sp, #40	@ 0x28
 800c2ec:	f007 feb8 	bl	8014060 <rcl_action_take_result_request>
 800c2f0:	4605      	mov	r5, r0
 800c2f2:	2800      	cmp	r0, #0
 800c2f4:	f47f af59 	bne.w	800c1aa <_rclc_take_new_data+0xc6>
 800c2f8:	6860      	ldr	r0, [r4, #4]
 800c2fa:	a904      	add	r1, sp, #16
 800c2fc:	f008 f89e 	bl	801443c <rclc_action_find_goal_handle_by_uuid>
 800c300:	4607      	mov	r7, r0
 800c302:	b160      	cbz	r0, 800c31e <_rclc_take_new_data+0x23a>
 800c304:	ad0a      	add	r5, sp, #40	@ 0x28
 800c306:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800c30a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c30c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c30e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c312:	f04f 0c02 	mov.w	ip, #2
 800c316:	e886 0003 	stmia.w	r6, {r0, r1}
 800c31a:	f887 c008 	strb.w	ip, [r7, #8]
 800c31e:	6860      	ldr	r0, [r4, #4]
 800c320:	2300      	movs	r3, #0
 800c322:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800c326:	e6fa      	b.n	800c11e <_rclc_take_new_data+0x3a>
 800c328:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800c32c:	a90a      	add	r1, sp, #40	@ 0x28
 800c32e:	3010      	adds	r0, #16
 800c330:	f007 fca2 	bl	8013c78 <rcl_action_take_cancel_response>
 800c334:	4605      	mov	r5, r0
 800c336:	2800      	cmp	r0, #0
 800c338:	f47f af37 	bne.w	800c1aa <_rclc_take_new_data+0xc6>
 800c33c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c340:	6860      	ldr	r0, [r4, #4]
 800c342:	f008 f8cf 	bl	80144e4 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800c346:	4606      	mov	r6, r0
 800c348:	6860      	ldr	r0, [r4, #4]
 800c34a:	2e00      	cmp	r6, #0
 800c34c:	f43f af40 	beq.w	800c1d0 <_rclc_take_new_data+0xec>
 800c350:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c352:	2701      	movs	r7, #1
 800c354:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800c356:	2b00      	cmp	r3, #0
 800c358:	f43f af3a 	beq.w	800c1d0 <_rclc_take_new_data+0xec>
 800c35c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800c35e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800c362:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c366:	f008 f869 	bl	801443c <rclc_action_find_goal_handle_by_uuid>
 800c36a:	b138      	cbz	r0, 800c37c <_rclc_take_new_data+0x298>
 800c36c:	6860      	ldr	r0, [r4, #4]
 800c36e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c370:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800c374:	3501      	adds	r5, #1
 800c376:	42ab      	cmp	r3, r5
 800c378:	d8f0      	bhi.n	800c35c <_rclc_take_new_data+0x278>
 800c37a:	e729      	b.n	800c1d0 <_rclc_take_new_data+0xec>
 800c37c:	6860      	ldr	r0, [r4, #4]
 800c37e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c380:	3501      	adds	r5, #1
 800c382:	42ab      	cmp	r3, r5
 800c384:	d8ea      	bhi.n	800c35c <_rclc_take_new_data+0x278>
 800c386:	e723      	b.n	800c1d0 <_rclc_take_new_data+0xec>
 800c388:	ab06      	add	r3, sp, #24
 800c38a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c38c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c390:	2103      	movs	r1, #3
 800c392:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c396:	6860      	ldr	r0, [r4, #4]
 800c398:	f008 f91a 	bl	80145d0 <rclc_action_server_goal_cancel_reject>
 800c39c:	e6c4      	b.n	800c128 <_rclc_take_new_data+0x44>
 800c39e:	ab06      	add	r3, sp, #24
 800c3a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c3a2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c3a6:	2102      	movs	r1, #2
 800c3a8:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c3ac:	6860      	ldr	r0, [r4, #4]
 800c3ae:	f008 f90f 	bl	80145d0 <rclc_action_server_goal_cancel_reject>
 800c3b2:	e6b9      	b.n	800c128 <_rclc_take_new_data+0x44>
 800c3b4:	6860      	ldr	r0, [r4, #4]
 800c3b6:	e706      	b.n	800c1c6 <_rclc_take_new_data+0xe2>
 800c3b8:	6860      	ldr	r0, [r4, #4]
 800c3ba:	4631      	mov	r1, r6
 800c3bc:	f008 f828 	bl	8014410 <rclc_action_remove_used_goal_handle>
 800c3c0:	f000 fd9a 	bl	800cef8 <rcutils_reset_error>
 800c3c4:	e6b0      	b.n	800c128 <_rclc_take_new_data+0x44>
 800c3c6:	2501      	movs	r5, #1
 800c3c8:	e6ae      	b.n	800c128 <_rclc_take_new_data+0x44>
 800c3ca:	bf00      	nop

0800c3cc <_rclc_execute.part.0>:
 800c3cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3ce:	7803      	ldrb	r3, [r0, #0]
 800c3d0:	b087      	sub	sp, #28
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	2b0a      	cmp	r3, #10
 800c3d6:	f200 8136 	bhi.w	800c646 <_rclc_execute.part.0+0x27a>
 800c3da:	e8df f003 	tbb	[pc, r3]
 800c3de:	435e      	.short	0x435e
 800c3e0:	06a1664f 	.word	0x06a1664f
 800c3e4:	6c1e0606 	.word	0x6c1e0606
 800c3e8:	59          	.byte	0x59
 800c3e9:	00          	.byte	0x00
 800c3ea:	2b06      	cmp	r3, #6
 800c3ec:	f000 8122 	beq.w	800c634 <_rclc_execute.part.0+0x268>
 800c3f0:	2b07      	cmp	r3, #7
 800c3f2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c3f4:	f040 8118 	bne.w	800c628 <_rclc_execute.part.0+0x25c>
 800c3f8:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800c3fc:	6880      	ldr	r0, [r0, #8]
 800c3fe:	4798      	blx	r3
 800c400:	f104 0110 	add.w	r1, r4, #16
 800c404:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800c406:	6860      	ldr	r0, [r4, #4]
 800c408:	f006 f90c 	bl	8012624 <rcl_send_response>
 800c40c:	2800      	cmp	r0, #0
 800c40e:	d033      	beq.n	800c478 <_rclc_execute.part.0+0xac>
 800c410:	9005      	str	r0, [sp, #20]
 800c412:	f000 fd71 	bl	800cef8 <rcutils_reset_error>
 800c416:	9805      	ldr	r0, [sp, #20]
 800c418:	e02e      	b.n	800c478 <_rclc_execute.part.0+0xac>
 800c41a:	6840      	ldr	r0, [r0, #4]
 800c41c:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c420:	2b00      	cmp	r3, #0
 800c422:	f000 8086 	beq.w	800c532 <_rclc_execute.part.0+0x166>
 800c426:	2600      	movs	r6, #0
 800c428:	2701      	movs	r7, #1
 800c42a:	e004      	b.n	800c436 <_rclc_execute.part.0+0x6a>
 800c42c:	f007 ffba 	bl	80143a4 <rclc_action_send_result_request>
 800c430:	b998      	cbnz	r0, 800c45a <_rclc_execute.part.0+0x8e>
 800c432:	722f      	strb	r7, [r5, #8]
 800c434:	6860      	ldr	r0, [r4, #4]
 800c436:	f008 f867 	bl	8014508 <rclc_action_find_first_handle_with_goal_response>
 800c43a:	4605      	mov	r5, r0
 800c43c:	2800      	cmp	r0, #0
 800c43e:	d077      	beq.n	800c530 <_rclc_execute.part.0+0x164>
 800c440:	6863      	ldr	r3, [r4, #4]
 800c442:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c444:	699b      	ldr	r3, [r3, #24]
 800c446:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800c44a:	f885 6020 	strb.w	r6, [r5, #32]
 800c44e:	4798      	blx	r3
 800c450:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800c454:	4628      	mov	r0, r5
 800c456:	2b00      	cmp	r3, #0
 800c458:	d1e8      	bne.n	800c42c <_rclc_execute.part.0+0x60>
 800c45a:	6860      	ldr	r0, [r4, #4]
 800c45c:	4629      	mov	r1, r5
 800c45e:	f007 ffd7 	bl	8014410 <rclc_action_remove_used_goal_handle>
 800c462:	e7e7      	b.n	800c434 <_rclc_execute.part.0+0x68>
 800c464:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800c468:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800c46c:	2d00      	cmp	r5, #0
 800c46e:	f000 80c9 	beq.w	800c604 <_rclc_execute.part.0+0x238>
 800c472:	6880      	ldr	r0, [r0, #8]
 800c474:	4798      	blx	r3
 800c476:	2000      	movs	r0, #0
 800c478:	b007      	add	sp, #28
 800c47a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c47c:	6840      	ldr	r0, [r0, #4]
 800c47e:	f006 fc01 	bl	8012c84 <rcl_timer_call>
 800c482:	f240 3321 	movw	r3, #801	@ 0x321
 800c486:	4298      	cmp	r0, r3
 800c488:	d004      	beq.n	800c494 <_rclc_execute.part.0+0xc8>
 800c48a:	2800      	cmp	r0, #0
 800c48c:	d0f4      	beq.n	800c478 <_rclc_execute.part.0+0xac>
 800c48e:	e7bf      	b.n	800c410 <_rclc_execute.part.0+0x44>
 800c490:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c492:	4798      	blx	r3
 800c494:	2000      	movs	r0, #0
 800c496:	b007      	add	sp, #28
 800c498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c49a:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800c49e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c4a0:	b925      	cbnz	r5, 800c4ac <_rclc_execute.part.0+0xe0>
 800c4a2:	4628      	mov	r0, r5
 800c4a4:	4798      	blx	r3
 800c4a6:	4628      	mov	r0, r5
 800c4a8:	e7e6      	b.n	800c478 <_rclc_execute.part.0+0xac>
 800c4aa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c4ac:	68a0      	ldr	r0, [r4, #8]
 800c4ae:	4798      	blx	r3
 800c4b0:	2000      	movs	r0, #0
 800c4b2:	b007      	add	sp, #28
 800c4b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4b6:	6840      	ldr	r0, [r0, #4]
 800c4b8:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800c4bc:	bb3b      	cbnz	r3, 800c50e <_rclc_execute.part.0+0x142>
 800c4be:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d07b      	beq.n	800c5be <_rclc_execute.part.0+0x1f2>
 800c4c6:	f640 0634 	movw	r6, #2100	@ 0x834
 800c4ca:	2701      	movs	r7, #1
 800c4cc:	e007      	b.n	800c4de <_rclc_execute.part.0+0x112>
 800c4ce:	4628      	mov	r0, r5
 800c4d0:	f008 f832 	bl	8014538 <rclc_action_server_response_goal_request>
 800c4d4:	6860      	ldr	r0, [r4, #4]
 800c4d6:	4629      	mov	r1, r5
 800c4d8:	f007 ff9a 	bl	8014410 <rclc_action_remove_used_goal_handle>
 800c4dc:	6860      	ldr	r0, [r4, #4]
 800c4de:	2100      	movs	r1, #0
 800c4e0:	f007 ffc4 	bl	801446c <rclc_action_find_first_handle_by_status>
 800c4e4:	4605      	mov	r5, r0
 800c4e6:	2800      	cmp	r0, #0
 800c4e8:	d066      	beq.n	800c5b8 <_rclc_execute.part.0+0x1ec>
 800c4ea:	6863      	ldr	r3, [r4, #4]
 800c4ec:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c4ee:	699b      	ldr	r3, [r3, #24]
 800c4f0:	4798      	blx	r3
 800c4f2:	42b0      	cmp	r0, r6
 800c4f4:	f04f 0100 	mov.w	r1, #0
 800c4f8:	d1e9      	bne.n	800c4ce <_rclc_execute.part.0+0x102>
 800c4fa:	2101      	movs	r1, #1
 800c4fc:	4628      	mov	r0, r5
 800c4fe:	f008 f81b 	bl	8014538 <rclc_action_server_response_goal_request>
 800c502:	722f      	strb	r7, [r5, #8]
 800c504:	e7ea      	b.n	800c4dc <_rclc_execute.part.0+0x110>
 800c506:	6848      	ldr	r0, [r1, #4]
 800c508:	f007 ff82 	bl	8014410 <rclc_action_remove_used_goal_handle>
 800c50c:	6860      	ldr	r0, [r4, #4]
 800c50e:	f007 ffb9 	bl	8014484 <rclc_action_find_first_terminated_handle>
 800c512:	4601      	mov	r1, r0
 800c514:	2800      	cmp	r0, #0
 800c516:	d1f6      	bne.n	800c506 <_rclc_execute.part.0+0x13a>
 800c518:	6860      	ldr	r0, [r4, #4]
 800c51a:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800c51e:	e7ce      	b.n	800c4be <_rclc_execute.part.0+0xf2>
 800c520:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c522:	6880      	ldr	r0, [r0, #8]
 800c524:	f104 0110 	add.w	r1, r4, #16
 800c528:	4798      	blx	r3
 800c52a:	2000      	movs	r0, #0
 800c52c:	b007      	add	sp, #28
 800c52e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c530:	6860      	ldr	r0, [r4, #4]
 800c532:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c536:	b18b      	cbz	r3, 800c55c <_rclc_execute.part.0+0x190>
 800c538:	68c5      	ldr	r5, [r0, #12]
 800c53a:	b32d      	cbz	r5, 800c588 <_rclc_execute.part.0+0x1bc>
 800c53c:	2600      	movs	r6, #0
 800c53e:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800c542:	b143      	cbz	r3, 800c556 <_rclc_execute.part.0+0x18a>
 800c544:	69c3      	ldr	r3, [r0, #28]
 800c546:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800c54a:	b123      	cbz	r3, 800c556 <_rclc_execute.part.0+0x18a>
 800c54c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c54e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c550:	4628      	mov	r0, r5
 800c552:	4798      	blx	r3
 800c554:	6860      	ldr	r0, [r4, #4]
 800c556:	682d      	ldr	r5, [r5, #0]
 800c558:	2d00      	cmp	r5, #0
 800c55a:	d1f0      	bne.n	800c53e <_rclc_execute.part.0+0x172>
 800c55c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c560:	b193      	cbz	r3, 800c588 <_rclc_execute.part.0+0x1bc>
 800c562:	68c5      	ldr	r5, [r0, #12]
 800c564:	b185      	cbz	r5, 800c588 <_rclc_execute.part.0+0x1bc>
 800c566:	2600      	movs	r6, #0
 800c568:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800c56c:	b14b      	cbz	r3, 800c582 <_rclc_execute.part.0+0x1b6>
 800c56e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c570:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800c574:	b12b      	cbz	r3, 800c582 <_rclc_execute.part.0+0x1b6>
 800c576:	4628      	mov	r0, r5
 800c578:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800c57c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c57e:	4798      	blx	r3
 800c580:	6860      	ldr	r0, [r4, #4]
 800c582:	682d      	ldr	r5, [r5, #0]
 800c584:	2d00      	cmp	r5, #0
 800c586:	d1ef      	bne.n	800c568 <_rclc_execute.part.0+0x19c>
 800c588:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d081      	beq.n	800c494 <_rclc_execute.part.0+0xc8>
 800c590:	2700      	movs	r7, #0
 800c592:	e00b      	b.n	800c5ac <_rclc_execute.part.0+0x1e0>
 800c594:	6863      	ldr	r3, [r4, #4]
 800c596:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c598:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c59a:	6a1e      	ldr	r6, [r3, #32]
 800c59c:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800c5a0:	47b0      	blx	r6
 800c5a2:	6860      	ldr	r0, [r4, #4]
 800c5a4:	4629      	mov	r1, r5
 800c5a6:	f007 ff33 	bl	8014410 <rclc_action_remove_used_goal_handle>
 800c5aa:	6860      	ldr	r0, [r4, #4]
 800c5ac:	f007 ffb8 	bl	8014520 <rclc_action_find_first_handle_with_result_response>
 800c5b0:	4605      	mov	r5, r0
 800c5b2:	2800      	cmp	r0, #0
 800c5b4:	d1ee      	bne.n	800c594 <_rclc_execute.part.0+0x1c8>
 800c5b6:	e76d      	b.n	800c494 <_rclc_execute.part.0+0xc8>
 800c5b8:	6860      	ldr	r0, [r4, #4]
 800c5ba:	f880 5020 	strb.w	r5, [r0, #32]
 800c5be:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	f43f af66 	beq.w	800c494 <_rclc_execute.part.0+0xc8>
 800c5c8:	68c5      	ldr	r5, [r0, #12]
 800c5ca:	b1b5      	cbz	r5, 800c5fa <_rclc_execute.part.0+0x22e>
 800c5cc:	2602      	movs	r6, #2
 800c5ce:	e001      	b.n	800c5d4 <_rclc_execute.part.0+0x208>
 800c5d0:	682d      	ldr	r5, [r5, #0]
 800c5d2:	b195      	cbz	r5, 800c5fa <_rclc_execute.part.0+0x22e>
 800c5d4:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800c5d8:	2b03      	cmp	r3, #3
 800c5da:	d1f9      	bne.n	800c5d0 <_rclc_execute.part.0+0x204>
 800c5dc:	69c3      	ldr	r3, [r0, #28]
 800c5de:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c5e0:	4628      	mov	r0, r5
 800c5e2:	4798      	blx	r3
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800c5ea:	4628      	mov	r0, r5
 800c5ec:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800c5f0:	b163      	cbz	r3, 800c60c <_rclc_execute.part.0+0x240>
 800c5f2:	f007 ffc1 	bl	8014578 <rclc_action_server_goal_cancel_accept>
 800c5f6:	6860      	ldr	r0, [r4, #4]
 800c5f8:	e7ea      	b.n	800c5d0 <_rclc_execute.part.0+0x204>
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c600:	4618      	mov	r0, r3
 800c602:	e739      	b.n	800c478 <_rclc_execute.part.0+0xac>
 800c604:	4628      	mov	r0, r5
 800c606:	4798      	blx	r3
 800c608:	4628      	mov	r0, r5
 800c60a:	e735      	b.n	800c478 <_rclc_execute.part.0+0xac>
 800c60c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800c60e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c612:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800c616:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c61a:	6860      	ldr	r0, [r4, #4]
 800c61c:	2101      	movs	r1, #1
 800c61e:	f007 ffd7 	bl	80145d0 <rclc_action_server_goal_cancel_reject>
 800c622:	722e      	strb	r6, [r5, #8]
 800c624:	6860      	ldr	r0, [r4, #4]
 800c626:	e7d3      	b.n	800c5d0 <_rclc_execute.part.0+0x204>
 800c628:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c62a:	6880      	ldr	r0, [r0, #8]
 800c62c:	4798      	blx	r3
 800c62e:	f104 0110 	add.w	r1, r4, #16
 800c632:	e6e7      	b.n	800c404 <_rclc_execute.part.0+0x38>
 800c634:	f100 0110 	add.w	r1, r0, #16
 800c638:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c63a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800c63c:	6880      	ldr	r0, [r0, #8]
 800c63e:	9105      	str	r1, [sp, #20]
 800c640:	4798      	blx	r3
 800c642:	9905      	ldr	r1, [sp, #20]
 800c644:	e6de      	b.n	800c404 <_rclc_execute.part.0+0x38>
 800c646:	2001      	movs	r0, #1
 800c648:	e716      	b.n	800c478 <_rclc_execute.part.0+0xac>
 800c64a:	bf00      	nop

0800c64c <rclc_executor_trigger_any>:
 800c64c:	2800      	cmp	r0, #0
 800c64e:	d03f      	beq.n	800c6d0 <rclc_executor_trigger_any+0x84>
 800c650:	2900      	cmp	r1, #0
 800c652:	d03e      	beq.n	800c6d2 <rclc_executor_trigger_any+0x86>
 800c654:	4603      	mov	r3, r0
 800c656:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800c65a:	2200      	movs	r2, #0
 800c65c:	2800      	cmp	r0, #0
 800c65e:	d037      	beq.n	800c6d0 <rclc_executor_trigger_any+0x84>
 800c660:	b430      	push	{r4, r5}
 800c662:	f893 c000 	ldrb.w	ip, [r3]
 800c666:	f1bc 0f08 	cmp.w	ip, #8
 800c66a:	d11e      	bne.n	800c6aa <rclc_executor_trigger_any+0x5e>
 800c66c:	685c      	ldr	r4, [r3, #4]
 800c66e:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800c670:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800c674:	d105      	bne.n	800c682 <rclc_executor_trigger_any+0x36>
 800c676:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800c67a:	b910      	cbnz	r0, 800c682 <rclc_executor_trigger_any+0x36>
 800c67c:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800c680:	b128      	cbz	r0, 800c68e <rclc_executor_trigger_any+0x42>
 800c682:	bc30      	pop	{r4, r5}
 800c684:	4770      	bx	lr
 800c686:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800c68a:	2800      	cmp	r0, #0
 800c68c:	d1f9      	bne.n	800c682 <rclc_executor_trigger_any+0x36>
 800c68e:	3201      	adds	r2, #1
 800c690:	4291      	cmp	r1, r2
 800c692:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c696:	d018      	beq.n	800c6ca <rclc_executor_trigger_any+0x7e>
 800c698:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800c69c:	2800      	cmp	r0, #0
 800c69e:	d0f0      	beq.n	800c682 <rclc_executor_trigger_any+0x36>
 800c6a0:	f893 c000 	ldrb.w	ip, [r3]
 800c6a4:	f1bc 0f08 	cmp.w	ip, #8
 800c6a8:	d0e0      	beq.n	800c66c <rclc_executor_trigger_any+0x20>
 800c6aa:	f1bc 0f09 	cmp.w	ip, #9
 800c6ae:	d1ea      	bne.n	800c686 <rclc_executor_trigger_any+0x3a>
 800c6b0:	685c      	ldr	r4, [r3, #4]
 800c6b2:	6a25      	ldr	r5, [r4, #32]
 800c6b4:	2d00      	cmp	r5, #0
 800c6b6:	d1e4      	bne.n	800c682 <rclc_executor_trigger_any+0x36>
 800c6b8:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800c6bc:	2800      	cmp	r0, #0
 800c6be:	d1e0      	bne.n	800c682 <rclc_executor_trigger_any+0x36>
 800c6c0:	3201      	adds	r2, #1
 800c6c2:	4291      	cmp	r1, r2
 800c6c4:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c6c8:	d1e6      	bne.n	800c698 <rclc_executor_trigger_any+0x4c>
 800c6ca:	2000      	movs	r0, #0
 800c6cc:	bc30      	pop	{r4, r5}
 800c6ce:	4770      	bx	lr
 800c6d0:	4770      	bx	lr
 800c6d2:	4608      	mov	r0, r1
 800c6d4:	4770      	bx	lr
 800c6d6:	bf00      	nop

0800c6d8 <rclc_executor_get_zero_initialized_executor>:
 800c6d8:	b510      	push	{r4, lr}
 800c6da:	4903      	ldr	r1, [pc, #12]	@ (800c6e8 <rclc_executor_get_zero_initialized_executor+0x10>)
 800c6dc:	4604      	mov	r4, r0
 800c6de:	2288      	movs	r2, #136	@ 0x88
 800c6e0:	f00b f92d 	bl	801793e <memcpy>
 800c6e4:	4620      	mov	r0, r4
 800c6e6:	bd10      	pop	{r4, pc}
 800c6e8:	08018a20 	.word	0x08018a20
 800c6ec:	00000000 	.word	0x00000000

0800c6f0 <rclc_executor_init>:
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	d05f      	beq.n	800c7b4 <rclc_executor_init+0xc4>
 800c6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6f8:	460c      	mov	r4, r1
 800c6fa:	b0b0      	sub	sp, #192	@ 0xc0
 800c6fc:	2900      	cmp	r1, #0
 800c6fe:	d051      	beq.n	800c7a4 <rclc_executor_init+0xb4>
 800c700:	4605      	mov	r5, r0
 800c702:	4618      	mov	r0, r3
 800c704:	4616      	mov	r6, r2
 800c706:	461f      	mov	r7, r3
 800c708:	f000 fbd0 	bl	800ceac <rcutils_allocator_is_valid>
 800c70c:	2800      	cmp	r0, #0
 800c70e:	d049      	beq.n	800c7a4 <rclc_executor_init+0xb4>
 800c710:	2e00      	cmp	r6, #0
 800c712:	d047      	beq.n	800c7a4 <rclc_executor_init+0xb4>
 800c714:	492c      	ldr	r1, [pc, #176]	@ (800c7c8 <rclc_executor_init+0xd8>)
 800c716:	2288      	movs	r2, #136	@ 0x88
 800c718:	a80e      	add	r0, sp, #56	@ 0x38
 800c71a:	f00b f910 	bl	801793e <memcpy>
 800c71e:	a90e      	add	r1, sp, #56	@ 0x38
 800c720:	2288      	movs	r2, #136	@ 0x88
 800c722:	4628      	mov	r0, r5
 800c724:	f00b f90b 	bl	801793e <memcpy>
 800c728:	602c      	str	r4, [r5, #0]
 800c72a:	4668      	mov	r0, sp
 800c72c:	60ae      	str	r6, [r5, #8]
 800c72e:	466c      	mov	r4, sp
 800c730:	f006 fc1a 	bl	8012f68 <rcl_get_zero_initialized_wait_set>
 800c734:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c736:	f105 0c14 	add.w	ip, r5, #20
 800c73a:	f8d7 8000 	ldr.w	r8, [r7]
 800c73e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c742:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c744:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c74a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c74e:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800c7c0 <rclc_executor_init+0xd0>
 800c752:	6823      	ldr	r3, [r4, #0]
 800c754:	f8cc 3000 	str.w	r3, [ip]
 800c758:	6939      	ldr	r1, [r7, #16]
 800c75a:	612f      	str	r7, [r5, #16]
 800c75c:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800c760:	01b0      	lsls	r0, r6, #6
 800c762:	47c0      	blx	r8
 800c764:	6068      	str	r0, [r5, #4]
 800c766:	b338      	cbz	r0, 800c7b8 <rclc_executor_init+0xc8>
 800c768:	2400      	movs	r4, #0
 800c76a:	e000      	b.n	800c76e <rclc_executor_init+0x7e>
 800c76c:	6868      	ldr	r0, [r5, #4]
 800c76e:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800c772:	4631      	mov	r1, r6
 800c774:	3401      	adds	r4, #1
 800c776:	f000 fa6b 	bl	800cc50 <rclc_executor_handle_init>
 800c77a:	42a6      	cmp	r6, r4
 800c77c:	d1f6      	bne.n	800c76c <rclc_executor_init+0x7c>
 800c77e:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800c782:	f000 fa59 	bl	800cc38 <rclc_executor_handle_counters_zero_init>
 800c786:	4a11      	ldr	r2, [pc, #68]	@ (800c7cc <rclc_executor_init+0xdc>)
 800c788:	686b      	ldr	r3, [r5, #4]
 800c78a:	2000      	movs	r0, #0
 800c78c:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800c790:	b163      	cbz	r3, 800c7ac <rclc_executor_init+0xbc>
 800c792:	692b      	ldr	r3, [r5, #16]
 800c794:	b153      	cbz	r3, 800c7ac <rclc_executor_init+0xbc>
 800c796:	68ab      	ldr	r3, [r5, #8]
 800c798:	b143      	cbz	r3, 800c7ac <rclc_executor_init+0xbc>
 800c79a:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800c79e:	b030      	add	sp, #192	@ 0xc0
 800c7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7a4:	200b      	movs	r0, #11
 800c7a6:	b030      	add	sp, #192	@ 0xc0
 800c7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	b030      	add	sp, #192	@ 0xc0
 800c7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7b4:	200b      	movs	r0, #11
 800c7b6:	4770      	bx	lr
 800c7b8:	200a      	movs	r0, #10
 800c7ba:	e7f4      	b.n	800c7a6 <rclc_executor_init+0xb6>
 800c7bc:	f3af 8000 	nop.w
 800c7c0:	3b9aca00 	.word	0x3b9aca00
 800c7c4:	00000000 	.word	0x00000000
 800c7c8:	08018a20 	.word	0x08018a20
 800c7cc:	0800c64d 	.word	0x0800c64d

0800c7d0 <rclc_executor_add_timer>:
 800c7d0:	b300      	cbz	r0, 800c814 <rclc_executor_add_timer+0x44>
 800c7d2:	b1f9      	cbz	r1, 800c814 <rclc_executor_add_timer+0x44>
 800c7d4:	b538      	push	{r3, r4, r5, lr}
 800c7d6:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	4604      	mov	r4, r0
 800c7de:	d301      	bcc.n	800c7e4 <rclc_executor_add_timer+0x14>
 800c7e0:	2001      	movs	r0, #1
 800c7e2:	bd38      	pop	{r3, r4, r5, pc}
 800c7e4:	6840      	ldr	r0, [r0, #4]
 800c7e6:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800c7ea:	019d      	lsls	r5, r3, #6
 800c7ec:	6051      	str	r1, [r2, #4]
 800c7ee:	2102      	movs	r1, #2
 800c7f0:	5341      	strh	r1, [r0, r5]
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	2000      	movs	r0, #0
 800c7f6:	2101      	movs	r1, #1
 800c7f8:	f104 0514 	add.w	r5, r4, #20
 800c7fc:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800c7fe:	8711      	strh	r1, [r2, #56]	@ 0x38
 800c800:	4628      	mov	r0, r5
 800c802:	60e3      	str	r3, [r4, #12]
 800c804:	f006 fbc4 	bl	8012f90 <rcl_wait_set_is_valid>
 800c808:	b930      	cbnz	r0, 800c818 <rclc_executor_add_timer+0x48>
 800c80a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800c80c:	3301      	adds	r3, #1
 800c80e:	2000      	movs	r0, #0
 800c810:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800c812:	bd38      	pop	{r3, r4, r5, pc}
 800c814:	200b      	movs	r0, #11
 800c816:	4770      	bx	lr
 800c818:	4628      	mov	r0, r5
 800c81a:	f006 fbbf 	bl	8012f9c <rcl_wait_set_fini>
 800c81e:	2800      	cmp	r0, #0
 800c820:	d0f3      	beq.n	800c80a <rclc_executor_add_timer+0x3a>
 800c822:	bd38      	pop	{r3, r4, r5, pc}

0800c824 <rclc_executor_prepare>:
 800c824:	2800      	cmp	r0, #0
 800c826:	d044      	beq.n	800c8b2 <rclc_executor_prepare+0x8e>
 800c828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c82a:	f100 0514 	add.w	r5, r0, #20
 800c82e:	b09b      	sub	sp, #108	@ 0x6c
 800c830:	4604      	mov	r4, r0
 800c832:	4628      	mov	r0, r5
 800c834:	f006 fbac 	bl	8012f90 <rcl_wait_set_is_valid>
 800c838:	b110      	cbz	r0, 800c840 <rclc_executor_prepare+0x1c>
 800c83a:	2000      	movs	r0, #0
 800c83c:	b01b      	add	sp, #108	@ 0x6c
 800c83e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c840:	4628      	mov	r0, r5
 800c842:	f006 fbab 	bl	8012f9c <rcl_wait_set_fini>
 800c846:	2800      	cmp	r0, #0
 800c848:	d130      	bne.n	800c8ac <rclc_executor_prepare+0x88>
 800c84a:	a80c      	add	r0, sp, #48	@ 0x30
 800c84c:	f006 fb8c 	bl	8012f68 <rcl_get_zero_initialized_wait_set>
 800c850:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800c854:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c858:	46ae      	mov	lr, r5
 800c85a:	6927      	ldr	r7, [r4, #16]
 800c85c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c860:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c864:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c868:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c86c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c870:	f8dc 3000 	ldr.w	r3, [ip]
 800c874:	f8ce 3000 	str.w	r3, [lr]
 800c878:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c87a:	ae04      	add	r6, sp, #16
 800c87c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	6822      	ldr	r2, [r4, #0]
 800c882:	6033      	str	r3, [r6, #0]
 800c884:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c886:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800c888:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800c88c:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800c890:	e9cd 2100 	strd	r2, r1, [sp]
 800c894:	4628      	mov	r0, r5
 800c896:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800c898:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c89a:	f006 fe7d 	bl	8013598 <rcl_wait_set_init>
 800c89e:	2800      	cmp	r0, #0
 800c8a0:	d0cc      	beq.n	800c83c <rclc_executor_prepare+0x18>
 800c8a2:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c8a4:	f000 fb28 	bl	800cef8 <rcutils_reset_error>
 800c8a8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c8aa:	e7c7      	b.n	800c83c <rclc_executor_prepare+0x18>
 800c8ac:	f000 fb24 	bl	800cef8 <rcutils_reset_error>
 800c8b0:	e7cb      	b.n	800c84a <rclc_executor_prepare+0x26>
 800c8b2:	200b      	movs	r0, #11
 800c8b4:	4770      	bx	lr
 800c8b6:	bf00      	nop

0800c8b8 <rclc_executor_spin_some.part.0>:
 800c8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8bc:	f100 0614 	add.w	r6, r0, #20
 800c8c0:	b083      	sub	sp, #12
 800c8c2:	4691      	mov	r9, r2
 800c8c4:	4698      	mov	r8, r3
 800c8c6:	4605      	mov	r5, r0
 800c8c8:	f7ff ffac 	bl	800c824 <rclc_executor_prepare>
 800c8cc:	4630      	mov	r0, r6
 800c8ce:	f006 fc31 	bl	8013134 <rcl_wait_set_clear>
 800c8d2:	4607      	mov	r7, r0
 800c8d4:	2800      	cmp	r0, #0
 800c8d6:	f040 80ed 	bne.w	800cab4 <rclc_executor_spin_some.part.0+0x1fc>
 800c8da:	68ab      	ldr	r3, [r5, #8]
 800c8dc:	4604      	mov	r4, r0
 800c8de:	b303      	cbz	r3, 800c922 <rclc_executor_spin_some.part.0+0x6a>
 800c8e0:	6869      	ldr	r1, [r5, #4]
 800c8e2:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800c8e6:	01a2      	lsls	r2, r4, #6
 800c8e8:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800c8ec:	b1cb      	cbz	r3, 800c922 <rclc_executor_spin_some.part.0+0x6a>
 800c8ee:	5c8b      	ldrb	r3, [r1, r2]
 800c8f0:	2b0a      	cmp	r3, #10
 800c8f2:	f200 80d8 	bhi.w	800caa6 <rclc_executor_spin_some.part.0+0x1ee>
 800c8f6:	e8df f003 	tbb	[pc, r3]
 800c8fa:	9c9c      	.short	0x9c9c
 800c8fc:	068c8ca7 	.word	0x068c8ca7
 800c900:	bdc90606 	.word	0xbdc90606
 800c904:	b2          	.byte	0xb2
 800c905:	00          	.byte	0x00
 800c906:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c90a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c90e:	4630      	mov	r0, r6
 800c910:	f006 ff58 	bl	80137c4 <rcl_wait_set_add_service>
 800c914:	2800      	cmp	r0, #0
 800c916:	f040 8086 	bne.w	800ca26 <rclc_executor_spin_some.part.0+0x16e>
 800c91a:	68ab      	ldr	r3, [r5, #8]
 800c91c:	3401      	adds	r4, #1
 800c91e:	429c      	cmp	r4, r3
 800c920:	d3de      	bcc.n	800c8e0 <rclc_executor_spin_some.part.0+0x28>
 800c922:	4643      	mov	r3, r8
 800c924:	464a      	mov	r2, r9
 800c926:	4630      	mov	r0, r6
 800c928:	f006 ff7a 	bl	8013820 <rcl_wait>
 800c92c:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800c930:	2b00      	cmp	r3, #0
 800c932:	f000 80c7 	beq.w	800cac4 <rclc_executor_spin_some.part.0+0x20c>
 800c936:	2b01      	cmp	r3, #1
 800c938:	f040 80b5 	bne.w	800caa6 <rclc_executor_spin_some.part.0+0x1ee>
 800c93c:	68ab      	ldr	r3, [r5, #8]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	f000 8159 	beq.w	800cbf6 <rclc_executor_spin_some.part.0+0x33e>
 800c944:	2400      	movs	r4, #0
 800c946:	46a0      	mov	r8, r4
 800c948:	f240 1991 	movw	r9, #401	@ 0x191
 800c94c:	e00a      	b.n	800c964 <rclc_executor_spin_some.part.0+0xac>
 800c94e:	f7ff fb7b 	bl	800c048 <_rclc_check_for_new_data>
 800c952:	4604      	mov	r4, r0
 800c954:	b110      	cbz	r0, 800c95c <rclc_executor_spin_some.part.0+0xa4>
 800c956:	4548      	cmp	r0, r9
 800c958:	f040 80b2 	bne.w	800cac0 <rclc_executor_spin_some.part.0+0x208>
 800c95c:	68ab      	ldr	r3, [r5, #8]
 800c95e:	4598      	cmp	r8, r3
 800c960:	f080 8126 	bcs.w	800cbb0 <rclc_executor_spin_some.part.0+0x2f8>
 800c964:	686a      	ldr	r2, [r5, #4]
 800c966:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800c96a:	4631      	mov	r1, r6
 800c96c:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800c970:	f108 0801 	add.w	r8, r8, #1
 800c974:	f1bc 0f00 	cmp.w	ip, #0
 800c978:	d1e9      	bne.n	800c94e <rclc_executor_spin_some.part.0+0x96>
 800c97a:	4619      	mov	r1, r3
 800c97c:	4610      	mov	r0, r2
 800c97e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800c982:	4798      	blx	r3
 800c984:	2800      	cmp	r0, #0
 800c986:	f000 809b 	beq.w	800cac0 <rclc_executor_spin_some.part.0+0x208>
 800c98a:	68ab      	ldr	r3, [r5, #8]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	f000 8097 	beq.w	800cac0 <rclc_executor_spin_some.part.0+0x208>
 800c992:	f04f 0800 	mov.w	r8, #0
 800c996:	f240 1991 	movw	r9, #401	@ 0x191
 800c99a:	e009      	b.n	800c9b0 <rclc_executor_spin_some.part.0+0xf8>
 800c99c:	f7ff fba2 	bl	800c0e4 <_rclc_take_new_data>
 800c9a0:	4604      	mov	r4, r0
 800c9a2:	b110      	cbz	r0, 800c9aa <rclc_executor_spin_some.part.0+0xf2>
 800c9a4:	4548      	cmp	r0, r9
 800c9a6:	f040 808b 	bne.w	800cac0 <rclc_executor_spin_some.part.0+0x208>
 800c9aa:	68ab      	ldr	r3, [r5, #8]
 800c9ac:	4598      	cmp	r8, r3
 800c9ae:	d209      	bcs.n	800c9c4 <rclc_executor_spin_some.part.0+0x10c>
 800c9b0:	6868      	ldr	r0, [r5, #4]
 800c9b2:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800c9b6:	4631      	mov	r1, r6
 800c9b8:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800c9bc:	f108 0801 	add.w	r8, r8, #1
 800c9c0:	2a00      	cmp	r2, #0
 800c9c2:	d1eb      	bne.n	800c99c <rclc_executor_spin_some.part.0+0xe4>
 800c9c4:	2600      	movs	r6, #0
 800c9c6:	b97b      	cbnz	r3, 800c9e8 <rclc_executor_spin_some.part.0+0x130>
 800c9c8:	e07a      	b.n	800cac0 <rclc_executor_spin_some.part.0+0x208>
 800c9ca:	f812 200c 	ldrb.w	r2, [r2, ip]
 800c9ce:	2a08      	cmp	r2, #8
 800c9d0:	f000 80fd 	beq.w	800cbce <rclc_executor_spin_some.part.0+0x316>
 800c9d4:	2a09      	cmp	r2, #9
 800c9d6:	f000 80ef 	beq.w	800cbb8 <rclc_executor_spin_some.part.0+0x300>
 800c9da:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800c9de:	b98a      	cbnz	r2, 800ca04 <rclc_executor_spin_some.part.0+0x14c>
 800c9e0:	3601      	adds	r6, #1
 800c9e2:	429e      	cmp	r6, r3
 800c9e4:	d262      	bcs.n	800caac <rclc_executor_spin_some.part.0+0x1f4>
 800c9e6:	2400      	movs	r4, #0
 800c9e8:	686a      	ldr	r2, [r5, #4]
 800c9ea:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800c9ee:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800c9f2:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800c9f6:	2900      	cmp	r1, #0
 800c9f8:	d062      	beq.n	800cac0 <rclc_executor_spin_some.part.0+0x208>
 800c9fa:	7841      	ldrb	r1, [r0, #1]
 800c9fc:	2900      	cmp	r1, #0
 800c9fe:	d0e4      	beq.n	800c9ca <rclc_executor_spin_some.part.0+0x112>
 800ca00:	2901      	cmp	r1, #1
 800ca02:	d1ed      	bne.n	800c9e0 <rclc_executor_spin_some.part.0+0x128>
 800ca04:	f7ff fce2 	bl	800c3cc <_rclc_execute.part.0>
 800ca08:	2800      	cmp	r0, #0
 800ca0a:	f040 80b6 	bne.w	800cb7a <rclc_executor_spin_some.part.0+0x2c2>
 800ca0e:	68ab      	ldr	r3, [r5, #8]
 800ca10:	e7e6      	b.n	800c9e0 <rclc_executor_spin_some.part.0+0x128>
 800ca12:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ca16:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ca1a:	4630      	mov	r0, r6
 800ca1c:	f006 fea6 	bl	801376c <rcl_wait_set_add_client>
 800ca20:	2800      	cmp	r0, #0
 800ca22:	f43f af7a 	beq.w	800c91a <rclc_executor_spin_some.part.0+0x62>
 800ca26:	9001      	str	r0, [sp, #4]
 800ca28:	f000 fa66 	bl	800cef8 <rcutils_reset_error>
 800ca2c:	9801      	ldr	r0, [sp, #4]
 800ca2e:	4607      	mov	r7, r0
 800ca30:	e03c      	b.n	800caac <rclc_executor_spin_some.part.0+0x1f4>
 800ca32:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ca36:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ca3a:	4630      	mov	r0, r6
 800ca3c:	f006 fb4e 	bl	80130dc <rcl_wait_set_add_subscription>
 800ca40:	2800      	cmp	r0, #0
 800ca42:	f43f af6a 	beq.w	800c91a <rclc_executor_spin_some.part.0+0x62>
 800ca46:	e7ee      	b.n	800ca26 <rclc_executor_spin_some.part.0+0x16e>
 800ca48:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ca4c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ca50:	4630      	mov	r0, r6
 800ca52:	f006 fe5b 	bl	801370c <rcl_wait_set_add_timer>
 800ca56:	2800      	cmp	r0, #0
 800ca58:	f43f af5f 	beq.w	800c91a <rclc_executor_spin_some.part.0+0x62>
 800ca5c:	e7e3      	b.n	800ca26 <rclc_executor_spin_some.part.0+0x16e>
 800ca5e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ca62:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ca66:	4630      	mov	r0, r6
 800ca68:	f006 fe24 	bl	80136b4 <rcl_wait_set_add_guard_condition>
 800ca6c:	2800      	cmp	r0, #0
 800ca6e:	f43f af54 	beq.w	800c91a <rclc_executor_spin_some.part.0+0x62>
 800ca72:	e7d8      	b.n	800ca26 <rclc_executor_spin_some.part.0+0x16e>
 800ca74:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ca78:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ca7c:	3110      	adds	r1, #16
 800ca7e:	4630      	mov	r0, r6
 800ca80:	f007 fba6 	bl	80141d0 <rcl_action_wait_set_add_action_server>
 800ca84:	2800      	cmp	r0, #0
 800ca86:	f43f af48 	beq.w	800c91a <rclc_executor_spin_some.part.0+0x62>
 800ca8a:	e7cc      	b.n	800ca26 <rclc_executor_spin_some.part.0+0x16e>
 800ca8c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ca90:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ca94:	3110      	adds	r1, #16
 800ca96:	2300      	movs	r3, #0
 800ca98:	4630      	mov	r0, r6
 800ca9a:	f007 f971 	bl	8013d80 <rcl_action_wait_set_add_action_client>
 800ca9e:	2800      	cmp	r0, #0
 800caa0:	f43f af3b 	beq.w	800c91a <rclc_executor_spin_some.part.0+0x62>
 800caa4:	e7bf      	b.n	800ca26 <rclc_executor_spin_some.part.0+0x16e>
 800caa6:	f000 fa27 	bl	800cef8 <rcutils_reset_error>
 800caaa:	2701      	movs	r7, #1
 800caac:	4638      	mov	r0, r7
 800caae:	b003      	add	sp, #12
 800cab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cab4:	f000 fa20 	bl	800cef8 <rcutils_reset_error>
 800cab8:	4638      	mov	r0, r7
 800caba:	b003      	add	sp, #12
 800cabc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cac0:	4627      	mov	r7, r4
 800cac2:	e7f3      	b.n	800caac <rclc_executor_spin_some.part.0+0x1f4>
 800cac4:	68ab      	ldr	r3, [r5, #8]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	f000 8092 	beq.w	800cbf0 <rclc_executor_spin_some.part.0+0x338>
 800cacc:	2400      	movs	r4, #0
 800cace:	46a0      	mov	r8, r4
 800cad0:	f240 1991 	movw	r9, #401	@ 0x191
 800cad4:	e008      	b.n	800cae8 <rclc_executor_spin_some.part.0+0x230>
 800cad6:	f7ff fab7 	bl	800c048 <_rclc_check_for_new_data>
 800cada:	4604      	mov	r4, r0
 800cadc:	b108      	cbz	r0, 800cae2 <rclc_executor_spin_some.part.0+0x22a>
 800cade:	4548      	cmp	r0, r9
 800cae0:	d1ee      	bne.n	800cac0 <rclc_executor_spin_some.part.0+0x208>
 800cae2:	68ab      	ldr	r3, [r5, #8]
 800cae4:	4598      	cmp	r8, r3
 800cae6:	d265      	bcs.n	800cbb4 <rclc_executor_spin_some.part.0+0x2fc>
 800cae8:	686a      	ldr	r2, [r5, #4]
 800caea:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800caee:	4631      	mov	r1, r6
 800caf0:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800caf4:	f108 0801 	add.w	r8, r8, #1
 800caf8:	f1bc 0f00 	cmp.w	ip, #0
 800cafc:	d1eb      	bne.n	800cad6 <rclc_executor_spin_some.part.0+0x21e>
 800cafe:	4619      	mov	r1, r3
 800cb00:	4610      	mov	r0, r2
 800cb02:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800cb06:	4798      	blx	r3
 800cb08:	2800      	cmp	r0, #0
 800cb0a:	d0d9      	beq.n	800cac0 <rclc_executor_spin_some.part.0+0x208>
 800cb0c:	68ab      	ldr	r3, [r5, #8]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d0d6      	beq.n	800cac0 <rclc_executor_spin_some.part.0+0x208>
 800cb12:	f04f 0800 	mov.w	r8, #0
 800cb16:	f240 1991 	movw	r9, #401	@ 0x191
 800cb1a:	f240 2a59 	movw	sl, #601	@ 0x259
 800cb1e:	e00e      	b.n	800cb3e <rclc_executor_spin_some.part.0+0x286>
 800cb20:	f813 300b 	ldrb.w	r3, [r3, fp]
 800cb24:	2b08      	cmp	r3, #8
 800cb26:	d033      	beq.n	800cb90 <rclc_executor_spin_some.part.0+0x2d8>
 800cb28:	2b09      	cmp	r3, #9
 800cb2a:	d028      	beq.n	800cb7e <rclc_executor_spin_some.part.0+0x2c6>
 800cb2c:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800cb30:	b9fb      	cbnz	r3, 800cb72 <rclc_executor_spin_some.part.0+0x2ba>
 800cb32:	68ab      	ldr	r3, [r5, #8]
 800cb34:	f108 0801 	add.w	r8, r8, #1
 800cb38:	4598      	cmp	r8, r3
 800cb3a:	d2b7      	bcs.n	800caac <rclc_executor_spin_some.part.0+0x1f4>
 800cb3c:	2400      	movs	r4, #0
 800cb3e:	6868      	ldr	r0, [r5, #4]
 800cb40:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800cb44:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800cb48:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d0b7      	beq.n	800cac0 <rclc_executor_spin_some.part.0+0x208>
 800cb50:	4631      	mov	r1, r6
 800cb52:	f7ff fac7 	bl	800c0e4 <_rclc_take_new_data>
 800cb56:	b118      	cbz	r0, 800cb60 <rclc_executor_spin_some.part.0+0x2a8>
 800cb58:	4548      	cmp	r0, r9
 800cb5a:	d001      	beq.n	800cb60 <rclc_executor_spin_some.part.0+0x2a8>
 800cb5c:	4550      	cmp	r0, sl
 800cb5e:	d10c      	bne.n	800cb7a <rclc_executor_spin_some.part.0+0x2c2>
 800cb60:	686b      	ldr	r3, [r5, #4]
 800cb62:	eb13 000b 	adds.w	r0, r3, fp
 800cb66:	d021      	beq.n	800cbac <rclc_executor_spin_some.part.0+0x2f4>
 800cb68:	7842      	ldrb	r2, [r0, #1]
 800cb6a:	2a00      	cmp	r2, #0
 800cb6c:	d0d8      	beq.n	800cb20 <rclc_executor_spin_some.part.0+0x268>
 800cb6e:	2a01      	cmp	r2, #1
 800cb70:	d1df      	bne.n	800cb32 <rclc_executor_spin_some.part.0+0x27a>
 800cb72:	f7ff fc2b 	bl	800c3cc <_rclc_execute.part.0>
 800cb76:	2800      	cmp	r0, #0
 800cb78:	d0db      	beq.n	800cb32 <rclc_executor_spin_some.part.0+0x27a>
 800cb7a:	4607      	mov	r7, r0
 800cb7c:	e796      	b.n	800caac <rclc_executor_spin_some.part.0+0x1f4>
 800cb7e:	6843      	ldr	r3, [r0, #4]
 800cb80:	6a1a      	ldr	r2, [r3, #32]
 800cb82:	2a00      	cmp	r2, #0
 800cb84:	d1f5      	bne.n	800cb72 <rclc_executor_spin_some.part.0+0x2ba>
 800cb86:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d0d1      	beq.n	800cb32 <rclc_executor_spin_some.part.0+0x27a>
 800cb8e:	e7f0      	b.n	800cb72 <rclc_executor_spin_some.part.0+0x2ba>
 800cb90:	6843      	ldr	r3, [r0, #4]
 800cb92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cb94:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800cb98:	d1eb      	bne.n	800cb72 <rclc_executor_spin_some.part.0+0x2ba>
 800cb9a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800cb9e:	2a00      	cmp	r2, #0
 800cba0:	d1e7      	bne.n	800cb72 <rclc_executor_spin_some.part.0+0x2ba>
 800cba2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d0c3      	beq.n	800cb32 <rclc_executor_spin_some.part.0+0x27a>
 800cbaa:	e7e2      	b.n	800cb72 <rclc_executor_spin_some.part.0+0x2ba>
 800cbac:	270b      	movs	r7, #11
 800cbae:	e77d      	b.n	800caac <rclc_executor_spin_some.part.0+0x1f4>
 800cbb0:	686a      	ldr	r2, [r5, #4]
 800cbb2:	e6e2      	b.n	800c97a <rclc_executor_spin_some.part.0+0xc2>
 800cbb4:	686a      	ldr	r2, [r5, #4]
 800cbb6:	e7a2      	b.n	800cafe <rclc_executor_spin_some.part.0+0x246>
 800cbb8:	6842      	ldr	r2, [r0, #4]
 800cbba:	6a11      	ldr	r1, [r2, #32]
 800cbbc:	2900      	cmp	r1, #0
 800cbbe:	f47f af21 	bne.w	800ca04 <rclc_executor_spin_some.part.0+0x14c>
 800cbc2:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800cbc6:	2a00      	cmp	r2, #0
 800cbc8:	f43f af0a 	beq.w	800c9e0 <rclc_executor_spin_some.part.0+0x128>
 800cbcc:	e71a      	b.n	800ca04 <rclc_executor_spin_some.part.0+0x14c>
 800cbce:	6842      	ldr	r2, [r0, #4]
 800cbd0:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800cbd2:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800cbd6:	f47f af15 	bne.w	800ca04 <rclc_executor_spin_some.part.0+0x14c>
 800cbda:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800cbde:	2900      	cmp	r1, #0
 800cbe0:	f47f af10 	bne.w	800ca04 <rclc_executor_spin_some.part.0+0x14c>
 800cbe4:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800cbe8:	2a00      	cmp	r2, #0
 800cbea:	f43f aef9 	beq.w	800c9e0 <rclc_executor_spin_some.part.0+0x128>
 800cbee:	e709      	b.n	800ca04 <rclc_executor_spin_some.part.0+0x14c>
 800cbf0:	686a      	ldr	r2, [r5, #4]
 800cbf2:	461c      	mov	r4, r3
 800cbf4:	e783      	b.n	800cafe <rclc_executor_spin_some.part.0+0x246>
 800cbf6:	686a      	ldr	r2, [r5, #4]
 800cbf8:	461c      	mov	r4, r3
 800cbfa:	e6be      	b.n	800c97a <rclc_executor_spin_some.part.0+0xc2>

0800cbfc <rclc_executor_spin>:
 800cbfc:	b1d0      	cbz	r0, 800cc34 <rclc_executor_spin+0x38>
 800cbfe:	b510      	push	{r4, lr}
 800cc00:	4604      	mov	r4, r0
 800cc02:	b082      	sub	sp, #8
 800cc04:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800cc08:	6820      	ldr	r0, [r4, #0]
 800cc0a:	e9cd 2300 	strd	r2, r3, [sp]
 800cc0e:	f004 ffef 	bl	8011bf0 <rcl_context_is_valid>
 800cc12:	4601      	mov	r1, r0
 800cc14:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc18:	4620      	mov	r0, r4
 800cc1a:	b131      	cbz	r1, 800cc2a <rclc_executor_spin+0x2e>
 800cc1c:	f7ff fe4c 	bl	800c8b8 <rclc_executor_spin_some.part.0>
 800cc20:	f030 0302 	bics.w	r3, r0, #2
 800cc24:	d0ee      	beq.n	800cc04 <rclc_executor_spin+0x8>
 800cc26:	b002      	add	sp, #8
 800cc28:	bd10      	pop	{r4, pc}
 800cc2a:	f000 f965 	bl	800cef8 <rcutils_reset_error>
 800cc2e:	2001      	movs	r0, #1
 800cc30:	b002      	add	sp, #8
 800cc32:	bd10      	pop	{r4, pc}
 800cc34:	200b      	movs	r0, #11
 800cc36:	4770      	bx	lr

0800cc38 <rclc_executor_handle_counters_zero_init>:
 800cc38:	b130      	cbz	r0, 800cc48 <rclc_executor_handle_counters_zero_init+0x10>
 800cc3a:	b508      	push	{r3, lr}
 800cc3c:	2220      	movs	r2, #32
 800cc3e:	2100      	movs	r1, #0
 800cc40:	f00a fdb4 	bl	80177ac <memset>
 800cc44:	2000      	movs	r0, #0
 800cc46:	bd08      	pop	{r3, pc}
 800cc48:	200b      	movs	r0, #11
 800cc4a:	4770      	bx	lr
 800cc4c:	0000      	movs	r0, r0
	...

0800cc50 <rclc_executor_handle_init>:
 800cc50:	b168      	cbz	r0, 800cc6e <rclc_executor_handle_init+0x1e>
 800cc52:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800cc78 <rclc_executor_handle_init+0x28>
 800cc56:	2300      	movs	r3, #0
 800cc58:	220b      	movs	r2, #11
 800cc5a:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800cc5e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800cc62:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800cc66:	8002      	strh	r2, [r0, #0]
 800cc68:	8703      	strh	r3, [r0, #56]	@ 0x38
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	4770      	bx	lr
 800cc6e:	200b      	movs	r0, #11
 800cc70:	4770      	bx	lr
 800cc72:	bf00      	nop
 800cc74:	f3af 8000 	nop.w
	...

0800cc80 <rclc_support_init_with_options>:
 800cc80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc84:	b083      	sub	sp, #12
 800cc86:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cc88:	b340      	cbz	r0, 800ccdc <rclc_support_init_with_options+0x5c>
 800cc8a:	461d      	mov	r5, r3
 800cc8c:	b333      	cbz	r3, 800ccdc <rclc_support_init_with_options+0x5c>
 800cc8e:	b32e      	cbz	r6, 800ccdc <rclc_support_init_with_options+0x5c>
 800cc90:	46e9      	mov	r9, sp
 800cc92:	4604      	mov	r4, r0
 800cc94:	4648      	mov	r0, r9
 800cc96:	460f      	mov	r7, r1
 800cc98:	4690      	mov	r8, r2
 800cc9a:	f004 ff9f 	bl	8011bdc <rcl_get_zero_initialized_context>
 800cc9e:	e899 0003 	ldmia.w	r9, {r0, r1}
 800cca2:	462a      	mov	r2, r5
 800cca4:	e884 0003 	stmia.w	r4, {r0, r1}
 800cca8:	4623      	mov	r3, r4
 800ccaa:	4641      	mov	r1, r8
 800ccac:	4638      	mov	r0, r7
 800ccae:	f005 f805 	bl	8011cbc <rcl_init>
 800ccb2:	4605      	mov	r5, r0
 800ccb4:	b960      	cbnz	r0, 800ccd0 <rclc_support_init_with_options+0x50>
 800ccb6:	60a6      	str	r6, [r4, #8]
 800ccb8:	4632      	mov	r2, r6
 800ccba:	f104 010c 	add.w	r1, r4, #12
 800ccbe:	2003      	movs	r0, #3
 800ccc0:	f005 fd52 	bl	8012768 <rcl_clock_init>
 800ccc4:	4605      	mov	r5, r0
 800ccc6:	b918      	cbnz	r0, 800ccd0 <rclc_support_init_with_options+0x50>
 800ccc8:	4628      	mov	r0, r5
 800ccca:	b003      	add	sp, #12
 800cccc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccd0:	f000 f912 	bl	800cef8 <rcutils_reset_error>
 800ccd4:	4628      	mov	r0, r5
 800ccd6:	b003      	add	sp, #12
 800ccd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccdc:	250b      	movs	r5, #11
 800ccde:	4628      	mov	r0, r5
 800cce0:	b003      	add	sp, #12
 800cce2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cce6:	bf00      	nop

0800cce8 <rclc_node_init_default>:
 800cce8:	b3b8      	cbz	r0, 800cd5a <rclc_node_init_default+0x72>
 800ccea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ccee:	460d      	mov	r5, r1
 800ccf0:	b0a1      	sub	sp, #132	@ 0x84
 800ccf2:	b329      	cbz	r1, 800cd40 <rclc_node_init_default+0x58>
 800ccf4:	4616      	mov	r6, r2
 800ccf6:	b31a      	cbz	r2, 800cd40 <rclc_node_init_default+0x58>
 800ccf8:	461f      	mov	r7, r3
 800ccfa:	b30b      	cbz	r3, 800cd40 <rclc_node_init_default+0x58>
 800ccfc:	f10d 0810 	add.w	r8, sp, #16
 800cd00:	4604      	mov	r4, r0
 800cd02:	4640      	mov	r0, r8
 800cd04:	f005 f900 	bl	8011f08 <rcl_get_zero_initialized_node>
 800cd08:	e898 0003 	ldmia.w	r8, {r0, r1}
 800cd0c:	f10d 0918 	add.w	r9, sp, #24
 800cd10:	e884 0003 	stmia.w	r4, {r0, r1}
 800cd14:	4648      	mov	r0, r9
 800cd16:	f005 fa6f 	bl	80121f8 <rcl_node_get_default_options>
 800cd1a:	4640      	mov	r0, r8
 800cd1c:	f005 f8f4 	bl	8011f08 <rcl_get_zero_initialized_node>
 800cd20:	f8cd 9000 	str.w	r9, [sp]
 800cd24:	e898 0003 	ldmia.w	r8, {r0, r1}
 800cd28:	463b      	mov	r3, r7
 800cd2a:	e884 0003 	stmia.w	r4, {r0, r1}
 800cd2e:	4632      	mov	r2, r6
 800cd30:	4629      	mov	r1, r5
 800cd32:	4620      	mov	r0, r4
 800cd34:	f005 f8f2 	bl	8011f1c <rcl_node_init>
 800cd38:	b930      	cbnz	r0, 800cd48 <rclc_node_init_default+0x60>
 800cd3a:	b021      	add	sp, #132	@ 0x84
 800cd3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd40:	200b      	movs	r0, #11
 800cd42:	b021      	add	sp, #132	@ 0x84
 800cd44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd48:	9003      	str	r0, [sp, #12]
 800cd4a:	f000 f8d5 	bl	800cef8 <rcutils_reset_error>
 800cd4e:	f000 f8d3 	bl	800cef8 <rcutils_reset_error>
 800cd52:	9803      	ldr	r0, [sp, #12]
 800cd54:	b021      	add	sp, #132	@ 0x84
 800cd56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd5a:	200b      	movs	r0, #11
 800cd5c:	4770      	bx	lr
 800cd5e:	bf00      	nop

0800cd60 <rclc_publisher_init_best_effort>:
 800cd60:	b368      	cbz	r0, 800cdbe <rclc_publisher_init_best_effort+0x5e>
 800cd62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd66:	460d      	mov	r5, r1
 800cd68:	b0a0      	sub	sp, #128	@ 0x80
 800cd6a:	b321      	cbz	r1, 800cdb6 <rclc_publisher_init_best_effort+0x56>
 800cd6c:	4616      	mov	r6, r2
 800cd6e:	b312      	cbz	r2, 800cdb6 <rclc_publisher_init_best_effort+0x56>
 800cd70:	461f      	mov	r7, r3
 800cd72:	b303      	cbz	r3, 800cdb6 <rclc_publisher_init_best_effort+0x56>
 800cd74:	4604      	mov	r4, r0
 800cd76:	f7ff f857 	bl	800be28 <rcl_get_zero_initialized_publisher>
 800cd7a:	f10d 0810 	add.w	r8, sp, #16
 800cd7e:	6020      	str	r0, [r4, #0]
 800cd80:	4640      	mov	r0, r8
 800cd82:	f7ff f8ed 	bl	800bf60 <rcl_publisher_get_default_options>
 800cd86:	490f      	ldr	r1, [pc, #60]	@ (800cdc4 <rclc_publisher_init_best_effort+0x64>)
 800cd88:	2250      	movs	r2, #80	@ 0x50
 800cd8a:	4640      	mov	r0, r8
 800cd8c:	f00a fdd7 	bl	801793e <memcpy>
 800cd90:	f8cd 8000 	str.w	r8, [sp]
 800cd94:	463b      	mov	r3, r7
 800cd96:	4632      	mov	r2, r6
 800cd98:	4629      	mov	r1, r5
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	f7ff f84a 	bl	800be34 <rcl_publisher_init>
 800cda0:	b910      	cbnz	r0, 800cda8 <rclc_publisher_init_best_effort+0x48>
 800cda2:	b020      	add	sp, #128	@ 0x80
 800cda4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cda8:	9003      	str	r0, [sp, #12]
 800cdaa:	f000 f8a5 	bl	800cef8 <rcutils_reset_error>
 800cdae:	9803      	ldr	r0, [sp, #12]
 800cdb0:	b020      	add	sp, #128	@ 0x80
 800cdb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdb6:	200b      	movs	r0, #11
 800cdb8:	b020      	add	sp, #128	@ 0x80
 800cdba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdbe:	200b      	movs	r0, #11
 800cdc0:	4770      	bx	lr
 800cdc2:	bf00      	nop
 800cdc4:	08018aa8 	.word	0x08018aa8

0800cdc8 <rclc_timer_init_default>:
 800cdc8:	b360      	cbz	r0, 800ce24 <rclc_timer_init_default+0x5c>
 800cdca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdce:	460e      	mov	r6, r1
 800cdd0:	b08a      	sub	sp, #40	@ 0x28
 800cdd2:	b319      	cbz	r1, 800ce1c <rclc_timer_init_default+0x54>
 800cdd4:	4690      	mov	r8, r2
 800cdd6:	461f      	mov	r7, r3
 800cdd8:	4605      	mov	r5, r0
 800cdda:	f005 fea3 	bl	8012b24 <rcl_get_zero_initialized_timer>
 800cdde:	68b4      	ldr	r4, [r6, #8]
 800cde0:	6028      	str	r0, [r5, #0]
 800cde2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cde4:	f10d 0c0c 	add.w	ip, sp, #12
 800cde8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cdec:	6823      	ldr	r3, [r4, #0]
 800cdee:	f8cc 3000 	str.w	r3, [ip]
 800cdf2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cdf4:	9302      	str	r3, [sp, #8]
 800cdf6:	e9cd 8700 	strd	r8, r7, [sp]
 800cdfa:	4628      	mov	r0, r5
 800cdfc:	4632      	mov	r2, r6
 800cdfe:	f106 010c 	add.w	r1, r6, #12
 800ce02:	f005 fe95 	bl	8012b30 <rcl_timer_init>
 800ce06:	b910      	cbnz	r0, 800ce0e <rclc_timer_init_default+0x46>
 800ce08:	b00a      	add	sp, #40	@ 0x28
 800ce0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce0e:	9009      	str	r0, [sp, #36]	@ 0x24
 800ce10:	f000 f872 	bl	800cef8 <rcutils_reset_error>
 800ce14:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ce16:	b00a      	add	sp, #40	@ 0x28
 800ce18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce1c:	200b      	movs	r0, #11
 800ce1e:	b00a      	add	sp, #40	@ 0x28
 800ce20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce24:	200b      	movs	r0, #11
 800ce26:	4770      	bx	lr

0800ce28 <__default_zero_allocate>:
 800ce28:	f00a b8d6 	b.w	8016fd8 <calloc>

0800ce2c <__default_reallocate>:
 800ce2c:	f00a ba62 	b.w	80172f4 <realloc>

0800ce30 <__default_deallocate>:
 800ce30:	f00a b93e 	b.w	80170b0 <free>

0800ce34 <__default_allocate>:
 800ce34:	f00a b934 	b.w	80170a0 <malloc>

0800ce38 <rcutils_get_zero_initialized_allocator>:
 800ce38:	b510      	push	{r4, lr}
 800ce3a:	4c05      	ldr	r4, [pc, #20]	@ (800ce50 <rcutils_get_zero_initialized_allocator+0x18>)
 800ce3c:	4686      	mov	lr, r0
 800ce3e:	4684      	mov	ip, r0
 800ce40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ce42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ce46:	6823      	ldr	r3, [r4, #0]
 800ce48:	f8cc 3000 	str.w	r3, [ip]
 800ce4c:	4670      	mov	r0, lr
 800ce4e:	bd10      	pop	{r4, pc}
 800ce50:	08018af8 	.word	0x08018af8

0800ce54 <rcutils_set_default_allocator>:
 800ce54:	b1a8      	cbz	r0, 800ce82 <rcutils_set_default_allocator+0x2e>
 800ce56:	6802      	ldr	r2, [r0, #0]
 800ce58:	b1a2      	cbz	r2, 800ce84 <rcutils_set_default_allocator+0x30>
 800ce5a:	6841      	ldr	r1, [r0, #4]
 800ce5c:	b1a1      	cbz	r1, 800ce88 <rcutils_set_default_allocator+0x34>
 800ce5e:	b410      	push	{r4}
 800ce60:	68c4      	ldr	r4, [r0, #12]
 800ce62:	b164      	cbz	r4, 800ce7e <rcutils_set_default_allocator+0x2a>
 800ce64:	6880      	ldr	r0, [r0, #8]
 800ce66:	b138      	cbz	r0, 800ce78 <rcutils_set_default_allocator+0x24>
 800ce68:	4b08      	ldr	r3, [pc, #32]	@ (800ce8c <rcutils_set_default_allocator+0x38>)
 800ce6a:	601a      	str	r2, [r3, #0]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800ce72:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800ce76:	2001      	movs	r0, #1
 800ce78:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce7c:	4770      	bx	lr
 800ce7e:	4620      	mov	r0, r4
 800ce80:	e7fa      	b.n	800ce78 <rcutils_set_default_allocator+0x24>
 800ce82:	4770      	bx	lr
 800ce84:	4610      	mov	r0, r2
 800ce86:	4770      	bx	lr
 800ce88:	4608      	mov	r0, r1
 800ce8a:	4770      	bx	lr
 800ce8c:	200000d4 	.word	0x200000d4

0800ce90 <rcutils_get_default_allocator>:
 800ce90:	b510      	push	{r4, lr}
 800ce92:	4c05      	ldr	r4, [pc, #20]	@ (800cea8 <rcutils_get_default_allocator+0x18>)
 800ce94:	4686      	mov	lr, r0
 800ce96:	4684      	mov	ip, r0
 800ce98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ce9a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ce9e:	6823      	ldr	r3, [r4, #0]
 800cea0:	f8cc 3000 	str.w	r3, [ip]
 800cea4:	4670      	mov	r0, lr
 800cea6:	bd10      	pop	{r4, pc}
 800cea8:	200000d4 	.word	0x200000d4

0800ceac <rcutils_allocator_is_valid>:
 800ceac:	b158      	cbz	r0, 800cec6 <rcutils_allocator_is_valid+0x1a>
 800ceae:	6803      	ldr	r3, [r0, #0]
 800ceb0:	b143      	cbz	r3, 800cec4 <rcutils_allocator_is_valid+0x18>
 800ceb2:	6843      	ldr	r3, [r0, #4]
 800ceb4:	b133      	cbz	r3, 800cec4 <rcutils_allocator_is_valid+0x18>
 800ceb6:	68c3      	ldr	r3, [r0, #12]
 800ceb8:	b123      	cbz	r3, 800cec4 <rcutils_allocator_is_valid+0x18>
 800ceba:	6880      	ldr	r0, [r0, #8]
 800cebc:	3800      	subs	r0, #0
 800cebe:	bf18      	it	ne
 800cec0:	2001      	movne	r0, #1
 800cec2:	4770      	bx	lr
 800cec4:	4618      	mov	r0, r3
 800cec6:	4770      	bx	lr

0800cec8 <rcutils_get_error_string>:
 800cec8:	4b06      	ldr	r3, [pc, #24]	@ (800cee4 <rcutils_get_error_string+0x1c>)
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	b13b      	cbz	r3, 800cede <rcutils_get_error_string+0x16>
 800cece:	4b06      	ldr	r3, [pc, #24]	@ (800cee8 <rcutils_get_error_string+0x20>)
 800ced0:	781a      	ldrb	r2, [r3, #0]
 800ced2:	b90a      	cbnz	r2, 800ced8 <rcutils_get_error_string+0x10>
 800ced4:	2201      	movs	r2, #1
 800ced6:	701a      	strb	r2, [r3, #0]
 800ced8:	4b04      	ldr	r3, [pc, #16]	@ (800ceec <rcutils_get_error_string+0x24>)
 800ceda:	7818      	ldrb	r0, [r3, #0]
 800cedc:	4770      	bx	lr
 800cede:	4b04      	ldr	r3, [pc, #16]	@ (800cef0 <rcutils_get_error_string+0x28>)
 800cee0:	7818      	ldrb	r0, [r3, #0]
 800cee2:	4770      	bx	lr
 800cee4:	200062a8 	.word	0x200062a8
 800cee8:	200062c1 	.word	0x200062c1
 800ceec:	200062c0 	.word	0x200062c0
 800cef0:	08018b0c 	.word	0x08018b0c
 800cef4:	00000000 	.word	0x00000000

0800cef8 <rcutils_reset_error>:
 800cef8:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800cf18 <rcutils_reset_error+0x20>
 800cefc:	4a08      	ldr	r2, [pc, #32]	@ (800cf20 <rcutils_reset_error+0x28>)
 800cefe:	4809      	ldr	r0, [pc, #36]	@ (800cf24 <rcutils_reset_error+0x2c>)
 800cf00:	4909      	ldr	r1, [pc, #36]	@ (800cf28 <rcutils_reset_error+0x30>)
 800cf02:	2300      	movs	r3, #0
 800cf04:	8013      	strh	r3, [r2, #0]
 800cf06:	ed82 7b02 	vstr	d7, [r2, #8]
 800cf0a:	4a08      	ldr	r2, [pc, #32]	@ (800cf2c <rcutils_reset_error+0x34>)
 800cf0c:	7003      	strb	r3, [r0, #0]
 800cf0e:	700b      	strb	r3, [r1, #0]
 800cf10:	7013      	strb	r3, [r2, #0]
 800cf12:	4770      	bx	lr
 800cf14:	f3af 8000 	nop.w
	...
 800cf20:	200062b0 	.word	0x200062b0
 800cf24:	200062c1 	.word	0x200062c1
 800cf28:	200062c0 	.word	0x200062c0
 800cf2c:	200062a8 	.word	0x200062a8

0800cf30 <rcutils_system_time_now>:
 800cf30:	b308      	cbz	r0, 800cf76 <rcutils_system_time_now+0x46>
 800cf32:	b570      	push	{r4, r5, r6, lr}
 800cf34:	b084      	sub	sp, #16
 800cf36:	4604      	mov	r4, r0
 800cf38:	4669      	mov	r1, sp
 800cf3a:	2001      	movs	r0, #1
 800cf3c:	f7f5 f84c 	bl	8001fd8 <clock_gettime>
 800cf40:	e9dd 3500 	ldrd	r3, r5, [sp]
 800cf44:	2d00      	cmp	r5, #0
 800cf46:	db13      	blt.n	800cf70 <rcutils_system_time_now+0x40>
 800cf48:	9902      	ldr	r1, [sp, #8]
 800cf4a:	2900      	cmp	r1, #0
 800cf4c:	db0d      	blt.n	800cf6a <rcutils_system_time_now+0x3a>
 800cf4e:	4e0b      	ldr	r6, [pc, #44]	@ (800cf7c <rcutils_system_time_now+0x4c>)
 800cf50:	fba3 3206 	umull	r3, r2, r3, r6
 800cf54:	185b      	adds	r3, r3, r1
 800cf56:	fb06 2205 	mla	r2, r6, r5, r2
 800cf5a:	f04f 0000 	mov.w	r0, #0
 800cf5e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800cf62:	e9c4 3200 	strd	r3, r2, [r4]
 800cf66:	b004      	add	sp, #16
 800cf68:	bd70      	pop	{r4, r5, r6, pc}
 800cf6a:	ea53 0205 	orrs.w	r2, r3, r5
 800cf6e:	d1ee      	bne.n	800cf4e <rcutils_system_time_now+0x1e>
 800cf70:	2002      	movs	r0, #2
 800cf72:	b004      	add	sp, #16
 800cf74:	bd70      	pop	{r4, r5, r6, pc}
 800cf76:	200b      	movs	r0, #11
 800cf78:	4770      	bx	lr
 800cf7a:	bf00      	nop
 800cf7c:	3b9aca00 	.word	0x3b9aca00

0800cf80 <rcutils_steady_time_now>:
 800cf80:	b308      	cbz	r0, 800cfc6 <rcutils_steady_time_now+0x46>
 800cf82:	b570      	push	{r4, r5, r6, lr}
 800cf84:	b084      	sub	sp, #16
 800cf86:	4604      	mov	r4, r0
 800cf88:	4669      	mov	r1, sp
 800cf8a:	2000      	movs	r0, #0
 800cf8c:	f7f5 f824 	bl	8001fd8 <clock_gettime>
 800cf90:	e9dd 3500 	ldrd	r3, r5, [sp]
 800cf94:	2d00      	cmp	r5, #0
 800cf96:	db13      	blt.n	800cfc0 <rcutils_steady_time_now+0x40>
 800cf98:	9902      	ldr	r1, [sp, #8]
 800cf9a:	2900      	cmp	r1, #0
 800cf9c:	db0d      	blt.n	800cfba <rcutils_steady_time_now+0x3a>
 800cf9e:	4e0b      	ldr	r6, [pc, #44]	@ (800cfcc <rcutils_steady_time_now+0x4c>)
 800cfa0:	fba3 3206 	umull	r3, r2, r3, r6
 800cfa4:	185b      	adds	r3, r3, r1
 800cfa6:	fb06 2205 	mla	r2, r6, r5, r2
 800cfaa:	f04f 0000 	mov.w	r0, #0
 800cfae:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800cfb2:	e9c4 3200 	strd	r3, r2, [r4]
 800cfb6:	b004      	add	sp, #16
 800cfb8:	bd70      	pop	{r4, r5, r6, pc}
 800cfba:	ea53 0205 	orrs.w	r2, r3, r5
 800cfbe:	d1ee      	bne.n	800cf9e <rcutils_steady_time_now+0x1e>
 800cfc0:	2002      	movs	r0, #2
 800cfc2:	b004      	add	sp, #16
 800cfc4:	bd70      	pop	{r4, r5, r6, pc}
 800cfc6:	200b      	movs	r0, #11
 800cfc8:	4770      	bx	lr
 800cfca:	bf00      	nop
 800cfcc:	3b9aca00 	.word	0x3b9aca00

0800cfd0 <rmw_get_zero_initialized_init_options>:
 800cfd0:	b510      	push	{r4, lr}
 800cfd2:	2238      	movs	r2, #56	@ 0x38
 800cfd4:	4604      	mov	r4, r0
 800cfd6:	2100      	movs	r1, #0
 800cfd8:	f00a fbe8 	bl	80177ac <memset>
 800cfdc:	f104 0010 	add.w	r0, r4, #16
 800cfe0:	f000 f80a 	bl	800cff8 <rmw_get_default_security_options>
 800cfe4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cfe8:	60e3      	str	r3, [r4, #12]
 800cfea:	4620      	mov	r0, r4
 800cfec:	bd10      	pop	{r4, pc}
 800cfee:	bf00      	nop

0800cff0 <rmw_get_default_publisher_options>:
 800cff0:	2200      	movs	r2, #0
 800cff2:	6002      	str	r2, [r0, #0]
 800cff4:	7102      	strb	r2, [r0, #4]
 800cff6:	4770      	bx	lr

0800cff8 <rmw_get_default_security_options>:
 800cff8:	2200      	movs	r2, #0
 800cffa:	7002      	strb	r2, [r0, #0]
 800cffc:	6042      	str	r2, [r0, #4]
 800cffe:	4770      	bx	lr

0800d000 <rmw_uros_set_custom_transport>:
 800d000:	b470      	push	{r4, r5, r6}
 800d002:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800d006:	b162      	cbz	r2, 800d022 <rmw_uros_set_custom_transport+0x22>
 800d008:	b15b      	cbz	r3, 800d022 <rmw_uros_set_custom_transport+0x22>
 800d00a:	b155      	cbz	r5, 800d022 <rmw_uros_set_custom_transport+0x22>
 800d00c:	b14e      	cbz	r6, 800d022 <rmw_uros_set_custom_transport+0x22>
 800d00e:	4c06      	ldr	r4, [pc, #24]	@ (800d028 <rmw_uros_set_custom_transport+0x28>)
 800d010:	7020      	strb	r0, [r4, #0]
 800d012:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800d016:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d01a:	6166      	str	r6, [r4, #20]
 800d01c:	2000      	movs	r0, #0
 800d01e:	bc70      	pop	{r4, r5, r6}
 800d020:	4770      	bx	lr
 800d022:	200b      	movs	r0, #11
 800d024:	bc70      	pop	{r4, r5, r6}
 800d026:	4770      	bx	lr
 800d028:	200062c4 	.word	0x200062c4

0800d02c <rmw_init_options_init>:
 800d02c:	b084      	sub	sp, #16
 800d02e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d030:	b083      	sub	sp, #12
 800d032:	ad09      	add	r5, sp, #36	@ 0x24
 800d034:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800d038:	b130      	cbz	r0, 800d048 <rmw_init_options_init+0x1c>
 800d03a:	4604      	mov	r4, r0
 800d03c:	4628      	mov	r0, r5
 800d03e:	f7ff ff35 	bl	800ceac <rcutils_allocator_is_valid>
 800d042:	b108      	cbz	r0, 800d048 <rmw_init_options_init+0x1c>
 800d044:	68a6      	ldr	r6, [r4, #8]
 800d046:	b12e      	cbz	r6, 800d054 <rmw_init_options_init+0x28>
 800d048:	200b      	movs	r0, #11
 800d04a:	b003      	add	sp, #12
 800d04c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d050:	b004      	add	sp, #16
 800d052:	4770      	bx	lr
 800d054:	2200      	movs	r2, #0
 800d056:	2300      	movs	r3, #0
 800d058:	e9c4 2300 	strd	r2, r3, [r4]
 800d05c:	4b22      	ldr	r3, [pc, #136]	@ (800d0e8 <rmw_init_options_init+0xbc>)
 800d05e:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800d0f8 <rmw_init_options_init+0xcc>
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	60a3      	str	r3, [r4, #8]
 800d066:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d068:	f104 0c20 	add.w	ip, r4, #32
 800d06c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d070:	466f      	mov	r7, sp
 800d072:	682b      	ldr	r3, [r5, #0]
 800d074:	f8cc 3000 	str.w	r3, [ip]
 800d078:	4638      	mov	r0, r7
 800d07a:	f8c4 e01c 	str.w	lr, [r4, #28]
 800d07e:	60e6      	str	r6, [r4, #12]
 800d080:	f7ff ffba 	bl	800cff8 <rmw_get_default_security_options>
 800d084:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d088:	f104 0310 	add.w	r3, r4, #16
 800d08c:	e883 0003 	stmia.w	r3, {r0, r1}
 800d090:	2203      	movs	r2, #3
 800d092:	4816      	ldr	r0, [pc, #88]	@ (800d0ec <rmw_init_options_init+0xc0>)
 800d094:	4916      	ldr	r1, [pc, #88]	@ (800d0f0 <rmw_init_options_init+0xc4>)
 800d096:	7626      	strb	r6, [r4, #24]
 800d098:	f000 febc 	bl	800de14 <rmw_uxrce_init_init_options_impl_memory>
 800d09c:	4813      	ldr	r0, [pc, #76]	@ (800d0ec <rmw_init_options_init+0xc0>)
 800d09e:	f008 f8cb 	bl	8015238 <get_memory>
 800d0a2:	b1f0      	cbz	r0, 800d0e2 <rmw_init_options_init+0xb6>
 800d0a4:	4a13      	ldr	r2, [pc, #76]	@ (800d0f4 <rmw_init_options_init+0xc8>)
 800d0a6:	6883      	ldr	r3, [r0, #8]
 800d0a8:	6851      	ldr	r1, [r2, #4]
 800d0aa:	7810      	ldrb	r0, [r2, #0]
 800d0ac:	6363      	str	r3, [r4, #52]	@ 0x34
 800d0ae:	7418      	strb	r0, [r3, #16]
 800d0b0:	6159      	str	r1, [r3, #20]
 800d0b2:	68d1      	ldr	r1, [r2, #12]
 800d0b4:	61d9      	str	r1, [r3, #28]
 800d0b6:	6911      	ldr	r1, [r2, #16]
 800d0b8:	6219      	str	r1, [r3, #32]
 800d0ba:	6951      	ldr	r1, [r2, #20]
 800d0bc:	6892      	ldr	r2, [r2, #8]
 800d0be:	619a      	str	r2, [r3, #24]
 800d0c0:	6259      	str	r1, [r3, #36]	@ 0x24
 800d0c2:	f003 fb9f 	bl	8010804 <uxr_nanos>
 800d0c6:	f00a f8a9 	bl	801721c <srand>
 800d0ca:	f00a f8d5 	bl	8017278 <rand>
 800d0ce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d0d0:	6298      	str	r0, [r3, #40]	@ 0x28
 800d0d2:	2800      	cmp	r0, #0
 800d0d4:	d0f9      	beq.n	800d0ca <rmw_init_options_init+0x9e>
 800d0d6:	2000      	movs	r0, #0
 800d0d8:	b003      	add	sp, #12
 800d0da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d0de:	b004      	add	sp, #16
 800d0e0:	4770      	bx	lr
 800d0e2:	2001      	movs	r0, #1
 800d0e4:	e7b1      	b.n	800d04a <rmw_init_options_init+0x1e>
 800d0e6:	bf00      	nop
 800d0e8:	080192b8 	.word	0x080192b8
 800d0ec:	2000abdc 	.word	0x2000abdc
 800d0f0:	20006478 	.word	0x20006478
 800d0f4:	200062c4 	.word	0x200062c4
 800d0f8:	08018b10 	.word	0x08018b10

0800d0fc <rmw_init_options_copy>:
 800d0fc:	b570      	push	{r4, r5, r6, lr}
 800d0fe:	b158      	cbz	r0, 800d118 <rmw_init_options_copy+0x1c>
 800d100:	460d      	mov	r5, r1
 800d102:	b149      	cbz	r1, 800d118 <rmw_init_options_copy+0x1c>
 800d104:	4604      	mov	r4, r0
 800d106:	6880      	ldr	r0, [r0, #8]
 800d108:	b120      	cbz	r0, 800d114 <rmw_init_options_copy+0x18>
 800d10a:	4b1e      	ldr	r3, [pc, #120]	@ (800d184 <rmw_init_options_copy+0x88>)
 800d10c:	6819      	ldr	r1, [r3, #0]
 800d10e:	f7f3 f887 	bl	8000220 <strcmp>
 800d112:	bb90      	cbnz	r0, 800d17a <rmw_init_options_copy+0x7e>
 800d114:	68ab      	ldr	r3, [r5, #8]
 800d116:	b113      	cbz	r3, 800d11e <rmw_init_options_copy+0x22>
 800d118:	250b      	movs	r5, #11
 800d11a:	4628      	mov	r0, r5
 800d11c:	bd70      	pop	{r4, r5, r6, pc}
 800d11e:	4623      	mov	r3, r4
 800d120:	462a      	mov	r2, r5
 800d122:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800d126:	f8d3 c000 	ldr.w	ip, [r3]
 800d12a:	6858      	ldr	r0, [r3, #4]
 800d12c:	6899      	ldr	r1, [r3, #8]
 800d12e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800d132:	f8c2 e00c 	str.w	lr, [r2, #12]
 800d136:	3310      	adds	r3, #16
 800d138:	42b3      	cmp	r3, r6
 800d13a:	f8c2 c000 	str.w	ip, [r2]
 800d13e:	6050      	str	r0, [r2, #4]
 800d140:	6091      	str	r1, [r2, #8]
 800d142:	f102 0210 	add.w	r2, r2, #16
 800d146:	d1ee      	bne.n	800d126 <rmw_init_options_copy+0x2a>
 800d148:	6819      	ldr	r1, [r3, #0]
 800d14a:	685b      	ldr	r3, [r3, #4]
 800d14c:	480e      	ldr	r0, [pc, #56]	@ (800d188 <rmw_init_options_copy+0x8c>)
 800d14e:	6053      	str	r3, [r2, #4]
 800d150:	6011      	str	r1, [r2, #0]
 800d152:	f008 f871 	bl	8015238 <get_memory>
 800d156:	b198      	cbz	r0, 800d180 <rmw_init_options_copy+0x84>
 800d158:	6883      	ldr	r3, [r0, #8]
 800d15a:	636b      	str	r3, [r5, #52]	@ 0x34
 800d15c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d15e:	f102 0c10 	add.w	ip, r2, #16
 800d162:	f103 0410 	add.w	r4, r3, #16
 800d166:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d16a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d16c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800d170:	2500      	movs	r5, #0
 800d172:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d176:	4628      	mov	r0, r5
 800d178:	bd70      	pop	{r4, r5, r6, pc}
 800d17a:	250c      	movs	r5, #12
 800d17c:	4628      	mov	r0, r5
 800d17e:	bd70      	pop	{r4, r5, r6, pc}
 800d180:	2501      	movs	r5, #1
 800d182:	e7ca      	b.n	800d11a <rmw_init_options_copy+0x1e>
 800d184:	080192b8 	.word	0x080192b8
 800d188:	2000abdc 	.word	0x2000abdc

0800d18c <rmw_init_options_fini>:
 800d18c:	2800      	cmp	r0, #0
 800d18e:	d03d      	beq.n	800d20c <rmw_init_options_fini+0x80>
 800d190:	b510      	push	{r4, lr}
 800d192:	4604      	mov	r4, r0
 800d194:	b08e      	sub	sp, #56	@ 0x38
 800d196:	3020      	adds	r0, #32
 800d198:	f7ff fe88 	bl	800ceac <rcutils_allocator_is_valid>
 800d19c:	b360      	cbz	r0, 800d1f8 <rmw_init_options_fini+0x6c>
 800d19e:	68a0      	ldr	r0, [r4, #8]
 800d1a0:	b120      	cbz	r0, 800d1ac <rmw_init_options_fini+0x20>
 800d1a2:	4b1c      	ldr	r3, [pc, #112]	@ (800d214 <rmw_init_options_fini+0x88>)
 800d1a4:	6819      	ldr	r1, [r3, #0]
 800d1a6:	f7f3 f83b 	bl	8000220 <strcmp>
 800d1aa:	bb68      	cbnz	r0, 800d208 <rmw_init_options_fini+0x7c>
 800d1ac:	4b1a      	ldr	r3, [pc, #104]	@ (800d218 <rmw_init_options_fini+0x8c>)
 800d1ae:	6819      	ldr	r1, [r3, #0]
 800d1b0:	b331      	cbz	r1, 800d200 <rmw_init_options_fini+0x74>
 800d1b2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d1b4:	e001      	b.n	800d1ba <rmw_init_options_fini+0x2e>
 800d1b6:	6849      	ldr	r1, [r1, #4]
 800d1b8:	b311      	cbz	r1, 800d200 <rmw_init_options_fini+0x74>
 800d1ba:	688b      	ldr	r3, [r1, #8]
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d1fa      	bne.n	800d1b6 <rmw_init_options_fini+0x2a>
 800d1c0:	4815      	ldr	r0, [pc, #84]	@ (800d218 <rmw_init_options_fini+0x8c>)
 800d1c2:	f008 f849 	bl	8015258 <put_memory>
 800d1c6:	4668      	mov	r0, sp
 800d1c8:	f7ff ff02 	bl	800cfd0 <rmw_get_zero_initialized_init_options>
 800d1cc:	46ee      	mov	lr, sp
 800d1ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d1d2:	46a4      	mov	ip, r4
 800d1d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d1d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d1dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d1e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d1e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d1e8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d1ec:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	b00e      	add	sp, #56	@ 0x38
 800d1f6:	bd10      	pop	{r4, pc}
 800d1f8:	230b      	movs	r3, #11
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	b00e      	add	sp, #56	@ 0x38
 800d1fe:	bd10      	pop	{r4, pc}
 800d200:	2301      	movs	r3, #1
 800d202:	4618      	mov	r0, r3
 800d204:	b00e      	add	sp, #56	@ 0x38
 800d206:	bd10      	pop	{r4, pc}
 800d208:	230c      	movs	r3, #12
 800d20a:	e7f2      	b.n	800d1f2 <rmw_init_options_fini+0x66>
 800d20c:	230b      	movs	r3, #11
 800d20e:	4618      	mov	r0, r3
 800d210:	4770      	bx	lr
 800d212:	bf00      	nop
 800d214:	080192b8 	.word	0x080192b8
 800d218:	2000abdc 	.word	0x2000abdc

0800d21c <rmw_init>:
 800d21c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d220:	b083      	sub	sp, #12
 800d222:	2800      	cmp	r0, #0
 800d224:	f000 80d3 	beq.w	800d3ce <rmw_init+0x1b2>
 800d228:	460e      	mov	r6, r1
 800d22a:	2900      	cmp	r1, #0
 800d22c:	f000 80cf 	beq.w	800d3ce <rmw_init+0x1b2>
 800d230:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d232:	4605      	mov	r5, r0
 800d234:	2b00      	cmp	r3, #0
 800d236:	f000 80ca 	beq.w	800d3ce <rmw_init+0x1b2>
 800d23a:	4b78      	ldr	r3, [pc, #480]	@ (800d41c <rmw_init+0x200>)
 800d23c:	6880      	ldr	r0, [r0, #8]
 800d23e:	681f      	ldr	r7, [r3, #0]
 800d240:	b128      	cbz	r0, 800d24e <rmw_init+0x32>
 800d242:	4639      	mov	r1, r7
 800d244:	f7f2 ffec 	bl	8000220 <strcmp>
 800d248:	2800      	cmp	r0, #0
 800d24a:	f040 80ca 	bne.w	800d3e2 <rmw_init+0x1c6>
 800d24e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d252:	4c73      	ldr	r4, [pc, #460]	@ (800d420 <rmw_init+0x204>)
 800d254:	4973      	ldr	r1, [pc, #460]	@ (800d424 <rmw_init+0x208>)
 800d256:	4874      	ldr	r0, [pc, #464]	@ (800d428 <rmw_init+0x20c>)
 800d258:	60b7      	str	r7, [r6, #8]
 800d25a:	e9c6 2300 	strd	r2, r3, [r6]
 800d25e:	68eb      	ldr	r3, [r5, #12]
 800d260:	64b3      	str	r3, [r6, #72]	@ 0x48
 800d262:	2201      	movs	r2, #1
 800d264:	f000 fd76 	bl	800dd54 <rmw_uxrce_init_session_memory>
 800d268:	4620      	mov	r0, r4
 800d26a:	4970      	ldr	r1, [pc, #448]	@ (800d42c <rmw_init+0x210>)
 800d26c:	2204      	movs	r2, #4
 800d26e:	f000 fdb1 	bl	800ddd4 <rmw_uxrce_init_static_input_buffer_memory>
 800d272:	f04f 0800 	mov.w	r8, #0
 800d276:	486c      	ldr	r0, [pc, #432]	@ (800d428 <rmw_init+0x20c>)
 800d278:	f884 800d 	strb.w	r8, [r4, #13]
 800d27c:	f007 ffdc 	bl	8015238 <get_memory>
 800d280:	2800      	cmp	r0, #0
 800d282:	f000 80a9 	beq.w	800d3d8 <rmw_init+0x1bc>
 800d286:	6884      	ldr	r4, [r0, #8]
 800d288:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800d28a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800d28c:	f890 c010 	ldrb.w	ip, [r0, #16]
 800d290:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800d294:	9101      	str	r1, [sp, #4]
 800d296:	6a00      	ldr	r0, [r0, #32]
 800d298:	9000      	str	r0, [sp, #0]
 800d29a:	f104 0910 	add.w	r9, r4, #16
 800d29e:	4661      	mov	r1, ip
 800d2a0:	4648      	mov	r0, r9
 800d2a2:	f001 fa33 	bl	800e70c <uxr_set_custom_transport_callbacks>
 800d2a6:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800d2aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d2ae:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800d2b2:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800d2b6:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800d2ba:	495d      	ldr	r1, [pc, #372]	@ (800d430 <rmw_init+0x214>)
 800d2bc:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800d2c0:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800d2c4:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800d2c8:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800d2cc:	4859      	ldr	r0, [pc, #356]	@ (800d434 <rmw_init+0x218>)
 800d2ce:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800d2d2:	2201      	movs	r2, #1
 800d2d4:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800d2d6:	f000 fd1d 	bl	800dd14 <rmw_uxrce_init_node_memory>
 800d2da:	4957      	ldr	r1, [pc, #348]	@ (800d438 <rmw_init+0x21c>)
 800d2dc:	4857      	ldr	r0, [pc, #348]	@ (800d43c <rmw_init+0x220>)
 800d2de:	2205      	movs	r2, #5
 800d2e0:	f000 fcf8 	bl	800dcd4 <rmw_uxrce_init_subscription_memory>
 800d2e4:	4956      	ldr	r1, [pc, #344]	@ (800d440 <rmw_init+0x224>)
 800d2e6:	4857      	ldr	r0, [pc, #348]	@ (800d444 <rmw_init+0x228>)
 800d2e8:	220a      	movs	r2, #10
 800d2ea:	f000 fcd3 	bl	800dc94 <rmw_uxrce_init_publisher_memory>
 800d2ee:	4956      	ldr	r1, [pc, #344]	@ (800d448 <rmw_init+0x22c>)
 800d2f0:	4856      	ldr	r0, [pc, #344]	@ (800d44c <rmw_init+0x230>)
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	f000 fc8e 	bl	800dc14 <rmw_uxrce_init_service_memory>
 800d2f8:	4955      	ldr	r1, [pc, #340]	@ (800d450 <rmw_init+0x234>)
 800d2fa:	4856      	ldr	r0, [pc, #344]	@ (800d454 <rmw_init+0x238>)
 800d2fc:	2201      	movs	r2, #1
 800d2fe:	f000 fca9 	bl	800dc54 <rmw_uxrce_init_client_memory>
 800d302:	4955      	ldr	r1, [pc, #340]	@ (800d458 <rmw_init+0x23c>)
 800d304:	4855      	ldr	r0, [pc, #340]	@ (800d45c <rmw_init+0x240>)
 800d306:	220f      	movs	r2, #15
 800d308:	f000 fd44 	bl	800dd94 <rmw_uxrce_init_topic_memory>
 800d30c:	4954      	ldr	r1, [pc, #336]	@ (800d460 <rmw_init+0x244>)
 800d30e:	4855      	ldr	r0, [pc, #340]	@ (800d464 <rmw_init+0x248>)
 800d310:	2203      	movs	r2, #3
 800d312:	f000 fd7f 	bl	800de14 <rmw_uxrce_init_init_options_impl_memory>
 800d316:	4954      	ldr	r1, [pc, #336]	@ (800d468 <rmw_init+0x24c>)
 800d318:	4854      	ldr	r0, [pc, #336]	@ (800d46c <rmw_init+0x250>)
 800d31a:	2204      	movs	r2, #4
 800d31c:	f000 fd9a 	bl	800de54 <rmw_uxrce_init_wait_set_memory>
 800d320:	4953      	ldr	r1, [pc, #332]	@ (800d470 <rmw_init+0x254>)
 800d322:	4854      	ldr	r0, [pc, #336]	@ (800d474 <rmw_init+0x258>)
 800d324:	2204      	movs	r2, #4
 800d326:	f000 fdb5 	bl	800de94 <rmw_uxrce_init_guard_condition_memory>
 800d32a:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800d32c:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800d32e:	4642      	mov	r2, r8
 800d330:	f000 fc38 	bl	800dba4 <rmw_uxrce_transport_init>
 800d334:	4607      	mov	r7, r0
 800d336:	2800      	cmp	r0, #0
 800d338:	d158      	bne.n	800d3ec <rmw_init+0x1d0>
 800d33a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800d33c:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800d340:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d342:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800d346:	4628      	mov	r0, r5
 800d348:	f001 fbda 	bl	800eb00 <uxr_init_session>
 800d34c:	494a      	ldr	r1, [pc, #296]	@ (800d478 <rmw_init+0x25c>)
 800d34e:	4622      	mov	r2, r4
 800d350:	4628      	mov	r0, r5
 800d352:	f001 fbf9 	bl	800eb48 <uxr_set_topic_callback>
 800d356:	4949      	ldr	r1, [pc, #292]	@ (800d47c <rmw_init+0x260>)
 800d358:	463a      	mov	r2, r7
 800d35a:	4628      	mov	r0, r5
 800d35c:	f001 fbf0 	bl	800eb40 <uxr_set_status_callback>
 800d360:	4947      	ldr	r1, [pc, #284]	@ (800d480 <rmw_init+0x264>)
 800d362:	463a      	mov	r2, r7
 800d364:	4628      	mov	r0, r5
 800d366:	f001 fbf3 	bl	800eb50 <uxr_set_request_callback>
 800d36a:	4946      	ldr	r1, [pc, #280]	@ (800d484 <rmw_init+0x268>)
 800d36c:	463a      	mov	r2, r7
 800d36e:	4628      	mov	r0, r5
 800d370:	f001 fbf2 	bl	800eb58 <uxr_set_reply_callback>
 800d374:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d378:	2304      	movs	r3, #4
 800d37a:	0092      	lsls	r2, r2, #2
 800d37c:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800d380:	4628      	mov	r0, r5
 800d382:	f001 fc27 	bl	800ebd4 <uxr_create_input_reliable_stream>
 800d386:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d38a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800d38e:	0092      	lsls	r2, r2, #2
 800d390:	2304      	movs	r3, #4
 800d392:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800d396:	4628      	mov	r0, r5
 800d398:	f001 fbf4 	bl	800eb84 <uxr_create_output_reliable_stream>
 800d39c:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800d3a0:	4628      	mov	r0, r5
 800d3a2:	f001 fc11 	bl	800ebc8 <uxr_create_input_best_effort_stream>
 800d3a6:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800d3aa:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800d3ae:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d3b2:	3114      	adds	r1, #20
 800d3b4:	4628      	mov	r0, r5
 800d3b6:	f001 fbd3 	bl	800eb60 <uxr_create_output_best_effort_stream>
 800d3ba:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800d3be:	4628      	mov	r0, r5
 800d3c0:	f002 f9b2 	bl	800f728 <uxr_create_session>
 800d3c4:	b1f8      	cbz	r0, 800d406 <rmw_init+0x1ea>
 800d3c6:	4638      	mov	r0, r7
 800d3c8:	b003      	add	sp, #12
 800d3ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3ce:	270b      	movs	r7, #11
 800d3d0:	4638      	mov	r0, r7
 800d3d2:	b003      	add	sp, #12
 800d3d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3d8:	2701      	movs	r7, #1
 800d3da:	4638      	mov	r0, r7
 800d3dc:	b003      	add	sp, #12
 800d3de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3e2:	270c      	movs	r7, #12
 800d3e4:	4638      	mov	r0, r7
 800d3e6:	b003      	add	sp, #12
 800d3e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3ec:	4648      	mov	r0, r9
 800d3ee:	f001 f9cf 	bl	800e790 <uxr_close_custom_transport>
 800d3f2:	480d      	ldr	r0, [pc, #52]	@ (800d428 <rmw_init+0x20c>)
 800d3f4:	4621      	mov	r1, r4
 800d3f6:	f007 ff2f 	bl	8015258 <put_memory>
 800d3fa:	4638      	mov	r0, r7
 800d3fc:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800d400:	b003      	add	sp, #12
 800d402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d406:	4648      	mov	r0, r9
 800d408:	f001 f9c2 	bl	800e790 <uxr_close_custom_transport>
 800d40c:	4806      	ldr	r0, [pc, #24]	@ (800d428 <rmw_init+0x20c>)
 800d40e:	4621      	mov	r1, r4
 800d410:	f007 ff22 	bl	8015258 <put_memory>
 800d414:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800d416:	2701      	movs	r7, #1
 800d418:	e7d5      	b.n	800d3c6 <rmw_init+0x1aa>
 800d41a:	bf00      	nop
 800d41c:	080192b8 	.word	0x080192b8
 800d420:	2000ac2c 	.word	0x2000ac2c
 800d424:	20006ed8 	.word	0x20006ed8
 800d428:	2000ac1c 	.word	0x2000ac1c
 800d42c:	20008480 	.word	0x20008480
 800d430:	200064fc 	.word	0x200064fc
 800d434:	2000abec 	.word	0x2000abec
 800d438:	2000a580 	.word	0x2000a580
 800d43c:	2000ac3c 	.word	0x2000ac3c
 800d440:	200065a0 	.word	0x200065a0
 800d444:	2000abfc 	.word	0x2000abfc
 800d448:	20006e10 	.word	0x20006e10
 800d44c:	2000ac0c 	.word	0x2000ac0c
 800d450:	20006330 	.word	0x20006330
 800d454:	2000631c 	.word	0x2000631c
 800d458:	2000a9b8 	.word	0x2000a9b8
 800d45c:	2000ac4c 	.word	0x2000ac4c
 800d460:	20006478 	.word	0x20006478
 800d464:	2000abdc 	.word	0x2000abdc
 800d468:	2000ab5c 	.word	0x2000ab5c
 800d46c:	2000ac5c 	.word	0x2000ac5c
 800d470:	200063f8 	.word	0x200063f8
 800d474:	2000abcc 	.word	0x2000abcc
 800d478:	08015071 	.word	0x08015071
 800d47c:	08015069 	.word	0x08015069
 800d480:	08015109 	.word	0x08015109
 800d484:	080151a5 	.word	0x080151a5

0800d488 <rmw_context_fini>:
 800d488:	4b17      	ldr	r3, [pc, #92]	@ (800d4e8 <rmw_context_fini+0x60>)
 800d48a:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800d48c:	b570      	push	{r4, r5, r6, lr}
 800d48e:	681c      	ldr	r4, [r3, #0]
 800d490:	4605      	mov	r5, r0
 800d492:	b334      	cbz	r4, 800d4e2 <rmw_context_fini+0x5a>
 800d494:	2600      	movs	r6, #0
 800d496:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800d49a:	6902      	ldr	r2, [r0, #16]
 800d49c:	428a      	cmp	r2, r1
 800d49e:	d018      	beq.n	800d4d2 <rmw_context_fini+0x4a>
 800d4a0:	2c00      	cmp	r4, #0
 800d4a2:	d1f8      	bne.n	800d496 <rmw_context_fini+0xe>
 800d4a4:	b189      	cbz	r1, 800d4ca <rmw_context_fini+0x42>
 800d4a6:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800d4aa:	789b      	ldrb	r3, [r3, #2]
 800d4ac:	2b01      	cmp	r3, #1
 800d4ae:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800d4b2:	bf14      	ite	ne
 800d4b4:	210a      	movne	r1, #10
 800d4b6:	2100      	moveq	r1, #0
 800d4b8:	f002 f90e 	bl	800f6d8 <uxr_delete_session_retries>
 800d4bc:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800d4be:	f000 fd09 	bl	800ded4 <rmw_uxrce_fini_session_memory>
 800d4c2:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800d4c4:	3010      	adds	r0, #16
 800d4c6:	f001 f963 	bl	800e790 <uxr_close_custom_transport>
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800d4ce:	4630      	mov	r0, r6
 800d4d0:	bd70      	pop	{r4, r5, r6, pc}
 800d4d2:	3018      	adds	r0, #24
 800d4d4:	f000 f89c 	bl	800d610 <rmw_destroy_node>
 800d4d8:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d4da:	4606      	mov	r6, r0
 800d4dc:	2c00      	cmp	r4, #0
 800d4de:	d1da      	bne.n	800d496 <rmw_context_fini+0xe>
 800d4e0:	e7e0      	b.n	800d4a4 <rmw_context_fini+0x1c>
 800d4e2:	4626      	mov	r6, r4
 800d4e4:	e7de      	b.n	800d4a4 <rmw_context_fini+0x1c>
 800d4e6:	bf00      	nop
 800d4e8:	2000abec 	.word	0x2000abec

0800d4ec <create_node>:
 800d4ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4f0:	b083      	sub	sp, #12
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d05f      	beq.n	800d5b6 <create_node+0xca>
 800d4f6:	4606      	mov	r6, r0
 800d4f8:	4835      	ldr	r0, [pc, #212]	@ (800d5d0 <create_node+0xe4>)
 800d4fa:	460f      	mov	r7, r1
 800d4fc:	4690      	mov	r8, r2
 800d4fe:	461d      	mov	r5, r3
 800d500:	f007 fe9a 	bl	8015238 <get_memory>
 800d504:	2800      	cmp	r0, #0
 800d506:	d056      	beq.n	800d5b6 <create_node+0xca>
 800d508:	6884      	ldr	r4, [r0, #8]
 800d50a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800d50c:	6123      	str	r3, [r4, #16]
 800d50e:	f007 fefb 	bl	8015308 <rmw_get_implementation_identifier>
 800d512:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800d516:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800d51a:	f8c4 9020 	str.w	r9, [r4, #32]
 800d51e:	4630      	mov	r0, r6
 800d520:	f7f2 fe88 	bl	8000234 <strlen>
 800d524:	1c42      	adds	r2, r0, #1
 800d526:	2a3c      	cmp	r2, #60	@ 0x3c
 800d528:	f104 0518 	add.w	r5, r4, #24
 800d52c:	d840      	bhi.n	800d5b0 <create_node+0xc4>
 800d52e:	4648      	mov	r0, r9
 800d530:	4631      	mov	r1, r6
 800d532:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800d536:	f00a fa02 	bl	801793e <memcpy>
 800d53a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800d53e:	4638      	mov	r0, r7
 800d540:	f7f2 fe78 	bl	8000234 <strlen>
 800d544:	1c42      	adds	r2, r0, #1
 800d546:	2a3c      	cmp	r2, #60	@ 0x3c
 800d548:	d832      	bhi.n	800d5b0 <create_node+0xc4>
 800d54a:	4639      	mov	r1, r7
 800d54c:	4648      	mov	r0, r9
 800d54e:	f00a f9f6 	bl	801793e <memcpy>
 800d552:	6923      	ldr	r3, [r4, #16]
 800d554:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d558:	2101      	movs	r1, #1
 800d55a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800d55e:	1842      	adds	r2, r0, r1
 800d560:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800d564:	f001 f918 	bl	800e798 <uxr_object_id>
 800d568:	6160      	str	r0, [r4, #20]
 800d56a:	783b      	ldrb	r3, [r7, #0]
 800d56c:	2b2f      	cmp	r3, #47	@ 0x2f
 800d56e:	d127      	bne.n	800d5c0 <create_node+0xd4>
 800d570:	787b      	ldrb	r3, [r7, #1]
 800d572:	bb2b      	cbnz	r3, 800d5c0 <create_node+0xd4>
 800d574:	4a17      	ldr	r2, [pc, #92]	@ (800d5d4 <create_node+0xe8>)
 800d576:	4818      	ldr	r0, [pc, #96]	@ (800d5d8 <create_node+0xec>)
 800d578:	4633      	mov	r3, r6
 800d57a:	213c      	movs	r1, #60	@ 0x3c
 800d57c:	f00a f83c 	bl	80175f8 <sniprintf>
 800d580:	6920      	ldr	r0, [r4, #16]
 800d582:	4915      	ldr	r1, [pc, #84]	@ (800d5d8 <create_node+0xec>)
 800d584:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800d588:	9100      	str	r1, [sp, #0]
 800d58a:	2106      	movs	r1, #6
 800d58c:	9101      	str	r1, [sp, #4]
 800d58e:	6811      	ldr	r1, [r2, #0]
 800d590:	6962      	ldr	r2, [r4, #20]
 800d592:	fa1f f388 	uxth.w	r3, r8
 800d596:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d59a:	f000 ff2d 	bl	800e3f8 <uxr_buffer_create_participant_bin>
 800d59e:	4602      	mov	r2, r0
 800d5a0:	6920      	ldr	r0, [r4, #16]
 800d5a2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800d5a6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800d5aa:	f000 fe0b 	bl	800e1c4 <run_xrce_session>
 800d5ae:	b918      	cbnz	r0, 800d5b8 <create_node+0xcc>
 800d5b0:	4628      	mov	r0, r5
 800d5b2:	f000 fc95 	bl	800dee0 <rmw_uxrce_fini_node_memory>
 800d5b6:	2500      	movs	r5, #0
 800d5b8:	4628      	mov	r0, r5
 800d5ba:	b003      	add	sp, #12
 800d5bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5c0:	4a06      	ldr	r2, [pc, #24]	@ (800d5dc <create_node+0xf0>)
 800d5c2:	9600      	str	r6, [sp, #0]
 800d5c4:	463b      	mov	r3, r7
 800d5c6:	213c      	movs	r1, #60	@ 0x3c
 800d5c8:	4803      	ldr	r0, [pc, #12]	@ (800d5d8 <create_node+0xec>)
 800d5ca:	f00a f815 	bl	80175f8 <sniprintf>
 800d5ce:	e7d7      	b.n	800d580 <create_node+0x94>
 800d5d0:	2000abec 	.word	0x2000abec
 800d5d4:	08018b2c 	.word	0x08018b2c
 800d5d8:	200062e0 	.word	0x200062e0
 800d5dc:	08018b14 	.word	0x08018b14

0800d5e0 <rmw_create_node>:
 800d5e0:	b199      	cbz	r1, 800d60a <rmw_create_node+0x2a>
 800d5e2:	780b      	ldrb	r3, [r1, #0]
 800d5e4:	468c      	mov	ip, r1
 800d5e6:	b183      	cbz	r3, 800d60a <rmw_create_node+0x2a>
 800d5e8:	b410      	push	{r4}
 800d5ea:	4614      	mov	r4, r2
 800d5ec:	b14a      	cbz	r2, 800d602 <rmw_create_node+0x22>
 800d5ee:	7813      	ldrb	r3, [r2, #0]
 800d5f0:	b13b      	cbz	r3, 800d602 <rmw_create_node+0x22>
 800d5f2:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	4621      	mov	r1, r4
 800d5f8:	4660      	mov	r0, ip
 800d5fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5fe:	f7ff bf75 	b.w	800d4ec <create_node>
 800d602:	2000      	movs	r0, #0
 800d604:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d608:	4770      	bx	lr
 800d60a:	2000      	movs	r0, #0
 800d60c:	4770      	bx	lr
 800d60e:	bf00      	nop

0800d610 <rmw_destroy_node>:
 800d610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d612:	b328      	cbz	r0, 800d660 <rmw_destroy_node+0x50>
 800d614:	4607      	mov	r7, r0
 800d616:	6800      	ldr	r0, [r0, #0]
 800d618:	b120      	cbz	r0, 800d624 <rmw_destroy_node+0x14>
 800d61a:	4b36      	ldr	r3, [pc, #216]	@ (800d6f4 <rmw_destroy_node+0xe4>)
 800d61c:	6819      	ldr	r1, [r3, #0]
 800d61e:	f7f2 fdff 	bl	8000220 <strcmp>
 800d622:	b9e8      	cbnz	r0, 800d660 <rmw_destroy_node+0x50>
 800d624:	687d      	ldr	r5, [r7, #4]
 800d626:	b1dd      	cbz	r5, 800d660 <rmw_destroy_node+0x50>
 800d628:	4b33      	ldr	r3, [pc, #204]	@ (800d6f8 <rmw_destroy_node+0xe8>)
 800d62a:	681c      	ldr	r4, [r3, #0]
 800d62c:	2c00      	cmp	r4, #0
 800d62e:	d05f      	beq.n	800d6f0 <rmw_destroy_node+0xe0>
 800d630:	2600      	movs	r6, #0
 800d632:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800d636:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800d63a:	429d      	cmp	r5, r3
 800d63c:	d013      	beq.n	800d666 <rmw_destroy_node+0x56>
 800d63e:	2c00      	cmp	r4, #0
 800d640:	d1f7      	bne.n	800d632 <rmw_destroy_node+0x22>
 800d642:	4b2e      	ldr	r3, [pc, #184]	@ (800d6fc <rmw_destroy_node+0xec>)
 800d644:	681c      	ldr	r4, [r3, #0]
 800d646:	b1c4      	cbz	r4, 800d67a <rmw_destroy_node+0x6a>
 800d648:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800d64c:	6a0b      	ldr	r3, [r1, #32]
 800d64e:	429d      	cmp	r5, r3
 800d650:	d1f9      	bne.n	800d646 <rmw_destroy_node+0x36>
 800d652:	317c      	adds	r1, #124	@ 0x7c
 800d654:	4638      	mov	r0, r7
 800d656:	f000 fa45 	bl	800dae4 <rmw_destroy_subscription>
 800d65a:	2801      	cmp	r0, #1
 800d65c:	4606      	mov	r6, r0
 800d65e:	d1f2      	bne.n	800d646 <rmw_destroy_node+0x36>
 800d660:	2601      	movs	r6, #1
 800d662:	4630      	mov	r0, r6
 800d664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d666:	3184      	adds	r1, #132	@ 0x84
 800d668:	4638      	mov	r0, r7
 800d66a:	f000 f9a5 	bl	800d9b8 <rmw_destroy_publisher>
 800d66e:	2801      	cmp	r0, #1
 800d670:	4606      	mov	r6, r0
 800d672:	d0f5      	beq.n	800d660 <rmw_destroy_node+0x50>
 800d674:	2c00      	cmp	r4, #0
 800d676:	d1dc      	bne.n	800d632 <rmw_destroy_node+0x22>
 800d678:	e7e3      	b.n	800d642 <rmw_destroy_node+0x32>
 800d67a:	4b21      	ldr	r3, [pc, #132]	@ (800d700 <rmw_destroy_node+0xf0>)
 800d67c:	681c      	ldr	r4, [r3, #0]
 800d67e:	b16c      	cbz	r4, 800d69c <rmw_destroy_node+0x8c>
 800d680:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800d684:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800d686:	429d      	cmp	r5, r3
 800d688:	d1f9      	bne.n	800d67e <rmw_destroy_node+0x6e>
 800d68a:	317c      	adds	r1, #124	@ 0x7c
 800d68c:	4638      	mov	r0, r7
 800d68e:	f000 f9e5 	bl	800da5c <rmw_destroy_service>
 800d692:	2801      	cmp	r0, #1
 800d694:	4606      	mov	r6, r0
 800d696:	d0e3      	beq.n	800d660 <rmw_destroy_node+0x50>
 800d698:	2c00      	cmp	r4, #0
 800d69a:	d1f1      	bne.n	800d680 <rmw_destroy_node+0x70>
 800d69c:	4b19      	ldr	r3, [pc, #100]	@ (800d704 <rmw_destroy_node+0xf4>)
 800d69e:	681c      	ldr	r4, [r3, #0]
 800d6a0:	b16c      	cbz	r4, 800d6be <rmw_destroy_node+0xae>
 800d6a2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800d6a6:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800d6a8:	429d      	cmp	r5, r3
 800d6aa:	d1f9      	bne.n	800d6a0 <rmw_destroy_node+0x90>
 800d6ac:	317c      	adds	r1, #124	@ 0x7c
 800d6ae:	4638      	mov	r0, r7
 800d6b0:	f007 fde6 	bl	8015280 <rmw_destroy_client>
 800d6b4:	2801      	cmp	r0, #1
 800d6b6:	4606      	mov	r6, r0
 800d6b8:	d0d2      	beq.n	800d660 <rmw_destroy_node+0x50>
 800d6ba:	2c00      	cmp	r4, #0
 800d6bc:	d1f1      	bne.n	800d6a2 <rmw_destroy_node+0x92>
 800d6be:	6928      	ldr	r0, [r5, #16]
 800d6c0:	696a      	ldr	r2, [r5, #20]
 800d6c2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d6c6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d6ca:	6819      	ldr	r1, [r3, #0]
 800d6cc:	f000 fe48 	bl	800e360 <uxr_buffer_delete_entity>
 800d6d0:	4602      	mov	r2, r0
 800d6d2:	6928      	ldr	r0, [r5, #16]
 800d6d4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800d6d8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800d6dc:	f000 fd72 	bl	800e1c4 <run_xrce_session>
 800d6e0:	2800      	cmp	r0, #0
 800d6e2:	bf08      	it	eq
 800d6e4:	2602      	moveq	r6, #2
 800d6e6:	4638      	mov	r0, r7
 800d6e8:	f000 fbfa 	bl	800dee0 <rmw_uxrce_fini_node_memory>
 800d6ec:	4630      	mov	r0, r6
 800d6ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6f0:	4626      	mov	r6, r4
 800d6f2:	e7a6      	b.n	800d642 <rmw_destroy_node+0x32>
 800d6f4:	080192b8 	.word	0x080192b8
 800d6f8:	2000abfc 	.word	0x2000abfc
 800d6fc:	2000ac3c 	.word	0x2000ac3c
 800d700:	2000ac0c 	.word	0x2000ac0c
 800d704:	2000631c 	.word	0x2000631c

0800d708 <rmw_node_get_graph_guard_condition>:
 800d708:	6843      	ldr	r3, [r0, #4]
 800d70a:	6918      	ldr	r0, [r3, #16]
 800d70c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800d710:	4770      	bx	lr
 800d712:	bf00      	nop

0800d714 <flush_session>:
 800d714:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800d716:	f001 be43 	b.w	800f3a0 <uxr_run_session_until_confirm_delivery>
 800d71a:	bf00      	nop

0800d71c <rmw_publish>:
 800d71c:	2800      	cmp	r0, #0
 800d71e:	d053      	beq.n	800d7c8 <rmw_publish+0xac>
 800d720:	b570      	push	{r4, r5, r6, lr}
 800d722:	460d      	mov	r5, r1
 800d724:	b08e      	sub	sp, #56	@ 0x38
 800d726:	2900      	cmp	r1, #0
 800d728:	d04b      	beq.n	800d7c2 <rmw_publish+0xa6>
 800d72a:	4604      	mov	r4, r0
 800d72c:	6800      	ldr	r0, [r0, #0]
 800d72e:	f000 fdc9 	bl	800e2c4 <is_uxrce_rmw_identifier_valid>
 800d732:	2800      	cmp	r0, #0
 800d734:	d045      	beq.n	800d7c2 <rmw_publish+0xa6>
 800d736:	6866      	ldr	r6, [r4, #4]
 800d738:	2e00      	cmp	r6, #0
 800d73a:	d042      	beq.n	800d7c2 <rmw_publish+0xa6>
 800d73c:	69b4      	ldr	r4, [r6, #24]
 800d73e:	4628      	mov	r0, r5
 800d740:	6923      	ldr	r3, [r4, #16]
 800d742:	4798      	blx	r3
 800d744:	69f3      	ldr	r3, [r6, #28]
 800d746:	9005      	str	r0, [sp, #20]
 800d748:	b113      	cbz	r3, 800d750 <rmw_publish+0x34>
 800d74a:	a805      	add	r0, sp, #20
 800d74c:	4798      	blx	r3
 800d74e:	9805      	ldr	r0, [sp, #20]
 800d750:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800d754:	691b      	ldr	r3, [r3, #16]
 800d756:	9000      	str	r0, [sp, #0]
 800d758:	6972      	ldr	r2, [r6, #20]
 800d75a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800d75c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800d760:	ab06      	add	r3, sp, #24
 800d762:	f003 f8ef 	bl	8010944 <uxr_prepare_output_stream>
 800d766:	b1d8      	cbz	r0, 800d7a0 <rmw_publish+0x84>
 800d768:	68a3      	ldr	r3, [r4, #8]
 800d76a:	a906      	add	r1, sp, #24
 800d76c:	4628      	mov	r0, r5
 800d76e:	4798      	blx	r3
 800d770:	6a33      	ldr	r3, [r6, #32]
 800d772:	4604      	mov	r4, r0
 800d774:	b10b      	cbz	r3, 800d77a <rmw_publish+0x5e>
 800d776:	a806      	add	r0, sp, #24
 800d778:	4798      	blx	r3
 800d77a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800d77e:	2b01      	cmp	r3, #1
 800d780:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800d784:	d022      	beq.n	800d7cc <rmw_publish+0xb0>
 800d786:	6918      	ldr	r0, [r3, #16]
 800d788:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800d78a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d78e:	f001 fe07 	bl	800f3a0 <uxr_run_session_until_confirm_delivery>
 800d792:	4020      	ands	r0, r4
 800d794:	b2c4      	uxtb	r4, r0
 800d796:	f084 0001 	eor.w	r0, r4, #1
 800d79a:	b2c0      	uxtb	r0, r0
 800d79c:	b00e      	add	sp, #56	@ 0x38
 800d79e:	bd70      	pop	{r4, r5, r6, pc}
 800d7a0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800d7a4:	6918      	ldr	r0, [r3, #16]
 800d7a6:	9b05      	ldr	r3, [sp, #20]
 800d7a8:	9300      	str	r3, [sp, #0]
 800d7aa:	4b0b      	ldr	r3, [pc, #44]	@ (800d7d8 <rmw_publish+0xbc>)
 800d7ac:	9301      	str	r3, [sp, #4]
 800d7ae:	9602      	str	r6, [sp, #8]
 800d7b0:	6972      	ldr	r2, [r6, #20]
 800d7b2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800d7b4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d7b8:	ab06      	add	r3, sp, #24
 800d7ba:	f003 f8f3 	bl	80109a4 <uxr_prepare_output_stream_fragmented>
 800d7be:	2800      	cmp	r0, #0
 800d7c0:	d1d2      	bne.n	800d768 <rmw_publish+0x4c>
 800d7c2:	2001      	movs	r0, #1
 800d7c4:	b00e      	add	sp, #56	@ 0x38
 800d7c6:	bd70      	pop	{r4, r5, r6, pc}
 800d7c8:	2001      	movs	r0, #1
 800d7ca:	4770      	bx	lr
 800d7cc:	6918      	ldr	r0, [r3, #16]
 800d7ce:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d7d2:	f001 fa25 	bl	800ec20 <uxr_flash_output_streams>
 800d7d6:	e7de      	b.n	800d796 <rmw_publish+0x7a>
 800d7d8:	0800d715 	.word	0x0800d715

0800d7dc <rmw_create_publisher>:
 800d7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7e0:	b087      	sub	sp, #28
 800d7e2:	2800      	cmp	r0, #0
 800d7e4:	f000 80cc 	beq.w	800d980 <rmw_create_publisher+0x1a4>
 800d7e8:	460e      	mov	r6, r1
 800d7ea:	2900      	cmp	r1, #0
 800d7ec:	f000 80c8 	beq.w	800d980 <rmw_create_publisher+0x1a4>
 800d7f0:	4604      	mov	r4, r0
 800d7f2:	6800      	ldr	r0, [r0, #0]
 800d7f4:	4615      	mov	r5, r2
 800d7f6:	4698      	mov	r8, r3
 800d7f8:	f000 fd64 	bl	800e2c4 <is_uxrce_rmw_identifier_valid>
 800d7fc:	2800      	cmp	r0, #0
 800d7fe:	f000 80bf 	beq.w	800d980 <rmw_create_publisher+0x1a4>
 800d802:	2d00      	cmp	r5, #0
 800d804:	f000 80bc 	beq.w	800d980 <rmw_create_publisher+0x1a4>
 800d808:	782b      	ldrb	r3, [r5, #0]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	f000 80b8 	beq.w	800d980 <rmw_create_publisher+0x1a4>
 800d810:	f1b8 0f00 	cmp.w	r8, #0
 800d814:	f000 80b4 	beq.w	800d980 <rmw_create_publisher+0x1a4>
 800d818:	485c      	ldr	r0, [pc, #368]	@ (800d98c <rmw_create_publisher+0x1b0>)
 800d81a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800d81e:	f007 fd0b 	bl	8015238 <get_memory>
 800d822:	2800      	cmp	r0, #0
 800d824:	f000 80ac 	beq.w	800d980 <rmw_create_publisher+0x1a4>
 800d828:	6884      	ldr	r4, [r0, #8]
 800d82a:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800d82e:	f007 fd6b 	bl	8015308 <rmw_get_implementation_identifier>
 800d832:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800d836:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800d83a:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800d83e:	4628      	mov	r0, r5
 800d840:	f7f2 fcf8 	bl	8000234 <strlen>
 800d844:	3001      	adds	r0, #1
 800d846:	283c      	cmp	r0, #60	@ 0x3c
 800d848:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800d84c:	f200 8091 	bhi.w	800d972 <rmw_create_publisher+0x196>
 800d850:	4a4f      	ldr	r2, [pc, #316]	@ (800d990 <rmw_create_publisher+0x1b4>)
 800d852:	462b      	mov	r3, r5
 800d854:	213c      	movs	r1, #60	@ 0x3c
 800d856:	4650      	mov	r0, sl
 800d858:	f009 fece 	bl	80175f8 <sniprintf>
 800d85c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d860:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800d862:	4641      	mov	r1, r8
 800d864:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800d868:	2250      	movs	r2, #80	@ 0x50
 800d86a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800d86e:	f00a f866 	bl	801793e <memcpy>
 800d872:	f898 3008 	ldrb.w	r3, [r8, #8]
 800d876:	4947      	ldr	r1, [pc, #284]	@ (800d994 <rmw_create_publisher+0x1b8>)
 800d878:	2b02      	cmp	r3, #2
 800d87a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d87e:	bf0c      	ite	eq
 800d880:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800d884:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800d888:	67a3      	str	r3, [r4, #120]	@ 0x78
 800d88a:	2300      	movs	r3, #0
 800d88c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800d890:	4630      	mov	r0, r6
 800d892:	f000 fd25 	bl	800e2e0 <get_message_typesupport_handle>
 800d896:	2800      	cmp	r0, #0
 800d898:	d06b      	beq.n	800d972 <rmw_create_publisher+0x196>
 800d89a:	6842      	ldr	r2, [r0, #4]
 800d89c:	61a2      	str	r2, [r4, #24]
 800d89e:	2a00      	cmp	r2, #0
 800d8a0:	d067      	beq.n	800d972 <rmw_create_publisher+0x196>
 800d8a2:	4629      	mov	r1, r5
 800d8a4:	4643      	mov	r3, r8
 800d8a6:	4648      	mov	r0, r9
 800d8a8:	f007 fd34 	bl	8015314 <create_topic>
 800d8ac:	6260      	str	r0, [r4, #36]	@ 0x24
 800d8ae:	2800      	cmp	r0, #0
 800d8b0:	d063      	beq.n	800d97a <rmw_create_publisher+0x19e>
 800d8b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d8b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d8ba:	2103      	movs	r1, #3
 800d8bc:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800d8c0:	1c42      	adds	r2, r0, #1
 800d8c2:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800d8c6:	f000 ff67 	bl	800e798 <uxr_object_id>
 800d8ca:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800d8ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d8d2:	6120      	str	r0, [r4, #16]
 800d8d4:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800d8d8:	6910      	ldr	r0, [r2, #16]
 800d8da:	2506      	movs	r5, #6
 800d8dc:	9500      	str	r5, [sp, #0]
 800d8de:	6819      	ldr	r1, [r3, #0]
 800d8e0:	6922      	ldr	r2, [r4, #16]
 800d8e2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800d8e6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d8ea:	f000 fded 	bl	800e4c8 <uxr_buffer_create_publisher_bin>
 800d8ee:	4602      	mov	r2, r0
 800d8f0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d8f4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800d8f8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800d8fc:	f000 fc62 	bl	800e1c4 <run_xrce_session>
 800d900:	b3b8      	cbz	r0, 800d972 <rmw_create_publisher+0x196>
 800d902:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d906:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d90a:	2105      	movs	r1, #5
 800d90c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800d910:	1c42      	adds	r2, r0, #1
 800d912:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800d916:	f000 ff3f 	bl	800e798 <uxr_object_id>
 800d91a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800d91e:	6160      	str	r0, [r4, #20]
 800d920:	691e      	ldr	r6, [r3, #16]
 800d922:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d926:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800d92a:	f10d 0a10 	add.w	sl, sp, #16
 800d92e:	4641      	mov	r1, r8
 800d930:	4650      	mov	r0, sl
 800d932:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800d936:	f000 fc61 	bl	800e1fc <convert_qos_profile>
 800d93a:	9503      	str	r5, [sp, #12]
 800d93c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800d940:	9001      	str	r0, [sp, #4]
 800d942:	f8ad 1008 	strh.w	r1, [sp, #8]
 800d946:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d94a:	9300      	str	r3, [sp, #0]
 800d94c:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800d950:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800d954:	f8d8 1000 	ldr.w	r1, [r8]
 800d958:	4630      	mov	r0, r6
 800d95a:	f000 fde5 	bl	800e528 <uxr_buffer_create_datawriter_bin>
 800d95e:	4602      	mov	r2, r0
 800d960:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d964:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800d968:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800d96c:	f000 fc2a 	bl	800e1c4 <run_xrce_session>
 800d970:	b938      	cbnz	r0, 800d982 <rmw_create_publisher+0x1a6>
 800d972:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800d974:	b108      	cbz	r0, 800d97a <rmw_create_publisher+0x19e>
 800d976:	f000 fb23 	bl	800dfc0 <rmw_uxrce_fini_topic_memory>
 800d97a:	4638      	mov	r0, r7
 800d97c:	f000 fac8 	bl	800df10 <rmw_uxrce_fini_publisher_memory>
 800d980:	2700      	movs	r7, #0
 800d982:	4638      	mov	r0, r7
 800d984:	b007      	add	sp, #28
 800d986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d98a:	bf00      	nop
 800d98c:	2000abfc 	.word	0x2000abfc
 800d990:	08018b2c 	.word	0x08018b2c
 800d994:	08018914 	.word	0x08018914

0800d998 <rmw_publisher_get_actual_qos>:
 800d998:	b150      	cbz	r0, 800d9b0 <rmw_publisher_get_actual_qos+0x18>
 800d99a:	b508      	push	{r3, lr}
 800d99c:	460b      	mov	r3, r1
 800d99e:	b149      	cbz	r1, 800d9b4 <rmw_publisher_get_actual_qos+0x1c>
 800d9a0:	6841      	ldr	r1, [r0, #4]
 800d9a2:	2250      	movs	r2, #80	@ 0x50
 800d9a4:	3128      	adds	r1, #40	@ 0x28
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f009 ffc9 	bl	801793e <memcpy>
 800d9ac:	2000      	movs	r0, #0
 800d9ae:	bd08      	pop	{r3, pc}
 800d9b0:	200b      	movs	r0, #11
 800d9b2:	4770      	bx	lr
 800d9b4:	200b      	movs	r0, #11
 800d9b6:	bd08      	pop	{r3, pc}

0800d9b8 <rmw_destroy_publisher>:
 800d9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ba:	b128      	cbz	r0, 800d9c8 <rmw_destroy_publisher+0x10>
 800d9bc:	4604      	mov	r4, r0
 800d9be:	6800      	ldr	r0, [r0, #0]
 800d9c0:	460d      	mov	r5, r1
 800d9c2:	f000 fc7f 	bl	800e2c4 <is_uxrce_rmw_identifier_valid>
 800d9c6:	b910      	cbnz	r0, 800d9ce <rmw_destroy_publisher+0x16>
 800d9c8:	2401      	movs	r4, #1
 800d9ca:	4620      	mov	r0, r4
 800d9cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9ce:	6863      	ldr	r3, [r4, #4]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d0f9      	beq.n	800d9c8 <rmw_destroy_publisher+0x10>
 800d9d4:	2d00      	cmp	r5, #0
 800d9d6:	d0f7      	beq.n	800d9c8 <rmw_destroy_publisher+0x10>
 800d9d8:	6828      	ldr	r0, [r5, #0]
 800d9da:	f000 fc73 	bl	800e2c4 <is_uxrce_rmw_identifier_valid>
 800d9de:	2800      	cmp	r0, #0
 800d9e0:	d0f2      	beq.n	800d9c8 <rmw_destroy_publisher+0x10>
 800d9e2:	686c      	ldr	r4, [r5, #4]
 800d9e4:	2c00      	cmp	r4, #0
 800d9e6:	d0ef      	beq.n	800d9c8 <rmw_destroy_publisher+0x10>
 800d9e8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800d9ea:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800d9ee:	f007 fce1 	bl	80153b4 <destroy_topic>
 800d9f2:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800d9f6:	6962      	ldr	r2, [r4, #20]
 800d9f8:	6918      	ldr	r0, [r3, #16]
 800d9fa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d9fe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800da02:	6819      	ldr	r1, [r3, #0]
 800da04:	f000 fcac 	bl	800e360 <uxr_buffer_delete_entity>
 800da08:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800da0c:	6922      	ldr	r2, [r4, #16]
 800da0e:	691b      	ldr	r3, [r3, #16]
 800da10:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800da14:	4604      	mov	r4, r0
 800da16:	6809      	ldr	r1, [r1, #0]
 800da18:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800da1c:	f000 fca0 	bl	800e360 <uxr_buffer_delete_entity>
 800da20:	693e      	ldr	r6, [r7, #16]
 800da22:	4622      	mov	r2, r4
 800da24:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800da28:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800da2c:	4604      	mov	r4, r0
 800da2e:	4630      	mov	r0, r6
 800da30:	f000 fbc8 	bl	800e1c4 <run_xrce_session>
 800da34:	693e      	ldr	r6, [r7, #16]
 800da36:	4622      	mov	r2, r4
 800da38:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800da3c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800da40:	4604      	mov	r4, r0
 800da42:	4630      	mov	r0, r6
 800da44:	f000 fbbe 	bl	800e1c4 <run_xrce_session>
 800da48:	b12c      	cbz	r4, 800da56 <rmw_destroy_publisher+0x9e>
 800da4a:	b120      	cbz	r0, 800da56 <rmw_destroy_publisher+0x9e>
 800da4c:	2400      	movs	r4, #0
 800da4e:	4628      	mov	r0, r5
 800da50:	f000 fa5e 	bl	800df10 <rmw_uxrce_fini_publisher_memory>
 800da54:	e7b9      	b.n	800d9ca <rmw_destroy_publisher+0x12>
 800da56:	2402      	movs	r4, #2
 800da58:	e7f9      	b.n	800da4e <rmw_destroy_publisher+0x96>
 800da5a:	bf00      	nop

0800da5c <rmw_destroy_service>:
 800da5c:	b570      	push	{r4, r5, r6, lr}
 800da5e:	b128      	cbz	r0, 800da6c <rmw_destroy_service+0x10>
 800da60:	4604      	mov	r4, r0
 800da62:	6800      	ldr	r0, [r0, #0]
 800da64:	460d      	mov	r5, r1
 800da66:	f000 fc2d 	bl	800e2c4 <is_uxrce_rmw_identifier_valid>
 800da6a:	b910      	cbnz	r0, 800da72 <rmw_destroy_service+0x16>
 800da6c:	2401      	movs	r4, #1
 800da6e:	4620      	mov	r0, r4
 800da70:	bd70      	pop	{r4, r5, r6, pc}
 800da72:	6863      	ldr	r3, [r4, #4]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d0f9      	beq.n	800da6c <rmw_destroy_service+0x10>
 800da78:	2d00      	cmp	r5, #0
 800da7a:	d0f7      	beq.n	800da6c <rmw_destroy_service+0x10>
 800da7c:	6828      	ldr	r0, [r5, #0]
 800da7e:	f000 fc21 	bl	800e2c4 <is_uxrce_rmw_identifier_valid>
 800da82:	2800      	cmp	r0, #0
 800da84:	d0f2      	beq.n	800da6c <rmw_destroy_service+0x10>
 800da86:	686e      	ldr	r6, [r5, #4]
 800da88:	2e00      	cmp	r6, #0
 800da8a:	d0ef      	beq.n	800da6c <rmw_destroy_service+0x10>
 800da8c:	6864      	ldr	r4, [r4, #4]
 800da8e:	6932      	ldr	r2, [r6, #16]
 800da90:	6920      	ldr	r0, [r4, #16]
 800da92:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800da96:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800da9a:	6819      	ldr	r1, [r3, #0]
 800da9c:	f000 feac 	bl	800e7f8 <uxr_buffer_cancel_data>
 800daa0:	4602      	mov	r2, r0
 800daa2:	6920      	ldr	r0, [r4, #16]
 800daa4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800daa8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800daac:	f000 fb8a 	bl	800e1c4 <run_xrce_session>
 800dab0:	6920      	ldr	r0, [r4, #16]
 800dab2:	6932      	ldr	r2, [r6, #16]
 800dab4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800dab8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dabc:	6819      	ldr	r1, [r3, #0]
 800dabe:	f000 fc4f 	bl	800e360 <uxr_buffer_delete_entity>
 800dac2:	4602      	mov	r2, r0
 800dac4:	6920      	ldr	r0, [r4, #16]
 800dac6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800daca:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800dace:	f000 fb79 	bl	800e1c4 <run_xrce_session>
 800dad2:	2800      	cmp	r0, #0
 800dad4:	4628      	mov	r0, r5
 800dad6:	bf14      	ite	ne
 800dad8:	2400      	movne	r4, #0
 800dada:	2402      	moveq	r4, #2
 800dadc:	f000 fa44 	bl	800df68 <rmw_uxrce_fini_service_memory>
 800dae0:	e7c5      	b.n	800da6e <rmw_destroy_service+0x12>
 800dae2:	bf00      	nop

0800dae4 <rmw_destroy_subscription>:
 800dae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dae6:	b128      	cbz	r0, 800daf4 <rmw_destroy_subscription+0x10>
 800dae8:	4604      	mov	r4, r0
 800daea:	6800      	ldr	r0, [r0, #0]
 800daec:	460d      	mov	r5, r1
 800daee:	f000 fbe9 	bl	800e2c4 <is_uxrce_rmw_identifier_valid>
 800daf2:	b910      	cbnz	r0, 800dafa <rmw_destroy_subscription+0x16>
 800daf4:	2401      	movs	r4, #1
 800daf6:	4620      	mov	r0, r4
 800daf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dafa:	6863      	ldr	r3, [r4, #4]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d0f9      	beq.n	800daf4 <rmw_destroy_subscription+0x10>
 800db00:	2d00      	cmp	r5, #0
 800db02:	d0f7      	beq.n	800daf4 <rmw_destroy_subscription+0x10>
 800db04:	6828      	ldr	r0, [r5, #0]
 800db06:	f000 fbdd 	bl	800e2c4 <is_uxrce_rmw_identifier_valid>
 800db0a:	2800      	cmp	r0, #0
 800db0c:	d0f2      	beq.n	800daf4 <rmw_destroy_subscription+0x10>
 800db0e:	686c      	ldr	r4, [r5, #4]
 800db10:	2c00      	cmp	r4, #0
 800db12:	d0ef      	beq.n	800daf4 <rmw_destroy_subscription+0x10>
 800db14:	6a26      	ldr	r6, [r4, #32]
 800db16:	6962      	ldr	r2, [r4, #20]
 800db18:	6930      	ldr	r0, [r6, #16]
 800db1a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800db1e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800db22:	6819      	ldr	r1, [r3, #0]
 800db24:	f000 fe68 	bl	800e7f8 <uxr_buffer_cancel_data>
 800db28:	4602      	mov	r2, r0
 800db2a:	6930      	ldr	r0, [r6, #16]
 800db2c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800db30:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800db34:	f000 fb46 	bl	800e1c4 <run_xrce_session>
 800db38:	69e0      	ldr	r0, [r4, #28]
 800db3a:	f007 fc3b 	bl	80153b4 <destroy_topic>
 800db3e:	6a23      	ldr	r3, [r4, #32]
 800db40:	6962      	ldr	r2, [r4, #20]
 800db42:	6918      	ldr	r0, [r3, #16]
 800db44:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800db48:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800db4c:	6819      	ldr	r1, [r3, #0]
 800db4e:	f000 fc07 	bl	800e360 <uxr_buffer_delete_entity>
 800db52:	6a23      	ldr	r3, [r4, #32]
 800db54:	6922      	ldr	r2, [r4, #16]
 800db56:	691b      	ldr	r3, [r3, #16]
 800db58:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800db5c:	4604      	mov	r4, r0
 800db5e:	6809      	ldr	r1, [r1, #0]
 800db60:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800db64:	f000 fbfc 	bl	800e360 <uxr_buffer_delete_entity>
 800db68:	6937      	ldr	r7, [r6, #16]
 800db6a:	4622      	mov	r2, r4
 800db6c:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800db70:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800db74:	4604      	mov	r4, r0
 800db76:	4638      	mov	r0, r7
 800db78:	f000 fb24 	bl	800e1c4 <run_xrce_session>
 800db7c:	6936      	ldr	r6, [r6, #16]
 800db7e:	4622      	mov	r2, r4
 800db80:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800db84:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800db88:	4604      	mov	r4, r0
 800db8a:	4630      	mov	r0, r6
 800db8c:	f000 fb1a 	bl	800e1c4 <run_xrce_session>
 800db90:	b12c      	cbz	r4, 800db9e <rmw_destroy_subscription+0xba>
 800db92:	b120      	cbz	r0, 800db9e <rmw_destroy_subscription+0xba>
 800db94:	2400      	movs	r4, #0
 800db96:	4628      	mov	r0, r5
 800db98:	f000 f9d0 	bl	800df3c <rmw_uxrce_fini_subscription_memory>
 800db9c:	e7ab      	b.n	800daf6 <rmw_destroy_subscription+0x12>
 800db9e:	2402      	movs	r4, #2
 800dba0:	e7f9      	b.n	800db96 <rmw_destroy_subscription+0xb2>
 800dba2:	bf00      	nop

0800dba4 <rmw_uxrce_transport_init>:
 800dba4:	b508      	push	{r3, lr}
 800dba6:	b108      	cbz	r0, 800dbac <rmw_uxrce_transport_init+0x8>
 800dba8:	f100 0210 	add.w	r2, r0, #16
 800dbac:	b139      	cbz	r1, 800dbbe <rmw_uxrce_transport_init+0x1a>
 800dbae:	6949      	ldr	r1, [r1, #20]
 800dbb0:	4610      	mov	r0, r2
 800dbb2:	f000 fdb9 	bl	800e728 <uxr_init_custom_transport>
 800dbb6:	f080 0001 	eor.w	r0, r0, #1
 800dbba:	b2c0      	uxtb	r0, r0
 800dbbc:	bd08      	pop	{r3, pc}
 800dbbe:	4b04      	ldr	r3, [pc, #16]	@ (800dbd0 <rmw_uxrce_transport_init+0x2c>)
 800dbc0:	4610      	mov	r0, r2
 800dbc2:	6859      	ldr	r1, [r3, #4]
 800dbc4:	f000 fdb0 	bl	800e728 <uxr_init_custom_transport>
 800dbc8:	f080 0001 	eor.w	r0, r0, #1
 800dbcc:	b2c0      	uxtb	r0, r0
 800dbce:	bd08      	pop	{r3, pc}
 800dbd0:	200062c4 	.word	0x200062c4

0800dbd4 <rmw_uros_epoch_nanos>:
 800dbd4:	4b05      	ldr	r3, [pc, #20]	@ (800dbec <rmw_uros_epoch_nanos+0x18>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	b123      	cbz	r3, 800dbe4 <rmw_uros_epoch_nanos+0x10>
 800dbda:	6898      	ldr	r0, [r3, #8]
 800dbdc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dbe0:	f001 b814 	b.w	800ec0c <uxr_epoch_nanos>
 800dbe4:	2000      	movs	r0, #0
 800dbe6:	2100      	movs	r1, #0
 800dbe8:	4770      	bx	lr
 800dbea:	bf00      	nop
 800dbec:	2000ac1c 	.word	0x2000ac1c

0800dbf0 <rmw_uros_sync_session>:
 800dbf0:	b508      	push	{r3, lr}
 800dbf2:	4b07      	ldr	r3, [pc, #28]	@ (800dc10 <rmw_uros_sync_session+0x20>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	b14b      	cbz	r3, 800dc0c <rmw_uros_sync_session+0x1c>
 800dbf8:	4601      	mov	r1, r0
 800dbfa:	6898      	ldr	r0, [r3, #8]
 800dbfc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dc00:	f001 fc46 	bl	800f490 <uxr_sync_session>
 800dc04:	f080 0001 	eor.w	r0, r0, #1
 800dc08:	b2c0      	uxtb	r0, r0
 800dc0a:	bd08      	pop	{r3, pc}
 800dc0c:	2001      	movs	r0, #1
 800dc0e:	bd08      	pop	{r3, pc}
 800dc10:	2000ac1c 	.word	0x2000ac1c

0800dc14 <rmw_uxrce_init_service_memory>:
 800dc14:	b1e2      	cbz	r2, 800dc50 <rmw_uxrce_init_service_memory+0x3c>
 800dc16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc1a:	7b05      	ldrb	r5, [r0, #12]
 800dc1c:	4606      	mov	r6, r0
 800dc1e:	b9ad      	cbnz	r5, 800dc4c <rmw_uxrce_init_service_memory+0x38>
 800dc20:	23c8      	movs	r3, #200	@ 0xc8
 800dc22:	e9c0 5500 	strd	r5, r5, [r0]
 800dc26:	6083      	str	r3, [r0, #8]
 800dc28:	f240 1301 	movw	r3, #257	@ 0x101
 800dc2c:	4617      	mov	r7, r2
 800dc2e:	8183      	strh	r3, [r0, #12]
 800dc30:	460c      	mov	r4, r1
 800dc32:	46a8      	mov	r8, r5
 800dc34:	4621      	mov	r1, r4
 800dc36:	4630      	mov	r0, r6
 800dc38:	3501      	adds	r5, #1
 800dc3a:	f007 fb0d 	bl	8015258 <put_memory>
 800dc3e:	42af      	cmp	r7, r5
 800dc40:	60a4      	str	r4, [r4, #8]
 800dc42:	f884 800c 	strb.w	r8, [r4, #12]
 800dc46:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800dc4a:	d1f3      	bne.n	800dc34 <rmw_uxrce_init_service_memory+0x20>
 800dc4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc50:	4770      	bx	lr
 800dc52:	bf00      	nop

0800dc54 <rmw_uxrce_init_client_memory>:
 800dc54:	b1e2      	cbz	r2, 800dc90 <rmw_uxrce_init_client_memory+0x3c>
 800dc56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc5a:	7b05      	ldrb	r5, [r0, #12]
 800dc5c:	4606      	mov	r6, r0
 800dc5e:	b9ad      	cbnz	r5, 800dc8c <rmw_uxrce_init_client_memory+0x38>
 800dc60:	23c8      	movs	r3, #200	@ 0xc8
 800dc62:	e9c0 5500 	strd	r5, r5, [r0]
 800dc66:	6083      	str	r3, [r0, #8]
 800dc68:	f240 1301 	movw	r3, #257	@ 0x101
 800dc6c:	4617      	mov	r7, r2
 800dc6e:	8183      	strh	r3, [r0, #12]
 800dc70:	460c      	mov	r4, r1
 800dc72:	46a8      	mov	r8, r5
 800dc74:	4621      	mov	r1, r4
 800dc76:	4630      	mov	r0, r6
 800dc78:	3501      	adds	r5, #1
 800dc7a:	f007 faed 	bl	8015258 <put_memory>
 800dc7e:	42af      	cmp	r7, r5
 800dc80:	60a4      	str	r4, [r4, #8]
 800dc82:	f884 800c 	strb.w	r8, [r4, #12]
 800dc86:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800dc8a:	d1f3      	bne.n	800dc74 <rmw_uxrce_init_client_memory+0x20>
 800dc8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc90:	4770      	bx	lr
 800dc92:	bf00      	nop

0800dc94 <rmw_uxrce_init_publisher_memory>:
 800dc94:	b1e2      	cbz	r2, 800dcd0 <rmw_uxrce_init_publisher_memory+0x3c>
 800dc96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc9a:	7b05      	ldrb	r5, [r0, #12]
 800dc9c:	4606      	mov	r6, r0
 800dc9e:	b9ad      	cbnz	r5, 800dccc <rmw_uxrce_init_publisher_memory+0x38>
 800dca0:	23d8      	movs	r3, #216	@ 0xd8
 800dca2:	e9c0 5500 	strd	r5, r5, [r0]
 800dca6:	6083      	str	r3, [r0, #8]
 800dca8:	f240 1301 	movw	r3, #257	@ 0x101
 800dcac:	4617      	mov	r7, r2
 800dcae:	8183      	strh	r3, [r0, #12]
 800dcb0:	460c      	mov	r4, r1
 800dcb2:	46a8      	mov	r8, r5
 800dcb4:	4621      	mov	r1, r4
 800dcb6:	4630      	mov	r0, r6
 800dcb8:	3501      	adds	r5, #1
 800dcba:	f007 facd 	bl	8015258 <put_memory>
 800dcbe:	42af      	cmp	r7, r5
 800dcc0:	60a4      	str	r4, [r4, #8]
 800dcc2:	f884 800c 	strb.w	r8, [r4, #12]
 800dcc6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800dcca:	d1f3      	bne.n	800dcb4 <rmw_uxrce_init_publisher_memory+0x20>
 800dccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcd0:	4770      	bx	lr
 800dcd2:	bf00      	nop

0800dcd4 <rmw_uxrce_init_subscription_memory>:
 800dcd4:	b1e2      	cbz	r2, 800dd10 <rmw_uxrce_init_subscription_memory+0x3c>
 800dcd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcda:	7b05      	ldrb	r5, [r0, #12]
 800dcdc:	4606      	mov	r6, r0
 800dcde:	b9ad      	cbnz	r5, 800dd0c <rmw_uxrce_init_subscription_memory+0x38>
 800dce0:	23d8      	movs	r3, #216	@ 0xd8
 800dce2:	e9c0 5500 	strd	r5, r5, [r0]
 800dce6:	6083      	str	r3, [r0, #8]
 800dce8:	f240 1301 	movw	r3, #257	@ 0x101
 800dcec:	4617      	mov	r7, r2
 800dcee:	8183      	strh	r3, [r0, #12]
 800dcf0:	460c      	mov	r4, r1
 800dcf2:	46a8      	mov	r8, r5
 800dcf4:	4621      	mov	r1, r4
 800dcf6:	4630      	mov	r0, r6
 800dcf8:	3501      	adds	r5, #1
 800dcfa:	f007 faad 	bl	8015258 <put_memory>
 800dcfe:	42af      	cmp	r7, r5
 800dd00:	60a4      	str	r4, [r4, #8]
 800dd02:	f884 800c 	strb.w	r8, [r4, #12]
 800dd06:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800dd0a:	d1f3      	bne.n	800dcf4 <rmw_uxrce_init_subscription_memory+0x20>
 800dd0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd10:	4770      	bx	lr
 800dd12:	bf00      	nop

0800dd14 <rmw_uxrce_init_node_memory>:
 800dd14:	b1e2      	cbz	r2, 800dd50 <rmw_uxrce_init_node_memory+0x3c>
 800dd16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd1a:	7b05      	ldrb	r5, [r0, #12]
 800dd1c:	4606      	mov	r6, r0
 800dd1e:	b9ad      	cbnz	r5, 800dd4c <rmw_uxrce_init_node_memory+0x38>
 800dd20:	23a4      	movs	r3, #164	@ 0xa4
 800dd22:	e9c0 5500 	strd	r5, r5, [r0]
 800dd26:	6083      	str	r3, [r0, #8]
 800dd28:	f240 1301 	movw	r3, #257	@ 0x101
 800dd2c:	4617      	mov	r7, r2
 800dd2e:	8183      	strh	r3, [r0, #12]
 800dd30:	460c      	mov	r4, r1
 800dd32:	46a8      	mov	r8, r5
 800dd34:	4621      	mov	r1, r4
 800dd36:	4630      	mov	r0, r6
 800dd38:	3501      	adds	r5, #1
 800dd3a:	f007 fa8d 	bl	8015258 <put_memory>
 800dd3e:	42af      	cmp	r7, r5
 800dd40:	60a4      	str	r4, [r4, #8]
 800dd42:	f884 800c 	strb.w	r8, [r4, #12]
 800dd46:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800dd4a:	d1f3      	bne.n	800dd34 <rmw_uxrce_init_node_memory+0x20>
 800dd4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd50:	4770      	bx	lr
 800dd52:	bf00      	nop

0800dd54 <rmw_uxrce_init_session_memory>:
 800dd54:	b1ea      	cbz	r2, 800dd92 <rmw_uxrce_init_session_memory+0x3e>
 800dd56:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd5a:	7b05      	ldrb	r5, [r0, #12]
 800dd5c:	4606      	mov	r6, r0
 800dd5e:	b9b5      	cbnz	r5, 800dd8e <rmw_uxrce_init_session_memory+0x3a>
 800dd60:	e9c0 5500 	strd	r5, r5, [r0]
 800dd64:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800dd68:	f240 1301 	movw	r3, #257	@ 0x101
 800dd6c:	4617      	mov	r7, r2
 800dd6e:	f8c0 8008 	str.w	r8, [r0, #8]
 800dd72:	460c      	mov	r4, r1
 800dd74:	8183      	strh	r3, [r0, #12]
 800dd76:	46a9      	mov	r9, r5
 800dd78:	4621      	mov	r1, r4
 800dd7a:	4630      	mov	r0, r6
 800dd7c:	3501      	adds	r5, #1
 800dd7e:	f007 fa6b 	bl	8015258 <put_memory>
 800dd82:	42af      	cmp	r7, r5
 800dd84:	60a4      	str	r4, [r4, #8]
 800dd86:	f884 900c 	strb.w	r9, [r4, #12]
 800dd8a:	4444      	add	r4, r8
 800dd8c:	d1f4      	bne.n	800dd78 <rmw_uxrce_init_session_memory+0x24>
 800dd8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd92:	4770      	bx	lr

0800dd94 <rmw_uxrce_init_topic_memory>:
 800dd94:	b1e2      	cbz	r2, 800ddd0 <rmw_uxrce_init_topic_memory+0x3c>
 800dd96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd9a:	7b05      	ldrb	r5, [r0, #12]
 800dd9c:	4606      	mov	r6, r0
 800dd9e:	b9ad      	cbnz	r5, 800ddcc <rmw_uxrce_init_topic_memory+0x38>
 800dda0:	231c      	movs	r3, #28
 800dda2:	e9c0 5500 	strd	r5, r5, [r0]
 800dda6:	6083      	str	r3, [r0, #8]
 800dda8:	f240 1301 	movw	r3, #257	@ 0x101
 800ddac:	4617      	mov	r7, r2
 800ddae:	8183      	strh	r3, [r0, #12]
 800ddb0:	460c      	mov	r4, r1
 800ddb2:	46a8      	mov	r8, r5
 800ddb4:	4621      	mov	r1, r4
 800ddb6:	4630      	mov	r0, r6
 800ddb8:	3501      	adds	r5, #1
 800ddba:	f007 fa4d 	bl	8015258 <put_memory>
 800ddbe:	42af      	cmp	r7, r5
 800ddc0:	60a4      	str	r4, [r4, #8]
 800ddc2:	f884 800c 	strb.w	r8, [r4, #12]
 800ddc6:	f104 041c 	add.w	r4, r4, #28
 800ddca:	d1f3      	bne.n	800ddb4 <rmw_uxrce_init_topic_memory+0x20>
 800ddcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddd0:	4770      	bx	lr
 800ddd2:	bf00      	nop

0800ddd4 <rmw_uxrce_init_static_input_buffer_memory>:
 800ddd4:	b1ea      	cbz	r2, 800de12 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800ddd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddda:	7b05      	ldrb	r5, [r0, #12]
 800dddc:	4606      	mov	r6, r0
 800ddde:	b9b5      	cbnz	r5, 800de0e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800dde0:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800dde4:	e9c0 5500 	strd	r5, r5, [r0]
 800dde8:	6083      	str	r3, [r0, #8]
 800ddea:	f240 1301 	movw	r3, #257	@ 0x101
 800ddee:	4617      	mov	r7, r2
 800ddf0:	8183      	strh	r3, [r0, #12]
 800ddf2:	460c      	mov	r4, r1
 800ddf4:	46a8      	mov	r8, r5
 800ddf6:	4621      	mov	r1, r4
 800ddf8:	4630      	mov	r0, r6
 800ddfa:	3501      	adds	r5, #1
 800ddfc:	f007 fa2c 	bl	8015258 <put_memory>
 800de00:	42af      	cmp	r7, r5
 800de02:	60a4      	str	r4, [r4, #8]
 800de04:	f884 800c 	strb.w	r8, [r4, #12]
 800de08:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800de0c:	d1f3      	bne.n	800ddf6 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800de0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de12:	4770      	bx	lr

0800de14 <rmw_uxrce_init_init_options_impl_memory>:
 800de14:	b1e2      	cbz	r2, 800de50 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800de16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de1a:	7b05      	ldrb	r5, [r0, #12]
 800de1c:	4606      	mov	r6, r0
 800de1e:	b9ad      	cbnz	r5, 800de4c <rmw_uxrce_init_init_options_impl_memory+0x38>
 800de20:	232c      	movs	r3, #44	@ 0x2c
 800de22:	e9c0 5500 	strd	r5, r5, [r0]
 800de26:	6083      	str	r3, [r0, #8]
 800de28:	f240 1301 	movw	r3, #257	@ 0x101
 800de2c:	4617      	mov	r7, r2
 800de2e:	8183      	strh	r3, [r0, #12]
 800de30:	460c      	mov	r4, r1
 800de32:	46a8      	mov	r8, r5
 800de34:	4621      	mov	r1, r4
 800de36:	4630      	mov	r0, r6
 800de38:	3501      	adds	r5, #1
 800de3a:	f007 fa0d 	bl	8015258 <put_memory>
 800de3e:	42af      	cmp	r7, r5
 800de40:	60a4      	str	r4, [r4, #8]
 800de42:	f884 800c 	strb.w	r8, [r4, #12]
 800de46:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800de4a:	d1f3      	bne.n	800de34 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800de4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de50:	4770      	bx	lr
 800de52:	bf00      	nop

0800de54 <rmw_uxrce_init_wait_set_memory>:
 800de54:	b1e2      	cbz	r2, 800de90 <rmw_uxrce_init_wait_set_memory+0x3c>
 800de56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de5a:	7b05      	ldrb	r5, [r0, #12]
 800de5c:	4606      	mov	r6, r0
 800de5e:	b9ad      	cbnz	r5, 800de8c <rmw_uxrce_init_wait_set_memory+0x38>
 800de60:	231c      	movs	r3, #28
 800de62:	e9c0 5500 	strd	r5, r5, [r0]
 800de66:	6083      	str	r3, [r0, #8]
 800de68:	f240 1301 	movw	r3, #257	@ 0x101
 800de6c:	4617      	mov	r7, r2
 800de6e:	8183      	strh	r3, [r0, #12]
 800de70:	460c      	mov	r4, r1
 800de72:	46a8      	mov	r8, r5
 800de74:	4621      	mov	r1, r4
 800de76:	4630      	mov	r0, r6
 800de78:	3501      	adds	r5, #1
 800de7a:	f007 f9ed 	bl	8015258 <put_memory>
 800de7e:	42af      	cmp	r7, r5
 800de80:	60a4      	str	r4, [r4, #8]
 800de82:	f884 800c 	strb.w	r8, [r4, #12]
 800de86:	f104 041c 	add.w	r4, r4, #28
 800de8a:	d1f3      	bne.n	800de74 <rmw_uxrce_init_wait_set_memory+0x20>
 800de8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de90:	4770      	bx	lr
 800de92:	bf00      	nop

0800de94 <rmw_uxrce_init_guard_condition_memory>:
 800de94:	b1e2      	cbz	r2, 800ded0 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800de96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de9a:	7b05      	ldrb	r5, [r0, #12]
 800de9c:	4606      	mov	r6, r0
 800de9e:	b9ad      	cbnz	r5, 800decc <rmw_uxrce_init_guard_condition_memory+0x38>
 800dea0:	2320      	movs	r3, #32
 800dea2:	e9c0 5500 	strd	r5, r5, [r0]
 800dea6:	6083      	str	r3, [r0, #8]
 800dea8:	f240 1301 	movw	r3, #257	@ 0x101
 800deac:	4617      	mov	r7, r2
 800deae:	8183      	strh	r3, [r0, #12]
 800deb0:	460c      	mov	r4, r1
 800deb2:	46a8      	mov	r8, r5
 800deb4:	4621      	mov	r1, r4
 800deb6:	4630      	mov	r0, r6
 800deb8:	3501      	adds	r5, #1
 800deba:	f007 f9cd 	bl	8015258 <put_memory>
 800debe:	42af      	cmp	r7, r5
 800dec0:	60a4      	str	r4, [r4, #8]
 800dec2:	f884 800c 	strb.w	r8, [r4, #12]
 800dec6:	f104 0420 	add.w	r4, r4, #32
 800deca:	d1f3      	bne.n	800deb4 <rmw_uxrce_init_guard_condition_memory+0x20>
 800decc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ded0:	4770      	bx	lr
 800ded2:	bf00      	nop

0800ded4 <rmw_uxrce_fini_session_memory>:
 800ded4:	4601      	mov	r1, r0
 800ded6:	4801      	ldr	r0, [pc, #4]	@ (800dedc <rmw_uxrce_fini_session_memory+0x8>)
 800ded8:	f007 b9be 	b.w	8015258 <put_memory>
 800dedc:	2000ac1c 	.word	0x2000ac1c

0800dee0 <rmw_uxrce_fini_node_memory>:
 800dee0:	b538      	push	{r3, r4, r5, lr}
 800dee2:	4604      	mov	r4, r0
 800dee4:	6800      	ldr	r0, [r0, #0]
 800dee6:	b128      	cbz	r0, 800def4 <rmw_uxrce_fini_node_memory+0x14>
 800dee8:	4b07      	ldr	r3, [pc, #28]	@ (800df08 <rmw_uxrce_fini_node_memory+0x28>)
 800deea:	6819      	ldr	r1, [r3, #0]
 800deec:	f7f2 f998 	bl	8000220 <strcmp>
 800def0:	b940      	cbnz	r0, 800df04 <rmw_uxrce_fini_node_memory+0x24>
 800def2:	6020      	str	r0, [r4, #0]
 800def4:	6861      	ldr	r1, [r4, #4]
 800def6:	b129      	cbz	r1, 800df04 <rmw_uxrce_fini_node_memory+0x24>
 800def8:	2500      	movs	r5, #0
 800defa:	4804      	ldr	r0, [pc, #16]	@ (800df0c <rmw_uxrce_fini_node_memory+0x2c>)
 800defc:	610d      	str	r5, [r1, #16]
 800defe:	f007 f9ab 	bl	8015258 <put_memory>
 800df02:	6065      	str	r5, [r4, #4]
 800df04:	bd38      	pop	{r3, r4, r5, pc}
 800df06:	bf00      	nop
 800df08:	080192b8 	.word	0x080192b8
 800df0c:	2000abec 	.word	0x2000abec

0800df10 <rmw_uxrce_fini_publisher_memory>:
 800df10:	b510      	push	{r4, lr}
 800df12:	4604      	mov	r4, r0
 800df14:	6800      	ldr	r0, [r0, #0]
 800df16:	b128      	cbz	r0, 800df24 <rmw_uxrce_fini_publisher_memory+0x14>
 800df18:	4b06      	ldr	r3, [pc, #24]	@ (800df34 <rmw_uxrce_fini_publisher_memory+0x24>)
 800df1a:	6819      	ldr	r1, [r3, #0]
 800df1c:	f7f2 f980 	bl	8000220 <strcmp>
 800df20:	b938      	cbnz	r0, 800df32 <rmw_uxrce_fini_publisher_memory+0x22>
 800df22:	6020      	str	r0, [r4, #0]
 800df24:	6861      	ldr	r1, [r4, #4]
 800df26:	b121      	cbz	r1, 800df32 <rmw_uxrce_fini_publisher_memory+0x22>
 800df28:	4803      	ldr	r0, [pc, #12]	@ (800df38 <rmw_uxrce_fini_publisher_memory+0x28>)
 800df2a:	f007 f995 	bl	8015258 <put_memory>
 800df2e:	2300      	movs	r3, #0
 800df30:	6063      	str	r3, [r4, #4]
 800df32:	bd10      	pop	{r4, pc}
 800df34:	080192b8 	.word	0x080192b8
 800df38:	2000abfc 	.word	0x2000abfc

0800df3c <rmw_uxrce_fini_subscription_memory>:
 800df3c:	b510      	push	{r4, lr}
 800df3e:	4604      	mov	r4, r0
 800df40:	6800      	ldr	r0, [r0, #0]
 800df42:	b128      	cbz	r0, 800df50 <rmw_uxrce_fini_subscription_memory+0x14>
 800df44:	4b06      	ldr	r3, [pc, #24]	@ (800df60 <rmw_uxrce_fini_subscription_memory+0x24>)
 800df46:	6819      	ldr	r1, [r3, #0]
 800df48:	f7f2 f96a 	bl	8000220 <strcmp>
 800df4c:	b938      	cbnz	r0, 800df5e <rmw_uxrce_fini_subscription_memory+0x22>
 800df4e:	6020      	str	r0, [r4, #0]
 800df50:	6861      	ldr	r1, [r4, #4]
 800df52:	b121      	cbz	r1, 800df5e <rmw_uxrce_fini_subscription_memory+0x22>
 800df54:	4803      	ldr	r0, [pc, #12]	@ (800df64 <rmw_uxrce_fini_subscription_memory+0x28>)
 800df56:	f007 f97f 	bl	8015258 <put_memory>
 800df5a:	2300      	movs	r3, #0
 800df5c:	6063      	str	r3, [r4, #4]
 800df5e:	bd10      	pop	{r4, pc}
 800df60:	080192b8 	.word	0x080192b8
 800df64:	2000ac3c 	.word	0x2000ac3c

0800df68 <rmw_uxrce_fini_service_memory>:
 800df68:	b510      	push	{r4, lr}
 800df6a:	4604      	mov	r4, r0
 800df6c:	6800      	ldr	r0, [r0, #0]
 800df6e:	b128      	cbz	r0, 800df7c <rmw_uxrce_fini_service_memory+0x14>
 800df70:	4b06      	ldr	r3, [pc, #24]	@ (800df8c <rmw_uxrce_fini_service_memory+0x24>)
 800df72:	6819      	ldr	r1, [r3, #0]
 800df74:	f7f2 f954 	bl	8000220 <strcmp>
 800df78:	b938      	cbnz	r0, 800df8a <rmw_uxrce_fini_service_memory+0x22>
 800df7a:	6020      	str	r0, [r4, #0]
 800df7c:	6861      	ldr	r1, [r4, #4]
 800df7e:	b121      	cbz	r1, 800df8a <rmw_uxrce_fini_service_memory+0x22>
 800df80:	4803      	ldr	r0, [pc, #12]	@ (800df90 <rmw_uxrce_fini_service_memory+0x28>)
 800df82:	f007 f969 	bl	8015258 <put_memory>
 800df86:	2300      	movs	r3, #0
 800df88:	6063      	str	r3, [r4, #4]
 800df8a:	bd10      	pop	{r4, pc}
 800df8c:	080192b8 	.word	0x080192b8
 800df90:	2000ac0c 	.word	0x2000ac0c

0800df94 <rmw_uxrce_fini_client_memory>:
 800df94:	b510      	push	{r4, lr}
 800df96:	4604      	mov	r4, r0
 800df98:	6800      	ldr	r0, [r0, #0]
 800df9a:	b128      	cbz	r0, 800dfa8 <rmw_uxrce_fini_client_memory+0x14>
 800df9c:	4b06      	ldr	r3, [pc, #24]	@ (800dfb8 <rmw_uxrce_fini_client_memory+0x24>)
 800df9e:	6819      	ldr	r1, [r3, #0]
 800dfa0:	f7f2 f93e 	bl	8000220 <strcmp>
 800dfa4:	b938      	cbnz	r0, 800dfb6 <rmw_uxrce_fini_client_memory+0x22>
 800dfa6:	6020      	str	r0, [r4, #0]
 800dfa8:	6861      	ldr	r1, [r4, #4]
 800dfaa:	b121      	cbz	r1, 800dfb6 <rmw_uxrce_fini_client_memory+0x22>
 800dfac:	4803      	ldr	r0, [pc, #12]	@ (800dfbc <rmw_uxrce_fini_client_memory+0x28>)
 800dfae:	f007 f953 	bl	8015258 <put_memory>
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	6063      	str	r3, [r4, #4]
 800dfb6:	bd10      	pop	{r4, pc}
 800dfb8:	080192b8 	.word	0x080192b8
 800dfbc:	2000631c 	.word	0x2000631c

0800dfc0 <rmw_uxrce_fini_topic_memory>:
 800dfc0:	b510      	push	{r4, lr}
 800dfc2:	4604      	mov	r4, r0
 800dfc4:	4621      	mov	r1, r4
 800dfc6:	4803      	ldr	r0, [pc, #12]	@ (800dfd4 <rmw_uxrce_fini_topic_memory+0x14>)
 800dfc8:	f007 f946 	bl	8015258 <put_memory>
 800dfcc:	2300      	movs	r3, #0
 800dfce:	61a3      	str	r3, [r4, #24]
 800dfd0:	bd10      	pop	{r4, pc}
 800dfd2:	bf00      	nop
 800dfd4:	2000ac4c 	.word	0x2000ac4c

0800dfd8 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800dfd8:	b082      	sub	sp, #8
 800dfda:	b530      	push	{r4, r5, lr}
 800dfdc:	4925      	ldr	r1, [pc, #148]	@ (800e074 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800dfde:	680d      	ldr	r5, [r1, #0]
 800dfe0:	ac03      	add	r4, sp, #12
 800dfe2:	e884 000c 	stmia.w	r4, {r2, r3}
 800dfe6:	461c      	mov	r4, r3
 800dfe8:	2d00      	cmp	r5, #0
 800dfea:	d041      	beq.n	800e070 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800dfec:	462b      	mov	r3, r5
 800dfee:	2100      	movs	r1, #0
 800dff0:	689a      	ldr	r2, [r3, #8]
 800dff2:	685b      	ldr	r3, [r3, #4]
 800dff4:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800dff8:	4290      	cmp	r0, r2
 800dffa:	bf08      	it	eq
 800dffc:	3101      	addeq	r1, #1
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d1f6      	bne.n	800dff0 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800e002:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800e006:	2b02      	cmp	r3, #2
 800e008:	d029      	beq.n	800e05e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e00a:	d907      	bls.n	800e01c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800e00c:	2b03      	cmp	r3, #3
 800e00e:	d005      	beq.n	800e01c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800e010:	2100      	movs	r1, #0
 800e012:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e016:	4608      	mov	r0, r1
 800e018:	b002      	add	sp, #8
 800e01a:	4770      	bx	lr
 800e01c:	b314      	cbz	r4, 800e064 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e01e:	428c      	cmp	r4, r1
 800e020:	d820      	bhi.n	800e064 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e022:	2d00      	cmp	r5, #0
 800e024:	d0f4      	beq.n	800e010 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e026:	2100      	movs	r1, #0
 800e028:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800e02c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800e030:	e002      	b.n	800e038 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800e032:	686d      	ldr	r5, [r5, #4]
 800e034:	2d00      	cmp	r5, #0
 800e036:	d0ec      	beq.n	800e012 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800e038:	68ab      	ldr	r3, [r5, #8]
 800e03a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800e03e:	4290      	cmp	r0, r2
 800e040:	d1f7      	bne.n	800e032 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e042:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800e046:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800e04a:	4562      	cmp	r2, ip
 800e04c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800e050:	eb73 0e04 	sbcs.w	lr, r3, r4
 800e054:	daed      	bge.n	800e032 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e056:	4694      	mov	ip, r2
 800e058:	461c      	mov	r4, r3
 800e05a:	4629      	mov	r1, r5
 800e05c:	e7e9      	b.n	800e032 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e05e:	b10c      	cbz	r4, 800e064 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e060:	428c      	cmp	r4, r1
 800e062:	d9d5      	bls.n	800e010 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e064:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e068:	4802      	ldr	r0, [pc, #8]	@ (800e074 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800e06a:	b002      	add	sp, #8
 800e06c:	f007 b8e4 	b.w	8015238 <get_memory>
 800e070:	4629      	mov	r1, r5
 800e072:	e7c6      	b.n	800e002 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800e074:	2000ac2c 	.word	0x2000ac2c

0800e078 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800e078:	4b11      	ldr	r3, [pc, #68]	@ (800e0c0 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	b530      	push	{r4, r5, lr}
 800e07e:	b1e3      	cbz	r3, 800e0ba <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800e080:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800e084:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800e088:	2400      	movs	r4, #0
 800e08a:	e001      	b.n	800e090 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800e08c:	685b      	ldr	r3, [r3, #4]
 800e08e:	b193      	cbz	r3, 800e0b6 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800e090:	689a      	ldr	r2, [r3, #8]
 800e092:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800e096:	4288      	cmp	r0, r1
 800e098:	d1f8      	bne.n	800e08c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800e09a:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800e09e:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800e0a2:	4571      	cmp	r1, lr
 800e0a4:	eb72 050c 	sbcs.w	r5, r2, ip
 800e0a8:	daf0      	bge.n	800e08c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800e0aa:	461c      	mov	r4, r3
 800e0ac:	685b      	ldr	r3, [r3, #4]
 800e0ae:	468e      	mov	lr, r1
 800e0b0:	4694      	mov	ip, r2
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d1ec      	bne.n	800e090 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800e0b6:	4620      	mov	r0, r4
 800e0b8:	bd30      	pop	{r4, r5, pc}
 800e0ba:	461c      	mov	r4, r3
 800e0bc:	4620      	mov	r0, r4
 800e0be:	bd30      	pop	{r4, r5, pc}
 800e0c0:	2000ac2c 	.word	0x2000ac2c
 800e0c4:	00000000 	.word	0x00000000

0800e0c8 <rmw_uxrce_clean_expired_static_input_buffer>:
 800e0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0cc:	4b3c      	ldr	r3, [pc, #240]	@ (800e1c0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e0ce:	ed2d 8b06 	vpush	{d8-d10}
 800e0d2:	681f      	ldr	r7, [r3, #0]
 800e0d4:	b08d      	sub	sp, #52	@ 0x34
 800e0d6:	f7ff fd7d 	bl	800dbd4 <rmw_uros_epoch_nanos>
 800e0da:	2f00      	cmp	r7, #0
 800e0dc:	d05d      	beq.n	800e19a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800e0de:	46b8      	mov	r8, r7
 800e0e0:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800e1a8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800e0e4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e0e8:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800e0ec:	2b04      	cmp	r3, #4
 800e0ee:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800e1b0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800e0f2:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800e1b8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800e0f6:	4681      	mov	r9, r0
 800e0f8:	468a      	mov	sl, r1
 800e0fa:	ac04      	add	r4, sp, #16
 800e0fc:	d03f      	beq.n	800e17e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800e0fe:	2b05      	cmp	r3, #5
 800e100:	d044      	beq.n	800e18c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800e102:	2b03      	cmp	r3, #3
 800e104:	d03b      	beq.n	800e17e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800e106:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e10a:	ed8d ab06 	vstr	d10, [sp, #24]
 800e10e:	ed8d 8b08 	vstr	d8, [sp, #32]
 800e112:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800e116:	ab08      	add	r3, sp, #32
 800e118:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e11a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e11e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e122:	f006 fdd5 	bl	8014cd0 <rmw_time_equal>
 800e126:	b118      	cbz	r0, 800e130 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800e128:	ed8d 9b04 	vstr	d9, [sp, #16]
 800e12c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e130:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e134:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800e138:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800e13c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800e140:	f006 fe1a 	bl	8014d78 <rmw_time_total_nsec>
 800e144:	1830      	adds	r0, r6, r0
 800e146:	eb47 0101 	adc.w	r1, r7, r1
 800e14a:	4548      	cmp	r0, r9
 800e14c:	eb71 030a 	sbcs.w	r3, r1, sl
 800e150:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800e154:	db05      	blt.n	800e162 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800e156:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800e15a:	4591      	cmp	r9, r2
 800e15c:	eb7a 0303 	sbcs.w	r3, sl, r3
 800e160:	da03      	bge.n	800e16a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800e162:	4817      	ldr	r0, [pc, #92]	@ (800e1c0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e164:	4641      	mov	r1, r8
 800e166:	f007 f877 	bl	8015258 <put_memory>
 800e16a:	f1bb 0f00 	cmp.w	fp, #0
 800e16e:	d014      	beq.n	800e19a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800e170:	46d8      	mov	r8, fp
 800e172:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e176:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800e17a:	2b04      	cmp	r3, #4
 800e17c:	d1bf      	bne.n	800e0fe <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800e17e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800e182:	3340      	adds	r3, #64	@ 0x40
 800e184:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e186:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e18a:	e7c0      	b.n	800e10e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800e18c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800e190:	3348      	adds	r3, #72	@ 0x48
 800e192:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e194:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e198:	e7b9      	b.n	800e10e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800e19a:	b00d      	add	sp, #52	@ 0x34
 800e19c:	ecbd 8b06 	vpop	{d8-d10}
 800e1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1a4:	f3af 8000 	nop.w
	...
 800e1b0:	00000001 	.word	0x00000001
 800e1b4:	00000000 	.word	0x00000000
 800e1b8:	0000001e 	.word	0x0000001e
 800e1bc:	00000000 	.word	0x00000000
 800e1c0:	2000ac2c 	.word	0x2000ac2c

0800e1c4 <run_xrce_session>:
 800e1c4:	b510      	push	{r4, lr}
 800e1c6:	788c      	ldrb	r4, [r1, #2]
 800e1c8:	b086      	sub	sp, #24
 800e1ca:	2c01      	cmp	r4, #1
 800e1cc:	f8ad 200e 	strh.w	r2, [sp, #14]
 800e1d0:	d00c      	beq.n	800e1ec <run_xrce_session+0x28>
 800e1d2:	4619      	mov	r1, r3
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	9300      	str	r3, [sp, #0]
 800e1d8:	f10d 020e 	add.w	r2, sp, #14
 800e1dc:	f10d 0317 	add.w	r3, sp, #23
 800e1e0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e1e4:	f001 f902 	bl	800f3ec <uxr_run_session_until_all_status>
 800e1e8:	b006      	add	sp, #24
 800e1ea:	bd10      	pop	{r4, pc}
 800e1ec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e1f0:	f000 fd16 	bl	800ec20 <uxr_flash_output_streams>
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	b006      	add	sp, #24
 800e1f8:	bd10      	pop	{r4, pc}
 800e1fa:	bf00      	nop

0800e1fc <convert_qos_profile>:
 800e1fc:	7a4a      	ldrb	r2, [r1, #9]
 800e1fe:	f891 c008 	ldrb.w	ip, [r1, #8]
 800e202:	2a02      	cmp	r2, #2
 800e204:	bf18      	it	ne
 800e206:	2200      	movne	r2, #0
 800e208:	7002      	strb	r2, [r0, #0]
 800e20a:	780a      	ldrb	r2, [r1, #0]
 800e20c:	8889      	ldrh	r1, [r1, #4]
 800e20e:	8081      	strh	r1, [r0, #4]
 800e210:	f1ac 0c02 	sub.w	ip, ip, #2
 800e214:	f1a2 0202 	sub.w	r2, r2, #2
 800e218:	fabc fc8c 	clz	ip, ip
 800e21c:	fab2 f282 	clz	r2, r2
 800e220:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800e224:	0952      	lsrs	r2, r2, #5
 800e226:	f880 c001 	strb.w	ip, [r0, #1]
 800e22a:	7082      	strb	r2, [r0, #2]
 800e22c:	4770      	bx	lr
 800e22e:	bf00      	nop

0800e230 <generate_type_name>:
 800e230:	b530      	push	{r4, r5, lr}
 800e232:	2300      	movs	r3, #0
 800e234:	700b      	strb	r3, [r1, #0]
 800e236:	6803      	ldr	r3, [r0, #0]
 800e238:	b087      	sub	sp, #28
 800e23a:	4614      	mov	r4, r2
 800e23c:	b1d3      	cbz	r3, 800e274 <generate_type_name+0x44>
 800e23e:	4a0f      	ldr	r2, [pc, #60]	@ (800e27c <generate_type_name+0x4c>)
 800e240:	4615      	mov	r5, r2
 800e242:	9203      	str	r2, [sp, #12]
 800e244:	9500      	str	r5, [sp, #0]
 800e246:	6842      	ldr	r2, [r0, #4]
 800e248:	480d      	ldr	r0, [pc, #52]	@ (800e280 <generate_type_name+0x50>)
 800e24a:	9001      	str	r0, [sp, #4]
 800e24c:	4608      	mov	r0, r1
 800e24e:	490d      	ldr	r1, [pc, #52]	@ (800e284 <generate_type_name+0x54>)
 800e250:	9204      	str	r2, [sp, #16]
 800e252:	9105      	str	r1, [sp, #20]
 800e254:	9102      	str	r1, [sp, #8]
 800e256:	4a0c      	ldr	r2, [pc, #48]	@ (800e288 <generate_type_name+0x58>)
 800e258:	4621      	mov	r1, r4
 800e25a:	f009 f9cd 	bl	80175f8 <sniprintf>
 800e25e:	2800      	cmp	r0, #0
 800e260:	db05      	blt.n	800e26e <generate_type_name+0x3e>
 800e262:	4284      	cmp	r4, r0
 800e264:	bfd4      	ite	le
 800e266:	2000      	movle	r0, #0
 800e268:	2001      	movgt	r0, #1
 800e26a:	b007      	add	sp, #28
 800e26c:	bd30      	pop	{r4, r5, pc}
 800e26e:	2000      	movs	r0, #0
 800e270:	b007      	add	sp, #28
 800e272:	bd30      	pop	{r4, r5, pc}
 800e274:	4b05      	ldr	r3, [pc, #20]	@ (800e28c <generate_type_name+0x5c>)
 800e276:	4a01      	ldr	r2, [pc, #4]	@ (800e27c <generate_type_name+0x4c>)
 800e278:	461d      	mov	r5, r3
 800e27a:	e7e2      	b.n	800e242 <generate_type_name+0x12>
 800e27c:	08018b1c 	.word	0x08018b1c
 800e280:	08018b34 	.word	0x08018b34
 800e284:	08018b30 	.word	0x08018b30
 800e288:	08018b20 	.word	0x08018b20
 800e28c:	08019090 	.word	0x08019090

0800e290 <generate_topic_name>:
 800e290:	b510      	push	{r4, lr}
 800e292:	b082      	sub	sp, #8
 800e294:	4614      	mov	r4, r2
 800e296:	9000      	str	r0, [sp, #0]
 800e298:	4b08      	ldr	r3, [pc, #32]	@ (800e2bc <generate_topic_name+0x2c>)
 800e29a:	4a09      	ldr	r2, [pc, #36]	@ (800e2c0 <generate_topic_name+0x30>)
 800e29c:	4608      	mov	r0, r1
 800e29e:	4621      	mov	r1, r4
 800e2a0:	f009 f9aa 	bl	80175f8 <sniprintf>
 800e2a4:	2800      	cmp	r0, #0
 800e2a6:	db05      	blt.n	800e2b4 <generate_topic_name+0x24>
 800e2a8:	4284      	cmp	r4, r0
 800e2aa:	bfd4      	ite	le
 800e2ac:	2000      	movle	r0, #0
 800e2ae:	2001      	movgt	r0, #1
 800e2b0:	b002      	add	sp, #8
 800e2b2:	bd10      	pop	{r4, pc}
 800e2b4:	2000      	movs	r0, #0
 800e2b6:	b002      	add	sp, #8
 800e2b8:	bd10      	pop	{r4, pc}
 800e2ba:	bf00      	nop
 800e2bc:	08018b40 	.word	0x08018b40
 800e2c0:	08018b38 	.word	0x08018b38

0800e2c4 <is_uxrce_rmw_identifier_valid>:
 800e2c4:	b510      	push	{r4, lr}
 800e2c6:	4604      	mov	r4, r0
 800e2c8:	b140      	cbz	r0, 800e2dc <is_uxrce_rmw_identifier_valid+0x18>
 800e2ca:	f007 f81d 	bl	8015308 <rmw_get_implementation_identifier>
 800e2ce:	4601      	mov	r1, r0
 800e2d0:	4620      	mov	r0, r4
 800e2d2:	f7f1 ffa5 	bl	8000220 <strcmp>
 800e2d6:	fab0 f080 	clz	r0, r0
 800e2da:	0940      	lsrs	r0, r0, #5
 800e2dc:	bd10      	pop	{r4, pc}
 800e2de:	bf00      	nop

0800e2e0 <get_message_typesupport_handle>:
 800e2e0:	6883      	ldr	r3, [r0, #8]
 800e2e2:	4718      	bx	r3

0800e2e4 <get_message_typesupport_handle_function>:
 800e2e4:	b510      	push	{r4, lr}
 800e2e6:	4604      	mov	r4, r0
 800e2e8:	6800      	ldr	r0, [r0, #0]
 800e2ea:	f7f1 ff99 	bl	8000220 <strcmp>
 800e2ee:	2800      	cmp	r0, #0
 800e2f0:	bf0c      	ite	eq
 800e2f2:	4620      	moveq	r0, r4
 800e2f4:	2000      	movne	r0, #0
 800e2f6:	bd10      	pop	{r4, pc}

0800e2f8 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800e2f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2fc:	6805      	ldr	r5, [r0, #0]
 800e2fe:	4604      	mov	r4, r0
 800e300:	4628      	mov	r0, r5
 800e302:	460e      	mov	r6, r1
 800e304:	f7f1 ff8c 	bl	8000220 <strcmp>
 800e308:	b1c8      	cbz	r0, 800e33e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800e30a:	4b11      	ldr	r3, [pc, #68]	@ (800e350 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	429d      	cmp	r5, r3
 800e310:	d112      	bne.n	800e338 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800e312:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800e316:	f8d8 4000 	ldr.w	r4, [r8]
 800e31a:	b16c      	cbz	r4, 800e338 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800e31c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e320:	2700      	movs	r7, #0
 800e322:	3d04      	subs	r5, #4
 800e324:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800e328:	4631      	mov	r1, r6
 800e32a:	f7f1 ff79 	bl	8000220 <strcmp>
 800e32e:	00bb      	lsls	r3, r7, #2
 800e330:	b140      	cbz	r0, 800e344 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800e332:	3701      	adds	r7, #1
 800e334:	42bc      	cmp	r4, r7
 800e336:	d1f5      	bne.n	800e324 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800e338:	2000      	movs	r0, #0
 800e33a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e33e:	4620      	mov	r0, r4
 800e340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e344:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e348:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e34c:	58d3      	ldr	r3, [r2, r3]
 800e34e:	4718      	bx	r3
 800e350:	200000e8 	.word	0x200000e8

0800e354 <amt212ev_interfaces__msg__AmtRead__init>:
 800e354:	3800      	subs	r0, #0
 800e356:	bf18      	it	ne
 800e358:	2001      	movne	r0, #1
 800e35a:	4770      	bx	lr

0800e35c <amt212ev_interfaces__msg__AmtRead__fini>:
 800e35c:	4770      	bx	lr
 800e35e:	bf00      	nop

0800e360 <uxr_buffer_delete_entity>:
 800e360:	b510      	push	{r4, lr}
 800e362:	2300      	movs	r3, #0
 800e364:	b08e      	sub	sp, #56	@ 0x38
 800e366:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e36a:	2303      	movs	r3, #3
 800e36c:	9300      	str	r3, [sp, #0]
 800e36e:	2204      	movs	r2, #4
 800e370:	ab06      	add	r3, sp, #24
 800e372:	4604      	mov	r4, r0
 800e374:	9103      	str	r1, [sp, #12]
 800e376:	f001 fab5 	bl	800f8e4 <uxr_prepare_stream_to_write_submessage>
 800e37a:	b918      	cbnz	r0, 800e384 <uxr_buffer_delete_entity+0x24>
 800e37c:	4604      	mov	r4, r0
 800e37e:	4620      	mov	r0, r4
 800e380:	b00e      	add	sp, #56	@ 0x38
 800e382:	bd10      	pop	{r4, pc}
 800e384:	9902      	ldr	r1, [sp, #8]
 800e386:	aa05      	add	r2, sp, #20
 800e388:	4620      	mov	r0, r4
 800e38a:	f001 fbe1 	bl	800fb50 <uxr_init_base_object_request>
 800e38e:	a905      	add	r1, sp, #20
 800e390:	4604      	mov	r4, r0
 800e392:	a806      	add	r0, sp, #24
 800e394:	f003 f9d8 	bl	8011748 <uxr_serialize_DELETE_Payload>
 800e398:	4620      	mov	r0, r4
 800e39a:	b00e      	add	sp, #56	@ 0x38
 800e39c:	bd10      	pop	{r4, pc}
 800e39e:	bf00      	nop

0800e3a0 <uxr_common_create_entity>:
 800e3a0:	b510      	push	{r4, lr}
 800e3a2:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800e3a6:	b08c      	sub	sp, #48	@ 0x30
 800e3a8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e3ac:	f1bc 0f01 	cmp.w	ip, #1
 800e3b0:	bf0c      	ite	eq
 800e3b2:	f003 0201 	andeq.w	r2, r3, #1
 800e3b6:	2200      	movne	r2, #0
 800e3b8:	330e      	adds	r3, #14
 800e3ba:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800e3be:	9101      	str	r1, [sp, #4]
 800e3c0:	441a      	add	r2, r3
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	9300      	str	r3, [sp, #0]
 800e3c6:	9903      	ldr	r1, [sp, #12]
 800e3c8:	ab04      	add	r3, sp, #16
 800e3ca:	b292      	uxth	r2, r2
 800e3cc:	4604      	mov	r4, r0
 800e3ce:	f001 fa89 	bl	800f8e4 <uxr_prepare_stream_to_write_submessage>
 800e3d2:	b918      	cbnz	r0, 800e3dc <uxr_common_create_entity+0x3c>
 800e3d4:	4604      	mov	r4, r0
 800e3d6:	4620      	mov	r0, r4
 800e3d8:	b00c      	add	sp, #48	@ 0x30
 800e3da:	bd10      	pop	{r4, pc}
 800e3dc:	9902      	ldr	r1, [sp, #8]
 800e3de:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e3e0:	4620      	mov	r0, r4
 800e3e2:	f001 fbb5 	bl	800fb50 <uxr_init_base_object_request>
 800e3e6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e3e8:	4604      	mov	r4, r0
 800e3ea:	a804      	add	r0, sp, #16
 800e3ec:	f003 f908 	bl	8011600 <uxr_serialize_CREATE_Payload>
 800e3f0:	4620      	mov	r0, r4
 800e3f2:	b00c      	add	sp, #48	@ 0x30
 800e3f4:	bd10      	pop	{r4, pc}
 800e3f6:	bf00      	nop

0800e3f8 <uxr_buffer_create_participant_bin>:
 800e3f8:	b570      	push	{r4, r5, r6, lr}
 800e3fa:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800e3fe:	ac11      	add	r4, sp, #68	@ 0x44
 800e400:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800e404:	2303      	movs	r3, #3
 800e406:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e40a:	7223      	strb	r3, [r4, #8]
 800e40c:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800e40e:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800e412:	2201      	movs	r2, #1
 800e414:	2100      	movs	r1, #0
 800e416:	4605      	mov	r5, r0
 800e418:	7122      	strb	r2, [r4, #4]
 800e41a:	f88d 1014 	strb.w	r1, [sp, #20]
 800e41e:	b1cb      	cbz	r3, 800e454 <uxr_buffer_create_participant_bin+0x5c>
 800e420:	f88d 201c 	strb.w	r2, [sp, #28]
 800e424:	9308      	str	r3, [sp, #32]
 800e426:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e42a:	a915      	add	r1, sp, #84	@ 0x54
 800e42c:	a809      	add	r0, sp, #36	@ 0x24
 800e42e:	f7fd fb85 	bl	800bb3c <ucdr_init_buffer>
 800e432:	a905      	add	r1, sp, #20
 800e434:	a809      	add	r0, sp, #36	@ 0x24
 800e436:	f002 fdb1 	bl	8010f9c <uxr_serialize_OBJK_DomainParticipant_Binary>
 800e43a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e43c:	9600      	str	r6, [sp, #0]
 800e43e:	9401      	str	r4, [sp, #4]
 800e440:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e444:	60e3      	str	r3, [r4, #12]
 800e446:	4628      	mov	r0, r5
 800e448:	b29b      	uxth	r3, r3
 800e44a:	f7ff ffa9 	bl	800e3a0 <uxr_common_create_entity>
 800e44e:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800e452:	bd70      	pop	{r4, r5, r6, pc}
 800e454:	f88d 301c 	strb.w	r3, [sp, #28]
 800e458:	e7e5      	b.n	800e426 <uxr_buffer_create_participant_bin+0x2e>
 800e45a:	bf00      	nop

0800e45c <uxr_buffer_create_topic_bin>:
 800e45c:	b570      	push	{r4, r5, r6, lr}
 800e45e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800e462:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e466:	9105      	str	r1, [sp, #20]
 800e468:	4605      	mov	r5, r0
 800e46a:	a997      	add	r1, sp, #604	@ 0x25c
 800e46c:	4618      	mov	r0, r3
 800e46e:	2302      	movs	r3, #2
 800e470:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800e474:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800e478:	f000 f9b0 	bl	800e7dc <uxr_object_id_to_raw>
 800e47c:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800e47e:	9306      	str	r3, [sp, #24]
 800e480:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800e482:	930a      	str	r3, [sp, #40]	@ 0x28
 800e484:	2303      	movs	r3, #3
 800e486:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800e48a:	2301      	movs	r3, #1
 800e48c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e490:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800e494:	a917      	add	r1, sp, #92	@ 0x5c
 800e496:	2300      	movs	r3, #0
 800e498:	a80b      	add	r0, sp, #44	@ 0x2c
 800e49a:	f88d 301c 	strb.w	r3, [sp, #28]
 800e49e:	f7fd fb4d 	bl	800bb3c <ucdr_init_buffer>
 800e4a2:	a906      	add	r1, sp, #24
 800e4a4:	a80b      	add	r0, sp, #44	@ 0x2c
 800e4a6:	f002 fd9b 	bl	8010fe0 <uxr_serialize_OBJK_Topic_Binary>
 800e4aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4ac:	9316      	str	r3, [sp, #88]	@ 0x58
 800e4ae:	ac13      	add	r4, sp, #76	@ 0x4c
 800e4b0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e4b4:	9600      	str	r6, [sp, #0]
 800e4b6:	9401      	str	r4, [sp, #4]
 800e4b8:	b29b      	uxth	r3, r3
 800e4ba:	4628      	mov	r0, r5
 800e4bc:	f7ff ff70 	bl	800e3a0 <uxr_common_create_entity>
 800e4c0:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800e4c4:	bd70      	pop	{r4, r5, r6, pc}
 800e4c6:	bf00      	nop

0800e4c8 <uxr_buffer_create_publisher_bin>:
 800e4c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4ca:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800e4ce:	4605      	mov	r5, r0
 800e4d0:	9105      	str	r1, [sp, #20]
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	2603      	movs	r6, #3
 800e4d6:	a992      	add	r1, sp, #584	@ 0x248
 800e4d8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e4dc:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800e4e0:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800e4e4:	f000 f97a 	bl	800e7dc <uxr_object_id_to_raw>
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e4ee:	a912      	add	r1, sp, #72	@ 0x48
 800e4f0:	a806      	add	r0, sp, #24
 800e4f2:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800e4f6:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800e4fa:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800e4fe:	f7fd fb1d 	bl	800bb3c <ucdr_init_buffer>
 800e502:	a993      	add	r1, sp, #588	@ 0x24c
 800e504:	a806      	add	r0, sp, #24
 800e506:	f002 fe1f 	bl	8011148 <uxr_serialize_OBJK_Publisher_Binary>
 800e50a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e50c:	9311      	str	r3, [sp, #68]	@ 0x44
 800e50e:	ac0e      	add	r4, sp, #56	@ 0x38
 800e510:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e514:	9700      	str	r7, [sp, #0]
 800e516:	9401      	str	r4, [sp, #4]
 800e518:	b29b      	uxth	r3, r3
 800e51a:	4628      	mov	r0, r5
 800e51c:	f7ff ff40 	bl	800e3a0 <uxr_common_create_entity>
 800e520:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800e524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e526:	bf00      	nop

0800e528 <uxr_buffer_create_datawriter_bin>:
 800e528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e52c:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800e530:	ac1d      	add	r4, sp, #116	@ 0x74
 800e532:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e536:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800e53a:	9105      	str	r1, [sp, #20]
 800e53c:	4606      	mov	r6, r0
 800e53e:	a9a1      	add	r1, sp, #644	@ 0x284
 800e540:	4618      	mov	r0, r3
 800e542:	2305      	movs	r3, #5
 800e544:	7123      	strb	r3, [r4, #4]
 800e546:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800e54a:	2703      	movs	r7, #3
 800e54c:	f000 f946 	bl	800e7dc <uxr_object_id_to_raw>
 800e550:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800e552:	7227      	strb	r7, [r4, #8]
 800e554:	a90e      	add	r1, sp, #56	@ 0x38
 800e556:	f000 f941 	bl	800e7dc <uxr_object_id_to_raw>
 800e55a:	2300      	movs	r3, #0
 800e55c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800e560:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800e564:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800e568:	3d00      	subs	r5, #0
 800e56a:	bf18      	it	ne
 800e56c:	2501      	movne	r5, #1
 800e56e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800e572:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800e576:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800e57a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e57e:	2301      	movs	r3, #1
 800e580:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800e584:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800e588:	bb8a      	cbnz	r2, 800e5ee <uxr_buffer_create_datawriter_bin+0xc6>
 800e58a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e58e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800e592:	f04f 0c13 	mov.w	ip, #19
 800e596:	250b      	movs	r5, #11
 800e598:	2221      	movs	r2, #33	@ 0x21
 800e59a:	2111      	movs	r1, #17
 800e59c:	2009      	movs	r0, #9
 800e59e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800e5a2:	b923      	cbnz	r3, 800e5ae <uxr_buffer_create_datawriter_bin+0x86>
 800e5a4:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800e5a8:	4672      	mov	r2, lr
 800e5aa:	4661      	mov	r1, ip
 800e5ac:	4628      	mov	r0, r5
 800e5ae:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800e5b2:	2b01      	cmp	r3, #1
 800e5b4:	d025      	beq.n	800e602 <uxr_buffer_create_datawriter_bin+0xda>
 800e5b6:	2b03      	cmp	r3, #3
 800e5b8:	d029      	beq.n	800e60e <uxr_buffer_create_datawriter_bin+0xe6>
 800e5ba:	b32b      	cbz	r3, 800e608 <uxr_buffer_create_datawriter_bin+0xe0>
 800e5bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e5c0:	a921      	add	r1, sp, #132	@ 0x84
 800e5c2:	a806      	add	r0, sp, #24
 800e5c4:	f7fd faba 	bl	800bb3c <ucdr_init_buffer>
 800e5c8:	a90e      	add	r1, sp, #56	@ 0x38
 800e5ca:	a806      	add	r0, sp, #24
 800e5cc:	f002 fe32 	bl	8011234 <uxr_serialize_OBJK_DataWriter_Binary>
 800e5d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5d2:	f8cd 8000 	str.w	r8, [sp]
 800e5d6:	9401      	str	r4, [sp, #4]
 800e5d8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e5dc:	60e3      	str	r3, [r4, #12]
 800e5de:	4630      	mov	r0, r6
 800e5e0:	b29b      	uxth	r3, r3
 800e5e2:	f7ff fedd 	bl	800e3a0 <uxr_common_create_entity>
 800e5e6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800e5ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5ee:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800e5f2:	f04f 0c12 	mov.w	ip, #18
 800e5f6:	250a      	movs	r5, #10
 800e5f8:	2220      	movs	r2, #32
 800e5fa:	2110      	movs	r1, #16
 800e5fc:	2008      	movs	r0, #8
 800e5fe:	2702      	movs	r7, #2
 800e600:	e7cd      	b.n	800e59e <uxr_buffer_create_datawriter_bin+0x76>
 800e602:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800e606:	e7d9      	b.n	800e5bc <uxr_buffer_create_datawriter_bin+0x94>
 800e608:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800e60c:	e7d6      	b.n	800e5bc <uxr_buffer_create_datawriter_bin+0x94>
 800e60e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800e612:	e7d3      	b.n	800e5bc <uxr_buffer_create_datawriter_bin+0x94>

0800e614 <get_custom_error>:
 800e614:	4b01      	ldr	r3, [pc, #4]	@ (800e61c <get_custom_error+0x8>)
 800e616:	7818      	ldrb	r0, [r3, #0]
 800e618:	4770      	bx	lr
 800e61a:	bf00      	nop
 800e61c:	2000ac6c 	.word	0x2000ac6c

0800e620 <recv_custom_msg>:
 800e620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e624:	4693      	mov	fp, r2
 800e626:	b089      	sub	sp, #36	@ 0x24
 800e628:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800e62c:	9305      	str	r3, [sp, #20]
 800e62e:	468a      	mov	sl, r1
 800e630:	2100      	movs	r1, #0
 800e632:	4604      	mov	r4, r0
 800e634:	f88d 101e 	strb.w	r1, [sp, #30]
 800e638:	b322      	cbz	r2, 800e684 <recv_custom_msg+0x64>
 800e63a:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800e63e:	f10d 081f 	add.w	r8, sp, #31
 800e642:	af05      	add	r7, sp, #20
 800e644:	f10d 061e 	add.w	r6, sp, #30
 800e648:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800e64c:	e002      	b.n	800e654 <recv_custom_msg+0x34>
 800e64e:	9b05      	ldr	r3, [sp, #20]
 800e650:	2b00      	cmp	r3, #0
 800e652:	dd0f      	ble.n	800e674 <recv_custom_msg+0x54>
 800e654:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800e658:	4623      	mov	r3, r4
 800e65a:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800e65e:	e9cd 5600 	strd	r5, r6, [sp]
 800e662:	4622      	mov	r2, r4
 800e664:	4648      	mov	r0, r9
 800e666:	f001 fca1 	bl	800ffac <uxr_read_framed_msg>
 800e66a:	2800      	cmp	r0, #0
 800e66c:	d0ef      	beq.n	800e64e <recv_custom_msg+0x2e>
 800e66e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e672:	b1b3      	cbz	r3, 800e6a2 <recv_custom_msg+0x82>
 800e674:	4b0f      	ldr	r3, [pc, #60]	@ (800e6b4 <recv_custom_msg+0x94>)
 800e676:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800e67a:	701a      	strb	r2, [r3, #0]
 800e67c:	2000      	movs	r0, #0
 800e67e:	b009      	add	sp, #36	@ 0x24
 800e680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e684:	f10d 021f 	add.w	r2, sp, #31
 800e688:	9200      	str	r2, [sp, #0]
 800e68a:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800e68e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e692:	4601      	mov	r1, r0
 800e694:	47a8      	blx	r5
 800e696:	2800      	cmp	r0, #0
 800e698:	d0ec      	beq.n	800e674 <recv_custom_msg+0x54>
 800e69a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d1e8      	bne.n	800e674 <recv_custom_msg+0x54>
 800e6a2:	f8cb 0000 	str.w	r0, [fp]
 800e6a6:	2001      	movs	r0, #1
 800e6a8:	f8ca 4000 	str.w	r4, [sl]
 800e6ac:	b009      	add	sp, #36	@ 0x24
 800e6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6b2:	bf00      	nop
 800e6b4:	2000ac6c 	.word	0x2000ac6c

0800e6b8 <send_custom_msg>:
 800e6b8:	b530      	push	{r4, r5, lr}
 800e6ba:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800e6be:	b087      	sub	sp, #28
 800e6c0:	4615      	mov	r5, r2
 800e6c2:	b974      	cbnz	r4, 800e6e2 <send_custom_msg+0x2a>
 800e6c4:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800e6c8:	f10d 0317 	add.w	r3, sp, #23
 800e6cc:	47a0      	blx	r4
 800e6ce:	b108      	cbz	r0, 800e6d4 <send_custom_msg+0x1c>
 800e6d0:	42a8      	cmp	r0, r5
 800e6d2:	d015      	beq.n	800e700 <send_custom_msg+0x48>
 800e6d4:	4b0c      	ldr	r3, [pc, #48]	@ (800e708 <send_custom_msg+0x50>)
 800e6d6:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800e6da:	701a      	strb	r2, [r3, #0]
 800e6dc:	2000      	movs	r0, #0
 800e6de:	b007      	add	sp, #28
 800e6e0:	bd30      	pop	{r4, r5, pc}
 800e6e2:	460b      	mov	r3, r1
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	f10d 0117 	add.w	r1, sp, #23
 800e6ea:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800e6ee:	4602      	mov	r2, r0
 800e6f0:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800e6f4:	9500      	str	r5, [sp, #0]
 800e6f6:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800e6fa:	f001 fa5f 	bl	800fbbc <uxr_write_framed_msg>
 800e6fe:	e7e6      	b.n	800e6ce <send_custom_msg+0x16>
 800e700:	2001      	movs	r0, #1
 800e702:	b007      	add	sp, #28
 800e704:	bd30      	pop	{r4, r5, pc}
 800e706:	bf00      	nop
 800e708:	2000ac6c 	.word	0x2000ac6c

0800e70c <uxr_set_custom_transport_callbacks>:
 800e70c:	b410      	push	{r4}
 800e70e:	9c01      	ldr	r4, [sp, #4]
 800e710:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800e714:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800e718:	9b02      	ldr	r3, [sp, #8]
 800e71a:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800e71e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e722:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800e726:	4770      	bx	lr

0800e728 <uxr_init_custom_transport>:
 800e728:	b538      	push	{r3, r4, r5, lr}
 800e72a:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800e72e:	b303      	cbz	r3, 800e772 <uxr_init_custom_transport+0x4a>
 800e730:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800e734:	4604      	mov	r4, r0
 800e736:	b1e2      	cbz	r2, 800e772 <uxr_init_custom_transport+0x4a>
 800e738:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800e73c:	b1ca      	cbz	r2, 800e772 <uxr_init_custom_transport+0x4a>
 800e73e:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800e742:	b1b2      	cbz	r2, 800e772 <uxr_init_custom_transport+0x4a>
 800e744:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800e748:	4798      	blx	r3
 800e74a:	4605      	mov	r5, r0
 800e74c:	b188      	cbz	r0, 800e772 <uxr_init_custom_transport+0x4a>
 800e74e:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800e752:	b98b      	cbnz	r3, 800e778 <uxr_init_custom_transport+0x50>
 800e754:	490b      	ldr	r1, [pc, #44]	@ (800e784 <uxr_init_custom_transport+0x5c>)
 800e756:	4b0c      	ldr	r3, [pc, #48]	@ (800e788 <uxr_init_custom_transport+0x60>)
 800e758:	4a0c      	ldr	r2, [pc, #48]	@ (800e78c <uxr_init_custom_transport+0x64>)
 800e75a:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800e75e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e762:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800e766:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800e76a:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800e76e:	4628      	mov	r0, r5
 800e770:	bd38      	pop	{r3, r4, r5, pc}
 800e772:	2500      	movs	r5, #0
 800e774:	4628      	mov	r0, r5
 800e776:	bd38      	pop	{r3, r4, r5, pc}
 800e778:	2100      	movs	r1, #0
 800e77a:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800e77e:	f001 fa17 	bl	800fbb0 <uxr_init_framing_io>
 800e782:	e7e7      	b.n	800e754 <uxr_init_custom_transport+0x2c>
 800e784:	0800e6b9 	.word	0x0800e6b9
 800e788:	0800e621 	.word	0x0800e621
 800e78c:	0800e615 	.word	0x0800e615

0800e790 <uxr_close_custom_transport>:
 800e790:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800e794:	4718      	bx	r3
 800e796:	bf00      	nop

0800e798 <uxr_object_id>:
 800e798:	b082      	sub	sp, #8
 800e79a:	2300      	movs	r3, #0
 800e79c:	f88d 1006 	strb.w	r1, [sp, #6]
 800e7a0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e7a4:	f360 030f 	bfi	r3, r0, #0, #16
 800e7a8:	f362 431f 	bfi	r3, r2, #16, #16
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	b002      	add	sp, #8
 800e7b0:	4770      	bx	lr
 800e7b2:	bf00      	nop

0800e7b4 <uxr_object_id_from_raw>:
 800e7b4:	7843      	ldrb	r3, [r0, #1]
 800e7b6:	7801      	ldrb	r1, [r0, #0]
 800e7b8:	b082      	sub	sp, #8
 800e7ba:	f003 020f 	and.w	r2, r3, #15
 800e7be:	f88d 2006 	strb.w	r2, [sp, #6]
 800e7c2:	091b      	lsrs	r3, r3, #4
 800e7c4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e7c8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800e7cc:	2000      	movs	r0, #0
 800e7ce:	f363 000f 	bfi	r0, r3, #0, #16
 800e7d2:	f362 401f 	bfi	r0, r2, #16, #16
 800e7d6:	b002      	add	sp, #8
 800e7d8:	4770      	bx	lr
 800e7da:	bf00      	nop

0800e7dc <uxr_object_id_to_raw>:
 800e7dc:	4602      	mov	r2, r0
 800e7de:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800e7e2:	b082      	sub	sp, #8
 800e7e4:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800e7e8:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800e7ec:	f881 c000 	strb.w	ip, [r1]
 800e7f0:	7048      	strb	r0, [r1, #1]
 800e7f2:	b002      	add	sp, #8
 800e7f4:	4770      	bx	lr
 800e7f6:	bf00      	nop

0800e7f8 <uxr_buffer_cancel_data>:
 800e7f8:	b510      	push	{r4, lr}
 800e7fa:	b094      	sub	sp, #80	@ 0x50
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	9202      	str	r2, [sp, #8]
 800e800:	9205      	str	r2, [sp, #20]
 800e802:	9301      	str	r3, [sp, #4]
 800e804:	2201      	movs	r2, #1
 800e806:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e80a:	f88d 301e 	strb.w	r3, [sp, #30]
 800e80e:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800e812:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800e816:	2308      	movs	r3, #8
 800e818:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800e81c:	9300      	str	r3, [sp, #0]
 800e81e:	2210      	movs	r2, #16
 800e820:	ab0c      	add	r3, sp, #48	@ 0x30
 800e822:	4604      	mov	r4, r0
 800e824:	9103      	str	r1, [sp, #12]
 800e826:	f001 f85d 	bl	800f8e4 <uxr_prepare_stream_to_write_submessage>
 800e82a:	b918      	cbnz	r0, 800e834 <uxr_buffer_cancel_data+0x3c>
 800e82c:	4604      	mov	r4, r0
 800e82e:	4620      	mov	r0, r4
 800e830:	b014      	add	sp, #80	@ 0x50
 800e832:	bd10      	pop	{r4, pc}
 800e834:	9905      	ldr	r1, [sp, #20]
 800e836:	aa06      	add	r2, sp, #24
 800e838:	4620      	mov	r0, r4
 800e83a:	f001 f989 	bl	800fb50 <uxr_init_base_object_request>
 800e83e:	a906      	add	r1, sp, #24
 800e840:	4604      	mov	r4, r0
 800e842:	a80c      	add	r0, sp, #48	@ 0x30
 800e844:	f003 f82a 	bl	801189c <uxr_serialize_READ_DATA_Payload>
 800e848:	4620      	mov	r0, r4
 800e84a:	b014      	add	sp, #80	@ 0x50
 800e84c:	bd10      	pop	{r4, pc}
 800e84e:	bf00      	nop

0800e850 <read_submessage_format>:
 800e850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e854:	b095      	sub	sp, #84	@ 0x54
 800e856:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800e85a:	b113      	cbz	r3, 800e862 <read_submessage_format+0x12>
 800e85c:	b015      	add	sp, #84	@ 0x54
 800e85e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e862:	460c      	mov	r4, r1
 800e864:	4615      	mov	r5, r2
 800e866:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800e86a:	4607      	mov	r7, r0
 800e86c:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800e86e:	9004      	str	r0, [sp, #16]
 800e870:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800e872:	9005      	str	r0, [sp, #20]
 800e874:	1a52      	subs	r2, r2, r1
 800e876:	a80c      	add	r0, sp, #48	@ 0x30
 800e878:	4699      	mov	r9, r3
 800e87a:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800e87e:	f7fd f95d 	bl	800bb3c <ucdr_init_buffer>
 800e882:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e886:	a80c      	add	r0, sp, #48	@ 0x30
 800e888:	f7fd f92c 	bl	800bae4 <ucdr_set_on_full_buffer_callback>
 800e88c:	69e2      	ldr	r2, [r4, #28]
 800e88e:	b19a      	cbz	r2, 800e8b8 <read_submessage_format+0x68>
 800e890:	f1b8 0f07 	cmp.w	r8, #7
 800e894:	f882 9014 	strb.w	r9, [r2, #20]
 800e898:	d040      	beq.n	800e91c <read_submessage_format+0xcc>
 800e89a:	f1b8 0f08 	cmp.w	r8, #8
 800e89e:	d02e      	beq.n	800e8fe <read_submessage_format+0xae>
 800e8a0:	f1b8 0f06 	cmp.w	r8, #6
 800e8a4:	d011      	beq.n	800e8ca <read_submessage_format+0x7a>
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	7513      	strb	r3, [r2, #20]
 800e8aa:	4629      	mov	r1, r5
 800e8ac:	4620      	mov	r0, r4
 800e8ae:	f7fd f995 	bl	800bbdc <ucdr_advance_buffer>
 800e8b2:	b015      	add	sp, #84	@ 0x54
 800e8b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8b8:	f1b8 0f07 	cmp.w	r8, #7
 800e8bc:	d02e      	beq.n	800e91c <read_submessage_format+0xcc>
 800e8be:	f1b8 0f08 	cmp.w	r8, #8
 800e8c2:	d01c      	beq.n	800e8fe <read_submessage_format+0xae>
 800e8c4:	f1b8 0f06 	cmp.w	r8, #6
 800e8c8:	d1ef      	bne.n	800e8aa <read_submessage_format+0x5a>
 800e8ca:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800e8ce:	f1b8 0f00 	cmp.w	r8, #0
 800e8d2:	d011      	beq.n	800e8f8 <read_submessage_format+0xa8>
 800e8d4:	ab0c      	add	r3, sp, #48	@ 0x30
 800e8d6:	e9cd 3500 	strd	r3, r5, [sp]
 800e8da:	2306      	movs	r3, #6
 800e8dc:	f88d 3016 	strb.w	r3, [sp, #22]
 800e8e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e8e4:	9302      	str	r3, [sp, #8]
 800e8e6:	4632      	mov	r2, r6
 800e8e8:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800e8ec:	4638      	mov	r0, r7
 800e8ee:	47c0      	blx	r8
 800e8f0:	2301      	movs	r3, #1
 800e8f2:	69e2      	ldr	r2, [r4, #28]
 800e8f4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800e8f8:	2a00      	cmp	r2, #0
 800e8fa:	d1d4      	bne.n	800e8a6 <read_submessage_format+0x56>
 800e8fc:	e7d5      	b.n	800e8aa <read_submessage_format+0x5a>
 800e8fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e902:	2b00      	cmp	r3, #0
 800e904:	d0f8      	beq.n	800e8f8 <read_submessage_format+0xa8>
 800e906:	a906      	add	r1, sp, #24
 800e908:	a80c      	add	r0, sp, #48	@ 0x30
 800e90a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800e90e:	f003 f899 	bl	8011a44 <uxr_deserialize_SampleIdentity>
 800e912:	b9a0      	cbnz	r0, 800e93e <read_submessage_format+0xee>
 800e914:	69e2      	ldr	r2, [r4, #28]
 800e916:	2a00      	cmp	r2, #0
 800e918:	d1c5      	bne.n	800e8a6 <read_submessage_format+0x56>
 800e91a:	e7c6      	b.n	800e8aa <read_submessage_format+0x5a>
 800e91c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e920:	b13b      	cbz	r3, 800e932 <read_submessage_format+0xe2>
 800e922:	a906      	add	r1, sp, #24
 800e924:	a80c      	add	r0, sp, #48	@ 0x30
 800e926:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800e92a:	f002 fd51 	bl	80113d0 <uxr_deserialize_BaseObjectRequest>
 800e92e:	bb60      	cbnz	r0, 800e98a <read_submessage_format+0x13a>
 800e930:	69e2      	ldr	r2, [r4, #28]
 800e932:	68a3      	ldr	r3, [r4, #8]
 800e934:	442b      	add	r3, r5
 800e936:	60a3      	str	r3, [r4, #8]
 800e938:	2a00      	cmp	r2, #0
 800e93a:	d1b4      	bne.n	800e8a6 <read_submessage_format+0x56>
 800e93c:	e7b5      	b.n	800e8aa <read_submessage_format+0x5a>
 800e93e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800e942:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e944:	1a52      	subs	r2, r2, r1
 800e946:	eba8 0803 	sub.w	r8, r8, r3
 800e94a:	a80c      	add	r0, sp, #48	@ 0x30
 800e94c:	f7fd f8f6 	bl	800bb3c <ucdr_init_buffer>
 800e950:	44a8      	add	r8, r5
 800e952:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e956:	a80c      	add	r0, sp, #48	@ 0x30
 800e958:	f7fd f8c4 	bl	800bae4 <ucdr_set_on_full_buffer_callback>
 800e95c:	fa1f f888 	uxth.w	r8, r8
 800e960:	ab0c      	add	r3, sp, #48	@ 0x30
 800e962:	9300      	str	r3, [sp, #0]
 800e964:	f8cd 8004 	str.w	r8, [sp, #4]
 800e968:	2108      	movs	r1, #8
 800e96a:	f88d 1016 	strb.w	r1, [sp, #22]
 800e96e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800e972:	9102      	str	r1, [sp, #8]
 800e974:	ab06      	add	r3, sp, #24
 800e976:	4632      	mov	r2, r6
 800e978:	9905      	ldr	r1, [sp, #20]
 800e97a:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800e97e:	4638      	mov	r0, r7
 800e980:	47b0      	blx	r6
 800e982:	2301      	movs	r3, #1
 800e984:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800e988:	e7c4      	b.n	800e914 <read_submessage_format+0xc4>
 800e98a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800e98e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e990:	1a52      	subs	r2, r2, r1
 800e992:	a80c      	add	r0, sp, #48	@ 0x30
 800e994:	eba8 0803 	sub.w	r8, r8, r3
 800e998:	f7fd f8d0 	bl	800bb3c <ucdr_init_buffer>
 800e99c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e9a0:	a80c      	add	r0, sp, #48	@ 0x30
 800e9a2:	f7fd f89f 	bl	800bae4 <ucdr_set_on_full_buffer_callback>
 800e9a6:	ab0c      	add	r3, sp, #48	@ 0x30
 800e9a8:	9300      	str	r3, [sp, #0]
 800e9aa:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800e9ae:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e9b2:	44a8      	add	r8, r5
 800e9b4:	fa1f f888 	uxth.w	r8, r8
 800e9b8:	f8cd 8004 	str.w	r8, [sp, #4]
 800e9bc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800e9c0:	2107      	movs	r1, #7
 800e9c2:	f88d 1016 	strb.w	r1, [sp, #22]
 800e9c6:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800e9ca:	9102      	str	r1, [sp, #8]
 800e9cc:	4632      	mov	r2, r6
 800e9ce:	b29b      	uxth	r3, r3
 800e9d0:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800e9d4:	9905      	ldr	r1, [sp, #20]
 800e9d6:	4638      	mov	r0, r7
 800e9d8:	47b0      	blx	r6
 800e9da:	2301      	movs	r3, #1
 800e9dc:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800e9e0:	e7a6      	b.n	800e930 <read_submessage_format+0xe0>
 800e9e2:	bf00      	nop

0800e9e4 <on_get_fragmentation_info>:
 800e9e4:	b500      	push	{lr}
 800e9e6:	b08b      	sub	sp, #44	@ 0x2c
 800e9e8:	4601      	mov	r1, r0
 800e9ea:	2204      	movs	r2, #4
 800e9ec:	a802      	add	r0, sp, #8
 800e9ee:	f7fd f8a5 	bl	800bb3c <ucdr_init_buffer>
 800e9f2:	f10d 0305 	add.w	r3, sp, #5
 800e9f6:	f10d 0206 	add.w	r2, sp, #6
 800e9fa:	a901      	add	r1, sp, #4
 800e9fc:	a802      	add	r0, sp, #8
 800e9fe:	f001 febb 	bl	8010778 <uxr_read_submessage_header>
 800ea02:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ea06:	2b0d      	cmp	r3, #13
 800ea08:	d003      	beq.n	800ea12 <on_get_fragmentation_info+0x2e>
 800ea0a:	2000      	movs	r0, #0
 800ea0c:	b00b      	add	sp, #44	@ 0x2c
 800ea0e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ea12:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ea16:	f013 0f02 	tst.w	r3, #2
 800ea1a:	bf14      	ite	ne
 800ea1c:	2002      	movne	r0, #2
 800ea1e:	2001      	moveq	r0, #1
 800ea20:	b00b      	add	sp, #44	@ 0x2c
 800ea22:	f85d fb04 	ldr.w	pc, [sp], #4
 800ea26:	bf00      	nop

0800ea28 <read_submessage_get_info>:
 800ea28:	b570      	push	{r4, r5, r6, lr}
 800ea2a:	2500      	movs	r5, #0
 800ea2c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800ea30:	4604      	mov	r4, r0
 800ea32:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800ea36:	460e      	mov	r6, r1
 800ea38:	a810      	add	r0, sp, #64	@ 0x40
 800ea3a:	4629      	mov	r1, r5
 800ea3c:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800ea40:	f008 feb4 	bl	80177ac <memset>
 800ea44:	a903      	add	r1, sp, #12
 800ea46:	4630      	mov	r0, r6
 800ea48:	f002 fe6a 	bl	8011720 <uxr_deserialize_GET_INFO_Payload>
 800ea4c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800ea50:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ea54:	4620      	mov	r0, r4
 800ea56:	f001 f873 	bl	800fb40 <uxr_session_header_offset>
 800ea5a:	462b      	mov	r3, r5
 800ea5c:	9000      	str	r0, [sp, #0]
 800ea5e:	220c      	movs	r2, #12
 800ea60:	a905      	add	r1, sp, #20
 800ea62:	a808      	add	r0, sp, #32
 800ea64:	f7fd f858 	bl	800bb18 <ucdr_init_buffer_origin_offset>
 800ea68:	a910      	add	r1, sp, #64	@ 0x40
 800ea6a:	a808      	add	r0, sp, #32
 800ea6c:	f002 feca 	bl	8011804 <uxr_serialize_INFO_Payload>
 800ea70:	9b08      	ldr	r3, [sp, #32]
 800ea72:	462a      	mov	r2, r5
 800ea74:	4629      	mov	r1, r5
 800ea76:	4620      	mov	r0, r4
 800ea78:	f001 f80c 	bl	800fa94 <uxr_stamp_session_header>
 800ea7c:	a808      	add	r0, sp, #32
 800ea7e:	f7fd f889 	bl	800bb94 <ucdr_buffer_length>
 800ea82:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ea84:	4602      	mov	r2, r0
 800ea86:	a905      	add	r1, sp, #20
 800ea88:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ea8c:	47a0      	blx	r4
 800ea8e:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800ea92:	bd70      	pop	{r4, r5, r6, pc}

0800ea94 <write_submessage_acknack.isra.0>:
 800ea94:	b570      	push	{r4, r5, r6, lr}
 800ea96:	b092      	sub	sp, #72	@ 0x48
 800ea98:	4605      	mov	r5, r0
 800ea9a:	460e      	mov	r6, r1
 800ea9c:	4614      	mov	r4, r2
 800ea9e:	f001 f84f 	bl	800fb40 <uxr_session_header_offset>
 800eaa2:	a905      	add	r1, sp, #20
 800eaa4:	9000      	str	r0, [sp, #0]
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	a80a      	add	r0, sp, #40	@ 0x28
 800eaaa:	2211      	movs	r2, #17
 800eaac:	f7fd f834 	bl	800bb18 <ucdr_init_buffer_origin_offset>
 800eab0:	2218      	movs	r2, #24
 800eab2:	fb02 5404 	mla	r4, r2, r4, r5
 800eab6:	2300      	movs	r3, #0
 800eab8:	2205      	movs	r2, #5
 800eaba:	3450      	adds	r4, #80	@ 0x50
 800eabc:	210a      	movs	r1, #10
 800eabe:	a80a      	add	r0, sp, #40	@ 0x28
 800eac0:	f001 fe40 	bl	8010744 <uxr_buffer_submessage_header>
 800eac4:	a903      	add	r1, sp, #12
 800eac6:	4620      	mov	r0, r4
 800eac8:	f007 fb10 	bl	80160ec <uxr_compute_acknack>
 800eacc:	ba40      	rev16	r0, r0
 800eace:	f8ad 000e 	strh.w	r0, [sp, #14]
 800ead2:	a903      	add	r1, sp, #12
 800ead4:	a80a      	add	r0, sp, #40	@ 0x28
 800ead6:	f88d 6010 	strb.w	r6, [sp, #16]
 800eada:	f002 ff03 	bl	80118e4 <uxr_serialize_ACKNACK_Payload>
 800eade:	2200      	movs	r2, #0
 800eae0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eae2:	4611      	mov	r1, r2
 800eae4:	4628      	mov	r0, r5
 800eae6:	f000 ffd5 	bl	800fa94 <uxr_stamp_session_header>
 800eaea:	a80a      	add	r0, sp, #40	@ 0x28
 800eaec:	f7fd f852 	bl	800bb94 <ucdr_buffer_length>
 800eaf0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800eaf2:	4602      	mov	r2, r0
 800eaf4:	a905      	add	r1, sp, #20
 800eaf6:	e9d3 0400 	ldrd	r0, r4, [r3]
 800eafa:	47a0      	blx	r4
 800eafc:	b012      	add	sp, #72	@ 0x48
 800eafe:	bd70      	pop	{r4, r5, r6, pc}

0800eb00 <uxr_init_session>:
 800eb00:	b510      	push	{r4, lr}
 800eb02:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800eb38 <uxr_init_session+0x38>
 800eb06:	2300      	movs	r3, #0
 800eb08:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800eb0c:	4604      	mov	r4, r0
 800eb0e:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800eb12:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800eb16:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800eb1a:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800eb1e:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800eb22:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800eb26:	2181      	movs	r1, #129	@ 0x81
 800eb28:	f000 ff20 	bl	800f96c <uxr_init_session_info>
 800eb2c:	f104 0008 	add.w	r0, r4, #8
 800eb30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb34:	f001 bd22 	b.w	801057c <uxr_init_stream_storage>
	...

0800eb40 <uxr_set_status_callback>:
 800eb40:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800eb44:	4770      	bx	lr
 800eb46:	bf00      	nop

0800eb48 <uxr_set_topic_callback>:
 800eb48:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800eb4c:	4770      	bx	lr
 800eb4e:	bf00      	nop

0800eb50 <uxr_set_request_callback>:
 800eb50:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800eb54:	4770      	bx	lr
 800eb56:	bf00      	nop

0800eb58 <uxr_set_reply_callback>:
 800eb58:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800eb5c:	4770      	bx	lr
 800eb5e:	bf00      	nop

0800eb60 <uxr_create_output_best_effort_stream>:
 800eb60:	b510      	push	{r4, lr}
 800eb62:	b084      	sub	sp, #16
 800eb64:	e9cd 2100 	strd	r2, r1, [sp]
 800eb68:	4604      	mov	r4, r0
 800eb6a:	f000 ffe9 	bl	800fb40 <uxr_session_header_offset>
 800eb6e:	e9dd 2100 	ldrd	r2, r1, [sp]
 800eb72:	4603      	mov	r3, r0
 800eb74:	f104 0008 	add.w	r0, r4, #8
 800eb78:	b004      	add	sp, #16
 800eb7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb7e:	f001 bd47 	b.w	8010610 <uxr_add_output_best_effort_buffer>
 800eb82:	bf00      	nop

0800eb84 <uxr_create_output_reliable_stream>:
 800eb84:	b510      	push	{r4, lr}
 800eb86:	b088      	sub	sp, #32
 800eb88:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800eb8c:	4604      	mov	r4, r0
 800eb8e:	9303      	str	r3, [sp, #12]
 800eb90:	f000 ffd6 	bl	800fb40 <uxr_session_header_offset>
 800eb94:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800eb98:	9000      	str	r0, [sp, #0]
 800eb9a:	9905      	ldr	r1, [sp, #20]
 800eb9c:	f104 0008 	add.w	r0, r4, #8
 800eba0:	f001 fd4a 	bl	8010638 <uxr_add_output_reliable_buffer>
 800eba4:	2200      	movs	r2, #0
 800eba6:	b2c3      	uxtb	r3, r0
 800eba8:	f363 0207 	bfi	r2, r3, #0, #8
 800ebac:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800ebb0:	f363 220f 	bfi	r2, r3, #8, #8
 800ebb4:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800ebb8:	f363 4217 	bfi	r2, r3, #16, #8
 800ebbc:	0e03      	lsrs	r3, r0, #24
 800ebbe:	f363 621f 	bfi	r2, r3, #24, #8
 800ebc2:	4610      	mov	r0, r2
 800ebc4:	b008      	add	sp, #32
 800ebc6:	bd10      	pop	{r4, pc}

0800ebc8 <uxr_create_input_best_effort_stream>:
 800ebc8:	b082      	sub	sp, #8
 800ebca:	3008      	adds	r0, #8
 800ebcc:	b002      	add	sp, #8
 800ebce:	f001 bd4d 	b.w	801066c <uxr_add_input_best_effort_buffer>
 800ebd2:	bf00      	nop

0800ebd4 <uxr_create_input_reliable_stream>:
 800ebd4:	b510      	push	{r4, lr}
 800ebd6:	b084      	sub	sp, #16
 800ebd8:	4c0b      	ldr	r4, [pc, #44]	@ (800ec08 <uxr_create_input_reliable_stream+0x34>)
 800ebda:	9400      	str	r4, [sp, #0]
 800ebdc:	3008      	adds	r0, #8
 800ebde:	f001 fd5b 	bl	8010698 <uxr_add_input_reliable_buffer>
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	b2c3      	uxtb	r3, r0
 800ebe6:	f363 0207 	bfi	r2, r3, #0, #8
 800ebea:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800ebee:	f363 220f 	bfi	r2, r3, #8, #8
 800ebf2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800ebf6:	f363 4217 	bfi	r2, r3, #16, #8
 800ebfa:	0e03      	lsrs	r3, r0, #24
 800ebfc:	f363 621f 	bfi	r2, r3, #24, #8
 800ec00:	4610      	mov	r0, r2
 800ec02:	b004      	add	sp, #16
 800ec04:	bd10      	pop	{r4, pc}
 800ec06:	bf00      	nop
 800ec08:	0800e9e5 	.word	0x0800e9e5

0800ec0c <uxr_epoch_nanos>:
 800ec0c:	b510      	push	{r4, lr}
 800ec0e:	4604      	mov	r4, r0
 800ec10:	f001 fdf8 	bl	8010804 <uxr_nanos>
 800ec14:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800ec18:	1ac0      	subs	r0, r0, r3
 800ec1a:	eb61 0102 	sbc.w	r1, r1, r2
 800ec1e:	bd10      	pop	{r4, pc}

0800ec20 <uxr_flash_output_streams>:
 800ec20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec24:	7e03      	ldrb	r3, [r0, #24]
 800ec26:	b084      	sub	sp, #16
 800ec28:	4604      	mov	r4, r0
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d035      	beq.n	800ec9a <uxr_flash_output_streams+0x7a>
 800ec2e:	f04f 0900 	mov.w	r9, #0
 800ec32:	4648      	mov	r0, r9
 800ec34:	f10d 0802 	add.w	r8, sp, #2
 800ec38:	af03      	add	r7, sp, #12
 800ec3a:	ae02      	add	r6, sp, #8
 800ec3c:	e006      	b.n	800ec4c <uxr_flash_output_streams+0x2c>
 800ec3e:	7e23      	ldrb	r3, [r4, #24]
 800ec40:	f109 0901 	add.w	r9, r9, #1
 800ec44:	fa5f f089 	uxtb.w	r0, r9
 800ec48:	4283      	cmp	r3, r0
 800ec4a:	d926      	bls.n	800ec9a <uxr_flash_output_streams+0x7a>
 800ec4c:	2201      	movs	r2, #1
 800ec4e:	4611      	mov	r1, r2
 800ec50:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800ec54:	f001 fc3e 	bl	80104d4 <uxr_stream_id>
 800ec58:	3508      	adds	r5, #8
 800ec5a:	4684      	mov	ip, r0
 800ec5c:	4643      	mov	r3, r8
 800ec5e:	463a      	mov	r2, r7
 800ec60:	4631      	mov	r1, r6
 800ec62:	4628      	mov	r0, r5
 800ec64:	f8cd c004 	str.w	ip, [sp, #4]
 800ec68:	f007 fac6 	bl	80161f8 <uxr_prepare_best_effort_buffer_to_send>
 800ec6c:	2800      	cmp	r0, #0
 800ec6e:	d0e6      	beq.n	800ec3e <uxr_flash_output_streams+0x1e>
 800ec70:	9b02      	ldr	r3, [sp, #8]
 800ec72:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ec76:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ec7a:	4620      	mov	r0, r4
 800ec7c:	f000 ff0a 	bl	800fa94 <uxr_stamp_session_header>
 800ec80:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ec82:	9a03      	ldr	r2, [sp, #12]
 800ec84:	685d      	ldr	r5, [r3, #4]
 800ec86:	6818      	ldr	r0, [r3, #0]
 800ec88:	9902      	ldr	r1, [sp, #8]
 800ec8a:	47a8      	blx	r5
 800ec8c:	f109 0901 	add.w	r9, r9, #1
 800ec90:	7e23      	ldrb	r3, [r4, #24]
 800ec92:	fa5f f089 	uxtb.w	r0, r9
 800ec96:	4283      	cmp	r3, r0
 800ec98:	d8d8      	bhi.n	800ec4c <uxr_flash_output_streams+0x2c>
 800ec9a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ec9e:	b38b      	cbz	r3, 800ed04 <uxr_flash_output_streams+0xe4>
 800eca0:	f04f 0900 	mov.w	r9, #0
 800eca4:	f10d 0802 	add.w	r8, sp, #2
 800eca8:	af03      	add	r7, sp, #12
 800ecaa:	ae02      	add	r6, sp, #8
 800ecac:	4648      	mov	r0, r9
 800ecae:	2201      	movs	r2, #1
 800ecb0:	2102      	movs	r1, #2
 800ecb2:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800ecb6:	f001 fc0d 	bl	80104d4 <uxr_stream_id>
 800ecba:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800ecbe:	3520      	adds	r5, #32
 800ecc0:	9001      	str	r0, [sp, #4]
 800ecc2:	e00d      	b.n	800ece0 <uxr_flash_output_streams+0xc0>
 800ecc4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ecc8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800eccc:	9b02      	ldr	r3, [sp, #8]
 800ecce:	f000 fee1 	bl	800fa94 <uxr_stamp_session_header>
 800ecd2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ecd4:	9a03      	ldr	r2, [sp, #12]
 800ecd6:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800ecda:	9902      	ldr	r1, [sp, #8]
 800ecdc:	6818      	ldr	r0, [r3, #0]
 800ecde:	47d0      	blx	sl
 800ece0:	4643      	mov	r3, r8
 800ece2:	463a      	mov	r2, r7
 800ece4:	4631      	mov	r1, r6
 800ece6:	4628      	mov	r0, r5
 800ece8:	f007 fca4 	bl	8016634 <uxr_prepare_next_reliable_buffer_to_send>
 800ecec:	4603      	mov	r3, r0
 800ecee:	4620      	mov	r0, r4
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d1e7      	bne.n	800ecc4 <uxr_flash_output_streams+0xa4>
 800ecf4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ecf8:	f109 0901 	add.w	r9, r9, #1
 800ecfc:	fa5f f089 	uxtb.w	r0, r9
 800ed00:	4283      	cmp	r3, r0
 800ed02:	d8d4      	bhi.n	800ecae <uxr_flash_output_streams+0x8e>
 800ed04:	b004      	add	sp, #16
 800ed06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed0a:	bf00      	nop

0800ed0c <read_submessage_info>:
 800ed0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed10:	460d      	mov	r5, r1
 800ed12:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800ed16:	4669      	mov	r1, sp
 800ed18:	4607      	mov	r7, r0
 800ed1a:	4628      	mov	r0, r5
 800ed1c:	f002 fc0e 	bl	801153c <uxr_deserialize_BaseObjectReply>
 800ed20:	a902      	add	r1, sp, #8
 800ed22:	4604      	mov	r4, r0
 800ed24:	4628      	mov	r0, r5
 800ed26:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800ed2a:	f7fb fdad 	bl	800a888 <ucdr_deserialize_bool>
 800ed2e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800ed32:	4004      	ands	r4, r0
 800ed34:	b2e4      	uxtb	r4, r4
 800ed36:	b95b      	cbnz	r3, 800ed50 <read_submessage_info+0x44>
 800ed38:	a987      	add	r1, sp, #540	@ 0x21c
 800ed3a:	4628      	mov	r0, r5
 800ed3c:	f7fb fda4 	bl	800a888 <ucdr_deserialize_bool>
 800ed40:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800ed44:	4606      	mov	r6, r0
 800ed46:	b94b      	cbnz	r3, 800ed5c <read_submessage_info+0x50>
 800ed48:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800ed4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed50:	a903      	add	r1, sp, #12
 800ed52:	4628      	mov	r0, r5
 800ed54:	f002 fa9a 	bl	801128c <uxr_deserialize_ObjectVariant>
 800ed58:	4004      	ands	r4, r0
 800ed5a:	e7ed      	b.n	800ed38 <read_submessage_info+0x2c>
 800ed5c:	a988      	add	r1, sp, #544	@ 0x220
 800ed5e:	4628      	mov	r0, r5
 800ed60:	f7fb fdc0 	bl	800a8e4 <ucdr_deserialize_uint8_t>
 800ed64:	4234      	tst	r4, r6
 800ed66:	d0ef      	beq.n	800ed48 <read_submessage_info+0x3c>
 800ed68:	2800      	cmp	r0, #0
 800ed6a:	d0ed      	beq.n	800ed48 <read_submessage_info+0x3c>
 800ed6c:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800ed70:	2b0d      	cmp	r3, #13
 800ed72:	d1e9      	bne.n	800ed48 <read_submessage_info+0x3c>
 800ed74:	a98a      	add	r1, sp, #552	@ 0x228
 800ed76:	4628      	mov	r0, r5
 800ed78:	f7fc fb5a 	bl	800b430 <ucdr_deserialize_int16_t>
 800ed7c:	b140      	cbz	r0, 800ed90 <read_submessage_info+0x84>
 800ed7e:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	dd07      	ble.n	800ed96 <read_submessage_info+0x8a>
 800ed86:	f1b8 0f00 	cmp.w	r8, #0
 800ed8a:	bf14      	ite	ne
 800ed8c:	2001      	movne	r0, #1
 800ed8e:	2002      	moveq	r0, #2
 800ed90:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800ed94:	e7d8      	b.n	800ed48 <read_submessage_info+0x3c>
 800ed96:	2000      	movs	r0, #0
 800ed98:	e7fa      	b.n	800ed90 <read_submessage_info+0x84>
 800ed9a:	bf00      	nop

0800ed9c <read_submessage_list>:
 800ed9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eda0:	b097      	sub	sp, #92	@ 0x5c
 800eda2:	4ec1      	ldr	r6, [pc, #772]	@ (800f0a8 <read_submessage_list+0x30c>)
 800eda4:	9209      	str	r2, [sp, #36]	@ 0x24
 800eda6:	4604      	mov	r4, r0
 800eda8:	460d      	mov	r5, r1
 800edaa:	f04f 0801 	mov.w	r8, #1
 800edae:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800edb2:	aa0c      	add	r2, sp, #48	@ 0x30
 800edb4:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800edb8:	4628      	mov	r0, r5
 800edba:	f001 fcdd 	bl	8010778 <uxr_read_submessage_header>
 800edbe:	2800      	cmp	r0, #0
 800edc0:	f000 813e 	beq.w	800f040 <read_submessage_list+0x2a4>
 800edc4:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800edc8:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800edcc:	3b02      	subs	r3, #2
 800edce:	2b0d      	cmp	r3, #13
 800edd0:	d8ed      	bhi.n	800edae <read_submessage_list+0x12>
 800edd2:	a101      	add	r1, pc, #4	@ (adr r1, 800edd8 <read_submessage_list+0x3c>)
 800edd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800edd8:	0800f037 	.word	0x0800f037
 800eddc:	0800edaf 	.word	0x0800edaf
 800ede0:	0800f027 	.word	0x0800f027
 800ede4:	0800efc5 	.word	0x0800efc5
 800ede8:	0800efbb 	.word	0x0800efbb
 800edec:	0800edaf 	.word	0x0800edaf
 800edf0:	0800edaf 	.word	0x0800edaf
 800edf4:	0800ef1b 	.word	0x0800ef1b
 800edf8:	0800eeab 	.word	0x0800eeab
 800edfc:	0800ee6b 	.word	0x0800ee6b
 800ee00:	0800edaf 	.word	0x0800edaf
 800ee04:	0800edaf 	.word	0x0800edaf
 800ee08:	0800edaf 	.word	0x0800edaf
 800ee0c:	0800ee11 	.word	0x0800ee11
 800ee10:	a910      	add	r1, sp, #64	@ 0x40
 800ee12:	4628      	mov	r0, r5
 800ee14:	f002 fdc4 	bl	80119a0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800ee18:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800ee1c:	f1b9 0f00 	cmp.w	r9, #0
 800ee20:	f000 8116 	beq.w	800f050 <read_submessage_list+0x2b4>
 800ee24:	f001 fcee 	bl	8010804 <uxr_nanos>
 800ee28:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800ee2a:	4602      	mov	r2, r0
 800ee2c:	460b      	mov	r3, r1
 800ee2e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800ee30:	2100      	movs	r1, #0
 800ee32:	468c      	mov	ip, r1
 800ee34:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800ee38:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800ee3c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ee3e:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800ee40:	468c      	mov	ip, r1
 800ee42:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800ee46:	46e2      	mov	sl, ip
 800ee48:	46bc      	mov	ip, r7
 800ee4a:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800ee4e:	fbc0 7106 	smlal	r7, r1, r0, r6
 800ee52:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800ee56:	e9cd 7100 	strd	r7, r1, [sp]
 800ee5a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800ee5e:	9106      	str	r1, [sp, #24]
 800ee60:	4620      	mov	r0, r4
 800ee62:	47c8      	blx	r9
 800ee64:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800ee68:	e7a1      	b.n	800edae <read_submessage_list+0x12>
 800ee6a:	a910      	add	r1, sp, #64	@ 0x40
 800ee6c:	4628      	mov	r0, r5
 800ee6e:	f002 fd77 	bl	8011960 <uxr_deserialize_HEARTBEAT_Payload>
 800ee72:	2100      	movs	r1, #0
 800ee74:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800ee78:	f001 fb56 	bl	8010528 <uxr_stream_id_from_raw>
 800ee7c:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800ee80:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ee82:	4639      	mov	r1, r7
 800ee84:	f104 0008 	add.w	r0, r4, #8
 800ee88:	f001 fc3c 	bl	8010704 <uxr_get_input_reliable_stream>
 800ee8c:	2800      	cmp	r0, #0
 800ee8e:	d08e      	beq.n	800edae <read_submessage_list+0x12>
 800ee90:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800ee94:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800ee98:	f007 f91c 	bl	80160d4 <uxr_process_heartbeat>
 800ee9c:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800eea0:	463a      	mov	r2, r7
 800eea2:	4620      	mov	r0, r4
 800eea4:	f7ff fdf6 	bl	800ea94 <write_submessage_acknack.isra.0>
 800eea8:	e781      	b.n	800edae <read_submessage_list+0x12>
 800eeaa:	a910      	add	r1, sp, #64	@ 0x40
 800eeac:	4628      	mov	r0, r5
 800eeae:	f002 fd2f 	bl	8011910 <uxr_deserialize_ACKNACK_Payload>
 800eeb2:	2100      	movs	r1, #0
 800eeb4:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800eeb8:	f001 fb36 	bl	8010528 <uxr_stream_id_from_raw>
 800eebc:	900d      	str	r0, [sp, #52]	@ 0x34
 800eebe:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800eec2:	f104 0008 	add.w	r0, r4, #8
 800eec6:	f001 fc09 	bl	80106dc <uxr_get_output_reliable_stream>
 800eeca:	4607      	mov	r7, r0
 800eecc:	2800      	cmp	r0, #0
 800eece:	f43f af6e 	beq.w	800edae <read_submessage_list+0x12>
 800eed2:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800eed6:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800eeda:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800eede:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800eee2:	b289      	uxth	r1, r1
 800eee4:	f007 fc50 	bl	8016788 <uxr_process_acknack>
 800eee8:	4638      	mov	r0, r7
 800eeea:	f007 fc0d 	bl	8016708 <uxr_begin_output_nack_buffer_it>
 800eeee:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800eef2:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800eef6:	e006      	b.n	800ef06 <read_submessage_list+0x16a>
 800eef8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800eefa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800eefc:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800ef00:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ef02:	6818      	ldr	r0, [r3, #0]
 800ef04:	47c8      	blx	r9
 800ef06:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800ef0a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800ef0c:	4651      	mov	r1, sl
 800ef0e:	4638      	mov	r0, r7
 800ef10:	f007 fbfc 	bl	801670c <uxr_next_reliable_nack_buffer_to_send>
 800ef14:	2800      	cmp	r0, #0
 800ef16:	d1ef      	bne.n	800eef8 <read_submessage_list+0x15c>
 800ef18:	e749      	b.n	800edae <read_submessage_list+0x12>
 800ef1a:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800ef1e:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800ef22:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800ef26:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800ef2a:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800ef2e:	4651      	mov	r1, sl
 800ef30:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800ef34:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800ef38:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800ef3c:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800ef40:	4628      	mov	r0, r5
 800ef42:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800ef46:	f002 fa43 	bl	80113d0 <uxr_deserialize_BaseObjectRequest>
 800ef4a:	4650      	mov	r0, sl
 800ef4c:	a90f      	add	r1, sp, #60	@ 0x3c
 800ef4e:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800ef52:	f000 fe1b 	bl	800fb8c <uxr_parse_base_object_request>
 800ef56:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800ef5a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ef5c:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800ef60:	9110      	str	r1, [sp, #64]	@ 0x40
 800ef62:	3f04      	subs	r7, #4
 800ef64:	f009 090e 	and.w	r9, r9, #14
 800ef68:	b2bf      	uxth	r7, r7
 800ef6a:	f1bb 0f00 	cmp.w	fp, #0
 800ef6e:	d006      	beq.n	800ef7e <read_submessage_list+0x1e2>
 800ef70:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800ef74:	9300      	str	r3, [sp, #0]
 800ef76:	4652      	mov	r2, sl
 800ef78:	2300      	movs	r3, #0
 800ef7a:	4620      	mov	r0, r4
 800ef7c:	47d8      	blx	fp
 800ef7e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800ef80:	b16a      	cbz	r2, 800ef9e <read_submessage_list+0x202>
 800ef82:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800ef84:	2100      	movs	r1, #0
 800ef86:	3802      	subs	r0, #2
 800ef88:	e002      	b.n	800ef90 <read_submessage_list+0x1f4>
 800ef8a:	3101      	adds	r1, #1
 800ef8c:	4291      	cmp	r1, r2
 800ef8e:	d006      	beq.n	800ef9e <read_submessage_list+0x202>
 800ef90:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800ef94:	4553      	cmp	r3, sl
 800ef96:	d1f8      	bne.n	800ef8a <read_submessage_list+0x1ee>
 800ef98:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	545a      	strb	r2, [r3, r1]
 800ef9e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800efa2:	9102      	str	r1, [sp, #8]
 800efa4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800efa6:	9101      	str	r1, [sp, #4]
 800efa8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800efaa:	9100      	str	r1, [sp, #0]
 800efac:	464b      	mov	r3, r9
 800efae:	463a      	mov	r2, r7
 800efb0:	4629      	mov	r1, r5
 800efb2:	4620      	mov	r0, r4
 800efb4:	f7ff fc4c 	bl	800e850 <read_submessage_format>
 800efb8:	e6f9      	b.n	800edae <read_submessage_list+0x12>
 800efba:	4629      	mov	r1, r5
 800efbc:	4620      	mov	r0, r4
 800efbe:	f7ff fea5 	bl	800ed0c <read_submessage_info>
 800efc2:	e6f4      	b.n	800edae <read_submessage_list+0x12>
 800efc4:	2a00      	cmp	r2, #0
 800efc6:	d03e      	beq.n	800f046 <read_submessage_list+0x2aa>
 800efc8:	a910      	add	r1, sp, #64	@ 0x40
 800efca:	4628      	mov	r0, r5
 800efcc:	f002 fbfc 	bl	80117c8 <uxr_deserialize_STATUS_Payload>
 800efd0:	a90e      	add	r1, sp, #56	@ 0x38
 800efd2:	aa0d      	add	r2, sp, #52	@ 0x34
 800efd4:	a810      	add	r0, sp, #64	@ 0x40
 800efd6:	f000 fdd9 	bl	800fb8c <uxr_parse_base_object_request>
 800efda:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800efde:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800efe0:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800efe4:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800efe8:	910f      	str	r1, [sp, #60]	@ 0x3c
 800efea:	f1ba 0f00 	cmp.w	sl, #0
 800efee:	d006      	beq.n	800effe <read_submessage_list+0x262>
 800eff0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800eff4:	9300      	str	r3, [sp, #0]
 800eff6:	463a      	mov	r2, r7
 800eff8:	464b      	mov	r3, r9
 800effa:	4620      	mov	r0, r4
 800effc:	47d0      	blx	sl
 800effe:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800f000:	2a00      	cmp	r2, #0
 800f002:	f43f aed4 	beq.w	800edae <read_submessage_list+0x12>
 800f006:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800f008:	2100      	movs	r1, #0
 800f00a:	3802      	subs	r0, #2
 800f00c:	e003      	b.n	800f016 <read_submessage_list+0x27a>
 800f00e:	3101      	adds	r1, #1
 800f010:	4291      	cmp	r1, r2
 800f012:	f43f aecc 	beq.w	800edae <read_submessage_list+0x12>
 800f016:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800f01a:	42bb      	cmp	r3, r7
 800f01c:	d1f7      	bne.n	800f00e <read_submessage_list+0x272>
 800f01e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800f020:	f803 9001 	strb.w	r9, [r3, r1]
 800f024:	e6c3      	b.n	800edae <read_submessage_list+0x12>
 800f026:	2a00      	cmp	r2, #0
 800f028:	f47f aec1 	bne.w	800edae <read_submessage_list+0x12>
 800f02c:	4629      	mov	r1, r5
 800f02e:	4620      	mov	r0, r4
 800f030:	f000 fcf2 	bl	800fa18 <uxr_read_create_session_status>
 800f034:	e6bb      	b.n	800edae <read_submessage_list+0x12>
 800f036:	4629      	mov	r1, r5
 800f038:	4620      	mov	r0, r4
 800f03a:	f7ff fcf5 	bl	800ea28 <read_submessage_get_info>
 800f03e:	e6b6      	b.n	800edae <read_submessage_list+0x12>
 800f040:	b017      	add	sp, #92	@ 0x5c
 800f042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f046:	4629      	mov	r1, r5
 800f048:	4620      	mov	r0, r4
 800f04a:	f000 fcf1 	bl	800fa30 <uxr_read_delete_session_status>
 800f04e:	e6ae      	b.n	800edae <read_submessage_list+0x12>
 800f050:	f001 fbd8 	bl	8010804 <uxr_nanos>
 800f054:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f056:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f058:	464f      	mov	r7, r9
 800f05a:	fbc3 2706 	smlal	r2, r7, r3, r6
 800f05e:	1812      	adds	r2, r2, r0
 800f060:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f062:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800f064:	eb47 0101 	adc.w	r1, r7, r1
 800f068:	464f      	mov	r7, r9
 800f06a:	fbc3 0706 	smlal	r0, r7, r3, r6
 800f06e:	463b      	mov	r3, r7
 800f070:	4684      	mov	ip, r0
 800f072:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800f076:	fbc7 0906 	smlal	r0, r9, r7, r6
 800f07a:	eb1c 0c00 	adds.w	ip, ip, r0
 800f07e:	464f      	mov	r7, r9
 800f080:	eb43 0307 	adc.w	r3, r3, r7
 800f084:	ebb2 0c0c 	subs.w	ip, r2, ip
 800f088:	eb61 0303 	sbc.w	r3, r1, r3
 800f08c:	0fda      	lsrs	r2, r3, #31
 800f08e:	eb12 020c 	adds.w	r2, r2, ip
 800f092:	f143 0300 	adc.w	r3, r3, #0
 800f096:	0852      	lsrs	r2, r2, #1
 800f098:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800f09c:	105b      	asrs	r3, r3, #1
 800f09e:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800f0a2:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800f0a6:	e6dd      	b.n	800ee64 <read_submessage_list+0xc8>
 800f0a8:	3b9aca00 	.word	0x3b9aca00

0800f0ac <listen_message_reliably>:
 800f0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0b0:	1e0b      	subs	r3, r1, #0
 800f0b2:	b09d      	sub	sp, #116	@ 0x74
 800f0b4:	bfb8      	it	lt
 800f0b6:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800f0ba:	4680      	mov	r8, r0
 800f0bc:	9305      	str	r3, [sp, #20]
 800f0be:	f001 fb87 	bl	80107d0 <uxr_millis>
 800f0c2:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800f0c6:	4681      	mov	r9, r0
 800f0c8:	2a00      	cmp	r2, #0
 800f0ca:	f000 80a1 	beq.w	800f210 <listen_message_reliably+0x164>
 800f0ce:	2600      	movs	r6, #0
 800f0d0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f0d4:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800f0d8:	9303      	str	r3, [sp, #12]
 800f0da:	4630      	mov	r0, r6
 800f0dc:	460f      	mov	r7, r1
 800f0de:	e00f      	b.n	800f100 <listen_message_reliably+0x54>
 800f0e0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f0e4:	9903      	ldr	r1, [sp, #12]
 800f0e6:	455a      	cmp	r2, fp
 800f0e8:	f106 0601 	add.w	r6, r6, #1
 800f0ec:	eb73 0101 	sbcs.w	r1, r3, r1
 800f0f0:	b2f0      	uxtb	r0, r6
 800f0f2:	da01      	bge.n	800f0f8 <listen_message_reliably+0x4c>
 800f0f4:	4693      	mov	fp, r2
 800f0f6:	9303      	str	r3, [sp, #12]
 800f0f8:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800f0fc:	4283      	cmp	r3, r0
 800f0fe:	d960      	bls.n	800f1c2 <listen_message_reliably+0x116>
 800f100:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800f104:	2102      	movs	r1, #2
 800f106:	2201      	movs	r2, #1
 800f108:	f001 f9e4 	bl	80104d4 <uxr_stream_id>
 800f10c:	00e4      	lsls	r4, r4, #3
 800f10e:	f104 0520 	add.w	r5, r4, #32
 800f112:	4445      	add	r5, r8
 800f114:	4601      	mov	r1, r0
 800f116:	463b      	mov	r3, r7
 800f118:	464a      	mov	r2, r9
 800f11a:	4628      	mov	r0, r5
 800f11c:	9109      	str	r1, [sp, #36]	@ 0x24
 800f11e:	f007 fac9 	bl	80166b4 <uxr_update_output_stream_heartbeat_timestamp>
 800f122:	eb08 0304 	add.w	r3, r8, r4
 800f126:	2800      	cmp	r0, #0
 800f128:	d0da      	beq.n	800f0e0 <listen_message_reliably+0x34>
 800f12a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800f12e:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800f132:	9304      	str	r3, [sp, #16]
 800f134:	4640      	mov	r0, r8
 800f136:	f000 fd03 	bl	800fb40 <uxr_session_header_offset>
 800f13a:	3501      	adds	r5, #1
 800f13c:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800f140:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800f144:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800f148:	2300      	movs	r3, #0
 800f14a:	2211      	movs	r2, #17
 800f14c:	9000      	str	r0, [sp, #0]
 800f14e:	a90c      	add	r1, sp, #48	@ 0x30
 800f150:	4650      	mov	r0, sl
 800f152:	f7fc fce1 	bl	800bb18 <ucdr_init_buffer_origin_offset>
 800f156:	2300      	movs	r3, #0
 800f158:	2205      	movs	r2, #5
 800f15a:	210b      	movs	r1, #11
 800f15c:	4650      	mov	r0, sl
 800f15e:	f001 faf1 	bl	8010744 <uxr_buffer_submessage_header>
 800f162:	8968      	ldrh	r0, [r5, #10]
 800f164:	2101      	movs	r1, #1
 800f166:	f007 fb67 	bl	8016838 <uxr_seq_num_add>
 800f16a:	892b      	ldrh	r3, [r5, #8]
 800f16c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800f170:	4602      	mov	r2, r0
 800f172:	9b04      	ldr	r3, [sp, #16]
 800f174:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800f178:	a90a      	add	r1, sp, #40	@ 0x28
 800f17a:	4650      	mov	r0, sl
 800f17c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800f180:	f002 fbda 	bl	8011938 <uxr_serialize_HEARTBEAT_Payload>
 800f184:	2200      	movs	r2, #0
 800f186:	4611      	mov	r1, r2
 800f188:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f18a:	4640      	mov	r0, r8
 800f18c:	f000 fc82 	bl	800fa94 <uxr_stamp_session_header>
 800f190:	4650      	mov	r0, sl
 800f192:	f7fc fcff 	bl	800bb94 <ucdr_buffer_length>
 800f196:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800f19a:	4602      	mov	r2, r0
 800f19c:	a90c      	add	r1, sp, #48	@ 0x30
 800f19e:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f1a2:	4444      	add	r4, r8
 800f1a4:	47a8      	blx	r5
 800f1a6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800f1aa:	9903      	ldr	r1, [sp, #12]
 800f1ac:	455a      	cmp	r2, fp
 800f1ae:	f106 0601 	add.w	r6, r6, #1
 800f1b2:	eb73 0101 	sbcs.w	r1, r3, r1
 800f1b6:	b2f0      	uxtb	r0, r6
 800f1b8:	db9c      	blt.n	800f0f4 <listen_message_reliably+0x48>
 800f1ba:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800f1be:	4283      	cmp	r3, r0
 800f1c0:	d89e      	bhi.n	800f100 <listen_message_reliably+0x54>
 800f1c2:	9a03      	ldr	r2, [sp, #12]
 800f1c4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f1c8:	429a      	cmp	r2, r3
 800f1ca:	bf08      	it	eq
 800f1cc:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800f1d0:	d01e      	beq.n	800f210 <listen_message_reliably+0x164>
 800f1d2:	ebab 0309 	sub.w	r3, fp, r9
 800f1d6:	9905      	ldr	r1, [sp, #20]
 800f1d8:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	bf08      	it	eq
 800f1e0:	2301      	moveq	r3, #1
 800f1e2:	4299      	cmp	r1, r3
 800f1e4:	bfa8      	it	ge
 800f1e6:	4619      	movge	r1, r3
 800f1e8:	6894      	ldr	r4, [r2, #8]
 800f1ea:	6810      	ldr	r0, [r2, #0]
 800f1ec:	4689      	mov	r9, r1
 800f1ee:	460b      	mov	r3, r1
 800f1f0:	aa08      	add	r2, sp, #32
 800f1f2:	a907      	add	r1, sp, #28
 800f1f4:	47a0      	blx	r4
 800f1f6:	b968      	cbnz	r0, 800f214 <listen_message_reliably+0x168>
 800f1f8:	9b05      	ldr	r3, [sp, #20]
 800f1fa:	eba3 0309 	sub.w	r3, r3, r9
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	9305      	str	r3, [sp, #20]
 800f202:	f73f af5c 	bgt.w	800f0be <listen_message_reliably+0x12>
 800f206:	4604      	mov	r4, r0
 800f208:	4620      	mov	r0, r4
 800f20a:	b01d      	add	sp, #116	@ 0x74
 800f20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f210:	9b05      	ldr	r3, [sp, #20]
 800f212:	e7e0      	b.n	800f1d6 <listen_message_reliably+0x12a>
 800f214:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800f218:	4604      	mov	r4, r0
 800f21a:	a80c      	add	r0, sp, #48	@ 0x30
 800f21c:	f7fc fc8e 	bl	800bb3c <ucdr_init_buffer>
 800f220:	2500      	movs	r5, #0
 800f222:	f10d 031a 	add.w	r3, sp, #26
 800f226:	aa06      	add	r2, sp, #24
 800f228:	a90c      	add	r1, sp, #48	@ 0x30
 800f22a:	4640      	mov	r0, r8
 800f22c:	f88d 5018 	strb.w	r5, [sp, #24]
 800f230:	f000 fc44 	bl	800fabc <uxr_read_session_header>
 800f234:	b918      	cbnz	r0, 800f23e <listen_message_reliably+0x192>
 800f236:	4620      	mov	r0, r4
 800f238:	b01d      	add	sp, #116	@ 0x74
 800f23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f23e:	4629      	mov	r1, r5
 800f240:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f244:	f001 f970 	bl	8010528 <uxr_stream_id_from_raw>
 800f248:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800f24c:	2d01      	cmp	r5, #1
 800f24e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800f252:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800f256:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800f25a:	d04b      	beq.n	800f2f4 <listen_message_reliably+0x248>
 800f25c:	2d02      	cmp	r5, #2
 800f25e:	d00f      	beq.n	800f280 <listen_message_reliably+0x1d4>
 800f260:	2d00      	cmp	r5, #0
 800f262:	d1e8      	bne.n	800f236 <listen_message_reliably+0x18a>
 800f264:	4629      	mov	r1, r5
 800f266:	4628      	mov	r0, r5
 800f268:	f001 f95e 	bl	8010528 <uxr_stream_id_from_raw>
 800f26c:	a90c      	add	r1, sp, #48	@ 0x30
 800f26e:	4602      	mov	r2, r0
 800f270:	4640      	mov	r0, r8
 800f272:	920a      	str	r2, [sp, #40]	@ 0x28
 800f274:	f7ff fd92 	bl	800ed9c <read_submessage_list>
 800f278:	4620      	mov	r0, r4
 800f27a:	b01d      	add	sp, #116	@ 0x74
 800f27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f280:	4631      	mov	r1, r6
 800f282:	f108 0008 	add.w	r0, r8, #8
 800f286:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800f28a:	f001 fa3b 	bl	8010704 <uxr_get_input_reliable_stream>
 800f28e:	4607      	mov	r7, r0
 800f290:	b338      	cbz	r0, 800f2e2 <listen_message_reliably+0x236>
 800f292:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f294:	9203      	str	r2, [sp, #12]
 800f296:	a80c      	add	r0, sp, #48	@ 0x30
 800f298:	f7fc fc80 	bl	800bb9c <ucdr_buffer_remaining>
 800f29c:	4603      	mov	r3, r0
 800f29e:	f10d 0019 	add.w	r0, sp, #25
 800f2a2:	9000      	str	r0, [sp, #0]
 800f2a4:	9a03      	ldr	r2, [sp, #12]
 800f2a6:	4651      	mov	r1, sl
 800f2a8:	4638      	mov	r0, r7
 800f2aa:	f006 fe19 	bl	8015ee0 <uxr_receive_reliable_message>
 800f2ae:	b1c0      	cbz	r0, 800f2e2 <listen_message_reliably+0x236>
 800f2b0:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f2b4:	b393      	cbz	r3, 800f31c <listen_message_reliably+0x270>
 800f2b6:	ad14      	add	r5, sp, #80	@ 0x50
 800f2b8:	f04f 0a02 	mov.w	sl, #2
 800f2bc:	e00a      	b.n	800f2d4 <listen_message_reliably+0x228>
 800f2be:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800f2c2:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800f2c6:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800f2ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f2cc:	4629      	mov	r1, r5
 800f2ce:	4640      	mov	r0, r8
 800f2d0:	f7ff fd64 	bl	800ed9c <read_submessage_list>
 800f2d4:	2204      	movs	r2, #4
 800f2d6:	4629      	mov	r1, r5
 800f2d8:	4638      	mov	r0, r7
 800f2da:	f006 fe81 	bl	8015fe0 <uxr_next_input_reliable_buffer_available>
 800f2de:	2800      	cmp	r0, #0
 800f2e0:	d1ed      	bne.n	800f2be <listen_message_reliably+0x212>
 800f2e2:	4640      	mov	r0, r8
 800f2e4:	4632      	mov	r2, r6
 800f2e6:	4649      	mov	r1, r9
 800f2e8:	f7ff fbd4 	bl	800ea94 <write_submessage_acknack.isra.0>
 800f2ec:	4620      	mov	r0, r4
 800f2ee:	b01d      	add	sp, #116	@ 0x74
 800f2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2f4:	4631      	mov	r1, r6
 800f2f6:	f108 0008 	add.w	r0, r8, #8
 800f2fa:	f001 f9f9 	bl	80106f0 <uxr_get_input_best_effort_stream>
 800f2fe:	2800      	cmp	r0, #0
 800f300:	d099      	beq.n	800f236 <listen_message_reliably+0x18a>
 800f302:	4651      	mov	r1, sl
 800f304:	f006 fd58 	bl	8015db8 <uxr_receive_best_effort_message>
 800f308:	2800      	cmp	r0, #0
 800f30a:	d094      	beq.n	800f236 <listen_message_reliably+0x18a>
 800f30c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800f310:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f312:	a90c      	add	r1, sp, #48	@ 0x30
 800f314:	4640      	mov	r0, r8
 800f316:	f7ff fd41 	bl	800ed9c <read_submessage_list>
 800f31a:	e78c      	b.n	800f236 <listen_message_reliably+0x18a>
 800f31c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800f320:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f322:	a90c      	add	r1, sp, #48	@ 0x30
 800f324:	4640      	mov	r0, r8
 800f326:	f7ff fd39 	bl	800ed9c <read_submessage_list>
 800f32a:	e7c4      	b.n	800f2b6 <listen_message_reliably+0x20a>

0800f32c <uxr_run_session_timeout>:
 800f32c:	b570      	push	{r4, r5, r6, lr}
 800f32e:	4604      	mov	r4, r0
 800f330:	460d      	mov	r5, r1
 800f332:	f001 fa4d 	bl	80107d0 <uxr_millis>
 800f336:	4606      	mov	r6, r0
 800f338:	4620      	mov	r0, r4
 800f33a:	f7ff fc71 	bl	800ec20 <uxr_flash_output_streams>
 800f33e:	4629      	mov	r1, r5
 800f340:	4620      	mov	r0, r4
 800f342:	f7ff feb3 	bl	800f0ac <listen_message_reliably>
 800f346:	f001 fa43 	bl	80107d0 <uxr_millis>
 800f34a:	1b83      	subs	r3, r0, r6
 800f34c:	1ae9      	subs	r1, r5, r3
 800f34e:	2900      	cmp	r1, #0
 800f350:	dcf6      	bgt.n	800f340 <uxr_run_session_timeout+0x14>
 800f352:	f104 0008 	add.w	r0, r4, #8
 800f356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f35a:	f001 b9dd 	b.w	8010718 <uxr_output_streams_confirmed>
 800f35e:	bf00      	nop

0800f360 <uxr_run_session_until_data>:
 800f360:	b570      	push	{r4, r5, r6, lr}
 800f362:	4604      	mov	r4, r0
 800f364:	460d      	mov	r5, r1
 800f366:	f001 fa33 	bl	80107d0 <uxr_millis>
 800f36a:	4606      	mov	r6, r0
 800f36c:	4620      	mov	r0, r4
 800f36e:	f7ff fc57 	bl	800ec20 <uxr_flash_output_streams>
 800f372:	2300      	movs	r3, #0
 800f374:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800f378:	4629      	mov	r1, r5
 800f37a:	e005      	b.n	800f388 <uxr_run_session_until_data+0x28>
 800f37c:	f001 fa28 	bl	80107d0 <uxr_millis>
 800f380:	1b83      	subs	r3, r0, r6
 800f382:	1ae9      	subs	r1, r5, r3
 800f384:	2900      	cmp	r1, #0
 800f386:	dd07      	ble.n	800f398 <uxr_run_session_until_data+0x38>
 800f388:	4620      	mov	r0, r4
 800f38a:	f7ff fe8f 	bl	800f0ac <listen_message_reliably>
 800f38e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800f392:	2800      	cmp	r0, #0
 800f394:	d0f2      	beq.n	800f37c <uxr_run_session_until_data+0x1c>
 800f396:	bd70      	pop	{r4, r5, r6, pc}
 800f398:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800f39c:	bd70      	pop	{r4, r5, r6, pc}
 800f39e:	bf00      	nop

0800f3a0 <uxr_run_session_until_confirm_delivery>:
 800f3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3a4:	4606      	mov	r6, r0
 800f3a6:	460d      	mov	r5, r1
 800f3a8:	f001 fa12 	bl	80107d0 <uxr_millis>
 800f3ac:	4607      	mov	r7, r0
 800f3ae:	4630      	mov	r0, r6
 800f3b0:	f7ff fc36 	bl	800ec20 <uxr_flash_output_streams>
 800f3b4:	2d00      	cmp	r5, #0
 800f3b6:	f106 0808 	add.w	r8, r6, #8
 800f3ba:	bfa8      	it	ge
 800f3bc:	462c      	movge	r4, r5
 800f3be:	da07      	bge.n	800f3d0 <uxr_run_session_until_confirm_delivery+0x30>
 800f3c0:	e00e      	b.n	800f3e0 <uxr_run_session_until_confirm_delivery+0x40>
 800f3c2:	f7ff fe73 	bl	800f0ac <listen_message_reliably>
 800f3c6:	f001 fa03 	bl	80107d0 <uxr_millis>
 800f3ca:	1bc3      	subs	r3, r0, r7
 800f3cc:	1aec      	subs	r4, r5, r3
 800f3ce:	d407      	bmi.n	800f3e0 <uxr_run_session_until_confirm_delivery+0x40>
 800f3d0:	4640      	mov	r0, r8
 800f3d2:	f001 f9a1 	bl	8010718 <uxr_output_streams_confirmed>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	4621      	mov	r1, r4
 800f3da:	4630      	mov	r0, r6
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d0f0      	beq.n	800f3c2 <uxr_run_session_until_confirm_delivery+0x22>
 800f3e0:	4640      	mov	r0, r8
 800f3e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f3e6:	f001 b997 	b.w	8010718 <uxr_output_streams_confirmed>
 800f3ea:	bf00      	nop

0800f3ec <uxr_run_session_until_all_status>:
 800f3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3f0:	9c08      	ldr	r4, [sp, #32]
 800f3f2:	4606      	mov	r6, r0
 800f3f4:	460f      	mov	r7, r1
 800f3f6:	4691      	mov	r9, r2
 800f3f8:	461d      	mov	r5, r3
 800f3fa:	f7ff fc11 	bl	800ec20 <uxr_flash_output_streams>
 800f3fe:	b124      	cbz	r4, 800f40a <uxr_run_session_until_all_status+0x1e>
 800f400:	4622      	mov	r2, r4
 800f402:	21ff      	movs	r1, #255	@ 0xff
 800f404:	4628      	mov	r0, r5
 800f406:	f008 f9d1 	bl	80177ac <memset>
 800f40a:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800f40e:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800f410:	f001 f9de 	bl	80107d0 <uxr_millis>
 800f414:	3d01      	subs	r5, #1
 800f416:	f1a9 0902 	sub.w	r9, r9, #2
 800f41a:	4680      	mov	r8, r0
 800f41c:	4639      	mov	r1, r7
 800f41e:	4630      	mov	r0, r6
 800f420:	f7ff fe44 	bl	800f0ac <listen_message_reliably>
 800f424:	f001 f9d4 	bl	80107d0 <uxr_millis>
 800f428:	eba0 0008 	sub.w	r0, r0, r8
 800f42c:	1a39      	subs	r1, r7, r0
 800f42e:	b344      	cbz	r4, 800f482 <uxr_run_session_until_all_status+0x96>
 800f430:	4628      	mov	r0, r5
 800f432:	46ac      	mov	ip, r5
 800f434:	2301      	movs	r3, #1
 800f436:	e002      	b.n	800f43e <uxr_run_session_until_all_status+0x52>
 800f438:	42a3      	cmp	r3, r4
 800f43a:	d20d      	bcs.n	800f458 <uxr_run_session_until_all_status+0x6c>
 800f43c:	3301      	adds	r3, #1
 800f43e:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800f442:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800f446:	d1f7      	bne.n	800f438 <uxr_run_session_until_all_status+0x4c>
 800f448:	42a3      	cmp	r3, r4
 800f44a:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800f44e:	d213      	bcs.n	800f478 <uxr_run_session_until_all_status+0x8c>
 800f450:	2a00      	cmp	r2, #0
 800f452:	d0f3      	beq.n	800f43c <uxr_run_session_until_all_status+0x50>
 800f454:	2900      	cmp	r1, #0
 800f456:	dce2      	bgt.n	800f41e <uxr_run_session_until_all_status+0x32>
 800f458:	2300      	movs	r3, #0
 800f45a:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800f45c:	442c      	add	r4, r5
 800f45e:	e001      	b.n	800f464 <uxr_run_session_until_all_status+0x78>
 800f460:	2b01      	cmp	r3, #1
 800f462:	d812      	bhi.n	800f48a <uxr_run_session_until_all_status+0x9e>
 800f464:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800f468:	4284      	cmp	r4, r0
 800f46a:	d1f9      	bne.n	800f460 <uxr_run_session_until_all_status+0x74>
 800f46c:	2b01      	cmp	r3, #1
 800f46e:	bf8c      	ite	hi
 800f470:	2000      	movhi	r0, #0
 800f472:	2001      	movls	r0, #1
 800f474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f478:	2900      	cmp	r1, #0
 800f47a:	dded      	ble.n	800f458 <uxr_run_session_until_all_status+0x6c>
 800f47c:	2a00      	cmp	r2, #0
 800f47e:	d1ce      	bne.n	800f41e <uxr_run_session_until_all_status+0x32>
 800f480:	e7ea      	b.n	800f458 <uxr_run_session_until_all_status+0x6c>
 800f482:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800f484:	2001      	movs	r0, #1
 800f486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f48a:	2000      	movs	r0, #0
 800f48c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f490 <uxr_sync_session>:
 800f490:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f492:	b093      	sub	sp, #76	@ 0x4c
 800f494:	4604      	mov	r4, r0
 800f496:	460d      	mov	r5, r1
 800f498:	f000 fb52 	bl	800fb40 <uxr_session_header_offset>
 800f49c:	2214      	movs	r2, #20
 800f49e:	eb0d 0102 	add.w	r1, sp, r2
 800f4a2:	9000      	str	r0, [sp, #0]
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	a80a      	add	r0, sp, #40	@ 0x28
 800f4a8:	f7fc fb36 	bl	800bb18 <ucdr_init_buffer_origin_offset>
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	2208      	movs	r2, #8
 800f4b0:	210e      	movs	r1, #14
 800f4b2:	a80a      	add	r0, sp, #40	@ 0x28
 800f4b4:	f001 f946 	bl	8010744 <uxr_buffer_submessage_header>
 800f4b8:	f001 f9a4 	bl	8010804 <uxr_nanos>
 800f4bc:	a31c      	add	r3, pc, #112	@ (adr r3, 800f530 <uxr_sync_session+0xa0>)
 800f4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4c2:	460e      	mov	r6, r1
 800f4c4:	4607      	mov	r7, r0
 800f4c6:	f7f1 fb31 	bl	8000b2c <__aeabi_ldivmod>
 800f4ca:	4631      	mov	r1, r6
 800f4cc:	9003      	str	r0, [sp, #12]
 800f4ce:	a318      	add	r3, pc, #96	@ (adr r3, 800f530 <uxr_sync_session+0xa0>)
 800f4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4d4:	4638      	mov	r0, r7
 800f4d6:	f7f1 fb29 	bl	8000b2c <__aeabi_ldivmod>
 800f4da:	a903      	add	r1, sp, #12
 800f4dc:	a80a      	add	r0, sp, #40	@ 0x28
 800f4de:	9204      	str	r2, [sp, #16]
 800f4e0:	f002 fa50 	bl	8011984 <uxr_serialize_TIMESTAMP_Payload>
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	4611      	mov	r1, r2
 800f4e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f4ea:	4620      	mov	r0, r4
 800f4ec:	f000 fad2 	bl	800fa94 <uxr_stamp_session_header>
 800f4f0:	a80a      	add	r0, sp, #40	@ 0x28
 800f4f2:	f7fc fb4f 	bl	800bb94 <ucdr_buffer_length>
 800f4f6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f4f8:	4602      	mov	r2, r0
 800f4fa:	a905      	add	r1, sp, #20
 800f4fc:	e9d3 0600 	ldrd	r0, r6, [r3]
 800f500:	47b0      	blx	r6
 800f502:	f001 f965 	bl	80107d0 <uxr_millis>
 800f506:	2300      	movs	r3, #0
 800f508:	4606      	mov	r6, r0
 800f50a:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 800f50e:	4629      	mov	r1, r5
 800f510:	e000      	b.n	800f514 <uxr_sync_session+0x84>
 800f512:	b950      	cbnz	r0, 800f52a <uxr_sync_session+0x9a>
 800f514:	4620      	mov	r0, r4
 800f516:	f7ff fdc9 	bl	800f0ac <listen_message_reliably>
 800f51a:	f001 f959 	bl	80107d0 <uxr_millis>
 800f51e:	1b83      	subs	r3, r0, r6
 800f520:	1ae9      	subs	r1, r5, r3
 800f522:	2900      	cmp	r1, #0
 800f524:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 800f528:	dcf3      	bgt.n	800f512 <uxr_sync_session+0x82>
 800f52a:	b013      	add	sp, #76	@ 0x4c
 800f52c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f52e:	bf00      	nop
 800f530:	3b9aca00 	.word	0x3b9aca00
 800f534:	00000000 	.word	0x00000000

0800f538 <wait_session_status>:
 800f538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f53c:	4604      	mov	r4, r0
 800f53e:	b09d      	sub	sp, #116	@ 0x74
 800f540:	20ff      	movs	r0, #255	@ 0xff
 800f542:	7160      	strb	r0, [r4, #5]
 800f544:	9303      	str	r3, [sp, #12]
 800f546:	2b00      	cmp	r3, #0
 800f548:	f000 80b6 	beq.w	800f6b8 <wait_session_status+0x180>
 800f54c:	468a      	mov	sl, r1
 800f54e:	4691      	mov	r9, r2
 800f550:	f04f 0b00 	mov.w	fp, #0
 800f554:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f556:	464a      	mov	r2, r9
 800f558:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f55c:	4651      	mov	r1, sl
 800f55e:	47a8      	blx	r5
 800f560:	f001 f936 	bl	80107d0 <uxr_millis>
 800f564:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f568:	4605      	mov	r5, r0
 800f56a:	e009      	b.n	800f580 <wait_session_status+0x48>
 800f56c:	f001 f930 	bl	80107d0 <uxr_millis>
 800f570:	1b40      	subs	r0, r0, r5
 800f572:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800f576:	2b00      	cmp	r3, #0
 800f578:	dd40      	ble.n	800f5fc <wait_session_status+0xc4>
 800f57a:	7960      	ldrb	r0, [r4, #5]
 800f57c:	28ff      	cmp	r0, #255	@ 0xff
 800f57e:	d145      	bne.n	800f60c <wait_session_status+0xd4>
 800f580:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800f582:	a908      	add	r1, sp, #32
 800f584:	6896      	ldr	r6, [r2, #8]
 800f586:	6810      	ldr	r0, [r2, #0]
 800f588:	aa09      	add	r2, sp, #36	@ 0x24
 800f58a:	47b0      	blx	r6
 800f58c:	2800      	cmp	r0, #0
 800f58e:	d0ed      	beq.n	800f56c <wait_session_status+0x34>
 800f590:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800f594:	a80c      	add	r0, sp, #48	@ 0x30
 800f596:	f7fc fad1 	bl	800bb3c <ucdr_init_buffer>
 800f59a:	2600      	movs	r6, #0
 800f59c:	f10d 031e 	add.w	r3, sp, #30
 800f5a0:	aa07      	add	r2, sp, #28
 800f5a2:	a90c      	add	r1, sp, #48	@ 0x30
 800f5a4:	4620      	mov	r0, r4
 800f5a6:	f88d 601c 	strb.w	r6, [sp, #28]
 800f5aa:	f000 fa87 	bl	800fabc <uxr_read_session_header>
 800f5ae:	2800      	cmp	r0, #0
 800f5b0:	d0dc      	beq.n	800f56c <wait_session_status+0x34>
 800f5b2:	4631      	mov	r1, r6
 800f5b4:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800f5b8:	f000 ffb6 	bl	8010528 <uxr_stream_id_from_raw>
 800f5bc:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800f5c0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800f5c4:	9302      	str	r3, [sp, #8]
 800f5c6:	2f01      	cmp	r7, #1
 800f5c8:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800f5cc:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800f5d0:	d05c      	beq.n	800f68c <wait_session_status+0x154>
 800f5d2:	2f02      	cmp	r7, #2
 800f5d4:	d020      	beq.n	800f618 <wait_session_status+0xe0>
 800f5d6:	2f00      	cmp	r7, #0
 800f5d8:	d1c8      	bne.n	800f56c <wait_session_status+0x34>
 800f5da:	4639      	mov	r1, r7
 800f5dc:	4638      	mov	r0, r7
 800f5de:	f000 ffa3 	bl	8010528 <uxr_stream_id_from_raw>
 800f5e2:	a90c      	add	r1, sp, #48	@ 0x30
 800f5e4:	4602      	mov	r2, r0
 800f5e6:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f5e8:	4620      	mov	r0, r4
 800f5ea:	f7ff fbd7 	bl	800ed9c <read_submessage_list>
 800f5ee:	f001 f8ef 	bl	80107d0 <uxr_millis>
 800f5f2:	1b40      	subs	r0, r0, r5
 800f5f4:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	dcbe      	bgt.n	800f57a <wait_session_status+0x42>
 800f5fc:	9b03      	ldr	r3, [sp, #12]
 800f5fe:	7960      	ldrb	r0, [r4, #5]
 800f600:	f10b 0b01 	add.w	fp, fp, #1
 800f604:	455b      	cmp	r3, fp
 800f606:	d001      	beq.n	800f60c <wait_session_status+0xd4>
 800f608:	28ff      	cmp	r0, #255	@ 0xff
 800f60a:	d0a3      	beq.n	800f554 <wait_session_status+0x1c>
 800f60c:	38ff      	subs	r0, #255	@ 0xff
 800f60e:	bf18      	it	ne
 800f610:	2001      	movne	r0, #1
 800f612:	b01d      	add	sp, #116	@ 0x74
 800f614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f618:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800f61c:	9304      	str	r3, [sp, #16]
 800f61e:	4631      	mov	r1, r6
 800f620:	f104 0008 	add.w	r0, r4, #8
 800f624:	f001 f86e 	bl	8010704 <uxr_get_input_reliable_stream>
 800f628:	4680      	mov	r8, r0
 800f62a:	b348      	cbz	r0, 800f680 <wait_session_status+0x148>
 800f62c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f62e:	9205      	str	r2, [sp, #20]
 800f630:	a80c      	add	r0, sp, #48	@ 0x30
 800f632:	f7fc fab3 	bl	800bb9c <ucdr_buffer_remaining>
 800f636:	4603      	mov	r3, r0
 800f638:	f10d 001d 	add.w	r0, sp, #29
 800f63c:	9000      	str	r0, [sp, #0]
 800f63e:	9a05      	ldr	r2, [sp, #20]
 800f640:	9902      	ldr	r1, [sp, #8]
 800f642:	4640      	mov	r0, r8
 800f644:	f006 fc4c 	bl	8015ee0 <uxr_receive_reliable_message>
 800f648:	b1d0      	cbz	r0, 800f680 <wait_session_status+0x148>
 800f64a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d03a      	beq.n	800f6c8 <wait_session_status+0x190>
 800f652:	9f04      	ldr	r7, [sp, #16]
 800f654:	e00a      	b.n	800f66c <wait_session_status+0x134>
 800f656:	f04f 0302 	mov.w	r3, #2
 800f65a:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800f65e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800f662:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800f666:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f668:	f7ff fb98 	bl	800ed9c <read_submessage_list>
 800f66c:	a914      	add	r1, sp, #80	@ 0x50
 800f66e:	2204      	movs	r2, #4
 800f670:	4640      	mov	r0, r8
 800f672:	f006 fcb5 	bl	8015fe0 <uxr_next_input_reliable_buffer_available>
 800f676:	4603      	mov	r3, r0
 800f678:	a914      	add	r1, sp, #80	@ 0x50
 800f67a:	4620      	mov	r0, r4
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d1ea      	bne.n	800f656 <wait_session_status+0x11e>
 800f680:	9904      	ldr	r1, [sp, #16]
 800f682:	4632      	mov	r2, r6
 800f684:	4620      	mov	r0, r4
 800f686:	f7ff fa05 	bl	800ea94 <write_submessage_acknack.isra.0>
 800f68a:	e76f      	b.n	800f56c <wait_session_status+0x34>
 800f68c:	4631      	mov	r1, r6
 800f68e:	f104 0008 	add.w	r0, r4, #8
 800f692:	f001 f82d 	bl	80106f0 <uxr_get_input_best_effort_stream>
 800f696:	2800      	cmp	r0, #0
 800f698:	f43f af68 	beq.w	800f56c <wait_session_status+0x34>
 800f69c:	9902      	ldr	r1, [sp, #8]
 800f69e:	f006 fb8b 	bl	8015db8 <uxr_receive_best_effort_message>
 800f6a2:	2800      	cmp	r0, #0
 800f6a4:	f43f af62 	beq.w	800f56c <wait_session_status+0x34>
 800f6a8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800f6ac:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f6ae:	a90c      	add	r1, sp, #48	@ 0x30
 800f6b0:	4620      	mov	r0, r4
 800f6b2:	f7ff fb73 	bl	800ed9c <read_submessage_list>
 800f6b6:	e759      	b.n	800f56c <wait_session_status+0x34>
 800f6b8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f6ba:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f6be:	47a0      	blx	r4
 800f6c0:	2001      	movs	r0, #1
 800f6c2:	b01d      	add	sp, #116	@ 0x74
 800f6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6c8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800f6cc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f6ce:	a90c      	add	r1, sp, #48	@ 0x30
 800f6d0:	4620      	mov	r0, r4
 800f6d2:	f7ff fb63 	bl	800ed9c <read_submessage_list>
 800f6d6:	e7bc      	b.n	800f652 <wait_session_status+0x11a>

0800f6d8 <uxr_delete_session_retries>:
 800f6d8:	b530      	push	{r4, r5, lr}
 800f6da:	b08f      	sub	sp, #60	@ 0x3c
 800f6dc:	4604      	mov	r4, r0
 800f6de:	460d      	mov	r5, r1
 800f6e0:	f000 fa2e 	bl	800fb40 <uxr_session_header_offset>
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	2210      	movs	r2, #16
 800f6e8:	9000      	str	r0, [sp, #0]
 800f6ea:	a902      	add	r1, sp, #8
 800f6ec:	a806      	add	r0, sp, #24
 800f6ee:	f7fc fa13 	bl	800bb18 <ucdr_init_buffer_origin_offset>
 800f6f2:	a906      	add	r1, sp, #24
 800f6f4:	4620      	mov	r0, r4
 800f6f6:	f000 f973 	bl	800f9e0 <uxr_buffer_delete_session>
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	4611      	mov	r1, r2
 800f6fe:	9b06      	ldr	r3, [sp, #24]
 800f700:	4620      	mov	r0, r4
 800f702:	f000 f9c7 	bl	800fa94 <uxr_stamp_session_header>
 800f706:	a806      	add	r0, sp, #24
 800f708:	f7fc fa44 	bl	800bb94 <ucdr_buffer_length>
 800f70c:	462b      	mov	r3, r5
 800f70e:	4602      	mov	r2, r0
 800f710:	a902      	add	r1, sp, #8
 800f712:	4620      	mov	r0, r4
 800f714:	f7ff ff10 	bl	800f538 <wait_session_status>
 800f718:	b118      	cbz	r0, 800f722 <uxr_delete_session_retries+0x4a>
 800f71a:	7960      	ldrb	r0, [r4, #5]
 800f71c:	fab0 f080 	clz	r0, r0
 800f720:	0940      	lsrs	r0, r0, #5
 800f722:	b00f      	add	sp, #60	@ 0x3c
 800f724:	bd30      	pop	{r4, r5, pc}
 800f726:	bf00      	nop

0800f728 <uxr_create_session>:
 800f728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f72c:	f100 0b08 	add.w	fp, r0, #8
 800f730:	b0ab      	sub	sp, #172	@ 0xac
 800f732:	4604      	mov	r4, r0
 800f734:	4658      	mov	r0, fp
 800f736:	f000 ff2b 	bl	8010590 <uxr_reset_stream_storage>
 800f73a:	4620      	mov	r0, r4
 800f73c:	f000 fa00 	bl	800fb40 <uxr_session_header_offset>
 800f740:	2300      	movs	r3, #0
 800f742:	9000      	str	r0, [sp, #0]
 800f744:	221c      	movs	r2, #28
 800f746:	a90b      	add	r1, sp, #44	@ 0x2c
 800f748:	a812      	add	r0, sp, #72	@ 0x48
 800f74a:	f7fc f9e5 	bl	800bb18 <ucdr_init_buffer_origin_offset>
 800f74e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f750:	8a1a      	ldrh	r2, [r3, #16]
 800f752:	3a04      	subs	r2, #4
 800f754:	b292      	uxth	r2, r2
 800f756:	a912      	add	r1, sp, #72	@ 0x48
 800f758:	4620      	mov	r0, r4
 800f75a:	f000 f917 	bl	800f98c <uxr_buffer_create_session>
 800f75e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f760:	4620      	mov	r0, r4
 800f762:	f000 f983 	bl	800fa6c <uxr_stamp_create_session_header>
 800f766:	a812      	add	r0, sp, #72	@ 0x48
 800f768:	f7fc fa14 	bl	800bb94 <ucdr_buffer_length>
 800f76c:	23ff      	movs	r3, #255	@ 0xff
 800f76e:	7163      	strb	r3, [r4, #5]
 800f770:	230a      	movs	r3, #10
 800f772:	46da      	mov	sl, fp
 800f774:	9303      	str	r3, [sp, #12]
 800f776:	4683      	mov	fp, r0
 800f778:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f77a:	465a      	mov	r2, fp
 800f77c:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f780:	a90b      	add	r1, sp, #44	@ 0x2c
 800f782:	47a8      	blx	r5
 800f784:	f001 f824 	bl	80107d0 <uxr_millis>
 800f788:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f78c:	4605      	mov	r5, r0
 800f78e:	e009      	b.n	800f7a4 <uxr_create_session+0x7c>
 800f790:	f001 f81e 	bl	80107d0 <uxr_millis>
 800f794:	1b40      	subs	r0, r0, r5
 800f796:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	7962      	ldrb	r2, [r4, #5]
 800f79e:	dd38      	ble.n	800f812 <uxr_create_session+0xea>
 800f7a0:	2aff      	cmp	r2, #255	@ 0xff
 800f7a2:	d13c      	bne.n	800f81e <uxr_create_session+0xf6>
 800f7a4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800f7a6:	a907      	add	r1, sp, #28
 800f7a8:	6896      	ldr	r6, [r2, #8]
 800f7aa:	6810      	ldr	r0, [r2, #0]
 800f7ac:	aa08      	add	r2, sp, #32
 800f7ae:	47b0      	blx	r6
 800f7b0:	2800      	cmp	r0, #0
 800f7b2:	d0ed      	beq.n	800f790 <uxr_create_session+0x68>
 800f7b4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800f7b8:	a81a      	add	r0, sp, #104	@ 0x68
 800f7ba:	f7fc f9bf 	bl	800bb3c <ucdr_init_buffer>
 800f7be:	2600      	movs	r6, #0
 800f7c0:	f10d 031a 	add.w	r3, sp, #26
 800f7c4:	aa06      	add	r2, sp, #24
 800f7c6:	a91a      	add	r1, sp, #104	@ 0x68
 800f7c8:	4620      	mov	r0, r4
 800f7ca:	f88d 6018 	strb.w	r6, [sp, #24]
 800f7ce:	f000 f975 	bl	800fabc <uxr_read_session_header>
 800f7d2:	2800      	cmp	r0, #0
 800f7d4:	d0dc      	beq.n	800f790 <uxr_create_session+0x68>
 800f7d6:	4631      	mov	r1, r6
 800f7d8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f7dc:	f000 fea4 	bl	8010528 <uxr_stream_id_from_raw>
 800f7e0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800f7e4:	2e01      	cmp	r6, #1
 800f7e6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800f7ea:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800f7ee:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800f7f2:	d053      	beq.n	800f89c <uxr_create_session+0x174>
 800f7f4:	2e02      	cmp	r6, #2
 800f7f6:	d018      	beq.n	800f82a <uxr_create_session+0x102>
 800f7f8:	2e00      	cmp	r6, #0
 800f7fa:	d1c9      	bne.n	800f790 <uxr_create_session+0x68>
 800f7fc:	4631      	mov	r1, r6
 800f7fe:	4630      	mov	r0, r6
 800f800:	f000 fe92 	bl	8010528 <uxr_stream_id_from_raw>
 800f804:	a91a      	add	r1, sp, #104	@ 0x68
 800f806:	4602      	mov	r2, r0
 800f808:	900a      	str	r0, [sp, #40]	@ 0x28
 800f80a:	4620      	mov	r0, r4
 800f80c:	f7ff fac6 	bl	800ed9c <read_submessage_list>
 800f810:	e7be      	b.n	800f790 <uxr_create_session+0x68>
 800f812:	9b03      	ldr	r3, [sp, #12]
 800f814:	3b01      	subs	r3, #1
 800f816:	9303      	str	r3, [sp, #12]
 800f818:	d001      	beq.n	800f81e <uxr_create_session+0xf6>
 800f81a:	2aff      	cmp	r2, #255	@ 0xff
 800f81c:	d0ac      	beq.n	800f778 <uxr_create_session+0x50>
 800f81e:	2a00      	cmp	r2, #0
 800f820:	d051      	beq.n	800f8c6 <uxr_create_session+0x19e>
 800f822:	2000      	movs	r0, #0
 800f824:	b02b      	add	sp, #172	@ 0xac
 800f826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f82a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800f82e:	9304      	str	r3, [sp, #16]
 800f830:	4639      	mov	r1, r7
 800f832:	4650      	mov	r0, sl
 800f834:	f000 ff66 	bl	8010704 <uxr_get_input_reliable_stream>
 800f838:	4680      	mov	r8, r0
 800f83a:	b348      	cbz	r0, 800f890 <uxr_create_session+0x168>
 800f83c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f83e:	9205      	str	r2, [sp, #20]
 800f840:	a81a      	add	r0, sp, #104	@ 0x68
 800f842:	f7fc f9ab 	bl	800bb9c <ucdr_buffer_remaining>
 800f846:	4603      	mov	r3, r0
 800f848:	f10d 0019 	add.w	r0, sp, #25
 800f84c:	9000      	str	r0, [sp, #0]
 800f84e:	9a05      	ldr	r2, [sp, #20]
 800f850:	4649      	mov	r1, r9
 800f852:	4640      	mov	r0, r8
 800f854:	f006 fb44 	bl	8015ee0 <uxr_receive_reliable_message>
 800f858:	b1d0      	cbz	r0, 800f890 <uxr_create_session+0x168>
 800f85a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d038      	beq.n	800f8d4 <uxr_create_session+0x1ac>
 800f862:	9e04      	ldr	r6, [sp, #16]
 800f864:	e00a      	b.n	800f87c <uxr_create_session+0x154>
 800f866:	f04f 0302 	mov.w	r3, #2
 800f86a:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800f86e:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800f872:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f876:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f878:	f7ff fa90 	bl	800ed9c <read_submessage_list>
 800f87c:	a922      	add	r1, sp, #136	@ 0x88
 800f87e:	2204      	movs	r2, #4
 800f880:	4640      	mov	r0, r8
 800f882:	f006 fbad 	bl	8015fe0 <uxr_next_input_reliable_buffer_available>
 800f886:	4603      	mov	r3, r0
 800f888:	a922      	add	r1, sp, #136	@ 0x88
 800f88a:	4620      	mov	r0, r4
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d1ea      	bne.n	800f866 <uxr_create_session+0x13e>
 800f890:	9904      	ldr	r1, [sp, #16]
 800f892:	463a      	mov	r2, r7
 800f894:	4620      	mov	r0, r4
 800f896:	f7ff f8fd 	bl	800ea94 <write_submessage_acknack.isra.0>
 800f89a:	e779      	b.n	800f790 <uxr_create_session+0x68>
 800f89c:	4639      	mov	r1, r7
 800f89e:	4650      	mov	r0, sl
 800f8a0:	f000 ff26 	bl	80106f0 <uxr_get_input_best_effort_stream>
 800f8a4:	2800      	cmp	r0, #0
 800f8a6:	f43f af73 	beq.w	800f790 <uxr_create_session+0x68>
 800f8aa:	4649      	mov	r1, r9
 800f8ac:	f006 fa84 	bl	8015db8 <uxr_receive_best_effort_message>
 800f8b0:	2800      	cmp	r0, #0
 800f8b2:	f43f af6d 	beq.w	800f790 <uxr_create_session+0x68>
 800f8b6:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800f8ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f8bc:	a91a      	add	r1, sp, #104	@ 0x68
 800f8be:	4620      	mov	r0, r4
 800f8c0:	f7ff fa6c 	bl	800ed9c <read_submessage_list>
 800f8c4:	e764      	b.n	800f790 <uxr_create_session+0x68>
 800f8c6:	4650      	mov	r0, sl
 800f8c8:	f000 fe62 	bl	8010590 <uxr_reset_stream_storage>
 800f8cc:	2001      	movs	r0, #1
 800f8ce:	b02b      	add	sp, #172	@ 0xac
 800f8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8d4:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800f8d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f8da:	a91a      	add	r1, sp, #104	@ 0x68
 800f8dc:	4620      	mov	r0, r4
 800f8de:	f7ff fa5d 	bl	800ed9c <read_submessage_list>
 800f8e2:	e7be      	b.n	800f862 <uxr_create_session+0x13a>

0800f8e4 <uxr_prepare_stream_to_write_submessage>:
 800f8e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8e8:	b082      	sub	sp, #8
 800f8ea:	4682      	mov	sl, r0
 800f8ec:	4610      	mov	r0, r2
 800f8ee:	4615      	mov	r5, r2
 800f8f0:	461e      	mov	r6, r3
 800f8f2:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800f8f6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800f8fa:	9101      	str	r1, [sp, #4]
 800f8fc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800f900:	f000 ff60 	bl	80107c4 <uxr_submessage_padding>
 800f904:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f908:	f105 0904 	add.w	r9, r5, #4
 800f90c:	2b01      	cmp	r3, #1
 800f90e:	4481      	add	r9, r0
 800f910:	d01d      	beq.n	800f94e <uxr_prepare_stream_to_write_submessage+0x6a>
 800f912:	2b02      	cmp	r3, #2
 800f914:	d116      	bne.n	800f944 <uxr_prepare_stream_to_write_submessage+0x60>
 800f916:	4621      	mov	r1, r4
 800f918:	f10a 0008 	add.w	r0, sl, #8
 800f91c:	f000 fede 	bl	80106dc <uxr_get_output_reliable_stream>
 800f920:	4604      	mov	r4, r0
 800f922:	b158      	cbz	r0, 800f93c <uxr_prepare_stream_to_write_submessage+0x58>
 800f924:	4649      	mov	r1, r9
 800f926:	4632      	mov	r2, r6
 800f928:	f006 fd16 	bl	8016358 <uxr_prepare_reliable_buffer_to_write>
 800f92c:	4604      	mov	r4, r0
 800f92e:	b12c      	cbz	r4, 800f93c <uxr_prepare_stream_to_write_submessage+0x58>
 800f930:	4643      	mov	r3, r8
 800f932:	b2aa      	uxth	r2, r5
 800f934:	4639      	mov	r1, r7
 800f936:	4630      	mov	r0, r6
 800f938:	f000 ff04 	bl	8010744 <uxr_buffer_submessage_header>
 800f93c:	4620      	mov	r0, r4
 800f93e:	b002      	add	sp, #8
 800f940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f944:	2400      	movs	r4, #0
 800f946:	4620      	mov	r0, r4
 800f948:	b002      	add	sp, #8
 800f94a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f94e:	4621      	mov	r1, r4
 800f950:	f10a 0008 	add.w	r0, sl, #8
 800f954:	f000 feba 	bl	80106cc <uxr_get_output_best_effort_stream>
 800f958:	4604      	mov	r4, r0
 800f95a:	2800      	cmp	r0, #0
 800f95c:	d0ee      	beq.n	800f93c <uxr_prepare_stream_to_write_submessage+0x58>
 800f95e:	4649      	mov	r1, r9
 800f960:	4632      	mov	r2, r6
 800f962:	f006 fc29 	bl	80161b8 <uxr_prepare_best_effort_buffer_to_write>
 800f966:	4604      	mov	r4, r0
 800f968:	e7e1      	b.n	800f92e <uxr_prepare_stream_to_write_submessage+0x4a>
 800f96a:	bf00      	nop

0800f96c <uxr_init_session_info>:
 800f96c:	0e13      	lsrs	r3, r2, #24
 800f96e:	7043      	strb	r3, [r0, #1]
 800f970:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800f974:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800f978:	7001      	strb	r1, [r0, #0]
 800f97a:	70c3      	strb	r3, [r0, #3]
 800f97c:	2109      	movs	r1, #9
 800f97e:	23ff      	movs	r3, #255	@ 0xff
 800f980:	f880 c002 	strb.w	ip, [r0, #2]
 800f984:	7102      	strb	r2, [r0, #4]
 800f986:	80c1      	strh	r1, [r0, #6]
 800f988:	7143      	strb	r3, [r0, #5]
 800f98a:	4770      	bx	lr

0800f98c <uxr_buffer_create_session>:
 800f98c:	b530      	push	{r4, r5, lr}
 800f98e:	b089      	sub	sp, #36	@ 0x24
 800f990:	2300      	movs	r3, #0
 800f992:	4d12      	ldr	r5, [pc, #72]	@ (800f9dc <uxr_buffer_create_session+0x50>)
 800f994:	9307      	str	r3, [sp, #28]
 800f996:	f8ad 201c 	strh.w	r2, [sp, #28]
 800f99a:	2201      	movs	r2, #1
 800f99c:	9301      	str	r3, [sp, #4]
 800f99e:	80c2      	strh	r2, [r0, #6]
 800f9a0:	f88d 2004 	strb.w	r2, [sp, #4]
 800f9a4:	682a      	ldr	r2, [r5, #0]
 800f9a6:	9200      	str	r2, [sp, #0]
 800f9a8:	88aa      	ldrh	r2, [r5, #4]
 800f9aa:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f9ae:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800f9b2:	9202      	str	r2, [sp, #8]
 800f9b4:	460c      	mov	r4, r1
 800f9b6:	7802      	ldrb	r2, [r0, #0]
 800f9b8:	9303      	str	r3, [sp, #12]
 800f9ba:	4619      	mov	r1, r3
 800f9bc:	f88d 200c 	strb.w	r2, [sp, #12]
 800f9c0:	4620      	mov	r0, r4
 800f9c2:	2210      	movs	r2, #16
 800f9c4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800f9c8:	9306      	str	r3, [sp, #24]
 800f9ca:	f000 febb 	bl	8010744 <uxr_buffer_submessage_header>
 800f9ce:	4669      	mov	r1, sp
 800f9d0:	4620      	mov	r0, r4
 800f9d2:	f001 fe13 	bl	80115fc <uxr_serialize_CREATE_CLIENT_Payload>
 800f9d6:	b009      	add	sp, #36	@ 0x24
 800f9d8:	bd30      	pop	{r4, r5, pc}
 800f9da:	bf00      	nop
 800f9dc:	0801878c 	.word	0x0801878c

0800f9e0 <uxr_buffer_delete_session>:
 800f9e0:	b510      	push	{r4, lr}
 800f9e2:	4b0c      	ldr	r3, [pc, #48]	@ (800fa14 <uxr_buffer_delete_session+0x34>)
 800f9e4:	b082      	sub	sp, #8
 800f9e6:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800f9ea:	f8ad c006 	strh.w	ip, [sp, #6]
 800f9ee:	460c      	mov	r4, r1
 800f9f0:	2202      	movs	r2, #2
 800f9f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f9f6:	80c2      	strh	r2, [r0, #6]
 800f9f8:	f8ad 3004 	strh.w	r3, [sp, #4]
 800f9fc:	2204      	movs	r2, #4
 800f9fe:	2300      	movs	r3, #0
 800fa00:	2103      	movs	r1, #3
 800fa02:	4620      	mov	r0, r4
 800fa04:	f000 fe9e 	bl	8010744 <uxr_buffer_submessage_header>
 800fa08:	a901      	add	r1, sp, #4
 800fa0a:	4620      	mov	r0, r4
 800fa0c:	f001 fe9c 	bl	8011748 <uxr_serialize_DELETE_Payload>
 800fa10:	b002      	add	sp, #8
 800fa12:	bd10      	pop	{r4, pc}
 800fa14:	0801878c 	.word	0x0801878c

0800fa18 <uxr_read_create_session_status>:
 800fa18:	b510      	push	{r4, lr}
 800fa1a:	b088      	sub	sp, #32
 800fa1c:	4604      	mov	r4, r0
 800fa1e:	4608      	mov	r0, r1
 800fa20:	a901      	add	r1, sp, #4
 800fa22:	f001 fea1 	bl	8011768 <uxr_deserialize_STATUS_AGENT_Payload>
 800fa26:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fa2a:	7163      	strb	r3, [r4, #5]
 800fa2c:	b008      	add	sp, #32
 800fa2e:	bd10      	pop	{r4, pc}

0800fa30 <uxr_read_delete_session_status>:
 800fa30:	b510      	push	{r4, lr}
 800fa32:	4604      	mov	r4, r0
 800fa34:	b084      	sub	sp, #16
 800fa36:	4608      	mov	r0, r1
 800fa38:	a902      	add	r1, sp, #8
 800fa3a:	f001 fec5 	bl	80117c8 <uxr_deserialize_STATUS_Payload>
 800fa3e:	88e3      	ldrh	r3, [r4, #6]
 800fa40:	2b02      	cmp	r3, #2
 800fa42:	d001      	beq.n	800fa48 <uxr_read_delete_session_status+0x18>
 800fa44:	b004      	add	sp, #16
 800fa46:	bd10      	pop	{r4, pc}
 800fa48:	f10d 000a 	add.w	r0, sp, #10
 800fa4c:	f7fe feb2 	bl	800e7b4 <uxr_object_id_from_raw>
 800fa50:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800fa54:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800fa58:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800fa5c:	b29b      	uxth	r3, r3
 800fa5e:	2b02      	cmp	r3, #2
 800fa60:	bf04      	itt	eq
 800fa62:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800fa66:	7163      	strbeq	r3, [r4, #5]
 800fa68:	b004      	add	sp, #16
 800fa6a:	bd10      	pop	{r4, pc}

0800fa6c <uxr_stamp_create_session_header>:
 800fa6c:	b510      	push	{r4, lr}
 800fa6e:	2208      	movs	r2, #8
 800fa70:	b08a      	sub	sp, #40	@ 0x28
 800fa72:	4604      	mov	r4, r0
 800fa74:	eb0d 0002 	add.w	r0, sp, r2
 800fa78:	f7fc f860 	bl	800bb3c <ucdr_init_buffer>
 800fa7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa80:	9400      	str	r4, [sp, #0]
 800fa82:	2300      	movs	r3, #0
 800fa84:	461a      	mov	r2, r3
 800fa86:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800fa8a:	a802      	add	r0, sp, #8
 800fa8c:	f001 f854 	bl	8010b38 <uxr_serialize_message_header>
 800fa90:	b00a      	add	sp, #40	@ 0x28
 800fa92:	bd10      	pop	{r4, pc}

0800fa94 <uxr_stamp_session_header>:
 800fa94:	b530      	push	{r4, r5, lr}
 800fa96:	b08d      	sub	sp, #52	@ 0x34
 800fa98:	4604      	mov	r4, r0
 800fa9a:	460d      	mov	r5, r1
 800fa9c:	9203      	str	r2, [sp, #12]
 800fa9e:	4619      	mov	r1, r3
 800faa0:	a804      	add	r0, sp, #16
 800faa2:	2208      	movs	r2, #8
 800faa4:	f7fc f84a 	bl	800bb3c <ucdr_init_buffer>
 800faa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800faac:	9b03      	ldr	r3, [sp, #12]
 800faae:	9400      	str	r4, [sp, #0]
 800fab0:	462a      	mov	r2, r5
 800fab2:	a804      	add	r0, sp, #16
 800fab4:	f001 f840 	bl	8010b38 <uxr_serialize_message_header>
 800fab8:	b00d      	add	sp, #52	@ 0x34
 800faba:	bd30      	pop	{r4, r5, pc}

0800fabc <uxr_read_session_header>:
 800fabc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fac0:	4607      	mov	r7, r0
 800fac2:	b084      	sub	sp, #16
 800fac4:	4608      	mov	r0, r1
 800fac6:	460c      	mov	r4, r1
 800fac8:	4615      	mov	r5, r2
 800faca:	461e      	mov	r6, r3
 800facc:	f7fc f866 	bl	800bb9c <ucdr_buffer_remaining>
 800fad0:	2808      	cmp	r0, #8
 800fad2:	d803      	bhi.n	800fadc <uxr_read_session_header+0x20>
 800fad4:	2000      	movs	r0, #0
 800fad6:	b004      	add	sp, #16
 800fad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fadc:	f10d 080c 	add.w	r8, sp, #12
 800fae0:	4633      	mov	r3, r6
 800fae2:	462a      	mov	r2, r5
 800fae4:	f8cd 8000 	str.w	r8, [sp]
 800fae8:	4620      	mov	r0, r4
 800faea:	f10d 010b 	add.w	r1, sp, #11
 800faee:	f001 f841 	bl	8010b74 <uxr_deserialize_message_header>
 800faf2:	783a      	ldrb	r2, [r7, #0]
 800faf4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800faf8:	4293      	cmp	r3, r2
 800fafa:	d1eb      	bne.n	800fad4 <uxr_read_session_header+0x18>
 800fafc:	061b      	lsls	r3, r3, #24
 800fafe:	d41c      	bmi.n	800fb3a <uxr_read_session_header+0x7e>
 800fb00:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800fb04:	787b      	ldrb	r3, [r7, #1]
 800fb06:	429a      	cmp	r2, r3
 800fb08:	d003      	beq.n	800fb12 <uxr_read_session_header+0x56>
 800fb0a:	2001      	movs	r0, #1
 800fb0c:	f080 0001 	eor.w	r0, r0, #1
 800fb10:	e7e1      	b.n	800fad6 <uxr_read_session_header+0x1a>
 800fb12:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800fb16:	78bb      	ldrb	r3, [r7, #2]
 800fb18:	429a      	cmp	r2, r3
 800fb1a:	f107 0102 	add.w	r1, r7, #2
 800fb1e:	d1f4      	bne.n	800fb0a <uxr_read_session_header+0x4e>
 800fb20:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800fb24:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fb28:	429a      	cmp	r2, r3
 800fb2a:	d1ee      	bne.n	800fb0a <uxr_read_session_header+0x4e>
 800fb2c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800fb30:	784b      	ldrb	r3, [r1, #1]
 800fb32:	429a      	cmp	r2, r3
 800fb34:	d1e9      	bne.n	800fb0a <uxr_read_session_header+0x4e>
 800fb36:	2000      	movs	r0, #0
 800fb38:	e7e8      	b.n	800fb0c <uxr_read_session_header+0x50>
 800fb3a:	2001      	movs	r0, #1
 800fb3c:	e7cb      	b.n	800fad6 <uxr_read_session_header+0x1a>
 800fb3e:	bf00      	nop

0800fb40 <uxr_session_header_offset>:
 800fb40:	f990 3000 	ldrsb.w	r3, [r0]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	bfac      	ite	ge
 800fb48:	2008      	movge	r0, #8
 800fb4a:	2004      	movlt	r0, #4
 800fb4c:	4770      	bx	lr
 800fb4e:	bf00      	nop

0800fb50 <uxr_init_base_object_request>:
 800fb50:	b510      	push	{r4, lr}
 800fb52:	88c3      	ldrh	r3, [r0, #6]
 800fb54:	b082      	sub	sp, #8
 800fb56:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800fb5a:	9101      	str	r1, [sp, #4]
 800fb5c:	f1a3 010a 	sub.w	r1, r3, #10
 800fb60:	b289      	uxth	r1, r1
 800fb62:	42a1      	cmp	r1, r4
 800fb64:	d80e      	bhi.n	800fb84 <uxr_init_base_object_request+0x34>
 800fb66:	3301      	adds	r3, #1
 800fb68:	b29c      	uxth	r4, r3
 800fb6a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800fb6e:	b2db      	uxtb	r3, r3
 800fb70:	80c4      	strh	r4, [r0, #6]
 800fb72:	9801      	ldr	r0, [sp, #4]
 800fb74:	7011      	strb	r1, [r2, #0]
 800fb76:	7053      	strb	r3, [r2, #1]
 800fb78:	1c91      	adds	r1, r2, #2
 800fb7a:	f7fe fe2f 	bl	800e7dc <uxr_object_id_to_raw>
 800fb7e:	4620      	mov	r0, r4
 800fb80:	b002      	add	sp, #8
 800fb82:	bd10      	pop	{r4, pc}
 800fb84:	230a      	movs	r3, #10
 800fb86:	2100      	movs	r1, #0
 800fb88:	461c      	mov	r4, r3
 800fb8a:	e7f1      	b.n	800fb70 <uxr_init_base_object_request+0x20>

0800fb8c <uxr_parse_base_object_request>:
 800fb8c:	b570      	push	{r4, r5, r6, lr}
 800fb8e:	4604      	mov	r4, r0
 800fb90:	3002      	adds	r0, #2
 800fb92:	460d      	mov	r5, r1
 800fb94:	4616      	mov	r6, r2
 800fb96:	f7fe fe0d 	bl	800e7b4 <uxr_object_id_from_raw>
 800fb9a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800fb9e:	8028      	strh	r0, [r5, #0]
 800fba0:	806b      	strh	r3, [r5, #2]
 800fba2:	7822      	ldrb	r2, [r4, #0]
 800fba4:	7863      	ldrb	r3, [r4, #1]
 800fba6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800fbaa:	8033      	strh	r3, [r6, #0]
 800fbac:	bd70      	pop	{r4, r5, r6, pc}
 800fbae:	bf00      	nop

0800fbb0 <uxr_init_framing_io>:
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	7041      	strb	r1, [r0, #1]
 800fbb4:	7003      	strb	r3, [r0, #0]
 800fbb6:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800fbb8:	4770      	bx	lr
 800fbba:	bf00      	nop

0800fbbc <uxr_write_framed_msg>:
 800fbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbc0:	4617      	mov	r7, r2
 800fbc2:	7842      	ldrb	r2, [r0, #1]
 800fbc4:	b083      	sub	sp, #12
 800fbc6:	460e      	mov	r6, r1
 800fbc8:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 800fbcc:	469a      	mov	sl, r3
 800fbce:	2901      	cmp	r1, #1
 800fbd0:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 800fbd4:	4604      	mov	r4, r0
 800fbd6:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 800fbda:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800fbde:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 800fbe2:	f240 8137 	bls.w	800fe54 <uxr_write_framed_msg+0x298>
 800fbe6:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800fbea:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 800fbee:	2901      	cmp	r1, #1
 800fbf0:	f04f 0202 	mov.w	r2, #2
 800fbf4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fbf8:	f240 808f 	bls.w	800fd1a <uxr_write_framed_msg+0x15e>
 800fbfc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fbfe:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 800fc02:	b2dd      	uxtb	r5, r3
 800fc04:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800fc08:	2203      	movs	r2, #3
 800fc0a:	2901      	cmp	r1, #1
 800fc0c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fc10:	f240 809a 	bls.w	800fd48 <uxr_write_framed_msg+0x18c>
 800fc14:	18a1      	adds	r1, r4, r2
 800fc16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fc18:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800fc1c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800fc20:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800fc24:	3201      	adds	r2, #1
 800fc26:	2801      	cmp	r0, #1
 800fc28:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fc2c:	f240 80a0 	bls.w	800fd70 <uxr_write_framed_msg+0x1b4>
 800fc30:	18a0      	adds	r0, r4, r2
 800fc32:	3201      	adds	r2, #1
 800fc34:	b2d2      	uxtb	r2, r2
 800fc36:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800fc3a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	f000 80a9 	beq.w	800fd96 <uxr_write_framed_msg+0x1da>
 800fc44:	f04f 0900 	mov.w	r9, #0
 800fc48:	46c8      	mov	r8, r9
 800fc4a:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800fc4e:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800fc52:	2901      	cmp	r1, #1
 800fc54:	f240 80c3 	bls.w	800fdde <uxr_write_framed_msg+0x222>
 800fc58:	2a29      	cmp	r2, #41	@ 0x29
 800fc5a:	f200 809f 	bhi.w	800fd9c <uxr_write_framed_msg+0x1e0>
 800fc5e:	18a1      	adds	r1, r4, r2
 800fc60:	3201      	adds	r2, #1
 800fc62:	b2d2      	uxtb	r2, r2
 800fc64:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800fc68:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fc6c:	ea89 0303 	eor.w	r3, r9, r3
 800fc70:	498c      	ldr	r1, [pc, #560]	@ (800fea4 <uxr_write_framed_msg+0x2e8>)
 800fc72:	b2db      	uxtb	r3, r3
 800fc74:	f108 0801 	add.w	r8, r8, #1
 800fc78:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fc7c:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 800fc80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fc82:	4543      	cmp	r3, r8
 800fc84:	d8e1      	bhi.n	800fc4a <uxr_write_framed_msg+0x8e>
 800fc86:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800fc8a:	fa5f f889 	uxtb.w	r8, r9
 800fc8e:	9301      	str	r3, [sp, #4]
 800fc90:	f04f 0900 	mov.w	r9, #0
 800fc94:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 800fc98:	fa5f f18a 	uxtb.w	r1, sl
 800fc9c:	2901      	cmp	r1, #1
 800fc9e:	d921      	bls.n	800fce4 <uxr_write_framed_msg+0x128>
 800fca0:	2a29      	cmp	r2, #41	@ 0x29
 800fca2:	f240 80af 	bls.w	800fe04 <uxr_write_framed_msg+0x248>
 800fca6:	2500      	movs	r5, #0
 800fca8:	e000      	b.n	800fcac <uxr_write_framed_msg+0xf0>
 800fcaa:	b160      	cbz	r0, 800fcc6 <uxr_write_framed_msg+0x10a>
 800fcac:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800fcb0:	1b52      	subs	r2, r2, r5
 800fcb2:	465b      	mov	r3, fp
 800fcb4:	4421      	add	r1, r4
 800fcb6:	4638      	mov	r0, r7
 800fcb8:	47b0      	blx	r6
 800fcba:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800fcbe:	4405      	add	r5, r0
 800fcc0:	4295      	cmp	r5, r2
 800fcc2:	d3f2      	bcc.n	800fcaa <uxr_write_framed_msg+0xee>
 800fcc4:	d003      	beq.n	800fcce <uxr_write_framed_msg+0x112>
 800fcc6:	2000      	movs	r0, #0
 800fcc8:	b003      	add	sp, #12
 800fcca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcce:	fa5f f18a 	uxtb.w	r1, sl
 800fcd2:	f04f 0300 	mov.w	r3, #0
 800fcd6:	2901      	cmp	r1, #1
 800fcd8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800fcdc:	f04f 0200 	mov.w	r2, #0
 800fce0:	f200 8090 	bhi.w	800fe04 <uxr_write_framed_msg+0x248>
 800fce4:	1c51      	adds	r1, r2, #1
 800fce6:	b2c9      	uxtb	r1, r1
 800fce8:	2929      	cmp	r1, #41	@ 0x29
 800fcea:	d8dc      	bhi.n	800fca6 <uxr_write_framed_msg+0xea>
 800fcec:	18a5      	adds	r5, r4, r2
 800fcee:	4421      	add	r1, r4
 800fcf0:	3202      	adds	r2, #2
 800fcf2:	f088 0820 	eor.w	r8, r8, #32
 800fcf6:	4648      	mov	r0, r9
 800fcf8:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 800fcfc:	b2d2      	uxtb	r2, r2
 800fcfe:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800fd02:	f04f 0901 	mov.w	r9, #1
 800fd06:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800fd0a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fd0e:	2800      	cmp	r0, #0
 800fd10:	f040 8085 	bne.w	800fe1e <uxr_write_framed_msg+0x262>
 800fd14:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fd18:	e7bc      	b.n	800fc94 <uxr_write_framed_msg+0xd8>
 800fd1a:	4611      	mov	r1, r2
 800fd1c:	f04f 0c03 	mov.w	ip, #3
 800fd20:	2204      	movs	r2, #4
 800fd22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd24:	4421      	add	r1, r4
 800fd26:	b2dd      	uxtb	r5, r3
 800fd28:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 800fd2c:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 800fd30:	44a4      	add	ip, r4
 800fd32:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800fd36:	f080 0020 	eor.w	r0, r0, #32
 800fd3a:	2901      	cmp	r1, #1
 800fd3c:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 800fd40:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fd44:	f63f af66 	bhi.w	800fc14 <uxr_write_framed_msg+0x58>
 800fd48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd4a:	18a0      	adds	r0, r4, r2
 800fd4c:	f085 0520 	eor.w	r5, r5, #32
 800fd50:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800fd54:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800fd58:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800fd5c:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 800fd60:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800fd64:	3202      	adds	r2, #2
 800fd66:	2801      	cmp	r0, #1
 800fd68:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fd6c:	f63f af60 	bhi.w	800fc30 <uxr_write_framed_msg+0x74>
 800fd70:	1c50      	adds	r0, r2, #1
 800fd72:	18a5      	adds	r5, r4, r2
 800fd74:	fa54 f080 	uxtab	r0, r4, r0
 800fd78:	3202      	adds	r2, #2
 800fd7a:	f081 0120 	eor.w	r1, r1, #32
 800fd7e:	b2d2      	uxtb	r2, r2
 800fd80:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800fd84:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 800fd88:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800fd8c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	f47f af57 	bne.w	800fc44 <uxr_write_framed_msg+0x88>
 800fd96:	9301      	str	r3, [sp, #4]
 800fd98:	4698      	mov	r8, r3
 800fd9a:	e779      	b.n	800fc90 <uxr_write_framed_msg+0xd4>
 800fd9c:	2500      	movs	r5, #0
 800fd9e:	e001      	b.n	800fda4 <uxr_write_framed_msg+0x1e8>
 800fda0:	2800      	cmp	r0, #0
 800fda2:	d090      	beq.n	800fcc6 <uxr_write_framed_msg+0x10a>
 800fda4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800fda8:	1b52      	subs	r2, r2, r5
 800fdaa:	465b      	mov	r3, fp
 800fdac:	4421      	add	r1, r4
 800fdae:	4638      	mov	r0, r7
 800fdb0:	47b0      	blx	r6
 800fdb2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800fdb6:	4405      	add	r5, r0
 800fdb8:	4295      	cmp	r5, r2
 800fdba:	d3f1      	bcc.n	800fda0 <uxr_write_framed_msg+0x1e4>
 800fdbc:	d183      	bne.n	800fcc6 <uxr_write_framed_msg+0x10a>
 800fdbe:	f04f 0300 	mov.w	r3, #0
 800fdc2:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800fdc6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fdc8:	4543      	cmp	r3, r8
 800fdca:	d964      	bls.n	800fe96 <uxr_write_framed_msg+0x2da>
 800fdcc:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800fdd0:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800fdd4:	2901      	cmp	r1, #1
 800fdd6:	f04f 0200 	mov.w	r2, #0
 800fdda:	f63f af3d 	bhi.w	800fc58 <uxr_write_framed_msg+0x9c>
 800fdde:	1c51      	adds	r1, r2, #1
 800fde0:	b2c9      	uxtb	r1, r1
 800fde2:	2929      	cmp	r1, #41	@ 0x29
 800fde4:	d8da      	bhi.n	800fd9c <uxr_write_framed_msg+0x1e0>
 800fde6:	18a0      	adds	r0, r4, r2
 800fde8:	4421      	add	r1, r4
 800fdea:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 800fdee:	3202      	adds	r2, #2
 800fdf0:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 800fdf4:	b2d2      	uxtb	r2, r2
 800fdf6:	f083 0020 	eor.w	r0, r3, #32
 800fdfa:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800fdfe:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fe02:	e733      	b.n	800fc6c <uxr_write_framed_msg+0xb0>
 800fe04:	18a1      	adds	r1, r4, r2
 800fe06:	3201      	adds	r2, #1
 800fe08:	4648      	mov	r0, r9
 800fe0a:	b2d2      	uxtb	r2, r2
 800fe0c:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800fe10:	f04f 0901 	mov.w	r9, #1
 800fe14:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fe18:	2800      	cmp	r0, #0
 800fe1a:	f43f af7b 	beq.w	800fd14 <uxr_write_framed_msg+0x158>
 800fe1e:	2500      	movs	r5, #0
 800fe20:	e002      	b.n	800fe28 <uxr_write_framed_msg+0x26c>
 800fe22:	2800      	cmp	r0, #0
 800fe24:	f43f af4f 	beq.w	800fcc6 <uxr_write_framed_msg+0x10a>
 800fe28:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800fe2c:	1b52      	subs	r2, r2, r5
 800fe2e:	465b      	mov	r3, fp
 800fe30:	4421      	add	r1, r4
 800fe32:	4638      	mov	r0, r7
 800fe34:	47b0      	blx	r6
 800fe36:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800fe3a:	4405      	add	r5, r0
 800fe3c:	4295      	cmp	r5, r2
 800fe3e:	d3f0      	bcc.n	800fe22 <uxr_write_framed_msg+0x266>
 800fe40:	f47f af41 	bne.w	800fcc6 <uxr_write_framed_msg+0x10a>
 800fe44:	2300      	movs	r3, #0
 800fe46:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800fe4a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fe4c:	b298      	uxth	r0, r3
 800fe4e:	b003      	add	sp, #12
 800fe50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe54:	217d      	movs	r1, #125	@ 0x7d
 800fe56:	f082 0220 	eor.w	r2, r2, #32
 800fe5a:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 800fe5e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800fe62:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 800fe66:	2901      	cmp	r1, #1
 800fe68:	f04f 0203 	mov.w	r2, #3
 800fe6c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fe70:	d804      	bhi.n	800fe7c <uxr_write_framed_msg+0x2c0>
 800fe72:	4611      	mov	r1, r2
 800fe74:	f04f 0c04 	mov.w	ip, #4
 800fe78:	2205      	movs	r2, #5
 800fe7a:	e752      	b.n	800fd22 <uxr_write_framed_msg+0x166>
 800fe7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fe7e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 800fe82:	b2dd      	uxtb	r5, r3
 800fe84:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800fe88:	2204      	movs	r2, #4
 800fe8a:	2901      	cmp	r1, #1
 800fe8c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fe90:	f63f aec0 	bhi.w	800fc14 <uxr_write_framed_msg+0x58>
 800fe94:	e758      	b.n	800fd48 <uxr_write_framed_msg+0x18c>
 800fe96:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800fe9a:	fa5f f889 	uxtb.w	r8, r9
 800fe9e:	9301      	str	r3, [sp, #4]
 800fea0:	2200      	movs	r2, #0
 800fea2:	e6f5      	b.n	800fc90 <uxr_write_framed_msg+0xd4>
 800fea4:	08018b5c 	.word	0x08018b5c

0800fea8 <uxr_framing_read_transport>:
 800fea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feac:	4604      	mov	r4, r0
 800feae:	b083      	sub	sp, #12
 800feb0:	461f      	mov	r7, r3
 800feb2:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800feb6:	4689      	mov	r9, r1
 800feb8:	4692      	mov	sl, r2
 800feba:	f000 fc89 	bl	80107d0 <uxr_millis>
 800febe:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800fec2:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800fec6:	42b3      	cmp	r3, r6
 800fec8:	4680      	mov	r8, r0
 800feca:	d061      	beq.n	800ff90 <uxr_framing_read_transport+0xe8>
 800fecc:	d81c      	bhi.n	800ff08 <uxr_framing_read_transport+0x60>
 800fece:	1e75      	subs	r5, r6, #1
 800fed0:	1aed      	subs	r5, r5, r3
 800fed2:	b2ed      	uxtb	r5, r5
 800fed4:	2600      	movs	r6, #0
 800fed6:	455d      	cmp	r5, fp
 800fed8:	d81f      	bhi.n	800ff1a <uxr_framing_read_transport+0x72>
 800feda:	19ab      	adds	r3, r5, r6
 800fedc:	455b      	cmp	r3, fp
 800fede:	bf84      	itt	hi
 800fee0:	ebab 0605 	subhi.w	r6, fp, r5
 800fee4:	b2f6      	uxtbhi	r6, r6
 800fee6:	b9ed      	cbnz	r5, 800ff24 <uxr_framing_read_transport+0x7c>
 800fee8:	f04f 0b00 	mov.w	fp, #0
 800feec:	f000 fc70 	bl	80107d0 <uxr_millis>
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	eba0 0808 	sub.w	r8, r0, r8
 800fef6:	eba3 0308 	sub.w	r3, r3, r8
 800fefa:	4658      	mov	r0, fp
 800fefc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ff00:	603b      	str	r3, [r7, #0]
 800ff02:	b003      	add	sp, #12
 800ff04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff08:	2e00      	cmp	r6, #0
 800ff0a:	d049      	beq.n	800ffa0 <uxr_framing_read_transport+0xf8>
 800ff0c:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 800ff10:	b2ed      	uxtb	r5, r5
 800ff12:	3e01      	subs	r6, #1
 800ff14:	455d      	cmp	r5, fp
 800ff16:	b2f6      	uxtb	r6, r6
 800ff18:	d9df      	bls.n	800feda <uxr_framing_read_transport+0x32>
 800ff1a:	fa5f f58b 	uxtb.w	r5, fp
 800ff1e:	2600      	movs	r6, #0
 800ff20:	2d00      	cmp	r5, #0
 800ff22:	d0e1      	beq.n	800fee8 <uxr_framing_read_transport+0x40>
 800ff24:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800ff28:	3102      	adds	r1, #2
 800ff2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ff2c:	9300      	str	r3, [sp, #0]
 800ff2e:	683b      	ldr	r3, [r7, #0]
 800ff30:	4421      	add	r1, r4
 800ff32:	462a      	mov	r2, r5
 800ff34:	4650      	mov	r0, sl
 800ff36:	47c8      	blx	r9
 800ff38:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800ff3c:	4a1a      	ldr	r2, [pc, #104]	@ (800ffa8 <uxr_framing_read_transport+0x100>)
 800ff3e:	4403      	add	r3, r0
 800ff40:	0859      	lsrs	r1, r3, #1
 800ff42:	fba2 2101 	umull	r2, r1, r2, r1
 800ff46:	0889      	lsrs	r1, r1, #2
 800ff48:	222a      	movs	r2, #42	@ 0x2a
 800ff4a:	fb02 3111 	mls	r1, r2, r1, r3
 800ff4e:	4683      	mov	fp, r0
 800ff50:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800ff54:	2800      	cmp	r0, #0
 800ff56:	d0c7      	beq.n	800fee8 <uxr_framing_read_transport+0x40>
 800ff58:	42a8      	cmp	r0, r5
 800ff5a:	d1c7      	bne.n	800feec <uxr_framing_read_transport+0x44>
 800ff5c:	2e00      	cmp	r6, #0
 800ff5e:	d0c5      	beq.n	800feec <uxr_framing_read_transport+0x44>
 800ff60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ff62:	9300      	str	r3, [sp, #0]
 800ff64:	3102      	adds	r1, #2
 800ff66:	4632      	mov	r2, r6
 800ff68:	4421      	add	r1, r4
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	4650      	mov	r0, sl
 800ff6e:	47c8      	blx	r9
 800ff70:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800ff74:	4a0c      	ldr	r2, [pc, #48]	@ (800ffa8 <uxr_framing_read_transport+0x100>)
 800ff76:	180b      	adds	r3, r1, r0
 800ff78:	0859      	lsrs	r1, r3, #1
 800ff7a:	fba2 1201 	umull	r1, r2, r2, r1
 800ff7e:	0892      	lsrs	r2, r2, #2
 800ff80:	212a      	movs	r1, #42	@ 0x2a
 800ff82:	fb01 3312 	mls	r3, r1, r2, r3
 800ff86:	eb00 0b05 	add.w	fp, r0, r5
 800ff8a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800ff8e:	e7ad      	b.n	800feec <uxr_framing_read_transport+0x44>
 800ff90:	2600      	movs	r6, #0
 800ff92:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800ff96:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800ff98:	d9bf      	bls.n	800ff1a <uxr_framing_read_transport+0x72>
 800ff9a:	2102      	movs	r1, #2
 800ff9c:	2529      	movs	r5, #41	@ 0x29
 800ff9e:	e7c4      	b.n	800ff2a <uxr_framing_read_transport+0x82>
 800ffa0:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 800ffa4:	b2ed      	uxtb	r5, r5
 800ffa6:	e796      	b.n	800fed6 <uxr_framing_read_transport+0x2e>
 800ffa8:	30c30c31 	.word	0x30c30c31

0800ffac <uxr_read_framed_msg>:
 800ffac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffb0:	461e      	mov	r6, r3
 800ffb2:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 800ffb6:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800ffba:	429d      	cmp	r5, r3
 800ffbc:	b083      	sub	sp, #12
 800ffbe:	4604      	mov	r4, r0
 800ffc0:	4688      	mov	r8, r1
 800ffc2:	4691      	mov	r9, r2
 800ffc4:	f000 8188 	beq.w	80102d8 <uxr_read_framed_msg+0x32c>
 800ffc8:	7823      	ldrb	r3, [r4, #0]
 800ffca:	4dc1      	ldr	r5, [pc, #772]	@ (80102d0 <uxr_read_framed_msg+0x324>)
 800ffcc:	4fc1      	ldr	r7, [pc, #772]	@ (80102d4 <uxr_read_framed_msg+0x328>)
 800ffce:	2b07      	cmp	r3, #7
 800ffd0:	d8fd      	bhi.n	800ffce <uxr_read_framed_msg+0x22>
 800ffd2:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ffd6:	0115      	.short	0x0115
 800ffd8:	00d600f6 	.word	0x00d600f6
 800ffdc:	009000b9 	.word	0x009000b9
 800ffe0:	0030004d 	.word	0x0030004d
 800ffe4:	0008      	.short	0x0008
 800ffe6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800ffea:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800ffee:	4299      	cmp	r1, r3
 800fff0:	f000 814a 	beq.w	8010288 <uxr_read_framed_msg+0x2dc>
 800fff4:	18e2      	adds	r2, r4, r3
 800fff6:	7892      	ldrb	r2, [r2, #2]
 800fff8:	2a7d      	cmp	r2, #125	@ 0x7d
 800fffa:	f000 8199 	beq.w	8010330 <uxr_read_framed_msg+0x384>
 800fffe:	3301      	adds	r3, #1
 8010000:	0858      	lsrs	r0, r3, #1
 8010002:	fba5 1000 	umull	r1, r0, r5, r0
 8010006:	0880      	lsrs	r0, r0, #2
 8010008:	212a      	movs	r1, #42	@ 0x2a
 801000a:	fb01 3310 	mls	r3, r1, r0, r3
 801000e:	2a7e      	cmp	r2, #126	@ 0x7e
 8010010:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010014:	f000 8252 	beq.w	80104bc <uxr_read_framed_msg+0x510>
 8010018:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801001a:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 801001c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010020:	b29b      	uxth	r3, r3
 8010022:	2200      	movs	r2, #0
 8010024:	4299      	cmp	r1, r3
 8010026:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8010028:	7022      	strb	r2, [r4, #0]
 801002a:	f000 8179 	beq.w	8010320 <uxr_read_framed_msg+0x374>
 801002e:	2000      	movs	r0, #0
 8010030:	b003      	add	sp, #12
 8010032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010036:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801003a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801003e:	4299      	cmp	r1, r3
 8010040:	f000 8131 	beq.w	80102a6 <uxr_read_framed_msg+0x2fa>
 8010044:	18e2      	adds	r2, r4, r3
 8010046:	7890      	ldrb	r0, [r2, #2]
 8010048:	287d      	cmp	r0, #125	@ 0x7d
 801004a:	f000 8190 	beq.w	801036e <uxr_read_framed_msg+0x3c2>
 801004e:	3301      	adds	r3, #1
 8010050:	085a      	lsrs	r2, r3, #1
 8010052:	fba5 1202 	umull	r1, r2, r5, r2
 8010056:	0892      	lsrs	r2, r2, #2
 8010058:	212a      	movs	r1, #42	@ 0x2a
 801005a:	fb01 3312 	mls	r3, r1, r2, r3
 801005e:	287e      	cmp	r0, #126	@ 0x7e
 8010060:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010064:	f000 821a 	beq.w	801049c <uxr_read_framed_msg+0x4f0>
 8010068:	2307      	movs	r3, #7
 801006a:	86a0      	strh	r0, [r4, #52]	@ 0x34
 801006c:	7023      	strb	r3, [r4, #0]
 801006e:	e7ae      	b.n	800ffce <uxr_read_framed_msg+0x22>
 8010070:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8010072:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8010076:	459e      	cmp	lr, r3
 8010078:	d938      	bls.n	80100ec <uxr_read_framed_msg+0x140>
 801007a:	ee07 8a90 	vmov	s15, r8
 801007e:	212a      	movs	r1, #42	@ 0x2a
 8010080:	e020      	b.n	80100c4 <uxr_read_framed_msg+0x118>
 8010082:	f89b c002 	ldrb.w	ip, [fp, #2]
 8010086:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801008a:	f000 80d4 	beq.w	8010236 <uxr_read_framed_msg+0x28a>
 801008e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8010092:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8010096:	f000 8219 	beq.w	80104cc <uxr_read_framed_msg+0x520>
 801009a:	f806 c003 	strb.w	ip, [r6, r3]
 801009e:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 80100a2:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80100a4:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 80100a8:	ea8a 000c 	eor.w	r0, sl, ip
 80100ac:	b2c0      	uxtb	r0, r0
 80100ae:	3301      	adds	r3, #1
 80100b0:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 80100b4:	b29b      	uxth	r3, r3
 80100b6:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 80100ba:	4573      	cmp	r3, lr
 80100bc:	8663      	strh	r3, [r4, #50]	@ 0x32
 80100be:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80100c0:	f080 8120 	bcs.w	8010304 <uxr_read_framed_msg+0x358>
 80100c4:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 80100c8:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80100cc:	f100 0c01 	add.w	ip, r0, #1
 80100d0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80100d4:	fba5 8202 	umull	r8, r2, r5, r2
 80100d8:	0892      	lsrs	r2, r2, #2
 80100da:	4582      	cmp	sl, r0
 80100dc:	eb04 0b00 	add.w	fp, r4, r0
 80100e0:	fb01 c212 	mls	r2, r1, r2, ip
 80100e4:	d1cd      	bne.n	8010082 <uxr_read_framed_msg+0xd6>
 80100e6:	ee17 8a90 	vmov	r8, s15
 80100ea:	459e      	cmp	lr, r3
 80100ec:	f040 8111 	bne.w	8010312 <uxr_read_framed_msg+0x366>
 80100f0:	2306      	movs	r3, #6
 80100f2:	7023      	strb	r3, [r4, #0]
 80100f4:	e76b      	b.n	800ffce <uxr_read_framed_msg+0x22>
 80100f6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80100fa:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80100fe:	4298      	cmp	r0, r3
 8010100:	f000 80c2 	beq.w	8010288 <uxr_read_framed_msg+0x2dc>
 8010104:	18e2      	adds	r2, r4, r3
 8010106:	7891      	ldrb	r1, [r2, #2]
 8010108:	297d      	cmp	r1, #125	@ 0x7d
 801010a:	f000 814c 	beq.w	80103a6 <uxr_read_framed_msg+0x3fa>
 801010e:	3301      	adds	r3, #1
 8010110:	085a      	lsrs	r2, r3, #1
 8010112:	fba5 0202 	umull	r0, r2, r5, r2
 8010116:	0892      	lsrs	r2, r2, #2
 8010118:	202a      	movs	r0, #42	@ 0x2a
 801011a:	fb00 3312 	mls	r3, r0, r2, r3
 801011e:	297e      	cmp	r1, #126	@ 0x7e
 8010120:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010124:	f000 81ca 	beq.w	80104bc <uxr_read_framed_msg+0x510>
 8010128:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801012a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801012e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010130:	b29b      	uxth	r3, r3
 8010132:	2000      	movs	r0, #0
 8010134:	428b      	cmp	r3, r1
 8010136:	8623      	strh	r3, [r4, #48]	@ 0x30
 8010138:	8660      	strh	r0, [r4, #50]	@ 0x32
 801013a:	86e0      	strh	r0, [r4, #54]	@ 0x36
 801013c:	f240 80df 	bls.w	80102fe <uxr_read_framed_msg+0x352>
 8010140:	7020      	strb	r0, [r4, #0]
 8010142:	b003      	add	sp, #12
 8010144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010148:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801014c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010150:	4299      	cmp	r1, r3
 8010152:	f000 80a8 	beq.w	80102a6 <uxr_read_framed_msg+0x2fa>
 8010156:	18e2      	adds	r2, r4, r3
 8010158:	7890      	ldrb	r0, [r2, #2]
 801015a:	287d      	cmp	r0, #125	@ 0x7d
 801015c:	f000 8164 	beq.w	8010428 <uxr_read_framed_msg+0x47c>
 8010160:	3301      	adds	r3, #1
 8010162:	085a      	lsrs	r2, r3, #1
 8010164:	fba5 1202 	umull	r1, r2, r5, r2
 8010168:	0892      	lsrs	r2, r2, #2
 801016a:	212a      	movs	r1, #42	@ 0x2a
 801016c:	fb01 3312 	mls	r3, r1, r2, r3
 8010170:	287e      	cmp	r0, #126	@ 0x7e
 8010172:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010176:	f000 8191 	beq.w	801049c <uxr_read_framed_msg+0x4f0>
 801017a:	2304      	movs	r3, #4
 801017c:	8620      	strh	r0, [r4, #48]	@ 0x30
 801017e:	7023      	strb	r3, [r4, #0]
 8010180:	e725      	b.n	800ffce <uxr_read_framed_msg+0x22>
 8010182:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8010186:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801018a:	4290      	cmp	r0, r2
 801018c:	f000 80b3 	beq.w	80102f6 <uxr_read_framed_msg+0x34a>
 8010190:	18a3      	adds	r3, r4, r2
 8010192:	7899      	ldrb	r1, [r3, #2]
 8010194:	297d      	cmp	r1, #125	@ 0x7d
 8010196:	f000 8164 	beq.w	8010462 <uxr_read_framed_msg+0x4b6>
 801019a:	3201      	adds	r2, #1
 801019c:	0850      	lsrs	r0, r2, #1
 801019e:	fba5 3000 	umull	r3, r0, r5, r0
 80101a2:	0880      	lsrs	r0, r0, #2
 80101a4:	232a      	movs	r3, #42	@ 0x2a
 80101a6:	fb03 2210 	mls	r2, r3, r0, r2
 80101aa:	297e      	cmp	r1, #126	@ 0x7e
 80101ac:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80101b0:	f000 8188 	beq.w	80104c4 <uxr_read_framed_msg+0x518>
 80101b4:	7863      	ldrb	r3, [r4, #1]
 80101b6:	428b      	cmp	r3, r1
 80101b8:	bf0c      	ite	eq
 80101ba:	2303      	moveq	r3, #3
 80101bc:	2300      	movne	r3, #0
 80101be:	7023      	strb	r3, [r4, #0]
 80101c0:	e705      	b.n	800ffce <uxr_read_framed_msg+0x22>
 80101c2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80101c6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80101ca:	2200      	movs	r2, #0
 80101cc:	4299      	cmp	r1, r3
 80101ce:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 80101d2:	d06c      	beq.n	80102ae <uxr_read_framed_msg+0x302>
 80101d4:	18e2      	adds	r2, r4, r3
 80101d6:	7890      	ldrb	r0, [r2, #2]
 80101d8:	287d      	cmp	r0, #125	@ 0x7d
 80101da:	f000 8101 	beq.w	80103e0 <uxr_read_framed_msg+0x434>
 80101de:	3301      	adds	r3, #1
 80101e0:	085a      	lsrs	r2, r3, #1
 80101e2:	fba5 1202 	umull	r1, r2, r5, r2
 80101e6:	0892      	lsrs	r2, r2, #2
 80101e8:	212a      	movs	r1, #42	@ 0x2a
 80101ea:	fb01 3312 	mls	r3, r1, r2, r3
 80101ee:	287e      	cmp	r0, #126	@ 0x7e
 80101f0:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80101f4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80101f8:	d059      	beq.n	80102ae <uxr_read_framed_msg+0x302>
 80101fa:	2302      	movs	r3, #2
 80101fc:	7023      	strb	r3, [r4, #0]
 80101fe:	e6e6      	b.n	800ffce <uxr_read_framed_msg+0x22>
 8010200:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8010204:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8010208:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 801020c:	1c51      	adds	r1, r2, #1
 801020e:	084b      	lsrs	r3, r1, #1
 8010210:	fba5 c303 	umull	ip, r3, r5, r3
 8010214:	089b      	lsrs	r3, r3, #2
 8010216:	fb0e 1313 	mls	r3, lr, r3, r1
 801021a:	4592      	cmp	sl, r2
 801021c:	eb04 0002 	add.w	r0, r4, r2
 8010220:	b2da      	uxtb	r2, r3
 8010222:	f43f af04 	beq.w	801002e <uxr_read_framed_msg+0x82>
 8010226:	7883      	ldrb	r3, [r0, #2]
 8010228:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801022c:	2b7e      	cmp	r3, #126	@ 0x7e
 801022e:	d1ed      	bne.n	801020c <uxr_read_framed_msg+0x260>
 8010230:	2301      	movs	r3, #1
 8010232:	7023      	strb	r3, [r4, #0]
 8010234:	e6cb      	b.n	800ffce <uxr_read_framed_msg+0x22>
 8010236:	f100 0c01 	add.w	ip, r0, #1
 801023a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801023e:	fba5 8202 	umull	r8, r2, r5, r2
 8010242:	0892      	lsrs	r2, r2, #2
 8010244:	fb01 c212 	mls	r2, r1, r2, ip
 8010248:	eb04 0c02 	add.w	ip, r4, r2
 801024c:	b2d2      	uxtb	r2, r2
 801024e:	4592      	cmp	sl, r2
 8010250:	f100 0002 	add.w	r0, r0, #2
 8010254:	f43f af47 	beq.w	80100e6 <uxr_read_framed_msg+0x13a>
 8010258:	0842      	lsrs	r2, r0, #1
 801025a:	f89c a002 	ldrb.w	sl, [ip, #2]
 801025e:	fba5 8202 	umull	r8, r2, r5, r2
 8010262:	0892      	lsrs	r2, r2, #2
 8010264:	fb01 0012 	mls	r0, r1, r2, r0
 8010268:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 801026c:	f08a 0c20 	eor.w	ip, sl, #32
 8010270:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8010274:	f47f af11 	bne.w	801009a <uxr_read_framed_msg+0xee>
 8010278:	459e      	cmp	lr, r3
 801027a:	ee17 8a90 	vmov	r8, s15
 801027e:	f43f af37 	beq.w	80100f0 <uxr_read_framed_msg+0x144>
 8010282:	2301      	movs	r3, #1
 8010284:	7023      	strb	r3, [r4, #0]
 8010286:	e6a2      	b.n	800ffce <uxr_read_framed_msg+0x22>
 8010288:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801028a:	9300      	str	r3, [sp, #0]
 801028c:	2301      	movs	r3, #1
 801028e:	9301      	str	r3, [sp, #4]
 8010290:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010292:	464a      	mov	r2, r9
 8010294:	4641      	mov	r1, r8
 8010296:	4620      	mov	r0, r4
 8010298:	f7ff fe06 	bl	800fea8 <uxr_framing_read_transport>
 801029c:	2800      	cmp	r0, #0
 801029e:	f43f aec6 	beq.w	801002e <uxr_read_framed_msg+0x82>
 80102a2:	7823      	ldrb	r3, [r4, #0]
 80102a4:	e693      	b.n	800ffce <uxr_read_framed_msg+0x22>
 80102a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80102a8:	9300      	str	r3, [sp, #0]
 80102aa:	2302      	movs	r3, #2
 80102ac:	e7ef      	b.n	801028e <uxr_read_framed_msg+0x2e2>
 80102ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80102b0:	9300      	str	r3, [sp, #0]
 80102b2:	2304      	movs	r3, #4
 80102b4:	9301      	str	r3, [sp, #4]
 80102b6:	464a      	mov	r2, r9
 80102b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80102ba:	4641      	mov	r1, r8
 80102bc:	4620      	mov	r0, r4
 80102be:	f7ff fdf3 	bl	800fea8 <uxr_framing_read_transport>
 80102c2:	2800      	cmp	r0, #0
 80102c4:	d1ed      	bne.n	80102a2 <uxr_read_framed_msg+0x2f6>
 80102c6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80102ca:	2b7e      	cmp	r3, #126	@ 0x7e
 80102cc:	d0e9      	beq.n	80102a2 <uxr_read_framed_msg+0x2f6>
 80102ce:	e6ae      	b.n	801002e <uxr_read_framed_msg+0x82>
 80102d0:	30c30c31 	.word	0x30c30c31
 80102d4:	08018b5c 	.word	0x08018b5c
 80102d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80102da:	9300      	str	r3, [sp, #0]
 80102dc:	2305      	movs	r3, #5
 80102de:	9301      	str	r3, [sp, #4]
 80102e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80102e2:	f7ff fde1 	bl	800fea8 <uxr_framing_read_transport>
 80102e6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80102ea:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80102ee:	429a      	cmp	r2, r3
 80102f0:	f43f ae9d 	beq.w	801002e <uxr_read_framed_msg+0x82>
 80102f4:	e668      	b.n	800ffc8 <uxr_read_framed_msg+0x1c>
 80102f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80102f8:	9300      	str	r3, [sp, #0]
 80102fa:	2303      	movs	r3, #3
 80102fc:	e7c7      	b.n	801028e <uxr_read_framed_msg+0x2e2>
 80102fe:	2305      	movs	r3, #5
 8010300:	7023      	strb	r3, [r4, #0]
 8010302:	e664      	b.n	800ffce <uxr_read_framed_msg+0x22>
 8010304:	ee17 8a90 	vmov	r8, s15
 8010308:	f43f aef2 	beq.w	80100f0 <uxr_read_framed_msg+0x144>
 801030c:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8010310:	d08e      	beq.n	8010230 <uxr_read_framed_msg+0x284>
 8010312:	ebae 0303 	sub.w	r3, lr, r3
 8010316:	3302      	adds	r3, #2
 8010318:	9301      	str	r3, [sp, #4]
 801031a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801031c:	9300      	str	r3, [sp, #0]
 801031e:	e7b7      	b.n	8010290 <uxr_read_framed_msg+0x2e4>
 8010320:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010322:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8010326:	7013      	strb	r3, [r2, #0]
 8010328:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801032a:	b003      	add	sp, #12
 801032c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010330:	f103 0c01 	add.w	ip, r3, #1
 8010334:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8010338:	fba5 0202 	umull	r0, r2, r5, r2
 801033c:	0892      	lsrs	r2, r2, #2
 801033e:	202a      	movs	r0, #42	@ 0x2a
 8010340:	fb00 c212 	mls	r2, r0, r2, ip
 8010344:	fa5f fc82 	uxtb.w	ip, r2
 8010348:	4561      	cmp	r1, ip
 801034a:	d09d      	beq.n	8010288 <uxr_read_framed_msg+0x2dc>
 801034c:	3302      	adds	r3, #2
 801034e:	4422      	add	r2, r4
 8010350:	0859      	lsrs	r1, r3, #1
 8010352:	7892      	ldrb	r2, [r2, #2]
 8010354:	fba5 c101 	umull	ip, r1, r5, r1
 8010358:	0889      	lsrs	r1, r1, #2
 801035a:	fb00 3311 	mls	r3, r0, r1, r3
 801035e:	2a7e      	cmp	r2, #126	@ 0x7e
 8010360:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010364:	f000 80aa 	beq.w	80104bc <uxr_read_framed_msg+0x510>
 8010368:	f082 0220 	eor.w	r2, r2, #32
 801036c:	e654      	b.n	8010018 <uxr_read_framed_msg+0x6c>
 801036e:	1c58      	adds	r0, r3, #1
 8010370:	0842      	lsrs	r2, r0, #1
 8010372:	fba5 c202 	umull	ip, r2, r5, r2
 8010376:	0892      	lsrs	r2, r2, #2
 8010378:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801037c:	fb0c 0212 	mls	r2, ip, r2, r0
 8010380:	b2d0      	uxtb	r0, r2
 8010382:	4281      	cmp	r1, r0
 8010384:	d08f      	beq.n	80102a6 <uxr_read_framed_msg+0x2fa>
 8010386:	4422      	add	r2, r4
 8010388:	3302      	adds	r3, #2
 801038a:	7890      	ldrb	r0, [r2, #2]
 801038c:	085a      	lsrs	r2, r3, #1
 801038e:	fba5 1202 	umull	r1, r2, r5, r2
 8010392:	0892      	lsrs	r2, r2, #2
 8010394:	fb0c 3312 	mls	r3, ip, r2, r3
 8010398:	287e      	cmp	r0, #126	@ 0x7e
 801039a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801039e:	d07d      	beq.n	801049c <uxr_read_framed_msg+0x4f0>
 80103a0:	f080 0020 	eor.w	r0, r0, #32
 80103a4:	e660      	b.n	8010068 <uxr_read_framed_msg+0xbc>
 80103a6:	1c59      	adds	r1, r3, #1
 80103a8:	084a      	lsrs	r2, r1, #1
 80103aa:	fba5 c202 	umull	ip, r2, r5, r2
 80103ae:	0892      	lsrs	r2, r2, #2
 80103b0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80103b4:	fb0c 1212 	mls	r2, ip, r2, r1
 80103b8:	b2d1      	uxtb	r1, r2
 80103ba:	4288      	cmp	r0, r1
 80103bc:	f43f af64 	beq.w	8010288 <uxr_read_framed_msg+0x2dc>
 80103c0:	4422      	add	r2, r4
 80103c2:	3302      	adds	r3, #2
 80103c4:	7891      	ldrb	r1, [r2, #2]
 80103c6:	085a      	lsrs	r2, r3, #1
 80103c8:	fba5 0202 	umull	r0, r2, r5, r2
 80103cc:	0892      	lsrs	r2, r2, #2
 80103ce:	fb0c 3312 	mls	r3, ip, r2, r3
 80103d2:	297e      	cmp	r1, #126	@ 0x7e
 80103d4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80103d8:	d070      	beq.n	80104bc <uxr_read_framed_msg+0x510>
 80103da:	f081 0120 	eor.w	r1, r1, #32
 80103de:	e6a3      	b.n	8010128 <uxr_read_framed_msg+0x17c>
 80103e0:	f103 0c01 	add.w	ip, r3, #1
 80103e4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80103e8:	fba5 0202 	umull	r0, r2, r5, r2
 80103ec:	0892      	lsrs	r2, r2, #2
 80103ee:	202a      	movs	r0, #42	@ 0x2a
 80103f0:	fb00 c212 	mls	r2, r0, r2, ip
 80103f4:	fa5f fc82 	uxtb.w	ip, r2
 80103f8:	4561      	cmp	r1, ip
 80103fa:	f43f af58 	beq.w	80102ae <uxr_read_framed_msg+0x302>
 80103fe:	4422      	add	r2, r4
 8010400:	3302      	adds	r3, #2
 8010402:	7891      	ldrb	r1, [r2, #2]
 8010404:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8010408:	085a      	lsrs	r2, r3, #1
 801040a:	fba5 c202 	umull	ip, r2, r5, r2
 801040e:	0892      	lsrs	r2, r2, #2
 8010410:	fb00 3312 	mls	r3, r0, r2, r3
 8010414:	297e      	cmp	r1, #126	@ 0x7e
 8010416:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801041a:	f43f af48 	beq.w	80102ae <uxr_read_framed_msg+0x302>
 801041e:	f081 0120 	eor.w	r1, r1, #32
 8010422:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8010426:	e6e8      	b.n	80101fa <uxr_read_framed_msg+0x24e>
 8010428:	1c58      	adds	r0, r3, #1
 801042a:	0842      	lsrs	r2, r0, #1
 801042c:	fba5 c202 	umull	ip, r2, r5, r2
 8010430:	0892      	lsrs	r2, r2, #2
 8010432:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8010436:	fb0c 0212 	mls	r2, ip, r2, r0
 801043a:	b2d0      	uxtb	r0, r2
 801043c:	4281      	cmp	r1, r0
 801043e:	f43f af32 	beq.w	80102a6 <uxr_read_framed_msg+0x2fa>
 8010442:	4422      	add	r2, r4
 8010444:	3302      	adds	r3, #2
 8010446:	7890      	ldrb	r0, [r2, #2]
 8010448:	085a      	lsrs	r2, r3, #1
 801044a:	fba5 1202 	umull	r1, r2, r5, r2
 801044e:	0892      	lsrs	r2, r2, #2
 8010450:	fb0c 3312 	mls	r3, ip, r2, r3
 8010454:	287e      	cmp	r0, #126	@ 0x7e
 8010456:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801045a:	d01f      	beq.n	801049c <uxr_read_framed_msg+0x4f0>
 801045c:	f080 0020 	eor.w	r0, r0, #32
 8010460:	e68b      	b.n	801017a <uxr_read_framed_msg+0x1ce>
 8010462:	1c51      	adds	r1, r2, #1
 8010464:	084b      	lsrs	r3, r1, #1
 8010466:	fba5 c303 	umull	ip, r3, r5, r3
 801046a:	089b      	lsrs	r3, r3, #2
 801046c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8010470:	fb0c 1313 	mls	r3, ip, r3, r1
 8010474:	b2d9      	uxtb	r1, r3
 8010476:	4288      	cmp	r0, r1
 8010478:	f43f af3d 	beq.w	80102f6 <uxr_read_framed_msg+0x34a>
 801047c:	3202      	adds	r2, #2
 801047e:	4423      	add	r3, r4
 8010480:	0850      	lsrs	r0, r2, #1
 8010482:	789b      	ldrb	r3, [r3, #2]
 8010484:	fba5 1000 	umull	r1, r0, r5, r0
 8010488:	0880      	lsrs	r0, r0, #2
 801048a:	fb0c 2210 	mls	r2, ip, r0, r2
 801048e:	2b7e      	cmp	r3, #126	@ 0x7e
 8010490:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8010494:	d016      	beq.n	80104c4 <uxr_read_framed_msg+0x518>
 8010496:	f083 0120 	eor.w	r1, r3, #32
 801049a:	e68b      	b.n	80101b4 <uxr_read_framed_msg+0x208>
 801049c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801049e:	9300      	str	r3, [sp, #0]
 80104a0:	2302      	movs	r3, #2
 80104a2:	9301      	str	r3, [sp, #4]
 80104a4:	464a      	mov	r2, r9
 80104a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80104a8:	4641      	mov	r1, r8
 80104aa:	4620      	mov	r0, r4
 80104ac:	f7ff fcfc 	bl	800fea8 <uxr_framing_read_transport>
 80104b0:	2800      	cmp	r0, #0
 80104b2:	f47f aef6 	bne.w	80102a2 <uxr_read_framed_msg+0x2f6>
 80104b6:	2301      	movs	r3, #1
 80104b8:	7023      	strb	r3, [r4, #0]
 80104ba:	e588      	b.n	800ffce <uxr_read_framed_msg+0x22>
 80104bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80104be:	9300      	str	r3, [sp, #0]
 80104c0:	2301      	movs	r3, #1
 80104c2:	e7ee      	b.n	80104a2 <uxr_read_framed_msg+0x4f6>
 80104c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80104c6:	9300      	str	r3, [sp, #0]
 80104c8:	2303      	movs	r3, #3
 80104ca:	e7ea      	b.n	80104a2 <uxr_read_framed_msg+0x4f6>
 80104cc:	ee17 8a90 	vmov	r8, s15
 80104d0:	e6ae      	b.n	8010230 <uxr_read_framed_msg+0x284>
 80104d2:	bf00      	nop

080104d4 <uxr_stream_id>:
 80104d4:	2901      	cmp	r1, #1
 80104d6:	b082      	sub	sp, #8
 80104d8:	d01d      	beq.n	8010516 <uxr_stream_id+0x42>
 80104da:	2902      	cmp	r1, #2
 80104dc:	f04f 0c00 	mov.w	ip, #0
 80104e0:	d01e      	beq.n	8010520 <uxr_stream_id+0x4c>
 80104e2:	2300      	movs	r3, #0
 80104e4:	f36c 0307 	bfi	r3, ip, #0, #8
 80104e8:	f360 230f 	bfi	r3, r0, #8, #8
 80104ec:	f361 4317 	bfi	r3, r1, #16, #8
 80104f0:	f362 631f 	bfi	r3, r2, #24, #8
 80104f4:	b2da      	uxtb	r2, r3
 80104f6:	2000      	movs	r0, #0
 80104f8:	f362 0007 	bfi	r0, r2, #0, #8
 80104fc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010500:	f362 200f 	bfi	r0, r2, #8, #8
 8010504:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010508:	f362 4017 	bfi	r0, r2, #16, #8
 801050c:	0e1b      	lsrs	r3, r3, #24
 801050e:	f363 601f 	bfi	r0, r3, #24, #8
 8010512:	b002      	add	sp, #8
 8010514:	4770      	bx	lr
 8010516:	f100 0c01 	add.w	ip, r0, #1
 801051a:	fa5f fc8c 	uxtb.w	ip, ip
 801051e:	e7e0      	b.n	80104e2 <uxr_stream_id+0xe>
 8010520:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8010524:	e7dd      	b.n	80104e2 <uxr_stream_id+0xe>
 8010526:	bf00      	nop

08010528 <uxr_stream_id_from_raw>:
 8010528:	b082      	sub	sp, #8
 801052a:	b130      	cbz	r0, 801053a <uxr_stream_id_from_raw+0x12>
 801052c:	0603      	lsls	r3, r0, #24
 801052e:	d420      	bmi.n	8010572 <uxr_stream_id_from_raw+0x4a>
 8010530:	1e42      	subs	r2, r0, #1
 8010532:	b2d2      	uxtb	r2, r2
 8010534:	f04f 0c01 	mov.w	ip, #1
 8010538:	e001      	b.n	801053e <uxr_stream_id_from_raw+0x16>
 801053a:	4684      	mov	ip, r0
 801053c:	4602      	mov	r2, r0
 801053e:	2300      	movs	r3, #0
 8010540:	f360 0307 	bfi	r3, r0, #0, #8
 8010544:	f362 230f 	bfi	r3, r2, #8, #8
 8010548:	f36c 4317 	bfi	r3, ip, #16, #8
 801054c:	f361 631f 	bfi	r3, r1, #24, #8
 8010550:	b2da      	uxtb	r2, r3
 8010552:	2000      	movs	r0, #0
 8010554:	f362 0007 	bfi	r0, r2, #0, #8
 8010558:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801055c:	f362 200f 	bfi	r0, r2, #8, #8
 8010560:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010564:	f362 4017 	bfi	r0, r2, #16, #8
 8010568:	0e1b      	lsrs	r3, r3, #24
 801056a:	f363 601f 	bfi	r0, r3, #24, #8
 801056e:	b002      	add	sp, #8
 8010570:	4770      	bx	lr
 8010572:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8010576:	f04f 0c02 	mov.w	ip, #2
 801057a:	e7e0      	b.n	801053e <uxr_stream_id_from_raw+0x16>

0801057c <uxr_init_stream_storage>:
 801057c:	2300      	movs	r3, #0
 801057e:	7403      	strb	r3, [r0, #16]
 8010580:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8010584:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8010588:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 801058c:	4770      	bx	lr
 801058e:	bf00      	nop

08010590 <uxr_reset_stream_storage>:
 8010590:	b570      	push	{r4, r5, r6, lr}
 8010592:	7c03      	ldrb	r3, [r0, #16]
 8010594:	4604      	mov	r4, r0
 8010596:	b153      	cbz	r3, 80105ae <uxr_reset_stream_storage+0x1e>
 8010598:	4606      	mov	r6, r0
 801059a:	2500      	movs	r5, #0
 801059c:	4630      	mov	r0, r6
 801059e:	f005 fe05 	bl	80161ac <uxr_reset_output_best_effort_stream>
 80105a2:	7c23      	ldrb	r3, [r4, #16]
 80105a4:	3501      	adds	r5, #1
 80105a6:	42ab      	cmp	r3, r5
 80105a8:	f106 0610 	add.w	r6, r6, #16
 80105ac:	d8f6      	bhi.n	801059c <uxr_reset_stream_storage+0xc>
 80105ae:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80105b2:	b163      	cbz	r3, 80105ce <uxr_reset_stream_storage+0x3e>
 80105b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80105b8:	2500      	movs	r5, #0
 80105ba:	4630      	mov	r0, r6
 80105bc:	f005 fbf8 	bl	8015db0 <uxr_reset_input_best_effort_stream>
 80105c0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80105c4:	3501      	adds	r5, #1
 80105c6:	42ab      	cmp	r3, r5
 80105c8:	f106 0602 	add.w	r6, r6, #2
 80105cc:	d8f5      	bhi.n	80105ba <uxr_reset_stream_storage+0x2a>
 80105ce:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80105d2:	b163      	cbz	r3, 80105ee <uxr_reset_stream_storage+0x5e>
 80105d4:	f104 0618 	add.w	r6, r4, #24
 80105d8:	2500      	movs	r5, #0
 80105da:	4630      	mov	r0, r6
 80105dc:	f005 fe92 	bl	8016304 <uxr_reset_output_reliable_stream>
 80105e0:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80105e4:	3501      	adds	r5, #1
 80105e6:	42ab      	cmp	r3, r5
 80105e8:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 80105ec:	d8f5      	bhi.n	80105da <uxr_reset_stream_storage+0x4a>
 80105ee:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80105f2:	b163      	cbz	r3, 801060e <uxr_reset_stream_storage+0x7e>
 80105f4:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80105f8:	2500      	movs	r5, #0
 80105fa:	4630      	mov	r0, r6
 80105fc:	f005 fc4c 	bl	8015e98 <uxr_reset_input_reliable_stream>
 8010600:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8010604:	3501      	adds	r5, #1
 8010606:	42ab      	cmp	r3, r5
 8010608:	f106 0618 	add.w	r6, r6, #24
 801060c:	d8f5      	bhi.n	80105fa <uxr_reset_stream_storage+0x6a>
 801060e:	bd70      	pop	{r4, r5, r6, pc}

08010610 <uxr_add_output_best_effort_buffer>:
 8010610:	b510      	push	{r4, lr}
 8010612:	7c04      	ldrb	r4, [r0, #16]
 8010614:	f104 0c01 	add.w	ip, r4, #1
 8010618:	b082      	sub	sp, #8
 801061a:	f880 c010 	strb.w	ip, [r0, #16]
 801061e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8010622:	f005 fdb9 	bl	8016198 <uxr_init_output_best_effort_stream>
 8010626:	2201      	movs	r2, #1
 8010628:	4611      	mov	r1, r2
 801062a:	4620      	mov	r0, r4
 801062c:	b002      	add	sp, #8
 801062e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010632:	f7ff bf4f 	b.w	80104d4 <uxr_stream_id>
 8010636:	bf00      	nop

08010638 <uxr_add_output_reliable_buffer>:
 8010638:	b510      	push	{r4, lr}
 801063a:	b084      	sub	sp, #16
 801063c:	4684      	mov	ip, r0
 801063e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8010642:	9000      	str	r0, [sp, #0]
 8010644:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8010648:	2028      	movs	r0, #40	@ 0x28
 801064a:	fb00 c004 	mla	r0, r0, r4, ip
 801064e:	f104 0e01 	add.w	lr, r4, #1
 8010652:	3018      	adds	r0, #24
 8010654:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8010658:	f005 fe1c 	bl	8016294 <uxr_init_output_reliable_stream>
 801065c:	2201      	movs	r2, #1
 801065e:	2102      	movs	r1, #2
 8010660:	4620      	mov	r0, r4
 8010662:	b004      	add	sp, #16
 8010664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010668:	f7ff bf34 	b.w	80104d4 <uxr_stream_id>

0801066c <uxr_add_input_best_effort_buffer>:
 801066c:	b510      	push	{r4, lr}
 801066e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8010672:	4603      	mov	r3, r0
 8010674:	1c62      	adds	r2, r4, #1
 8010676:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 801067a:	b082      	sub	sp, #8
 801067c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8010680:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010684:	f005 fb90 	bl	8015da8 <uxr_init_input_best_effort_stream>
 8010688:	2200      	movs	r2, #0
 801068a:	2101      	movs	r1, #1
 801068c:	4620      	mov	r0, r4
 801068e:	b002      	add	sp, #8
 8010690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010694:	f7ff bf1e 	b.w	80104d4 <uxr_stream_id>

08010698 <uxr_add_input_reliable_buffer>:
 8010698:	b510      	push	{r4, lr}
 801069a:	b084      	sub	sp, #16
 801069c:	4684      	mov	ip, r0
 801069e:	9806      	ldr	r0, [sp, #24]
 80106a0:	9000      	str	r0, [sp, #0]
 80106a2:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 80106a6:	2018      	movs	r0, #24
 80106a8:	fb00 c004 	mla	r0, r0, r4, ip
 80106ac:	f104 0e01 	add.w	lr, r4, #1
 80106b0:	3048      	adds	r0, #72	@ 0x48
 80106b2:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 80106b6:	f005 fbc3 	bl	8015e40 <uxr_init_input_reliable_stream>
 80106ba:	2200      	movs	r2, #0
 80106bc:	2102      	movs	r1, #2
 80106be:	4620      	mov	r0, r4
 80106c0:	b004      	add	sp, #16
 80106c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106c6:	f7ff bf05 	b.w	80104d4 <uxr_stream_id>
 80106ca:	bf00      	nop

080106cc <uxr_get_output_best_effort_stream>:
 80106cc:	7c03      	ldrb	r3, [r0, #16]
 80106ce:	428b      	cmp	r3, r1
 80106d0:	bf8c      	ite	hi
 80106d2:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80106d6:	2000      	movls	r0, #0
 80106d8:	4770      	bx	lr
 80106da:	bf00      	nop

080106dc <uxr_get_output_reliable_stream>:
 80106dc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80106e0:	428b      	cmp	r3, r1
 80106e2:	bf83      	ittte	hi
 80106e4:	2328      	movhi	r3, #40	@ 0x28
 80106e6:	fb03 0001 	mlahi	r0, r3, r1, r0
 80106ea:	3018      	addhi	r0, #24
 80106ec:	2000      	movls	r0, #0
 80106ee:	4770      	bx	lr

080106f0 <uxr_get_input_best_effort_stream>:
 80106f0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80106f4:	428b      	cmp	r3, r1
 80106f6:	bf86      	itte	hi
 80106f8:	3121      	addhi	r1, #33	@ 0x21
 80106fa:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80106fe:	2000      	movls	r0, #0
 8010700:	4770      	bx	lr
 8010702:	bf00      	nop

08010704 <uxr_get_input_reliable_stream>:
 8010704:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8010708:	428b      	cmp	r3, r1
 801070a:	bf83      	ittte	hi
 801070c:	2318      	movhi	r3, #24
 801070e:	fb03 0001 	mlahi	r0, r3, r1, r0
 8010712:	3048      	addhi	r0, #72	@ 0x48
 8010714:	2000      	movls	r0, #0
 8010716:	4770      	bx	lr

08010718 <uxr_output_streams_confirmed>:
 8010718:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801071c:	b183      	cbz	r3, 8010740 <uxr_output_streams_confirmed+0x28>
 801071e:	b570      	push	{r4, r5, r6, lr}
 8010720:	4606      	mov	r6, r0
 8010722:	f100 0518 	add.w	r5, r0, #24
 8010726:	2400      	movs	r4, #0
 8010728:	e001      	b.n	801072e <uxr_output_streams_confirmed+0x16>
 801072a:	3528      	adds	r5, #40	@ 0x28
 801072c:	b138      	cbz	r0, 801073e <uxr_output_streams_confirmed+0x26>
 801072e:	4628      	mov	r0, r5
 8010730:	f006 f858 	bl	80167e4 <uxr_is_output_up_to_date>
 8010734:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8010738:	3401      	adds	r4, #1
 801073a:	42a3      	cmp	r3, r4
 801073c:	d8f5      	bhi.n	801072a <uxr_output_streams_confirmed+0x12>
 801073e:	bd70      	pop	{r4, r5, r6, pc}
 8010740:	2001      	movs	r0, #1
 8010742:	4770      	bx	lr

08010744 <uxr_buffer_submessage_header>:
 8010744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010746:	4604      	mov	r4, r0
 8010748:	460e      	mov	r6, r1
 801074a:	2104      	movs	r1, #4
 801074c:	4615      	mov	r5, r2
 801074e:	461f      	mov	r7, r3
 8010750:	f7fb fa0e 	bl	800bb70 <ucdr_align_to>
 8010754:	2301      	movs	r3, #1
 8010756:	ea47 0203 	orr.w	r2, r7, r3
 801075a:	4631      	mov	r1, r6
 801075c:	7523      	strb	r3, [r4, #20]
 801075e:	4620      	mov	r0, r4
 8010760:	462b      	mov	r3, r5
 8010762:	f000 fa27 	bl	8010bb4 <uxr_serialize_submessage_header>
 8010766:	4620      	mov	r0, r4
 8010768:	f7fb fa18 	bl	800bb9c <ucdr_buffer_remaining>
 801076c:	42a8      	cmp	r0, r5
 801076e:	bf34      	ite	cc
 8010770:	2000      	movcc	r0, #0
 8010772:	2001      	movcs	r0, #1
 8010774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010776:	bf00      	nop

08010778 <uxr_read_submessage_header>:
 8010778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801077c:	4604      	mov	r4, r0
 801077e:	460d      	mov	r5, r1
 8010780:	2104      	movs	r1, #4
 8010782:	4616      	mov	r6, r2
 8010784:	4698      	mov	r8, r3
 8010786:	f7fb f9f3 	bl	800bb70 <ucdr_align_to>
 801078a:	4620      	mov	r0, r4
 801078c:	f7fb fa06 	bl	800bb9c <ucdr_buffer_remaining>
 8010790:	2803      	cmp	r0, #3
 8010792:	bf8c      	ite	hi
 8010794:	2701      	movhi	r7, #1
 8010796:	2700      	movls	r7, #0
 8010798:	d802      	bhi.n	80107a0 <uxr_read_submessage_header+0x28>
 801079a:	4638      	mov	r0, r7
 801079c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107a0:	4633      	mov	r3, r6
 80107a2:	4642      	mov	r2, r8
 80107a4:	4620      	mov	r0, r4
 80107a6:	4629      	mov	r1, r5
 80107a8:	f000 fa18 	bl	8010bdc <uxr_deserialize_submessage_header>
 80107ac:	f898 3000 	ldrb.w	r3, [r8]
 80107b0:	f003 0201 	and.w	r2, r3, #1
 80107b4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80107b8:	f888 3000 	strb.w	r3, [r8]
 80107bc:	7522      	strb	r2, [r4, #20]
 80107be:	4638      	mov	r0, r7
 80107c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080107c4 <uxr_submessage_padding>:
 80107c4:	f010 0003 	ands.w	r0, r0, #3
 80107c8:	bf18      	it	ne
 80107ca:	f1c0 0004 	rsbne	r0, r0, #4
 80107ce:	4770      	bx	lr

080107d0 <uxr_millis>:
 80107d0:	b510      	push	{r4, lr}
 80107d2:	b084      	sub	sp, #16
 80107d4:	4669      	mov	r1, sp
 80107d6:	2001      	movs	r0, #1
 80107d8:	f7f1 fbfe 	bl	8001fd8 <clock_gettime>
 80107dc:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80107e0:	4906      	ldr	r1, [pc, #24]	@ (80107fc <uxr_millis+0x2c>)
 80107e2:	fba0 0301 	umull	r0, r3, r0, r1
 80107e6:	1900      	adds	r0, r0, r4
 80107e8:	fb01 3102 	mla	r1, r1, r2, r3
 80107ec:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80107f0:	4a03      	ldr	r2, [pc, #12]	@ (8010800 <uxr_millis+0x30>)
 80107f2:	2300      	movs	r3, #0
 80107f4:	f7f0 f99a 	bl	8000b2c <__aeabi_ldivmod>
 80107f8:	b004      	add	sp, #16
 80107fa:	bd10      	pop	{r4, pc}
 80107fc:	3b9aca00 	.word	0x3b9aca00
 8010800:	000f4240 	.word	0x000f4240

08010804 <uxr_nanos>:
 8010804:	b510      	push	{r4, lr}
 8010806:	b084      	sub	sp, #16
 8010808:	4669      	mov	r1, sp
 801080a:	2001      	movs	r0, #1
 801080c:	f7f1 fbe4 	bl	8001fd8 <clock_gettime>
 8010810:	4a06      	ldr	r2, [pc, #24]	@ (801082c <uxr_nanos+0x28>)
 8010812:	9800      	ldr	r0, [sp, #0]
 8010814:	9902      	ldr	r1, [sp, #8]
 8010816:	9c01      	ldr	r4, [sp, #4]
 8010818:	fba0 0302 	umull	r0, r3, r0, r2
 801081c:	1840      	adds	r0, r0, r1
 801081e:	fb02 3304 	mla	r3, r2, r4, r3
 8010822:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8010826:	b004      	add	sp, #16
 8010828:	bd10      	pop	{r4, pc}
 801082a:	bf00      	nop
 801082c:	3b9aca00 	.word	0x3b9aca00

08010830 <on_full_output_buffer_fragmented>:
 8010830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010834:	460c      	mov	r4, r1
 8010836:	b08a      	sub	sp, #40	@ 0x28
 8010838:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 801083c:	4606      	mov	r6, r0
 801083e:	f104 0008 	add.w	r0, r4, #8
 8010842:	f7ff ff4b 	bl	80106dc <uxr_get_output_reliable_stream>
 8010846:	4605      	mov	r5, r0
 8010848:	f005 ffd6 	bl	80167f8 <get_available_free_slots>
 801084c:	b968      	cbnz	r0, 801086a <on_full_output_buffer_fragmented+0x3a>
 801084e:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8010852:	4620      	mov	r0, r4
 8010854:	4798      	blx	r3
 8010856:	b918      	cbnz	r0, 8010860 <on_full_output_buffer_fragmented+0x30>
 8010858:	2001      	movs	r0, #1
 801085a:	b00a      	add	sp, #40	@ 0x28
 801085c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010860:	4628      	mov	r0, r5
 8010862:	f005 ffc9 	bl	80167f8 <get_available_free_slots>
 8010866:	2800      	cmp	r0, #0
 8010868:	d0f6      	beq.n	8010858 <on_full_output_buffer_fragmented+0x28>
 801086a:	8929      	ldrh	r1, [r5, #8]
 801086c:	89eb      	ldrh	r3, [r5, #14]
 801086e:	7b28      	ldrb	r0, [r5, #12]
 8010870:	686a      	ldr	r2, [r5, #4]
 8010872:	fbb2 f8f1 	udiv	r8, r2, r1
 8010876:	fbb3 f2f1 	udiv	r2, r3, r1
 801087a:	fb01 3112 	mls	r1, r1, r2, r3
 801087e:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8010882:	b289      	uxth	r1, r1
 8010884:	fb08 f101 	mul.w	r1, r8, r1
 8010888:	30fc      	adds	r0, #252	@ 0xfc
 801088a:	f1a8 0804 	sub.w	r8, r8, #4
 801088e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8010892:	4440      	add	r0, r8
 8010894:	b287      	uxth	r7, r0
 8010896:	1bdb      	subs	r3, r3, r7
 8010898:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 801089c:	682b      	ldr	r3, [r5, #0]
 801089e:	3104      	adds	r1, #4
 80108a0:	4419      	add	r1, r3
 80108a2:	4642      	mov	r2, r8
 80108a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80108a8:	9300      	str	r3, [sp, #0]
 80108aa:	a802      	add	r0, sp, #8
 80108ac:	2300      	movs	r3, #0
 80108ae:	f7fb f933 	bl	800bb18 <ucdr_init_buffer_origin_offset>
 80108b2:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80108b6:	f102 0308 	add.w	r3, r2, #8
 80108ba:	4543      	cmp	r3, r8
 80108bc:	d928      	bls.n	8010910 <on_full_output_buffer_fragmented+0xe0>
 80108be:	463a      	mov	r2, r7
 80108c0:	2300      	movs	r3, #0
 80108c2:	210d      	movs	r1, #13
 80108c4:	a802      	add	r0, sp, #8
 80108c6:	f7ff ff3d 	bl	8010744 <uxr_buffer_submessage_header>
 80108ca:	8929      	ldrh	r1, [r5, #8]
 80108cc:	89eb      	ldrh	r3, [r5, #14]
 80108ce:	fbb3 f2f1 	udiv	r2, r3, r1
 80108d2:	fb01 3312 	mls	r3, r1, r2, r3
 80108d6:	b29b      	uxth	r3, r3
 80108d8:	686a      	ldr	r2, [r5, #4]
 80108da:	fbb2 f2f1 	udiv	r2, r2, r1
 80108de:	fb02 f303 	mul.w	r3, r2, r3
 80108e2:	682a      	ldr	r2, [r5, #0]
 80108e4:	f842 8003 	str.w	r8, [r2, r3]
 80108e8:	89e8      	ldrh	r0, [r5, #14]
 80108ea:	2101      	movs	r1, #1
 80108ec:	f005 ffa4 	bl	8016838 <uxr_seq_num_add>
 80108f0:	9904      	ldr	r1, [sp, #16]
 80108f2:	9a03      	ldr	r2, [sp, #12]
 80108f4:	81e8      	strh	r0, [r5, #14]
 80108f6:	1a52      	subs	r2, r2, r1
 80108f8:	4630      	mov	r0, r6
 80108fa:	f7fb f91f 	bl	800bb3c <ucdr_init_buffer>
 80108fe:	4630      	mov	r0, r6
 8010900:	490f      	ldr	r1, [pc, #60]	@ (8010940 <on_full_output_buffer_fragmented+0x110>)
 8010902:	4622      	mov	r2, r4
 8010904:	f7fb f8ee 	bl	800bae4 <ucdr_set_on_full_buffer_callback>
 8010908:	2000      	movs	r0, #0
 801090a:	b00a      	add	sp, #40	@ 0x28
 801090c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010910:	b292      	uxth	r2, r2
 8010912:	2302      	movs	r3, #2
 8010914:	210d      	movs	r1, #13
 8010916:	a802      	add	r0, sp, #8
 8010918:	f7ff ff14 	bl	8010744 <uxr_buffer_submessage_header>
 801091c:	8928      	ldrh	r0, [r5, #8]
 801091e:	89eb      	ldrh	r3, [r5, #14]
 8010920:	fbb3 f1f0 	udiv	r1, r3, r0
 8010924:	fb00 3311 	mls	r3, r0, r1, r3
 8010928:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801092c:	6869      	ldr	r1, [r5, #4]
 801092e:	fbb1 f1f0 	udiv	r1, r1, r0
 8010932:	b29b      	uxth	r3, r3
 8010934:	fb01 f303 	mul.w	r3, r1, r3
 8010938:	6829      	ldr	r1, [r5, #0]
 801093a:	3208      	adds	r2, #8
 801093c:	50ca      	str	r2, [r1, r3]
 801093e:	e7d3      	b.n	80108e8 <on_full_output_buffer_fragmented+0xb8>
 8010940:	08010831 	.word	0x08010831

08010944 <uxr_prepare_output_stream>:
 8010944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010946:	b087      	sub	sp, #28
 8010948:	2707      	movs	r7, #7
 801094a:	9202      	str	r2, [sp, #8]
 801094c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801094e:	9103      	str	r1, [sp, #12]
 8010950:	2500      	movs	r5, #0
 8010952:	3204      	adds	r2, #4
 8010954:	e9cd 7500 	strd	r7, r5, [sp]
 8010958:	461c      	mov	r4, r3
 801095a:	4606      	mov	r6, r0
 801095c:	f7fe ffc2 	bl	800f8e4 <uxr_prepare_stream_to_write_submessage>
 8010960:	f080 0201 	eor.w	r2, r0, #1
 8010964:	b2d2      	uxtb	r2, r2
 8010966:	75a2      	strb	r2, [r4, #22]
 8010968:	b112      	cbz	r2, 8010970 <uxr_prepare_output_stream+0x2c>
 801096a:	4628      	mov	r0, r5
 801096c:	b007      	add	sp, #28
 801096e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010970:	aa05      	add	r2, sp, #20
 8010972:	9902      	ldr	r1, [sp, #8]
 8010974:	4630      	mov	r0, r6
 8010976:	f7ff f8eb 	bl	800fb50 <uxr_init_base_object_request>
 801097a:	a905      	add	r1, sp, #20
 801097c:	4605      	mov	r5, r0
 801097e:	4620      	mov	r0, r4
 8010980:	f000 ffa0 	bl	80118c4 <uxr_serialize_WRITE_DATA_Payload_Data>
 8010984:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8010988:	69a6      	ldr	r6, [r4, #24]
 801098a:	69e7      	ldr	r7, [r4, #28]
 801098c:	1a52      	subs	r2, r2, r1
 801098e:	4620      	mov	r0, r4
 8010990:	f7fb f8d4 	bl	800bb3c <ucdr_init_buffer>
 8010994:	4620      	mov	r0, r4
 8010996:	463a      	mov	r2, r7
 8010998:	4631      	mov	r1, r6
 801099a:	f7fb f8a3 	bl	800bae4 <ucdr_set_on_full_buffer_callback>
 801099e:	4628      	mov	r0, r5
 80109a0:	b007      	add	sp, #28
 80109a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080109a4 <uxr_prepare_output_stream_fragmented>:
 80109a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109a8:	b091      	sub	sp, #68	@ 0x44
 80109aa:	4605      	mov	r5, r0
 80109ac:	9105      	str	r1, [sp, #20]
 80109ae:	3008      	adds	r0, #8
 80109b0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80109b4:	461e      	mov	r6, r3
 80109b6:	9204      	str	r2, [sp, #16]
 80109b8:	f7ff fe90 	bl	80106dc <uxr_get_output_reliable_stream>
 80109bc:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80109c0:	2b01      	cmp	r3, #1
 80109c2:	f000 8091 	beq.w	8010ae8 <uxr_prepare_output_stream_fragmented+0x144>
 80109c6:	4604      	mov	r4, r0
 80109c8:	2800      	cmp	r0, #0
 80109ca:	f000 808d 	beq.w	8010ae8 <uxr_prepare_output_stream_fragmented+0x144>
 80109ce:	f005 ff13 	bl	80167f8 <get_available_free_slots>
 80109d2:	2800      	cmp	r0, #0
 80109d4:	f000 8083 	beq.w	8010ade <uxr_prepare_output_stream_fragmented+0x13a>
 80109d8:	8922      	ldrh	r2, [r4, #8]
 80109da:	89e7      	ldrh	r7, [r4, #14]
 80109dc:	fbb7 f9f2 	udiv	r9, r7, r2
 80109e0:	fb02 7919 	mls	r9, r2, r9, r7
 80109e4:	fa1f f989 	uxth.w	r9, r9
 80109e8:	6863      	ldr	r3, [r4, #4]
 80109ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80109ee:	6823      	ldr	r3, [r4, #0]
 80109f0:	9203      	str	r2, [sp, #12]
 80109f2:	fb02 f909 	mul.w	r9, r2, r9
 80109f6:	f109 0904 	add.w	r9, r9, #4
 80109fa:	4499      	add	r9, r3
 80109fc:	7b23      	ldrb	r3, [r4, #12]
 80109fe:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8010a02:	4543      	cmp	r3, r8
 8010a04:	f1a2 0b04 	sub.w	fp, r2, #4
 8010a08:	d37a      	bcc.n	8010b00 <uxr_prepare_output_stream_fragmented+0x15c>
 8010a0a:	f1ab 0a04 	sub.w	sl, fp, #4
 8010a0e:	ebaa 0a03 	sub.w	sl, sl, r3
 8010a12:	465a      	mov	r2, fp
 8010a14:	2300      	movs	r3, #0
 8010a16:	4649      	mov	r1, r9
 8010a18:	a808      	add	r0, sp, #32
 8010a1a:	f8cd 8000 	str.w	r8, [sp]
 8010a1e:	f7fb f87b 	bl	800bb18 <ucdr_init_buffer_origin_offset>
 8010a22:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010a24:	fa1f fa8a 	uxth.w	sl, sl
 8010a28:	4652      	mov	r2, sl
 8010a2a:	f103 0a08 	add.w	sl, r3, #8
 8010a2e:	45da      	cmp	sl, fp
 8010a30:	bf34      	ite	cc
 8010a32:	2302      	movcc	r3, #2
 8010a34:	2300      	movcs	r3, #0
 8010a36:	210d      	movs	r1, #13
 8010a38:	a808      	add	r0, sp, #32
 8010a3a:	f7ff fe83 	bl	8010744 <uxr_buffer_submessage_header>
 8010a3e:	8921      	ldrh	r1, [r4, #8]
 8010a40:	fbb7 f2f1 	udiv	r2, r7, r1
 8010a44:	fb01 7212 	mls	r2, r1, r2, r7
 8010a48:	b292      	uxth	r2, r2
 8010a4a:	6863      	ldr	r3, [r4, #4]
 8010a4c:	fbb3 f3f1 	udiv	r3, r3, r1
 8010a50:	fb02 f303 	mul.w	r3, r2, r3
 8010a54:	6822      	ldr	r2, [r4, #0]
 8010a56:	4638      	mov	r0, r7
 8010a58:	f842 b003 	str.w	fp, [r2, r3]
 8010a5c:	2101      	movs	r1, #1
 8010a5e:	f005 feeb 	bl	8016838 <uxr_seq_num_add>
 8010a62:	9b03      	ldr	r3, [sp, #12]
 8010a64:	f108 0104 	add.w	r1, r8, #4
 8010a68:	f1a3 0208 	sub.w	r2, r3, #8
 8010a6c:	eba2 0208 	sub.w	r2, r2, r8
 8010a70:	4449      	add	r1, r9
 8010a72:	4607      	mov	r7, r0
 8010a74:	4630      	mov	r0, r6
 8010a76:	f7fb f861 	bl	800bb3c <ucdr_init_buffer>
 8010a7a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010a7c:	81e7      	strh	r7, [r4, #14]
 8010a7e:	1d1a      	adds	r2, r3, #4
 8010a80:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8010a84:	bf28      	it	cs
 8010a86:	2200      	movcs	r2, #0
 8010a88:	2300      	movs	r3, #0
 8010a8a:	b292      	uxth	r2, r2
 8010a8c:	2107      	movs	r1, #7
 8010a8e:	4630      	mov	r0, r6
 8010a90:	f7ff fe58 	bl	8010744 <uxr_buffer_submessage_header>
 8010a94:	9904      	ldr	r1, [sp, #16]
 8010a96:	aa07      	add	r2, sp, #28
 8010a98:	4628      	mov	r0, r5
 8010a9a:	f7ff f859 	bl	800fb50 <uxr_init_base_object_request>
 8010a9e:	4604      	mov	r4, r0
 8010aa0:	b318      	cbz	r0, 8010aea <uxr_prepare_output_stream_fragmented+0x146>
 8010aa2:	a907      	add	r1, sp, #28
 8010aa4:	4630      	mov	r0, r6
 8010aa6:	f000 ff0d 	bl	80118c4 <uxr_serialize_WRITE_DATA_Payload_Data>
 8010aaa:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8010aae:	4630      	mov	r0, r6
 8010ab0:	1a52      	subs	r2, r2, r1
 8010ab2:	f7fb f843 	bl	800bb3c <ucdr_init_buffer>
 8010ab6:	9b05      	ldr	r3, [sp, #20]
 8010ab8:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8010abc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010abe:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8010ac2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8010ac4:	491b      	ldr	r1, [pc, #108]	@ (8010b34 <uxr_prepare_output_stream_fragmented+0x190>)
 8010ac6:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8010aca:	4630      	mov	r0, r6
 8010acc:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8010ad0:	462a      	mov	r2, r5
 8010ad2:	f7fb f807 	bl	800bae4 <ucdr_set_on_full_buffer_callback>
 8010ad6:	4620      	mov	r0, r4
 8010ad8:	b011      	add	sp, #68	@ 0x44
 8010ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ade:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8010ae0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010ae2:	4628      	mov	r0, r5
 8010ae4:	4798      	blx	r3
 8010ae6:	b920      	cbnz	r0, 8010af2 <uxr_prepare_output_stream_fragmented+0x14e>
 8010ae8:	2400      	movs	r4, #0
 8010aea:	4620      	mov	r0, r4
 8010aec:	b011      	add	sp, #68	@ 0x44
 8010aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010af2:	4620      	mov	r0, r4
 8010af4:	f005 fe80 	bl	80167f8 <get_available_free_slots>
 8010af8:	2800      	cmp	r0, #0
 8010afa:	f47f af6d 	bne.w	80109d8 <uxr_prepare_output_stream_fragmented+0x34>
 8010afe:	e7f3      	b.n	8010ae8 <uxr_prepare_output_stream_fragmented+0x144>
 8010b00:	4638      	mov	r0, r7
 8010b02:	2101      	movs	r1, #1
 8010b04:	f005 fe98 	bl	8016838 <uxr_seq_num_add>
 8010b08:	8921      	ldrh	r1, [r4, #8]
 8010b0a:	fbb0 f2f1 	udiv	r2, r0, r1
 8010b0e:	fb01 0912 	mls	r9, r1, r2, r0
 8010b12:	fa1f f289 	uxth.w	r2, r9
 8010b16:	6863      	ldr	r3, [r4, #4]
 8010b18:	fbb3 f9f1 	udiv	r9, r3, r1
 8010b1c:	6823      	ldr	r3, [r4, #0]
 8010b1e:	fb02 f909 	mul.w	r9, r2, r9
 8010b22:	f109 0904 	add.w	r9, r9, #4
 8010b26:	4499      	add	r9, r3
 8010b28:	4607      	mov	r7, r0
 8010b2a:	7b23      	ldrb	r3, [r4, #12]
 8010b2c:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8010b30:	e76b      	b.n	8010a0a <uxr_prepare_output_stream_fragmented+0x66>
 8010b32:	bf00      	nop
 8010b34:	08010831 	.word	0x08010831

08010b38 <uxr_serialize_message_header>:
 8010b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b3a:	b083      	sub	sp, #12
 8010b3c:	4616      	mov	r6, r2
 8010b3e:	4604      	mov	r4, r0
 8010b40:	9301      	str	r3, [sp, #4]
 8010b42:	460d      	mov	r5, r1
 8010b44:	9f08      	ldr	r7, [sp, #32]
 8010b46:	f7f9 feb7 	bl	800a8b8 <ucdr_serialize_uint8_t>
 8010b4a:	4631      	mov	r1, r6
 8010b4c:	4620      	mov	r0, r4
 8010b4e:	f7f9 feb3 	bl	800a8b8 <ucdr_serialize_uint8_t>
 8010b52:	9a01      	ldr	r2, [sp, #4]
 8010b54:	2101      	movs	r1, #1
 8010b56:	4620      	mov	r0, r4
 8010b58:	f7f9 ff5a 	bl	800aa10 <ucdr_serialize_endian_uint16_t>
 8010b5c:	062b      	lsls	r3, r5, #24
 8010b5e:	d501      	bpl.n	8010b64 <uxr_serialize_message_header+0x2c>
 8010b60:	b003      	add	sp, #12
 8010b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b64:	2204      	movs	r2, #4
 8010b66:	4639      	mov	r1, r7
 8010b68:	4620      	mov	r0, r4
 8010b6a:	b003      	add	sp, #12
 8010b6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010b70:	f004 bfe2 	b.w	8015b38 <ucdr_serialize_array_uint8_t>

08010b74 <uxr_deserialize_message_header>:
 8010b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b76:	b083      	sub	sp, #12
 8010b78:	4616      	mov	r6, r2
 8010b7a:	4604      	mov	r4, r0
 8010b7c:	9301      	str	r3, [sp, #4]
 8010b7e:	460d      	mov	r5, r1
 8010b80:	9f08      	ldr	r7, [sp, #32]
 8010b82:	f7f9 feaf 	bl	800a8e4 <ucdr_deserialize_uint8_t>
 8010b86:	4631      	mov	r1, r6
 8010b88:	4620      	mov	r0, r4
 8010b8a:	f7f9 feab 	bl	800a8e4 <ucdr_deserialize_uint8_t>
 8010b8e:	9a01      	ldr	r2, [sp, #4]
 8010b90:	2101      	movs	r1, #1
 8010b92:	4620      	mov	r0, r4
 8010b94:	f7fa f830 	bl	800abf8 <ucdr_deserialize_endian_uint16_t>
 8010b98:	f995 3000 	ldrsb.w	r3, [r5]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	da01      	bge.n	8010ba4 <uxr_deserialize_message_header+0x30>
 8010ba0:	b003      	add	sp, #12
 8010ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ba4:	2204      	movs	r2, #4
 8010ba6:	4639      	mov	r1, r7
 8010ba8:	4620      	mov	r0, r4
 8010baa:	b003      	add	sp, #12
 8010bac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010bb0:	f005 b826 	b.w	8015c00 <ucdr_deserialize_array_uint8_t>

08010bb4 <uxr_serialize_submessage_header>:
 8010bb4:	b530      	push	{r4, r5, lr}
 8010bb6:	b083      	sub	sp, #12
 8010bb8:	4615      	mov	r5, r2
 8010bba:	4604      	mov	r4, r0
 8010bbc:	9301      	str	r3, [sp, #4]
 8010bbe:	f7f9 fe7b 	bl	800a8b8 <ucdr_serialize_uint8_t>
 8010bc2:	4629      	mov	r1, r5
 8010bc4:	4620      	mov	r0, r4
 8010bc6:	f7f9 fe77 	bl	800a8b8 <ucdr_serialize_uint8_t>
 8010bca:	9a01      	ldr	r2, [sp, #4]
 8010bcc:	2101      	movs	r1, #1
 8010bce:	4620      	mov	r0, r4
 8010bd0:	b003      	add	sp, #12
 8010bd2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010bd6:	f7f9 bf1b 	b.w	800aa10 <ucdr_serialize_endian_uint16_t>
 8010bda:	bf00      	nop

08010bdc <uxr_deserialize_submessage_header>:
 8010bdc:	b530      	push	{r4, r5, lr}
 8010bde:	b083      	sub	sp, #12
 8010be0:	4615      	mov	r5, r2
 8010be2:	4604      	mov	r4, r0
 8010be4:	9301      	str	r3, [sp, #4]
 8010be6:	f7f9 fe7d 	bl	800a8e4 <ucdr_deserialize_uint8_t>
 8010bea:	4629      	mov	r1, r5
 8010bec:	4620      	mov	r0, r4
 8010bee:	f7f9 fe79 	bl	800a8e4 <ucdr_deserialize_uint8_t>
 8010bf2:	9a01      	ldr	r2, [sp, #4]
 8010bf4:	2101      	movs	r1, #1
 8010bf6:	4620      	mov	r0, r4
 8010bf8:	b003      	add	sp, #12
 8010bfa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010bfe:	f7f9 bffb 	b.w	800abf8 <ucdr_deserialize_endian_uint16_t>
 8010c02:	bf00      	nop

08010c04 <uxr_serialize_CLIENT_Representation>:
 8010c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c08:	2204      	movs	r2, #4
 8010c0a:	460e      	mov	r6, r1
 8010c0c:	4605      	mov	r5, r0
 8010c0e:	f004 ff93 	bl	8015b38 <ucdr_serialize_array_uint8_t>
 8010c12:	2202      	movs	r2, #2
 8010c14:	4607      	mov	r7, r0
 8010c16:	1d31      	adds	r1, r6, #4
 8010c18:	4628      	mov	r0, r5
 8010c1a:	f004 ff8d 	bl	8015b38 <ucdr_serialize_array_uint8_t>
 8010c1e:	4038      	ands	r0, r7
 8010c20:	2202      	movs	r2, #2
 8010c22:	1db1      	adds	r1, r6, #6
 8010c24:	b2c7      	uxtb	r7, r0
 8010c26:	4628      	mov	r0, r5
 8010c28:	f004 ff86 	bl	8015b38 <ucdr_serialize_array_uint8_t>
 8010c2c:	2204      	movs	r2, #4
 8010c2e:	4007      	ands	r7, r0
 8010c30:	f106 0108 	add.w	r1, r6, #8
 8010c34:	4628      	mov	r0, r5
 8010c36:	f004 ff7f 	bl	8015b38 <ucdr_serialize_array_uint8_t>
 8010c3a:	7b31      	ldrb	r1, [r6, #12]
 8010c3c:	4007      	ands	r7, r0
 8010c3e:	4628      	mov	r0, r5
 8010c40:	f7f9 fe3a 	bl	800a8b8 <ucdr_serialize_uint8_t>
 8010c44:	7b71      	ldrb	r1, [r6, #13]
 8010c46:	4007      	ands	r7, r0
 8010c48:	4628      	mov	r0, r5
 8010c4a:	f7f9 fe07 	bl	800a85c <ucdr_serialize_bool>
 8010c4e:	7b73      	ldrb	r3, [r6, #13]
 8010c50:	ea07 0800 	and.w	r8, r7, r0
 8010c54:	b93b      	cbnz	r3, 8010c66 <uxr_serialize_CLIENT_Representation+0x62>
 8010c56:	8bb1      	ldrh	r1, [r6, #28]
 8010c58:	4628      	mov	r0, r5
 8010c5a:	f7f9 fe59 	bl	800a910 <ucdr_serialize_uint16_t>
 8010c5e:	ea08 0000 	and.w	r0, r8, r0
 8010c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c66:	6931      	ldr	r1, [r6, #16]
 8010c68:	4628      	mov	r0, r5
 8010c6a:	f7fa f83b 	bl	800ace4 <ucdr_serialize_uint32_t>
 8010c6e:	6933      	ldr	r3, [r6, #16]
 8010c70:	b1e3      	cbz	r3, 8010cac <uxr_serialize_CLIENT_Representation+0xa8>
 8010c72:	b1c0      	cbz	r0, 8010ca6 <uxr_serialize_CLIENT_Representation+0xa2>
 8010c74:	4637      	mov	r7, r6
 8010c76:	f04f 0900 	mov.w	r9, #0
 8010c7a:	e001      	b.n	8010c80 <uxr_serialize_CLIENT_Representation+0x7c>
 8010c7c:	3708      	adds	r7, #8
 8010c7e:	b194      	cbz	r4, 8010ca6 <uxr_serialize_CLIENT_Representation+0xa2>
 8010c80:	6979      	ldr	r1, [r7, #20]
 8010c82:	4628      	mov	r0, r5
 8010c84:	f005 f878 	bl	8015d78 <ucdr_serialize_string>
 8010c88:	69b9      	ldr	r1, [r7, #24]
 8010c8a:	4604      	mov	r4, r0
 8010c8c:	4628      	mov	r0, r5
 8010c8e:	f005 f873 	bl	8015d78 <ucdr_serialize_string>
 8010c92:	6933      	ldr	r3, [r6, #16]
 8010c94:	f109 0901 	add.w	r9, r9, #1
 8010c98:	4004      	ands	r4, r0
 8010c9a:	4599      	cmp	r9, r3
 8010c9c:	b2e4      	uxtb	r4, r4
 8010c9e:	d3ed      	bcc.n	8010c7c <uxr_serialize_CLIENT_Representation+0x78>
 8010ca0:	ea08 0804 	and.w	r8, r8, r4
 8010ca4:	e7d7      	b.n	8010c56 <uxr_serialize_CLIENT_Representation+0x52>
 8010ca6:	f04f 0800 	mov.w	r8, #0
 8010caa:	e7d4      	b.n	8010c56 <uxr_serialize_CLIENT_Representation+0x52>
 8010cac:	ea08 0800 	and.w	r8, r8, r0
 8010cb0:	e7d1      	b.n	8010c56 <uxr_serialize_CLIENT_Representation+0x52>
 8010cb2:	bf00      	nop

08010cb4 <uxr_deserialize_CLIENT_Representation>:
 8010cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010cb8:	2204      	movs	r2, #4
 8010cba:	460c      	mov	r4, r1
 8010cbc:	4605      	mov	r5, r0
 8010cbe:	f004 ff9f 	bl	8015c00 <ucdr_deserialize_array_uint8_t>
 8010cc2:	2202      	movs	r2, #2
 8010cc4:	4607      	mov	r7, r0
 8010cc6:	1d21      	adds	r1, r4, #4
 8010cc8:	4628      	mov	r0, r5
 8010cca:	f004 ff99 	bl	8015c00 <ucdr_deserialize_array_uint8_t>
 8010cce:	4038      	ands	r0, r7
 8010cd0:	2202      	movs	r2, #2
 8010cd2:	1da1      	adds	r1, r4, #6
 8010cd4:	b2c6      	uxtb	r6, r0
 8010cd6:	4628      	mov	r0, r5
 8010cd8:	f004 ff92 	bl	8015c00 <ucdr_deserialize_array_uint8_t>
 8010cdc:	2204      	movs	r2, #4
 8010cde:	4006      	ands	r6, r0
 8010ce0:	f104 0108 	add.w	r1, r4, #8
 8010ce4:	4628      	mov	r0, r5
 8010ce6:	f004 ff8b 	bl	8015c00 <ucdr_deserialize_array_uint8_t>
 8010cea:	f104 010c 	add.w	r1, r4, #12
 8010cee:	4006      	ands	r6, r0
 8010cf0:	4628      	mov	r0, r5
 8010cf2:	f7f9 fdf7 	bl	800a8e4 <ucdr_deserialize_uint8_t>
 8010cf6:	f104 010d 	add.w	r1, r4, #13
 8010cfa:	ea06 0700 	and.w	r7, r6, r0
 8010cfe:	4628      	mov	r0, r5
 8010d00:	f7f9 fdc2 	bl	800a888 <ucdr_deserialize_bool>
 8010d04:	7b63      	ldrb	r3, [r4, #13]
 8010d06:	4007      	ands	r7, r0
 8010d08:	b93b      	cbnz	r3, 8010d1a <uxr_deserialize_CLIENT_Representation+0x66>
 8010d0a:	f104 011c 	add.w	r1, r4, #28
 8010d0e:	4628      	mov	r0, r5
 8010d10:	f7f9 fefe 	bl	800ab10 <ucdr_deserialize_uint16_t>
 8010d14:	4038      	ands	r0, r7
 8010d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d1a:	f104 0110 	add.w	r1, r4, #16
 8010d1e:	4628      	mov	r0, r5
 8010d20:	f7fa f910 	bl	800af44 <ucdr_deserialize_uint32_t>
 8010d24:	6923      	ldr	r3, [r4, #16]
 8010d26:	2b01      	cmp	r3, #1
 8010d28:	d903      	bls.n	8010d32 <uxr_deserialize_CLIENT_Representation+0x7e>
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	75ab      	strb	r3, [r5, #22]
 8010d2e:	2700      	movs	r7, #0
 8010d30:	e7eb      	b.n	8010d0a <uxr_deserialize_CLIENT_Representation+0x56>
 8010d32:	b30b      	cbz	r3, 8010d78 <uxr_deserialize_CLIENT_Representation+0xc4>
 8010d34:	2800      	cmp	r0, #0
 8010d36:	d0fa      	beq.n	8010d2e <uxr_deserialize_CLIENT_Representation+0x7a>
 8010d38:	46a0      	mov	r8, r4
 8010d3a:	f04f 0900 	mov.w	r9, #0
 8010d3e:	e001      	b.n	8010d44 <uxr_deserialize_CLIENT_Representation+0x90>
 8010d40:	2e00      	cmp	r6, #0
 8010d42:	d0f4      	beq.n	8010d2e <uxr_deserialize_CLIENT_Representation+0x7a>
 8010d44:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8010d48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010d4c:	4628      	mov	r0, r5
 8010d4e:	f005 f823 	bl	8015d98 <ucdr_deserialize_string>
 8010d52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010d56:	4606      	mov	r6, r0
 8010d58:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8010d5c:	4628      	mov	r0, r5
 8010d5e:	f005 f81b 	bl	8015d98 <ucdr_deserialize_string>
 8010d62:	6923      	ldr	r3, [r4, #16]
 8010d64:	f109 0901 	add.w	r9, r9, #1
 8010d68:	4006      	ands	r6, r0
 8010d6a:	4599      	cmp	r9, r3
 8010d6c:	f108 0808 	add.w	r8, r8, #8
 8010d70:	b2f6      	uxtb	r6, r6
 8010d72:	d3e5      	bcc.n	8010d40 <uxr_deserialize_CLIENT_Representation+0x8c>
 8010d74:	4037      	ands	r7, r6
 8010d76:	e7c8      	b.n	8010d0a <uxr_deserialize_CLIENT_Representation+0x56>
 8010d78:	4007      	ands	r7, r0
 8010d7a:	e7c6      	b.n	8010d0a <uxr_deserialize_CLIENT_Representation+0x56>

08010d7c <uxr_serialize_AGENT_Representation>:
 8010d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d80:	2204      	movs	r2, #4
 8010d82:	460f      	mov	r7, r1
 8010d84:	4605      	mov	r5, r0
 8010d86:	f004 fed7 	bl	8015b38 <ucdr_serialize_array_uint8_t>
 8010d8a:	2202      	movs	r2, #2
 8010d8c:	4604      	mov	r4, r0
 8010d8e:	1d39      	adds	r1, r7, #4
 8010d90:	4628      	mov	r0, r5
 8010d92:	f004 fed1 	bl	8015b38 <ucdr_serialize_array_uint8_t>
 8010d96:	4020      	ands	r0, r4
 8010d98:	2202      	movs	r2, #2
 8010d9a:	1db9      	adds	r1, r7, #6
 8010d9c:	b2c4      	uxtb	r4, r0
 8010d9e:	4628      	mov	r0, r5
 8010da0:	f004 feca 	bl	8015b38 <ucdr_serialize_array_uint8_t>
 8010da4:	7a39      	ldrb	r1, [r7, #8]
 8010da6:	4004      	ands	r4, r0
 8010da8:	4628      	mov	r0, r5
 8010daa:	f7f9 fd57 	bl	800a85c <ucdr_serialize_bool>
 8010dae:	7a3b      	ldrb	r3, [r7, #8]
 8010db0:	ea00 0804 	and.w	r8, r0, r4
 8010db4:	b913      	cbnz	r3, 8010dbc <uxr_serialize_AGENT_Representation+0x40>
 8010db6:	4640      	mov	r0, r8
 8010db8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010dbc:	68f9      	ldr	r1, [r7, #12]
 8010dbe:	4628      	mov	r0, r5
 8010dc0:	f7f9 ff90 	bl	800ace4 <ucdr_serialize_uint32_t>
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	b303      	cbz	r3, 8010e0a <uxr_serialize_AGENT_Representation+0x8e>
 8010dc8:	b1d0      	cbz	r0, 8010e00 <uxr_serialize_AGENT_Representation+0x84>
 8010dca:	463e      	mov	r6, r7
 8010dcc:	f04f 0900 	mov.w	r9, #0
 8010dd0:	e001      	b.n	8010dd6 <uxr_serialize_AGENT_Representation+0x5a>
 8010dd2:	3608      	adds	r6, #8
 8010dd4:	b1a4      	cbz	r4, 8010e00 <uxr_serialize_AGENT_Representation+0x84>
 8010dd6:	6931      	ldr	r1, [r6, #16]
 8010dd8:	4628      	mov	r0, r5
 8010dda:	f004 ffcd 	bl	8015d78 <ucdr_serialize_string>
 8010dde:	6971      	ldr	r1, [r6, #20]
 8010de0:	4604      	mov	r4, r0
 8010de2:	4628      	mov	r0, r5
 8010de4:	f004 ffc8 	bl	8015d78 <ucdr_serialize_string>
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	f109 0901 	add.w	r9, r9, #1
 8010dee:	4004      	ands	r4, r0
 8010df0:	4599      	cmp	r9, r3
 8010df2:	b2e4      	uxtb	r4, r4
 8010df4:	d3ed      	bcc.n	8010dd2 <uxr_serialize_AGENT_Representation+0x56>
 8010df6:	ea08 0804 	and.w	r8, r8, r4
 8010dfa:	4640      	mov	r0, r8
 8010dfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e00:	f04f 0800 	mov.w	r8, #0
 8010e04:	4640      	mov	r0, r8
 8010e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e0a:	ea08 0800 	and.w	r8, r8, r0
 8010e0e:	e7d2      	b.n	8010db6 <uxr_serialize_AGENT_Representation+0x3a>

08010e10 <uxr_serialize_DATAWRITER_Representation>:
 8010e10:	b570      	push	{r4, r5, r6, lr}
 8010e12:	460d      	mov	r5, r1
 8010e14:	7809      	ldrb	r1, [r1, #0]
 8010e16:	4606      	mov	r6, r0
 8010e18:	f7f9 fd4e 	bl	800a8b8 <ucdr_serialize_uint8_t>
 8010e1c:	4604      	mov	r4, r0
 8010e1e:	b130      	cbz	r0, 8010e2e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010e20:	782b      	ldrb	r3, [r5, #0]
 8010e22:	2b02      	cmp	r3, #2
 8010e24:	d00c      	beq.n	8010e40 <uxr_serialize_DATAWRITER_Representation+0x30>
 8010e26:	2b03      	cmp	r3, #3
 8010e28:	d010      	beq.n	8010e4c <uxr_serialize_DATAWRITER_Representation+0x3c>
 8010e2a:	2b01      	cmp	r3, #1
 8010e2c:	d008      	beq.n	8010e40 <uxr_serialize_DATAWRITER_Representation+0x30>
 8010e2e:	2202      	movs	r2, #2
 8010e30:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8010e34:	4630      	mov	r0, r6
 8010e36:	f004 fe7f 	bl	8015b38 <ucdr_serialize_array_uint8_t>
 8010e3a:	4020      	ands	r0, r4
 8010e3c:	b2c0      	uxtb	r0, r0
 8010e3e:	bd70      	pop	{r4, r5, r6, pc}
 8010e40:	6869      	ldr	r1, [r5, #4]
 8010e42:	4630      	mov	r0, r6
 8010e44:	f004 ff98 	bl	8015d78 <ucdr_serialize_string>
 8010e48:	4604      	mov	r4, r0
 8010e4a:	e7f0      	b.n	8010e2e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010e4c:	4629      	mov	r1, r5
 8010e4e:	4630      	mov	r0, r6
 8010e50:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8010e54:	3104      	adds	r1, #4
 8010e56:	f004 ff63 	bl	8015d20 <ucdr_serialize_sequence_uint8_t>
 8010e5a:	4604      	mov	r4, r0
 8010e5c:	e7e7      	b.n	8010e2e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010e5e:	bf00      	nop

08010e60 <uxr_serialize_ObjectVariant.part.0>:
 8010e60:	b570      	push	{r4, r5, r6, lr}
 8010e62:	780b      	ldrb	r3, [r1, #0]
 8010e64:	3b01      	subs	r3, #1
 8010e66:	460c      	mov	r4, r1
 8010e68:	4605      	mov	r5, r0
 8010e6a:	2b0d      	cmp	r3, #13
 8010e6c:	d854      	bhi.n	8010f18 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8010e6e:	e8df f003 	tbb	[pc, r3]
 8010e72:	0730      	.short	0x0730
 8010e74:	07071b1b 	.word	0x07071b1b
 8010e78:	0c530707 	.word	0x0c530707
 8010e7c:	494e0c0c 	.word	0x494e0c0c
 8010e80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010e84:	3104      	adds	r1, #4
 8010e86:	f7ff bfc3 	b.w	8010e10 <uxr_serialize_DATAWRITER_Representation>
 8010e8a:	7909      	ldrb	r1, [r1, #4]
 8010e8c:	f7f9 fd14 	bl	800a8b8 <ucdr_serialize_uint8_t>
 8010e90:	b1e8      	cbz	r0, 8010ece <uxr_serialize_ObjectVariant.part.0+0x6e>
 8010e92:	7923      	ldrb	r3, [r4, #4]
 8010e94:	2b01      	cmp	r3, #1
 8010e96:	d001      	beq.n	8010e9c <uxr_serialize_ObjectVariant.part.0+0x3c>
 8010e98:	2b02      	cmp	r3, #2
 8010e9a:	d13d      	bne.n	8010f18 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8010e9c:	68a1      	ldr	r1, [r4, #8]
 8010e9e:	4628      	mov	r0, r5
 8010ea0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010ea4:	f004 bf68 	b.w	8015d78 <ucdr_serialize_string>
 8010ea8:	7909      	ldrb	r1, [r1, #4]
 8010eaa:	f7f9 fd05 	bl	800a8b8 <ucdr_serialize_uint8_t>
 8010eae:	4606      	mov	r6, r0
 8010eb0:	b120      	cbz	r0, 8010ebc <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010eb2:	7923      	ldrb	r3, [r4, #4]
 8010eb4:	2b02      	cmp	r3, #2
 8010eb6:	d039      	beq.n	8010f2c <uxr_serialize_ObjectVariant.part.0+0xcc>
 8010eb8:	2b03      	cmp	r3, #3
 8010eba:	d02f      	beq.n	8010f1c <uxr_serialize_ObjectVariant.part.0+0xbc>
 8010ebc:	2202      	movs	r2, #2
 8010ebe:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8010ec2:	4628      	mov	r0, r5
 8010ec4:	f004 fe38 	bl	8015b38 <ucdr_serialize_array_uint8_t>
 8010ec8:	4030      	ands	r0, r6
 8010eca:	b2c0      	uxtb	r0, r0
 8010ecc:	bd70      	pop	{r4, r5, r6, pc}
 8010ece:	2000      	movs	r0, #0
 8010ed0:	bd70      	pop	{r4, r5, r6, pc}
 8010ed2:	7909      	ldrb	r1, [r1, #4]
 8010ed4:	f7f9 fcf0 	bl	800a8b8 <ucdr_serialize_uint8_t>
 8010ed8:	4606      	mov	r6, r0
 8010eda:	b158      	cbz	r0, 8010ef4 <uxr_serialize_ObjectVariant.part.0+0x94>
 8010edc:	7923      	ldrb	r3, [r4, #4]
 8010ede:	2b02      	cmp	r3, #2
 8010ee0:	d003      	beq.n	8010eea <uxr_serialize_ObjectVariant.part.0+0x8a>
 8010ee2:	2b03      	cmp	r3, #3
 8010ee4:	d028      	beq.n	8010f38 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8010ee6:	2b01      	cmp	r3, #1
 8010ee8:	d104      	bne.n	8010ef4 <uxr_serialize_ObjectVariant.part.0+0x94>
 8010eea:	68a1      	ldr	r1, [r4, #8]
 8010eec:	4628      	mov	r0, r5
 8010eee:	f004 ff43 	bl	8015d78 <ucdr_serialize_string>
 8010ef2:	4606      	mov	r6, r0
 8010ef4:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8010ef8:	4628      	mov	r0, r5
 8010efa:	f7fa fa19 	bl	800b330 <ucdr_serialize_int16_t>
 8010efe:	4030      	ands	r0, r6
 8010f00:	b2c0      	uxtb	r0, r0
 8010f02:	bd70      	pop	{r4, r5, r6, pc}
 8010f04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010f08:	3104      	adds	r1, #4
 8010f0a:	f7ff be7b 	b.w	8010c04 <uxr_serialize_CLIENT_Representation>
 8010f0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010f12:	3104      	adds	r1, #4
 8010f14:	f7ff bf32 	b.w	8010d7c <uxr_serialize_AGENT_Representation>
 8010f18:	2001      	movs	r0, #1
 8010f1a:	bd70      	pop	{r4, r5, r6, pc}
 8010f1c:	68a2      	ldr	r2, [r4, #8]
 8010f1e:	f104 010c 	add.w	r1, r4, #12
 8010f22:	4628      	mov	r0, r5
 8010f24:	f004 fefc 	bl	8015d20 <ucdr_serialize_sequence_uint8_t>
 8010f28:	4606      	mov	r6, r0
 8010f2a:	e7c7      	b.n	8010ebc <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010f2c:	68a1      	ldr	r1, [r4, #8]
 8010f2e:	4628      	mov	r0, r5
 8010f30:	f004 ff22 	bl	8015d78 <ucdr_serialize_string>
 8010f34:	4606      	mov	r6, r0
 8010f36:	e7c1      	b.n	8010ebc <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010f38:	68a2      	ldr	r2, [r4, #8]
 8010f3a:	f104 010c 	add.w	r1, r4, #12
 8010f3e:	4628      	mov	r0, r5
 8010f40:	f004 feee 	bl	8015d20 <ucdr_serialize_sequence_uint8_t>
 8010f44:	4606      	mov	r6, r0
 8010f46:	e7d5      	b.n	8010ef4 <uxr_serialize_ObjectVariant.part.0+0x94>

08010f48 <uxr_deserialize_DATAWRITER_Representation>:
 8010f48:	b570      	push	{r4, r5, r6, lr}
 8010f4a:	4606      	mov	r6, r0
 8010f4c:	460d      	mov	r5, r1
 8010f4e:	f7f9 fcc9 	bl	800a8e4 <ucdr_deserialize_uint8_t>
 8010f52:	4604      	mov	r4, r0
 8010f54:	b130      	cbz	r0, 8010f64 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8010f56:	782b      	ldrb	r3, [r5, #0]
 8010f58:	2b02      	cmp	r3, #2
 8010f5a:	d00c      	beq.n	8010f76 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8010f5c:	2b03      	cmp	r3, #3
 8010f5e:	d012      	beq.n	8010f86 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8010f60:	2b01      	cmp	r3, #1
 8010f62:	d008      	beq.n	8010f76 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8010f64:	2202      	movs	r2, #2
 8010f66:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8010f6a:	4630      	mov	r0, r6
 8010f6c:	f004 fe48 	bl	8015c00 <ucdr_deserialize_array_uint8_t>
 8010f70:	4020      	ands	r0, r4
 8010f72:	b2c0      	uxtb	r0, r0
 8010f74:	bd70      	pop	{r4, r5, r6, pc}
 8010f76:	6869      	ldr	r1, [r5, #4]
 8010f78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010f7c:	4630      	mov	r0, r6
 8010f7e:	f004 ff0b 	bl	8015d98 <ucdr_deserialize_string>
 8010f82:	4604      	mov	r4, r0
 8010f84:	e7ee      	b.n	8010f64 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8010f86:	1d2b      	adds	r3, r5, #4
 8010f88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010f8c:	f105 0108 	add.w	r1, r5, #8
 8010f90:	4630      	mov	r0, r6
 8010f92:	f004 fed7 	bl	8015d44 <ucdr_deserialize_sequence_uint8_t>
 8010f96:	4604      	mov	r4, r0
 8010f98:	e7e4      	b.n	8010f64 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8010f9a:	bf00      	nop

08010f9c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8010f9c:	b570      	push	{r4, r5, r6, lr}
 8010f9e:	460d      	mov	r5, r1
 8010fa0:	7809      	ldrb	r1, [r1, #0]
 8010fa2:	4606      	mov	r6, r0
 8010fa4:	f7f9 fc5a 	bl	800a85c <ucdr_serialize_bool>
 8010fa8:	782b      	ldrb	r3, [r5, #0]
 8010faa:	4604      	mov	r4, r0
 8010fac:	b94b      	cbnz	r3, 8010fc2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8010fae:	7a29      	ldrb	r1, [r5, #8]
 8010fb0:	4630      	mov	r0, r6
 8010fb2:	f7f9 fc53 	bl	800a85c <ucdr_serialize_bool>
 8010fb6:	7a2b      	ldrb	r3, [r5, #8]
 8010fb8:	4004      	ands	r4, r0
 8010fba:	b2e4      	uxtb	r4, r4
 8010fbc:	b943      	cbnz	r3, 8010fd0 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8010fbe:	4620      	mov	r0, r4
 8010fc0:	bd70      	pop	{r4, r5, r6, pc}
 8010fc2:	6869      	ldr	r1, [r5, #4]
 8010fc4:	4630      	mov	r0, r6
 8010fc6:	f004 fed7 	bl	8015d78 <ucdr_serialize_string>
 8010fca:	4004      	ands	r4, r0
 8010fcc:	b2e4      	uxtb	r4, r4
 8010fce:	e7ee      	b.n	8010fae <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8010fd0:	68e9      	ldr	r1, [r5, #12]
 8010fd2:	4630      	mov	r0, r6
 8010fd4:	f004 fed0 	bl	8015d78 <ucdr_serialize_string>
 8010fd8:	4004      	ands	r4, r0
 8010fda:	4620      	mov	r0, r4
 8010fdc:	bd70      	pop	{r4, r5, r6, pc}
 8010fde:	bf00      	nop

08010fe0 <uxr_serialize_OBJK_Topic_Binary>:
 8010fe0:	b570      	push	{r4, r5, r6, lr}
 8010fe2:	460d      	mov	r5, r1
 8010fe4:	6809      	ldr	r1, [r1, #0]
 8010fe6:	4606      	mov	r6, r0
 8010fe8:	f004 fec6 	bl	8015d78 <ucdr_serialize_string>
 8010fec:	7929      	ldrb	r1, [r5, #4]
 8010fee:	4604      	mov	r4, r0
 8010ff0:	4630      	mov	r0, r6
 8010ff2:	f7f9 fc33 	bl	800a85c <ucdr_serialize_bool>
 8010ff6:	792b      	ldrb	r3, [r5, #4]
 8010ff8:	4004      	ands	r4, r0
 8010ffa:	b2e4      	uxtb	r4, r4
 8010ffc:	b943      	cbnz	r3, 8011010 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8010ffe:	7b29      	ldrb	r1, [r5, #12]
 8011000:	4630      	mov	r0, r6
 8011002:	f7f9 fc2b 	bl	800a85c <ucdr_serialize_bool>
 8011006:	7b2b      	ldrb	r3, [r5, #12]
 8011008:	4004      	ands	r4, r0
 801100a:	b93b      	cbnz	r3, 801101c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801100c:	4620      	mov	r0, r4
 801100e:	bd70      	pop	{r4, r5, r6, pc}
 8011010:	68a9      	ldr	r1, [r5, #8]
 8011012:	4630      	mov	r0, r6
 8011014:	f004 feb0 	bl	8015d78 <ucdr_serialize_string>
 8011018:	4004      	ands	r4, r0
 801101a:	e7f0      	b.n	8010ffe <uxr_serialize_OBJK_Topic_Binary+0x1e>
 801101c:	6929      	ldr	r1, [r5, #16]
 801101e:	4630      	mov	r0, r6
 8011020:	f004 feaa 	bl	8015d78 <ucdr_serialize_string>
 8011024:	4004      	ands	r4, r0
 8011026:	b2e4      	uxtb	r4, r4
 8011028:	4620      	mov	r0, r4
 801102a:	bd70      	pop	{r4, r5, r6, pc}

0801102c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 801102c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011030:	460c      	mov	r4, r1
 8011032:	7809      	ldrb	r1, [r1, #0]
 8011034:	4606      	mov	r6, r0
 8011036:	f7f9 fc11 	bl	800a85c <ucdr_serialize_bool>
 801103a:	7823      	ldrb	r3, [r4, #0]
 801103c:	4605      	mov	r5, r0
 801103e:	b96b      	cbnz	r3, 801105c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8011040:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8011044:	4630      	mov	r0, r6
 8011046:	f7f9 fc09 	bl	800a85c <ucdr_serialize_bool>
 801104a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801104e:	4005      	ands	r5, r0
 8011050:	b2ed      	uxtb	r5, r5
 8011052:	2b00      	cmp	r3, #0
 8011054:	d169      	bne.n	801112a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8011056:	4628      	mov	r0, r5
 8011058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801105c:	6861      	ldr	r1, [r4, #4]
 801105e:	4630      	mov	r0, r6
 8011060:	f7f9 fe40 	bl	800ace4 <ucdr_serialize_uint32_t>
 8011064:	6863      	ldr	r3, [r4, #4]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d06b      	beq.n	8011142 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801106a:	2800      	cmp	r0, #0
 801106c:	d067      	beq.n	801113e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801106e:	68a1      	ldr	r1, [r4, #8]
 8011070:	4630      	mov	r0, r6
 8011072:	f004 fe81 	bl	8015d78 <ucdr_serialize_string>
 8011076:	6863      	ldr	r3, [r4, #4]
 8011078:	2b01      	cmp	r3, #1
 801107a:	d953      	bls.n	8011124 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801107c:	2800      	cmp	r0, #0
 801107e:	d05e      	beq.n	801113e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011080:	68e1      	ldr	r1, [r4, #12]
 8011082:	4630      	mov	r0, r6
 8011084:	f004 fe78 	bl	8015d78 <ucdr_serialize_string>
 8011088:	6863      	ldr	r3, [r4, #4]
 801108a:	2b02      	cmp	r3, #2
 801108c:	d94a      	bls.n	8011124 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801108e:	2800      	cmp	r0, #0
 8011090:	d055      	beq.n	801113e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011092:	6921      	ldr	r1, [r4, #16]
 8011094:	4630      	mov	r0, r6
 8011096:	f004 fe6f 	bl	8015d78 <ucdr_serialize_string>
 801109a:	6863      	ldr	r3, [r4, #4]
 801109c:	2b03      	cmp	r3, #3
 801109e:	d941      	bls.n	8011124 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80110a0:	2800      	cmp	r0, #0
 80110a2:	d04c      	beq.n	801113e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80110a4:	6961      	ldr	r1, [r4, #20]
 80110a6:	4630      	mov	r0, r6
 80110a8:	f004 fe66 	bl	8015d78 <ucdr_serialize_string>
 80110ac:	6863      	ldr	r3, [r4, #4]
 80110ae:	2b04      	cmp	r3, #4
 80110b0:	d938      	bls.n	8011124 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80110b2:	2800      	cmp	r0, #0
 80110b4:	d043      	beq.n	801113e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80110b6:	69a1      	ldr	r1, [r4, #24]
 80110b8:	4630      	mov	r0, r6
 80110ba:	f004 fe5d 	bl	8015d78 <ucdr_serialize_string>
 80110be:	6863      	ldr	r3, [r4, #4]
 80110c0:	2b05      	cmp	r3, #5
 80110c2:	d92f      	bls.n	8011124 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80110c4:	2800      	cmp	r0, #0
 80110c6:	d03a      	beq.n	801113e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80110c8:	69e1      	ldr	r1, [r4, #28]
 80110ca:	4630      	mov	r0, r6
 80110cc:	f004 fe54 	bl	8015d78 <ucdr_serialize_string>
 80110d0:	6863      	ldr	r3, [r4, #4]
 80110d2:	2b06      	cmp	r3, #6
 80110d4:	d926      	bls.n	8011124 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80110d6:	b390      	cbz	r0, 801113e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80110d8:	6a21      	ldr	r1, [r4, #32]
 80110da:	4630      	mov	r0, r6
 80110dc:	f004 fe4c 	bl	8015d78 <ucdr_serialize_string>
 80110e0:	6863      	ldr	r3, [r4, #4]
 80110e2:	2b07      	cmp	r3, #7
 80110e4:	d91e      	bls.n	8011124 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80110e6:	b350      	cbz	r0, 801113e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80110e8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80110ea:	4630      	mov	r0, r6
 80110ec:	f004 fe44 	bl	8015d78 <ucdr_serialize_string>
 80110f0:	6863      	ldr	r3, [r4, #4]
 80110f2:	2b08      	cmp	r3, #8
 80110f4:	d916      	bls.n	8011124 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80110f6:	b310      	cbz	r0, 801113e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80110f8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80110fa:	4630      	mov	r0, r6
 80110fc:	f004 fe3c 	bl	8015d78 <ucdr_serialize_string>
 8011100:	6863      	ldr	r3, [r4, #4]
 8011102:	2b09      	cmp	r3, #9
 8011104:	d90e      	bls.n	8011124 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011106:	b1d0      	cbz	r0, 801113e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011108:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 801110c:	2709      	movs	r7, #9
 801110e:	e000      	b.n	8011112 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8011110:	b1a8      	cbz	r0, 801113e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011112:	f858 1b04 	ldr.w	r1, [r8], #4
 8011116:	4630      	mov	r0, r6
 8011118:	f004 fe2e 	bl	8015d78 <ucdr_serialize_string>
 801111c:	6862      	ldr	r2, [r4, #4]
 801111e:	3701      	adds	r7, #1
 8011120:	4297      	cmp	r7, r2
 8011122:	d3f5      	bcc.n	8011110 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8011124:	4005      	ands	r5, r0
 8011126:	b2ed      	uxtb	r5, r5
 8011128:	e78a      	b.n	8011040 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801112a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801112c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8011130:	4630      	mov	r0, r6
 8011132:	f004 fdf5 	bl	8015d20 <ucdr_serialize_sequence_uint8_t>
 8011136:	4005      	ands	r5, r0
 8011138:	4628      	mov	r0, r5
 801113a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801113e:	2500      	movs	r5, #0
 8011140:	e77e      	b.n	8011040 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8011142:	4028      	ands	r0, r5
 8011144:	b2c5      	uxtb	r5, r0
 8011146:	e77b      	b.n	8011040 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08011148 <uxr_serialize_OBJK_Publisher_Binary>:
 8011148:	b570      	push	{r4, r5, r6, lr}
 801114a:	460d      	mov	r5, r1
 801114c:	7809      	ldrb	r1, [r1, #0]
 801114e:	4606      	mov	r6, r0
 8011150:	f7f9 fb84 	bl	800a85c <ucdr_serialize_bool>
 8011154:	782b      	ldrb	r3, [r5, #0]
 8011156:	4604      	mov	r4, r0
 8011158:	b94b      	cbnz	r3, 801116e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801115a:	7a29      	ldrb	r1, [r5, #8]
 801115c:	4630      	mov	r0, r6
 801115e:	f7f9 fb7d 	bl	800a85c <ucdr_serialize_bool>
 8011162:	7a2b      	ldrb	r3, [r5, #8]
 8011164:	4004      	ands	r4, r0
 8011166:	b2e4      	uxtb	r4, r4
 8011168:	b943      	cbnz	r3, 801117c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801116a:	4620      	mov	r0, r4
 801116c:	bd70      	pop	{r4, r5, r6, pc}
 801116e:	6869      	ldr	r1, [r5, #4]
 8011170:	4630      	mov	r0, r6
 8011172:	f004 fe01 	bl	8015d78 <ucdr_serialize_string>
 8011176:	4004      	ands	r4, r0
 8011178:	b2e4      	uxtb	r4, r4
 801117a:	e7ee      	b.n	801115a <uxr_serialize_OBJK_Publisher_Binary+0x12>
 801117c:	f105 010c 	add.w	r1, r5, #12
 8011180:	4630      	mov	r0, r6
 8011182:	f7ff ff53 	bl	801102c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8011186:	4004      	ands	r4, r0
 8011188:	4620      	mov	r0, r4
 801118a:	bd70      	pop	{r4, r5, r6, pc}

0801118c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801118c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8011190:	4688      	mov	r8, r1
 8011192:	8809      	ldrh	r1, [r1, #0]
 8011194:	4681      	mov	r9, r0
 8011196:	f7f9 fbbb 	bl	800a910 <ucdr_serialize_uint16_t>
 801119a:	f898 1002 	ldrb.w	r1, [r8, #2]
 801119e:	4606      	mov	r6, r0
 80111a0:	4648      	mov	r0, r9
 80111a2:	f7f9 fb5b 	bl	800a85c <ucdr_serialize_bool>
 80111a6:	f898 3002 	ldrb.w	r3, [r8, #2]
 80111aa:	4006      	ands	r6, r0
 80111ac:	b2f5      	uxtb	r5, r6
 80111ae:	b9eb      	cbnz	r3, 80111ec <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 80111b0:	f898 1006 	ldrb.w	r1, [r8, #6]
 80111b4:	4648      	mov	r0, r9
 80111b6:	f7f9 fb51 	bl	800a85c <ucdr_serialize_bool>
 80111ba:	f898 3006 	ldrb.w	r3, [r8, #6]
 80111be:	4005      	ands	r5, r0
 80111c0:	bb7b      	cbnz	r3, 8011222 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80111c2:	f898 100c 	ldrb.w	r1, [r8, #12]
 80111c6:	4648      	mov	r0, r9
 80111c8:	f7f9 fb48 	bl	800a85c <ucdr_serialize_bool>
 80111cc:	f898 300c 	ldrb.w	r3, [r8, #12]
 80111d0:	4005      	ands	r5, r0
 80111d2:	b9f3      	cbnz	r3, 8011212 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80111d4:	f898 1014 	ldrb.w	r1, [r8, #20]
 80111d8:	4648      	mov	r0, r9
 80111da:	f7f9 fb3f 	bl	800a85c <ucdr_serialize_bool>
 80111de:	f898 3014 	ldrb.w	r3, [r8, #20]
 80111e2:	4005      	ands	r5, r0
 80111e4:	b94b      	cbnz	r3, 80111fa <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80111e6:	4628      	mov	r0, r5
 80111e8:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80111ec:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80111f0:	4648      	mov	r0, r9
 80111f2:	f7f9 fb8d 	bl	800a910 <ucdr_serialize_uint16_t>
 80111f6:	4005      	ands	r5, r0
 80111f8:	e7da      	b.n	80111b0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80111fa:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80111fe:	f108 011c 	add.w	r1, r8, #28
 8011202:	4648      	mov	r0, r9
 8011204:	f004 fd8c 	bl	8015d20 <ucdr_serialize_sequence_uint8_t>
 8011208:	4028      	ands	r0, r5
 801120a:	b2c5      	uxtb	r5, r0
 801120c:	4628      	mov	r0, r5
 801120e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8011212:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011216:	4648      	mov	r0, r9
 8011218:	f7f9 fd64 	bl	800ace4 <ucdr_serialize_uint32_t>
 801121c:	4028      	ands	r0, r5
 801121e:	b2c5      	uxtb	r5, r0
 8011220:	e7d8      	b.n	80111d4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8011222:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8011226:	4648      	mov	r0, r9
 8011228:	f7f9 fd5c 	bl	800ace4 <ucdr_serialize_uint32_t>
 801122c:	4028      	ands	r0, r5
 801122e:	b2c5      	uxtb	r5, r0
 8011230:	e7c7      	b.n	80111c2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8011232:	bf00      	nop

08011234 <uxr_serialize_OBJK_DataWriter_Binary>:
 8011234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011236:	2202      	movs	r2, #2
 8011238:	460d      	mov	r5, r1
 801123a:	4606      	mov	r6, r0
 801123c:	f004 fc7c 	bl	8015b38 <ucdr_serialize_array_uint8_t>
 8011240:	78a9      	ldrb	r1, [r5, #2]
 8011242:	4604      	mov	r4, r0
 8011244:	4630      	mov	r0, r6
 8011246:	f7f9 fb09 	bl	800a85c <ucdr_serialize_bool>
 801124a:	78ab      	ldrb	r3, [r5, #2]
 801124c:	4004      	ands	r4, r0
 801124e:	b2e4      	uxtb	r4, r4
 8011250:	b90b      	cbnz	r3, 8011256 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8011252:	4620      	mov	r0, r4
 8011254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011256:	f105 0108 	add.w	r1, r5, #8
 801125a:	4630      	mov	r0, r6
 801125c:	f7ff ff96 	bl	801118c <uxr_serialize_OBJK_Endpoint_QosBinary>
 8011260:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8011264:	4607      	mov	r7, r0
 8011266:	4630      	mov	r0, r6
 8011268:	f7f9 faf8 	bl	800a85c <ucdr_serialize_bool>
 801126c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8011270:	4038      	ands	r0, r7
 8011272:	b2c7      	uxtb	r7, r0
 8011274:	b913      	cbnz	r3, 801127c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8011276:	403c      	ands	r4, r7
 8011278:	4620      	mov	r0, r4
 801127a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801127c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8011280:	4630      	mov	r0, r6
 8011282:	f7f9 ff85 	bl	800b190 <ucdr_serialize_uint64_t>
 8011286:	4007      	ands	r7, r0
 8011288:	e7f5      	b.n	8011276 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801128a:	bf00      	nop

0801128c <uxr_deserialize_ObjectVariant>:
 801128c:	b570      	push	{r4, r5, r6, lr}
 801128e:	4605      	mov	r5, r0
 8011290:	460e      	mov	r6, r1
 8011292:	f7f9 fb27 	bl	800a8e4 <ucdr_deserialize_uint8_t>
 8011296:	b168      	cbz	r0, 80112b4 <uxr_deserialize_ObjectVariant+0x28>
 8011298:	7833      	ldrb	r3, [r6, #0]
 801129a:	3b01      	subs	r3, #1
 801129c:	4604      	mov	r4, r0
 801129e:	2b0d      	cmp	r3, #13
 80112a0:	d809      	bhi.n	80112b6 <uxr_deserialize_ObjectVariant+0x2a>
 80112a2:	e8df f003 	tbb	[pc, r3]
 80112a6:	0a41      	.short	0x0a41
 80112a8:	0a0a2323 	.word	0x0a0a2323
 80112ac:	10080a0a 	.word	0x10080a0a
 80112b0:	565c1010 	.word	0x565c1010
 80112b4:	2400      	movs	r4, #0
 80112b6:	4620      	mov	r0, r4
 80112b8:	bd70      	pop	{r4, r5, r6, pc}
 80112ba:	1d31      	adds	r1, r6, #4
 80112bc:	4628      	mov	r0, r5
 80112be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80112c2:	f7ff be41 	b.w	8010f48 <uxr_deserialize_DATAWRITER_Representation>
 80112c6:	1d31      	adds	r1, r6, #4
 80112c8:	4628      	mov	r0, r5
 80112ca:	f7f9 fb0b 	bl	800a8e4 <ucdr_deserialize_uint8_t>
 80112ce:	2800      	cmp	r0, #0
 80112d0:	d0f0      	beq.n	80112b4 <uxr_deserialize_ObjectVariant+0x28>
 80112d2:	7933      	ldrb	r3, [r6, #4]
 80112d4:	2b01      	cmp	r3, #1
 80112d6:	d001      	beq.n	80112dc <uxr_deserialize_ObjectVariant+0x50>
 80112d8:	2b02      	cmp	r3, #2
 80112da:	d1ec      	bne.n	80112b6 <uxr_deserialize_ObjectVariant+0x2a>
 80112dc:	68b1      	ldr	r1, [r6, #8]
 80112de:	4628      	mov	r0, r5
 80112e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80112e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80112e8:	f004 bd56 	b.w	8015d98 <ucdr_deserialize_string>
 80112ec:	1d31      	adds	r1, r6, #4
 80112ee:	4628      	mov	r0, r5
 80112f0:	f7f9 faf8 	bl	800a8e4 <ucdr_deserialize_uint8_t>
 80112f4:	4604      	mov	r4, r0
 80112f6:	b170      	cbz	r0, 8011316 <uxr_deserialize_ObjectVariant+0x8a>
 80112f8:	7933      	ldrb	r3, [r6, #4]
 80112fa:	2b02      	cmp	r3, #2
 80112fc:	d04c      	beq.n	8011398 <uxr_deserialize_ObjectVariant+0x10c>
 80112fe:	2b03      	cmp	r3, #3
 8011300:	d109      	bne.n	8011316 <uxr_deserialize_ObjectVariant+0x8a>
 8011302:	f106 0308 	add.w	r3, r6, #8
 8011306:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801130a:	f106 010c 	add.w	r1, r6, #12
 801130e:	4628      	mov	r0, r5
 8011310:	f004 fd18 	bl	8015d44 <ucdr_deserialize_sequence_uint8_t>
 8011314:	4604      	mov	r4, r0
 8011316:	2202      	movs	r2, #2
 8011318:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801131c:	4628      	mov	r0, r5
 801131e:	f004 fc6f 	bl	8015c00 <ucdr_deserialize_array_uint8_t>
 8011322:	4020      	ands	r0, r4
 8011324:	b2c4      	uxtb	r4, r0
 8011326:	e7c6      	b.n	80112b6 <uxr_deserialize_ObjectVariant+0x2a>
 8011328:	1d31      	adds	r1, r6, #4
 801132a:	4628      	mov	r0, r5
 801132c:	f7f9 fada 	bl	800a8e4 <ucdr_deserialize_uint8_t>
 8011330:	4604      	mov	r4, r0
 8011332:	b130      	cbz	r0, 8011342 <uxr_deserialize_ObjectVariant+0xb6>
 8011334:	7933      	ldrb	r3, [r6, #4]
 8011336:	2b02      	cmp	r3, #2
 8011338:	d036      	beq.n	80113a8 <uxr_deserialize_ObjectVariant+0x11c>
 801133a:	2b03      	cmp	r3, #3
 801133c:	d03c      	beq.n	80113b8 <uxr_deserialize_ObjectVariant+0x12c>
 801133e:	2b01      	cmp	r3, #1
 8011340:	d032      	beq.n	80113a8 <uxr_deserialize_ObjectVariant+0x11c>
 8011342:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8011346:	4628      	mov	r0, r5
 8011348:	f7fa f872 	bl	800b430 <ucdr_deserialize_int16_t>
 801134c:	4020      	ands	r0, r4
 801134e:	b2c4      	uxtb	r4, r0
 8011350:	e7b1      	b.n	80112b6 <uxr_deserialize_ObjectVariant+0x2a>
 8011352:	1d31      	adds	r1, r6, #4
 8011354:	4628      	mov	r0, r5
 8011356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801135a:	f7ff bcab 	b.w	8010cb4 <uxr_deserialize_CLIENT_Representation>
 801135e:	2204      	movs	r2, #4
 8011360:	18b1      	adds	r1, r6, r2
 8011362:	4628      	mov	r0, r5
 8011364:	f004 fc4c 	bl	8015c00 <ucdr_deserialize_array_uint8_t>
 8011368:	2202      	movs	r2, #2
 801136a:	f106 0108 	add.w	r1, r6, #8
 801136e:	4604      	mov	r4, r0
 8011370:	4628      	mov	r0, r5
 8011372:	f004 fc45 	bl	8015c00 <ucdr_deserialize_array_uint8_t>
 8011376:	2202      	movs	r2, #2
 8011378:	4004      	ands	r4, r0
 801137a:	f106 010a 	add.w	r1, r6, #10
 801137e:	4628      	mov	r0, r5
 8011380:	f004 fc3e 	bl	8015c00 <ucdr_deserialize_array_uint8_t>
 8011384:	b2e4      	uxtb	r4, r4
 8011386:	4603      	mov	r3, r0
 8011388:	f106 010c 	add.w	r1, r6, #12
 801138c:	4628      	mov	r0, r5
 801138e:	401c      	ands	r4, r3
 8011390:	f7f9 fa7a 	bl	800a888 <ucdr_deserialize_bool>
 8011394:	4004      	ands	r4, r0
 8011396:	e78e      	b.n	80112b6 <uxr_deserialize_ObjectVariant+0x2a>
 8011398:	68b1      	ldr	r1, [r6, #8]
 801139a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801139e:	4628      	mov	r0, r5
 80113a0:	f004 fcfa 	bl	8015d98 <ucdr_deserialize_string>
 80113a4:	4604      	mov	r4, r0
 80113a6:	e7b6      	b.n	8011316 <uxr_deserialize_ObjectVariant+0x8a>
 80113a8:	68b1      	ldr	r1, [r6, #8]
 80113aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80113ae:	4628      	mov	r0, r5
 80113b0:	f004 fcf2 	bl	8015d98 <ucdr_deserialize_string>
 80113b4:	4604      	mov	r4, r0
 80113b6:	e7c4      	b.n	8011342 <uxr_deserialize_ObjectVariant+0xb6>
 80113b8:	f106 0308 	add.w	r3, r6, #8
 80113bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80113c0:	f106 010c 	add.w	r1, r6, #12
 80113c4:	4628      	mov	r0, r5
 80113c6:	f004 fcbd 	bl	8015d44 <ucdr_deserialize_sequence_uint8_t>
 80113ca:	4604      	mov	r4, r0
 80113cc:	e7b9      	b.n	8011342 <uxr_deserialize_ObjectVariant+0xb6>
 80113ce:	bf00      	nop

080113d0 <uxr_deserialize_BaseObjectRequest>:
 80113d0:	b570      	push	{r4, r5, r6, lr}
 80113d2:	2202      	movs	r2, #2
 80113d4:	4605      	mov	r5, r0
 80113d6:	460e      	mov	r6, r1
 80113d8:	f004 fc12 	bl	8015c00 <ucdr_deserialize_array_uint8_t>
 80113dc:	2202      	movs	r2, #2
 80113de:	4604      	mov	r4, r0
 80113e0:	18b1      	adds	r1, r6, r2
 80113e2:	4628      	mov	r0, r5
 80113e4:	f004 fc0c 	bl	8015c00 <ucdr_deserialize_array_uint8_t>
 80113e8:	4020      	ands	r0, r4
 80113ea:	b2c0      	uxtb	r0, r0
 80113ec:	bd70      	pop	{r4, r5, r6, pc}
 80113ee:	bf00      	nop

080113f0 <uxr_serialize_ActivityInfoVariant>:
 80113f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113f4:	460d      	mov	r5, r1
 80113f6:	7809      	ldrb	r1, [r1, #0]
 80113f8:	4607      	mov	r7, r0
 80113fa:	f7f9 fa5d 	bl	800a8b8 <ucdr_serialize_uint8_t>
 80113fe:	4681      	mov	r9, r0
 8011400:	b138      	cbz	r0, 8011412 <uxr_serialize_ActivityInfoVariant+0x22>
 8011402:	782b      	ldrb	r3, [r5, #0]
 8011404:	2b06      	cmp	r3, #6
 8011406:	f000 8082 	beq.w	801150e <uxr_serialize_ActivityInfoVariant+0x11e>
 801140a:	2b0d      	cmp	r3, #13
 801140c:	d016      	beq.n	801143c <uxr_serialize_ActivityInfoVariant+0x4c>
 801140e:	2b05      	cmp	r3, #5
 8011410:	d002      	beq.n	8011418 <uxr_serialize_ActivityInfoVariant+0x28>
 8011412:	4648      	mov	r0, r9
 8011414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011418:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801141c:	4638      	mov	r0, r7
 801141e:	f7f9 ff87 	bl	800b330 <ucdr_serialize_int16_t>
 8011422:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8011426:	4681      	mov	r9, r0
 8011428:	4638      	mov	r0, r7
 801142a:	f7f9 feb1 	bl	800b190 <ucdr_serialize_uint64_t>
 801142e:	ea09 0000 	and.w	r0, r9, r0
 8011432:	fa5f f980 	uxtb.w	r9, r0
 8011436:	4648      	mov	r0, r9
 8011438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801143c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011440:	4638      	mov	r0, r7
 8011442:	f7f9 ff75 	bl	800b330 <ucdr_serialize_int16_t>
 8011446:	68e9      	ldr	r1, [r5, #12]
 8011448:	4681      	mov	r9, r0
 801144a:	4638      	mov	r0, r7
 801144c:	f7f9 fc4a 	bl	800ace4 <ucdr_serialize_uint32_t>
 8011450:	68eb      	ldr	r3, [r5, #12]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d0eb      	beq.n	801142e <uxr_serialize_ActivityInfoVariant+0x3e>
 8011456:	b320      	cbz	r0, 80114a2 <uxr_serialize_ActivityInfoVariant+0xb2>
 8011458:	f105 080c 	add.w	r8, r5, #12
 801145c:	2600      	movs	r6, #0
 801145e:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8011462:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8011466:	f89a 1010 	ldrb.w	r1, [sl, #16]
 801146a:	4638      	mov	r0, r7
 801146c:	f7f9 fa24 	bl	800a8b8 <ucdr_serialize_uint8_t>
 8011470:	2800      	cmp	r0, #0
 8011472:	d053      	beq.n	801151c <uxr_serialize_ActivityInfoVariant+0x12c>
 8011474:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8011478:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801147c:	0074      	lsls	r4, r6, #1
 801147e:	00c9      	lsls	r1, r1, #3
 8011480:	2b03      	cmp	r3, #3
 8011482:	d854      	bhi.n	801152e <uxr_serialize_ActivityInfoVariant+0x13e>
 8011484:	e8df f003 	tbb	[pc, r3]
 8011488:	02102132 	.word	0x02102132
 801148c:	4441      	add	r1, r8
 801148e:	4638      	mov	r0, r7
 8011490:	6889      	ldr	r1, [r1, #8]
 8011492:	f004 fc71 	bl	8015d78 <ucdr_serialize_string>
 8011496:	68ea      	ldr	r2, [r5, #12]
 8011498:	3601      	adds	r6, #1
 801149a:	4296      	cmp	r6, r2
 801149c:	d242      	bcs.n	8011524 <uxr_serialize_ActivityInfoVariant+0x134>
 801149e:	2800      	cmp	r0, #0
 80114a0:	d1dd      	bne.n	801145e <uxr_serialize_ActivityInfoVariant+0x6e>
 80114a2:	f04f 0900 	mov.w	r9, #0
 80114a6:	e7b4      	b.n	8011412 <uxr_serialize_ActivityInfoVariant+0x22>
 80114a8:	3108      	adds	r1, #8
 80114aa:	4441      	add	r1, r8
 80114ac:	2210      	movs	r2, #16
 80114ae:	4638      	mov	r0, r7
 80114b0:	f004 fb42 	bl	8015b38 <ucdr_serialize_array_uint8_t>
 80114b4:	4434      	add	r4, r6
 80114b6:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80114ba:	4604      	mov	r4, r0
 80114bc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80114be:	4638      	mov	r0, r7
 80114c0:	f7f9 fc10 	bl	800ace4 <ucdr_serialize_uint32_t>
 80114c4:	4020      	ands	r0, r4
 80114c6:	b2c0      	uxtb	r0, r0
 80114c8:	e7e5      	b.n	8011496 <uxr_serialize_ActivityInfoVariant+0xa6>
 80114ca:	3108      	adds	r1, #8
 80114cc:	4441      	add	r1, r8
 80114ce:	2204      	movs	r2, #4
 80114d0:	4638      	mov	r0, r7
 80114d2:	f004 fb31 	bl	8015b38 <ucdr_serialize_array_uint8_t>
 80114d6:	4434      	add	r4, r6
 80114d8:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80114dc:	4604      	mov	r4, r0
 80114de:	8b19      	ldrh	r1, [r3, #24]
 80114e0:	4638      	mov	r0, r7
 80114e2:	f7f9 fa15 	bl	800a910 <ucdr_serialize_uint16_t>
 80114e6:	4020      	ands	r0, r4
 80114e8:	b2c0      	uxtb	r0, r0
 80114ea:	e7d4      	b.n	8011496 <uxr_serialize_ActivityInfoVariant+0xa6>
 80114ec:	3108      	adds	r1, #8
 80114ee:	4441      	add	r1, r8
 80114f0:	2202      	movs	r2, #2
 80114f2:	4638      	mov	r0, r7
 80114f4:	f004 fb20 	bl	8015b38 <ucdr_serialize_array_uint8_t>
 80114f8:	4434      	add	r4, r6
 80114fa:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80114fe:	4604      	mov	r4, r0
 8011500:	7d99      	ldrb	r1, [r3, #22]
 8011502:	4638      	mov	r0, r7
 8011504:	f7f9 f9d8 	bl	800a8b8 <ucdr_serialize_uint8_t>
 8011508:	4020      	ands	r0, r4
 801150a:	b2c0      	uxtb	r0, r0
 801150c:	e7c3      	b.n	8011496 <uxr_serialize_ActivityInfoVariant+0xa6>
 801150e:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011512:	4638      	mov	r0, r7
 8011514:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011518:	f7f9 bf0a 	b.w	800b330 <ucdr_serialize_int16_t>
 801151c:	68ea      	ldr	r2, [r5, #12]
 801151e:	3601      	adds	r6, #1
 8011520:	42b2      	cmp	r2, r6
 8011522:	d8be      	bhi.n	80114a2 <uxr_serialize_ActivityInfoVariant+0xb2>
 8011524:	ea09 0900 	and.w	r9, r9, r0
 8011528:	fa5f f989 	uxtb.w	r9, r9
 801152c:	e771      	b.n	8011412 <uxr_serialize_ActivityInfoVariant+0x22>
 801152e:	68eb      	ldr	r3, [r5, #12]
 8011530:	3601      	adds	r6, #1
 8011532:	429e      	cmp	r6, r3
 8011534:	f10a 0a18 	add.w	sl, sl, #24
 8011538:	d395      	bcc.n	8011466 <uxr_serialize_ActivityInfoVariant+0x76>
 801153a:	e76a      	b.n	8011412 <uxr_serialize_ActivityInfoVariant+0x22>

0801153c <uxr_deserialize_BaseObjectReply>:
 801153c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011540:	2202      	movs	r2, #2
 8011542:	4606      	mov	r6, r0
 8011544:	460f      	mov	r7, r1
 8011546:	f004 fb5b 	bl	8015c00 <ucdr_deserialize_array_uint8_t>
 801154a:	2202      	movs	r2, #2
 801154c:	18b9      	adds	r1, r7, r2
 801154e:	4605      	mov	r5, r0
 8011550:	4630      	mov	r0, r6
 8011552:	f004 fb55 	bl	8015c00 <ucdr_deserialize_array_uint8_t>
 8011556:	1d39      	adds	r1, r7, #4
 8011558:	4680      	mov	r8, r0
 801155a:	4630      	mov	r0, r6
 801155c:	f7f9 f9c2 	bl	800a8e4 <ucdr_deserialize_uint8_t>
 8011560:	1d79      	adds	r1, r7, #5
 8011562:	4604      	mov	r4, r0
 8011564:	4630      	mov	r0, r6
 8011566:	f7f9 f9bd 	bl	800a8e4 <ucdr_deserialize_uint8_t>
 801156a:	ea05 0508 	and.w	r5, r5, r8
 801156e:	402c      	ands	r4, r5
 8011570:	4020      	ands	r0, r4
 8011572:	b2c0      	uxtb	r0, r0
 8011574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011578 <uxr_serialize_ReadSpecification>:
 8011578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801157c:	460e      	mov	r6, r1
 801157e:	7809      	ldrb	r1, [r1, #0]
 8011580:	4607      	mov	r7, r0
 8011582:	f7f9 f999 	bl	800a8b8 <ucdr_serialize_uint8_t>
 8011586:	7871      	ldrb	r1, [r6, #1]
 8011588:	4604      	mov	r4, r0
 801158a:	4638      	mov	r0, r7
 801158c:	f7f9 f994 	bl	800a8b8 <ucdr_serialize_uint8_t>
 8011590:	78b1      	ldrb	r1, [r6, #2]
 8011592:	4004      	ands	r4, r0
 8011594:	4638      	mov	r0, r7
 8011596:	f7f9 f961 	bl	800a85c <ucdr_serialize_bool>
 801159a:	78b3      	ldrb	r3, [r6, #2]
 801159c:	b2e4      	uxtb	r4, r4
 801159e:	4004      	ands	r4, r0
 80115a0:	b94b      	cbnz	r3, 80115b6 <uxr_serialize_ReadSpecification+0x3e>
 80115a2:	7a31      	ldrb	r1, [r6, #8]
 80115a4:	4638      	mov	r0, r7
 80115a6:	f7f9 f959 	bl	800a85c <ucdr_serialize_bool>
 80115aa:	7a33      	ldrb	r3, [r6, #8]
 80115ac:	4004      	ands	r4, r0
 80115ae:	b943      	cbnz	r3, 80115c2 <uxr_serialize_ReadSpecification+0x4a>
 80115b0:	4620      	mov	r0, r4
 80115b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115b6:	6871      	ldr	r1, [r6, #4]
 80115b8:	4638      	mov	r0, r7
 80115ba:	f004 fbdd 	bl	8015d78 <ucdr_serialize_string>
 80115be:	4004      	ands	r4, r0
 80115c0:	e7ef      	b.n	80115a2 <uxr_serialize_ReadSpecification+0x2a>
 80115c2:	8971      	ldrh	r1, [r6, #10]
 80115c4:	4638      	mov	r0, r7
 80115c6:	f7f9 f9a3 	bl	800a910 <ucdr_serialize_uint16_t>
 80115ca:	89b1      	ldrh	r1, [r6, #12]
 80115cc:	4605      	mov	r5, r0
 80115ce:	4638      	mov	r0, r7
 80115d0:	f7f9 f99e 	bl	800a910 <ucdr_serialize_uint16_t>
 80115d4:	89f1      	ldrh	r1, [r6, #14]
 80115d6:	4005      	ands	r5, r0
 80115d8:	4638      	mov	r0, r7
 80115da:	f7f9 f999 	bl	800a910 <ucdr_serialize_uint16_t>
 80115de:	8a31      	ldrh	r1, [r6, #16]
 80115e0:	4680      	mov	r8, r0
 80115e2:	4638      	mov	r0, r7
 80115e4:	f7f9 f994 	bl	800a910 <ucdr_serialize_uint16_t>
 80115e8:	b2ed      	uxtb	r5, r5
 80115ea:	4025      	ands	r5, r4
 80115ec:	ea08 0505 	and.w	r5, r8, r5
 80115f0:	ea00 0405 	and.w	r4, r0, r5
 80115f4:	4620      	mov	r0, r4
 80115f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115fa:	bf00      	nop

080115fc <uxr_serialize_CREATE_CLIENT_Payload>:
 80115fc:	f7ff bb02 	b.w	8010c04 <uxr_serialize_CLIENT_Representation>

08011600 <uxr_serialize_CREATE_Payload>:
 8011600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011602:	2202      	movs	r2, #2
 8011604:	4607      	mov	r7, r0
 8011606:	460e      	mov	r6, r1
 8011608:	f004 fa96 	bl	8015b38 <ucdr_serialize_array_uint8_t>
 801160c:	2202      	movs	r2, #2
 801160e:	18b1      	adds	r1, r6, r2
 8011610:	4605      	mov	r5, r0
 8011612:	4638      	mov	r0, r7
 8011614:	f004 fa90 	bl	8015b38 <ucdr_serialize_array_uint8_t>
 8011618:	7931      	ldrb	r1, [r6, #4]
 801161a:	4604      	mov	r4, r0
 801161c:	4638      	mov	r0, r7
 801161e:	f7f9 f94b 	bl	800a8b8 <ucdr_serialize_uint8_t>
 8011622:	b170      	cbz	r0, 8011642 <uxr_serialize_CREATE_Payload+0x42>
 8011624:	7933      	ldrb	r3, [r6, #4]
 8011626:	402c      	ands	r4, r5
 8011628:	3b01      	subs	r3, #1
 801162a:	b2e4      	uxtb	r4, r4
 801162c:	2b0d      	cmp	r3, #13
 801162e:	d809      	bhi.n	8011644 <uxr_serialize_CREATE_Payload+0x44>
 8011630:	e8df f003 	tbb	[pc, r3]
 8011634:	23230a4c 	.word	0x23230a4c
 8011638:	0a0a0a0a 	.word	0x0a0a0a0a
 801163c:	12121208 	.word	0x12121208
 8011640:	3e45      	.short	0x3e45
 8011642:	2400      	movs	r4, #0
 8011644:	4620      	mov	r0, r4
 8011646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011648:	f106 0108 	add.w	r1, r6, #8
 801164c:	4638      	mov	r0, r7
 801164e:	f7ff fbdf 	bl	8010e10 <uxr_serialize_DATAWRITER_Representation>
 8011652:	4004      	ands	r4, r0
 8011654:	4620      	mov	r0, r4
 8011656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011658:	7a31      	ldrb	r1, [r6, #8]
 801165a:	4638      	mov	r0, r7
 801165c:	f7f9 f92c 	bl	800a8b8 <ucdr_serialize_uint8_t>
 8011660:	2800      	cmp	r0, #0
 8011662:	d0ee      	beq.n	8011642 <uxr_serialize_CREATE_Payload+0x42>
 8011664:	7a33      	ldrb	r3, [r6, #8]
 8011666:	2b01      	cmp	r3, #1
 8011668:	d001      	beq.n	801166e <uxr_serialize_CREATE_Payload+0x6e>
 801166a:	2b02      	cmp	r3, #2
 801166c:	d1ea      	bne.n	8011644 <uxr_serialize_CREATE_Payload+0x44>
 801166e:	68f1      	ldr	r1, [r6, #12]
 8011670:	4638      	mov	r0, r7
 8011672:	f004 fb81 	bl	8015d78 <ucdr_serialize_string>
 8011676:	4004      	ands	r4, r0
 8011678:	e7e4      	b.n	8011644 <uxr_serialize_CREATE_Payload+0x44>
 801167a:	7a31      	ldrb	r1, [r6, #8]
 801167c:	4638      	mov	r0, r7
 801167e:	f7f9 f91b 	bl	800a8b8 <ucdr_serialize_uint8_t>
 8011682:	4605      	mov	r5, r0
 8011684:	b158      	cbz	r0, 801169e <uxr_serialize_CREATE_Payload+0x9e>
 8011686:	7a33      	ldrb	r3, [r6, #8]
 8011688:	2b02      	cmp	r3, #2
 801168a:	d034      	beq.n	80116f6 <uxr_serialize_CREATE_Payload+0xf6>
 801168c:	2b03      	cmp	r3, #3
 801168e:	d106      	bne.n	801169e <uxr_serialize_CREATE_Payload+0x9e>
 8011690:	68f2      	ldr	r2, [r6, #12]
 8011692:	f106 0110 	add.w	r1, r6, #16
 8011696:	4638      	mov	r0, r7
 8011698:	f004 fb42 	bl	8015d20 <ucdr_serialize_sequence_uint8_t>
 801169c:	4605      	mov	r5, r0
 801169e:	2202      	movs	r2, #2
 80116a0:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 80116a4:	4638      	mov	r0, r7
 80116a6:	f004 fa47 	bl	8015b38 <ucdr_serialize_array_uint8_t>
 80116aa:	4028      	ands	r0, r5
 80116ac:	4004      	ands	r4, r0
 80116ae:	e7c9      	b.n	8011644 <uxr_serialize_CREATE_Payload+0x44>
 80116b0:	f106 0108 	add.w	r1, r6, #8
 80116b4:	4638      	mov	r0, r7
 80116b6:	f7ff faa5 	bl	8010c04 <uxr_serialize_CLIENT_Representation>
 80116ba:	4004      	ands	r4, r0
 80116bc:	e7c2      	b.n	8011644 <uxr_serialize_CREATE_Payload+0x44>
 80116be:	f106 0108 	add.w	r1, r6, #8
 80116c2:	4638      	mov	r0, r7
 80116c4:	f7ff fb5a 	bl	8010d7c <uxr_serialize_AGENT_Representation>
 80116c8:	4004      	ands	r4, r0
 80116ca:	e7bb      	b.n	8011644 <uxr_serialize_CREATE_Payload+0x44>
 80116cc:	7a31      	ldrb	r1, [r6, #8]
 80116ce:	4638      	mov	r0, r7
 80116d0:	f7f9 f8f2 	bl	800a8b8 <ucdr_serialize_uint8_t>
 80116d4:	4605      	mov	r5, r0
 80116d6:	b130      	cbz	r0, 80116e6 <uxr_serialize_CREATE_Payload+0xe6>
 80116d8:	7a33      	ldrb	r3, [r6, #8]
 80116da:	2b02      	cmp	r3, #2
 80116dc:	d011      	beq.n	8011702 <uxr_serialize_CREATE_Payload+0x102>
 80116de:	2b03      	cmp	r3, #3
 80116e0:	d015      	beq.n	801170e <uxr_serialize_CREATE_Payload+0x10e>
 80116e2:	2b01      	cmp	r3, #1
 80116e4:	d00d      	beq.n	8011702 <uxr_serialize_CREATE_Payload+0x102>
 80116e6:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 80116ea:	4638      	mov	r0, r7
 80116ec:	f7f9 fe20 	bl	800b330 <ucdr_serialize_int16_t>
 80116f0:	4028      	ands	r0, r5
 80116f2:	4004      	ands	r4, r0
 80116f4:	e7a6      	b.n	8011644 <uxr_serialize_CREATE_Payload+0x44>
 80116f6:	68f1      	ldr	r1, [r6, #12]
 80116f8:	4638      	mov	r0, r7
 80116fa:	f004 fb3d 	bl	8015d78 <ucdr_serialize_string>
 80116fe:	4605      	mov	r5, r0
 8011700:	e7cd      	b.n	801169e <uxr_serialize_CREATE_Payload+0x9e>
 8011702:	68f1      	ldr	r1, [r6, #12]
 8011704:	4638      	mov	r0, r7
 8011706:	f004 fb37 	bl	8015d78 <ucdr_serialize_string>
 801170a:	4605      	mov	r5, r0
 801170c:	e7eb      	b.n	80116e6 <uxr_serialize_CREATE_Payload+0xe6>
 801170e:	68f2      	ldr	r2, [r6, #12]
 8011710:	f106 0110 	add.w	r1, r6, #16
 8011714:	4638      	mov	r0, r7
 8011716:	f004 fb03 	bl	8015d20 <ucdr_serialize_sequence_uint8_t>
 801171a:	4605      	mov	r5, r0
 801171c:	e7e3      	b.n	80116e6 <uxr_serialize_CREATE_Payload+0xe6>
 801171e:	bf00      	nop

08011720 <uxr_deserialize_GET_INFO_Payload>:
 8011720:	b570      	push	{r4, r5, r6, lr}
 8011722:	2202      	movs	r2, #2
 8011724:	4605      	mov	r5, r0
 8011726:	460e      	mov	r6, r1
 8011728:	f004 fa6a 	bl	8015c00 <ucdr_deserialize_array_uint8_t>
 801172c:	2202      	movs	r2, #2
 801172e:	18b1      	adds	r1, r6, r2
 8011730:	4604      	mov	r4, r0
 8011732:	4628      	mov	r0, r5
 8011734:	f004 fa64 	bl	8015c00 <ucdr_deserialize_array_uint8_t>
 8011738:	1d31      	adds	r1, r6, #4
 801173a:	4004      	ands	r4, r0
 801173c:	4628      	mov	r0, r5
 801173e:	f7f9 fc01 	bl	800af44 <ucdr_deserialize_uint32_t>
 8011742:	b2e4      	uxtb	r4, r4
 8011744:	4020      	ands	r0, r4
 8011746:	bd70      	pop	{r4, r5, r6, pc}

08011748 <uxr_serialize_DELETE_Payload>:
 8011748:	b570      	push	{r4, r5, r6, lr}
 801174a:	2202      	movs	r2, #2
 801174c:	4605      	mov	r5, r0
 801174e:	460e      	mov	r6, r1
 8011750:	f004 f9f2 	bl	8015b38 <ucdr_serialize_array_uint8_t>
 8011754:	2202      	movs	r2, #2
 8011756:	4604      	mov	r4, r0
 8011758:	18b1      	adds	r1, r6, r2
 801175a:	4628      	mov	r0, r5
 801175c:	f004 f9ec 	bl	8015b38 <ucdr_serialize_array_uint8_t>
 8011760:	4020      	ands	r0, r4
 8011762:	b2c0      	uxtb	r0, r0
 8011764:	bd70      	pop	{r4, r5, r6, pc}
 8011766:	bf00      	nop

08011768 <uxr_deserialize_STATUS_AGENT_Payload>:
 8011768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801176c:	4605      	mov	r5, r0
 801176e:	460e      	mov	r6, r1
 8011770:	f7f9 f8b8 	bl	800a8e4 <ucdr_deserialize_uint8_t>
 8011774:	1c71      	adds	r1, r6, #1
 8011776:	4604      	mov	r4, r0
 8011778:	4628      	mov	r0, r5
 801177a:	f7f9 f8b3 	bl	800a8e4 <ucdr_deserialize_uint8_t>
 801177e:	2204      	movs	r2, #4
 8011780:	18b1      	adds	r1, r6, r2
 8011782:	4680      	mov	r8, r0
 8011784:	4628      	mov	r0, r5
 8011786:	f004 fa3b 	bl	8015c00 <ucdr_deserialize_array_uint8_t>
 801178a:	f106 0108 	add.w	r1, r6, #8
 801178e:	4607      	mov	r7, r0
 8011790:	2202      	movs	r2, #2
 8011792:	4628      	mov	r0, r5
 8011794:	f004 fa34 	bl	8015c00 <ucdr_deserialize_array_uint8_t>
 8011798:	ea04 0308 	and.w	r3, r4, r8
 801179c:	b2db      	uxtb	r3, r3
 801179e:	ea03 0407 	and.w	r4, r3, r7
 80117a2:	2202      	movs	r2, #2
 80117a4:	4607      	mov	r7, r0
 80117a6:	f106 010a 	add.w	r1, r6, #10
 80117aa:	4628      	mov	r0, r5
 80117ac:	f004 fa28 	bl	8015c00 <ucdr_deserialize_array_uint8_t>
 80117b0:	f106 010c 	add.w	r1, r6, #12
 80117b4:	4603      	mov	r3, r0
 80117b6:	4628      	mov	r0, r5
 80117b8:	461d      	mov	r5, r3
 80117ba:	f7f9 f865 	bl	800a888 <ucdr_deserialize_bool>
 80117be:	403c      	ands	r4, r7
 80117c0:	4025      	ands	r5, r4
 80117c2:	4028      	ands	r0, r5
 80117c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080117c8 <uxr_deserialize_STATUS_Payload>:
 80117c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117cc:	2202      	movs	r2, #2
 80117ce:	4606      	mov	r6, r0
 80117d0:	460f      	mov	r7, r1
 80117d2:	f004 fa15 	bl	8015c00 <ucdr_deserialize_array_uint8_t>
 80117d6:	2202      	movs	r2, #2
 80117d8:	18b9      	adds	r1, r7, r2
 80117da:	4605      	mov	r5, r0
 80117dc:	4630      	mov	r0, r6
 80117de:	f004 fa0f 	bl	8015c00 <ucdr_deserialize_array_uint8_t>
 80117e2:	1d39      	adds	r1, r7, #4
 80117e4:	4680      	mov	r8, r0
 80117e6:	4630      	mov	r0, r6
 80117e8:	f7f9 f87c 	bl	800a8e4 <ucdr_deserialize_uint8_t>
 80117ec:	1d79      	adds	r1, r7, #5
 80117ee:	4604      	mov	r4, r0
 80117f0:	4630      	mov	r0, r6
 80117f2:	f7f9 f877 	bl	800a8e4 <ucdr_deserialize_uint8_t>
 80117f6:	ea05 0508 	and.w	r5, r5, r8
 80117fa:	402c      	ands	r4, r5
 80117fc:	4020      	ands	r0, r4
 80117fe:	b2c0      	uxtb	r0, r0
 8011800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011804 <uxr_serialize_INFO_Payload>:
 8011804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011808:	2202      	movs	r2, #2
 801180a:	460c      	mov	r4, r1
 801180c:	4605      	mov	r5, r0
 801180e:	f004 f993 	bl	8015b38 <ucdr_serialize_array_uint8_t>
 8011812:	2202      	movs	r2, #2
 8011814:	18a1      	adds	r1, r4, r2
 8011816:	4680      	mov	r8, r0
 8011818:	4628      	mov	r0, r5
 801181a:	f004 f98d 	bl	8015b38 <ucdr_serialize_array_uint8_t>
 801181e:	7921      	ldrb	r1, [r4, #4]
 8011820:	4607      	mov	r7, r0
 8011822:	4628      	mov	r0, r5
 8011824:	f7f9 f848 	bl	800a8b8 <ucdr_serialize_uint8_t>
 8011828:	7961      	ldrb	r1, [r4, #5]
 801182a:	4606      	mov	r6, r0
 801182c:	4628      	mov	r0, r5
 801182e:	f7f9 f843 	bl	800a8b8 <ucdr_serialize_uint8_t>
 8011832:	ea08 0807 	and.w	r8, r8, r7
 8011836:	ea06 0608 	and.w	r6, r6, r8
 801183a:	4006      	ands	r6, r0
 801183c:	7a21      	ldrb	r1, [r4, #8]
 801183e:	4628      	mov	r0, r5
 8011840:	f7f9 f80c 	bl	800a85c <ucdr_serialize_bool>
 8011844:	7a23      	ldrb	r3, [r4, #8]
 8011846:	b2f7      	uxtb	r7, r6
 8011848:	4606      	mov	r6, r0
 801184a:	b96b      	cbnz	r3, 8011868 <uxr_serialize_INFO_Payload+0x64>
 801184c:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8011850:	4628      	mov	r0, r5
 8011852:	f7f9 f803 	bl	800a85c <ucdr_serialize_bool>
 8011856:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801185a:	4030      	ands	r0, r6
 801185c:	b2c6      	uxtb	r6, r0
 801185e:	b983      	cbnz	r3, 8011882 <uxr_serialize_INFO_Payload+0x7e>
 8011860:	ea06 0007 	and.w	r0, r6, r7
 8011864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011868:	7b21      	ldrb	r1, [r4, #12]
 801186a:	4628      	mov	r0, r5
 801186c:	f7f9 f824 	bl	800a8b8 <ucdr_serialize_uint8_t>
 8011870:	b188      	cbz	r0, 8011896 <uxr_serialize_INFO_Payload+0x92>
 8011872:	f104 010c 	add.w	r1, r4, #12
 8011876:	4628      	mov	r0, r5
 8011878:	f7ff faf2 	bl	8010e60 <uxr_serialize_ObjectVariant.part.0>
 801187c:	4030      	ands	r0, r6
 801187e:	b2c6      	uxtb	r6, r0
 8011880:	e7e4      	b.n	801184c <uxr_serialize_INFO_Payload+0x48>
 8011882:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8011886:	4628      	mov	r0, r5
 8011888:	f7ff fdb2 	bl	80113f0 <uxr_serialize_ActivityInfoVariant>
 801188c:	4006      	ands	r6, r0
 801188e:	ea06 0007 	and.w	r0, r6, r7
 8011892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011896:	4606      	mov	r6, r0
 8011898:	e7d8      	b.n	801184c <uxr_serialize_INFO_Payload+0x48>
 801189a:	bf00      	nop

0801189c <uxr_serialize_READ_DATA_Payload>:
 801189c:	b570      	push	{r4, r5, r6, lr}
 801189e:	2202      	movs	r2, #2
 80118a0:	4605      	mov	r5, r0
 80118a2:	460e      	mov	r6, r1
 80118a4:	f004 f948 	bl	8015b38 <ucdr_serialize_array_uint8_t>
 80118a8:	2202      	movs	r2, #2
 80118aa:	18b1      	adds	r1, r6, r2
 80118ac:	4604      	mov	r4, r0
 80118ae:	4628      	mov	r0, r5
 80118b0:	f004 f942 	bl	8015b38 <ucdr_serialize_array_uint8_t>
 80118b4:	1d31      	adds	r1, r6, #4
 80118b6:	4004      	ands	r4, r0
 80118b8:	4628      	mov	r0, r5
 80118ba:	f7ff fe5d 	bl	8011578 <uxr_serialize_ReadSpecification>
 80118be:	b2e4      	uxtb	r4, r4
 80118c0:	4020      	ands	r0, r4
 80118c2:	bd70      	pop	{r4, r5, r6, pc}

080118c4 <uxr_serialize_WRITE_DATA_Payload_Data>:
 80118c4:	b570      	push	{r4, r5, r6, lr}
 80118c6:	2202      	movs	r2, #2
 80118c8:	4605      	mov	r5, r0
 80118ca:	460e      	mov	r6, r1
 80118cc:	f004 f934 	bl	8015b38 <ucdr_serialize_array_uint8_t>
 80118d0:	2202      	movs	r2, #2
 80118d2:	4604      	mov	r4, r0
 80118d4:	18b1      	adds	r1, r6, r2
 80118d6:	4628      	mov	r0, r5
 80118d8:	f004 f92e 	bl	8015b38 <ucdr_serialize_array_uint8_t>
 80118dc:	4020      	ands	r0, r4
 80118de:	b2c0      	uxtb	r0, r0
 80118e0:	bd70      	pop	{r4, r5, r6, pc}
 80118e2:	bf00      	nop

080118e4 <uxr_serialize_ACKNACK_Payload>:
 80118e4:	b570      	push	{r4, r5, r6, lr}
 80118e6:	460c      	mov	r4, r1
 80118e8:	460e      	mov	r6, r1
 80118ea:	f834 1b02 	ldrh.w	r1, [r4], #2
 80118ee:	4605      	mov	r5, r0
 80118f0:	f7f9 f80e 	bl	800a910 <ucdr_serialize_uint16_t>
 80118f4:	2202      	movs	r2, #2
 80118f6:	4621      	mov	r1, r4
 80118f8:	4604      	mov	r4, r0
 80118fa:	4628      	mov	r0, r5
 80118fc:	f004 f91c 	bl	8015b38 <ucdr_serialize_array_uint8_t>
 8011900:	7931      	ldrb	r1, [r6, #4]
 8011902:	4004      	ands	r4, r0
 8011904:	4628      	mov	r0, r5
 8011906:	f7f8 ffd7 	bl	800a8b8 <ucdr_serialize_uint8_t>
 801190a:	b2e4      	uxtb	r4, r4
 801190c:	4020      	ands	r0, r4
 801190e:	bd70      	pop	{r4, r5, r6, pc}

08011910 <uxr_deserialize_ACKNACK_Payload>:
 8011910:	b570      	push	{r4, r5, r6, lr}
 8011912:	4605      	mov	r5, r0
 8011914:	460e      	mov	r6, r1
 8011916:	f7f9 f8fb 	bl	800ab10 <ucdr_deserialize_uint16_t>
 801191a:	2202      	movs	r2, #2
 801191c:	18b1      	adds	r1, r6, r2
 801191e:	4604      	mov	r4, r0
 8011920:	4628      	mov	r0, r5
 8011922:	f004 f96d 	bl	8015c00 <ucdr_deserialize_array_uint8_t>
 8011926:	1d31      	adds	r1, r6, #4
 8011928:	4004      	ands	r4, r0
 801192a:	4628      	mov	r0, r5
 801192c:	f7f8 ffda 	bl	800a8e4 <ucdr_deserialize_uint8_t>
 8011930:	b2e4      	uxtb	r4, r4
 8011932:	4020      	ands	r0, r4
 8011934:	bd70      	pop	{r4, r5, r6, pc}
 8011936:	bf00      	nop

08011938 <uxr_serialize_HEARTBEAT_Payload>:
 8011938:	b570      	push	{r4, r5, r6, lr}
 801193a:	460d      	mov	r5, r1
 801193c:	8809      	ldrh	r1, [r1, #0]
 801193e:	4606      	mov	r6, r0
 8011940:	f7f8 ffe6 	bl	800a910 <ucdr_serialize_uint16_t>
 8011944:	8869      	ldrh	r1, [r5, #2]
 8011946:	4604      	mov	r4, r0
 8011948:	4630      	mov	r0, r6
 801194a:	f7f8 ffe1 	bl	800a910 <ucdr_serialize_uint16_t>
 801194e:	7929      	ldrb	r1, [r5, #4]
 8011950:	4004      	ands	r4, r0
 8011952:	4630      	mov	r0, r6
 8011954:	f7f8 ffb0 	bl	800a8b8 <ucdr_serialize_uint8_t>
 8011958:	b2e4      	uxtb	r4, r4
 801195a:	4020      	ands	r0, r4
 801195c:	bd70      	pop	{r4, r5, r6, pc}
 801195e:	bf00      	nop

08011960 <uxr_deserialize_HEARTBEAT_Payload>:
 8011960:	b570      	push	{r4, r5, r6, lr}
 8011962:	4605      	mov	r5, r0
 8011964:	460e      	mov	r6, r1
 8011966:	f7f9 f8d3 	bl	800ab10 <ucdr_deserialize_uint16_t>
 801196a:	1cb1      	adds	r1, r6, #2
 801196c:	4604      	mov	r4, r0
 801196e:	4628      	mov	r0, r5
 8011970:	f7f9 f8ce 	bl	800ab10 <ucdr_deserialize_uint16_t>
 8011974:	1d31      	adds	r1, r6, #4
 8011976:	4004      	ands	r4, r0
 8011978:	4628      	mov	r0, r5
 801197a:	f7f8 ffb3 	bl	800a8e4 <ucdr_deserialize_uint8_t>
 801197e:	b2e4      	uxtb	r4, r4
 8011980:	4020      	ands	r0, r4
 8011982:	bd70      	pop	{r4, r5, r6, pc}

08011984 <uxr_serialize_TIMESTAMP_Payload>:
 8011984:	b570      	push	{r4, r5, r6, lr}
 8011986:	460d      	mov	r5, r1
 8011988:	6809      	ldr	r1, [r1, #0]
 801198a:	4606      	mov	r6, r0
 801198c:	f7f9 fdc4 	bl	800b518 <ucdr_serialize_int32_t>
 8011990:	6869      	ldr	r1, [r5, #4]
 8011992:	4604      	mov	r4, r0
 8011994:	4630      	mov	r0, r6
 8011996:	f7f9 f9a5 	bl	800ace4 <ucdr_serialize_uint32_t>
 801199a:	4020      	ands	r0, r4
 801199c:	b2c0      	uxtb	r0, r0
 801199e:	bd70      	pop	{r4, r5, r6, pc}

080119a0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80119a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119a4:	4605      	mov	r5, r0
 80119a6:	460e      	mov	r6, r1
 80119a8:	f7f9 fe4e 	bl	800b648 <ucdr_deserialize_int32_t>
 80119ac:	1d31      	adds	r1, r6, #4
 80119ae:	4607      	mov	r7, r0
 80119b0:	4628      	mov	r0, r5
 80119b2:	f7f9 fac7 	bl	800af44 <ucdr_deserialize_uint32_t>
 80119b6:	f106 0108 	add.w	r1, r6, #8
 80119ba:	4680      	mov	r8, r0
 80119bc:	4628      	mov	r0, r5
 80119be:	f7f9 fe43 	bl	800b648 <ucdr_deserialize_int32_t>
 80119c2:	f106 010c 	add.w	r1, r6, #12
 80119c6:	4604      	mov	r4, r0
 80119c8:	4628      	mov	r0, r5
 80119ca:	f7f9 fabb 	bl	800af44 <ucdr_deserialize_uint32_t>
 80119ce:	ea07 0708 	and.w	r7, r7, r8
 80119d2:	403c      	ands	r4, r7
 80119d4:	f106 0110 	add.w	r1, r6, #16
 80119d8:	4004      	ands	r4, r0
 80119da:	4628      	mov	r0, r5
 80119dc:	f7f9 fe34 	bl	800b648 <ucdr_deserialize_int32_t>
 80119e0:	f106 0114 	add.w	r1, r6, #20
 80119e4:	4607      	mov	r7, r0
 80119e6:	4628      	mov	r0, r5
 80119e8:	f7f9 faac 	bl	800af44 <ucdr_deserialize_uint32_t>
 80119ec:	b2e4      	uxtb	r4, r4
 80119ee:	403c      	ands	r4, r7
 80119f0:	4020      	ands	r0, r4
 80119f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119f6:	bf00      	nop

080119f8 <uxr_serialize_SampleIdentity>:
 80119f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119fc:	220c      	movs	r2, #12
 80119fe:	4604      	mov	r4, r0
 8011a00:	460d      	mov	r5, r1
 8011a02:	f004 f899 	bl	8015b38 <ucdr_serialize_array_uint8_t>
 8011a06:	2203      	movs	r2, #3
 8011a08:	f105 010c 	add.w	r1, r5, #12
 8011a0c:	4607      	mov	r7, r0
 8011a0e:	4620      	mov	r0, r4
 8011a10:	f004 f892 	bl	8015b38 <ucdr_serialize_array_uint8_t>
 8011a14:	7be9      	ldrb	r1, [r5, #15]
 8011a16:	4680      	mov	r8, r0
 8011a18:	4620      	mov	r0, r4
 8011a1a:	f7f8 ff4d 	bl	800a8b8 <ucdr_serialize_uint8_t>
 8011a1e:	6929      	ldr	r1, [r5, #16]
 8011a20:	4606      	mov	r6, r0
 8011a22:	4620      	mov	r0, r4
 8011a24:	f7f9 fd78 	bl	800b518 <ucdr_serialize_int32_t>
 8011a28:	6969      	ldr	r1, [r5, #20]
 8011a2a:	4603      	mov	r3, r0
 8011a2c:	4620      	mov	r0, r4
 8011a2e:	ea07 0708 	and.w	r7, r7, r8
 8011a32:	461c      	mov	r4, r3
 8011a34:	f7f9 f956 	bl	800ace4 <ucdr_serialize_uint32_t>
 8011a38:	403e      	ands	r6, r7
 8011a3a:	4034      	ands	r4, r6
 8011a3c:	4020      	ands	r0, r4
 8011a3e:	b2c0      	uxtb	r0, r0
 8011a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011a44 <uxr_deserialize_SampleIdentity>:
 8011a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a48:	220c      	movs	r2, #12
 8011a4a:	4604      	mov	r4, r0
 8011a4c:	460d      	mov	r5, r1
 8011a4e:	f004 f8d7 	bl	8015c00 <ucdr_deserialize_array_uint8_t>
 8011a52:	2203      	movs	r2, #3
 8011a54:	f105 010c 	add.w	r1, r5, #12
 8011a58:	4607      	mov	r7, r0
 8011a5a:	4620      	mov	r0, r4
 8011a5c:	f004 f8d0 	bl	8015c00 <ucdr_deserialize_array_uint8_t>
 8011a60:	f105 010f 	add.w	r1, r5, #15
 8011a64:	4680      	mov	r8, r0
 8011a66:	4620      	mov	r0, r4
 8011a68:	f7f8 ff3c 	bl	800a8e4 <ucdr_deserialize_uint8_t>
 8011a6c:	f105 0110 	add.w	r1, r5, #16
 8011a70:	4606      	mov	r6, r0
 8011a72:	4620      	mov	r0, r4
 8011a74:	f7f9 fde8 	bl	800b648 <ucdr_deserialize_int32_t>
 8011a78:	f105 0114 	add.w	r1, r5, #20
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	4620      	mov	r0, r4
 8011a80:	ea07 0708 	and.w	r7, r7, r8
 8011a84:	461c      	mov	r4, r3
 8011a86:	f7f9 fa5d 	bl	800af44 <ucdr_deserialize_uint32_t>
 8011a8a:	403e      	ands	r6, r7
 8011a8c:	4034      	ands	r4, r6
 8011a8e:	4020      	ands	r0, r4
 8011a90:	b2c0      	uxtb	r0, r0
 8011a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a96:	bf00      	nop

08011a98 <rcl_client_get_rmw_handle>:
 8011a98:	b118      	cbz	r0, 8011aa2 <rcl_client_get_rmw_handle+0xa>
 8011a9a:	6800      	ldr	r0, [r0, #0]
 8011a9c:	b108      	cbz	r0, 8011aa2 <rcl_client_get_rmw_handle+0xa>
 8011a9e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011aa2:	4770      	bx	lr

08011aa4 <rcl_send_request>:
 8011aa4:	b570      	push	{r4, r5, r6, lr}
 8011aa6:	b082      	sub	sp, #8
 8011aa8:	b1e8      	cbz	r0, 8011ae6 <rcl_send_request+0x42>
 8011aaa:	4604      	mov	r4, r0
 8011aac:	6800      	ldr	r0, [r0, #0]
 8011aae:	b1d0      	cbz	r0, 8011ae6 <rcl_send_request+0x42>
 8011ab0:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8011ab4:	b1bb      	cbz	r3, 8011ae6 <rcl_send_request+0x42>
 8011ab6:	460e      	mov	r6, r1
 8011ab8:	b1d1      	cbz	r1, 8011af0 <rcl_send_request+0x4c>
 8011aba:	4615      	mov	r5, r2
 8011abc:	b1c2      	cbz	r2, 8011af0 <rcl_send_request+0x4c>
 8011abe:	2105      	movs	r1, #5
 8011ac0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8011ac4:	f002 fda4 	bl	8014610 <__atomic_load_8>
 8011ac8:	6823      	ldr	r3, [r4, #0]
 8011aca:	e9c5 0100 	strd	r0, r1, [r5]
 8011ace:	462a      	mov	r2, r5
 8011ad0:	4631      	mov	r1, r6
 8011ad2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011ad6:	f003 fc8f 	bl	80153f8 <rmw_send_request>
 8011ada:	4606      	mov	r6, r0
 8011adc:	b160      	cbz	r0, 8011af8 <rcl_send_request+0x54>
 8011ade:	2601      	movs	r6, #1
 8011ae0:	4630      	mov	r0, r6
 8011ae2:	b002      	add	sp, #8
 8011ae4:	bd70      	pop	{r4, r5, r6, pc}
 8011ae6:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8011aea:	4630      	mov	r0, r6
 8011aec:	b002      	add	sp, #8
 8011aee:	bd70      	pop	{r4, r5, r6, pc}
 8011af0:	260b      	movs	r6, #11
 8011af2:	4630      	mov	r0, r6
 8011af4:	b002      	add	sp, #8
 8011af6:	bd70      	pop	{r4, r5, r6, pc}
 8011af8:	6820      	ldr	r0, [r4, #0]
 8011afa:	2105      	movs	r1, #5
 8011afc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011b00:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8011b04:	9100      	str	r1, [sp, #0]
 8011b06:	f002 fdef 	bl	80146e8 <__atomic_exchange_8>
 8011b0a:	4630      	mov	r0, r6
 8011b0c:	b002      	add	sp, #8
 8011b0e:	bd70      	pop	{r4, r5, r6, pc}

08011b10 <rcl_take_response>:
 8011b10:	b570      	push	{r4, r5, r6, lr}
 8011b12:	468e      	mov	lr, r1
 8011b14:	460c      	mov	r4, r1
 8011b16:	4616      	mov	r6, r2
 8011b18:	4605      	mov	r5, r0
 8011b1a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011b1e:	b08c      	sub	sp, #48	@ 0x30
 8011b20:	f10d 0c18 	add.w	ip, sp, #24
 8011b24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011b28:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011b2c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011b30:	b35d      	cbz	r5, 8011b8a <rcl_take_response+0x7a>
 8011b32:	682b      	ldr	r3, [r5, #0]
 8011b34:	b34b      	cbz	r3, 8011b8a <rcl_take_response+0x7a>
 8011b36:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011b3a:	b330      	cbz	r0, 8011b8a <rcl_take_response+0x7a>
 8011b3c:	b346      	cbz	r6, 8011b90 <rcl_take_response+0x80>
 8011b3e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8011b98 <rcl_take_response+0x88>
 8011b42:	2300      	movs	r3, #0
 8011b44:	f88d 3007 	strb.w	r3, [sp, #7]
 8011b48:	4632      	mov	r2, r6
 8011b4a:	f10d 0307 	add.w	r3, sp, #7
 8011b4e:	a902      	add	r1, sp, #8
 8011b50:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011b54:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011b58:	f003 fd56 	bl	8015608 <rmw_take_response>
 8011b5c:	4605      	mov	r5, r0
 8011b5e:	b9c8      	cbnz	r0, 8011b94 <rcl_take_response+0x84>
 8011b60:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011b64:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8011b68:	2a00      	cmp	r2, #0
 8011b6a:	bf08      	it	eq
 8011b6c:	461d      	moveq	r5, r3
 8011b6e:	f10d 0e18 	add.w	lr, sp, #24
 8011b72:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011b76:	46a4      	mov	ip, r4
 8011b78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011b7c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011b80:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011b84:	4628      	mov	r0, r5
 8011b86:	b00c      	add	sp, #48	@ 0x30
 8011b88:	bd70      	pop	{r4, r5, r6, pc}
 8011b8a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8011b8e:	e7ee      	b.n	8011b6e <rcl_take_response+0x5e>
 8011b90:	250b      	movs	r5, #11
 8011b92:	e7ec      	b.n	8011b6e <rcl_take_response+0x5e>
 8011b94:	2501      	movs	r5, #1
 8011b96:	e7ea      	b.n	8011b6e <rcl_take_response+0x5e>
	...

08011ba0 <rcl_client_is_valid>:
 8011ba0:	b130      	cbz	r0, 8011bb0 <rcl_client_is_valid+0x10>
 8011ba2:	6800      	ldr	r0, [r0, #0]
 8011ba4:	b120      	cbz	r0, 8011bb0 <rcl_client_is_valid+0x10>
 8011ba6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011baa:	3800      	subs	r0, #0
 8011bac:	bf18      	it	ne
 8011bae:	2001      	movne	r0, #1
 8011bb0:	4770      	bx	lr
 8011bb2:	bf00      	nop

08011bb4 <rcl_convert_rmw_ret_to_rcl_ret>:
 8011bb4:	280b      	cmp	r0, #11
 8011bb6:	dc0d      	bgt.n	8011bd4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8011bb8:	2800      	cmp	r0, #0
 8011bba:	db09      	blt.n	8011bd0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8011bbc:	280b      	cmp	r0, #11
 8011bbe:	d807      	bhi.n	8011bd0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8011bc0:	e8df f000 	tbb	[pc, r0]
 8011bc4:	07060607 	.word	0x07060607
 8011bc8:	06060606 	.word	0x06060606
 8011bcc:	07070606 	.word	0x07070606
 8011bd0:	2001      	movs	r0, #1
 8011bd2:	4770      	bx	lr
 8011bd4:	28cb      	cmp	r0, #203	@ 0xcb
 8011bd6:	bf18      	it	ne
 8011bd8:	2001      	movne	r0, #1
 8011bda:	4770      	bx	lr

08011bdc <rcl_get_zero_initialized_context>:
 8011bdc:	4a03      	ldr	r2, [pc, #12]	@ (8011bec <rcl_get_zero_initialized_context+0x10>)
 8011bde:	4603      	mov	r3, r0
 8011be0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011be4:	e883 0003 	stmia.w	r3, {r0, r1}
 8011be8:	4618      	mov	r0, r3
 8011bea:	4770      	bx	lr
 8011bec:	08018d5c 	.word	0x08018d5c

08011bf0 <rcl_context_is_valid>:
 8011bf0:	b118      	cbz	r0, 8011bfa <rcl_context_is_valid+0xa>
 8011bf2:	6840      	ldr	r0, [r0, #4]
 8011bf4:	3800      	subs	r0, #0
 8011bf6:	bf18      	it	ne
 8011bf8:	2001      	movne	r0, #1
 8011bfa:	4770      	bx	lr

08011bfc <__cleanup_context>:
 8011bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c00:	4606      	mov	r6, r0
 8011c02:	6800      	ldr	r0, [r0, #0]
 8011c04:	2300      	movs	r3, #0
 8011c06:	6073      	str	r3, [r6, #4]
 8011c08:	2800      	cmp	r0, #0
 8011c0a:	d049      	beq.n	8011ca0 <__cleanup_context+0xa4>
 8011c0c:	6947      	ldr	r7, [r0, #20]
 8011c0e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8011c12:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8011c16:	b137      	cbz	r7, 8011c26 <__cleanup_context+0x2a>
 8011c18:	3014      	adds	r0, #20
 8011c1a:	f7fa f867 	bl	800bcec <rcl_init_options_fini>
 8011c1e:	4607      	mov	r7, r0
 8011c20:	2800      	cmp	r0, #0
 8011c22:	d144      	bne.n	8011cae <__cleanup_context+0xb2>
 8011c24:	6830      	ldr	r0, [r6, #0]
 8011c26:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011c28:	b143      	cbz	r3, 8011c3c <__cleanup_context+0x40>
 8011c2a:	3028      	adds	r0, #40	@ 0x28
 8011c2c:	f7fb fc2c 	bl	800d488 <rmw_context_fini>
 8011c30:	b118      	cbz	r0, 8011c3a <__cleanup_context+0x3e>
 8011c32:	2f00      	cmp	r7, #0
 8011c34:	d03e      	beq.n	8011cb4 <__cleanup_context+0xb8>
 8011c36:	f7fb f95f 	bl	800cef8 <rcutils_reset_error>
 8011c3a:	6830      	ldr	r0, [r6, #0]
 8011c3c:	6a03      	ldr	r3, [r0, #32]
 8011c3e:	b1db      	cbz	r3, 8011c78 <__cleanup_context+0x7c>
 8011c40:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8011c44:	2a01      	cmp	r2, #1
 8011c46:	f17c 0100 	sbcs.w	r1, ip, #0
 8011c4a:	db11      	blt.n	8011c70 <__cleanup_context+0x74>
 8011c4c:	2400      	movs	r4, #0
 8011c4e:	4625      	mov	r5, r4
 8011c50:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011c54:	4649      	mov	r1, r9
 8011c56:	b1b8      	cbz	r0, 8011c88 <__cleanup_context+0x8c>
 8011c58:	47c0      	blx	r8
 8011c5a:	6833      	ldr	r3, [r6, #0]
 8011c5c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8011c60:	3401      	adds	r4, #1
 8011c62:	f145 0500 	adc.w	r5, r5, #0
 8011c66:	4294      	cmp	r4, r2
 8011c68:	eb75 010c 	sbcs.w	r1, r5, ip
 8011c6c:	6a1b      	ldr	r3, [r3, #32]
 8011c6e:	dbef      	blt.n	8011c50 <__cleanup_context+0x54>
 8011c70:	4618      	mov	r0, r3
 8011c72:	4649      	mov	r1, r9
 8011c74:	47c0      	blx	r8
 8011c76:	6830      	ldr	r0, [r6, #0]
 8011c78:	4649      	mov	r1, r9
 8011c7a:	47c0      	blx	r8
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	e9c6 3300 	strd	r3, r3, [r6]
 8011c82:	4638      	mov	r0, r7
 8011c84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c88:	3401      	adds	r4, #1
 8011c8a:	f145 0500 	adc.w	r5, r5, #0
 8011c8e:	4294      	cmp	r4, r2
 8011c90:	eb75 010c 	sbcs.w	r1, r5, ip
 8011c94:	dbdc      	blt.n	8011c50 <__cleanup_context+0x54>
 8011c96:	4618      	mov	r0, r3
 8011c98:	4649      	mov	r1, r9
 8011c9a:	47c0      	blx	r8
 8011c9c:	6830      	ldr	r0, [r6, #0]
 8011c9e:	e7eb      	b.n	8011c78 <__cleanup_context+0x7c>
 8011ca0:	4607      	mov	r7, r0
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	e9c6 3300 	strd	r3, r3, [r6]
 8011ca8:	4638      	mov	r0, r7
 8011caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cae:	f7fb f923 	bl	800cef8 <rcutils_reset_error>
 8011cb2:	e7b7      	b.n	8011c24 <__cleanup_context+0x28>
 8011cb4:	f7ff ff7e 	bl	8011bb4 <rcl_convert_rmw_ret_to_rcl_ret>
 8011cb8:	4607      	mov	r7, r0
 8011cba:	e7bc      	b.n	8011c36 <__cleanup_context+0x3a>

08011cbc <rcl_init>:
 8011cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cc0:	1e05      	subs	r5, r0, #0
 8011cc2:	b09e      	sub	sp, #120	@ 0x78
 8011cc4:	460e      	mov	r6, r1
 8011cc6:	4690      	mov	r8, r2
 8011cc8:	461f      	mov	r7, r3
 8011cca:	f340 809c 	ble.w	8011e06 <rcl_init+0x14a>
 8011cce:	2900      	cmp	r1, #0
 8011cd0:	f000 809c 	beq.w	8011e0c <rcl_init+0x150>
 8011cd4:	f1a1 0e04 	sub.w	lr, r1, #4
 8011cd8:	f04f 0c00 	mov.w	ip, #0
 8011cdc:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8011ce0:	f10c 0c01 	add.w	ip, ip, #1
 8011ce4:	2c00      	cmp	r4, #0
 8011ce6:	f000 8091 	beq.w	8011e0c <rcl_init+0x150>
 8011cea:	4565      	cmp	r5, ip
 8011cec:	d1f6      	bne.n	8011cdc <rcl_init+0x20>
 8011cee:	f1b8 0f00 	cmp.w	r8, #0
 8011cf2:	f000 808b 	beq.w	8011e0c <rcl_init+0x150>
 8011cf6:	f8d8 4000 	ldr.w	r4, [r8]
 8011cfa:	2c00      	cmp	r4, #0
 8011cfc:	f000 8086 	beq.w	8011e0c <rcl_init+0x150>
 8011d00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011d02:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8011d06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011d0a:	6823      	ldr	r3, [r4, #0]
 8011d0c:	f8cc 3000 	str.w	r3, [ip]
 8011d10:	a819      	add	r0, sp, #100	@ 0x64
 8011d12:	f7fb f8cb 	bl	800ceac <rcutils_allocator_is_valid>
 8011d16:	2800      	cmp	r0, #0
 8011d18:	d078      	beq.n	8011e0c <rcl_init+0x150>
 8011d1a:	2f00      	cmp	r7, #0
 8011d1c:	d076      	beq.n	8011e0c <rcl_init+0x150>
 8011d1e:	683b      	ldr	r3, [r7, #0]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d178      	bne.n	8011e16 <rcl_init+0x15a>
 8011d24:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8011d28:	2178      	movs	r1, #120	@ 0x78
 8011d2a:	2001      	movs	r0, #1
 8011d2c:	4798      	blx	r3
 8011d2e:	4604      	mov	r4, r0
 8011d30:	6038      	str	r0, [r7, #0]
 8011d32:	2800      	cmp	r0, #0
 8011d34:	f000 80b6 	beq.w	8011ea4 <rcl_init+0x1e8>
 8011d38:	a802      	add	r0, sp, #8
 8011d3a:	f002 ffb9 	bl	8014cb0 <rmw_get_zero_initialized_context>
 8011d3e:	a902      	add	r1, sp, #8
 8011d40:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8011d44:	2250      	movs	r2, #80	@ 0x50
 8011d46:	ac19      	add	r4, sp, #100	@ 0x64
 8011d48:	f005 fdf9 	bl	801793e <memcpy>
 8011d4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011d4e:	f8d7 e000 	ldr.w	lr, [r7]
 8011d52:	46f4      	mov	ip, lr
 8011d54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011d58:	6823      	ldr	r3, [r4, #0]
 8011d5a:	f8cc 3000 	str.w	r3, [ip]
 8011d5e:	f10e 0114 	add.w	r1, lr, #20
 8011d62:	4640      	mov	r0, r8
 8011d64:	f7f9 ffec 	bl	800bd40 <rcl_init_options_copy>
 8011d68:	4604      	mov	r4, r0
 8011d6a:	2800      	cmp	r0, #0
 8011d6c:	d144      	bne.n	8011df8 <rcl_init+0x13c>
 8011d6e:	f8d7 9000 	ldr.w	r9, [r7]
 8011d72:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8011d76:	f8c9 0020 	str.w	r0, [r9, #32]
 8011d7a:	f8c9 5018 	str.w	r5, [r9, #24]
 8011d7e:	f8c9 801c 	str.w	r8, [r9, #28]
 8011d82:	2d00      	cmp	r5, #0
 8011d84:	d04e      	beq.n	8011e24 <rcl_init+0x168>
 8011d86:	2e00      	cmp	r6, #0
 8011d88:	d04c      	beq.n	8011e24 <rcl_init+0x168>
 8011d8a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8011d8e:	2104      	movs	r1, #4
 8011d90:	4628      	mov	r0, r5
 8011d92:	4798      	blx	r3
 8011d94:	f8c9 0020 	str.w	r0, [r9, #32]
 8011d98:	f8d7 9000 	ldr.w	r9, [r7]
 8011d9c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8011da0:	46ca      	mov	sl, r9
 8011da2:	b343      	cbz	r3, 8011df6 <rcl_init+0x13a>
 8011da4:	2d01      	cmp	r5, #1
 8011da6:	f178 0300 	sbcs.w	r3, r8, #0
 8011daa:	db3b      	blt.n	8011e24 <rcl_init+0x168>
 8011dac:	2400      	movs	r4, #0
 8011dae:	3e04      	subs	r6, #4
 8011db0:	46a1      	mov	r9, r4
 8011db2:	e00b      	b.n	8011dcc <rcl_init+0x110>
 8011db4:	6831      	ldr	r1, [r6, #0]
 8011db6:	f005 fdc2 	bl	801793e <memcpy>
 8011dba:	3401      	adds	r4, #1
 8011dbc:	f149 0900 	adc.w	r9, r9, #0
 8011dc0:	45c8      	cmp	r8, r9
 8011dc2:	bf08      	it	eq
 8011dc4:	42a5      	cmpeq	r5, r4
 8011dc6:	d02b      	beq.n	8011e20 <rcl_init+0x164>
 8011dc8:	f8d7 a000 	ldr.w	sl, [r7]
 8011dcc:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8011dd0:	f7ee fa30 	bl	8000234 <strlen>
 8011dd4:	1c42      	adds	r2, r0, #1
 8011dd6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011dd8:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8011dda:	f8da a020 	ldr.w	sl, [sl, #32]
 8011dde:	9201      	str	r2, [sp, #4]
 8011de0:	4610      	mov	r0, r2
 8011de2:	4798      	blx	r3
 8011de4:	683b      	ldr	r3, [r7, #0]
 8011de6:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8011dea:	6a1b      	ldr	r3, [r3, #32]
 8011dec:	9a01      	ldr	r2, [sp, #4]
 8011dee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011df2:	2800      	cmp	r0, #0
 8011df4:	d1de      	bne.n	8011db4 <rcl_init+0xf8>
 8011df6:	240a      	movs	r4, #10
 8011df8:	4638      	mov	r0, r7
 8011dfa:	f7ff feff 	bl	8011bfc <__cleanup_context>
 8011dfe:	4620      	mov	r0, r4
 8011e00:	b01e      	add	sp, #120	@ 0x78
 8011e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e06:	2900      	cmp	r1, #0
 8011e08:	f43f af71 	beq.w	8011cee <rcl_init+0x32>
 8011e0c:	240b      	movs	r4, #11
 8011e0e:	4620      	mov	r0, r4
 8011e10:	b01e      	add	sp, #120	@ 0x78
 8011e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e16:	2464      	movs	r4, #100	@ 0x64
 8011e18:	4620      	mov	r0, r4
 8011e1a:	b01e      	add	sp, #120	@ 0x78
 8011e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e20:	f8d7 9000 	ldr.w	r9, [r7]
 8011e24:	4926      	ldr	r1, [pc, #152]	@ (8011ec0 <rcl_init+0x204>)
 8011e26:	680b      	ldr	r3, [r1, #0]
 8011e28:	3301      	adds	r3, #1
 8011e2a:	d036      	beq.n	8011e9a <rcl_init+0x1de>
 8011e2c:	600b      	str	r3, [r1, #0]
 8011e2e:	461a      	mov	r2, r3
 8011e30:	2400      	movs	r4, #0
 8011e32:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8011e36:	607b      	str	r3, [r7, #4]
 8011e38:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8011e3a:	3301      	adds	r3, #1
 8011e3c:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8011e40:	d034      	beq.n	8011eac <rcl_init+0x1f0>
 8011e42:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8011e46:	b93b      	cbnz	r3, 8011e58 <rcl_init+0x19c>
 8011e48:	3030      	adds	r0, #48	@ 0x30
 8011e4a:	f000 f83b 	bl	8011ec4 <rcl_get_localhost_only>
 8011e4e:	4604      	mov	r4, r0
 8011e50:	2800      	cmp	r0, #0
 8011e52:	d1d1      	bne.n	8011df8 <rcl_init+0x13c>
 8011e54:	683b      	ldr	r3, [r7, #0]
 8011e56:	6958      	ldr	r0, [r3, #20]
 8011e58:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8011e5a:	aa18      	add	r2, sp, #96	@ 0x60
 8011e5c:	a917      	add	r1, sp, #92	@ 0x5c
 8011e5e:	f001 f871 	bl	8012f44 <rcl_validate_enclave_name>
 8011e62:	4604      	mov	r4, r0
 8011e64:	2800      	cmp	r0, #0
 8011e66:	d1c7      	bne.n	8011df8 <rcl_init+0x13c>
 8011e68:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011e6a:	b9eb      	cbnz	r3, 8011ea8 <rcl_init+0x1ec>
 8011e6c:	6839      	ldr	r1, [r7, #0]
 8011e6e:	694b      	ldr	r3, [r1, #20]
 8011e70:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8011e72:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8011e76:	f000 fb3f 	bl	80124f8 <rcl_get_security_options_from_environment>
 8011e7a:	4604      	mov	r4, r0
 8011e7c:	2800      	cmp	r0, #0
 8011e7e:	d1bb      	bne.n	8011df8 <rcl_init+0x13c>
 8011e80:	6839      	ldr	r1, [r7, #0]
 8011e82:	6948      	ldr	r0, [r1, #20]
 8011e84:	3128      	adds	r1, #40	@ 0x28
 8011e86:	3018      	adds	r0, #24
 8011e88:	f7fb f9c8 	bl	800d21c <rmw_init>
 8011e8c:	4604      	mov	r4, r0
 8011e8e:	2800      	cmp	r0, #0
 8011e90:	d0bd      	beq.n	8011e0e <rcl_init+0x152>
 8011e92:	f7ff fe8f 	bl	8011bb4 <rcl_convert_rmw_ret_to_rcl_ret>
 8011e96:	4604      	mov	r4, r0
 8011e98:	e7ae      	b.n	8011df8 <rcl_init+0x13c>
 8011e9a:	2201      	movs	r2, #1
 8011e9c:	461c      	mov	r4, r3
 8011e9e:	600a      	str	r2, [r1, #0]
 8011ea0:	4613      	mov	r3, r2
 8011ea2:	e7c6      	b.n	8011e32 <rcl_init+0x176>
 8011ea4:	240a      	movs	r4, #10
 8011ea6:	e7b2      	b.n	8011e0e <rcl_init+0x152>
 8011ea8:	2401      	movs	r4, #1
 8011eaa:	e7a5      	b.n	8011df8 <rcl_init+0x13c>
 8011eac:	3024      	adds	r0, #36	@ 0x24
 8011eae:	f004 fce3 	bl	8016878 <rcl_get_default_domain_id>
 8011eb2:	4604      	mov	r4, r0
 8011eb4:	2800      	cmp	r0, #0
 8011eb6:	d19f      	bne.n	8011df8 <rcl_init+0x13c>
 8011eb8:	683b      	ldr	r3, [r7, #0]
 8011eba:	6958      	ldr	r0, [r3, #20]
 8011ebc:	e7c1      	b.n	8011e42 <rcl_init+0x186>
 8011ebe:	bf00      	nop
 8011ec0:	2000ac70 	.word	0x2000ac70

08011ec4 <rcl_get_localhost_only>:
 8011ec4:	b510      	push	{r4, lr}
 8011ec6:	b082      	sub	sp, #8
 8011ec8:	2300      	movs	r3, #0
 8011eca:	9301      	str	r3, [sp, #4]
 8011ecc:	b1b8      	cbz	r0, 8011efe <rcl_get_localhost_only+0x3a>
 8011ece:	4604      	mov	r4, r0
 8011ed0:	a901      	add	r1, sp, #4
 8011ed2:	480c      	ldr	r0, [pc, #48]	@ (8011f04 <rcl_get_localhost_only+0x40>)
 8011ed4:	f002 fc40 	bl	8014758 <rcutils_get_env>
 8011ed8:	b110      	cbz	r0, 8011ee0 <rcl_get_localhost_only+0x1c>
 8011eda:	2001      	movs	r0, #1
 8011edc:	b002      	add	sp, #8
 8011ede:	bd10      	pop	{r4, pc}
 8011ee0:	9b01      	ldr	r3, [sp, #4]
 8011ee2:	b113      	cbz	r3, 8011eea <rcl_get_localhost_only+0x26>
 8011ee4:	781a      	ldrb	r2, [r3, #0]
 8011ee6:	2a31      	cmp	r2, #49	@ 0x31
 8011ee8:	d004      	beq.n	8011ef4 <rcl_get_localhost_only+0x30>
 8011eea:	2302      	movs	r3, #2
 8011eec:	2000      	movs	r0, #0
 8011eee:	7023      	strb	r3, [r4, #0]
 8011ef0:	b002      	add	sp, #8
 8011ef2:	bd10      	pop	{r4, pc}
 8011ef4:	785b      	ldrb	r3, [r3, #1]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d1f7      	bne.n	8011eea <rcl_get_localhost_only+0x26>
 8011efa:	2301      	movs	r3, #1
 8011efc:	e7f6      	b.n	8011eec <rcl_get_localhost_only+0x28>
 8011efe:	200b      	movs	r0, #11
 8011f00:	b002      	add	sp, #8
 8011f02:	bd10      	pop	{r4, pc}
 8011f04:	08018d64 	.word	0x08018d64

08011f08 <rcl_get_zero_initialized_node>:
 8011f08:	4a03      	ldr	r2, [pc, #12]	@ (8011f18 <rcl_get_zero_initialized_node+0x10>)
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f10:	e883 0003 	stmia.w	r3, {r0, r1}
 8011f14:	4618      	mov	r0, r3
 8011f16:	4770      	bx	lr
 8011f18:	08018d80 	.word	0x08018d80

08011f1c <rcl_node_init>:
 8011f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f20:	b0a9      	sub	sp, #164	@ 0xa4
 8011f22:	4604      	mov	r4, r0
 8011f24:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8011f28:	a823      	add	r0, sp, #140	@ 0x8c
 8011f2a:	460e      	mov	r6, r1
 8011f2c:	4615      	mov	r5, r2
 8011f2e:	461f      	mov	r7, r3
 8011f30:	f004 ff16 	bl	8016d60 <rcl_guard_condition_get_default_options>
 8011f34:	f1b8 0f00 	cmp.w	r8, #0
 8011f38:	f000 80e6 	beq.w	8012108 <rcl_node_init+0x1ec>
 8011f3c:	4640      	mov	r0, r8
 8011f3e:	f7fa ffb5 	bl	800ceac <rcutils_allocator_is_valid>
 8011f42:	2800      	cmp	r0, #0
 8011f44:	f000 80e0 	beq.w	8012108 <rcl_node_init+0x1ec>
 8011f48:	2e00      	cmp	r6, #0
 8011f4a:	f000 80dd 	beq.w	8012108 <rcl_node_init+0x1ec>
 8011f4e:	2d00      	cmp	r5, #0
 8011f50:	f000 80da 	beq.w	8012108 <rcl_node_init+0x1ec>
 8011f54:	2c00      	cmp	r4, #0
 8011f56:	f000 80d7 	beq.w	8012108 <rcl_node_init+0x1ec>
 8011f5a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011f5e:	f1b9 0f00 	cmp.w	r9, #0
 8011f62:	f040 80fd 	bne.w	8012160 <rcl_node_init+0x244>
 8011f66:	2f00      	cmp	r7, #0
 8011f68:	f000 80ce 	beq.w	8012108 <rcl_node_init+0x1ec>
 8011f6c:	4638      	mov	r0, r7
 8011f6e:	f7ff fe3f 	bl	8011bf0 <rcl_context_is_valid>
 8011f72:	4682      	mov	sl, r0
 8011f74:	2800      	cmp	r0, #0
 8011f76:	f000 80cd 	beq.w	8012114 <rcl_node_init+0x1f8>
 8011f7a:	464a      	mov	r2, r9
 8011f7c:	a922      	add	r1, sp, #136	@ 0x88
 8011f7e:	4630      	mov	r0, r6
 8011f80:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8011f84:	f003 f812 	bl	8014fac <rmw_validate_node_name>
 8011f88:	4681      	mov	r9, r0
 8011f8a:	2800      	cmp	r0, #0
 8011f8c:	f040 80be 	bne.w	801210c <rcl_node_init+0x1f0>
 8011f90:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8011f92:	2800      	cmp	r0, #0
 8011f94:	f040 80f0 	bne.w	8012178 <rcl_node_init+0x25c>
 8011f98:	4628      	mov	r0, r5
 8011f9a:	f7ee f94b 	bl	8000234 <strlen>
 8011f9e:	2800      	cmp	r0, #0
 8011fa0:	f040 80bb 	bne.w	801211a <rcl_node_init+0x1fe>
 8011fa4:	4d7c      	ldr	r5, [pc, #496]	@ (8012198 <rcl_node_init+0x27c>)
 8011fa6:	a922      	add	r1, sp, #136	@ 0x88
 8011fa8:	2200      	movs	r2, #0
 8011faa:	4628      	mov	r0, r5
 8011fac:	f002 ffe0 	bl	8014f70 <rmw_validate_namespace>
 8011fb0:	4681      	mov	r9, r0
 8011fb2:	2800      	cmp	r0, #0
 8011fb4:	f040 80aa 	bne.w	801210c <rcl_node_init+0x1f0>
 8011fb8:	4682      	mov	sl, r0
 8011fba:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8011fbc:	2800      	cmp	r0, #0
 8011fbe:	f040 80e0 	bne.w	8012182 <rcl_node_init+0x266>
 8011fc2:	f8d8 3000 	ldr.w	r3, [r8]
 8011fc6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011fca:	2078      	movs	r0, #120	@ 0x78
 8011fcc:	4798      	blx	r3
 8011fce:	4681      	mov	r9, r0
 8011fd0:	6060      	str	r0, [r4, #4]
 8011fd2:	2800      	cmp	r0, #0
 8011fd4:	f000 80ca 	beq.w	801216c <rcl_node_init+0x250>
 8011fd8:	2200      	movs	r2, #0
 8011fda:	2300      	movs	r3, #0
 8011fdc:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8011fe0:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8011fe4:	a808      	add	r0, sp, #32
 8011fe6:	f000 f907 	bl	80121f8 <rcl_node_get_default_options>
 8011fea:	a908      	add	r1, sp, #32
 8011fec:	4648      	mov	r0, r9
 8011fee:	2268      	movs	r2, #104	@ 0x68
 8011ff0:	f005 fca5 	bl	801793e <memcpy>
 8011ff4:	6861      	ldr	r1, [r4, #4]
 8011ff6:	6027      	str	r7, [r4, #0]
 8011ff8:	4640      	mov	r0, r8
 8011ffa:	f000 f90b 	bl	8012214 <rcl_node_options_copy>
 8011ffe:	2800      	cmp	r0, #0
 8012000:	d158      	bne.n	80120b4 <rcl_node_init+0x198>
 8012002:	4628      	mov	r0, r5
 8012004:	f7ee f916 	bl	8000234 <strlen>
 8012008:	4428      	add	r0, r5
 801200a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801200e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8012012:	2b2f      	cmp	r3, #47	@ 0x2f
 8012014:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012018:	9300      	str	r3, [sp, #0]
 801201a:	bf0c      	ite	eq
 801201c:	4b5f      	ldreq	r3, [pc, #380]	@ (801219c <rcl_node_init+0x280>)
 801201e:	4b60      	ldrne	r3, [pc, #384]	@ (80121a0 <rcl_node_init+0x284>)
 8012020:	9302      	str	r3, [sp, #8]
 8012022:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012026:	9301      	str	r3, [sp, #4]
 8012028:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801202c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8012030:	f002 fbba 	bl	80147a8 <rcutils_format_string_limit>
 8012034:	6823      	ldr	r3, [r4, #0]
 8012036:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 801203a:	6818      	ldr	r0, [r3, #0]
 801203c:	4631      	mov	r1, r6
 801203e:	3028      	adds	r0, #40	@ 0x28
 8012040:	462a      	mov	r2, r5
 8012042:	6866      	ldr	r6, [r4, #4]
 8012044:	f7fb facc 	bl	800d5e0 <rmw_create_node>
 8012048:	6863      	ldr	r3, [r4, #4]
 801204a:	66b0      	str	r0, [r6, #104]	@ 0x68
 801204c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801204e:	2800      	cmp	r0, #0
 8012050:	d032      	beq.n	80120b8 <rcl_node_init+0x19c>
 8012052:	f7fb fb59 	bl	800d708 <rmw_node_get_graph_guard_condition>
 8012056:	4681      	mov	r9, r0
 8012058:	b360      	cbz	r0, 80120b4 <rcl_node_init+0x198>
 801205a:	f8d8 3000 	ldr.w	r3, [r8]
 801205e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012062:	6866      	ldr	r6, [r4, #4]
 8012064:	2008      	movs	r0, #8
 8012066:	4798      	blx	r3
 8012068:	6863      	ldr	r3, [r4, #4]
 801206a:	66f0      	str	r0, [r6, #108]	@ 0x6c
 801206c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8012070:	f1bb 0f00 	cmp.w	fp, #0
 8012074:	d020      	beq.n	80120b8 <rcl_node_init+0x19c>
 8012076:	a806      	add	r0, sp, #24
 8012078:	f004 fd96 	bl	8016ba8 <rcl_get_zero_initialized_guard_condition>
 801207c:	a806      	add	r0, sp, #24
 801207e:	c803      	ldmia	r0, {r0, r1}
 8012080:	6863      	ldr	r3, [r4, #4]
 8012082:	46c4      	mov	ip, r8
 8012084:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8012088:	e88b 0003 	stmia.w	fp, {r0, r1}
 801208c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012090:	ae23      	add	r6, sp, #140	@ 0x8c
 8012092:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012094:	f8dc 3000 	ldr.w	r3, [ip]
 8012098:	6033      	str	r3, [r6, #0]
 801209a:	ab28      	add	r3, sp, #160	@ 0xa0
 801209c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80120a0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80120a4:	4649      	mov	r1, r9
 80120a6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80120a8:	463a      	mov	r2, r7
 80120aa:	4670      	mov	r0, lr
 80120ac:	f004 fdd2 	bl	8016c54 <rcl_guard_condition_init_from_rmw>
 80120b0:	4681      	mov	r9, r0
 80120b2:	b328      	cbz	r0, 8012100 <rcl_node_init+0x1e4>
 80120b4:	6863      	ldr	r3, [r4, #4]
 80120b6:	b1f3      	cbz	r3, 80120f6 <rcl_node_init+0x1da>
 80120b8:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80120ba:	b128      	cbz	r0, 80120c8 <rcl_node_init+0x1ac>
 80120bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80120c0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80120c4:	4798      	blx	r3
 80120c6:	6863      	ldr	r3, [r4, #4]
 80120c8:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80120ca:	b110      	cbz	r0, 80120d2 <rcl_node_init+0x1b6>
 80120cc:	f7fb faa0 	bl	800d610 <rmw_destroy_node>
 80120d0:	6863      	ldr	r3, [r4, #4]
 80120d2:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80120d4:	b148      	cbz	r0, 80120ea <rcl_node_init+0x1ce>
 80120d6:	f004 fe1d 	bl	8016d14 <rcl_guard_condition_fini>
 80120da:	6863      	ldr	r3, [r4, #4]
 80120dc:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80120e0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80120e2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80120e6:	4798      	blx	r3
 80120e8:	6863      	ldr	r3, [r4, #4]
 80120ea:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80120ee:	4618      	mov	r0, r3
 80120f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80120f4:	4798      	blx	r3
 80120f6:	2300      	movs	r3, #0
 80120f8:	e9c4 3300 	strd	r3, r3, [r4]
 80120fc:	f04f 0901 	mov.w	r9, #1
 8012100:	f1ba 0f00 	cmp.w	sl, #0
 8012104:	d125      	bne.n	8012152 <rcl_node_init+0x236>
 8012106:	e001      	b.n	801210c <rcl_node_init+0x1f0>
 8012108:	f04f 090b 	mov.w	r9, #11
 801210c:	4648      	mov	r0, r9
 801210e:	b029      	add	sp, #164	@ 0xa4
 8012110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012114:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8012118:	e7f8      	b.n	801210c <rcl_node_init+0x1f0>
 801211a:	782b      	ldrb	r3, [r5, #0]
 801211c:	2b2f      	cmp	r3, #47	@ 0x2f
 801211e:	f43f af42 	beq.w	8011fa6 <rcl_node_init+0x8a>
 8012122:	9503      	str	r5, [sp, #12]
 8012124:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012128:	9300      	str	r3, [sp, #0]
 801212a:	4b1e      	ldr	r3, [pc, #120]	@ (80121a4 <rcl_node_init+0x288>)
 801212c:	9302      	str	r3, [sp, #8]
 801212e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012132:	9301      	str	r3, [sp, #4]
 8012134:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8012138:	f002 fb36 	bl	80147a8 <rcutils_format_string_limit>
 801213c:	4605      	mov	r5, r0
 801213e:	b340      	cbz	r0, 8012192 <rcl_node_init+0x276>
 8012140:	2200      	movs	r2, #0
 8012142:	a922      	add	r1, sp, #136	@ 0x88
 8012144:	9222      	str	r2, [sp, #136]	@ 0x88
 8012146:	f002 ff13 	bl	8014f70 <rmw_validate_namespace>
 801214a:	4681      	mov	r9, r0
 801214c:	2800      	cmp	r0, #0
 801214e:	f43f af34 	beq.w	8011fba <rcl_node_init+0x9e>
 8012152:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012156:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801215a:	4628      	mov	r0, r5
 801215c:	4798      	blx	r3
 801215e:	e7d5      	b.n	801210c <rcl_node_init+0x1f0>
 8012160:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8012164:	4648      	mov	r0, r9
 8012166:	b029      	add	sp, #164	@ 0xa4
 8012168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801216c:	f04f 090a 	mov.w	r9, #10
 8012170:	f1ba 0f00 	cmp.w	sl, #0
 8012174:	d1ed      	bne.n	8012152 <rcl_node_init+0x236>
 8012176:	e7c9      	b.n	801210c <rcl_node_init+0x1f0>
 8012178:	f002 ff6a 	bl	8015050 <rmw_node_name_validation_result_string>
 801217c:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8012180:	e7c4      	b.n	801210c <rcl_node_init+0x1f0>
 8012182:	f002 ff07 	bl	8014f94 <rmw_namespace_validation_result_string>
 8012186:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 801218a:	f1ba 0f00 	cmp.w	sl, #0
 801218e:	d1e0      	bne.n	8012152 <rcl_node_init+0x236>
 8012190:	e7bc      	b.n	801210c <rcl_node_init+0x1f0>
 8012192:	f04f 090a 	mov.w	r9, #10
 8012196:	e7b9      	b.n	801210c <rcl_node_init+0x1f0>
 8012198:	08018b10 	.word	0x08018b10
 801219c:	08018b38 	.word	0x08018b38
 80121a0:	08018b14 	.word	0x08018b14
 80121a4:	08018d7c 	.word	0x08018d7c

080121a8 <rcl_node_is_valid>:
 80121a8:	b130      	cbz	r0, 80121b8 <rcl_node_is_valid+0x10>
 80121aa:	6843      	ldr	r3, [r0, #4]
 80121ac:	b123      	cbz	r3, 80121b8 <rcl_node_is_valid+0x10>
 80121ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80121b0:	b113      	cbz	r3, 80121b8 <rcl_node_is_valid+0x10>
 80121b2:	6800      	ldr	r0, [r0, #0]
 80121b4:	f7ff bd1c 	b.w	8011bf0 <rcl_context_is_valid>
 80121b8:	2000      	movs	r0, #0
 80121ba:	4770      	bx	lr

080121bc <rcl_node_get_name>:
 80121bc:	b120      	cbz	r0, 80121c8 <rcl_node_get_name+0xc>
 80121be:	6840      	ldr	r0, [r0, #4]
 80121c0:	b110      	cbz	r0, 80121c8 <rcl_node_get_name+0xc>
 80121c2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80121c4:	b100      	cbz	r0, 80121c8 <rcl_node_get_name+0xc>
 80121c6:	6880      	ldr	r0, [r0, #8]
 80121c8:	4770      	bx	lr
 80121ca:	bf00      	nop

080121cc <rcl_node_get_namespace>:
 80121cc:	b120      	cbz	r0, 80121d8 <rcl_node_get_namespace+0xc>
 80121ce:	6840      	ldr	r0, [r0, #4]
 80121d0:	b110      	cbz	r0, 80121d8 <rcl_node_get_namespace+0xc>
 80121d2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80121d4:	b100      	cbz	r0, 80121d8 <rcl_node_get_namespace+0xc>
 80121d6:	68c0      	ldr	r0, [r0, #12]
 80121d8:	4770      	bx	lr
 80121da:	bf00      	nop

080121dc <rcl_node_get_options>:
 80121dc:	b128      	cbz	r0, 80121ea <rcl_node_get_options+0xe>
 80121de:	6840      	ldr	r0, [r0, #4]
 80121e0:	b118      	cbz	r0, 80121ea <rcl_node_get_options+0xe>
 80121e2:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	bf08      	it	eq
 80121e8:	2000      	moveq	r0, #0
 80121ea:	4770      	bx	lr

080121ec <rcl_node_get_rmw_handle>:
 80121ec:	b110      	cbz	r0, 80121f4 <rcl_node_get_rmw_handle+0x8>
 80121ee:	6840      	ldr	r0, [r0, #4]
 80121f0:	b100      	cbz	r0, 80121f4 <rcl_node_get_rmw_handle+0x8>
 80121f2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80121f4:	4770      	bx	lr
 80121f6:	bf00      	nop

080121f8 <rcl_node_get_default_options>:
 80121f8:	b510      	push	{r4, lr}
 80121fa:	2268      	movs	r2, #104	@ 0x68
 80121fc:	4604      	mov	r4, r0
 80121fe:	2100      	movs	r1, #0
 8012200:	f005 fad4 	bl	80177ac <memset>
 8012204:	4620      	mov	r0, r4
 8012206:	f7fa fe43 	bl	800ce90 <rcutils_get_default_allocator>
 801220a:	2301      	movs	r3, #1
 801220c:	7523      	strb	r3, [r4, #20]
 801220e:	4620      	mov	r0, r4
 8012210:	bd10      	pop	{r4, pc}
 8012212:	bf00      	nop

08012214 <rcl_node_options_copy>:
 8012214:	b1d0      	cbz	r0, 801224c <rcl_node_options_copy+0x38>
 8012216:	b570      	push	{r4, r5, r6, lr}
 8012218:	460c      	mov	r4, r1
 801221a:	b1a9      	cbz	r1, 8012248 <rcl_node_options_copy+0x34>
 801221c:	4288      	cmp	r0, r1
 801221e:	4684      	mov	ip, r0
 8012220:	d012      	beq.n	8012248 <rcl_node_options_copy+0x34>
 8012222:	4605      	mov	r5, r0
 8012224:	8a86      	ldrh	r6, [r0, #20]
 8012226:	468e      	mov	lr, r1
 8012228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801222a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801222e:	682b      	ldr	r3, [r5, #0]
 8012230:	f8ce 3000 	str.w	r3, [lr]
 8012234:	f10c 0118 	add.w	r1, ip, #24
 8012238:	2250      	movs	r2, #80	@ 0x50
 801223a:	82a6      	strh	r6, [r4, #20]
 801223c:	f104 0018 	add.w	r0, r4, #24
 8012240:	f005 fb7d 	bl	801793e <memcpy>
 8012244:	2000      	movs	r0, #0
 8012246:	bd70      	pop	{r4, r5, r6, pc}
 8012248:	200b      	movs	r0, #11
 801224a:	bd70      	pop	{r4, r5, r6, pc}
 801224c:	200b      	movs	r0, #11
 801224e:	4770      	bx	lr

08012250 <rcl_node_resolve_name>:
 8012250:	b082      	sub	sp, #8
 8012252:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012256:	b091      	sub	sp, #68	@ 0x44
 8012258:	ac1a      	add	r4, sp, #104	@ 0x68
 801225a:	e884 000c 	stmia.w	r4, {r2, r3}
 801225e:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8012262:	2800      	cmp	r0, #0
 8012264:	d03b      	beq.n	80122de <rcl_node_resolve_name+0x8e>
 8012266:	460c      	mov	r4, r1
 8012268:	4605      	mov	r5, r0
 801226a:	f7ff ffb7 	bl	80121dc <rcl_node_get_options>
 801226e:	2800      	cmp	r0, #0
 8012270:	d037      	beq.n	80122e2 <rcl_node_resolve_name+0x92>
 8012272:	4628      	mov	r0, r5
 8012274:	f7ff ffa2 	bl	80121bc <rcl_node_get_name>
 8012278:	4606      	mov	r6, r0
 801227a:	4628      	mov	r0, r5
 801227c:	f7ff ffa6 	bl	80121cc <rcl_node_get_namespace>
 8012280:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8012284:	4681      	mov	r9, r0
 8012286:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801228a:	ad0b      	add	r5, sp, #44	@ 0x2c
 801228c:	46ac      	mov	ip, r5
 801228e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012292:	f8de 3000 	ldr.w	r3, [lr]
 8012296:	f8cc 3000 	str.w	r3, [ip]
 801229a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801229c:	b1fb      	cbz	r3, 80122de <rcl_node_resolve_name+0x8e>
 801229e:	468a      	mov	sl, r1
 80122a0:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 80122a4:	f002 fbd8 	bl	8014a58 <rcutils_get_zero_initialized_string_map>
 80122a8:	ab10      	add	r3, sp, #64	@ 0x40
 80122aa:	9008      	str	r0, [sp, #32]
 80122ac:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80122b0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80122b4:	2100      	movs	r1, #0
 80122b6:	e895 000c 	ldmia.w	r5, {r2, r3}
 80122ba:	a808      	add	r0, sp, #32
 80122bc:	f002 fc44 	bl	8014b48 <rcutils_string_map_init>
 80122c0:	4607      	mov	r7, r0
 80122c2:	b180      	cbz	r0, 80122e6 <rcl_node_resolve_name+0x96>
 80122c4:	f7fa fe00 	bl	800cec8 <rcutils_get_error_string>
 80122c8:	f7fa fe16 	bl	800cef8 <rcutils_reset_error>
 80122cc:	2f0a      	cmp	r7, #10
 80122ce:	bf18      	it	ne
 80122d0:	2701      	movne	r7, #1
 80122d2:	4638      	mov	r0, r7
 80122d4:	b011      	add	sp, #68	@ 0x44
 80122d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122da:	b002      	add	sp, #8
 80122dc:	4770      	bx	lr
 80122de:	270b      	movs	r7, #11
 80122e0:	e7f7      	b.n	80122d2 <rcl_node_resolve_name+0x82>
 80122e2:	2701      	movs	r7, #1
 80122e4:	e7f5      	b.n	80122d2 <rcl_node_resolve_name+0x82>
 80122e6:	9009      	str	r0, [sp, #36]	@ 0x24
 80122e8:	9007      	str	r0, [sp, #28]
 80122ea:	a808      	add	r0, sp, #32
 80122ec:	f004 fc56 	bl	8016b9c <rcl_get_default_topic_name_substitutions>
 80122f0:	4607      	mov	r7, r0
 80122f2:	b1a8      	cbz	r0, 8012320 <rcl_node_resolve_name+0xd0>
 80122f4:	280a      	cmp	r0, #10
 80122f6:	9c07      	ldr	r4, [sp, #28]
 80122f8:	d000      	beq.n	80122fc <rcl_node_resolve_name+0xac>
 80122fa:	2701      	movs	r7, #1
 80122fc:	a808      	add	r0, sp, #32
 80122fe:	f002 fc63 	bl	8014bc8 <rcutils_string_map_fini>
 8012302:	2800      	cmp	r0, #0
 8012304:	d13d      	bne.n	8012382 <rcl_node_resolve_name+0x132>
 8012306:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012308:	4659      	mov	r1, fp
 801230a:	47d0      	blx	sl
 801230c:	4659      	mov	r1, fp
 801230e:	4620      	mov	r0, r4
 8012310:	47d0      	blx	sl
 8012312:	f1b8 0f00 	cmp.w	r8, #0
 8012316:	d0dc      	beq.n	80122d2 <rcl_node_resolve_name+0x82>
 8012318:	2f67      	cmp	r7, #103	@ 0x67
 801231a:	bf08      	it	eq
 801231c:	2768      	moveq	r7, #104	@ 0x68
 801231e:	e7d8      	b.n	80122d2 <rcl_node_resolve_name+0x82>
 8012320:	ab09      	add	r3, sp, #36	@ 0x24
 8012322:	9305      	str	r3, [sp, #20]
 8012324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012326:	46ec      	mov	ip, sp
 8012328:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801232c:	682b      	ldr	r3, [r5, #0]
 801232e:	f8cc 3000 	str.w	r3, [ip]
 8012332:	464a      	mov	r2, r9
 8012334:	4631      	mov	r1, r6
 8012336:	4620      	mov	r0, r4
 8012338:	ab08      	add	r3, sp, #32
 801233a:	f004 fad1 	bl	80168e0 <rcl_expand_topic_name>
 801233e:	4607      	mov	r7, r0
 8012340:	b9b8      	cbnz	r0, 8012372 <rcl_node_resolve_name+0x122>
 8012342:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8012344:	9009      	str	r0, [sp, #36]	@ 0x24
 8012346:	4602      	mov	r2, r0
 8012348:	a90a      	add	r1, sp, #40	@ 0x28
 801234a:	4620      	mov	r0, r4
 801234c:	f002 fd4c 	bl	8014de8 <rmw_validate_full_topic_name>
 8012350:	b988      	cbnz	r0, 8012376 <rcl_node_resolve_name+0x126>
 8012352:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8012354:	b9d5      	cbnz	r5, 801238c <rcl_node_resolve_name+0x13c>
 8012356:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012358:	a808      	add	r0, sp, #32
 801235a:	601c      	str	r4, [r3, #0]
 801235c:	f002 fc34 	bl	8014bc8 <rcutils_string_map_fini>
 8012360:	4607      	mov	r7, r0
 8012362:	b1a8      	cbz	r0, 8012390 <rcl_node_resolve_name+0x140>
 8012364:	f7fa fdb0 	bl	800cec8 <rcutils_get_error_string>
 8012368:	462c      	mov	r4, r5
 801236a:	f7fa fdc5 	bl	800cef8 <rcutils_reset_error>
 801236e:	2701      	movs	r7, #1
 8012370:	e7c9      	b.n	8012306 <rcl_node_resolve_name+0xb6>
 8012372:	9c07      	ldr	r4, [sp, #28]
 8012374:	e7c2      	b.n	80122fc <rcl_node_resolve_name+0xac>
 8012376:	f7fa fda7 	bl	800cec8 <rcutils_get_error_string>
 801237a:	2701      	movs	r7, #1
 801237c:	f7fa fdbc 	bl	800cef8 <rcutils_reset_error>
 8012380:	e7bc      	b.n	80122fc <rcl_node_resolve_name+0xac>
 8012382:	f7fa fda1 	bl	800cec8 <rcutils_get_error_string>
 8012386:	f7fa fdb7 	bl	800cef8 <rcutils_reset_error>
 801238a:	e7bc      	b.n	8012306 <rcl_node_resolve_name+0xb6>
 801238c:	2767      	movs	r7, #103	@ 0x67
 801238e:	e7b5      	b.n	80122fc <rcl_node_resolve_name+0xac>
 8012390:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012392:	4659      	mov	r1, fp
 8012394:	47d0      	blx	sl
 8012396:	4659      	mov	r1, fp
 8012398:	4638      	mov	r0, r7
 801239a:	47d0      	blx	sl
 801239c:	e799      	b.n	80122d2 <rcl_node_resolve_name+0x82>
 801239e:	bf00      	nop

080123a0 <exact_match_lookup>:
 80123a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123a2:	f102 0708 	add.w	r7, r2, #8
 80123a6:	460b      	mov	r3, r1
 80123a8:	4614      	mov	r4, r2
 80123aa:	4606      	mov	r6, r0
 80123ac:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80123b0:	b085      	sub	sp, #20
 80123b2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80123b6:	4618      	mov	r0, r3
 80123b8:	4919      	ldr	r1, [pc, #100]	@ (8012420 <exact_match_lookup+0x80>)
 80123ba:	e894 000c 	ldmia.w	r4, {r2, r3}
 80123be:	f002 f9e5 	bl	801478c <rcutils_join_path>
 80123c2:	7833      	ldrb	r3, [r6, #0]
 80123c4:	2b2f      	cmp	r3, #47	@ 0x2f
 80123c6:	4605      	mov	r5, r0
 80123c8:	d023      	beq.n	8012412 <exact_match_lookup+0x72>
 80123ca:	f104 030c 	add.w	r3, r4, #12
 80123ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80123d2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80123d6:	1c70      	adds	r0, r6, #1
 80123d8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80123dc:	f002 f9dc 	bl	8014798 <rcutils_to_native_path>
 80123e0:	4606      	mov	r6, r0
 80123e2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80123e6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80123ea:	4631      	mov	r1, r6
 80123ec:	e894 000c 	ldmia.w	r4, {r2, r3}
 80123f0:	4628      	mov	r0, r5
 80123f2:	f002 f9cb 	bl	801478c <rcutils_join_path>
 80123f6:	6862      	ldr	r2, [r4, #4]
 80123f8:	6921      	ldr	r1, [r4, #16]
 80123fa:	4603      	mov	r3, r0
 80123fc:	4630      	mov	r0, r6
 80123fe:	461e      	mov	r6, r3
 8012400:	4790      	blx	r2
 8012402:	4628      	mov	r0, r5
 8012404:	6863      	ldr	r3, [r4, #4]
 8012406:	6921      	ldr	r1, [r4, #16]
 8012408:	4798      	blx	r3
 801240a:	4635      	mov	r5, r6
 801240c:	4628      	mov	r0, r5
 801240e:	b005      	add	sp, #20
 8012410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012412:	7873      	ldrb	r3, [r6, #1]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d1d8      	bne.n	80123ca <exact_match_lookup+0x2a>
 8012418:	4628      	mov	r0, r5
 801241a:	b005      	add	sp, #20
 801241c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801241e:	bf00      	nop
 8012420:	08018dc4 	.word	0x08018dc4

08012424 <rcl_get_secure_root>:
 8012424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012428:	b085      	sub	sp, #20
 801242a:	b168      	cbz	r0, 8012448 <rcl_get_secure_root+0x24>
 801242c:	4607      	mov	r7, r0
 801242e:	4608      	mov	r0, r1
 8012430:	460c      	mov	r4, r1
 8012432:	f7fa fd3b 	bl	800ceac <rcutils_allocator_is_valid>
 8012436:	b138      	cbz	r0, 8012448 <rcl_get_secure_root+0x24>
 8012438:	2300      	movs	r3, #0
 801243a:	482d      	ldr	r0, [pc, #180]	@ (80124f0 <rcl_get_secure_root+0xcc>)
 801243c:	9303      	str	r3, [sp, #12]
 801243e:	a903      	add	r1, sp, #12
 8012440:	f002 f98a 	bl	8014758 <rcutils_get_env>
 8012444:	4605      	mov	r5, r0
 8012446:	b120      	cbz	r0, 8012452 <rcl_get_secure_root+0x2e>
 8012448:	2500      	movs	r5, #0
 801244a:	4628      	mov	r0, r5
 801244c:	b005      	add	sp, #20
 801244e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012452:	9b03      	ldr	r3, [sp, #12]
 8012454:	781a      	ldrb	r2, [r3, #0]
 8012456:	2a00      	cmp	r2, #0
 8012458:	d0f6      	beq.n	8012448 <rcl_get_secure_root+0x24>
 801245a:	f104 090c 	add.w	r9, r4, #12
 801245e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012462:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012466:	4618      	mov	r0, r3
 8012468:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801246c:	f002 fab6 	bl	80149dc <rcutils_strdup>
 8012470:	4680      	mov	r8, r0
 8012472:	2800      	cmp	r0, #0
 8012474:	d0e8      	beq.n	8012448 <rcl_get_secure_root+0x24>
 8012476:	481f      	ldr	r0, [pc, #124]	@ (80124f4 <rcl_get_secure_root+0xd0>)
 8012478:	9503      	str	r5, [sp, #12]
 801247a:	a903      	add	r1, sp, #12
 801247c:	f002 f96c 	bl	8014758 <rcutils_get_env>
 8012480:	b160      	cbz	r0, 801249c <rcl_get_secure_root+0x78>
 8012482:	2600      	movs	r6, #0
 8012484:	6863      	ldr	r3, [r4, #4]
 8012486:	6921      	ldr	r1, [r4, #16]
 8012488:	4630      	mov	r0, r6
 801248a:	4798      	blx	r3
 801248c:	4640      	mov	r0, r8
 801248e:	6863      	ldr	r3, [r4, #4]
 8012490:	6921      	ldr	r1, [r4, #16]
 8012492:	4798      	blx	r3
 8012494:	4628      	mov	r0, r5
 8012496:	b005      	add	sp, #20
 8012498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801249c:	9b03      	ldr	r3, [sp, #12]
 801249e:	781e      	ldrb	r6, [r3, #0]
 80124a0:	b1f6      	cbz	r6, 80124e0 <rcl_get_secure_root+0xbc>
 80124a2:	e899 0003 	ldmia.w	r9, {r0, r1}
 80124a6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80124aa:	4618      	mov	r0, r3
 80124ac:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80124b0:	f002 fa94 	bl	80149dc <rcutils_strdup>
 80124b4:	4606      	mov	r6, r0
 80124b6:	2800      	cmp	r0, #0
 80124b8:	d0e3      	beq.n	8012482 <rcl_get_secure_root+0x5e>
 80124ba:	4622      	mov	r2, r4
 80124bc:	4641      	mov	r1, r8
 80124be:	f7ff ff6f 	bl	80123a0 <exact_match_lookup>
 80124c2:	4605      	mov	r5, r0
 80124c4:	2d00      	cmp	r5, #0
 80124c6:	d0dd      	beq.n	8012484 <rcl_get_secure_root+0x60>
 80124c8:	4628      	mov	r0, r5
 80124ca:	f002 f95d 	bl	8014788 <rcutils_is_directory>
 80124ce:	4603      	mov	r3, r0
 80124d0:	2800      	cmp	r0, #0
 80124d2:	d1d7      	bne.n	8012484 <rcl_get_secure_root+0x60>
 80124d4:	4628      	mov	r0, r5
 80124d6:	6921      	ldr	r1, [r4, #16]
 80124d8:	461d      	mov	r5, r3
 80124da:	6863      	ldr	r3, [r4, #4]
 80124dc:	4798      	blx	r3
 80124de:	e7d1      	b.n	8012484 <rcl_get_secure_root+0x60>
 80124e0:	4622      	mov	r2, r4
 80124e2:	4638      	mov	r0, r7
 80124e4:	4641      	mov	r1, r8
 80124e6:	f7ff ff5b 	bl	80123a0 <exact_match_lookup>
 80124ea:	4605      	mov	r5, r0
 80124ec:	e7ea      	b.n	80124c4 <rcl_get_secure_root+0xa0>
 80124ee:	bf00      	nop
 80124f0:	08018dd0 	.word	0x08018dd0
 80124f4:	08018de8 	.word	0x08018de8

080124f8 <rcl_get_security_options_from_environment>:
 80124f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124fc:	b082      	sub	sp, #8
 80124fe:	2300      	movs	r3, #0
 8012500:	4606      	mov	r6, r0
 8012502:	460f      	mov	r7, r1
 8012504:	4820      	ldr	r0, [pc, #128]	@ (8012588 <rcl_get_security_options_from_environment+0x90>)
 8012506:	9301      	str	r3, [sp, #4]
 8012508:	a901      	add	r1, sp, #4
 801250a:	4690      	mov	r8, r2
 801250c:	f002 f924 	bl	8014758 <rcutils_get_env>
 8012510:	b120      	cbz	r0, 801251c <rcl_get_security_options_from_environment+0x24>
 8012512:	2501      	movs	r5, #1
 8012514:	4628      	mov	r0, r5
 8012516:	b002      	add	sp, #8
 8012518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801251c:	491b      	ldr	r1, [pc, #108]	@ (801258c <rcl_get_security_options_from_environment+0x94>)
 801251e:	4604      	mov	r4, r0
 8012520:	9801      	ldr	r0, [sp, #4]
 8012522:	f7ed fe7d 	bl	8000220 <strcmp>
 8012526:	4605      	mov	r5, r0
 8012528:	b9e8      	cbnz	r0, 8012566 <rcl_get_security_options_from_environment+0x6e>
 801252a:	9001      	str	r0, [sp, #4]
 801252c:	f1b8 0f00 	cmp.w	r8, #0
 8012530:	d020      	beq.n	8012574 <rcl_get_security_options_from_environment+0x7c>
 8012532:	4817      	ldr	r0, [pc, #92]	@ (8012590 <rcl_get_security_options_from_environment+0x98>)
 8012534:	a901      	add	r1, sp, #4
 8012536:	f002 f90f 	bl	8014758 <rcutils_get_env>
 801253a:	2800      	cmp	r0, #0
 801253c:	d1e9      	bne.n	8012512 <rcl_get_security_options_from_environment+0x1a>
 801253e:	4915      	ldr	r1, [pc, #84]	@ (8012594 <rcl_get_security_options_from_environment+0x9c>)
 8012540:	9801      	ldr	r0, [sp, #4]
 8012542:	f7ed fe6d 	bl	8000220 <strcmp>
 8012546:	fab0 f080 	clz	r0, r0
 801254a:	0940      	lsrs	r0, r0, #5
 801254c:	f888 0000 	strb.w	r0, [r8]
 8012550:	4639      	mov	r1, r7
 8012552:	4630      	mov	r0, r6
 8012554:	f7ff ff66 	bl	8012424 <rcl_get_secure_root>
 8012558:	b170      	cbz	r0, 8012578 <rcl_get_security_options_from_environment+0x80>
 801255a:	f8c8 0004 	str.w	r0, [r8, #4]
 801255e:	4628      	mov	r0, r5
 8012560:	b002      	add	sp, #8
 8012562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012566:	4625      	mov	r5, r4
 8012568:	4628      	mov	r0, r5
 801256a:	f888 4000 	strb.w	r4, [r8]
 801256e:	b002      	add	sp, #8
 8012570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012574:	250b      	movs	r5, #11
 8012576:	e7cd      	b.n	8012514 <rcl_get_security_options_from_environment+0x1c>
 8012578:	f898 5000 	ldrb.w	r5, [r8]
 801257c:	f1a5 0501 	sub.w	r5, r5, #1
 8012580:	fab5 f585 	clz	r5, r5
 8012584:	096d      	lsrs	r5, r5, #5
 8012586:	e7c5      	b.n	8012514 <rcl_get_security_options_from_environment+0x1c>
 8012588:	08018d88 	.word	0x08018d88
 801258c:	08018d9c 	.word	0x08018d9c
 8012590:	08018da4 	.word	0x08018da4
 8012594:	08018dbc 	.word	0x08018dbc

08012598 <rcl_service_get_rmw_handle>:
 8012598:	b118      	cbz	r0, 80125a2 <rcl_service_get_rmw_handle+0xa>
 801259a:	6800      	ldr	r0, [r0, #0]
 801259c:	b108      	cbz	r0, 80125a2 <rcl_service_get_rmw_handle+0xa>
 801259e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80125a2:	4770      	bx	lr

080125a4 <rcl_take_request>:
 80125a4:	b570      	push	{r4, r5, r6, lr}
 80125a6:	468e      	mov	lr, r1
 80125a8:	460c      	mov	r4, r1
 80125aa:	4616      	mov	r6, r2
 80125ac:	4605      	mov	r5, r0
 80125ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80125b2:	b08c      	sub	sp, #48	@ 0x30
 80125b4:	f10d 0c18 	add.w	ip, sp, #24
 80125b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80125bc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80125c0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80125c4:	b30d      	cbz	r5, 801260a <rcl_take_request+0x66>
 80125c6:	682b      	ldr	r3, [r5, #0]
 80125c8:	b1fb      	cbz	r3, 801260a <rcl_take_request+0x66>
 80125ca:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80125ce:	b1e0      	cbz	r0, 801260a <rcl_take_request+0x66>
 80125d0:	b336      	cbz	r6, 8012620 <rcl_take_request+0x7c>
 80125d2:	2300      	movs	r3, #0
 80125d4:	f88d 3007 	strb.w	r3, [sp, #7]
 80125d8:	4632      	mov	r2, r6
 80125da:	f10d 0307 	add.w	r3, sp, #7
 80125de:	a902      	add	r1, sp, #8
 80125e0:	f002 ff58 	bl	8015494 <rmw_take_request>
 80125e4:	4605      	mov	r5, r0
 80125e6:	b198      	cbz	r0, 8012610 <rcl_take_request+0x6c>
 80125e8:	280a      	cmp	r0, #10
 80125ea:	bf18      	it	ne
 80125ec:	2501      	movne	r5, #1
 80125ee:	f10d 0e18 	add.w	lr, sp, #24
 80125f2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80125f6:	46a4      	mov	ip, r4
 80125f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80125fc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012600:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012604:	4628      	mov	r0, r5
 8012606:	b00c      	add	sp, #48	@ 0x30
 8012608:	bd70      	pop	{r4, r5, r6, pc}
 801260a:	f44f 7516 	mov.w	r5, #600	@ 0x258
 801260e:	e7ee      	b.n	80125ee <rcl_take_request+0x4a>
 8012610:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012614:	f240 2359 	movw	r3, #601	@ 0x259
 8012618:	2a00      	cmp	r2, #0
 801261a:	bf08      	it	eq
 801261c:	461d      	moveq	r5, r3
 801261e:	e7e6      	b.n	80125ee <rcl_take_request+0x4a>
 8012620:	250b      	movs	r5, #11
 8012622:	e7e4      	b.n	80125ee <rcl_take_request+0x4a>

08012624 <rcl_send_response>:
 8012624:	b170      	cbz	r0, 8012644 <rcl_send_response+0x20>
 8012626:	6800      	ldr	r0, [r0, #0]
 8012628:	b160      	cbz	r0, 8012644 <rcl_send_response+0x20>
 801262a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801262e:	b148      	cbz	r0, 8012644 <rcl_send_response+0x20>
 8012630:	b159      	cbz	r1, 801264a <rcl_send_response+0x26>
 8012632:	b510      	push	{r4, lr}
 8012634:	b15a      	cbz	r2, 801264e <rcl_send_response+0x2a>
 8012636:	f002 ff8b 	bl	8015550 <rmw_send_response>
 801263a:	b110      	cbz	r0, 8012642 <rcl_send_response+0x1e>
 801263c:	2802      	cmp	r0, #2
 801263e:	bf18      	it	ne
 8012640:	2001      	movne	r0, #1
 8012642:	bd10      	pop	{r4, pc}
 8012644:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8012648:	4770      	bx	lr
 801264a:	200b      	movs	r0, #11
 801264c:	4770      	bx	lr
 801264e:	200b      	movs	r0, #11
 8012650:	bd10      	pop	{r4, pc}
 8012652:	bf00      	nop

08012654 <rcl_service_is_valid>:
 8012654:	b130      	cbz	r0, 8012664 <rcl_service_is_valid+0x10>
 8012656:	6800      	ldr	r0, [r0, #0]
 8012658:	b120      	cbz	r0, 8012664 <rcl_service_is_valid+0x10>
 801265a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801265e:	3800      	subs	r0, #0
 8012660:	bf18      	it	ne
 8012662:	2001      	movne	r0, #1
 8012664:	4770      	bx	lr
 8012666:	bf00      	nop

08012668 <rcl_take>:
 8012668:	2800      	cmp	r0, #0
 801266a:	d04a      	beq.n	8012702 <rcl_take+0x9a>
 801266c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012670:	4604      	mov	r4, r0
 8012672:	6800      	ldr	r0, [r0, #0]
 8012674:	b0a4      	sub	sp, #144	@ 0x90
 8012676:	2800      	cmp	r0, #0
 8012678:	d03b      	beq.n	80126f2 <rcl_take+0x8a>
 801267a:	461f      	mov	r7, r3
 801267c:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8012680:	2b00      	cmp	r3, #0
 8012682:	d036      	beq.n	80126f2 <rcl_take+0x8a>
 8012684:	460e      	mov	r6, r1
 8012686:	2900      	cmp	r1, #0
 8012688:	d039      	beq.n	80126fe <rcl_take+0x96>
 801268a:	4615      	mov	r5, r2
 801268c:	2a00      	cmp	r2, #0
 801268e:	d03c      	beq.n	801270a <rcl_take+0xa2>
 8012690:	a802      	add	r0, sp, #8
 8012692:	f002 fba1 	bl	8014dd8 <rmw_get_zero_initialized_message_info>
 8012696:	f10d 0c08 	add.w	ip, sp, #8
 801269a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801269e:	46ae      	mov	lr, r5
 80126a0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80126a4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80126a8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80126ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80126b0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80126b4:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80126b8:	f04f 0800 	mov.w	r8, #0
 80126bc:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80126c0:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 80126c4:	6822      	ldr	r2, [r4, #0]
 80126c6:	462b      	mov	r3, r5
 80126c8:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 80126cc:	9700      	str	r7, [sp, #0]
 80126ce:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 80126d2:	4631      	mov	r1, r6
 80126d4:	f002 ffe2 	bl	801569c <rmw_take_with_info>
 80126d8:	4603      	mov	r3, r0
 80126da:	b9c0      	cbnz	r0, 801270e <rcl_take+0xa6>
 80126dc:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 80126e0:	f240 1291 	movw	r2, #401	@ 0x191
 80126e4:	2900      	cmp	r1, #0
 80126e6:	bf08      	it	eq
 80126e8:	4613      	moveq	r3, r2
 80126ea:	4618      	mov	r0, r3
 80126ec:	b024      	add	sp, #144	@ 0x90
 80126ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126f2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80126f6:	4618      	mov	r0, r3
 80126f8:	b024      	add	sp, #144	@ 0x90
 80126fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126fe:	230b      	movs	r3, #11
 8012700:	e7f3      	b.n	80126ea <rcl_take+0x82>
 8012702:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8012706:	4618      	mov	r0, r3
 8012708:	4770      	bx	lr
 801270a:	ad14      	add	r5, sp, #80	@ 0x50
 801270c:	e7c0      	b.n	8012690 <rcl_take+0x28>
 801270e:	f7ff fa51 	bl	8011bb4 <rcl_convert_rmw_ret_to_rcl_ret>
 8012712:	4603      	mov	r3, r0
 8012714:	e7e9      	b.n	80126ea <rcl_take+0x82>
 8012716:	bf00      	nop

08012718 <rcl_subscription_get_rmw_handle>:
 8012718:	b118      	cbz	r0, 8012722 <rcl_subscription_get_rmw_handle+0xa>
 801271a:	6800      	ldr	r0, [r0, #0]
 801271c:	b108      	cbz	r0, 8012722 <rcl_subscription_get_rmw_handle+0xa>
 801271e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8012722:	4770      	bx	lr

08012724 <rcl_subscription_is_valid>:
 8012724:	b130      	cbz	r0, 8012734 <rcl_subscription_is_valid+0x10>
 8012726:	6800      	ldr	r0, [r0, #0]
 8012728:	b120      	cbz	r0, 8012734 <rcl_subscription_is_valid+0x10>
 801272a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801272e:	3800      	subs	r0, #0
 8012730:	bf18      	it	ne
 8012732:	2001      	movne	r0, #1
 8012734:	4770      	bx	lr
 8012736:	bf00      	nop

08012738 <rcl_get_system_time>:
 8012738:	4608      	mov	r0, r1
 801273a:	f7fa bbf9 	b.w	800cf30 <rcutils_system_time_now>
 801273e:	bf00      	nop

08012740 <rcl_get_steady_time>:
 8012740:	4608      	mov	r0, r1
 8012742:	f7fa bc1d 	b.w	800cf80 <rcutils_steady_time_now>
 8012746:	bf00      	nop

08012748 <rcl_get_ros_time>:
 8012748:	7a03      	ldrb	r3, [r0, #8]
 801274a:	b510      	push	{r4, lr}
 801274c:	460c      	mov	r4, r1
 801274e:	b133      	cbz	r3, 801275e <rcl_get_ros_time+0x16>
 8012750:	2105      	movs	r1, #5
 8012752:	f001 ff5d 	bl	8014610 <__atomic_load_8>
 8012756:	e9c4 0100 	strd	r0, r1, [r4]
 801275a:	2000      	movs	r0, #0
 801275c:	bd10      	pop	{r4, pc}
 801275e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012762:	4608      	mov	r0, r1
 8012764:	f7fa bbe4 	b.w	800cf30 <rcutils_system_time_now>

08012768 <rcl_clock_init>:
 8012768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801276a:	4605      	mov	r5, r0
 801276c:	4610      	mov	r0, r2
 801276e:	4614      	mov	r4, r2
 8012770:	460e      	mov	r6, r1
 8012772:	f7fa fb9b 	bl	800ceac <rcutils_allocator_is_valid>
 8012776:	b128      	cbz	r0, 8012784 <rcl_clock_init+0x1c>
 8012778:	2d03      	cmp	r5, #3
 801277a:	d803      	bhi.n	8012784 <rcl_clock_init+0x1c>
 801277c:	e8df f005 	tbb	[pc, r5]
 8012780:	06532e1d 	.word	0x06532e1d
 8012784:	f04f 0c0b 	mov.w	ip, #11
 8012788:	4660      	mov	r0, ip
 801278a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801278c:	2e00      	cmp	r6, #0
 801278e:	d0f9      	beq.n	8012784 <rcl_clock_init+0x1c>
 8012790:	2c00      	cmp	r4, #0
 8012792:	d0f7      	beq.n	8012784 <rcl_clock_init+0x1c>
 8012794:	2300      	movs	r3, #0
 8012796:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801279a:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8012850 <rcl_clock_init+0xe8>
 801279e:	6133      	str	r3, [r6, #16]
 80127a0:	f106 0514 	add.w	r5, r6, #20
 80127a4:	469c      	mov	ip, r3
 80127a6:	2703      	movs	r7, #3
 80127a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80127aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80127ac:	6823      	ldr	r3, [r4, #0]
 80127ae:	602b      	str	r3, [r5, #0]
 80127b0:	7037      	strb	r7, [r6, #0]
 80127b2:	f8c6 e00c 	str.w	lr, [r6, #12]
 80127b6:	4660      	mov	r0, ip
 80127b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127ba:	2e00      	cmp	r6, #0
 80127bc:	d0e2      	beq.n	8012784 <rcl_clock_init+0x1c>
 80127be:	2300      	movs	r3, #0
 80127c0:	7033      	strb	r3, [r6, #0]
 80127c2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80127c6:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80127ca:	469c      	mov	ip, r3
 80127cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80127ce:	f106 0514 	add.w	r5, r6, #20
 80127d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80127d4:	6823      	ldr	r3, [r4, #0]
 80127d6:	602b      	str	r3, [r5, #0]
 80127d8:	4660      	mov	r0, ip
 80127da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127dc:	2e00      	cmp	r6, #0
 80127de:	d0d1      	beq.n	8012784 <rcl_clock_init+0x1c>
 80127e0:	2c00      	cmp	r4, #0
 80127e2:	d0cf      	beq.n	8012784 <rcl_clock_init+0x1c>
 80127e4:	2700      	movs	r7, #0
 80127e6:	7037      	strb	r7, [r6, #0]
 80127e8:	46a4      	mov	ip, r4
 80127ea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80127ee:	f106 0514 	add.w	r5, r6, #20
 80127f2:	e9c6 7701 	strd	r7, r7, [r6, #4]
 80127f6:	e9c6 7703 	strd	r7, r7, [r6, #12]
 80127fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80127fc:	f8dc 3000 	ldr.w	r3, [ip]
 8012800:	602b      	str	r3, [r5, #0]
 8012802:	6921      	ldr	r1, [r4, #16]
 8012804:	6823      	ldr	r3, [r4, #0]
 8012806:	2010      	movs	r0, #16
 8012808:	4798      	blx	r3
 801280a:	6130      	str	r0, [r6, #16]
 801280c:	b1d0      	cbz	r0, 8012844 <rcl_clock_init+0xdc>
 801280e:	2200      	movs	r2, #0
 8012810:	2300      	movs	r3, #0
 8012812:	e9c0 2300 	strd	r2, r3, [r0]
 8012816:	2301      	movs	r3, #1
 8012818:	7207      	strb	r7, [r0, #8]
 801281a:	4a0c      	ldr	r2, [pc, #48]	@ (801284c <rcl_clock_init+0xe4>)
 801281c:	7033      	strb	r3, [r6, #0]
 801281e:	46bc      	mov	ip, r7
 8012820:	60f2      	str	r2, [r6, #12]
 8012822:	4660      	mov	r0, ip
 8012824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012826:	2e00      	cmp	r6, #0
 8012828:	d0ac      	beq.n	8012784 <rcl_clock_init+0x1c>
 801282a:	2c00      	cmp	r4, #0
 801282c:	d0aa      	beq.n	8012784 <rcl_clock_init+0x1c>
 801282e:	2300      	movs	r3, #0
 8012830:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012834:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8012854 <rcl_clock_init+0xec>
 8012838:	6133      	str	r3, [r6, #16]
 801283a:	f106 0514 	add.w	r5, r6, #20
 801283e:	469c      	mov	ip, r3
 8012840:	2702      	movs	r7, #2
 8012842:	e7b1      	b.n	80127a8 <rcl_clock_init+0x40>
 8012844:	f04f 0c0a 	mov.w	ip, #10
 8012848:	e79e      	b.n	8012788 <rcl_clock_init+0x20>
 801284a:	bf00      	nop
 801284c:	08012749 	.word	0x08012749
 8012850:	08012741 	.word	0x08012741
 8012854:	08012739 	.word	0x08012739

08012858 <rcl_clock_get_now>:
 8012858:	b140      	cbz	r0, 801286c <rcl_clock_get_now+0x14>
 801285a:	b139      	cbz	r1, 801286c <rcl_clock_get_now+0x14>
 801285c:	7803      	ldrb	r3, [r0, #0]
 801285e:	b11b      	cbz	r3, 8012868 <rcl_clock_get_now+0x10>
 8012860:	68c3      	ldr	r3, [r0, #12]
 8012862:	b10b      	cbz	r3, 8012868 <rcl_clock_get_now+0x10>
 8012864:	6900      	ldr	r0, [r0, #16]
 8012866:	4718      	bx	r3
 8012868:	2001      	movs	r0, #1
 801286a:	4770      	bx	lr
 801286c:	200b      	movs	r0, #11
 801286e:	4770      	bx	lr

08012870 <rcl_clock_add_jump_callback>:
 8012870:	b082      	sub	sp, #8
 8012872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012876:	a906      	add	r1, sp, #24
 8012878:	e881 000c 	stmia.w	r1, {r2, r3}
 801287c:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8012880:	b320      	cbz	r0, 80128cc <rcl_clock_add_jump_callback+0x5c>
 8012882:	4604      	mov	r4, r0
 8012884:	3014      	adds	r0, #20
 8012886:	f7fa fb11 	bl	800ceac <rcutils_allocator_is_valid>
 801288a:	b1f8      	cbz	r0, 80128cc <rcl_clock_add_jump_callback+0x5c>
 801288c:	b1f6      	cbz	r6, 80128cc <rcl_clock_add_jump_callback+0x5c>
 801288e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012890:	2b00      	cmp	r3, #0
 8012892:	db1b      	blt.n	80128cc <rcl_clock_add_jump_callback+0x5c>
 8012894:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8012898:	2a01      	cmp	r2, #1
 801289a:	f173 0300 	sbcs.w	r3, r3, #0
 801289e:	da15      	bge.n	80128cc <rcl_clock_add_jump_callback+0x5c>
 80128a0:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 80128a4:	2f00      	cmp	r7, #0
 80128a6:	d042      	beq.n	801292e <rcl_clock_add_jump_callback+0xbe>
 80128a8:	2300      	movs	r3, #0
 80128aa:	4602      	mov	r2, r0
 80128ac:	e003      	b.n	80128b6 <rcl_clock_add_jump_callback+0x46>
 80128ae:	42bb      	cmp	r3, r7
 80128b0:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80128b4:	d011      	beq.n	80128da <rcl_clock_add_jump_callback+0x6a>
 80128b6:	6811      	ldr	r1, [r2, #0]
 80128b8:	42b1      	cmp	r1, r6
 80128ba:	f103 0301 	add.w	r3, r3, #1
 80128be:	d1f6      	bne.n	80128ae <rcl_clock_add_jump_callback+0x3e>
 80128c0:	6a11      	ldr	r1, [r2, #32]
 80128c2:	42a9      	cmp	r1, r5
 80128c4:	d1f3      	bne.n	80128ae <rcl_clock_add_jump_callback+0x3e>
 80128c6:	f04f 0e01 	mov.w	lr, #1
 80128ca:	e001      	b.n	80128d0 <rcl_clock_add_jump_callback+0x60>
 80128cc:	f04f 0e0b 	mov.w	lr, #11
 80128d0:	4670      	mov	r0, lr
 80128d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80128d6:	b002      	add	sp, #8
 80128d8:	4770      	bx	lr
 80128da:	3301      	adds	r3, #1
 80128dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80128e0:	00d9      	lsls	r1, r3, #3
 80128e2:	69e3      	ldr	r3, [r4, #28]
 80128e4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80128e6:	4798      	blx	r3
 80128e8:	b1f0      	cbz	r0, 8012928 <rcl_clock_add_jump_callback+0xb8>
 80128ea:	68a3      	ldr	r3, [r4, #8]
 80128ec:	6060      	str	r0, [r4, #4]
 80128ee:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80128f2:	f10d 0c18 	add.w	ip, sp, #24
 80128f6:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 80128fa:	f103 0801 	add.w	r8, r3, #1
 80128fe:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8012902:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012906:	f106 0708 	add.w	r7, r6, #8
 801290a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801290c:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8012910:	f04f 0e00 	mov.w	lr, #0
 8012914:	e887 0003 	stmia.w	r7, {r0, r1}
 8012918:	6235      	str	r5, [r6, #32]
 801291a:	4670      	mov	r0, lr
 801291c:	f8c4 8008 	str.w	r8, [r4, #8]
 8012920:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012924:	b002      	add	sp, #8
 8012926:	4770      	bx	lr
 8012928:	f04f 0e0a 	mov.w	lr, #10
 801292c:	e7d0      	b.n	80128d0 <rcl_clock_add_jump_callback+0x60>
 801292e:	2128      	movs	r1, #40	@ 0x28
 8012930:	e7d7      	b.n	80128e2 <rcl_clock_add_jump_callback+0x72>
 8012932:	bf00      	nop

08012934 <rcl_clock_remove_jump_callback>:
 8012934:	2800      	cmp	r0, #0
 8012936:	d057      	beq.n	80129e8 <rcl_clock_remove_jump_callback+0xb4>
 8012938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801293c:	4605      	mov	r5, r0
 801293e:	3014      	adds	r0, #20
 8012940:	4688      	mov	r8, r1
 8012942:	4692      	mov	sl, r2
 8012944:	f7fa fab2 	bl	800ceac <rcutils_allocator_is_valid>
 8012948:	2800      	cmp	r0, #0
 801294a:	d03b      	beq.n	80129c4 <rcl_clock_remove_jump_callback+0x90>
 801294c:	f1b8 0f00 	cmp.w	r8, #0
 8012950:	d038      	beq.n	80129c4 <rcl_clock_remove_jump_callback+0x90>
 8012952:	68ae      	ldr	r6, [r5, #8]
 8012954:	b166      	cbz	r6, 8012970 <rcl_clock_remove_jump_callback+0x3c>
 8012956:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801295a:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 801295e:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 8012962:	464c      	mov	r4, r9
 8012964:	6823      	ldr	r3, [r4, #0]
 8012966:	4543      	cmp	r3, r8
 8012968:	d005      	beq.n	8012976 <rcl_clock_remove_jump_callback+0x42>
 801296a:	3428      	adds	r4, #40	@ 0x28
 801296c:	42a7      	cmp	r7, r4
 801296e:	d1f9      	bne.n	8012964 <rcl_clock_remove_jump_callback+0x30>
 8012970:	2001      	movs	r0, #1
 8012972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012976:	6a23      	ldr	r3, [r4, #32]
 8012978:	3428      	adds	r4, #40	@ 0x28
 801297a:	42bc      	cmp	r4, r7
 801297c:	d02d      	beq.n	80129da <rcl_clock_remove_jump_callback+0xa6>
 801297e:	4553      	cmp	r3, sl
 8012980:	d1f0      	bne.n	8012964 <rcl_clock_remove_jump_callback+0x30>
 8012982:	46a6      	mov	lr, r4
 8012984:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012988:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 801298c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012990:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012994:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012998:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801299c:	3428      	adds	r4, #40	@ 0x28
 801299e:	42a7      	cmp	r7, r4
 80129a0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80129a4:	d1ed      	bne.n	8012982 <rcl_clock_remove_jump_callback+0x4e>
 80129a6:	3e01      	subs	r6, #1
 80129a8:	60ae      	str	r6, [r5, #8]
 80129aa:	b176      	cbz	r6, 80129ca <rcl_clock_remove_jump_callback+0x96>
 80129ac:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80129b0:	69eb      	ldr	r3, [r5, #28]
 80129b2:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80129b4:	00f1      	lsls	r1, r6, #3
 80129b6:	4648      	mov	r0, r9
 80129b8:	4798      	blx	r3
 80129ba:	b1b8      	cbz	r0, 80129ec <rcl_clock_remove_jump_callback+0xb8>
 80129bc:	6068      	str	r0, [r5, #4]
 80129be:	2000      	movs	r0, #0
 80129c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129c4:	200b      	movs	r0, #11
 80129c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129ca:	4648      	mov	r0, r9
 80129cc:	69ab      	ldr	r3, [r5, #24]
 80129ce:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 80129d0:	4798      	blx	r3
 80129d2:	606e      	str	r6, [r5, #4]
 80129d4:	4630      	mov	r0, r6
 80129d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129da:	4553      	cmp	r3, sl
 80129dc:	d1c8      	bne.n	8012970 <rcl_clock_remove_jump_callback+0x3c>
 80129de:	3e01      	subs	r6, #1
 80129e0:	60ae      	str	r6, [r5, #8]
 80129e2:	2e00      	cmp	r6, #0
 80129e4:	d1e2      	bne.n	80129ac <rcl_clock_remove_jump_callback+0x78>
 80129e6:	e7f0      	b.n	80129ca <rcl_clock_remove_jump_callback+0x96>
 80129e8:	200b      	movs	r0, #11
 80129ea:	4770      	bx	lr
 80129ec:	200a      	movs	r0, #10
 80129ee:	e7ea      	b.n	80129c6 <rcl_clock_remove_jump_callback+0x92>

080129f0 <_rcl_timer_time_jump>:
 80129f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80129f4:	4605      	mov	r5, r0
 80129f6:	b084      	sub	sp, #16
 80129f8:	4614      	mov	r4, r2
 80129fa:	b131      	cbz	r1, 8012a0a <_rcl_timer_time_jump+0x1a>
 80129fc:	7803      	ldrb	r3, [r0, #0]
 80129fe:	3b02      	subs	r3, #2
 8012a00:	2b01      	cmp	r3, #1
 8012a02:	d93f      	bls.n	8012a84 <_rcl_timer_time_jump+0x94>
 8012a04:	b004      	add	sp, #16
 8012a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a0a:	6813      	ldr	r3, [r2, #0]
 8012a0c:	a902      	add	r1, sp, #8
 8012a0e:	6818      	ldr	r0, [r3, #0]
 8012a10:	f7ff ff22 	bl	8012858 <rcl_clock_get_now>
 8012a14:	2800      	cmp	r0, #0
 8012a16:	d1f5      	bne.n	8012a04 <_rcl_timer_time_jump+0x14>
 8012a18:	6820      	ldr	r0, [r4, #0]
 8012a1a:	2105      	movs	r1, #5
 8012a1c:	3020      	adds	r0, #32
 8012a1e:	f001 fdf7 	bl	8014610 <__atomic_load_8>
 8012a22:	6823      	ldr	r3, [r4, #0]
 8012a24:	4681      	mov	r9, r0
 8012a26:	4688      	mov	r8, r1
 8012a28:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8012a2c:	2105      	movs	r1, #5
 8012a2e:	f001 fdef 	bl	8014610 <__atomic_load_8>
 8012a32:	4607      	mov	r7, r0
 8012a34:	6820      	ldr	r0, [r4, #0]
 8012a36:	460e      	mov	r6, r1
 8012a38:	3018      	adds	r0, #24
 8012a3a:	2105      	movs	r1, #5
 8012a3c:	f001 fde8 	bl	8014610 <__atomic_load_8>
 8012a40:	782b      	ldrb	r3, [r5, #0]
 8012a42:	9a02      	ldr	r2, [sp, #8]
 8012a44:	3b02      	subs	r3, #2
 8012a46:	2b01      	cmp	r3, #1
 8012a48:	460d      	mov	r5, r1
 8012a4a:	9b03      	ldr	r3, [sp, #12]
 8012a4c:	4682      	mov	sl, r0
 8012a4e:	d937      	bls.n	8012ac0 <_rcl_timer_time_jump+0xd0>
 8012a50:	42ba      	cmp	r2, r7
 8012a52:	eb73 0106 	sbcs.w	r1, r3, r6
 8012a56:	da5f      	bge.n	8012b18 <_rcl_timer_time_jump+0x128>
 8012a58:	454a      	cmp	r2, r9
 8012a5a:	eb73 0108 	sbcs.w	r1, r3, r8
 8012a5e:	dad1      	bge.n	8012a04 <_rcl_timer_time_jump+0x14>
 8012a60:	6820      	ldr	r0, [r4, #0]
 8012a62:	eb1a 0202 	adds.w	r2, sl, r2
 8012a66:	eb43 0305 	adc.w	r3, r3, r5
 8012a6a:	2505      	movs	r5, #5
 8012a6c:	3028      	adds	r0, #40	@ 0x28
 8012a6e:	9500      	str	r5, [sp, #0]
 8012a70:	f001 fe04 	bl	801467c <__atomic_store_8>
 8012a74:	6820      	ldr	r0, [r4, #0]
 8012a76:	9500      	str	r5, [sp, #0]
 8012a78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012a7c:	3020      	adds	r0, #32
 8012a7e:	f001 fdfd 	bl	801467c <__atomic_store_8>
 8012a82:	e7bf      	b.n	8012a04 <_rcl_timer_time_jump+0x14>
 8012a84:	6813      	ldr	r3, [r2, #0]
 8012a86:	a902      	add	r1, sp, #8
 8012a88:	6818      	ldr	r0, [r3, #0]
 8012a8a:	f7ff fee5 	bl	8012858 <rcl_clock_get_now>
 8012a8e:	2800      	cmp	r0, #0
 8012a90:	d1b8      	bne.n	8012a04 <_rcl_timer_time_jump+0x14>
 8012a92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012a96:	4313      	orrs	r3, r2
 8012a98:	d0b4      	beq.n	8012a04 <_rcl_timer_time_jump+0x14>
 8012a9a:	6820      	ldr	r0, [r4, #0]
 8012a9c:	2105      	movs	r1, #5
 8012a9e:	3028      	adds	r0, #40	@ 0x28
 8012aa0:	f001 fdb6 	bl	8014610 <__atomic_load_8>
 8012aa4:	9d02      	ldr	r5, [sp, #8]
 8012aa6:	9b03      	ldr	r3, [sp, #12]
 8012aa8:	4602      	mov	r2, r0
 8012aaa:	6820      	ldr	r0, [r4, #0]
 8012aac:	1b52      	subs	r2, r2, r5
 8012aae:	f04f 0405 	mov.w	r4, #5
 8012ab2:	9400      	str	r4, [sp, #0]
 8012ab4:	eb61 0303 	sbc.w	r3, r1, r3
 8012ab8:	3030      	adds	r0, #48	@ 0x30
 8012aba:	f001 fddf 	bl	801467c <__atomic_store_8>
 8012abe:	e7a1      	b.n	8012a04 <_rcl_timer_time_jump+0x14>
 8012ac0:	4313      	orrs	r3, r2
 8012ac2:	d09f      	beq.n	8012a04 <_rcl_timer_time_jump+0x14>
 8012ac4:	6820      	ldr	r0, [r4, #0]
 8012ac6:	f04f 0805 	mov.w	r8, #5
 8012aca:	2300      	movs	r3, #0
 8012acc:	f8cd 8000 	str.w	r8, [sp]
 8012ad0:	3030      	adds	r0, #48	@ 0x30
 8012ad2:	2200      	movs	r2, #0
 8012ad4:	f001 fe08 	bl	80146e8 <__atomic_exchange_8>
 8012ad8:	ea51 0300 	orrs.w	r3, r1, r0
 8012adc:	4606      	mov	r6, r0
 8012ade:	460f      	mov	r7, r1
 8012ae0:	d090      	beq.n	8012a04 <_rcl_timer_time_jump+0x14>
 8012ae2:	9a02      	ldr	r2, [sp, #8]
 8012ae4:	9b03      	ldr	r3, [sp, #12]
 8012ae6:	f8cd 8000 	str.w	r8, [sp]
 8012aea:	1a12      	subs	r2, r2, r0
 8012aec:	6820      	ldr	r0, [r4, #0]
 8012aee:	eb63 0301 	sbc.w	r3, r3, r1
 8012af2:	eb12 020a 	adds.w	r2, r2, sl
 8012af6:	eb43 0305 	adc.w	r3, r3, r5
 8012afa:	3028      	adds	r0, #40	@ 0x28
 8012afc:	f001 fdbe 	bl	801467c <__atomic_store_8>
 8012b00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012b04:	f8cd 8000 	str.w	r8, [sp]
 8012b08:	6820      	ldr	r0, [r4, #0]
 8012b0a:	1b92      	subs	r2, r2, r6
 8012b0c:	eb63 0307 	sbc.w	r3, r3, r7
 8012b10:	3020      	adds	r0, #32
 8012b12:	f001 fdb3 	bl	801467c <__atomic_store_8>
 8012b16:	e775      	b.n	8012a04 <_rcl_timer_time_jump+0x14>
 8012b18:	6820      	ldr	r0, [r4, #0]
 8012b1a:	3008      	adds	r0, #8
 8012b1c:	f004 f93c 	bl	8016d98 <rcl_trigger_guard_condition>
 8012b20:	e770      	b.n	8012a04 <_rcl_timer_time_jump+0x14>
 8012b22:	bf00      	nop

08012b24 <rcl_get_zero_initialized_timer>:
 8012b24:	4b01      	ldr	r3, [pc, #4]	@ (8012b2c <rcl_get_zero_initialized_timer+0x8>)
 8012b26:	6818      	ldr	r0, [r3, #0]
 8012b28:	4770      	bx	lr
 8012b2a:	bf00      	nop
 8012b2c:	08018e08 	.word	0x08018e08

08012b30 <rcl_timer_init>:
 8012b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b34:	b0aa      	sub	sp, #168	@ 0xa8
 8012b36:	4604      	mov	r4, r0
 8012b38:	a835      	add	r0, sp, #212	@ 0xd4
 8012b3a:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 8012b3e:	460d      	mov	r5, r1
 8012b40:	4692      	mov	sl, r2
 8012b42:	f7fa f9b3 	bl	800ceac <rcutils_allocator_is_valid>
 8012b46:	2800      	cmp	r0, #0
 8012b48:	d064      	beq.n	8012c14 <rcl_timer_init+0xe4>
 8012b4a:	2c00      	cmp	r4, #0
 8012b4c:	d062      	beq.n	8012c14 <rcl_timer_init+0xe4>
 8012b4e:	2d00      	cmp	r5, #0
 8012b50:	d060      	beq.n	8012c14 <rcl_timer_init+0xe4>
 8012b52:	2f00      	cmp	r7, #0
 8012b54:	db5e      	blt.n	8012c14 <rcl_timer_init+0xe4>
 8012b56:	6823      	ldr	r3, [r4, #0]
 8012b58:	b123      	cbz	r3, 8012b64 <rcl_timer_init+0x34>
 8012b5a:	2664      	movs	r6, #100	@ 0x64
 8012b5c:	4630      	mov	r0, r6
 8012b5e:	b02a      	add	sp, #168	@ 0xa8
 8012b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b64:	a908      	add	r1, sp, #32
 8012b66:	4628      	mov	r0, r5
 8012b68:	f7ff fe76 	bl	8012858 <rcl_clock_get_now>
 8012b6c:	4606      	mov	r6, r0
 8012b6e:	2800      	cmp	r0, #0
 8012b70:	d1f4      	bne.n	8012b5c <rcl_timer_init+0x2c>
 8012b72:	ae06      	add	r6, sp, #24
 8012b74:	4630      	mov	r0, r6
 8012b76:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 8012b7a:	f004 f815 	bl	8016ba8 <rcl_get_zero_initialized_guard_condition>
 8012b7e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8012b82:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 8012b86:	ae0b      	add	r6, sp, #44	@ 0x2c
 8012b88:	e889 0003 	stmia.w	r9, {r0, r1}
 8012b8c:	4630      	mov	r0, r6
 8012b8e:	f004 f8e7 	bl	8016d60 <rcl_guard_condition_get_default_options>
 8012b92:	ab0d      	add	r3, sp, #52	@ 0x34
 8012b94:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012b98:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012b9c:	4651      	mov	r1, sl
 8012b9e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012ba2:	4648      	mov	r0, r9
 8012ba4:	f004 f80a 	bl	8016bbc <rcl_guard_condition_init>
 8012ba8:	4606      	mov	r6, r0
 8012baa:	2800      	cmp	r0, #0
 8012bac:	d1d6      	bne.n	8012b5c <rcl_timer_init+0x2c>
 8012bae:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012bb0:	781b      	ldrb	r3, [r3, #0]
 8012bb2:	2b01      	cmp	r3, #1
 8012bb4:	d033      	beq.n	8012c1e <rcl_timer_init+0xee>
 8012bb6:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8012bb8:	911a      	str	r1, [sp, #104]	@ 0x68
 8012bba:	4642      	mov	r2, r8
 8012bbc:	463b      	mov	r3, r7
 8012bbe:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8012bc2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012bc6:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8012c78 <rcl_timer_init+0x148>
 8012bca:	eb12 0008 	adds.w	r0, r2, r8
 8012bce:	eb47 0103 	adc.w	r1, r7, r3
 8012bd2:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 8012bd6:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8012bda:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8012bde:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8012be2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012be6:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8012bea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012bee:	f8de 3000 	ldr.w	r3, [lr]
 8012bf2:	f8cc 3000 	str.w	r3, [ip]
 8012bf6:	f04f 0a00 	mov.w	sl, #0
 8012bfa:	4619      	mov	r1, r3
 8012bfc:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8012c00:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8012c02:	2050      	movs	r0, #80	@ 0x50
 8012c04:	4798      	blx	r3
 8012c06:	6020      	str	r0, [r4, #0]
 8012c08:	b358      	cbz	r0, 8012c62 <rcl_timer_init+0x132>
 8012c0a:	2250      	movs	r2, #80	@ 0x50
 8012c0c:	a916      	add	r1, sp, #88	@ 0x58
 8012c0e:	f004 fe96 	bl	801793e <memcpy>
 8012c12:	e7a3      	b.n	8012b5c <rcl_timer_init+0x2c>
 8012c14:	260b      	movs	r6, #11
 8012c16:	4630      	mov	r0, r6
 8012c18:	b02a      	add	sp, #168	@ 0xa8
 8012c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c1e:	2001      	movs	r0, #1
 8012c20:	2100      	movs	r1, #0
 8012c22:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8012c26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012c2a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8012c2e:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8012c32:	4a13      	ldr	r2, [pc, #76]	@ (8012c80 <rcl_timer_init+0x150>)
 8012c34:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8012c38:	9405      	str	r4, [sp, #20]
 8012c3a:	9204      	str	r2, [sp, #16]
 8012c3c:	ab12      	add	r3, sp, #72	@ 0x48
 8012c3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012c40:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8012c44:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8012c48:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8012c4c:	4628      	mov	r0, r5
 8012c4e:	f7ff fe0f 	bl	8012870 <rcl_clock_add_jump_callback>
 8012c52:	4682      	mov	sl, r0
 8012c54:	2800      	cmp	r0, #0
 8012c56:	d0ae      	beq.n	8012bb6 <rcl_timer_init+0x86>
 8012c58:	4648      	mov	r0, r9
 8012c5a:	f004 f85b 	bl	8016d14 <rcl_guard_condition_fini>
 8012c5e:	4656      	mov	r6, sl
 8012c60:	e77c      	b.n	8012b5c <rcl_timer_init+0x2c>
 8012c62:	4648      	mov	r0, r9
 8012c64:	f004 f856 	bl	8016d14 <rcl_guard_condition_fini>
 8012c68:	4905      	ldr	r1, [pc, #20]	@ (8012c80 <rcl_timer_init+0x150>)
 8012c6a:	4622      	mov	r2, r4
 8012c6c:	4628      	mov	r0, r5
 8012c6e:	f7ff fe61 	bl	8012934 <rcl_clock_remove_jump_callback>
 8012c72:	260a      	movs	r6, #10
 8012c74:	e772      	b.n	8012b5c <rcl_timer_init+0x2c>
 8012c76:	bf00      	nop
	...
 8012c80:	080129f1 	.word	0x080129f1

08012c84 <rcl_timer_call>:
 8012c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c88:	b087      	sub	sp, #28
 8012c8a:	2800      	cmp	r0, #0
 8012c8c:	d06d      	beq.n	8012d6a <rcl_timer_call+0xe6>
 8012c8e:	6803      	ldr	r3, [r0, #0]
 8012c90:	4604      	mov	r4, r0
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d063      	beq.n	8012d5e <rcl_timer_call+0xda>
 8012c96:	f3bf 8f5b 	dmb	ish
 8012c9a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012c9e:	f3bf 8f5b 	dmb	ish
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d150      	bne.n	8012d48 <rcl_timer_call+0xc4>
 8012ca6:	6803      	ldr	r3, [r0, #0]
 8012ca8:	a904      	add	r1, sp, #16
 8012caa:	6818      	ldr	r0, [r3, #0]
 8012cac:	f7ff fdd4 	bl	8012858 <rcl_clock_get_now>
 8012cb0:	4605      	mov	r5, r0
 8012cb2:	2800      	cmp	r0, #0
 8012cb4:	d14a      	bne.n	8012d4c <rcl_timer_call+0xc8>
 8012cb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	db4a      	blt.n	8012d54 <rcl_timer_call+0xd0>
 8012cbe:	6820      	ldr	r0, [r4, #0]
 8012cc0:	f04f 0a05 	mov.w	sl, #5
 8012cc4:	f8cd a000 	str.w	sl, [sp]
 8012cc8:	3020      	adds	r0, #32
 8012cca:	f001 fd0d 	bl	80146e8 <__atomic_exchange_8>
 8012cce:	6823      	ldr	r3, [r4, #0]
 8012cd0:	f3bf 8f5b 	dmb	ish
 8012cd4:	4680      	mov	r8, r0
 8012cd6:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8012cda:	f3bf 8f5b 	dmb	ish
 8012cde:	6820      	ldr	r0, [r4, #0]
 8012ce0:	4689      	mov	r9, r1
 8012ce2:	3028      	adds	r0, #40	@ 0x28
 8012ce4:	4651      	mov	r1, sl
 8012ce6:	f001 fc93 	bl	8014610 <__atomic_load_8>
 8012cea:	4606      	mov	r6, r0
 8012cec:	6820      	ldr	r0, [r4, #0]
 8012cee:	460f      	mov	r7, r1
 8012cf0:	3018      	adds	r0, #24
 8012cf2:	4651      	mov	r1, sl
 8012cf4:	f001 fc8c 	bl	8014610 <__atomic_load_8>
 8012cf8:	1836      	adds	r6, r6, r0
 8012cfa:	4602      	mov	r2, r0
 8012cfc:	4682      	mov	sl, r0
 8012cfe:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8012d02:	eb47 0701 	adc.w	r7, r7, r1
 8012d06:	4286      	cmp	r6, r0
 8012d08:	460b      	mov	r3, r1
 8012d0a:	eb77 010c 	sbcs.w	r1, r7, ip
 8012d0e:	da04      	bge.n	8012d1a <rcl_timer_call+0x96>
 8012d10:	ea53 0102 	orrs.w	r1, r3, r2
 8012d14:	d12e      	bne.n	8012d74 <rcl_timer_call+0xf0>
 8012d16:	4606      	mov	r6, r0
 8012d18:	4667      	mov	r7, ip
 8012d1a:	6820      	ldr	r0, [r4, #0]
 8012d1c:	2105      	movs	r1, #5
 8012d1e:	4632      	mov	r2, r6
 8012d20:	463b      	mov	r3, r7
 8012d22:	3028      	adds	r0, #40	@ 0x28
 8012d24:	9100      	str	r1, [sp, #0]
 8012d26:	f001 fca9 	bl	801467c <__atomic_store_8>
 8012d2a:	f1bb 0f00 	cmp.w	fp, #0
 8012d2e:	d00d      	beq.n	8012d4c <rcl_timer_call+0xc8>
 8012d30:	9a04      	ldr	r2, [sp, #16]
 8012d32:	9b05      	ldr	r3, [sp, #20]
 8012d34:	ebb2 0208 	subs.w	r2, r2, r8
 8012d38:	4620      	mov	r0, r4
 8012d3a:	eb63 0309 	sbc.w	r3, r3, r9
 8012d3e:	47d8      	blx	fp
 8012d40:	4628      	mov	r0, r5
 8012d42:	b007      	add	sp, #28
 8012d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d48:	f240 3521 	movw	r5, #801	@ 0x321
 8012d4c:	4628      	mov	r0, r5
 8012d4e:	b007      	add	sp, #28
 8012d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d54:	2501      	movs	r5, #1
 8012d56:	4628      	mov	r0, r5
 8012d58:	b007      	add	sp, #28
 8012d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d5e:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8012d62:	4628      	mov	r0, r5
 8012d64:	b007      	add	sp, #28
 8012d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d6a:	250b      	movs	r5, #11
 8012d6c:	4628      	mov	r0, r5
 8012d6e:	b007      	add	sp, #28
 8012d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d74:	1b80      	subs	r0, r0, r6
 8012d76:	eb6c 0107 	sbc.w	r1, ip, r7
 8012d7a:	3801      	subs	r0, #1
 8012d7c:	f161 0100 	sbc.w	r1, r1, #0
 8012d80:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8012d84:	f7ed fed2 	bl	8000b2c <__aeabi_ldivmod>
 8012d88:	9b02      	ldr	r3, [sp, #8]
 8012d8a:	3001      	adds	r0, #1
 8012d8c:	f141 0100 	adc.w	r1, r1, #0
 8012d90:	fb00 f303 	mul.w	r3, r0, r3
 8012d94:	fb01 330a 	mla	r3, r1, sl, r3
 8012d98:	fba0 0a0a 	umull	r0, sl, r0, sl
 8012d9c:	1986      	adds	r6, r0, r6
 8012d9e:	4453      	add	r3, sl
 8012da0:	eb43 0707 	adc.w	r7, r3, r7
 8012da4:	e7b9      	b.n	8012d1a <rcl_timer_call+0x96>
 8012da6:	bf00      	nop

08012da8 <rcl_timer_is_ready>:
 8012da8:	b570      	push	{r4, r5, r6, lr}
 8012daa:	b082      	sub	sp, #8
 8012dac:	b378      	cbz	r0, 8012e0e <rcl_timer_is_ready+0x66>
 8012dae:	6803      	ldr	r3, [r0, #0]
 8012db0:	4604      	mov	r4, r0
 8012db2:	b383      	cbz	r3, 8012e16 <rcl_timer_is_ready+0x6e>
 8012db4:	460d      	mov	r5, r1
 8012db6:	b351      	cbz	r1, 8012e0e <rcl_timer_is_ready+0x66>
 8012db8:	f3bf 8f5b 	dmb	ish
 8012dbc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012dc0:	f3bf 8f5b 	dmb	ish
 8012dc4:	b953      	cbnz	r3, 8012ddc <rcl_timer_is_ready+0x34>
 8012dc6:	6803      	ldr	r3, [r0, #0]
 8012dc8:	4669      	mov	r1, sp
 8012dca:	6818      	ldr	r0, [r3, #0]
 8012dcc:	f7ff fd44 	bl	8012858 <rcl_clock_get_now>
 8012dd0:	4606      	mov	r6, r0
 8012dd2:	b140      	cbz	r0, 8012de6 <rcl_timer_is_ready+0x3e>
 8012dd4:	f240 3321 	movw	r3, #801	@ 0x321
 8012dd8:	4298      	cmp	r0, r3
 8012dda:	d101      	bne.n	8012de0 <rcl_timer_is_ready+0x38>
 8012ddc:	2600      	movs	r6, #0
 8012dde:	702e      	strb	r6, [r5, #0]
 8012de0:	4630      	mov	r0, r6
 8012de2:	b002      	add	sp, #8
 8012de4:	bd70      	pop	{r4, r5, r6, pc}
 8012de6:	6820      	ldr	r0, [r4, #0]
 8012de8:	2105      	movs	r1, #5
 8012dea:	3028      	adds	r0, #40	@ 0x28
 8012dec:	f001 fc10 	bl	8014610 <__atomic_load_8>
 8012df0:	9b00      	ldr	r3, [sp, #0]
 8012df2:	1ac0      	subs	r0, r0, r3
 8012df4:	9b01      	ldr	r3, [sp, #4]
 8012df6:	eb61 0103 	sbc.w	r1, r1, r3
 8012dfa:	2801      	cmp	r0, #1
 8012dfc:	f171 0300 	sbcs.w	r3, r1, #0
 8012e00:	bfb4      	ite	lt
 8012e02:	2301      	movlt	r3, #1
 8012e04:	2300      	movge	r3, #0
 8012e06:	4630      	mov	r0, r6
 8012e08:	702b      	strb	r3, [r5, #0]
 8012e0a:	b002      	add	sp, #8
 8012e0c:	bd70      	pop	{r4, r5, r6, pc}
 8012e0e:	260b      	movs	r6, #11
 8012e10:	4630      	mov	r0, r6
 8012e12:	b002      	add	sp, #8
 8012e14:	bd70      	pop	{r4, r5, r6, pc}
 8012e16:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8012e1a:	e7e1      	b.n	8012de0 <rcl_timer_is_ready+0x38>

08012e1c <rcl_timer_get_time_until_next_call>:
 8012e1c:	b570      	push	{r4, r5, r6, lr}
 8012e1e:	b082      	sub	sp, #8
 8012e20:	b330      	cbz	r0, 8012e70 <rcl_timer_get_time_until_next_call+0x54>
 8012e22:	6803      	ldr	r3, [r0, #0]
 8012e24:	4604      	mov	r4, r0
 8012e26:	b33b      	cbz	r3, 8012e78 <rcl_timer_get_time_until_next_call+0x5c>
 8012e28:	460d      	mov	r5, r1
 8012e2a:	b309      	cbz	r1, 8012e70 <rcl_timer_get_time_until_next_call+0x54>
 8012e2c:	f3bf 8f5b 	dmb	ish
 8012e30:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012e34:	f3bf 8f5b 	dmb	ish
 8012e38:	b9ab      	cbnz	r3, 8012e66 <rcl_timer_get_time_until_next_call+0x4a>
 8012e3a:	6803      	ldr	r3, [r0, #0]
 8012e3c:	4669      	mov	r1, sp
 8012e3e:	6818      	ldr	r0, [r3, #0]
 8012e40:	f7ff fd0a 	bl	8012858 <rcl_clock_get_now>
 8012e44:	4606      	mov	r6, r0
 8012e46:	b958      	cbnz	r0, 8012e60 <rcl_timer_get_time_until_next_call+0x44>
 8012e48:	6820      	ldr	r0, [r4, #0]
 8012e4a:	2105      	movs	r1, #5
 8012e4c:	3028      	adds	r0, #40	@ 0x28
 8012e4e:	f001 fbdf 	bl	8014610 <__atomic_load_8>
 8012e52:	9b00      	ldr	r3, [sp, #0]
 8012e54:	1ac0      	subs	r0, r0, r3
 8012e56:	9b01      	ldr	r3, [sp, #4]
 8012e58:	6028      	str	r0, [r5, #0]
 8012e5a:	eb61 0103 	sbc.w	r1, r1, r3
 8012e5e:	6069      	str	r1, [r5, #4]
 8012e60:	4630      	mov	r0, r6
 8012e62:	b002      	add	sp, #8
 8012e64:	bd70      	pop	{r4, r5, r6, pc}
 8012e66:	f240 3621 	movw	r6, #801	@ 0x321
 8012e6a:	4630      	mov	r0, r6
 8012e6c:	b002      	add	sp, #8
 8012e6e:	bd70      	pop	{r4, r5, r6, pc}
 8012e70:	260b      	movs	r6, #11
 8012e72:	4630      	mov	r0, r6
 8012e74:	b002      	add	sp, #8
 8012e76:	bd70      	pop	{r4, r5, r6, pc}
 8012e78:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8012e7c:	e7f0      	b.n	8012e60 <rcl_timer_get_time_until_next_call+0x44>
 8012e7e:	bf00      	nop

08012e80 <rcl_timer_get_guard_condition>:
 8012e80:	b130      	cbz	r0, 8012e90 <rcl_timer_get_guard_condition+0x10>
 8012e82:	6800      	ldr	r0, [r0, #0]
 8012e84:	b120      	cbz	r0, 8012e90 <rcl_timer_get_guard_condition+0x10>
 8012e86:	68c3      	ldr	r3, [r0, #12]
 8012e88:	b10b      	cbz	r3, 8012e8e <rcl_timer_get_guard_condition+0xe>
 8012e8a:	3008      	adds	r0, #8
 8012e8c:	4770      	bx	lr
 8012e8e:	4618      	mov	r0, r3
 8012e90:	4770      	bx	lr
 8012e92:	bf00      	nop

08012e94 <rcl_validate_enclave_name_with_size>:
 8012e94:	b378      	cbz	r0, 8012ef6 <rcl_validate_enclave_name_with_size+0x62>
 8012e96:	b570      	push	{r4, r5, r6, lr}
 8012e98:	4615      	mov	r5, r2
 8012e9a:	b0c2      	sub	sp, #264	@ 0x108
 8012e9c:	b302      	cbz	r2, 8012ee0 <rcl_validate_enclave_name_with_size+0x4c>
 8012e9e:	461e      	mov	r6, r3
 8012ea0:	466a      	mov	r2, sp
 8012ea2:	ab01      	add	r3, sp, #4
 8012ea4:	460c      	mov	r4, r1
 8012ea6:	f002 f815 	bl	8014ed4 <rmw_validate_namespace_with_size>
 8012eaa:	4684      	mov	ip, r0
 8012eac:	b9e8      	cbnz	r0, 8012eea <rcl_validate_enclave_name_with_size+0x56>
 8012eae:	9b00      	ldr	r3, [sp, #0]
 8012eb0:	b923      	cbnz	r3, 8012ebc <rcl_validate_enclave_name_with_size+0x28>
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	602b      	str	r3, [r5, #0]
 8012eb6:	4660      	mov	r0, ip
 8012eb8:	b042      	add	sp, #264	@ 0x108
 8012eba:	bd70      	pop	{r4, r5, r6, pc}
 8012ebc:	2b07      	cmp	r3, #7
 8012ebe:	d007      	beq.n	8012ed0 <rcl_validate_enclave_name_with_size+0x3c>
 8012ec0:	1e5a      	subs	r2, r3, #1
 8012ec2:	2a05      	cmp	r2, #5
 8012ec4:	d833      	bhi.n	8012f2e <rcl_validate_enclave_name_with_size+0x9a>
 8012ec6:	e8df f002 	tbb	[pc, r2]
 8012eca:	2c2f      	.short	0x2c2f
 8012ecc:	1a232629 	.word	0x1a232629
 8012ed0:	2cff      	cmp	r4, #255	@ 0xff
 8012ed2:	d9ee      	bls.n	8012eb2 <rcl_validate_enclave_name_with_size+0x1e>
 8012ed4:	602b      	str	r3, [r5, #0]
 8012ed6:	2e00      	cmp	r6, #0
 8012ed8:	d0ed      	beq.n	8012eb6 <rcl_validate_enclave_name_with_size+0x22>
 8012eda:	23fe      	movs	r3, #254	@ 0xfe
 8012edc:	6033      	str	r3, [r6, #0]
 8012ede:	e7ea      	b.n	8012eb6 <rcl_validate_enclave_name_with_size+0x22>
 8012ee0:	f04f 0c0b 	mov.w	ip, #11
 8012ee4:	4660      	mov	r0, ip
 8012ee6:	b042      	add	sp, #264	@ 0x108
 8012ee8:	bd70      	pop	{r4, r5, r6, pc}
 8012eea:	f7fe fe63 	bl	8011bb4 <rcl_convert_rmw_ret_to_rcl_ret>
 8012eee:	4684      	mov	ip, r0
 8012ef0:	4660      	mov	r0, ip
 8012ef2:	b042      	add	sp, #264	@ 0x108
 8012ef4:	bd70      	pop	{r4, r5, r6, pc}
 8012ef6:	f04f 0c0b 	mov.w	ip, #11
 8012efa:	4660      	mov	r0, ip
 8012efc:	4770      	bx	lr
 8012efe:	2306      	movs	r3, #6
 8012f00:	602b      	str	r3, [r5, #0]
 8012f02:	2e00      	cmp	r6, #0
 8012f04:	d0d7      	beq.n	8012eb6 <rcl_validate_enclave_name_with_size+0x22>
 8012f06:	9b01      	ldr	r3, [sp, #4]
 8012f08:	6033      	str	r3, [r6, #0]
 8012f0a:	4660      	mov	r0, ip
 8012f0c:	b042      	add	sp, #264	@ 0x108
 8012f0e:	bd70      	pop	{r4, r5, r6, pc}
 8012f10:	2305      	movs	r3, #5
 8012f12:	602b      	str	r3, [r5, #0]
 8012f14:	e7f5      	b.n	8012f02 <rcl_validate_enclave_name_with_size+0x6e>
 8012f16:	2304      	movs	r3, #4
 8012f18:	602b      	str	r3, [r5, #0]
 8012f1a:	e7f2      	b.n	8012f02 <rcl_validate_enclave_name_with_size+0x6e>
 8012f1c:	2303      	movs	r3, #3
 8012f1e:	602b      	str	r3, [r5, #0]
 8012f20:	e7ef      	b.n	8012f02 <rcl_validate_enclave_name_with_size+0x6e>
 8012f22:	2302      	movs	r3, #2
 8012f24:	602b      	str	r3, [r5, #0]
 8012f26:	e7ec      	b.n	8012f02 <rcl_validate_enclave_name_with_size+0x6e>
 8012f28:	2301      	movs	r3, #1
 8012f2a:	602b      	str	r3, [r5, #0]
 8012f2c:	e7e9      	b.n	8012f02 <rcl_validate_enclave_name_with_size+0x6e>
 8012f2e:	4a04      	ldr	r2, [pc, #16]	@ (8012f40 <rcl_validate_enclave_name_with_size+0xac>)
 8012f30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012f34:	a802      	add	r0, sp, #8
 8012f36:	f001 fd25 	bl	8014984 <rcutils_snprintf>
 8012f3a:	f04f 0c01 	mov.w	ip, #1
 8012f3e:	e7ba      	b.n	8012eb6 <rcl_validate_enclave_name_with_size+0x22>
 8012f40:	08018e0c 	.word	0x08018e0c

08012f44 <rcl_validate_enclave_name>:
 8012f44:	b168      	cbz	r0, 8012f62 <rcl_validate_enclave_name+0x1e>
 8012f46:	b570      	push	{r4, r5, r6, lr}
 8012f48:	460d      	mov	r5, r1
 8012f4a:	4616      	mov	r6, r2
 8012f4c:	4604      	mov	r4, r0
 8012f4e:	f7ed f971 	bl	8000234 <strlen>
 8012f52:	4633      	mov	r3, r6
 8012f54:	4601      	mov	r1, r0
 8012f56:	462a      	mov	r2, r5
 8012f58:	4620      	mov	r0, r4
 8012f5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f5e:	f7ff bf99 	b.w	8012e94 <rcl_validate_enclave_name_with_size>
 8012f62:	200b      	movs	r0, #11
 8012f64:	4770      	bx	lr
 8012f66:	bf00      	nop

08012f68 <rcl_get_zero_initialized_wait_set>:
 8012f68:	b510      	push	{r4, lr}
 8012f6a:	4c08      	ldr	r4, [pc, #32]	@ (8012f8c <rcl_get_zero_initialized_wait_set+0x24>)
 8012f6c:	4686      	mov	lr, r0
 8012f6e:	4684      	mov	ip, r0
 8012f70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012f72:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012f76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012f78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012f7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012f7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012f82:	6823      	ldr	r3, [r4, #0]
 8012f84:	f8cc 3000 	str.w	r3, [ip]
 8012f88:	4670      	mov	r0, lr
 8012f8a:	bd10      	pop	{r4, pc}
 8012f8c:	08018e6c 	.word	0x08018e6c

08012f90 <rcl_wait_set_is_valid>:
 8012f90:	b118      	cbz	r0, 8012f9a <rcl_wait_set_is_valid+0xa>
 8012f92:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8012f94:	3800      	subs	r0, #0
 8012f96:	bf18      	it	ne
 8012f98:	2001      	movne	r0, #1
 8012f9a:	4770      	bx	lr

08012f9c <rcl_wait_set_fini>:
 8012f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fa0:	b082      	sub	sp, #8
 8012fa2:	2800      	cmp	r0, #0
 8012fa4:	f000 8095 	beq.w	80130d2 <rcl_wait_set_fini+0x136>
 8012fa8:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8012faa:	4604      	mov	r4, r0
 8012fac:	2e00      	cmp	r6, #0
 8012fae:	f000 808c 	beq.w	80130ca <rcl_wait_set_fini+0x12e>
 8012fb2:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8012fb4:	f002 fd48 	bl	8015a48 <rmw_destroy_wait_set>
 8012fb8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012fba:	1e06      	subs	r6, r0, #0
 8012fbc:	bf18      	it	ne
 8012fbe:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8012fc2:	2d00      	cmp	r5, #0
 8012fc4:	f000 8081 	beq.w	80130ca <rcl_wait_set_fini+0x12e>
 8012fc8:	6820      	ldr	r0, [r4, #0]
 8012fca:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8012fce:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012fd0:	2700      	movs	r7, #0
 8012fd2:	6067      	str	r7, [r4, #4]
 8012fd4:	602f      	str	r7, [r5, #0]
 8012fd6:	b120      	cbz	r0, 8012fe2 <rcl_wait_set_fini+0x46>
 8012fd8:	9101      	str	r1, [sp, #4]
 8012fda:	47c0      	blx	r8
 8012fdc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012fde:	9901      	ldr	r1, [sp, #4]
 8012fe0:	6027      	str	r7, [r4, #0]
 8012fe2:	68a8      	ldr	r0, [r5, #8]
 8012fe4:	b120      	cbz	r0, 8012ff0 <rcl_wait_set_fini+0x54>
 8012fe6:	47c0      	blx	r8
 8012fe8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012fea:	2300      	movs	r3, #0
 8012fec:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8012ff0:	68a0      	ldr	r0, [r4, #8]
 8012ff2:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8012ff4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012ff6:	f04f 0800 	mov.w	r8, #0
 8012ffa:	f8c4 800c 	str.w	r8, [r4, #12]
 8012ffe:	f8c5 800c 	str.w	r8, [r5, #12]
 8013002:	b128      	cbz	r0, 8013010 <rcl_wait_set_fini+0x74>
 8013004:	47b8      	blx	r7
 8013006:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013008:	f8c4 8008 	str.w	r8, [r4, #8]
 801300c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801300e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013010:	6968      	ldr	r0, [r5, #20]
 8013012:	f04f 0800 	mov.w	r8, #0
 8013016:	f8c5 8010 	str.w	r8, [r5, #16]
 801301a:	b128      	cbz	r0, 8013028 <rcl_wait_set_fini+0x8c>
 801301c:	47b8      	blx	r7
 801301e:	f8c5 8014 	str.w	r8, [r5, #20]
 8013022:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013024:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8013026:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013028:	6920      	ldr	r0, [r4, #16]
 801302a:	f04f 0800 	mov.w	r8, #0
 801302e:	f8c4 8014 	str.w	r8, [r4, #20]
 8013032:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8013036:	b128      	cbz	r0, 8013044 <rcl_wait_set_fini+0xa8>
 8013038:	47b8      	blx	r7
 801303a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801303c:	f8c4 8010 	str.w	r8, [r4, #16]
 8013040:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8013042:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013044:	69a0      	ldr	r0, [r4, #24]
 8013046:	f04f 0800 	mov.w	r8, #0
 801304a:	f8c4 801c 	str.w	r8, [r4, #28]
 801304e:	f8c5 8018 	str.w	r8, [r5, #24]
 8013052:	b128      	cbz	r0, 8013060 <rcl_wait_set_fini+0xc4>
 8013054:	9101      	str	r1, [sp, #4]
 8013056:	47b8      	blx	r7
 8013058:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801305a:	9901      	ldr	r1, [sp, #4]
 801305c:	f8c4 8018 	str.w	r8, [r4, #24]
 8013060:	6a28      	ldr	r0, [r5, #32]
 8013062:	b120      	cbz	r0, 801306e <rcl_wait_set_fini+0xd2>
 8013064:	47b8      	blx	r7
 8013066:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013068:	2300      	movs	r3, #0
 801306a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801306e:	6a20      	ldr	r0, [r4, #32]
 8013070:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8013074:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013076:	2700      	movs	r7, #0
 8013078:	6267      	str	r7, [r4, #36]	@ 0x24
 801307a:	626f      	str	r7, [r5, #36]	@ 0x24
 801307c:	b120      	cbz	r0, 8013088 <rcl_wait_set_fini+0xec>
 801307e:	9101      	str	r1, [sp, #4]
 8013080:	47c0      	blx	r8
 8013082:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013084:	9901      	ldr	r1, [sp, #4]
 8013086:	6227      	str	r7, [r4, #32]
 8013088:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801308a:	b120      	cbz	r0, 8013096 <rcl_wait_set_fini+0xfa>
 801308c:	47c0      	blx	r8
 801308e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013090:	2300      	movs	r3, #0
 8013092:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8013096:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8013098:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801309c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801309e:	2700      	movs	r7, #0
 80130a0:	62e7      	str	r7, [r4, #44]	@ 0x2c
 80130a2:	632f      	str	r7, [r5, #48]	@ 0x30
 80130a4:	b120      	cbz	r0, 80130b0 <rcl_wait_set_fini+0x114>
 80130a6:	9101      	str	r1, [sp, #4]
 80130a8:	47c0      	blx	r8
 80130aa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80130ac:	9901      	ldr	r1, [sp, #4]
 80130ae:	62a7      	str	r7, [r4, #40]	@ 0x28
 80130b0:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80130b2:	b120      	cbz	r0, 80130be <rcl_wait_set_fini+0x122>
 80130b4:	47c0      	blx	r8
 80130b6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80130b8:	2300      	movs	r3, #0
 80130ba:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 80130be:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80130c0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80130c2:	4628      	mov	r0, r5
 80130c4:	4798      	blx	r3
 80130c6:	2300      	movs	r3, #0
 80130c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80130ca:	4630      	mov	r0, r6
 80130cc:	b002      	add	sp, #8
 80130ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130d2:	260b      	movs	r6, #11
 80130d4:	4630      	mov	r0, r6
 80130d6:	b002      	add	sp, #8
 80130d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080130dc <rcl_wait_set_add_subscription>:
 80130dc:	b318      	cbz	r0, 8013126 <rcl_wait_set_add_subscription+0x4a>
 80130de:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80130e0:	b570      	push	{r4, r5, r6, lr}
 80130e2:	4604      	mov	r4, r0
 80130e4:	b30b      	cbz	r3, 801312a <rcl_wait_set_add_subscription+0x4e>
 80130e6:	b319      	cbz	r1, 8013130 <rcl_wait_set_add_subscription+0x54>
 80130e8:	681d      	ldr	r5, [r3, #0]
 80130ea:	6840      	ldr	r0, [r0, #4]
 80130ec:	4285      	cmp	r5, r0
 80130ee:	d217      	bcs.n	8013120 <rcl_wait_set_add_subscription+0x44>
 80130f0:	6820      	ldr	r0, [r4, #0]
 80130f2:	1c6e      	adds	r6, r5, #1
 80130f4:	601e      	str	r6, [r3, #0]
 80130f6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80130fa:	b102      	cbz	r2, 80130fe <rcl_wait_set_add_subscription+0x22>
 80130fc:	6015      	str	r5, [r2, #0]
 80130fe:	4608      	mov	r0, r1
 8013100:	f7ff fb0a 	bl	8012718 <rcl_subscription_get_rmw_handle>
 8013104:	b150      	cbz	r0, 801311c <rcl_wait_set_add_subscription+0x40>
 8013106:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013108:	6842      	ldr	r2, [r0, #4]
 801310a:	689b      	ldr	r3, [r3, #8]
 801310c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013110:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013112:	6853      	ldr	r3, [r2, #4]
 8013114:	3301      	adds	r3, #1
 8013116:	2000      	movs	r0, #0
 8013118:	6053      	str	r3, [r2, #4]
 801311a:	bd70      	pop	{r4, r5, r6, pc}
 801311c:	2001      	movs	r0, #1
 801311e:	bd70      	pop	{r4, r5, r6, pc}
 8013120:	f240 3086 	movw	r0, #902	@ 0x386
 8013124:	bd70      	pop	{r4, r5, r6, pc}
 8013126:	200b      	movs	r0, #11
 8013128:	4770      	bx	lr
 801312a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801312e:	bd70      	pop	{r4, r5, r6, pc}
 8013130:	200b      	movs	r0, #11
 8013132:	bd70      	pop	{r4, r5, r6, pc}

08013134 <rcl_wait_set_clear>:
 8013134:	2800      	cmp	r0, #0
 8013136:	d073      	beq.n	8013220 <rcl_wait_set_clear+0xec>
 8013138:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801313a:	b510      	push	{r4, lr}
 801313c:	4604      	mov	r4, r0
 801313e:	2b00      	cmp	r3, #0
 8013140:	d070      	beq.n	8013224 <rcl_wait_set_clear+0xf0>
 8013142:	6800      	ldr	r0, [r0, #0]
 8013144:	b138      	cbz	r0, 8013156 <rcl_wait_set_clear+0x22>
 8013146:	6862      	ldr	r2, [r4, #4]
 8013148:	2100      	movs	r1, #0
 801314a:	0092      	lsls	r2, r2, #2
 801314c:	f004 fb2e 	bl	80177ac <memset>
 8013150:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013152:	2200      	movs	r2, #0
 8013154:	601a      	str	r2, [r3, #0]
 8013156:	68a0      	ldr	r0, [r4, #8]
 8013158:	b138      	cbz	r0, 801316a <rcl_wait_set_clear+0x36>
 801315a:	68e2      	ldr	r2, [r4, #12]
 801315c:	2100      	movs	r1, #0
 801315e:	0092      	lsls	r2, r2, #2
 8013160:	f004 fb24 	bl	80177ac <memset>
 8013164:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013166:	2200      	movs	r2, #0
 8013168:	60da      	str	r2, [r3, #12]
 801316a:	69a0      	ldr	r0, [r4, #24]
 801316c:	b138      	cbz	r0, 801317e <rcl_wait_set_clear+0x4a>
 801316e:	69e2      	ldr	r2, [r4, #28]
 8013170:	2100      	movs	r1, #0
 8013172:	0092      	lsls	r2, r2, #2
 8013174:	f004 fb1a 	bl	80177ac <memset>
 8013178:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801317a:	2200      	movs	r2, #0
 801317c:	619a      	str	r2, [r3, #24]
 801317e:	6a20      	ldr	r0, [r4, #32]
 8013180:	b138      	cbz	r0, 8013192 <rcl_wait_set_clear+0x5e>
 8013182:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8013184:	2100      	movs	r1, #0
 8013186:	0092      	lsls	r2, r2, #2
 8013188:	f004 fb10 	bl	80177ac <memset>
 801318c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801318e:	2200      	movs	r2, #0
 8013190:	625a      	str	r2, [r3, #36]	@ 0x24
 8013192:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8013194:	b138      	cbz	r0, 80131a6 <rcl_wait_set_clear+0x72>
 8013196:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013198:	2100      	movs	r1, #0
 801319a:	0092      	lsls	r2, r2, #2
 801319c:	f004 fb06 	bl	80177ac <memset>
 80131a0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80131a2:	2200      	movs	r2, #0
 80131a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80131a6:	6920      	ldr	r0, [r4, #16]
 80131a8:	b138      	cbz	r0, 80131ba <rcl_wait_set_clear+0x86>
 80131aa:	6962      	ldr	r2, [r4, #20]
 80131ac:	2100      	movs	r1, #0
 80131ae:	0092      	lsls	r2, r2, #2
 80131b0:	f004 fafc 	bl	80177ac <memset>
 80131b4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80131b6:	2200      	movs	r2, #0
 80131b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80131ba:	6898      	ldr	r0, [r3, #8]
 80131bc:	b138      	cbz	r0, 80131ce <rcl_wait_set_clear+0x9a>
 80131be:	685a      	ldr	r2, [r3, #4]
 80131c0:	2100      	movs	r1, #0
 80131c2:	0092      	lsls	r2, r2, #2
 80131c4:	f004 faf2 	bl	80177ac <memset>
 80131c8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80131ca:	2200      	movs	r2, #0
 80131cc:	605a      	str	r2, [r3, #4]
 80131ce:	6958      	ldr	r0, [r3, #20]
 80131d0:	b138      	cbz	r0, 80131e2 <rcl_wait_set_clear+0xae>
 80131d2:	691a      	ldr	r2, [r3, #16]
 80131d4:	2100      	movs	r1, #0
 80131d6:	0092      	lsls	r2, r2, #2
 80131d8:	f004 fae8 	bl	80177ac <memset>
 80131dc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80131de:	2200      	movs	r2, #0
 80131e0:	611a      	str	r2, [r3, #16]
 80131e2:	6a18      	ldr	r0, [r3, #32]
 80131e4:	b138      	cbz	r0, 80131f6 <rcl_wait_set_clear+0xc2>
 80131e6:	69da      	ldr	r2, [r3, #28]
 80131e8:	2100      	movs	r1, #0
 80131ea:	0092      	lsls	r2, r2, #2
 80131ec:	f004 fade 	bl	80177ac <memset>
 80131f0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80131f2:	2200      	movs	r2, #0
 80131f4:	61da      	str	r2, [r3, #28]
 80131f6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80131f8:	b138      	cbz	r0, 801320a <rcl_wait_set_clear+0xd6>
 80131fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80131fc:	2100      	movs	r1, #0
 80131fe:	0092      	lsls	r2, r2, #2
 8013200:	f004 fad4 	bl	80177ac <memset>
 8013204:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013206:	2200      	movs	r2, #0
 8013208:	629a      	str	r2, [r3, #40]	@ 0x28
 801320a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801320c:	b138      	cbz	r0, 801321e <rcl_wait_set_clear+0xea>
 801320e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013210:	2100      	movs	r1, #0
 8013212:	0092      	lsls	r2, r2, #2
 8013214:	f004 faca 	bl	80177ac <memset>
 8013218:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801321a:	2000      	movs	r0, #0
 801321c:	6358      	str	r0, [r3, #52]	@ 0x34
 801321e:	bd10      	pop	{r4, pc}
 8013220:	200b      	movs	r0, #11
 8013222:	4770      	bx	lr
 8013224:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013228:	bd10      	pop	{r4, pc}
 801322a:	bf00      	nop

0801322c <rcl_wait_set_resize>:
 801322c:	2800      	cmp	r0, #0
 801322e:	f000 8185 	beq.w	801353c <rcl_wait_set_resize+0x310>
 8013232:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013236:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8013238:	b083      	sub	sp, #12
 801323a:	4605      	mov	r5, r0
 801323c:	2c00      	cmp	r4, #0
 801323e:	f000 817f 	beq.w	8013540 <rcl_wait_set_resize+0x314>
 8013242:	f04f 0900 	mov.w	r9, #0
 8013246:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 801324a:	461f      	mov	r7, r3
 801324c:	4688      	mov	r8, r1
 801324e:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8013252:	4616      	mov	r6, r2
 8013254:	f8c0 9004 	str.w	r9, [r0, #4]
 8013258:	f8c4 9000 	str.w	r9, [r4]
 801325c:	2900      	cmp	r1, #0
 801325e:	f000 80bd 	beq.w	80133dc <rcl_wait_set_resize+0x1b0>
 8013262:	008c      	lsls	r4, r1, #2
 8013264:	6800      	ldr	r0, [r0, #0]
 8013266:	9301      	str	r3, [sp, #4]
 8013268:	4652      	mov	r2, sl
 801326a:	4621      	mov	r1, r4
 801326c:	4798      	blx	r3
 801326e:	9b01      	ldr	r3, [sp, #4]
 8013270:	6028      	str	r0, [r5, #0]
 8013272:	2800      	cmp	r0, #0
 8013274:	f000 80cb 	beq.w	801340e <rcl_wait_set_resize+0x1e2>
 8013278:	4622      	mov	r2, r4
 801327a:	4649      	mov	r1, r9
 801327c:	9301      	str	r3, [sp, #4]
 801327e:	f004 fa95 	bl	80177ac <memset>
 8013282:	f8c5 8004 	str.w	r8, [r5, #4]
 8013286:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801328a:	9b01      	ldr	r3, [sp, #4]
 801328c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8013290:	f8c8 9004 	str.w	r9, [r8, #4]
 8013294:	4652      	mov	r2, sl
 8013296:	4621      	mov	r1, r4
 8013298:	4798      	blx	r3
 801329a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801329c:	f8c8 0008 	str.w	r0, [r8, #8]
 80132a0:	689b      	ldr	r3, [r3, #8]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	f000 80ac 	beq.w	8013400 <rcl_wait_set_resize+0x1d4>
 80132a8:	4622      	mov	r2, r4
 80132aa:	4649      	mov	r1, r9
 80132ac:	4618      	mov	r0, r3
 80132ae:	f004 fa7d 	bl	80177ac <memset>
 80132b2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80132b4:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80132b8:	f04f 0800 	mov.w	r8, #0
 80132bc:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 80132c0:	f8c5 800c 	str.w	r8, [r5, #12]
 80132c4:	f8c4 800c 	str.w	r8, [r4, #12]
 80132c8:	2e00      	cmp	r6, #0
 80132ca:	f040 80a4 	bne.w	8013416 <rcl_wait_set_resize+0x1ea>
 80132ce:	68a8      	ldr	r0, [r5, #8]
 80132d0:	b128      	cbz	r0, 80132de <rcl_wait_set_resize+0xb2>
 80132d2:	4649      	mov	r1, r9
 80132d4:	4790      	blx	r2
 80132d6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80132d8:	60ae      	str	r6, [r5, #8]
 80132da:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80132de:	f04f 0800 	mov.w	r8, #0
 80132e2:	19f6      	adds	r6, r6, r7
 80132e4:	f8c4 8010 	str.w	r8, [r4, #16]
 80132e8:	f040 80ac 	bne.w	8013444 <rcl_wait_set_resize+0x218>
 80132ec:	6960      	ldr	r0, [r4, #20]
 80132ee:	b130      	cbz	r0, 80132fe <rcl_wait_set_resize+0xd2>
 80132f0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80132f2:	4649      	mov	r1, r9
 80132f4:	4798      	blx	r3
 80132f6:	6166      	str	r6, [r4, #20]
 80132f8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80132fa:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80132fe:	2600      	movs	r6, #0
 8013300:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8013304:	616e      	str	r6, [r5, #20]
 8013306:	6426      	str	r6, [r4, #64]	@ 0x40
 8013308:	2f00      	cmp	r7, #0
 801330a:	f040 80ad 	bne.w	8013468 <rcl_wait_set_resize+0x23c>
 801330e:	6928      	ldr	r0, [r5, #16]
 8013310:	b138      	cbz	r0, 8013322 <rcl_wait_set_resize+0xf6>
 8013312:	4649      	mov	r1, r9
 8013314:	47d0      	blx	sl
 8013316:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013318:	612f      	str	r7, [r5, #16]
 801331a:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801331e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013322:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013324:	2600      	movs	r6, #0
 8013326:	61ee      	str	r6, [r5, #28]
 8013328:	61a6      	str	r6, [r4, #24]
 801332a:	2b00      	cmp	r3, #0
 801332c:	f040 80af 	bne.w	801348e <rcl_wait_set_resize+0x262>
 8013330:	69a8      	ldr	r0, [r5, #24]
 8013332:	b120      	cbz	r0, 801333e <rcl_wait_set_resize+0x112>
 8013334:	4649      	mov	r1, r9
 8013336:	47d0      	blx	sl
 8013338:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801333a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801333c:	61ab      	str	r3, [r5, #24]
 801333e:	6a20      	ldr	r0, [r4, #32]
 8013340:	b128      	cbz	r0, 801334e <rcl_wait_set_resize+0x122>
 8013342:	4649      	mov	r1, r9
 8013344:	47d0      	blx	sl
 8013346:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013348:	2300      	movs	r3, #0
 801334a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801334e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013350:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8013352:	2600      	movs	r6, #0
 8013354:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8013358:	626e      	str	r6, [r5, #36]	@ 0x24
 801335a:	6266      	str	r6, [r4, #36]	@ 0x24
 801335c:	2b00      	cmp	r3, #0
 801335e:	f000 80b6 	beq.w	80134ce <rcl_wait_set_resize+0x2a2>
 8013362:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8013366:	6a28      	ldr	r0, [r5, #32]
 8013368:	463a      	mov	r2, r7
 801336a:	4651      	mov	r1, sl
 801336c:	47c8      	blx	r9
 801336e:	6228      	str	r0, [r5, #32]
 8013370:	2800      	cmp	r0, #0
 8013372:	d04c      	beq.n	801340e <rcl_wait_set_resize+0x1e2>
 8013374:	4652      	mov	r2, sl
 8013376:	4631      	mov	r1, r6
 8013378:	f004 fa18 	bl	80177ac <memset>
 801337c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801337e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013380:	626b      	str	r3, [r5, #36]	@ 0x24
 8013382:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8013384:	62a6      	str	r6, [r4, #40]	@ 0x28
 8013386:	463a      	mov	r2, r7
 8013388:	4651      	mov	r1, sl
 801338a:	47c8      	blx	r9
 801338c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801338e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8013390:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8013392:	2c00      	cmp	r4, #0
 8013394:	f000 80f0 	beq.w	8013578 <rcl_wait_set_resize+0x34c>
 8013398:	4620      	mov	r0, r4
 801339a:	4652      	mov	r2, sl
 801339c:	4631      	mov	r1, r6
 801339e:	f004 fa05 	bl	80177ac <memset>
 80133a2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80133a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80133a6:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80133a8:	2600      	movs	r6, #0
 80133aa:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80133ae:	62ee      	str	r6, [r5, #44]	@ 0x2c
 80133b0:	6326      	str	r6, [r4, #48]	@ 0x30
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	f040 809d 	bne.w	80134f2 <rcl_wait_set_resize+0x2c6>
 80133b8:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80133ba:	b120      	cbz	r0, 80133c6 <rcl_wait_set_resize+0x19a>
 80133bc:	4639      	mov	r1, r7
 80133be:	47c0      	blx	r8
 80133c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80133c2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80133c4:	62ab      	str	r3, [r5, #40]	@ 0x28
 80133c6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80133c8:	b310      	cbz	r0, 8013410 <rcl_wait_set_resize+0x1e4>
 80133ca:	4639      	mov	r1, r7
 80133cc:	47c0      	blx	r8
 80133ce:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80133d0:	2000      	movs	r0, #0
 80133d2:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 80133d6:	b003      	add	sp, #12
 80133d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133dc:	6800      	ldr	r0, [r0, #0]
 80133de:	b120      	cbz	r0, 80133ea <rcl_wait_set_resize+0x1be>
 80133e0:	4651      	mov	r1, sl
 80133e2:	47d8      	blx	fp
 80133e4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80133e6:	f8c5 8000 	str.w	r8, [r5]
 80133ea:	68a0      	ldr	r0, [r4, #8]
 80133ec:	2800      	cmp	r0, #0
 80133ee:	f43f af61 	beq.w	80132b4 <rcl_wait_set_resize+0x88>
 80133f2:	4651      	mov	r1, sl
 80133f4:	47d8      	blx	fp
 80133f6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80133f8:	2300      	movs	r3, #0
 80133fa:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80133fe:	e759      	b.n	80132b4 <rcl_wait_set_resize+0x88>
 8013400:	6828      	ldr	r0, [r5, #0]
 8013402:	9301      	str	r3, [sp, #4]
 8013404:	4651      	mov	r1, sl
 8013406:	47d8      	blx	fp
 8013408:	9b01      	ldr	r3, [sp, #4]
 801340a:	e9c5 3300 	strd	r3, r3, [r5]
 801340e:	200a      	movs	r0, #10
 8013410:	b003      	add	sp, #12
 8013412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013416:	00b4      	lsls	r4, r6, #2
 8013418:	68a8      	ldr	r0, [r5, #8]
 801341a:	464a      	mov	r2, r9
 801341c:	4621      	mov	r1, r4
 801341e:	4798      	blx	r3
 8013420:	60a8      	str	r0, [r5, #8]
 8013422:	2800      	cmp	r0, #0
 8013424:	d0f3      	beq.n	801340e <rcl_wait_set_resize+0x1e2>
 8013426:	4622      	mov	r2, r4
 8013428:	4641      	mov	r1, r8
 801342a:	f004 f9bf 	bl	80177ac <memset>
 801342e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013430:	60ee      	str	r6, [r5, #12]
 8013432:	f04f 0800 	mov.w	r8, #0
 8013436:	19f6      	adds	r6, r6, r7
 8013438:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801343c:	f8c4 8010 	str.w	r8, [r4, #16]
 8013440:	f43f af54 	beq.w	80132ec <rcl_wait_set_resize+0xc0>
 8013444:	00b6      	lsls	r6, r6, #2
 8013446:	464a      	mov	r2, r9
 8013448:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801344a:	6960      	ldr	r0, [r4, #20]
 801344c:	4631      	mov	r1, r6
 801344e:	4798      	blx	r3
 8013450:	4681      	mov	r9, r0
 8013452:	6160      	str	r0, [r4, #20]
 8013454:	2800      	cmp	r0, #0
 8013456:	d076      	beq.n	8013546 <rcl_wait_set_resize+0x31a>
 8013458:	4632      	mov	r2, r6
 801345a:	4641      	mov	r1, r8
 801345c:	f004 f9a6 	bl	80177ac <memset>
 8013460:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013462:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013466:	e74a      	b.n	80132fe <rcl_wait_set_resize+0xd2>
 8013468:	00bc      	lsls	r4, r7, #2
 801346a:	6928      	ldr	r0, [r5, #16]
 801346c:	464a      	mov	r2, r9
 801346e:	4621      	mov	r1, r4
 8013470:	47c0      	blx	r8
 8013472:	6128      	str	r0, [r5, #16]
 8013474:	2800      	cmp	r0, #0
 8013476:	d0ca      	beq.n	801340e <rcl_wait_set_resize+0x1e2>
 8013478:	4622      	mov	r2, r4
 801347a:	4631      	mov	r1, r6
 801347c:	f004 f996 	bl	80177ac <memset>
 8013480:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013482:	616f      	str	r7, [r5, #20]
 8013484:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8013488:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801348c:	e749      	b.n	8013322 <rcl_wait_set_resize+0xf6>
 801348e:	009c      	lsls	r4, r3, #2
 8013490:	69a8      	ldr	r0, [r5, #24]
 8013492:	464a      	mov	r2, r9
 8013494:	4621      	mov	r1, r4
 8013496:	47c0      	blx	r8
 8013498:	61a8      	str	r0, [r5, #24]
 801349a:	2800      	cmp	r0, #0
 801349c:	d0b7      	beq.n	801340e <rcl_wait_set_resize+0x1e2>
 801349e:	4622      	mov	r2, r4
 80134a0:	4631      	mov	r1, r6
 80134a2:	f004 f983 	bl	80177ac <memset>
 80134a6:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 80134a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80134aa:	61eb      	str	r3, [r5, #28]
 80134ac:	6a38      	ldr	r0, [r7, #32]
 80134ae:	61fe      	str	r6, [r7, #28]
 80134b0:	464a      	mov	r2, r9
 80134b2:	4621      	mov	r1, r4
 80134b4:	47c0      	blx	r8
 80134b6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80134b8:	6238      	str	r0, [r7, #32]
 80134ba:	6a1f      	ldr	r7, [r3, #32]
 80134bc:	2f00      	cmp	r7, #0
 80134be:	d054      	beq.n	801356a <rcl_wait_set_resize+0x33e>
 80134c0:	4622      	mov	r2, r4
 80134c2:	4631      	mov	r1, r6
 80134c4:	4638      	mov	r0, r7
 80134c6:	f004 f971 	bl	80177ac <memset>
 80134ca:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80134cc:	e73f      	b.n	801334e <rcl_wait_set_resize+0x122>
 80134ce:	6a28      	ldr	r0, [r5, #32]
 80134d0:	b120      	cbz	r0, 80134dc <rcl_wait_set_resize+0x2b0>
 80134d2:	4639      	mov	r1, r7
 80134d4:	47c0      	blx	r8
 80134d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80134d8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80134da:	622b      	str	r3, [r5, #32]
 80134dc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80134de:	2800      	cmp	r0, #0
 80134e0:	f43f af60 	beq.w	80133a4 <rcl_wait_set_resize+0x178>
 80134e4:	4639      	mov	r1, r7
 80134e6:	47c0      	blx	r8
 80134e8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80134ea:	2300      	movs	r3, #0
 80134ec:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 80134f0:	e758      	b.n	80133a4 <rcl_wait_set_resize+0x178>
 80134f2:	009c      	lsls	r4, r3, #2
 80134f4:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80134f6:	463a      	mov	r2, r7
 80134f8:	4621      	mov	r1, r4
 80134fa:	47c8      	blx	r9
 80134fc:	62a8      	str	r0, [r5, #40]	@ 0x28
 80134fe:	2800      	cmp	r0, #0
 8013500:	d085      	beq.n	801340e <rcl_wait_set_resize+0x1e2>
 8013502:	4622      	mov	r2, r4
 8013504:	4631      	mov	r1, r6
 8013506:	f004 f951 	bl	80177ac <memset>
 801350a:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801350e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013510:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8013512:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8013516:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 801351a:	463a      	mov	r2, r7
 801351c:	4621      	mov	r1, r4
 801351e:	47c8      	blx	r9
 8013520:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013522:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8013526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013528:	b36b      	cbz	r3, 8013586 <rcl_wait_set_resize+0x35a>
 801352a:	4622      	mov	r2, r4
 801352c:	4631      	mov	r1, r6
 801352e:	4618      	mov	r0, r3
 8013530:	f004 f93c 	bl	80177ac <memset>
 8013534:	4630      	mov	r0, r6
 8013536:	b003      	add	sp, #12
 8013538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801353c:	200b      	movs	r0, #11
 801353e:	4770      	bx	lr
 8013540:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013544:	e764      	b.n	8013410 <rcl_wait_set_resize+0x1e4>
 8013546:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013548:	68a8      	ldr	r0, [r5, #8]
 801354a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801354c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801354e:	4798      	blx	r3
 8013550:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013552:	6928      	ldr	r0, [r5, #16]
 8013554:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013556:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8013558:	f8c5 900c 	str.w	r9, [r5, #12]
 801355c:	f8c5 9008 	str.w	r9, [r5, #8]
 8013560:	4790      	blx	r2
 8013562:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8013566:	200a      	movs	r0, #10
 8013568:	e752      	b.n	8013410 <rcl_wait_set_resize+0x1e4>
 801356a:	69a8      	ldr	r0, [r5, #24]
 801356c:	4649      	mov	r1, r9
 801356e:	47d0      	blx	sl
 8013570:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8013574:	200a      	movs	r0, #10
 8013576:	e74b      	b.n	8013410 <rcl_wait_set_resize+0x1e4>
 8013578:	6a28      	ldr	r0, [r5, #32]
 801357a:	4639      	mov	r1, r7
 801357c:	47c0      	blx	r8
 801357e:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8013582:	200a      	movs	r0, #10
 8013584:	e744      	b.n	8013410 <rcl_wait_set_resize+0x1e4>
 8013586:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8013588:	9301      	str	r3, [sp, #4]
 801358a:	4639      	mov	r1, r7
 801358c:	47c0      	blx	r8
 801358e:	9b01      	ldr	r3, [sp, #4]
 8013590:	200a      	movs	r0, #10
 8013592:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8013596:	e73b      	b.n	8013410 <rcl_wait_set_resize+0x1e4>

08013598 <rcl_wait_set_init>:
 8013598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801359c:	b084      	sub	sp, #16
 801359e:	4604      	mov	r4, r0
 80135a0:	a810      	add	r0, sp, #64	@ 0x40
 80135a2:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 80135a6:	460f      	mov	r7, r1
 80135a8:	4690      	mov	r8, r2
 80135aa:	4699      	mov	r9, r3
 80135ac:	f7f9 fc7e 	bl	800ceac <rcutils_allocator_is_valid>
 80135b0:	2800      	cmp	r0, #0
 80135b2:	d06b      	beq.n	801368c <rcl_wait_set_init+0xf4>
 80135b4:	2c00      	cmp	r4, #0
 80135b6:	d069      	beq.n	801368c <rcl_wait_set_init+0xf4>
 80135b8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80135ba:	b125      	cbz	r5, 80135c6 <rcl_wait_set_init+0x2e>
 80135bc:	2564      	movs	r5, #100	@ 0x64
 80135be:	4628      	mov	r0, r5
 80135c0:	b004      	add	sp, #16
 80135c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135c6:	f1ba 0f00 	cmp.w	sl, #0
 80135ca:	d05f      	beq.n	801368c <rcl_wait_set_init+0xf4>
 80135cc:	4650      	mov	r0, sl
 80135ce:	f7fe fb0f 	bl	8011bf0 <rcl_context_is_valid>
 80135d2:	2800      	cmp	r0, #0
 80135d4:	d067      	beq.n	80136a6 <rcl_wait_set_init+0x10e>
 80135d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80135d8:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80135da:	205c      	movs	r0, #92	@ 0x5c
 80135dc:	4798      	blx	r3
 80135de:	6320      	str	r0, [r4, #48]	@ 0x30
 80135e0:	2800      	cmp	r0, #0
 80135e2:	d062      	beq.n	80136aa <rcl_wait_set_init+0x112>
 80135e4:	4629      	mov	r1, r5
 80135e6:	225c      	movs	r2, #92	@ 0x5c
 80135e8:	f004 f8e0 	bl	80177ac <memset>
 80135ec:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 80135f0:	eb03 0e02 	add.w	lr, r3, r2
 80135f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80135f6:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80135f8:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80135fc:	449e      	add	lr, r3
 80135fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013602:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8013606:	e9c6 5504 	strd	r5, r5, [r6, #16]
 801360a:	e9c6 5507 	strd	r5, r5, [r6, #28]
 801360e:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8013612:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8013616:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 801361a:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 801361e:	f8da a000 	ldr.w	sl, [sl]
 8013622:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013624:	44c6      	add	lr, r8
 8013626:	f8dc 3000 	ldr.w	r3, [ip]
 801362a:	602b      	str	r3, [r5, #0]
 801362c:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8013630:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8013634:	f002 f9fe 	bl	8015a34 <rmw_create_wait_set>
 8013638:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801363a:	63f0      	str	r0, [r6, #60]	@ 0x3c
 801363c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801363e:	b350      	cbz	r0, 8013696 <rcl_wait_set_init+0xfe>
 8013640:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013642:	9302      	str	r3, [sp, #8]
 8013644:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013646:	9301      	str	r3, [sp, #4]
 8013648:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801364a:	9300      	str	r3, [sp, #0]
 801364c:	4642      	mov	r2, r8
 801364e:	464b      	mov	r3, r9
 8013650:	4639      	mov	r1, r7
 8013652:	4620      	mov	r0, r4
 8013654:	f7ff fdea 	bl	801322c <rcl_wait_set_resize>
 8013658:	4605      	mov	r5, r0
 801365a:	2800      	cmp	r0, #0
 801365c:	d0af      	beq.n	80135be <rcl_wait_set_init+0x26>
 801365e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013660:	bb2b      	cbnz	r3, 80136ae <rcl_wait_set_init+0x116>
 8013662:	2600      	movs	r6, #0
 8013664:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8013668:	9600      	str	r6, [sp, #0]
 801366a:	4633      	mov	r3, r6
 801366c:	4632      	mov	r2, r6
 801366e:	4631      	mov	r1, r6
 8013670:	4620      	mov	r0, r4
 8013672:	f7ff fddb 	bl	801322c <rcl_wait_set_resize>
 8013676:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8013678:	2800      	cmp	r0, #0
 801367a:	d0a0      	beq.n	80135be <rcl_wait_set_init+0x26>
 801367c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801367e:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8013680:	4798      	blx	r3
 8013682:	4628      	mov	r0, r5
 8013684:	6326      	str	r6, [r4, #48]	@ 0x30
 8013686:	b004      	add	sp, #16
 8013688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801368c:	250b      	movs	r5, #11
 801368e:	4628      	mov	r0, r5
 8013690:	b004      	add	sp, #16
 8013692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013696:	2501      	movs	r5, #1
 8013698:	f002 f9d6 	bl	8015a48 <rmw_destroy_wait_set>
 801369c:	2800      	cmp	r0, #0
 801369e:	bf18      	it	ne
 80136a0:	f44f 7561 	movne.w	r5, #900	@ 0x384
 80136a4:	e7dd      	b.n	8013662 <rcl_wait_set_init+0xca>
 80136a6:	2565      	movs	r5, #101	@ 0x65
 80136a8:	e789      	b.n	80135be <rcl_wait_set_init+0x26>
 80136aa:	250a      	movs	r5, #10
 80136ac:	e787      	b.n	80135be <rcl_wait_set_init+0x26>
 80136ae:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80136b0:	e7f2      	b.n	8013698 <rcl_wait_set_init+0x100>
 80136b2:	bf00      	nop

080136b4 <rcl_wait_set_add_guard_condition>:
 80136b4:	b318      	cbz	r0, 80136fe <rcl_wait_set_add_guard_condition+0x4a>
 80136b6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80136b8:	b570      	push	{r4, r5, r6, lr}
 80136ba:	4604      	mov	r4, r0
 80136bc:	b30b      	cbz	r3, 8013702 <rcl_wait_set_add_guard_condition+0x4e>
 80136be:	b319      	cbz	r1, 8013708 <rcl_wait_set_add_guard_condition+0x54>
 80136c0:	68dd      	ldr	r5, [r3, #12]
 80136c2:	68c0      	ldr	r0, [r0, #12]
 80136c4:	4285      	cmp	r5, r0
 80136c6:	d217      	bcs.n	80136f8 <rcl_wait_set_add_guard_condition+0x44>
 80136c8:	68a0      	ldr	r0, [r4, #8]
 80136ca:	1c6e      	adds	r6, r5, #1
 80136cc:	60de      	str	r6, [r3, #12]
 80136ce:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80136d2:	b102      	cbz	r2, 80136d6 <rcl_wait_set_add_guard_condition+0x22>
 80136d4:	6015      	str	r5, [r2, #0]
 80136d6:	4608      	mov	r0, r1
 80136d8:	f003 fb6e 	bl	8016db8 <rcl_guard_condition_get_rmw_handle>
 80136dc:	b150      	cbz	r0, 80136f4 <rcl_wait_set_add_guard_condition+0x40>
 80136de:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80136e0:	6842      	ldr	r2, [r0, #4]
 80136e2:	695b      	ldr	r3, [r3, #20]
 80136e4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80136e8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80136ea:	6913      	ldr	r3, [r2, #16]
 80136ec:	3301      	adds	r3, #1
 80136ee:	2000      	movs	r0, #0
 80136f0:	6113      	str	r3, [r2, #16]
 80136f2:	bd70      	pop	{r4, r5, r6, pc}
 80136f4:	2001      	movs	r0, #1
 80136f6:	bd70      	pop	{r4, r5, r6, pc}
 80136f8:	f240 3086 	movw	r0, #902	@ 0x386
 80136fc:	bd70      	pop	{r4, r5, r6, pc}
 80136fe:	200b      	movs	r0, #11
 8013700:	4770      	bx	lr
 8013702:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013706:	bd70      	pop	{r4, r5, r6, pc}
 8013708:	200b      	movs	r0, #11
 801370a:	bd70      	pop	{r4, r5, r6, pc}

0801370c <rcl_wait_set_add_timer>:
 801370c:	b328      	cbz	r0, 801375a <rcl_wait_set_add_timer+0x4e>
 801370e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013710:	b570      	push	{r4, r5, r6, lr}
 8013712:	4604      	mov	r4, r0
 8013714:	b31b      	cbz	r3, 801375e <rcl_wait_set_add_timer+0x52>
 8013716:	b329      	cbz	r1, 8013764 <rcl_wait_set_add_timer+0x58>
 8013718:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801371a:	6965      	ldr	r5, [r4, #20]
 801371c:	42a8      	cmp	r0, r5
 801371e:	d219      	bcs.n	8013754 <rcl_wait_set_add_timer+0x48>
 8013720:	6925      	ldr	r5, [r4, #16]
 8013722:	1c46      	adds	r6, r0, #1
 8013724:	641e      	str	r6, [r3, #64]	@ 0x40
 8013726:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 801372a:	b102      	cbz	r2, 801372e <rcl_wait_set_add_timer+0x22>
 801372c:	6010      	str	r0, [r2, #0]
 801372e:	4608      	mov	r0, r1
 8013730:	f7ff fba6 	bl	8012e80 <rcl_timer_get_guard_condition>
 8013734:	b168      	cbz	r0, 8013752 <rcl_wait_set_add_timer+0x46>
 8013736:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013738:	68e3      	ldr	r3, [r4, #12]
 801373a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 801373c:	3b01      	subs	r3, #1
 801373e:	441d      	add	r5, r3
 8013740:	f003 fb3a 	bl	8016db8 <rcl_guard_condition_get_rmw_handle>
 8013744:	b180      	cbz	r0, 8013768 <rcl_wait_set_add_timer+0x5c>
 8013746:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013748:	6842      	ldr	r2, [r0, #4]
 801374a:	695b      	ldr	r3, [r3, #20]
 801374c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013750:	2000      	movs	r0, #0
 8013752:	bd70      	pop	{r4, r5, r6, pc}
 8013754:	f240 3086 	movw	r0, #902	@ 0x386
 8013758:	bd70      	pop	{r4, r5, r6, pc}
 801375a:	200b      	movs	r0, #11
 801375c:	4770      	bx	lr
 801375e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013762:	bd70      	pop	{r4, r5, r6, pc}
 8013764:	200b      	movs	r0, #11
 8013766:	bd70      	pop	{r4, r5, r6, pc}
 8013768:	2001      	movs	r0, #1
 801376a:	bd70      	pop	{r4, r5, r6, pc}

0801376c <rcl_wait_set_add_client>:
 801376c:	b318      	cbz	r0, 80137b6 <rcl_wait_set_add_client+0x4a>
 801376e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013770:	b570      	push	{r4, r5, r6, lr}
 8013772:	4604      	mov	r4, r0
 8013774:	b30b      	cbz	r3, 80137ba <rcl_wait_set_add_client+0x4e>
 8013776:	b319      	cbz	r1, 80137c0 <rcl_wait_set_add_client+0x54>
 8013778:	699d      	ldr	r5, [r3, #24]
 801377a:	69c0      	ldr	r0, [r0, #28]
 801377c:	4285      	cmp	r5, r0
 801377e:	d217      	bcs.n	80137b0 <rcl_wait_set_add_client+0x44>
 8013780:	69a0      	ldr	r0, [r4, #24]
 8013782:	1c6e      	adds	r6, r5, #1
 8013784:	619e      	str	r6, [r3, #24]
 8013786:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801378a:	b102      	cbz	r2, 801378e <rcl_wait_set_add_client+0x22>
 801378c:	6015      	str	r5, [r2, #0]
 801378e:	4608      	mov	r0, r1
 8013790:	f7fe f982 	bl	8011a98 <rcl_client_get_rmw_handle>
 8013794:	b150      	cbz	r0, 80137ac <rcl_wait_set_add_client+0x40>
 8013796:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013798:	6842      	ldr	r2, [r0, #4]
 801379a:	6a1b      	ldr	r3, [r3, #32]
 801379c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80137a0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80137a2:	69d3      	ldr	r3, [r2, #28]
 80137a4:	3301      	adds	r3, #1
 80137a6:	2000      	movs	r0, #0
 80137a8:	61d3      	str	r3, [r2, #28]
 80137aa:	bd70      	pop	{r4, r5, r6, pc}
 80137ac:	2001      	movs	r0, #1
 80137ae:	bd70      	pop	{r4, r5, r6, pc}
 80137b0:	f240 3086 	movw	r0, #902	@ 0x386
 80137b4:	bd70      	pop	{r4, r5, r6, pc}
 80137b6:	200b      	movs	r0, #11
 80137b8:	4770      	bx	lr
 80137ba:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80137be:	bd70      	pop	{r4, r5, r6, pc}
 80137c0:	200b      	movs	r0, #11
 80137c2:	bd70      	pop	{r4, r5, r6, pc}

080137c4 <rcl_wait_set_add_service>:
 80137c4:	b318      	cbz	r0, 801380e <rcl_wait_set_add_service+0x4a>
 80137c6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80137c8:	b570      	push	{r4, r5, r6, lr}
 80137ca:	4604      	mov	r4, r0
 80137cc:	b30b      	cbz	r3, 8013812 <rcl_wait_set_add_service+0x4e>
 80137ce:	b319      	cbz	r1, 8013818 <rcl_wait_set_add_service+0x54>
 80137d0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 80137d2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80137d4:	4285      	cmp	r5, r0
 80137d6:	d217      	bcs.n	8013808 <rcl_wait_set_add_service+0x44>
 80137d8:	6a20      	ldr	r0, [r4, #32]
 80137da:	1c6e      	adds	r6, r5, #1
 80137dc:	625e      	str	r6, [r3, #36]	@ 0x24
 80137de:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80137e2:	b102      	cbz	r2, 80137e6 <rcl_wait_set_add_service+0x22>
 80137e4:	6015      	str	r5, [r2, #0]
 80137e6:	4608      	mov	r0, r1
 80137e8:	f7fe fed6 	bl	8012598 <rcl_service_get_rmw_handle>
 80137ec:	b150      	cbz	r0, 8013804 <rcl_wait_set_add_service+0x40>
 80137ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80137f0:	6842      	ldr	r2, [r0, #4]
 80137f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80137f4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80137f8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80137fa:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80137fc:	3301      	adds	r3, #1
 80137fe:	2000      	movs	r0, #0
 8013800:	6293      	str	r3, [r2, #40]	@ 0x28
 8013802:	bd70      	pop	{r4, r5, r6, pc}
 8013804:	2001      	movs	r0, #1
 8013806:	bd70      	pop	{r4, r5, r6, pc}
 8013808:	f240 3086 	movw	r0, #902	@ 0x386
 801380c:	bd70      	pop	{r4, r5, r6, pc}
 801380e:	200b      	movs	r0, #11
 8013810:	4770      	bx	lr
 8013812:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013816:	bd70      	pop	{r4, r5, r6, pc}
 8013818:	200b      	movs	r0, #11
 801381a:	bd70      	pop	{r4, r5, r6, pc}
 801381c:	0000      	movs	r0, r0
	...

08013820 <rcl_wait>:
 8013820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013824:	ed2d 8b02 	vpush	{d8}
 8013828:	b08d      	sub	sp, #52	@ 0x34
 801382a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801382e:	2800      	cmp	r0, #0
 8013830:	f000 8143 	beq.w	8013aba <rcl_wait+0x29a>
 8013834:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8013836:	4605      	mov	r5, r0
 8013838:	2e00      	cmp	r6, #0
 801383a:	f000 8112 	beq.w	8013a62 <rcl_wait+0x242>
 801383e:	6843      	ldr	r3, [r0, #4]
 8013840:	b983      	cbnz	r3, 8013864 <rcl_wait+0x44>
 8013842:	68eb      	ldr	r3, [r5, #12]
 8013844:	b973      	cbnz	r3, 8013864 <rcl_wait+0x44>
 8013846:	696b      	ldr	r3, [r5, #20]
 8013848:	b963      	cbnz	r3, 8013864 <rcl_wait+0x44>
 801384a:	69eb      	ldr	r3, [r5, #28]
 801384c:	b953      	cbnz	r3, 8013864 <rcl_wait+0x44>
 801384e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8013850:	b943      	cbnz	r3, 8013864 <rcl_wait+0x44>
 8013852:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8013854:	b933      	cbnz	r3, 8013864 <rcl_wait+0x44>
 8013856:	f240 3085 	movw	r0, #901	@ 0x385
 801385a:	b00d      	add	sp, #52	@ 0x34
 801385c:	ecbd 8b02 	vpop	{d8}
 8013860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013864:	9b04      	ldr	r3, [sp, #16]
 8013866:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8013868:	2b01      	cmp	r3, #1
 801386a:	9b05      	ldr	r3, [sp, #20]
 801386c:	f173 0300 	sbcs.w	r3, r3, #0
 8013870:	f2c0 80f0 	blt.w	8013a54 <rcl_wait+0x234>
 8013874:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8013878:	4643      	mov	r3, r8
 801387a:	2a00      	cmp	r2, #0
 801387c:	f000 8133 	beq.w	8013ae6 <rcl_wait+0x2c6>
 8013880:	2400      	movs	r4, #0
 8013882:	4613      	mov	r3, r2
 8013884:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8013af8 <rcl_wait+0x2d8>
 8013888:	46a2      	mov	sl, r4
 801388a:	46a3      	mov	fp, r4
 801388c:	f240 3921 	movw	r9, #801	@ 0x321
 8013890:	4632      	mov	r2, r6
 8013892:	e014      	b.n	80138be <rcl_wait+0x9e>
 8013894:	2800      	cmp	r0, #0
 8013896:	d1e0      	bne.n	801385a <rcl_wait+0x3a>
 8013898:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801389c:	4542      	cmp	r2, r8
 801389e:	eb73 0107 	sbcs.w	r1, r3, r7
 80138a2:	da03      	bge.n	80138ac <rcl_wait+0x8c>
 80138a4:	4690      	mov	r8, r2
 80138a6:	461f      	mov	r7, r3
 80138a8:	f04f 0b01 	mov.w	fp, #1
 80138ac:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80138ae:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80138b0:	3401      	adds	r4, #1
 80138b2:	f14a 0a00 	adc.w	sl, sl, #0
 80138b6:	429c      	cmp	r4, r3
 80138b8:	f17a 0100 	sbcs.w	r1, sl, #0
 80138bc:	d228      	bcs.n	8013910 <rcl_wait+0xf0>
 80138be:	6928      	ldr	r0, [r5, #16]
 80138c0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80138c4:	a908      	add	r1, sp, #32
 80138c6:	00a6      	lsls	r6, r4, #2
 80138c8:	2800      	cmp	r0, #0
 80138ca:	d0f1      	beq.n	80138b0 <rcl_wait+0x90>
 80138cc:	68eb      	ldr	r3, [r5, #12]
 80138ce:	f8d2 c014 	ldr.w	ip, [r2, #20]
 80138d2:	4423      	add	r3, r4
 80138d4:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 80138d8:	f1be 0f00 	cmp.w	lr, #0
 80138dc:	d006      	beq.n	80138ec <rcl_wait+0xcc>
 80138de:	6913      	ldr	r3, [r2, #16]
 80138e0:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 80138e4:	3301      	adds	r3, #1
 80138e6:	6113      	str	r3, [r2, #16]
 80138e8:	692b      	ldr	r3, [r5, #16]
 80138ea:	5998      	ldr	r0, [r3, r6]
 80138ec:	ed8d 8b08 	vstr	d8, [sp, #32]
 80138f0:	f7ff fa94 	bl	8012e1c <rcl_timer_get_time_until_next_call>
 80138f4:	4548      	cmp	r0, r9
 80138f6:	d1cd      	bne.n	8013894 <rcl_wait+0x74>
 80138f8:	692b      	ldr	r3, [r5, #16]
 80138fa:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80138fc:	2100      	movs	r1, #0
 80138fe:	5199      	str	r1, [r3, r6]
 8013900:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013902:	3401      	adds	r4, #1
 8013904:	f14a 0a00 	adc.w	sl, sl, #0
 8013908:	429c      	cmp	r4, r3
 801390a:	f17a 0100 	sbcs.w	r1, sl, #0
 801390e:	d3d6      	bcc.n	80138be <rcl_wait+0x9e>
 8013910:	4616      	mov	r6, r2
 8013912:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8013916:	4313      	orrs	r3, r2
 8013918:	46d9      	mov	r9, fp
 801391a:	f040 80a9 	bne.w	8013a70 <rcl_wait+0x250>
 801391e:	2300      	movs	r3, #0
 8013920:	2200      	movs	r2, #0
 8013922:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013926:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801392a:	ab08      	add	r3, sp, #32
 801392c:	9302      	str	r3, [sp, #8]
 801392e:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8013930:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8013934:	e9cd 3200 	strd	r3, r2, [sp]
 8013938:	f106 0110 	add.w	r1, r6, #16
 801393c:	f106 031c 	add.w	r3, r6, #28
 8013940:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8013944:	1d30      	adds	r0, r6, #4
 8013946:	f001 fefd 	bl	8015744 <rmw_wait>
 801394a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801394c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801394e:	4680      	mov	r8, r0
 8013950:	b1ca      	cbz	r2, 8013986 <rcl_wait+0x166>
 8013952:	2400      	movs	r4, #0
 8013954:	4627      	mov	r7, r4
 8013956:	692a      	ldr	r2, [r5, #16]
 8013958:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 801395c:	f10d 011f 	add.w	r1, sp, #31
 8013960:	00a6      	lsls	r6, r4, #2
 8013962:	b160      	cbz	r0, 801397e <rcl_wait+0x15e>
 8013964:	f88d 701f 	strb.w	r7, [sp, #31]
 8013968:	f7ff fa1e 	bl	8012da8 <rcl_timer_is_ready>
 801396c:	2800      	cmp	r0, #0
 801396e:	f47f af74 	bne.w	801385a <rcl_wait+0x3a>
 8013972:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8013976:	b90b      	cbnz	r3, 801397c <rcl_wait+0x15c>
 8013978:	692a      	ldr	r2, [r5, #16]
 801397a:	5193      	str	r3, [r2, r6]
 801397c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801397e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013980:	3401      	adds	r4, #1
 8013982:	42a2      	cmp	r2, r4
 8013984:	d8e7      	bhi.n	8013956 <rcl_wait+0x136>
 8013986:	f038 0002 	bics.w	r0, r8, #2
 801398a:	f040 8090 	bne.w	8013aae <rcl_wait+0x28e>
 801398e:	686e      	ldr	r6, [r5, #4]
 8013990:	4602      	mov	r2, r0
 8013992:	b91e      	cbnz	r6, 801399c <rcl_wait+0x17c>
 8013994:	e00d      	b.n	80139b2 <rcl_wait+0x192>
 8013996:	3201      	adds	r2, #1
 8013998:	42b2      	cmp	r2, r6
 801399a:	d00a      	beq.n	80139b2 <rcl_wait+0x192>
 801399c:	6899      	ldr	r1, [r3, #8]
 801399e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80139a2:	2900      	cmp	r1, #0
 80139a4:	d1f7      	bne.n	8013996 <rcl_wait+0x176>
 80139a6:	682c      	ldr	r4, [r5, #0]
 80139a8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80139ac:	3201      	adds	r2, #1
 80139ae:	42b2      	cmp	r2, r6
 80139b0:	d1f4      	bne.n	801399c <rcl_wait+0x17c>
 80139b2:	68ee      	ldr	r6, [r5, #12]
 80139b4:	2200      	movs	r2, #0
 80139b6:	b91e      	cbnz	r6, 80139c0 <rcl_wait+0x1a0>
 80139b8:	e00d      	b.n	80139d6 <rcl_wait+0x1b6>
 80139ba:	3201      	adds	r2, #1
 80139bc:	42b2      	cmp	r2, r6
 80139be:	d00a      	beq.n	80139d6 <rcl_wait+0x1b6>
 80139c0:	6959      	ldr	r1, [r3, #20]
 80139c2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80139c6:	2900      	cmp	r1, #0
 80139c8:	d1f7      	bne.n	80139ba <rcl_wait+0x19a>
 80139ca:	68ac      	ldr	r4, [r5, #8]
 80139cc:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80139d0:	3201      	adds	r2, #1
 80139d2:	42b2      	cmp	r2, r6
 80139d4:	d1f4      	bne.n	80139c0 <rcl_wait+0x1a0>
 80139d6:	69ee      	ldr	r6, [r5, #28]
 80139d8:	2200      	movs	r2, #0
 80139da:	b91e      	cbnz	r6, 80139e4 <rcl_wait+0x1c4>
 80139dc:	e00d      	b.n	80139fa <rcl_wait+0x1da>
 80139de:	3201      	adds	r2, #1
 80139e0:	42b2      	cmp	r2, r6
 80139e2:	d00a      	beq.n	80139fa <rcl_wait+0x1da>
 80139e4:	6a19      	ldr	r1, [r3, #32]
 80139e6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80139ea:	2900      	cmp	r1, #0
 80139ec:	d1f7      	bne.n	80139de <rcl_wait+0x1be>
 80139ee:	69ac      	ldr	r4, [r5, #24]
 80139f0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80139f4:	3201      	adds	r2, #1
 80139f6:	42b2      	cmp	r2, r6
 80139f8:	d1f4      	bne.n	80139e4 <rcl_wait+0x1c4>
 80139fa:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 80139fc:	2200      	movs	r2, #0
 80139fe:	b91e      	cbnz	r6, 8013a08 <rcl_wait+0x1e8>
 8013a00:	e00d      	b.n	8013a1e <rcl_wait+0x1fe>
 8013a02:	3201      	adds	r2, #1
 8013a04:	4296      	cmp	r6, r2
 8013a06:	d00a      	beq.n	8013a1e <rcl_wait+0x1fe>
 8013a08:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8013a0a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013a0e:	2900      	cmp	r1, #0
 8013a10:	d1f7      	bne.n	8013a02 <rcl_wait+0x1e2>
 8013a12:	6a2c      	ldr	r4, [r5, #32]
 8013a14:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013a18:	3201      	adds	r2, #1
 8013a1a:	4296      	cmp	r6, r2
 8013a1c:	d1f4      	bne.n	8013a08 <rcl_wait+0x1e8>
 8013a1e:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8013a20:	2200      	movs	r2, #0
 8013a22:	b91e      	cbnz	r6, 8013a2c <rcl_wait+0x20c>
 8013a24:	e00d      	b.n	8013a42 <rcl_wait+0x222>
 8013a26:	3201      	adds	r2, #1
 8013a28:	42b2      	cmp	r2, r6
 8013a2a:	d00a      	beq.n	8013a42 <rcl_wait+0x222>
 8013a2c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8013a2e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013a32:	2900      	cmp	r1, #0
 8013a34:	d1f7      	bne.n	8013a26 <rcl_wait+0x206>
 8013a36:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8013a38:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013a3c:	3201      	adds	r2, #1
 8013a3e:	42b2      	cmp	r2, r6
 8013a40:	d1f4      	bne.n	8013a2c <rcl_wait+0x20c>
 8013a42:	f1b8 0f02 	cmp.w	r8, #2
 8013a46:	f47f af08 	bne.w	801385a <rcl_wait+0x3a>
 8013a4a:	464b      	mov	r3, r9
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	bf08      	it	eq
 8013a50:	2002      	moveq	r0, #2
 8013a52:	e702      	b.n	801385a <rcl_wait+0x3a>
 8013a54:	2a00      	cmp	r2, #0
 8013a56:	d03a      	beq.n	8013ace <rcl_wait+0x2ae>
 8013a58:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8013a5c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8013a60:	e70e      	b.n	8013880 <rcl_wait+0x60>
 8013a62:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013a66:	b00d      	add	sp, #52	@ 0x34
 8013a68:	ecbd 8b02 	vpop	{d8}
 8013a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a70:	9b04      	ldr	r3, [sp, #16]
 8013a72:	2b01      	cmp	r3, #1
 8013a74:	9b05      	ldr	r3, [sp, #20]
 8013a76:	f173 0300 	sbcs.w	r3, r3, #0
 8013a7a:	db24      	blt.n	8013ac6 <rcl_wait+0x2a6>
 8013a7c:	2f00      	cmp	r7, #0
 8013a7e:	bfbc      	itt	lt
 8013a80:	f04f 0800 	movlt.w	r8, #0
 8013a84:	4647      	movlt	r7, r8
 8013a86:	a31e      	add	r3, pc, #120	@ (adr r3, 8013b00 <rcl_wait+0x2e0>)
 8013a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a8c:	4640      	mov	r0, r8
 8013a8e:	4639      	mov	r1, r7
 8013a90:	f7ed f84c 	bl	8000b2c <__aeabi_ldivmod>
 8013a94:	a31a      	add	r3, pc, #104	@ (adr r3, 8013b00 <rcl_wait+0x2e0>)
 8013a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a9a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013a9e:	4640      	mov	r0, r8
 8013aa0:	4639      	mov	r1, r7
 8013aa2:	f7ed f843 	bl	8000b2c <__aeabi_ldivmod>
 8013aa6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8013aaa:	ab08      	add	r3, sp, #32
 8013aac:	e73e      	b.n	801392c <rcl_wait+0x10c>
 8013aae:	2001      	movs	r0, #1
 8013ab0:	b00d      	add	sp, #52	@ 0x34
 8013ab2:	ecbd 8b02 	vpop	{d8}
 8013ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013aba:	200b      	movs	r0, #11
 8013abc:	b00d      	add	sp, #52	@ 0x34
 8013abe:	ecbd 8b02 	vpop	{d8}
 8013ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ac6:	465b      	mov	r3, fp
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d1d7      	bne.n	8013a7c <rcl_wait+0x25c>
 8013acc:	e72e      	b.n	801392c <rcl_wait+0x10c>
 8013ace:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8013ad2:	430b      	orrs	r3, r1
 8013ad4:	bf08      	it	eq
 8013ad6:	4691      	moveq	r9, r2
 8013ad8:	f43f af21 	beq.w	801391e <rcl_wait+0xfe>
 8013adc:	9b04      	ldr	r3, [sp, #16]
 8013ade:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8013ae2:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8013ae6:	2b01      	cmp	r3, #1
 8013ae8:	9b05      	ldr	r3, [sp, #20]
 8013aea:	f173 0300 	sbcs.w	r3, r3, #0
 8013aee:	f04f 0300 	mov.w	r3, #0
 8013af2:	4699      	mov	r9, r3
 8013af4:	dac2      	bge.n	8013a7c <rcl_wait+0x25c>
 8013af6:	e719      	b.n	801392c <rcl_wait+0x10c>
 8013af8:	ffffffff 	.word	0xffffffff
 8013afc:	7fffffff 	.word	0x7fffffff
 8013b00:	3b9aca00 	.word	0x3b9aca00
 8013b04:	00000000 	.word	0x00000000

08013b08 <rcl_action_take_goal_response>:
 8013b08:	2800      	cmp	r0, #0
 8013b0a:	d039      	beq.n	8013b80 <rcl_action_take_goal_response+0x78>
 8013b0c:	b570      	push	{r4, r5, r6, lr}
 8013b0e:	4604      	mov	r4, r0
 8013b10:	6800      	ldr	r0, [r0, #0]
 8013b12:	b380      	cbz	r0, 8013b76 <rcl_action_take_goal_response+0x6e>
 8013b14:	460d      	mov	r5, r1
 8013b16:	4616      	mov	r6, r2
 8013b18:	f7fe f842 	bl	8011ba0 <rcl_client_is_valid>
 8013b1c:	b330      	cbz	r0, 8013b6c <rcl_action_take_goal_response+0x64>
 8013b1e:	6820      	ldr	r0, [r4, #0]
 8013b20:	3004      	adds	r0, #4
 8013b22:	f7fe f83d 	bl	8011ba0 <rcl_client_is_valid>
 8013b26:	b308      	cbz	r0, 8013b6c <rcl_action_take_goal_response+0x64>
 8013b28:	6820      	ldr	r0, [r4, #0]
 8013b2a:	3008      	adds	r0, #8
 8013b2c:	f7fe f838 	bl	8011ba0 <rcl_client_is_valid>
 8013b30:	b1e0      	cbz	r0, 8013b6c <rcl_action_take_goal_response+0x64>
 8013b32:	6820      	ldr	r0, [r4, #0]
 8013b34:	300c      	adds	r0, #12
 8013b36:	f7fe fdf5 	bl	8012724 <rcl_subscription_is_valid>
 8013b3a:	b1b8      	cbz	r0, 8013b6c <rcl_action_take_goal_response+0x64>
 8013b3c:	6820      	ldr	r0, [r4, #0]
 8013b3e:	3010      	adds	r0, #16
 8013b40:	f7fe fdf0 	bl	8012724 <rcl_subscription_is_valid>
 8013b44:	b190      	cbz	r0, 8013b6c <rcl_action_take_goal_response+0x64>
 8013b46:	b1cd      	cbz	r5, 8013b7c <rcl_action_take_goal_response+0x74>
 8013b48:	b1c6      	cbz	r6, 8013b7c <rcl_action_take_goal_response+0x74>
 8013b4a:	6820      	ldr	r0, [r4, #0]
 8013b4c:	4632      	mov	r2, r6
 8013b4e:	4629      	mov	r1, r5
 8013b50:	f7fd ffde 	bl	8011b10 <rcl_take_response>
 8013b54:	b148      	cbz	r0, 8013b6a <rcl_action_take_goal_response+0x62>
 8013b56:	280a      	cmp	r0, #10
 8013b58:	d007      	beq.n	8013b6a <rcl_action_take_goal_response+0x62>
 8013b5a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013b5e:	f640 0337 	movw	r3, #2103	@ 0x837
 8013b62:	4290      	cmp	r0, r2
 8013b64:	bf0c      	ite	eq
 8013b66:	4618      	moveq	r0, r3
 8013b68:	2001      	movne	r0, #1
 8013b6a:	bd70      	pop	{r4, r5, r6, pc}
 8013b6c:	f7f9 f9c4 	bl	800cef8 <rcutils_reset_error>
 8013b70:	f640 0036 	movw	r0, #2102	@ 0x836
 8013b74:	bd70      	pop	{r4, r5, r6, pc}
 8013b76:	f640 0036 	movw	r0, #2102	@ 0x836
 8013b7a:	bd70      	pop	{r4, r5, r6, pc}
 8013b7c:	200b      	movs	r0, #11
 8013b7e:	bd70      	pop	{r4, r5, r6, pc}
 8013b80:	f640 0036 	movw	r0, #2102	@ 0x836
 8013b84:	4770      	bx	lr
 8013b86:	bf00      	nop

08013b88 <rcl_action_send_result_request>:
 8013b88:	b390      	cbz	r0, 8013bf0 <rcl_action_send_result_request+0x68>
 8013b8a:	b570      	push	{r4, r5, r6, lr}
 8013b8c:	4604      	mov	r4, r0
 8013b8e:	6800      	ldr	r0, [r0, #0]
 8013b90:	b348      	cbz	r0, 8013be6 <rcl_action_send_result_request+0x5e>
 8013b92:	460d      	mov	r5, r1
 8013b94:	4616      	mov	r6, r2
 8013b96:	f7fe f803 	bl	8011ba0 <rcl_client_is_valid>
 8013b9a:	b1f8      	cbz	r0, 8013bdc <rcl_action_send_result_request+0x54>
 8013b9c:	6820      	ldr	r0, [r4, #0]
 8013b9e:	3004      	adds	r0, #4
 8013ba0:	f7fd fffe 	bl	8011ba0 <rcl_client_is_valid>
 8013ba4:	b1d0      	cbz	r0, 8013bdc <rcl_action_send_result_request+0x54>
 8013ba6:	6820      	ldr	r0, [r4, #0]
 8013ba8:	3008      	adds	r0, #8
 8013baa:	f7fd fff9 	bl	8011ba0 <rcl_client_is_valid>
 8013bae:	b1a8      	cbz	r0, 8013bdc <rcl_action_send_result_request+0x54>
 8013bb0:	6820      	ldr	r0, [r4, #0]
 8013bb2:	300c      	adds	r0, #12
 8013bb4:	f7fe fdb6 	bl	8012724 <rcl_subscription_is_valid>
 8013bb8:	b180      	cbz	r0, 8013bdc <rcl_action_send_result_request+0x54>
 8013bba:	6820      	ldr	r0, [r4, #0]
 8013bbc:	3010      	adds	r0, #16
 8013bbe:	f7fe fdb1 	bl	8012724 <rcl_subscription_is_valid>
 8013bc2:	b158      	cbz	r0, 8013bdc <rcl_action_send_result_request+0x54>
 8013bc4:	b195      	cbz	r5, 8013bec <rcl_action_send_result_request+0x64>
 8013bc6:	b18e      	cbz	r6, 8013bec <rcl_action_send_result_request+0x64>
 8013bc8:	6820      	ldr	r0, [r4, #0]
 8013bca:	4632      	mov	r2, r6
 8013bcc:	4629      	mov	r1, r5
 8013bce:	3008      	adds	r0, #8
 8013bd0:	f7fd ff68 	bl	8011aa4 <rcl_send_request>
 8013bd4:	3800      	subs	r0, #0
 8013bd6:	bf18      	it	ne
 8013bd8:	2001      	movne	r0, #1
 8013bda:	bd70      	pop	{r4, r5, r6, pc}
 8013bdc:	f7f9 f98c 	bl	800cef8 <rcutils_reset_error>
 8013be0:	f640 0036 	movw	r0, #2102	@ 0x836
 8013be4:	bd70      	pop	{r4, r5, r6, pc}
 8013be6:	f640 0036 	movw	r0, #2102	@ 0x836
 8013bea:	bd70      	pop	{r4, r5, r6, pc}
 8013bec:	200b      	movs	r0, #11
 8013bee:	bd70      	pop	{r4, r5, r6, pc}
 8013bf0:	f640 0036 	movw	r0, #2102	@ 0x836
 8013bf4:	4770      	bx	lr
 8013bf6:	bf00      	nop

08013bf8 <rcl_action_take_result_response>:
 8013bf8:	2800      	cmp	r0, #0
 8013bfa:	d03a      	beq.n	8013c72 <rcl_action_take_result_response+0x7a>
 8013bfc:	b570      	push	{r4, r5, r6, lr}
 8013bfe:	4604      	mov	r4, r0
 8013c00:	6800      	ldr	r0, [r0, #0]
 8013c02:	b388      	cbz	r0, 8013c68 <rcl_action_take_result_response+0x70>
 8013c04:	460d      	mov	r5, r1
 8013c06:	4616      	mov	r6, r2
 8013c08:	f7fd ffca 	bl	8011ba0 <rcl_client_is_valid>
 8013c0c:	b338      	cbz	r0, 8013c5e <rcl_action_take_result_response+0x66>
 8013c0e:	6820      	ldr	r0, [r4, #0]
 8013c10:	3004      	adds	r0, #4
 8013c12:	f7fd ffc5 	bl	8011ba0 <rcl_client_is_valid>
 8013c16:	b310      	cbz	r0, 8013c5e <rcl_action_take_result_response+0x66>
 8013c18:	6820      	ldr	r0, [r4, #0]
 8013c1a:	3008      	adds	r0, #8
 8013c1c:	f7fd ffc0 	bl	8011ba0 <rcl_client_is_valid>
 8013c20:	b1e8      	cbz	r0, 8013c5e <rcl_action_take_result_response+0x66>
 8013c22:	6820      	ldr	r0, [r4, #0]
 8013c24:	300c      	adds	r0, #12
 8013c26:	f7fe fd7d 	bl	8012724 <rcl_subscription_is_valid>
 8013c2a:	b1c0      	cbz	r0, 8013c5e <rcl_action_take_result_response+0x66>
 8013c2c:	6820      	ldr	r0, [r4, #0]
 8013c2e:	3010      	adds	r0, #16
 8013c30:	f7fe fd78 	bl	8012724 <rcl_subscription_is_valid>
 8013c34:	b198      	cbz	r0, 8013c5e <rcl_action_take_result_response+0x66>
 8013c36:	b1d5      	cbz	r5, 8013c6e <rcl_action_take_result_response+0x76>
 8013c38:	b1ce      	cbz	r6, 8013c6e <rcl_action_take_result_response+0x76>
 8013c3a:	6820      	ldr	r0, [r4, #0]
 8013c3c:	4632      	mov	r2, r6
 8013c3e:	4629      	mov	r1, r5
 8013c40:	3008      	adds	r0, #8
 8013c42:	f7fd ff65 	bl	8011b10 <rcl_take_response>
 8013c46:	b148      	cbz	r0, 8013c5c <rcl_action_take_result_response+0x64>
 8013c48:	280a      	cmp	r0, #10
 8013c4a:	d007      	beq.n	8013c5c <rcl_action_take_result_response+0x64>
 8013c4c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013c50:	f640 0337 	movw	r3, #2103	@ 0x837
 8013c54:	4290      	cmp	r0, r2
 8013c56:	bf0c      	ite	eq
 8013c58:	4618      	moveq	r0, r3
 8013c5a:	2001      	movne	r0, #1
 8013c5c:	bd70      	pop	{r4, r5, r6, pc}
 8013c5e:	f7f9 f94b 	bl	800cef8 <rcutils_reset_error>
 8013c62:	f640 0036 	movw	r0, #2102	@ 0x836
 8013c66:	bd70      	pop	{r4, r5, r6, pc}
 8013c68:	f640 0036 	movw	r0, #2102	@ 0x836
 8013c6c:	bd70      	pop	{r4, r5, r6, pc}
 8013c6e:	200b      	movs	r0, #11
 8013c70:	bd70      	pop	{r4, r5, r6, pc}
 8013c72:	f640 0036 	movw	r0, #2102	@ 0x836
 8013c76:	4770      	bx	lr

08013c78 <rcl_action_take_cancel_response>:
 8013c78:	2800      	cmp	r0, #0
 8013c7a:	d03a      	beq.n	8013cf2 <rcl_action_take_cancel_response+0x7a>
 8013c7c:	b570      	push	{r4, r5, r6, lr}
 8013c7e:	4604      	mov	r4, r0
 8013c80:	6800      	ldr	r0, [r0, #0]
 8013c82:	b388      	cbz	r0, 8013ce8 <rcl_action_take_cancel_response+0x70>
 8013c84:	460d      	mov	r5, r1
 8013c86:	4616      	mov	r6, r2
 8013c88:	f7fd ff8a 	bl	8011ba0 <rcl_client_is_valid>
 8013c8c:	b338      	cbz	r0, 8013cde <rcl_action_take_cancel_response+0x66>
 8013c8e:	6820      	ldr	r0, [r4, #0]
 8013c90:	3004      	adds	r0, #4
 8013c92:	f7fd ff85 	bl	8011ba0 <rcl_client_is_valid>
 8013c96:	b310      	cbz	r0, 8013cde <rcl_action_take_cancel_response+0x66>
 8013c98:	6820      	ldr	r0, [r4, #0]
 8013c9a:	3008      	adds	r0, #8
 8013c9c:	f7fd ff80 	bl	8011ba0 <rcl_client_is_valid>
 8013ca0:	b1e8      	cbz	r0, 8013cde <rcl_action_take_cancel_response+0x66>
 8013ca2:	6820      	ldr	r0, [r4, #0]
 8013ca4:	300c      	adds	r0, #12
 8013ca6:	f7fe fd3d 	bl	8012724 <rcl_subscription_is_valid>
 8013caa:	b1c0      	cbz	r0, 8013cde <rcl_action_take_cancel_response+0x66>
 8013cac:	6820      	ldr	r0, [r4, #0]
 8013cae:	3010      	adds	r0, #16
 8013cb0:	f7fe fd38 	bl	8012724 <rcl_subscription_is_valid>
 8013cb4:	b198      	cbz	r0, 8013cde <rcl_action_take_cancel_response+0x66>
 8013cb6:	b1d5      	cbz	r5, 8013cee <rcl_action_take_cancel_response+0x76>
 8013cb8:	b1ce      	cbz	r6, 8013cee <rcl_action_take_cancel_response+0x76>
 8013cba:	6820      	ldr	r0, [r4, #0]
 8013cbc:	4632      	mov	r2, r6
 8013cbe:	4629      	mov	r1, r5
 8013cc0:	3004      	adds	r0, #4
 8013cc2:	f7fd ff25 	bl	8011b10 <rcl_take_response>
 8013cc6:	b148      	cbz	r0, 8013cdc <rcl_action_take_cancel_response+0x64>
 8013cc8:	280a      	cmp	r0, #10
 8013cca:	d007      	beq.n	8013cdc <rcl_action_take_cancel_response+0x64>
 8013ccc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013cd0:	f640 0337 	movw	r3, #2103	@ 0x837
 8013cd4:	4290      	cmp	r0, r2
 8013cd6:	bf0c      	ite	eq
 8013cd8:	4618      	moveq	r0, r3
 8013cda:	2001      	movne	r0, #1
 8013cdc:	bd70      	pop	{r4, r5, r6, pc}
 8013cde:	f7f9 f90b 	bl	800cef8 <rcutils_reset_error>
 8013ce2:	f640 0036 	movw	r0, #2102	@ 0x836
 8013ce6:	bd70      	pop	{r4, r5, r6, pc}
 8013ce8:	f640 0036 	movw	r0, #2102	@ 0x836
 8013cec:	bd70      	pop	{r4, r5, r6, pc}
 8013cee:	200b      	movs	r0, #11
 8013cf0:	bd70      	pop	{r4, r5, r6, pc}
 8013cf2:	f640 0036 	movw	r0, #2102	@ 0x836
 8013cf6:	4770      	bx	lr

08013cf8 <rcl_action_take_feedback>:
 8013cf8:	2800      	cmp	r0, #0
 8013cfa:	d038      	beq.n	8013d6e <rcl_action_take_feedback+0x76>
 8013cfc:	b530      	push	{r4, r5, lr}
 8013cfe:	4604      	mov	r4, r0
 8013d00:	6800      	ldr	r0, [r0, #0]
 8013d02:	b091      	sub	sp, #68	@ 0x44
 8013d04:	b378      	cbz	r0, 8013d66 <rcl_action_take_feedback+0x6e>
 8013d06:	460d      	mov	r5, r1
 8013d08:	f7fd ff4a 	bl	8011ba0 <rcl_client_is_valid>
 8013d0c:	b328      	cbz	r0, 8013d5a <rcl_action_take_feedback+0x62>
 8013d0e:	6820      	ldr	r0, [r4, #0]
 8013d10:	3004      	adds	r0, #4
 8013d12:	f7fd ff45 	bl	8011ba0 <rcl_client_is_valid>
 8013d16:	b300      	cbz	r0, 8013d5a <rcl_action_take_feedback+0x62>
 8013d18:	6820      	ldr	r0, [r4, #0]
 8013d1a:	3008      	adds	r0, #8
 8013d1c:	f7fd ff40 	bl	8011ba0 <rcl_client_is_valid>
 8013d20:	b1d8      	cbz	r0, 8013d5a <rcl_action_take_feedback+0x62>
 8013d22:	6820      	ldr	r0, [r4, #0]
 8013d24:	300c      	adds	r0, #12
 8013d26:	f7fe fcfd 	bl	8012724 <rcl_subscription_is_valid>
 8013d2a:	b1b0      	cbz	r0, 8013d5a <rcl_action_take_feedback+0x62>
 8013d2c:	6820      	ldr	r0, [r4, #0]
 8013d2e:	3010      	adds	r0, #16
 8013d30:	f7fe fcf8 	bl	8012724 <rcl_subscription_is_valid>
 8013d34:	b188      	cbz	r0, 8013d5a <rcl_action_take_feedback+0x62>
 8013d36:	b1ed      	cbz	r5, 8013d74 <rcl_action_take_feedback+0x7c>
 8013d38:	6820      	ldr	r0, [r4, #0]
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	466a      	mov	r2, sp
 8013d3e:	4629      	mov	r1, r5
 8013d40:	300c      	adds	r0, #12
 8013d42:	f7fe fc91 	bl	8012668 <rcl_take>
 8013d46:	b160      	cbz	r0, 8013d62 <rcl_action_take_feedback+0x6a>
 8013d48:	f240 1391 	movw	r3, #401	@ 0x191
 8013d4c:	4298      	cmp	r0, r3
 8013d4e:	d014      	beq.n	8013d7a <rcl_action_take_feedback+0x82>
 8013d50:	280a      	cmp	r0, #10
 8013d52:	bf18      	it	ne
 8013d54:	2001      	movne	r0, #1
 8013d56:	b011      	add	sp, #68	@ 0x44
 8013d58:	bd30      	pop	{r4, r5, pc}
 8013d5a:	f7f9 f8cd 	bl	800cef8 <rcutils_reset_error>
 8013d5e:	f640 0036 	movw	r0, #2102	@ 0x836
 8013d62:	b011      	add	sp, #68	@ 0x44
 8013d64:	bd30      	pop	{r4, r5, pc}
 8013d66:	f640 0036 	movw	r0, #2102	@ 0x836
 8013d6a:	b011      	add	sp, #68	@ 0x44
 8013d6c:	bd30      	pop	{r4, r5, pc}
 8013d6e:	f640 0036 	movw	r0, #2102	@ 0x836
 8013d72:	4770      	bx	lr
 8013d74:	200b      	movs	r0, #11
 8013d76:	b011      	add	sp, #68	@ 0x44
 8013d78:	bd30      	pop	{r4, r5, pc}
 8013d7a:	f640 0037 	movw	r0, #2103	@ 0x837
 8013d7e:	e7f0      	b.n	8013d62 <rcl_action_take_feedback+0x6a>

08013d80 <rcl_action_wait_set_add_action_client>:
 8013d80:	2800      	cmp	r0, #0
 8013d82:	d048      	beq.n	8013e16 <rcl_action_wait_set_add_action_client+0x96>
 8013d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d86:	460c      	mov	r4, r1
 8013d88:	2900      	cmp	r1, #0
 8013d8a:	d03c      	beq.n	8013e06 <rcl_action_wait_set_add_action_client+0x86>
 8013d8c:	4605      	mov	r5, r0
 8013d8e:	6808      	ldr	r0, [r1, #0]
 8013d90:	2800      	cmp	r0, #0
 8013d92:	d038      	beq.n	8013e06 <rcl_action_wait_set_add_action_client+0x86>
 8013d94:	4617      	mov	r7, r2
 8013d96:	461e      	mov	r6, r3
 8013d98:	f7fd ff02 	bl	8011ba0 <rcl_client_is_valid>
 8013d9c:	b3b0      	cbz	r0, 8013e0c <rcl_action_wait_set_add_action_client+0x8c>
 8013d9e:	6820      	ldr	r0, [r4, #0]
 8013da0:	3004      	adds	r0, #4
 8013da2:	f7fd fefd 	bl	8011ba0 <rcl_client_is_valid>
 8013da6:	b388      	cbz	r0, 8013e0c <rcl_action_wait_set_add_action_client+0x8c>
 8013da8:	6820      	ldr	r0, [r4, #0]
 8013daa:	3008      	adds	r0, #8
 8013dac:	f7fd fef8 	bl	8011ba0 <rcl_client_is_valid>
 8013db0:	b360      	cbz	r0, 8013e0c <rcl_action_wait_set_add_action_client+0x8c>
 8013db2:	6820      	ldr	r0, [r4, #0]
 8013db4:	300c      	adds	r0, #12
 8013db6:	f7fe fcb5 	bl	8012724 <rcl_subscription_is_valid>
 8013dba:	b338      	cbz	r0, 8013e0c <rcl_action_wait_set_add_action_client+0x8c>
 8013dbc:	6820      	ldr	r0, [r4, #0]
 8013dbe:	3010      	adds	r0, #16
 8013dc0:	f7fe fcb0 	bl	8012724 <rcl_subscription_is_valid>
 8013dc4:	b310      	cbz	r0, 8013e0c <rcl_action_wait_set_add_action_client+0x8c>
 8013dc6:	6821      	ldr	r1, [r4, #0]
 8013dc8:	4628      	mov	r0, r5
 8013dca:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8013dce:	f7ff fccd 	bl	801376c <rcl_wait_set_add_client>
 8013dd2:	b9b8      	cbnz	r0, 8013e04 <rcl_action_wait_set_add_action_client+0x84>
 8013dd4:	6821      	ldr	r1, [r4, #0]
 8013dd6:	4628      	mov	r0, r5
 8013dd8:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8013ddc:	3104      	adds	r1, #4
 8013dde:	f7ff fcc5 	bl	801376c <rcl_wait_set_add_client>
 8013de2:	b978      	cbnz	r0, 8013e04 <rcl_action_wait_set_add_action_client+0x84>
 8013de4:	6821      	ldr	r1, [r4, #0]
 8013de6:	4628      	mov	r0, r5
 8013de8:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8013dec:	3108      	adds	r1, #8
 8013dee:	f7ff fcbd 	bl	801376c <rcl_wait_set_add_client>
 8013df2:	b938      	cbnz	r0, 8013e04 <rcl_action_wait_set_add_action_client+0x84>
 8013df4:	6821      	ldr	r1, [r4, #0]
 8013df6:	4628      	mov	r0, r5
 8013df8:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8013dfc:	310c      	adds	r1, #12
 8013dfe:	f7ff f96d 	bl	80130dc <rcl_wait_set_add_subscription>
 8013e02:	b158      	cbz	r0, 8013e1c <rcl_action_wait_set_add_action_client+0x9c>
 8013e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e06:	f640 0036 	movw	r0, #2102	@ 0x836
 8013e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e0c:	f7f9 f874 	bl	800cef8 <rcutils_reset_error>
 8013e10:	f640 0036 	movw	r0, #2102	@ 0x836
 8013e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e16:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013e1a:	4770      	bx	lr
 8013e1c:	6821      	ldr	r1, [r4, #0]
 8013e1e:	4628      	mov	r0, r5
 8013e20:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8013e24:	3110      	adds	r1, #16
 8013e26:	f7ff f959 	bl	80130dc <rcl_wait_set_add_subscription>
 8013e2a:	2800      	cmp	r0, #0
 8013e2c:	d1ea      	bne.n	8013e04 <rcl_action_wait_set_add_action_client+0x84>
 8013e2e:	b11f      	cbz	r7, 8013e38 <rcl_action_wait_set_add_action_client+0xb8>
 8013e30:	6823      	ldr	r3, [r4, #0]
 8013e32:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8013e36:	603b      	str	r3, [r7, #0]
 8013e38:	2e00      	cmp	r6, #0
 8013e3a:	d0e3      	beq.n	8013e04 <rcl_action_wait_set_add_action_client+0x84>
 8013e3c:	6823      	ldr	r3, [r4, #0]
 8013e3e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8013e42:	6033      	str	r3, [r6, #0]
 8013e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e46:	bf00      	nop

08013e48 <rcl_action_client_wait_set_get_entities_ready>:
 8013e48:	2800      	cmp	r0, #0
 8013e4a:	f000 808d 	beq.w	8013f68 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8013e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e52:	460c      	mov	r4, r1
 8013e54:	2900      	cmp	r1, #0
 8013e56:	d077      	beq.n	8013f48 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8013e58:	4605      	mov	r5, r0
 8013e5a:	6808      	ldr	r0, [r1, #0]
 8013e5c:	2800      	cmp	r0, #0
 8013e5e:	d073      	beq.n	8013f48 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8013e60:	4616      	mov	r6, r2
 8013e62:	461f      	mov	r7, r3
 8013e64:	f7fd fe9c 	bl	8011ba0 <rcl_client_is_valid>
 8013e68:	2800      	cmp	r0, #0
 8013e6a:	d071      	beq.n	8013f50 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013e6c:	6820      	ldr	r0, [r4, #0]
 8013e6e:	3004      	adds	r0, #4
 8013e70:	f7fd fe96 	bl	8011ba0 <rcl_client_is_valid>
 8013e74:	2800      	cmp	r0, #0
 8013e76:	d06b      	beq.n	8013f50 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013e78:	6820      	ldr	r0, [r4, #0]
 8013e7a:	3008      	adds	r0, #8
 8013e7c:	f7fd fe90 	bl	8011ba0 <rcl_client_is_valid>
 8013e80:	2800      	cmp	r0, #0
 8013e82:	d065      	beq.n	8013f50 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013e84:	6820      	ldr	r0, [r4, #0]
 8013e86:	300c      	adds	r0, #12
 8013e88:	f7fe fc4c 	bl	8012724 <rcl_subscription_is_valid>
 8013e8c:	2800      	cmp	r0, #0
 8013e8e:	d05f      	beq.n	8013f50 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013e90:	6820      	ldr	r0, [r4, #0]
 8013e92:	3010      	adds	r0, #16
 8013e94:	f7fe fc46 	bl	8012724 <rcl_subscription_is_valid>
 8013e98:	2800      	cmp	r0, #0
 8013e9a:	d059      	beq.n	8013f50 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013e9c:	2e00      	cmp	r6, #0
 8013e9e:	d060      	beq.n	8013f62 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8013ea0:	2f00      	cmp	r7, #0
 8013ea2:	d05e      	beq.n	8013f62 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8013ea4:	9b06      	ldr	r3, [sp, #24]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d05b      	beq.n	8013f62 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8013eaa:	9b07      	ldr	r3, [sp, #28]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d058      	beq.n	8013f62 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8013eb0:	9b08      	ldr	r3, [sp, #32]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d055      	beq.n	8013f62 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8013eb6:	6823      	ldr	r3, [r4, #0]
 8013eb8:	686a      	ldr	r2, [r5, #4]
 8013eba:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8013ebe:	428a      	cmp	r2, r1
 8013ec0:	d94c      	bls.n	8013f5c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8013ec2:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8013ec6:	4282      	cmp	r2, r0
 8013ec8:	d948      	bls.n	8013f5c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8013eca:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8013ece:	69ea      	ldr	r2, [r5, #28]
 8013ed0:	42a2      	cmp	r2, r4
 8013ed2:	d943      	bls.n	8013f5c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8013ed4:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8013ed8:	4562      	cmp	r2, ip
 8013eda:	d93f      	bls.n	8013f5c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8013edc:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8013ee0:	4572      	cmp	r2, lr
 8013ee2:	d93b      	bls.n	8013f5c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8013ee4:	69aa      	ldr	r2, [r5, #24]
 8013ee6:	682d      	ldr	r5, [r5, #0]
 8013ee8:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8013eec:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8013ef0:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8013ef4:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8013ef8:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8013efc:	f103 0c0c 	add.w	ip, r3, #12
 8013f00:	eba5 050c 	sub.w	r5, r5, ip
 8013f04:	fab5 f585 	clz	r5, r5
 8013f08:	096d      	lsrs	r5, r5, #5
 8013f0a:	7035      	strb	r5, [r6, #0]
 8013f0c:	f103 0510 	add.w	r5, r3, #16
 8013f10:	1b64      	subs	r4, r4, r5
 8013f12:	fab4 f484 	clz	r4, r4
 8013f16:	0964      	lsrs	r4, r4, #5
 8013f18:	703c      	strb	r4, [r7, #0]
 8013f1a:	eba3 0008 	sub.w	r0, r3, r8
 8013f1e:	1d1c      	adds	r4, r3, #4
 8013f20:	3308      	adds	r3, #8
 8013f22:	1ad3      	subs	r3, r2, r3
 8013f24:	fab0 f080 	clz	r0, r0
 8013f28:	9a06      	ldr	r2, [sp, #24]
 8013f2a:	0940      	lsrs	r0, r0, #5
 8013f2c:	1b09      	subs	r1, r1, r4
 8013f2e:	7010      	strb	r0, [r2, #0]
 8013f30:	fab1 f181 	clz	r1, r1
 8013f34:	9a07      	ldr	r2, [sp, #28]
 8013f36:	0949      	lsrs	r1, r1, #5
 8013f38:	7011      	strb	r1, [r2, #0]
 8013f3a:	fab3 f383 	clz	r3, r3
 8013f3e:	9a08      	ldr	r2, [sp, #32]
 8013f40:	095b      	lsrs	r3, r3, #5
 8013f42:	2000      	movs	r0, #0
 8013f44:	7013      	strb	r3, [r2, #0]
 8013f46:	e001      	b.n	8013f4c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8013f48:	f640 0036 	movw	r0, #2102	@ 0x836
 8013f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f50:	f7f8 ffd2 	bl	800cef8 <rcutils_reset_error>
 8013f54:	f640 0036 	movw	r0, #2102	@ 0x836
 8013f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f5c:	2001      	movs	r0, #1
 8013f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f62:	200b      	movs	r0, #11
 8013f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f68:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013f6c:	4770      	bx	lr
 8013f6e:	bf00      	nop

08013f70 <rcl_action_take_goal_request>:
 8013f70:	2800      	cmp	r0, #0
 8013f72:	d039      	beq.n	8013fe8 <rcl_action_take_goal_request+0x78>
 8013f74:	b570      	push	{r4, r5, r6, lr}
 8013f76:	4604      	mov	r4, r0
 8013f78:	6800      	ldr	r0, [r0, #0]
 8013f7a:	b380      	cbz	r0, 8013fde <rcl_action_take_goal_request+0x6e>
 8013f7c:	460d      	mov	r5, r1
 8013f7e:	4616      	mov	r6, r2
 8013f80:	f7fe fb68 	bl	8012654 <rcl_service_is_valid>
 8013f84:	b330      	cbz	r0, 8013fd4 <rcl_action_take_goal_request+0x64>
 8013f86:	6820      	ldr	r0, [r4, #0]
 8013f88:	3004      	adds	r0, #4
 8013f8a:	f7fe fb63 	bl	8012654 <rcl_service_is_valid>
 8013f8e:	b308      	cbz	r0, 8013fd4 <rcl_action_take_goal_request+0x64>
 8013f90:	6820      	ldr	r0, [r4, #0]
 8013f92:	3008      	adds	r0, #8
 8013f94:	f7fe fb5e 	bl	8012654 <rcl_service_is_valid>
 8013f98:	b1e0      	cbz	r0, 8013fd4 <rcl_action_take_goal_request+0x64>
 8013f9a:	6820      	ldr	r0, [r4, #0]
 8013f9c:	300c      	adds	r0, #12
 8013f9e:	f7f8 f831 	bl	800c004 <rcl_publisher_is_valid>
 8013fa2:	b1b8      	cbz	r0, 8013fd4 <rcl_action_take_goal_request+0x64>
 8013fa4:	6820      	ldr	r0, [r4, #0]
 8013fa6:	3010      	adds	r0, #16
 8013fa8:	f7f8 f82c 	bl	800c004 <rcl_publisher_is_valid>
 8013fac:	b190      	cbz	r0, 8013fd4 <rcl_action_take_goal_request+0x64>
 8013fae:	b1cd      	cbz	r5, 8013fe4 <rcl_action_take_goal_request+0x74>
 8013fb0:	b1c6      	cbz	r6, 8013fe4 <rcl_action_take_goal_request+0x74>
 8013fb2:	6820      	ldr	r0, [r4, #0]
 8013fb4:	4632      	mov	r2, r6
 8013fb6:	4629      	mov	r1, r5
 8013fb8:	f7fe faf4 	bl	80125a4 <rcl_take_request>
 8013fbc:	b148      	cbz	r0, 8013fd2 <rcl_action_take_goal_request+0x62>
 8013fbe:	280a      	cmp	r0, #10
 8013fc0:	d007      	beq.n	8013fd2 <rcl_action_take_goal_request+0x62>
 8013fc2:	f240 2259 	movw	r2, #601	@ 0x259
 8013fc6:	f640 0399 	movw	r3, #2201	@ 0x899
 8013fca:	4290      	cmp	r0, r2
 8013fcc:	bf0c      	ite	eq
 8013fce:	4618      	moveq	r0, r3
 8013fd0:	2001      	movne	r0, #1
 8013fd2:	bd70      	pop	{r4, r5, r6, pc}
 8013fd4:	f7f8 ff90 	bl	800cef8 <rcutils_reset_error>
 8013fd8:	f640 0098 	movw	r0, #2200	@ 0x898
 8013fdc:	bd70      	pop	{r4, r5, r6, pc}
 8013fde:	f640 0098 	movw	r0, #2200	@ 0x898
 8013fe2:	bd70      	pop	{r4, r5, r6, pc}
 8013fe4:	200b      	movs	r0, #11
 8013fe6:	bd70      	pop	{r4, r5, r6, pc}
 8013fe8:	f640 0098 	movw	r0, #2200	@ 0x898
 8013fec:	4770      	bx	lr
 8013fee:	bf00      	nop

08013ff0 <rcl_action_send_goal_response>:
 8013ff0:	b390      	cbz	r0, 8014058 <rcl_action_send_goal_response+0x68>
 8013ff2:	b570      	push	{r4, r5, r6, lr}
 8013ff4:	4604      	mov	r4, r0
 8013ff6:	6800      	ldr	r0, [r0, #0]
 8013ff8:	b348      	cbz	r0, 801404e <rcl_action_send_goal_response+0x5e>
 8013ffa:	460d      	mov	r5, r1
 8013ffc:	4616      	mov	r6, r2
 8013ffe:	f7fe fb29 	bl	8012654 <rcl_service_is_valid>
 8014002:	b1f8      	cbz	r0, 8014044 <rcl_action_send_goal_response+0x54>
 8014004:	6820      	ldr	r0, [r4, #0]
 8014006:	3004      	adds	r0, #4
 8014008:	f7fe fb24 	bl	8012654 <rcl_service_is_valid>
 801400c:	b1d0      	cbz	r0, 8014044 <rcl_action_send_goal_response+0x54>
 801400e:	6820      	ldr	r0, [r4, #0]
 8014010:	3008      	adds	r0, #8
 8014012:	f7fe fb1f 	bl	8012654 <rcl_service_is_valid>
 8014016:	b1a8      	cbz	r0, 8014044 <rcl_action_send_goal_response+0x54>
 8014018:	6820      	ldr	r0, [r4, #0]
 801401a:	300c      	adds	r0, #12
 801401c:	f7f7 fff2 	bl	800c004 <rcl_publisher_is_valid>
 8014020:	b180      	cbz	r0, 8014044 <rcl_action_send_goal_response+0x54>
 8014022:	6820      	ldr	r0, [r4, #0]
 8014024:	3010      	adds	r0, #16
 8014026:	f7f7 ffed 	bl	800c004 <rcl_publisher_is_valid>
 801402a:	b158      	cbz	r0, 8014044 <rcl_action_send_goal_response+0x54>
 801402c:	b195      	cbz	r5, 8014054 <rcl_action_send_goal_response+0x64>
 801402e:	b18e      	cbz	r6, 8014054 <rcl_action_send_goal_response+0x64>
 8014030:	6820      	ldr	r0, [r4, #0]
 8014032:	4632      	mov	r2, r6
 8014034:	4629      	mov	r1, r5
 8014036:	f7fe faf5 	bl	8012624 <rcl_send_response>
 801403a:	b110      	cbz	r0, 8014042 <rcl_action_send_goal_response+0x52>
 801403c:	2802      	cmp	r0, #2
 801403e:	bf18      	it	ne
 8014040:	2001      	movne	r0, #1
 8014042:	bd70      	pop	{r4, r5, r6, pc}
 8014044:	f7f8 ff58 	bl	800cef8 <rcutils_reset_error>
 8014048:	f640 0098 	movw	r0, #2200	@ 0x898
 801404c:	bd70      	pop	{r4, r5, r6, pc}
 801404e:	f640 0098 	movw	r0, #2200	@ 0x898
 8014052:	bd70      	pop	{r4, r5, r6, pc}
 8014054:	200b      	movs	r0, #11
 8014056:	bd70      	pop	{r4, r5, r6, pc}
 8014058:	f640 0098 	movw	r0, #2200	@ 0x898
 801405c:	4770      	bx	lr
 801405e:	bf00      	nop

08014060 <rcl_action_take_result_request>:
 8014060:	2800      	cmp	r0, #0
 8014062:	d03a      	beq.n	80140da <rcl_action_take_result_request+0x7a>
 8014064:	b570      	push	{r4, r5, r6, lr}
 8014066:	4604      	mov	r4, r0
 8014068:	6800      	ldr	r0, [r0, #0]
 801406a:	b388      	cbz	r0, 80140d0 <rcl_action_take_result_request+0x70>
 801406c:	460d      	mov	r5, r1
 801406e:	4616      	mov	r6, r2
 8014070:	f7fe faf0 	bl	8012654 <rcl_service_is_valid>
 8014074:	b338      	cbz	r0, 80140c6 <rcl_action_take_result_request+0x66>
 8014076:	6820      	ldr	r0, [r4, #0]
 8014078:	3004      	adds	r0, #4
 801407a:	f7fe faeb 	bl	8012654 <rcl_service_is_valid>
 801407e:	b310      	cbz	r0, 80140c6 <rcl_action_take_result_request+0x66>
 8014080:	6820      	ldr	r0, [r4, #0]
 8014082:	3008      	adds	r0, #8
 8014084:	f7fe fae6 	bl	8012654 <rcl_service_is_valid>
 8014088:	b1e8      	cbz	r0, 80140c6 <rcl_action_take_result_request+0x66>
 801408a:	6820      	ldr	r0, [r4, #0]
 801408c:	300c      	adds	r0, #12
 801408e:	f7f7 ffb9 	bl	800c004 <rcl_publisher_is_valid>
 8014092:	b1c0      	cbz	r0, 80140c6 <rcl_action_take_result_request+0x66>
 8014094:	6820      	ldr	r0, [r4, #0]
 8014096:	3010      	adds	r0, #16
 8014098:	f7f7 ffb4 	bl	800c004 <rcl_publisher_is_valid>
 801409c:	b198      	cbz	r0, 80140c6 <rcl_action_take_result_request+0x66>
 801409e:	b1d5      	cbz	r5, 80140d6 <rcl_action_take_result_request+0x76>
 80140a0:	b1ce      	cbz	r6, 80140d6 <rcl_action_take_result_request+0x76>
 80140a2:	6820      	ldr	r0, [r4, #0]
 80140a4:	4632      	mov	r2, r6
 80140a6:	4629      	mov	r1, r5
 80140a8:	3008      	adds	r0, #8
 80140aa:	f7fe fa7b 	bl	80125a4 <rcl_take_request>
 80140ae:	b148      	cbz	r0, 80140c4 <rcl_action_take_result_request+0x64>
 80140b0:	280a      	cmp	r0, #10
 80140b2:	d007      	beq.n	80140c4 <rcl_action_take_result_request+0x64>
 80140b4:	f240 2259 	movw	r2, #601	@ 0x259
 80140b8:	f640 0399 	movw	r3, #2201	@ 0x899
 80140bc:	4290      	cmp	r0, r2
 80140be:	bf0c      	ite	eq
 80140c0:	4618      	moveq	r0, r3
 80140c2:	2001      	movne	r0, #1
 80140c4:	bd70      	pop	{r4, r5, r6, pc}
 80140c6:	f7f8 ff17 	bl	800cef8 <rcutils_reset_error>
 80140ca:	f640 0098 	movw	r0, #2200	@ 0x898
 80140ce:	bd70      	pop	{r4, r5, r6, pc}
 80140d0:	f640 0098 	movw	r0, #2200	@ 0x898
 80140d4:	bd70      	pop	{r4, r5, r6, pc}
 80140d6:	200b      	movs	r0, #11
 80140d8:	bd70      	pop	{r4, r5, r6, pc}
 80140da:	f640 0098 	movw	r0, #2200	@ 0x898
 80140de:	4770      	bx	lr

080140e0 <rcl_action_take_cancel_request>:
 80140e0:	2800      	cmp	r0, #0
 80140e2:	d03a      	beq.n	801415a <rcl_action_take_cancel_request+0x7a>
 80140e4:	b570      	push	{r4, r5, r6, lr}
 80140e6:	4604      	mov	r4, r0
 80140e8:	6800      	ldr	r0, [r0, #0]
 80140ea:	b388      	cbz	r0, 8014150 <rcl_action_take_cancel_request+0x70>
 80140ec:	460d      	mov	r5, r1
 80140ee:	4616      	mov	r6, r2
 80140f0:	f7fe fab0 	bl	8012654 <rcl_service_is_valid>
 80140f4:	b338      	cbz	r0, 8014146 <rcl_action_take_cancel_request+0x66>
 80140f6:	6820      	ldr	r0, [r4, #0]
 80140f8:	3004      	adds	r0, #4
 80140fa:	f7fe faab 	bl	8012654 <rcl_service_is_valid>
 80140fe:	b310      	cbz	r0, 8014146 <rcl_action_take_cancel_request+0x66>
 8014100:	6820      	ldr	r0, [r4, #0]
 8014102:	3008      	adds	r0, #8
 8014104:	f7fe faa6 	bl	8012654 <rcl_service_is_valid>
 8014108:	b1e8      	cbz	r0, 8014146 <rcl_action_take_cancel_request+0x66>
 801410a:	6820      	ldr	r0, [r4, #0]
 801410c:	300c      	adds	r0, #12
 801410e:	f7f7 ff79 	bl	800c004 <rcl_publisher_is_valid>
 8014112:	b1c0      	cbz	r0, 8014146 <rcl_action_take_cancel_request+0x66>
 8014114:	6820      	ldr	r0, [r4, #0]
 8014116:	3010      	adds	r0, #16
 8014118:	f7f7 ff74 	bl	800c004 <rcl_publisher_is_valid>
 801411c:	b198      	cbz	r0, 8014146 <rcl_action_take_cancel_request+0x66>
 801411e:	b1d5      	cbz	r5, 8014156 <rcl_action_take_cancel_request+0x76>
 8014120:	b1ce      	cbz	r6, 8014156 <rcl_action_take_cancel_request+0x76>
 8014122:	6820      	ldr	r0, [r4, #0]
 8014124:	4632      	mov	r2, r6
 8014126:	4629      	mov	r1, r5
 8014128:	3004      	adds	r0, #4
 801412a:	f7fe fa3b 	bl	80125a4 <rcl_take_request>
 801412e:	b148      	cbz	r0, 8014144 <rcl_action_take_cancel_request+0x64>
 8014130:	280a      	cmp	r0, #10
 8014132:	d007      	beq.n	8014144 <rcl_action_take_cancel_request+0x64>
 8014134:	f240 2259 	movw	r2, #601	@ 0x259
 8014138:	f640 0399 	movw	r3, #2201	@ 0x899
 801413c:	4290      	cmp	r0, r2
 801413e:	bf0c      	ite	eq
 8014140:	4618      	moveq	r0, r3
 8014142:	2001      	movne	r0, #1
 8014144:	bd70      	pop	{r4, r5, r6, pc}
 8014146:	f7f8 fed7 	bl	800cef8 <rcutils_reset_error>
 801414a:	f640 0098 	movw	r0, #2200	@ 0x898
 801414e:	bd70      	pop	{r4, r5, r6, pc}
 8014150:	f640 0098 	movw	r0, #2200	@ 0x898
 8014154:	bd70      	pop	{r4, r5, r6, pc}
 8014156:	200b      	movs	r0, #11
 8014158:	bd70      	pop	{r4, r5, r6, pc}
 801415a:	f640 0098 	movw	r0, #2200	@ 0x898
 801415e:	4770      	bx	lr

08014160 <rcl_action_send_cancel_response>:
 8014160:	b398      	cbz	r0, 80141ca <rcl_action_send_cancel_response+0x6a>
 8014162:	b570      	push	{r4, r5, r6, lr}
 8014164:	4604      	mov	r4, r0
 8014166:	6800      	ldr	r0, [r0, #0]
 8014168:	b350      	cbz	r0, 80141c0 <rcl_action_send_cancel_response+0x60>
 801416a:	460d      	mov	r5, r1
 801416c:	4616      	mov	r6, r2
 801416e:	f7fe fa71 	bl	8012654 <rcl_service_is_valid>
 8014172:	b300      	cbz	r0, 80141b6 <rcl_action_send_cancel_response+0x56>
 8014174:	6820      	ldr	r0, [r4, #0]
 8014176:	3004      	adds	r0, #4
 8014178:	f7fe fa6c 	bl	8012654 <rcl_service_is_valid>
 801417c:	b1d8      	cbz	r0, 80141b6 <rcl_action_send_cancel_response+0x56>
 801417e:	6820      	ldr	r0, [r4, #0]
 8014180:	3008      	adds	r0, #8
 8014182:	f7fe fa67 	bl	8012654 <rcl_service_is_valid>
 8014186:	b1b0      	cbz	r0, 80141b6 <rcl_action_send_cancel_response+0x56>
 8014188:	6820      	ldr	r0, [r4, #0]
 801418a:	300c      	adds	r0, #12
 801418c:	f7f7 ff3a 	bl	800c004 <rcl_publisher_is_valid>
 8014190:	b188      	cbz	r0, 80141b6 <rcl_action_send_cancel_response+0x56>
 8014192:	6820      	ldr	r0, [r4, #0]
 8014194:	3010      	adds	r0, #16
 8014196:	f7f7 ff35 	bl	800c004 <rcl_publisher_is_valid>
 801419a:	b160      	cbz	r0, 80141b6 <rcl_action_send_cancel_response+0x56>
 801419c:	b19d      	cbz	r5, 80141c6 <rcl_action_send_cancel_response+0x66>
 801419e:	b196      	cbz	r6, 80141c6 <rcl_action_send_cancel_response+0x66>
 80141a0:	6820      	ldr	r0, [r4, #0]
 80141a2:	4632      	mov	r2, r6
 80141a4:	4629      	mov	r1, r5
 80141a6:	3004      	adds	r0, #4
 80141a8:	f7fe fa3c 	bl	8012624 <rcl_send_response>
 80141ac:	b110      	cbz	r0, 80141b4 <rcl_action_send_cancel_response+0x54>
 80141ae:	2802      	cmp	r0, #2
 80141b0:	bf18      	it	ne
 80141b2:	2001      	movne	r0, #1
 80141b4:	bd70      	pop	{r4, r5, r6, pc}
 80141b6:	f7f8 fe9f 	bl	800cef8 <rcutils_reset_error>
 80141ba:	f640 0098 	movw	r0, #2200	@ 0x898
 80141be:	bd70      	pop	{r4, r5, r6, pc}
 80141c0:	f640 0098 	movw	r0, #2200	@ 0x898
 80141c4:	bd70      	pop	{r4, r5, r6, pc}
 80141c6:	200b      	movs	r0, #11
 80141c8:	bd70      	pop	{r4, r5, r6, pc}
 80141ca:	f640 0098 	movw	r0, #2200	@ 0x898
 80141ce:	4770      	bx	lr

080141d0 <rcl_action_wait_set_add_action_server>:
 80141d0:	2800      	cmp	r0, #0
 80141d2:	d04d      	beq.n	8014270 <rcl_action_wait_set_add_action_server+0xa0>
 80141d4:	b570      	push	{r4, r5, r6, lr}
 80141d6:	460c      	mov	r4, r1
 80141d8:	b159      	cbz	r1, 80141f2 <rcl_action_wait_set_add_action_server+0x22>
 80141da:	4605      	mov	r5, r0
 80141dc:	6808      	ldr	r0, [r1, #0]
 80141de:	b140      	cbz	r0, 80141f2 <rcl_action_wait_set_add_action_server+0x22>
 80141e0:	4616      	mov	r6, r2
 80141e2:	f7fe fa37 	bl	8012654 <rcl_service_is_valid>
 80141e6:	b120      	cbz	r0, 80141f2 <rcl_action_wait_set_add_action_server+0x22>
 80141e8:	6820      	ldr	r0, [r4, #0]
 80141ea:	3004      	adds	r0, #4
 80141ec:	f7fe fa32 	bl	8012654 <rcl_service_is_valid>
 80141f0:	b910      	cbnz	r0, 80141f8 <rcl_action_wait_set_add_action_server+0x28>
 80141f2:	f640 0098 	movw	r0, #2200	@ 0x898
 80141f6:	bd70      	pop	{r4, r5, r6, pc}
 80141f8:	6820      	ldr	r0, [r4, #0]
 80141fa:	3008      	adds	r0, #8
 80141fc:	f7fe fa2a 	bl	8012654 <rcl_service_is_valid>
 8014200:	2800      	cmp	r0, #0
 8014202:	d0f6      	beq.n	80141f2 <rcl_action_wait_set_add_action_server+0x22>
 8014204:	6820      	ldr	r0, [r4, #0]
 8014206:	300c      	adds	r0, #12
 8014208:	f7f7 ff14 	bl	800c034 <rcl_publisher_is_valid_except_context>
 801420c:	2800      	cmp	r0, #0
 801420e:	d0f0      	beq.n	80141f2 <rcl_action_wait_set_add_action_server+0x22>
 8014210:	6820      	ldr	r0, [r4, #0]
 8014212:	3010      	adds	r0, #16
 8014214:	f7f7 ff0e 	bl	800c034 <rcl_publisher_is_valid_except_context>
 8014218:	2800      	cmp	r0, #0
 801421a:	d0ea      	beq.n	80141f2 <rcl_action_wait_set_add_action_server+0x22>
 801421c:	6821      	ldr	r1, [r4, #0]
 801421e:	4628      	mov	r0, r5
 8014220:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8014224:	f7ff face 	bl	80137c4 <rcl_wait_set_add_service>
 8014228:	2800      	cmp	r0, #0
 801422a:	d1e4      	bne.n	80141f6 <rcl_action_wait_set_add_action_server+0x26>
 801422c:	6821      	ldr	r1, [r4, #0]
 801422e:	4628      	mov	r0, r5
 8014230:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8014234:	3104      	adds	r1, #4
 8014236:	f7ff fac5 	bl	80137c4 <rcl_wait_set_add_service>
 801423a:	2800      	cmp	r0, #0
 801423c:	d1db      	bne.n	80141f6 <rcl_action_wait_set_add_action_server+0x26>
 801423e:	6821      	ldr	r1, [r4, #0]
 8014240:	4628      	mov	r0, r5
 8014242:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8014246:	3108      	adds	r1, #8
 8014248:	f7ff fabc 	bl	80137c4 <rcl_wait_set_add_service>
 801424c:	2800      	cmp	r0, #0
 801424e:	d1d2      	bne.n	80141f6 <rcl_action_wait_set_add_action_server+0x26>
 8014250:	6821      	ldr	r1, [r4, #0]
 8014252:	4628      	mov	r0, r5
 8014254:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8014258:	3114      	adds	r1, #20
 801425a:	f7ff fa57 	bl	801370c <rcl_wait_set_add_timer>
 801425e:	2800      	cmp	r0, #0
 8014260:	d1c9      	bne.n	80141f6 <rcl_action_wait_set_add_action_server+0x26>
 8014262:	2e00      	cmp	r6, #0
 8014264:	d0c7      	beq.n	80141f6 <rcl_action_wait_set_add_action_server+0x26>
 8014266:	6823      	ldr	r3, [r4, #0]
 8014268:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801426c:	6033      	str	r3, [r6, #0]
 801426e:	bd70      	pop	{r4, r5, r6, pc}
 8014270:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014274:	4770      	bx	lr
 8014276:	bf00      	nop

08014278 <rcl_action_server_wait_set_get_entities_ready>:
 8014278:	2800      	cmp	r0, #0
 801427a:	d05a      	beq.n	8014332 <rcl_action_server_wait_set_get_entities_ready+0xba>
 801427c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801427e:	460c      	mov	r4, r1
 8014280:	b161      	cbz	r1, 801429c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014282:	4605      	mov	r5, r0
 8014284:	6808      	ldr	r0, [r1, #0]
 8014286:	b148      	cbz	r0, 801429c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014288:	4616      	mov	r6, r2
 801428a:	461f      	mov	r7, r3
 801428c:	f7fe f9e2 	bl	8012654 <rcl_service_is_valid>
 8014290:	b120      	cbz	r0, 801429c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014292:	6820      	ldr	r0, [r4, #0]
 8014294:	3004      	adds	r0, #4
 8014296:	f7fe f9dd 	bl	8012654 <rcl_service_is_valid>
 801429a:	b910      	cbnz	r0, 80142a2 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 801429c:	f640 0098 	movw	r0, #2200	@ 0x898
 80142a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142a2:	6820      	ldr	r0, [r4, #0]
 80142a4:	3008      	adds	r0, #8
 80142a6:	f7fe f9d5 	bl	8012654 <rcl_service_is_valid>
 80142aa:	2800      	cmp	r0, #0
 80142ac:	d0f6      	beq.n	801429c <rcl_action_server_wait_set_get_entities_ready+0x24>
 80142ae:	6820      	ldr	r0, [r4, #0]
 80142b0:	300c      	adds	r0, #12
 80142b2:	f7f7 febf 	bl	800c034 <rcl_publisher_is_valid_except_context>
 80142b6:	2800      	cmp	r0, #0
 80142b8:	d0f0      	beq.n	801429c <rcl_action_server_wait_set_get_entities_ready+0x24>
 80142ba:	6820      	ldr	r0, [r4, #0]
 80142bc:	3010      	adds	r0, #16
 80142be:	f7f7 feb9 	bl	800c034 <rcl_publisher_is_valid_except_context>
 80142c2:	2800      	cmp	r0, #0
 80142c4:	d0ea      	beq.n	801429c <rcl_action_server_wait_set_get_entities_ready+0x24>
 80142c6:	b3be      	cbz	r6, 8014338 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80142c8:	b3b7      	cbz	r7, 8014338 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80142ca:	9b06      	ldr	r3, [sp, #24]
 80142cc:	b3a3      	cbz	r3, 8014338 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80142ce:	9b07      	ldr	r3, [sp, #28]
 80142d0:	b393      	cbz	r3, 8014338 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80142d2:	6821      	ldr	r1, [r4, #0]
 80142d4:	692a      	ldr	r2, [r5, #16]
 80142d6:	6a2c      	ldr	r4, [r5, #32]
 80142d8:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 80142dc:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80142e0:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80142e4:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 80142e8:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 80142ec:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80142f0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80142f4:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80142f8:	1a64      	subs	r4, r4, r1
 80142fa:	fab4 f484 	clz	r4, r4
 80142fe:	0964      	lsrs	r4, r4, #5
 8014300:	7034      	strb	r4, [r6, #0]
 8014302:	1d0c      	adds	r4, r1, #4
 8014304:	1b1b      	subs	r3, r3, r4
 8014306:	fab3 f383 	clz	r3, r3
 801430a:	095b      	lsrs	r3, r3, #5
 801430c:	f101 0408 	add.w	r4, r1, #8
 8014310:	703b      	strb	r3, [r7, #0]
 8014312:	f101 0314 	add.w	r3, r1, #20
 8014316:	1b01      	subs	r1, r0, r4
 8014318:	1ad3      	subs	r3, r2, r3
 801431a:	fab1 f181 	clz	r1, r1
 801431e:	9a06      	ldr	r2, [sp, #24]
 8014320:	0949      	lsrs	r1, r1, #5
 8014322:	7011      	strb	r1, [r2, #0]
 8014324:	fab3 f383 	clz	r3, r3
 8014328:	9a07      	ldr	r2, [sp, #28]
 801432a:	095b      	lsrs	r3, r3, #5
 801432c:	2000      	movs	r0, #0
 801432e:	7013      	strb	r3, [r2, #0]
 8014330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014332:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014336:	4770      	bx	lr
 8014338:	200b      	movs	r0, #11
 801433a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801433c <_execute_event_handler>:
 801433c:	2002      	movs	r0, #2
 801433e:	4770      	bx	lr

08014340 <_cancel_goal_event_handler>:
 8014340:	2003      	movs	r0, #3
 8014342:	4770      	bx	lr

08014344 <_succeed_event_handler>:
 8014344:	2004      	movs	r0, #4
 8014346:	4770      	bx	lr

08014348 <_abort_event_handler>:
 8014348:	2006      	movs	r0, #6
 801434a:	4770      	bx	lr

0801434c <_canceled_event_handler>:
 801434c:	2005      	movs	r0, #5
 801434e:	4770      	bx	lr

08014350 <rcl_action_transition_goal_state>:
 8014350:	b2c2      	uxtb	r2, r0
 8014352:	2a06      	cmp	r2, #6
 8014354:	d80c      	bhi.n	8014370 <rcl_action_transition_goal_state+0x20>
 8014356:	2904      	cmp	r1, #4
 8014358:	d80a      	bhi.n	8014370 <rcl_action_transition_goal_state+0x20>
 801435a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801435e:	b410      	push	{r4}
 8014360:	1853      	adds	r3, r2, r1
 8014362:	4c06      	ldr	r4, [pc, #24]	@ (801437c <rcl_action_transition_goal_state+0x2c>)
 8014364:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8014368:	b123      	cbz	r3, 8014374 <rcl_action_transition_goal_state+0x24>
 801436a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801436e:	4718      	bx	r3
 8014370:	2000      	movs	r0, #0
 8014372:	4770      	bx	lr
 8014374:	2000      	movs	r0, #0
 8014376:	f85d 4b04 	ldr.w	r4, [sp], #4
 801437a:	4770      	bx	lr
 801437c:	08018ea0 	.word	0x08018ea0

08014380 <rcl_action_get_zero_initialized_cancel_response>:
 8014380:	b510      	push	{r4, lr}
 8014382:	4c07      	ldr	r4, [pc, #28]	@ (80143a0 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8014384:	4686      	mov	lr, r0
 8014386:	4684      	mov	ip, r0
 8014388:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801438a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801438e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014390:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014394:	6823      	ldr	r3, [r4, #0]
 8014396:	f8cc 3000 	str.w	r3, [ip]
 801439a:	4670      	mov	r0, lr
 801439c:	bd10      	pop	{r4, pc}
 801439e:	bf00      	nop
 80143a0:	08018f2c 	.word	0x08018f2c

080143a4 <rclc_action_send_result_request>:
 80143a4:	b1d0      	cbz	r0, 80143dc <rclc_action_send_result_request+0x38>
 80143a6:	b500      	push	{lr}
 80143a8:	4684      	mov	ip, r0
 80143aa:	b087      	sub	sp, #28
 80143ac:	f8d0 0009 	ldr.w	r0, [r0, #9]
 80143b0:	f8dc 100d 	ldr.w	r1, [ip, #13]
 80143b4:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80143b8:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80143bc:	f10d 0e08 	add.w	lr, sp, #8
 80143c0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80143c4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80143c8:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 80143cc:	a902      	add	r1, sp, #8
 80143ce:	3010      	adds	r0, #16
 80143d0:	f7ff fbda 	bl	8013b88 <rcl_action_send_result_request>
 80143d4:	b920      	cbnz	r0, 80143e0 <rclc_action_send_result_request+0x3c>
 80143d6:	b007      	add	sp, #28
 80143d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80143dc:	200b      	movs	r0, #11
 80143de:	4770      	bx	lr
 80143e0:	9001      	str	r0, [sp, #4]
 80143e2:	f7f8 fd89 	bl	800cef8 <rcutils_reset_error>
 80143e6:	9801      	ldr	r0, [sp, #4]
 80143e8:	b007      	add	sp, #28
 80143ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80143ee:	bf00      	nop

080143f0 <rclc_action_take_goal_handle>:
 80143f0:	b160      	cbz	r0, 801440c <rclc_action_take_goal_handle+0x1c>
 80143f2:	6883      	ldr	r3, [r0, #8]
 80143f4:	b143      	cbz	r3, 8014408 <rclc_action_take_goal_handle+0x18>
 80143f6:	6819      	ldr	r1, [r3, #0]
 80143f8:	6081      	str	r1, [r0, #8]
 80143fa:	2200      	movs	r2, #0
 80143fc:	721a      	strb	r2, [r3, #8]
 80143fe:	68c1      	ldr	r1, [r0, #12]
 8014400:	6019      	str	r1, [r3, #0]
 8014402:	621a      	str	r2, [r3, #32]
 8014404:	849a      	strh	r2, [r3, #36]	@ 0x24
 8014406:	60c3      	str	r3, [r0, #12]
 8014408:	4618      	mov	r0, r3
 801440a:	4770      	bx	lr
 801440c:	4603      	mov	r3, r0
 801440e:	e7fb      	b.n	8014408 <rclc_action_take_goal_handle+0x18>

08014410 <rclc_action_remove_used_goal_handle>:
 8014410:	b180      	cbz	r0, 8014434 <rclc_action_remove_used_goal_handle+0x24>
 8014412:	b179      	cbz	r1, 8014434 <rclc_action_remove_used_goal_handle+0x24>
 8014414:	68c3      	ldr	r3, [r0, #12]
 8014416:	4299      	cmp	r1, r3
 8014418:	d00d      	beq.n	8014436 <rclc_action_remove_used_goal_handle+0x26>
 801441a:	b12b      	cbz	r3, 8014428 <rclc_action_remove_used_goal_handle+0x18>
 801441c:	681a      	ldr	r2, [r3, #0]
 801441e:	4291      	cmp	r1, r2
 8014420:	d003      	beq.n	801442a <rclc_action_remove_used_goal_handle+0x1a>
 8014422:	4613      	mov	r3, r2
 8014424:	2b00      	cmp	r3, #0
 8014426:	d1f9      	bne.n	801441c <rclc_action_remove_used_goal_handle+0xc>
 8014428:	4770      	bx	lr
 801442a:	680a      	ldr	r2, [r1, #0]
 801442c:	601a      	str	r2, [r3, #0]
 801442e:	6883      	ldr	r3, [r0, #8]
 8014430:	600b      	str	r3, [r1, #0]
 8014432:	6081      	str	r1, [r0, #8]
 8014434:	4770      	bx	lr
 8014436:	680b      	ldr	r3, [r1, #0]
 8014438:	60c3      	str	r3, [r0, #12]
 801443a:	e7f8      	b.n	801442e <rclc_action_remove_used_goal_handle+0x1e>

0801443c <rclc_action_find_goal_handle_by_uuid>:
 801443c:	b538      	push	{r3, r4, r5, lr}
 801443e:	b180      	cbz	r0, 8014462 <rclc_action_find_goal_handle_by_uuid+0x26>
 8014440:	460d      	mov	r5, r1
 8014442:	b181      	cbz	r1, 8014466 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8014444:	68c4      	ldr	r4, [r0, #12]
 8014446:	b914      	cbnz	r4, 801444e <rclc_action_find_goal_handle_by_uuid+0x12>
 8014448:	e009      	b.n	801445e <rclc_action_find_goal_handle_by_uuid+0x22>
 801444a:	6824      	ldr	r4, [r4, #0]
 801444c:	b13c      	cbz	r4, 801445e <rclc_action_find_goal_handle_by_uuid+0x22>
 801444e:	f104 0009 	add.w	r0, r4, #9
 8014452:	2210      	movs	r2, #16
 8014454:	4629      	mov	r1, r5
 8014456:	f003 f97f 	bl	8017758 <memcmp>
 801445a:	2800      	cmp	r0, #0
 801445c:	d1f5      	bne.n	801444a <rclc_action_find_goal_handle_by_uuid+0xe>
 801445e:	4620      	mov	r0, r4
 8014460:	bd38      	pop	{r3, r4, r5, pc}
 8014462:	4604      	mov	r4, r0
 8014464:	e7fb      	b.n	801445e <rclc_action_find_goal_handle_by_uuid+0x22>
 8014466:	460c      	mov	r4, r1
 8014468:	e7f9      	b.n	801445e <rclc_action_find_goal_handle_by_uuid+0x22>
 801446a:	bf00      	nop

0801446c <rclc_action_find_first_handle_by_status>:
 801446c:	b140      	cbz	r0, 8014480 <rclc_action_find_first_handle_by_status+0x14>
 801446e:	68c0      	ldr	r0, [r0, #12]
 8014470:	b910      	cbnz	r0, 8014478 <rclc_action_find_first_handle_by_status+0xc>
 8014472:	e005      	b.n	8014480 <rclc_action_find_first_handle_by_status+0x14>
 8014474:	6800      	ldr	r0, [r0, #0]
 8014476:	b118      	cbz	r0, 8014480 <rclc_action_find_first_handle_by_status+0x14>
 8014478:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801447c:	428b      	cmp	r3, r1
 801447e:	d1f9      	bne.n	8014474 <rclc_action_find_first_handle_by_status+0x8>
 8014480:	4770      	bx	lr
 8014482:	bf00      	nop

08014484 <rclc_action_find_first_terminated_handle>:
 8014484:	b140      	cbz	r0, 8014498 <rclc_action_find_first_terminated_handle+0x14>
 8014486:	68c0      	ldr	r0, [r0, #12]
 8014488:	b910      	cbnz	r0, 8014490 <rclc_action_find_first_terminated_handle+0xc>
 801448a:	e005      	b.n	8014498 <rclc_action_find_first_terminated_handle+0x14>
 801448c:	6800      	ldr	r0, [r0, #0]
 801448e:	b118      	cbz	r0, 8014498 <rclc_action_find_first_terminated_handle+0x14>
 8014490:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8014494:	2b03      	cmp	r3, #3
 8014496:	ddf9      	ble.n	801448c <rclc_action_find_first_terminated_handle+0x8>
 8014498:	4770      	bx	lr
 801449a:	bf00      	nop

0801449c <rclc_action_find_handle_by_goal_request_sequence_number>:
 801449c:	b170      	cbz	r0, 80144bc <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801449e:	68c0      	ldr	r0, [r0, #12]
 80144a0:	b160      	cbz	r0, 80144bc <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80144a2:	b410      	push	{r4}
 80144a4:	e001      	b.n	80144aa <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 80144a6:	6800      	ldr	r0, [r0, #0]
 80144a8:	b128      	cbz	r0, 80144b6 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 80144aa:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 80144ae:	4299      	cmp	r1, r3
 80144b0:	bf08      	it	eq
 80144b2:	4294      	cmpeq	r4, r2
 80144b4:	d1f7      	bne.n	80144a6 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 80144b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80144ba:	4770      	bx	lr
 80144bc:	4770      	bx	lr
 80144be:	bf00      	nop

080144c0 <rclc_action_find_handle_by_result_request_sequence_number>:
 80144c0:	b170      	cbz	r0, 80144e0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80144c2:	68c0      	ldr	r0, [r0, #12]
 80144c4:	b160      	cbz	r0, 80144e0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80144c6:	b410      	push	{r4}
 80144c8:	e001      	b.n	80144ce <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80144ca:	6800      	ldr	r0, [r0, #0]
 80144cc:	b128      	cbz	r0, 80144da <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80144ce:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 80144d2:	4299      	cmp	r1, r3
 80144d4:	bf08      	it	eq
 80144d6:	4294      	cmpeq	r4, r2
 80144d8:	d1f7      	bne.n	80144ca <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 80144da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80144de:	4770      	bx	lr
 80144e0:	4770      	bx	lr
 80144e2:	bf00      	nop

080144e4 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 80144e4:	b170      	cbz	r0, 8014504 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80144e6:	68c0      	ldr	r0, [r0, #12]
 80144e8:	b160      	cbz	r0, 8014504 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80144ea:	b410      	push	{r4}
 80144ec:	e001      	b.n	80144f2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 80144ee:	6800      	ldr	r0, [r0, #0]
 80144f0:	b128      	cbz	r0, 80144fe <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 80144f2:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 80144f6:	4299      	cmp	r1, r3
 80144f8:	bf08      	it	eq
 80144fa:	4294      	cmpeq	r4, r2
 80144fc:	d1f7      	bne.n	80144ee <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80144fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014502:	4770      	bx	lr
 8014504:	4770      	bx	lr
 8014506:	bf00      	nop

08014508 <rclc_action_find_first_handle_with_goal_response>:
 8014508:	b140      	cbz	r0, 801451c <rclc_action_find_first_handle_with_goal_response+0x14>
 801450a:	68c0      	ldr	r0, [r0, #12]
 801450c:	b910      	cbnz	r0, 8014514 <rclc_action_find_first_handle_with_goal_response+0xc>
 801450e:	e005      	b.n	801451c <rclc_action_find_first_handle_with_goal_response+0x14>
 8014510:	6800      	ldr	r0, [r0, #0]
 8014512:	b118      	cbz	r0, 801451c <rclc_action_find_first_handle_with_goal_response+0x14>
 8014514:	f890 3020 	ldrb.w	r3, [r0, #32]
 8014518:	2b00      	cmp	r3, #0
 801451a:	d0f9      	beq.n	8014510 <rclc_action_find_first_handle_with_goal_response+0x8>
 801451c:	4770      	bx	lr
 801451e:	bf00      	nop

08014520 <rclc_action_find_first_handle_with_result_response>:
 8014520:	b140      	cbz	r0, 8014534 <rclc_action_find_first_handle_with_result_response+0x14>
 8014522:	68c0      	ldr	r0, [r0, #12]
 8014524:	b910      	cbnz	r0, 801452c <rclc_action_find_first_handle_with_result_response+0xc>
 8014526:	e005      	b.n	8014534 <rclc_action_find_first_handle_with_result_response+0x14>
 8014528:	6800      	ldr	r0, [r0, #0]
 801452a:	b118      	cbz	r0, 8014534 <rclc_action_find_first_handle_with_result_response+0x14>
 801452c:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8014530:	2b00      	cmp	r3, #0
 8014532:	d0f9      	beq.n	8014528 <rclc_action_find_first_handle_with_result_response+0x8>
 8014534:	4770      	bx	lr
 8014536:	bf00      	nop

08014538 <rclc_action_server_response_goal_request>:
 8014538:	b198      	cbz	r0, 8014562 <rclc_action_server_response_goal_request+0x2a>
 801453a:	b510      	push	{r4, lr}
 801453c:	6844      	ldr	r4, [r0, #4]
 801453e:	b086      	sub	sp, #24
 8014540:	2200      	movs	r2, #0
 8014542:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8014546:	460b      	mov	r3, r1
 8014548:	9205      	str	r2, [sp, #20]
 801454a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801454e:	aa03      	add	r2, sp, #12
 8014550:	f104 0010 	add.w	r0, r4, #16
 8014554:	f88d 300c 	strb.w	r3, [sp, #12]
 8014558:	f7ff fd4a 	bl	8013ff0 <rcl_action_send_goal_response>
 801455c:	b918      	cbnz	r0, 8014566 <rclc_action_server_response_goal_request+0x2e>
 801455e:	b006      	add	sp, #24
 8014560:	bd10      	pop	{r4, pc}
 8014562:	200b      	movs	r0, #11
 8014564:	4770      	bx	lr
 8014566:	9001      	str	r0, [sp, #4]
 8014568:	f7f8 fcc6 	bl	800cef8 <rcutils_reset_error>
 801456c:	9801      	ldr	r0, [sp, #4]
 801456e:	b006      	add	sp, #24
 8014570:	bd10      	pop	{r4, pc}
 8014572:	bf00      	nop
 8014574:	0000      	movs	r0, r0
	...

08014578 <rclc_action_server_goal_cancel_accept>:
 8014578:	b310      	cbz	r0, 80145c0 <rclc_action_server_goal_cancel_accept+0x48>
 801457a:	b510      	push	{r4, lr}
 801457c:	b090      	sub	sp, #64	@ 0x40
 801457e:	4604      	mov	r4, r0
 8014580:	a806      	add	r0, sp, #24
 8014582:	f7ff fefd 	bl	8014380 <rcl_action_get_zero_initialized_cancel_response>
 8014586:	2300      	movs	r3, #0
 8014588:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801458c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8014590:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8014594:	f88d 3018 	strb.w	r3, [sp, #24]
 8014598:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801459c:	f8cd d01c 	str.w	sp, [sp, #28]
 80145a0:	46ec      	mov	ip, sp
 80145a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80145a6:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80145c8 <rclc_action_server_goal_cancel_accept+0x50>
 80145aa:	6860      	ldr	r0, [r4, #4]
 80145ac:	aa06      	add	r2, sp, #24
 80145ae:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 80145b2:	3010      	adds	r0, #16
 80145b4:	ed8d 7b08 	vstr	d7, [sp, #32]
 80145b8:	f7ff fdd2 	bl	8014160 <rcl_action_send_cancel_response>
 80145bc:	b010      	add	sp, #64	@ 0x40
 80145be:	bd10      	pop	{r4, pc}
 80145c0:	200b      	movs	r0, #11
 80145c2:	4770      	bx	lr
 80145c4:	f3af 8000 	nop.w
 80145c8:	00000001 	.word	0x00000001
 80145cc:	00000001 	.word	0x00000001

080145d0 <rclc_action_server_goal_cancel_reject>:
 80145d0:	b082      	sub	sp, #8
 80145d2:	b530      	push	{r4, r5, lr}
 80145d4:	b08b      	sub	sp, #44	@ 0x2c
 80145d6:	ac0e      	add	r4, sp, #56	@ 0x38
 80145d8:	e884 000c 	stmia.w	r4, {r2, r3}
 80145dc:	b188      	cbz	r0, 8014602 <rclc_action_server_goal_cancel_reject+0x32>
 80145de:	4604      	mov	r4, r0
 80145e0:	a801      	add	r0, sp, #4
 80145e2:	460d      	mov	r5, r1
 80145e4:	f7ff fecc 	bl	8014380 <rcl_action_get_zero_initialized_cancel_response>
 80145e8:	aa01      	add	r2, sp, #4
 80145ea:	a90e      	add	r1, sp, #56	@ 0x38
 80145ec:	f104 0010 	add.w	r0, r4, #16
 80145f0:	f88d 5004 	strb.w	r5, [sp, #4]
 80145f4:	f7ff fdb4 	bl	8014160 <rcl_action_send_cancel_response>
 80145f8:	b00b      	add	sp, #44	@ 0x2c
 80145fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80145fe:	b002      	add	sp, #8
 8014600:	4770      	bx	lr
 8014602:	200b      	movs	r0, #11
 8014604:	b00b      	add	sp, #44	@ 0x2c
 8014606:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801460a:	b002      	add	sp, #8
 801460c:	4770      	bx	lr
 801460e:	bf00      	nop

08014610 <__atomic_load_8>:
 8014610:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8014614:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8014618:	4a15      	ldr	r2, [pc, #84]	@ (8014670 <__atomic_load_8+0x60>)
 801461a:	4b16      	ldr	r3, [pc, #88]	@ (8014674 <__atomic_load_8+0x64>)
 801461c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8014620:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8014624:	fb02 f101 	mul.w	r1, r2, r1
 8014628:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801462c:	fba3 2301 	umull	r2, r3, r3, r1
 8014630:	091b      	lsrs	r3, r3, #4
 8014632:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8014636:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801463a:	b4d0      	push	{r4, r6, r7}
 801463c:	4c0e      	ldr	r4, [pc, #56]	@ (8014678 <__atomic_load_8+0x68>)
 801463e:	1ac9      	subs	r1, r1, r3
 8014640:	1862      	adds	r2, r4, r1
 8014642:	f04f 0c01 	mov.w	ip, #1
 8014646:	e8d2 3f4f 	ldrexb	r3, [r2]
 801464a:	e8c2 cf46 	strexb	r6, ip, [r2]
 801464e:	2e00      	cmp	r6, #0
 8014650:	d1f9      	bne.n	8014646 <__atomic_load_8+0x36>
 8014652:	f3bf 8f5b 	dmb	ish
 8014656:	b2db      	uxtb	r3, r3
 8014658:	2b00      	cmp	r3, #0
 801465a:	d1f4      	bne.n	8014646 <__atomic_load_8+0x36>
 801465c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8014660:	f3bf 8f5b 	dmb	ish
 8014664:	5463      	strb	r3, [r4, r1]
 8014666:	4630      	mov	r0, r6
 8014668:	4639      	mov	r1, r7
 801466a:	bcd0      	pop	{r4, r6, r7}
 801466c:	4770      	bx	lr
 801466e:	bf00      	nop
 8014670:	27d4eb2d 	.word	0x27d4eb2d
 8014674:	b21642c9 	.word	0xb21642c9
 8014678:	2000ac74 	.word	0x2000ac74

0801467c <__atomic_store_8>:
 801467c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8014680:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8014684:	b570      	push	{r4, r5, r6, lr}
 8014686:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801468a:	4c14      	ldr	r4, [pc, #80]	@ (80146dc <__atomic_store_8+0x60>)
 801468c:	4d14      	ldr	r5, [pc, #80]	@ (80146e0 <__atomic_store_8+0x64>)
 801468e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8014692:	fb04 f101 	mul.w	r1, r4, r1
 8014696:	4c13      	ldr	r4, [pc, #76]	@ (80146e4 <__atomic_store_8+0x68>)
 8014698:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801469c:	fba4 4e01 	umull	r4, lr, r4, r1
 80146a0:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 80146a4:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 80146a8:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 80146ac:	eba1 0e0e 	sub.w	lr, r1, lr
 80146b0:	eb05 0c0e 	add.w	ip, r5, lr
 80146b4:	f04f 0401 	mov.w	r4, #1
 80146b8:	e8dc 1f4f 	ldrexb	r1, [ip]
 80146bc:	e8cc 4f46 	strexb	r6, r4, [ip]
 80146c0:	2e00      	cmp	r6, #0
 80146c2:	d1f9      	bne.n	80146b8 <__atomic_store_8+0x3c>
 80146c4:	f3bf 8f5b 	dmb	ish
 80146c8:	b2c9      	uxtb	r1, r1
 80146ca:	2900      	cmp	r1, #0
 80146cc:	d1f4      	bne.n	80146b8 <__atomic_store_8+0x3c>
 80146ce:	e9c0 2300 	strd	r2, r3, [r0]
 80146d2:	f3bf 8f5b 	dmb	ish
 80146d6:	f805 100e 	strb.w	r1, [r5, lr]
 80146da:	bd70      	pop	{r4, r5, r6, pc}
 80146dc:	27d4eb2d 	.word	0x27d4eb2d
 80146e0:	2000ac74 	.word	0x2000ac74
 80146e4:	b21642c9 	.word	0xb21642c9

080146e8 <__atomic_exchange_8>:
 80146e8:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 80146ec:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 80146f0:	4916      	ldr	r1, [pc, #88]	@ (801474c <__atomic_exchange_8+0x64>)
 80146f2:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 80146f6:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 80146fa:	fb01 fc0c 	mul.w	ip, r1, ip
 80146fe:	4914      	ldr	r1, [pc, #80]	@ (8014750 <__atomic_exchange_8+0x68>)
 8014700:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8014704:	b570      	push	{r4, r5, r6, lr}
 8014706:	4605      	mov	r5, r0
 8014708:	fba1 010c 	umull	r0, r1, r1, ip
 801470c:	0909      	lsrs	r1, r1, #4
 801470e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8014712:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8014716:	4e0f      	ldr	r6, [pc, #60]	@ (8014754 <__atomic_exchange_8+0x6c>)
 8014718:	ebac 0c01 	sub.w	ip, ip, r1
 801471c:	eb06 010c 	add.w	r1, r6, ip
 8014720:	f04f 0e01 	mov.w	lr, #1
 8014724:	e8d1 4f4f 	ldrexb	r4, [r1]
 8014728:	e8c1 ef40 	strexb	r0, lr, [r1]
 801472c:	2800      	cmp	r0, #0
 801472e:	d1f9      	bne.n	8014724 <__atomic_exchange_8+0x3c>
 8014730:	f3bf 8f5b 	dmb	ish
 8014734:	b2e4      	uxtb	r4, r4
 8014736:	2c00      	cmp	r4, #0
 8014738:	d1f4      	bne.n	8014724 <__atomic_exchange_8+0x3c>
 801473a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801473e:	e9c5 2300 	strd	r2, r3, [r5]
 8014742:	f3bf 8f5b 	dmb	ish
 8014746:	f806 400c 	strb.w	r4, [r6, ip]
 801474a:	bd70      	pop	{r4, r5, r6, pc}
 801474c:	27d4eb2d 	.word	0x27d4eb2d
 8014750:	b21642c9 	.word	0xb21642c9
 8014754:	2000ac74 	.word	0x2000ac74

08014758 <rcutils_get_env>:
 8014758:	b168      	cbz	r0, 8014776 <rcutils_get_env+0x1e>
 801475a:	b510      	push	{r4, lr}
 801475c:	460c      	mov	r4, r1
 801475e:	b129      	cbz	r1, 801476c <rcutils_get_env+0x14>
 8014760:	f002 fc56 	bl	8017010 <getenv>
 8014764:	b120      	cbz	r0, 8014770 <rcutils_get_env+0x18>
 8014766:	6020      	str	r0, [r4, #0]
 8014768:	2000      	movs	r0, #0
 801476a:	bd10      	pop	{r4, pc}
 801476c:	4803      	ldr	r0, [pc, #12]	@ (801477c <rcutils_get_env+0x24>)
 801476e:	bd10      	pop	{r4, pc}
 8014770:	4b03      	ldr	r3, [pc, #12]	@ (8014780 <rcutils_get_env+0x28>)
 8014772:	6023      	str	r3, [r4, #0]
 8014774:	bd10      	pop	{r4, pc}
 8014776:	4803      	ldr	r0, [pc, #12]	@ (8014784 <rcutils_get_env+0x2c>)
 8014778:	4770      	bx	lr
 801477a:	bf00      	nop
 801477c:	08018f6c 	.word	0x08018f6c
 8014780:	08019090 	.word	0x08019090
 8014784:	08018f50 	.word	0x08018f50

08014788 <rcutils_is_directory>:
 8014788:	2000      	movs	r0, #0
 801478a:	4770      	bx	lr

0801478c <rcutils_join_path>:
 801478c:	b082      	sub	sp, #8
 801478e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8014792:	2000      	movs	r0, #0
 8014794:	b002      	add	sp, #8
 8014796:	4770      	bx	lr

08014798 <rcutils_to_native_path>:
 8014798:	b084      	sub	sp, #16
 801479a:	a801      	add	r0, sp, #4
 801479c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80147a0:	b004      	add	sp, #16
 80147a2:	2000      	movs	r0, #0
 80147a4:	4770      	bx	lr
 80147a6:	bf00      	nop

080147a8 <rcutils_format_string_limit>:
 80147a8:	b40f      	push	{r0, r1, r2, r3}
 80147aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147ac:	b083      	sub	sp, #12
 80147ae:	ac08      	add	r4, sp, #32
 80147b0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80147b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80147b6:	b34e      	cbz	r6, 801480c <rcutils_format_string_limit+0x64>
 80147b8:	a808      	add	r0, sp, #32
 80147ba:	f7f8 fb77 	bl	800ceac <rcutils_allocator_is_valid>
 80147be:	b328      	cbz	r0, 801480c <rcutils_format_string_limit+0x64>
 80147c0:	2100      	movs	r1, #0
 80147c2:	ab0f      	add	r3, sp, #60	@ 0x3c
 80147c4:	4632      	mov	r2, r6
 80147c6:	4608      	mov	r0, r1
 80147c8:	e9cd 3300 	strd	r3, r3, [sp]
 80147cc:	f000 f8f4 	bl	80149b8 <rcutils_vsnprintf>
 80147d0:	1c43      	adds	r3, r0, #1
 80147d2:	4605      	mov	r5, r0
 80147d4:	d01a      	beq.n	801480c <rcutils_format_string_limit+0x64>
 80147d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80147d8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80147da:	1c47      	adds	r7, r0, #1
 80147dc:	429f      	cmp	r7, r3
 80147de:	bf84      	itt	hi
 80147e0:	461f      	movhi	r7, r3
 80147e2:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 80147e6:	4638      	mov	r0, r7
 80147e8:	9b08      	ldr	r3, [sp, #32]
 80147ea:	4798      	blx	r3
 80147ec:	4604      	mov	r4, r0
 80147ee:	b168      	cbz	r0, 801480c <rcutils_format_string_limit+0x64>
 80147f0:	9b01      	ldr	r3, [sp, #4]
 80147f2:	4632      	mov	r2, r6
 80147f4:	4639      	mov	r1, r7
 80147f6:	f000 f8df 	bl	80149b8 <rcutils_vsnprintf>
 80147fa:	2800      	cmp	r0, #0
 80147fc:	db02      	blt.n	8014804 <rcutils_format_string_limit+0x5c>
 80147fe:	2300      	movs	r3, #0
 8014800:	5563      	strb	r3, [r4, r5]
 8014802:	e004      	b.n	801480e <rcutils_format_string_limit+0x66>
 8014804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014806:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014808:	4620      	mov	r0, r4
 801480a:	4798      	blx	r3
 801480c:	2400      	movs	r4, #0
 801480e:	4620      	mov	r0, r4
 8014810:	b003      	add	sp, #12
 8014812:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014816:	b004      	add	sp, #16
 8014818:	4770      	bx	lr
 801481a:	bf00      	nop

0801481c <rcutils_repl_str>:
 801481c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014820:	ed2d 8b02 	vpush	{d8}
 8014824:	b087      	sub	sp, #28
 8014826:	4680      	mov	r8, r0
 8014828:	4608      	mov	r0, r1
 801482a:	f8cd 8004 	str.w	r8, [sp, #4]
 801482e:	ee08 2a10 	vmov	s16, r2
 8014832:	468a      	mov	sl, r1
 8014834:	4699      	mov	r9, r3
 8014836:	f7eb fcfd 	bl	8000234 <strlen>
 801483a:	2600      	movs	r6, #0
 801483c:	4647      	mov	r7, r8
 801483e:	9002      	str	r0, [sp, #8]
 8014840:	46b3      	mov	fp, r6
 8014842:	2510      	movs	r5, #16
 8014844:	46b0      	mov	r8, r6
 8014846:	e01d      	b.n	8014884 <rcutils_repl_str+0x68>
 8014848:	f10b 0b01 	add.w	fp, fp, #1
 801484c:	455e      	cmp	r6, fp
 801484e:	d211      	bcs.n	8014874 <rcutils_repl_str+0x58>
 8014850:	442e      	add	r6, r5
 8014852:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014856:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801485a:	00b1      	lsls	r1, r6, #2
 801485c:	4798      	blx	r3
 801485e:	2800      	cmp	r0, #0
 8014860:	f000 8088 	beq.w	8014974 <rcutils_repl_str+0x158>
 8014864:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014868:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 801486c:	4680      	mov	r8, r0
 801486e:	bf28      	it	cs
 8014870:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8014874:	9a01      	ldr	r2, [sp, #4]
 8014876:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 801487a:	1aa2      	subs	r2, r4, r2
 801487c:	f843 2c04 	str.w	r2, [r3, #-4]
 8014880:	9b02      	ldr	r3, [sp, #8]
 8014882:	18e7      	adds	r7, r4, r3
 8014884:	4651      	mov	r1, sl
 8014886:	4638      	mov	r0, r7
 8014888:	f002 ffb7 	bl	80177fa <strstr>
 801488c:	4604      	mov	r4, r0
 801488e:	4640      	mov	r0, r8
 8014890:	2c00      	cmp	r4, #0
 8014892:	d1d9      	bne.n	8014848 <rcutils_repl_str+0x2c>
 8014894:	46b8      	mov	r8, r7
 8014896:	4607      	mov	r7, r0
 8014898:	4640      	mov	r0, r8
 801489a:	f7eb fccb 	bl	8000234 <strlen>
 801489e:	9b01      	ldr	r3, [sp, #4]
 80148a0:	eba8 0303 	sub.w	r3, r8, r3
 80148a4:	181c      	adds	r4, r3, r0
 80148a6:	9404      	str	r4, [sp, #16]
 80148a8:	f1bb 0f00 	cmp.w	fp, #0
 80148ac:	d04a      	beq.n	8014944 <rcutils_repl_str+0x128>
 80148ae:	ee18 0a10 	vmov	r0, s16
 80148b2:	f7eb fcbf 	bl	8000234 <strlen>
 80148b6:	9b02      	ldr	r3, [sp, #8]
 80148b8:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80148bc:	1ac3      	subs	r3, r0, r3
 80148be:	fb0b 4303 	mla	r3, fp, r3, r4
 80148c2:	461a      	mov	r2, r3
 80148c4:	9305      	str	r3, [sp, #20]
 80148c6:	4606      	mov	r6, r0
 80148c8:	f8d9 3000 	ldr.w	r3, [r9]
 80148cc:	1c50      	adds	r0, r2, #1
 80148ce:	4798      	blx	r3
 80148d0:	9003      	str	r0, [sp, #12]
 80148d2:	2800      	cmp	r0, #0
 80148d4:	d04f      	beq.n	8014976 <rcutils_repl_str+0x15a>
 80148d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80148da:	683a      	ldr	r2, [r7, #0]
 80148dc:	4641      	mov	r1, r8
 80148de:	f003 f82e 	bl	801793e <memcpy>
 80148e2:	683d      	ldr	r5, [r7, #0]
 80148e4:	9b03      	ldr	r3, [sp, #12]
 80148e6:	9701      	str	r7, [sp, #4]
 80148e8:	46ba      	mov	sl, r7
 80148ea:	441d      	add	r5, r3
 80148ec:	9f02      	ldr	r7, [sp, #8]
 80148ee:	f8cd 9008 	str.w	r9, [sp, #8]
 80148f2:	2401      	movs	r4, #1
 80148f4:	46d1      	mov	r9, sl
 80148f6:	ee18 aa10 	vmov	sl, s16
 80148fa:	e00a      	b.n	8014912 <rcutils_repl_str+0xf6>
 80148fc:	f8d9 5000 	ldr.w	r5, [r9]
 8014900:	1aaa      	subs	r2, r5, r2
 8014902:	1885      	adds	r5, r0, r2
 8014904:	f003 f81b 	bl	801793e <memcpy>
 8014908:	45a3      	cmp	fp, r4
 801490a:	f104 0201 	add.w	r2, r4, #1
 801490e:	d935      	bls.n	801497c <rcutils_repl_str+0x160>
 8014910:	4614      	mov	r4, r2
 8014912:	4632      	mov	r2, r6
 8014914:	4651      	mov	r1, sl
 8014916:	4628      	mov	r0, r5
 8014918:	f003 f811 	bl	801793e <memcpy>
 801491c:	f859 2b04 	ldr.w	r2, [r9], #4
 8014920:	45a3      	cmp	fp, r4
 8014922:	443a      	add	r2, r7
 8014924:	eb05 0006 	add.w	r0, r5, r6
 8014928:	eb08 0102 	add.w	r1, r8, r2
 801492c:	d1e6      	bne.n	80148fc <rcutils_repl_str+0xe0>
 801492e:	9b04      	ldr	r3, [sp, #16]
 8014930:	1a9a      	subs	r2, r3, r2
 8014932:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8014936:	f003 f802 	bl	801793e <memcpy>
 801493a:	9a03      	ldr	r2, [sp, #12]
 801493c:	9905      	ldr	r1, [sp, #20]
 801493e:	2300      	movs	r3, #0
 8014940:	5453      	strb	r3, [r2, r1]
 8014942:	e00b      	b.n	801495c <rcutils_repl_str+0x140>
 8014944:	4620      	mov	r0, r4
 8014946:	f8d9 3000 	ldr.w	r3, [r9]
 801494a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801494e:	3001      	adds	r0, #1
 8014950:	4798      	blx	r3
 8014952:	9003      	str	r0, [sp, #12]
 8014954:	b110      	cbz	r0, 801495c <rcutils_repl_str+0x140>
 8014956:	9901      	ldr	r1, [sp, #4]
 8014958:	f002 ffe9 	bl	801792e <strcpy>
 801495c:	4638      	mov	r0, r7
 801495e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014962:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014966:	4798      	blx	r3
 8014968:	9803      	ldr	r0, [sp, #12]
 801496a:	b007      	add	sp, #28
 801496c:	ecbd 8b02 	vpop	{d8}
 8014970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014974:	4647      	mov	r7, r8
 8014976:	2300      	movs	r3, #0
 8014978:	9303      	str	r3, [sp, #12]
 801497a:	e7ef      	b.n	801495c <rcutils_repl_str+0x140>
 801497c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8014980:	e7db      	b.n	801493a <rcutils_repl_str+0x11e>
 8014982:	bf00      	nop

08014984 <rcutils_snprintf>:
 8014984:	b40c      	push	{r2, r3}
 8014986:	b530      	push	{r4, r5, lr}
 8014988:	b083      	sub	sp, #12
 801498a:	ab06      	add	r3, sp, #24
 801498c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014990:	9301      	str	r3, [sp, #4]
 8014992:	b152      	cbz	r2, 80149aa <rcutils_snprintf+0x26>
 8014994:	b138      	cbz	r0, 80149a6 <rcutils_snprintf+0x22>
 8014996:	b141      	cbz	r1, 80149aa <rcutils_snprintf+0x26>
 8014998:	f002 fed0 	bl	801773c <vsniprintf>
 801499c:	b003      	add	sp, #12
 801499e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80149a2:	b002      	add	sp, #8
 80149a4:	4770      	bx	lr
 80149a6:	2900      	cmp	r1, #0
 80149a8:	d0f6      	beq.n	8014998 <rcutils_snprintf+0x14>
 80149aa:	f002 ff93 	bl	80178d4 <__errno>
 80149ae:	2316      	movs	r3, #22
 80149b0:	6003      	str	r3, [r0, #0]
 80149b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80149b6:	e7f1      	b.n	801499c <rcutils_snprintf+0x18>

080149b8 <rcutils_vsnprintf>:
 80149b8:	b570      	push	{r4, r5, r6, lr}
 80149ba:	b13a      	cbz	r2, 80149cc <rcutils_vsnprintf+0x14>
 80149bc:	b120      	cbz	r0, 80149c8 <rcutils_vsnprintf+0x10>
 80149be:	b129      	cbz	r1, 80149cc <rcutils_vsnprintf+0x14>
 80149c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80149c4:	f002 beba 	b.w	801773c <vsniprintf>
 80149c8:	2900      	cmp	r1, #0
 80149ca:	d0f9      	beq.n	80149c0 <rcutils_vsnprintf+0x8>
 80149cc:	f002 ff82 	bl	80178d4 <__errno>
 80149d0:	2316      	movs	r3, #22
 80149d2:	6003      	str	r3, [r0, #0]
 80149d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80149d8:	bd70      	pop	{r4, r5, r6, pc}
 80149da:	bf00      	nop

080149dc <rcutils_strdup>:
 80149dc:	b084      	sub	sp, #16
 80149de:	b570      	push	{r4, r5, r6, lr}
 80149e0:	b082      	sub	sp, #8
 80149e2:	ac07      	add	r4, sp, #28
 80149e4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80149e8:	4605      	mov	r5, r0
 80149ea:	b1b0      	cbz	r0, 8014a1a <rcutils_strdup+0x3e>
 80149ec:	f7eb fc22 	bl	8000234 <strlen>
 80149f0:	1c42      	adds	r2, r0, #1
 80149f2:	9b07      	ldr	r3, [sp, #28]
 80149f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80149f6:	9201      	str	r2, [sp, #4]
 80149f8:	4606      	mov	r6, r0
 80149fa:	4610      	mov	r0, r2
 80149fc:	4798      	blx	r3
 80149fe:	4604      	mov	r4, r0
 8014a00:	b128      	cbz	r0, 8014a0e <rcutils_strdup+0x32>
 8014a02:	9a01      	ldr	r2, [sp, #4]
 8014a04:	4629      	mov	r1, r5
 8014a06:	f002 ff9a 	bl	801793e <memcpy>
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	55a3      	strb	r3, [r4, r6]
 8014a0e:	4620      	mov	r0, r4
 8014a10:	b002      	add	sp, #8
 8014a12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014a16:	b004      	add	sp, #16
 8014a18:	4770      	bx	lr
 8014a1a:	4604      	mov	r4, r0
 8014a1c:	e7f7      	b.n	8014a0e <rcutils_strdup+0x32>
 8014a1e:	bf00      	nop

08014a20 <rcutils_strndup>:
 8014a20:	b082      	sub	sp, #8
 8014a22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a24:	ac06      	add	r4, sp, #24
 8014a26:	e884 000c 	stmia.w	r4, {r2, r3}
 8014a2a:	4605      	mov	r5, r0
 8014a2c:	b188      	cbz	r0, 8014a52 <rcutils_strndup+0x32>
 8014a2e:	1c4f      	adds	r7, r1, #1
 8014a30:	460e      	mov	r6, r1
 8014a32:	4638      	mov	r0, r7
 8014a34:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8014a36:	4790      	blx	r2
 8014a38:	4604      	mov	r4, r0
 8014a3a:	b128      	cbz	r0, 8014a48 <rcutils_strndup+0x28>
 8014a3c:	463a      	mov	r2, r7
 8014a3e:	4629      	mov	r1, r5
 8014a40:	f002 ff7d 	bl	801793e <memcpy>
 8014a44:	2300      	movs	r3, #0
 8014a46:	55a3      	strb	r3, [r4, r6]
 8014a48:	4620      	mov	r0, r4
 8014a4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014a4e:	b002      	add	sp, #8
 8014a50:	4770      	bx	lr
 8014a52:	4604      	mov	r4, r0
 8014a54:	e7f8      	b.n	8014a48 <rcutils_strndup+0x28>
 8014a56:	bf00      	nop

08014a58 <rcutils_get_zero_initialized_string_map>:
 8014a58:	4b01      	ldr	r3, [pc, #4]	@ (8014a60 <rcutils_get_zero_initialized_string_map+0x8>)
 8014a5a:	2000      	movs	r0, #0
 8014a5c:	6018      	str	r0, [r3, #0]
 8014a5e:	4770      	bx	lr
 8014a60:	2000ac8c 	.word	0x2000ac8c

08014a64 <rcutils_string_map_reserve>:
 8014a64:	2800      	cmp	r0, #0
 8014a66:	d05f      	beq.n	8014b28 <rcutils_string_map_reserve+0xc4>
 8014a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a6c:	460c      	mov	r4, r1
 8014a6e:	6801      	ldr	r1, [r0, #0]
 8014a70:	b082      	sub	sp, #8
 8014a72:	4605      	mov	r5, r0
 8014a74:	b129      	cbz	r1, 8014a82 <rcutils_string_map_reserve+0x1e>
 8014a76:	68cb      	ldr	r3, [r1, #12]
 8014a78:	42a3      	cmp	r3, r4
 8014a7a:	d906      	bls.n	8014a8a <rcutils_string_map_reserve+0x26>
 8014a7c:	461c      	mov	r4, r3
 8014a7e:	2900      	cmp	r1, #0
 8014a80:	d1f9      	bne.n	8014a76 <rcutils_string_map_reserve+0x12>
 8014a82:	201f      	movs	r0, #31
 8014a84:	b002      	add	sp, #8
 8014a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a8a:	688b      	ldr	r3, [r1, #8]
 8014a8c:	42a3      	cmp	r3, r4
 8014a8e:	d047      	beq.n	8014b20 <rcutils_string_map_reserve+0xbc>
 8014a90:	6a0e      	ldr	r6, [r1, #32]
 8014a92:	2c00      	cmp	r4, #0
 8014a94:	d034      	beq.n	8014b00 <rcutils_string_map_reserve+0x9c>
 8014a96:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8014a9a:	d243      	bcs.n	8014b24 <rcutils_string_map_reserve+0xc0>
 8014a9c:	00a7      	lsls	r7, r4, #2
 8014a9e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8014aa2:	6808      	ldr	r0, [r1, #0]
 8014aa4:	4632      	mov	r2, r6
 8014aa6:	4639      	mov	r1, r7
 8014aa8:	47c0      	blx	r8
 8014aaa:	2800      	cmp	r0, #0
 8014aac:	d03a      	beq.n	8014b24 <rcutils_string_map_reserve+0xc0>
 8014aae:	682b      	ldr	r3, [r5, #0]
 8014ab0:	4632      	mov	r2, r6
 8014ab2:	6018      	str	r0, [r3, #0]
 8014ab4:	4639      	mov	r1, r7
 8014ab6:	6858      	ldr	r0, [r3, #4]
 8014ab8:	47c0      	blx	r8
 8014aba:	2800      	cmp	r0, #0
 8014abc:	d032      	beq.n	8014b24 <rcutils_string_map_reserve+0xc0>
 8014abe:	682d      	ldr	r5, [r5, #0]
 8014ac0:	68ab      	ldr	r3, [r5, #8]
 8014ac2:	6068      	str	r0, [r5, #4]
 8014ac4:	42a3      	cmp	r3, r4
 8014ac6:	d226      	bcs.n	8014b16 <rcutils_string_map_reserve+0xb2>
 8014ac8:	682a      	ldr	r2, [r5, #0]
 8014aca:	eb00 0c07 	add.w	ip, r0, r7
 8014ace:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8014ad2:	45e6      	cmp	lr, ip
 8014ad4:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8014ad8:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8014adc:	d203      	bcs.n	8014ae6 <rcutils_string_map_reserve+0x82>
 8014ade:	eb02 0c07 	add.w	ip, r2, r7
 8014ae2:	4566      	cmp	r6, ip
 8014ae4:	d322      	bcc.n	8014b2c <rcutils_string_map_reserve+0xc8>
 8014ae6:	1ae3      	subs	r3, r4, r3
 8014ae8:	009a      	lsls	r2, r3, #2
 8014aea:	4670      	mov	r0, lr
 8014aec:	2100      	movs	r1, #0
 8014aee:	9201      	str	r2, [sp, #4]
 8014af0:	f002 fe5c 	bl	80177ac <memset>
 8014af4:	9a01      	ldr	r2, [sp, #4]
 8014af6:	2100      	movs	r1, #0
 8014af8:	4630      	mov	r0, r6
 8014afa:	f002 fe57 	bl	80177ac <memset>
 8014afe:	e00a      	b.n	8014b16 <rcutils_string_map_reserve+0xb2>
 8014b00:	694f      	ldr	r7, [r1, #20]
 8014b02:	6808      	ldr	r0, [r1, #0]
 8014b04:	4631      	mov	r1, r6
 8014b06:	47b8      	blx	r7
 8014b08:	682b      	ldr	r3, [r5, #0]
 8014b0a:	4631      	mov	r1, r6
 8014b0c:	6858      	ldr	r0, [r3, #4]
 8014b0e:	601c      	str	r4, [r3, #0]
 8014b10:	47b8      	blx	r7
 8014b12:	682d      	ldr	r5, [r5, #0]
 8014b14:	606c      	str	r4, [r5, #4]
 8014b16:	2000      	movs	r0, #0
 8014b18:	60ac      	str	r4, [r5, #8]
 8014b1a:	b002      	add	sp, #8
 8014b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b20:	2000      	movs	r0, #0
 8014b22:	e7af      	b.n	8014a84 <rcutils_string_map_reserve+0x20>
 8014b24:	200a      	movs	r0, #10
 8014b26:	e7ad      	b.n	8014a84 <rcutils_string_map_reserve+0x20>
 8014b28:	200b      	movs	r0, #11
 8014b2a:	4770      	bx	lr
 8014b2c:	1f0b      	subs	r3, r1, #4
 8014b2e:	4418      	add	r0, r3
 8014b30:	4413      	add	r3, r2
 8014b32:	3a04      	subs	r2, #4
 8014b34:	4417      	add	r7, r2
 8014b36:	2200      	movs	r2, #0
 8014b38:	f843 2f04 	str.w	r2, [r3, #4]!
 8014b3c:	42bb      	cmp	r3, r7
 8014b3e:	f840 2f04 	str.w	r2, [r0, #4]!
 8014b42:	d1f9      	bne.n	8014b38 <rcutils_string_map_reserve+0xd4>
 8014b44:	e7e7      	b.n	8014b16 <rcutils_string_map_reserve+0xb2>
 8014b46:	bf00      	nop

08014b48 <rcutils_string_map_init>:
 8014b48:	b082      	sub	sp, #8
 8014b4a:	b570      	push	{r4, r5, r6, lr}
 8014b4c:	ac04      	add	r4, sp, #16
 8014b4e:	e884 000c 	stmia.w	r4, {r2, r3}
 8014b52:	b380      	cbz	r0, 8014bb6 <rcutils_string_map_init+0x6e>
 8014b54:	6806      	ldr	r6, [r0, #0]
 8014b56:	4604      	mov	r4, r0
 8014b58:	b12e      	cbz	r6, 8014b66 <rcutils_string_map_init+0x1e>
 8014b5a:	251e      	movs	r5, #30
 8014b5c:	4628      	mov	r0, r5
 8014b5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014b62:	b002      	add	sp, #8
 8014b64:	4770      	bx	lr
 8014b66:	a804      	add	r0, sp, #16
 8014b68:	460d      	mov	r5, r1
 8014b6a:	f7f8 f99f 	bl	800ceac <rcutils_allocator_is_valid>
 8014b6e:	b310      	cbz	r0, 8014bb6 <rcutils_string_map_init+0x6e>
 8014b70:	9b04      	ldr	r3, [sp, #16]
 8014b72:	9908      	ldr	r1, [sp, #32]
 8014b74:	2024      	movs	r0, #36	@ 0x24
 8014b76:	4798      	blx	r3
 8014b78:	6020      	str	r0, [r4, #0]
 8014b7a:	b310      	cbz	r0, 8014bc2 <rcutils_string_map_init+0x7a>
 8014b7c:	f10d 0e10 	add.w	lr, sp, #16
 8014b80:	e9c0 6600 	strd	r6, r6, [r0]
 8014b84:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8014b88:	f100 0c10 	add.w	ip, r0, #16
 8014b8c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014b90:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014b94:	f8de 3000 	ldr.w	r3, [lr]
 8014b98:	f8cc 3000 	str.w	r3, [ip]
 8014b9c:	4629      	mov	r1, r5
 8014b9e:	4620      	mov	r0, r4
 8014ba0:	f7ff ff60 	bl	8014a64 <rcutils_string_map_reserve>
 8014ba4:	4605      	mov	r5, r0
 8014ba6:	2800      	cmp	r0, #0
 8014ba8:	d0d8      	beq.n	8014b5c <rcutils_string_map_init+0x14>
 8014baa:	9b05      	ldr	r3, [sp, #20]
 8014bac:	9908      	ldr	r1, [sp, #32]
 8014bae:	6820      	ldr	r0, [r4, #0]
 8014bb0:	4798      	blx	r3
 8014bb2:	6026      	str	r6, [r4, #0]
 8014bb4:	e7d2      	b.n	8014b5c <rcutils_string_map_init+0x14>
 8014bb6:	250b      	movs	r5, #11
 8014bb8:	4628      	mov	r0, r5
 8014bba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014bbe:	b002      	add	sp, #8
 8014bc0:	4770      	bx	lr
 8014bc2:	250a      	movs	r5, #10
 8014bc4:	e7ca      	b.n	8014b5c <rcutils_string_map_init+0x14>
 8014bc6:	bf00      	nop

08014bc8 <rcutils_string_map_fini>:
 8014bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bcc:	b082      	sub	sp, #8
 8014bce:	2800      	cmp	r0, #0
 8014bd0:	d03a      	beq.n	8014c48 <rcutils_string_map_fini+0x80>
 8014bd2:	6804      	ldr	r4, [r0, #0]
 8014bd4:	4606      	mov	r6, r0
 8014bd6:	2c00      	cmp	r4, #0
 8014bd8:	d032      	beq.n	8014c40 <rcutils_string_map_fini+0x78>
 8014bda:	68a3      	ldr	r3, [r4, #8]
 8014bdc:	b32b      	cbz	r3, 8014c2a <rcutils_string_map_fini+0x62>
 8014bde:	2500      	movs	r5, #0
 8014be0:	6822      	ldr	r2, [r4, #0]
 8014be2:	462f      	mov	r7, r5
 8014be4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014be8:	b1e0      	cbz	r0, 8014c24 <rcutils_string_map_fini+0x5c>
 8014bea:	6a21      	ldr	r1, [r4, #32]
 8014bec:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8014bf0:	9101      	str	r1, [sp, #4]
 8014bf2:	47c0      	blx	r8
 8014bf4:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014bf8:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8014bfc:	9901      	ldr	r1, [sp, #4]
 8014bfe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014c02:	47c0      	blx	r8
 8014c04:	68e3      	ldr	r3, [r4, #12]
 8014c06:	6862      	ldr	r2, [r4, #4]
 8014c08:	3b01      	subs	r3, #1
 8014c0a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8014c0e:	60e3      	str	r3, [r4, #12]
 8014c10:	6834      	ldr	r4, [r6, #0]
 8014c12:	68a3      	ldr	r3, [r4, #8]
 8014c14:	3501      	adds	r5, #1
 8014c16:	429d      	cmp	r5, r3
 8014c18:	d207      	bcs.n	8014c2a <rcutils_string_map_fini+0x62>
 8014c1a:	6822      	ldr	r2, [r4, #0]
 8014c1c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014c20:	2800      	cmp	r0, #0
 8014c22:	d1e2      	bne.n	8014bea <rcutils_string_map_fini+0x22>
 8014c24:	3501      	adds	r5, #1
 8014c26:	429d      	cmp	r5, r3
 8014c28:	d3dc      	bcc.n	8014be4 <rcutils_string_map_fini+0x1c>
 8014c2a:	2100      	movs	r1, #0
 8014c2c:	4630      	mov	r0, r6
 8014c2e:	f7ff ff19 	bl	8014a64 <rcutils_string_map_reserve>
 8014c32:	4604      	mov	r4, r0
 8014c34:	b920      	cbnz	r0, 8014c40 <rcutils_string_map_fini+0x78>
 8014c36:	6830      	ldr	r0, [r6, #0]
 8014c38:	6943      	ldr	r3, [r0, #20]
 8014c3a:	6a01      	ldr	r1, [r0, #32]
 8014c3c:	4798      	blx	r3
 8014c3e:	6034      	str	r4, [r6, #0]
 8014c40:	4620      	mov	r0, r4
 8014c42:	b002      	add	sp, #8
 8014c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c48:	240b      	movs	r4, #11
 8014c4a:	4620      	mov	r0, r4
 8014c4c:	b002      	add	sp, #8
 8014c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c52:	bf00      	nop

08014c54 <rcutils_string_map_getn>:
 8014c54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c58:	b300      	cbz	r0, 8014c9c <rcutils_string_map_getn+0x48>
 8014c5a:	6807      	ldr	r7, [r0, #0]
 8014c5c:	b1ff      	cbz	r7, 8014c9e <rcutils_string_map_getn+0x4a>
 8014c5e:	4688      	mov	r8, r1
 8014c60:	b1e1      	cbz	r1, 8014c9c <rcutils_string_map_getn+0x48>
 8014c62:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8014c66:	683e      	ldr	r6, [r7, #0]
 8014c68:	f1ba 0f00 	cmp.w	sl, #0
 8014c6c:	d016      	beq.n	8014c9c <rcutils_string_map_getn+0x48>
 8014c6e:	4691      	mov	r9, r2
 8014c70:	3e04      	subs	r6, #4
 8014c72:	2400      	movs	r4, #0
 8014c74:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8014c78:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014c7c:	4628      	mov	r0, r5
 8014c7e:	3401      	adds	r4, #1
 8014c80:	b155      	cbz	r5, 8014c98 <rcutils_string_map_getn+0x44>
 8014c82:	f7eb fad7 	bl	8000234 <strlen>
 8014c86:	4548      	cmp	r0, r9
 8014c88:	4602      	mov	r2, r0
 8014c8a:	4629      	mov	r1, r5
 8014c8c:	bf38      	it	cc
 8014c8e:	464a      	movcc	r2, r9
 8014c90:	4640      	mov	r0, r8
 8014c92:	f002 fda0 	bl	80177d6 <strncmp>
 8014c96:	b128      	cbz	r0, 8014ca4 <rcutils_string_map_getn+0x50>
 8014c98:	45a2      	cmp	sl, r4
 8014c9a:	d1eb      	bne.n	8014c74 <rcutils_string_map_getn+0x20>
 8014c9c:	2700      	movs	r7, #0
 8014c9e:	4638      	mov	r0, r7
 8014ca0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	f853 700b 	ldr.w	r7, [r3, fp]
 8014caa:	4638      	mov	r0, r7
 8014cac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014cb0 <rmw_get_zero_initialized_context>:
 8014cb0:	b510      	push	{r4, lr}
 8014cb2:	4604      	mov	r4, r0
 8014cb4:	3010      	adds	r0, #16
 8014cb6:	f7f8 f98b 	bl	800cfd0 <rmw_get_zero_initialized_init_options>
 8014cba:	2300      	movs	r3, #0
 8014cbc:	2000      	movs	r0, #0
 8014cbe:	2100      	movs	r1, #0
 8014cc0:	e9c4 0100 	strd	r0, r1, [r4]
 8014cc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8014cc8:	60a3      	str	r3, [r4, #8]
 8014cca:	4620      	mov	r0, r4
 8014ccc:	bd10      	pop	{r4, pc}
 8014cce:	bf00      	nop

08014cd0 <rmw_time_equal>:
 8014cd0:	b4f0      	push	{r4, r5, r6, r7}
 8014cd2:	b084      	sub	sp, #16
 8014cd4:	ac04      	add	r4, sp, #16
 8014cd6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8014cda:	4603      	mov	r3, r0
 8014cdc:	4924      	ldr	r1, [pc, #144]	@ (8014d70 <rmw_time_equal+0xa0>)
 8014cde:	9e03      	ldr	r6, [sp, #12]
 8014ce0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8014ce4:	2202      	movs	r2, #2
 8014ce6:	4299      	cmp	r1, r3
 8014ce8:	41aa      	sbcs	r2, r5
 8014cea:	d330      	bcc.n	8014d4e <rmw_time_equal+0x7e>
 8014cec:	4c21      	ldr	r4, [pc, #132]	@ (8014d74 <rmw_time_equal+0xa4>)
 8014cee:	fba3 3204 	umull	r3, r2, r3, r4
 8014cf2:	fb04 2205 	mla	r2, r4, r5, r2
 8014cf6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014cfa:	43dd      	mvns	r5, r3
 8014cfc:	1a8c      	subs	r4, r1, r2
 8014cfe:	4285      	cmp	r5, r0
 8014d00:	41b4      	sbcs	r4, r6
 8014d02:	d332      	bcc.n	8014d6a <rmw_time_equal+0x9a>
 8014d04:	eb10 0c03 	adds.w	ip, r0, r3
 8014d08:	eb42 0106 	adc.w	r1, r2, r6
 8014d0c:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8014d10:	4817      	ldr	r0, [pc, #92]	@ (8014d70 <rmw_time_equal+0xa0>)
 8014d12:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8014d14:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8014d16:	2202      	movs	r2, #2
 8014d18:	4298      	cmp	r0, r3
 8014d1a:	41b2      	sbcs	r2, r6
 8014d1c:	d31c      	bcc.n	8014d58 <rmw_time_equal+0x88>
 8014d1e:	4c15      	ldr	r4, [pc, #84]	@ (8014d74 <rmw_time_equal+0xa4>)
 8014d20:	fba3 3204 	umull	r3, r2, r3, r4
 8014d24:	fb04 2206 	mla	r2, r4, r6, r2
 8014d28:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8014d2c:	43de      	mvns	r6, r3
 8014d2e:	1a84      	subs	r4, r0, r2
 8014d30:	42ae      	cmp	r6, r5
 8014d32:	41bc      	sbcs	r4, r7
 8014d34:	d315      	bcc.n	8014d62 <rmw_time_equal+0x92>
 8014d36:	195b      	adds	r3, r3, r5
 8014d38:	eb42 0207 	adc.w	r2, r2, r7
 8014d3c:	428a      	cmp	r2, r1
 8014d3e:	bf08      	it	eq
 8014d40:	4563      	cmpeq	r3, ip
 8014d42:	bf0c      	ite	eq
 8014d44:	2001      	moveq	r0, #1
 8014d46:	2000      	movne	r0, #0
 8014d48:	b004      	add	sp, #16
 8014d4a:	bcf0      	pop	{r4, r5, r6, r7}
 8014d4c:	4770      	bx	lr
 8014d4e:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8014d52:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014d56:	e7d9      	b.n	8014d0c <rmw_time_equal+0x3c>
 8014d58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014d5c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8014d60:	e7ec      	b.n	8014d3c <rmw_time_equal+0x6c>
 8014d62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014d66:	4602      	mov	r2, r0
 8014d68:	e7e8      	b.n	8014d3c <rmw_time_equal+0x6c>
 8014d6a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8014d6e:	e7cd      	b.n	8014d0c <rmw_time_equal+0x3c>
 8014d70:	25c17d04 	.word	0x25c17d04
 8014d74:	3b9aca00 	.word	0x3b9aca00

08014d78 <rmw_time_total_nsec>:
 8014d78:	b470      	push	{r4, r5, r6}
 8014d7a:	b085      	sub	sp, #20
 8014d7c:	ac04      	add	r4, sp, #16
 8014d7e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8014d82:	4603      	mov	r3, r0
 8014d84:	4912      	ldr	r1, [pc, #72]	@ (8014dd0 <rmw_time_total_nsec+0x58>)
 8014d86:	9e03      	ldr	r6, [sp, #12]
 8014d88:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8014d8c:	2202      	movs	r2, #2
 8014d8e:	4299      	cmp	r1, r3
 8014d90:	41aa      	sbcs	r2, r5
 8014d92:	d311      	bcc.n	8014db8 <rmw_time_total_nsec+0x40>
 8014d94:	4c0f      	ldr	r4, [pc, #60]	@ (8014dd4 <rmw_time_total_nsec+0x5c>)
 8014d96:	fba3 3204 	umull	r3, r2, r3, r4
 8014d9a:	fb04 2205 	mla	r2, r4, r5, r2
 8014d9e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014da2:	43dd      	mvns	r5, r3
 8014da4:	1a8c      	subs	r4, r1, r2
 8014da6:	4285      	cmp	r5, r0
 8014da8:	41b4      	sbcs	r4, r6
 8014daa:	d30c      	bcc.n	8014dc6 <rmw_time_total_nsec+0x4e>
 8014dac:	1818      	adds	r0, r3, r0
 8014dae:	eb42 0106 	adc.w	r1, r2, r6
 8014db2:	b005      	add	sp, #20
 8014db4:	bc70      	pop	{r4, r5, r6}
 8014db6:	4770      	bx	lr
 8014db8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014dbc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014dc0:	b005      	add	sp, #20
 8014dc2:	bc70      	pop	{r4, r5, r6}
 8014dc4:	4770      	bx	lr
 8014dc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014dca:	b005      	add	sp, #20
 8014dcc:	bc70      	pop	{r4, r5, r6}
 8014dce:	4770      	bx	lr
 8014dd0:	25c17d04 	.word	0x25c17d04
 8014dd4:	3b9aca00 	.word	0x3b9aca00

08014dd8 <rmw_get_zero_initialized_message_info>:
 8014dd8:	b510      	push	{r4, lr}
 8014dda:	2240      	movs	r2, #64	@ 0x40
 8014ddc:	4604      	mov	r4, r0
 8014dde:	2100      	movs	r1, #0
 8014de0:	f002 fce4 	bl	80177ac <memset>
 8014de4:	4620      	mov	r0, r4
 8014de6:	bd10      	pop	{r4, pc}

08014de8 <rmw_validate_full_topic_name>:
 8014de8:	2800      	cmp	r0, #0
 8014dea:	d057      	beq.n	8014e9c <rmw_validate_full_topic_name+0xb4>
 8014dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014df0:	460d      	mov	r5, r1
 8014df2:	2900      	cmp	r1, #0
 8014df4:	d054      	beq.n	8014ea0 <rmw_validate_full_topic_name+0xb8>
 8014df6:	4616      	mov	r6, r2
 8014df8:	4604      	mov	r4, r0
 8014dfa:	f7eb fa1b 	bl	8000234 <strlen>
 8014dfe:	b148      	cbz	r0, 8014e14 <rmw_validate_full_topic_name+0x2c>
 8014e00:	7823      	ldrb	r3, [r4, #0]
 8014e02:	2b2f      	cmp	r3, #47	@ 0x2f
 8014e04:	d00d      	beq.n	8014e22 <rmw_validate_full_topic_name+0x3a>
 8014e06:	2302      	movs	r3, #2
 8014e08:	602b      	str	r3, [r5, #0]
 8014e0a:	b13e      	cbz	r6, 8014e1c <rmw_validate_full_topic_name+0x34>
 8014e0c:	2000      	movs	r0, #0
 8014e0e:	6030      	str	r0, [r6, #0]
 8014e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e14:	2301      	movs	r3, #1
 8014e16:	602b      	str	r3, [r5, #0]
 8014e18:	2e00      	cmp	r6, #0
 8014e1a:	d1f7      	bne.n	8014e0c <rmw_validate_full_topic_name+0x24>
 8014e1c:	2000      	movs	r0, #0
 8014e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e22:	1e43      	subs	r3, r0, #1
 8014e24:	5ce2      	ldrb	r2, [r4, r3]
 8014e26:	2a2f      	cmp	r2, #47	@ 0x2f
 8014e28:	d03c      	beq.n	8014ea4 <rmw_validate_full_topic_name+0xbc>
 8014e2a:	1e63      	subs	r3, r4, #1
 8014e2c:	eb03 0800 	add.w	r8, r3, r0
 8014e30:	f1c4 0e01 	rsb	lr, r4, #1
 8014e34:	eb0e 0703 	add.w	r7, lr, r3
 8014e38:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8014e3c:	f021 0220 	bic.w	r2, r1, #32
 8014e40:	3a41      	subs	r2, #65	@ 0x41
 8014e42:	2a19      	cmp	r2, #25
 8014e44:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8014e48:	d90b      	bls.n	8014e62 <rmw_validate_full_topic_name+0x7a>
 8014e4a:	295f      	cmp	r1, #95	@ 0x5f
 8014e4c:	d009      	beq.n	8014e62 <rmw_validate_full_topic_name+0x7a>
 8014e4e:	f1bc 0f0a 	cmp.w	ip, #10
 8014e52:	d906      	bls.n	8014e62 <rmw_validate_full_topic_name+0x7a>
 8014e54:	2304      	movs	r3, #4
 8014e56:	602b      	str	r3, [r5, #0]
 8014e58:	2e00      	cmp	r6, #0
 8014e5a:	d0df      	beq.n	8014e1c <rmw_validate_full_topic_name+0x34>
 8014e5c:	6037      	str	r7, [r6, #0]
 8014e5e:	2000      	movs	r0, #0
 8014e60:	e7d6      	b.n	8014e10 <rmw_validate_full_topic_name+0x28>
 8014e62:	4543      	cmp	r3, r8
 8014e64:	d1e6      	bne.n	8014e34 <rmw_validate_full_topic_name+0x4c>
 8014e66:	4f1a      	ldr	r7, [pc, #104]	@ (8014ed0 <rmw_validate_full_topic_name+0xe8>)
 8014e68:	2301      	movs	r3, #1
 8014e6a:	e004      	b.n	8014e76 <rmw_validate_full_topic_name+0x8e>
 8014e6c:	4298      	cmp	r0, r3
 8014e6e:	f104 0401 	add.w	r4, r4, #1
 8014e72:	d91c      	bls.n	8014eae <rmw_validate_full_topic_name+0xc6>
 8014e74:	4613      	mov	r3, r2
 8014e76:	4298      	cmp	r0, r3
 8014e78:	f103 0201 	add.w	r2, r3, #1
 8014e7c:	d0f6      	beq.n	8014e6c <rmw_validate_full_topic_name+0x84>
 8014e7e:	7821      	ldrb	r1, [r4, #0]
 8014e80:	292f      	cmp	r1, #47	@ 0x2f
 8014e82:	d1f3      	bne.n	8014e6c <rmw_validate_full_topic_name+0x84>
 8014e84:	7861      	ldrb	r1, [r4, #1]
 8014e86:	292f      	cmp	r1, #47	@ 0x2f
 8014e88:	d01c      	beq.n	8014ec4 <rmw_validate_full_topic_name+0xdc>
 8014e8a:	5dc9      	ldrb	r1, [r1, r7]
 8014e8c:	0749      	lsls	r1, r1, #29
 8014e8e:	d5ed      	bpl.n	8014e6c <rmw_validate_full_topic_name+0x84>
 8014e90:	2206      	movs	r2, #6
 8014e92:	602a      	str	r2, [r5, #0]
 8014e94:	2e00      	cmp	r6, #0
 8014e96:	d0c1      	beq.n	8014e1c <rmw_validate_full_topic_name+0x34>
 8014e98:	6033      	str	r3, [r6, #0]
 8014e9a:	e7bf      	b.n	8014e1c <rmw_validate_full_topic_name+0x34>
 8014e9c:	200b      	movs	r0, #11
 8014e9e:	4770      	bx	lr
 8014ea0:	200b      	movs	r0, #11
 8014ea2:	e7b5      	b.n	8014e10 <rmw_validate_full_topic_name+0x28>
 8014ea4:	2203      	movs	r2, #3
 8014ea6:	602a      	str	r2, [r5, #0]
 8014ea8:	2e00      	cmp	r6, #0
 8014eaa:	d1f5      	bne.n	8014e98 <rmw_validate_full_topic_name+0xb0>
 8014eac:	e7b6      	b.n	8014e1c <rmw_validate_full_topic_name+0x34>
 8014eae:	28f7      	cmp	r0, #247	@ 0xf7
 8014eb0:	d802      	bhi.n	8014eb8 <rmw_validate_full_topic_name+0xd0>
 8014eb2:	2000      	movs	r0, #0
 8014eb4:	6028      	str	r0, [r5, #0]
 8014eb6:	e7ab      	b.n	8014e10 <rmw_validate_full_topic_name+0x28>
 8014eb8:	2307      	movs	r3, #7
 8014eba:	602b      	str	r3, [r5, #0]
 8014ebc:	2e00      	cmp	r6, #0
 8014ebe:	d0ad      	beq.n	8014e1c <rmw_validate_full_topic_name+0x34>
 8014ec0:	23f6      	movs	r3, #246	@ 0xf6
 8014ec2:	e7e9      	b.n	8014e98 <rmw_validate_full_topic_name+0xb0>
 8014ec4:	2205      	movs	r2, #5
 8014ec6:	602a      	str	r2, [r5, #0]
 8014ec8:	2e00      	cmp	r6, #0
 8014eca:	d1e5      	bne.n	8014e98 <rmw_validate_full_topic_name+0xb0>
 8014ecc:	e7a6      	b.n	8014e1c <rmw_validate_full_topic_name+0x34>
 8014ece:	bf00      	nop
 8014ed0:	08019368 	.word	0x08019368

08014ed4 <rmw_validate_namespace_with_size>:
 8014ed4:	b340      	cbz	r0, 8014f28 <rmw_validate_namespace_with_size+0x54>
 8014ed6:	b570      	push	{r4, r5, r6, lr}
 8014ed8:	4614      	mov	r4, r2
 8014eda:	b0c2      	sub	sp, #264	@ 0x108
 8014edc:	b332      	cbz	r2, 8014f2c <rmw_validate_namespace_with_size+0x58>
 8014ede:	2901      	cmp	r1, #1
 8014ee0:	460d      	mov	r5, r1
 8014ee2:	461e      	mov	r6, r3
 8014ee4:	d102      	bne.n	8014eec <rmw_validate_namespace_with_size+0x18>
 8014ee6:	7803      	ldrb	r3, [r0, #0]
 8014ee8:	2b2f      	cmp	r3, #47	@ 0x2f
 8014eea:	d012      	beq.n	8014f12 <rmw_validate_namespace_with_size+0x3e>
 8014eec:	aa01      	add	r2, sp, #4
 8014eee:	4669      	mov	r1, sp
 8014ef0:	f7ff ff7a 	bl	8014de8 <rmw_validate_full_topic_name>
 8014ef4:	b978      	cbnz	r0, 8014f16 <rmw_validate_namespace_with_size+0x42>
 8014ef6:	9b00      	ldr	r3, [sp, #0]
 8014ef8:	b14b      	cbz	r3, 8014f0e <rmw_validate_namespace_with_size+0x3a>
 8014efa:	2b07      	cmp	r3, #7
 8014efc:	d007      	beq.n	8014f0e <rmw_validate_namespace_with_size+0x3a>
 8014efe:	1e5a      	subs	r2, r3, #1
 8014f00:	2a05      	cmp	r2, #5
 8014f02:	d82b      	bhi.n	8014f5c <rmw_validate_namespace_with_size+0x88>
 8014f04:	e8df f002 	tbb	[pc, r2]
 8014f08:	1e212427 	.word	0x1e212427
 8014f0c:	141b      	.short	0x141b
 8014f0e:	2df5      	cmp	r5, #245	@ 0xf5
 8014f10:	d803      	bhi.n	8014f1a <rmw_validate_namespace_with_size+0x46>
 8014f12:	2000      	movs	r0, #0
 8014f14:	6020      	str	r0, [r4, #0]
 8014f16:	b042      	add	sp, #264	@ 0x108
 8014f18:	bd70      	pop	{r4, r5, r6, pc}
 8014f1a:	2307      	movs	r3, #7
 8014f1c:	6023      	str	r3, [r4, #0]
 8014f1e:	2e00      	cmp	r6, #0
 8014f20:	d0f9      	beq.n	8014f16 <rmw_validate_namespace_with_size+0x42>
 8014f22:	23f4      	movs	r3, #244	@ 0xf4
 8014f24:	6033      	str	r3, [r6, #0]
 8014f26:	e7f6      	b.n	8014f16 <rmw_validate_namespace_with_size+0x42>
 8014f28:	200b      	movs	r0, #11
 8014f2a:	4770      	bx	lr
 8014f2c:	200b      	movs	r0, #11
 8014f2e:	e7f2      	b.n	8014f16 <rmw_validate_namespace_with_size+0x42>
 8014f30:	2306      	movs	r3, #6
 8014f32:	6023      	str	r3, [r4, #0]
 8014f34:	2e00      	cmp	r6, #0
 8014f36:	d0ee      	beq.n	8014f16 <rmw_validate_namespace_with_size+0x42>
 8014f38:	9b01      	ldr	r3, [sp, #4]
 8014f3a:	6033      	str	r3, [r6, #0]
 8014f3c:	e7eb      	b.n	8014f16 <rmw_validate_namespace_with_size+0x42>
 8014f3e:	2305      	movs	r3, #5
 8014f40:	6023      	str	r3, [r4, #0]
 8014f42:	e7f7      	b.n	8014f34 <rmw_validate_namespace_with_size+0x60>
 8014f44:	2304      	movs	r3, #4
 8014f46:	6023      	str	r3, [r4, #0]
 8014f48:	e7f4      	b.n	8014f34 <rmw_validate_namespace_with_size+0x60>
 8014f4a:	2303      	movs	r3, #3
 8014f4c:	6023      	str	r3, [r4, #0]
 8014f4e:	e7f1      	b.n	8014f34 <rmw_validate_namespace_with_size+0x60>
 8014f50:	2302      	movs	r3, #2
 8014f52:	6023      	str	r3, [r4, #0]
 8014f54:	e7ee      	b.n	8014f34 <rmw_validate_namespace_with_size+0x60>
 8014f56:	2301      	movs	r3, #1
 8014f58:	6023      	str	r3, [r4, #0]
 8014f5a:	e7eb      	b.n	8014f34 <rmw_validate_namespace_with_size+0x60>
 8014f5c:	4a03      	ldr	r2, [pc, #12]	@ (8014f6c <rmw_validate_namespace_with_size+0x98>)
 8014f5e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8014f62:	a802      	add	r0, sp, #8
 8014f64:	f7ff fd0e 	bl	8014984 <rcutils_snprintf>
 8014f68:	2001      	movs	r0, #1
 8014f6a:	e7d4      	b.n	8014f16 <rmw_validate_namespace_with_size+0x42>
 8014f6c:	08018f88 	.word	0x08018f88

08014f70 <rmw_validate_namespace>:
 8014f70:	b168      	cbz	r0, 8014f8e <rmw_validate_namespace+0x1e>
 8014f72:	b570      	push	{r4, r5, r6, lr}
 8014f74:	460d      	mov	r5, r1
 8014f76:	4616      	mov	r6, r2
 8014f78:	4604      	mov	r4, r0
 8014f7a:	f7eb f95b 	bl	8000234 <strlen>
 8014f7e:	4633      	mov	r3, r6
 8014f80:	4601      	mov	r1, r0
 8014f82:	462a      	mov	r2, r5
 8014f84:	4620      	mov	r0, r4
 8014f86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014f8a:	f7ff bfa3 	b.w	8014ed4 <rmw_validate_namespace_with_size>
 8014f8e:	200b      	movs	r0, #11
 8014f90:	4770      	bx	lr
 8014f92:	bf00      	nop

08014f94 <rmw_namespace_validation_result_string>:
 8014f94:	2807      	cmp	r0, #7
 8014f96:	bf9a      	itte	ls
 8014f98:	4b02      	ldrls	r3, [pc, #8]	@ (8014fa4 <rmw_namespace_validation_result_string+0x10>)
 8014f9a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8014f9e:	4802      	ldrhi	r0, [pc, #8]	@ (8014fa8 <rmw_namespace_validation_result_string+0x14>)
 8014fa0:	4770      	bx	lr
 8014fa2:	bf00      	nop
 8014fa4:	08019180 	.word	0x08019180
 8014fa8:	08018fd8 	.word	0x08018fd8

08014fac <rmw_validate_node_name>:
 8014fac:	2800      	cmp	r0, #0
 8014fae:	d03b      	beq.n	8015028 <rmw_validate_node_name+0x7c>
 8014fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fb4:	460d      	mov	r5, r1
 8014fb6:	2900      	cmp	r1, #0
 8014fb8:	d038      	beq.n	801502c <rmw_validate_node_name+0x80>
 8014fba:	4616      	mov	r6, r2
 8014fbc:	4604      	mov	r4, r0
 8014fbe:	f7eb f939 	bl	8000234 <strlen>
 8014fc2:	b1e0      	cbz	r0, 8014ffe <rmw_validate_node_name+0x52>
 8014fc4:	1e63      	subs	r3, r4, #1
 8014fc6:	eb03 0800 	add.w	r8, r3, r0
 8014fca:	f1c4 0101 	rsb	r1, r4, #1
 8014fce:	18cf      	adds	r7, r1, r3
 8014fd0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8014fd4:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8014fd8:	f02e 0c20 	bic.w	ip, lr, #32
 8014fdc:	2a09      	cmp	r2, #9
 8014fde:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8014fe2:	d914      	bls.n	801500e <rmw_validate_node_name+0x62>
 8014fe4:	f1bc 0f19 	cmp.w	ip, #25
 8014fe8:	d911      	bls.n	801500e <rmw_validate_node_name+0x62>
 8014fea:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8014fee:	d00e      	beq.n	801500e <rmw_validate_node_name+0x62>
 8014ff0:	2302      	movs	r3, #2
 8014ff2:	602b      	str	r3, [r5, #0]
 8014ff4:	b106      	cbz	r6, 8014ff8 <rmw_validate_node_name+0x4c>
 8014ff6:	6037      	str	r7, [r6, #0]
 8014ff8:	2000      	movs	r0, #0
 8014ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ffe:	2301      	movs	r3, #1
 8015000:	602b      	str	r3, [r5, #0]
 8015002:	2e00      	cmp	r6, #0
 8015004:	d0f8      	beq.n	8014ff8 <rmw_validate_node_name+0x4c>
 8015006:	2000      	movs	r0, #0
 8015008:	6030      	str	r0, [r6, #0]
 801500a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801500e:	4543      	cmp	r3, r8
 8015010:	d1dd      	bne.n	8014fce <rmw_validate_node_name+0x22>
 8015012:	7822      	ldrb	r2, [r4, #0]
 8015014:	4b0d      	ldr	r3, [pc, #52]	@ (801504c <rmw_validate_node_name+0xa0>)
 8015016:	5cd3      	ldrb	r3, [r2, r3]
 8015018:	f013 0304 	ands.w	r3, r3, #4
 801501c:	d110      	bne.n	8015040 <rmw_validate_node_name+0x94>
 801501e:	28ff      	cmp	r0, #255	@ 0xff
 8015020:	d806      	bhi.n	8015030 <rmw_validate_node_name+0x84>
 8015022:	602b      	str	r3, [r5, #0]
 8015024:	4618      	mov	r0, r3
 8015026:	e7e8      	b.n	8014ffa <rmw_validate_node_name+0x4e>
 8015028:	200b      	movs	r0, #11
 801502a:	4770      	bx	lr
 801502c:	200b      	movs	r0, #11
 801502e:	e7e4      	b.n	8014ffa <rmw_validate_node_name+0x4e>
 8015030:	2204      	movs	r2, #4
 8015032:	602a      	str	r2, [r5, #0]
 8015034:	2e00      	cmp	r6, #0
 8015036:	d0df      	beq.n	8014ff8 <rmw_validate_node_name+0x4c>
 8015038:	22fe      	movs	r2, #254	@ 0xfe
 801503a:	6032      	str	r2, [r6, #0]
 801503c:	4618      	mov	r0, r3
 801503e:	e7dc      	b.n	8014ffa <rmw_validate_node_name+0x4e>
 8015040:	2303      	movs	r3, #3
 8015042:	602b      	str	r3, [r5, #0]
 8015044:	2e00      	cmp	r6, #0
 8015046:	d1de      	bne.n	8015006 <rmw_validate_node_name+0x5a>
 8015048:	e7d6      	b.n	8014ff8 <rmw_validate_node_name+0x4c>
 801504a:	bf00      	nop
 801504c:	08019368 	.word	0x08019368

08015050 <rmw_node_name_validation_result_string>:
 8015050:	2804      	cmp	r0, #4
 8015052:	bf9a      	itte	ls
 8015054:	4b02      	ldrls	r3, [pc, #8]	@ (8015060 <rmw_node_name_validation_result_string+0x10>)
 8015056:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801505a:	4802      	ldrhi	r0, [pc, #8]	@ (8015064 <rmw_node_name_validation_result_string+0x14>)
 801505c:	4770      	bx	lr
 801505e:	bf00      	nop
 8015060:	0801928c 	.word	0x0801928c
 8015064:	080191a0 	.word	0x080191a0

08015068 <on_status>:
 8015068:	b082      	sub	sp, #8
 801506a:	b002      	add	sp, #8
 801506c:	4770      	bx	lr
 801506e:	bf00      	nop

08015070 <on_topic>:
 8015070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015074:	4a22      	ldr	r2, [pc, #136]	@ (8015100 <on_topic+0x90>)
 8015076:	b094      	sub	sp, #80	@ 0x50
 8015078:	6812      	ldr	r2, [r2, #0]
 801507a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801507c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015080:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8015084:	b3c2      	cbz	r2, 80150f8 <on_topic+0x88>
 8015086:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801508a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801508e:	e001      	b.n	8015094 <on_topic+0x24>
 8015090:	6852      	ldr	r2, [r2, #4]
 8015092:	b38a      	cbz	r2, 80150f8 <on_topic+0x88>
 8015094:	6894      	ldr	r4, [r2, #8]
 8015096:	8aa3      	ldrh	r3, [r4, #20]
 8015098:	428b      	cmp	r3, r1
 801509a:	d1f9      	bne.n	8015090 <on_topic+0x20>
 801509c:	7da3      	ldrb	r3, [r4, #22]
 801509e:	4283      	cmp	r3, r0
 80150a0:	d1f6      	bne.n	8015090 <on_topic+0x20>
 80150a2:	2248      	movs	r2, #72	@ 0x48
 80150a4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80150a8:	4668      	mov	r0, sp
 80150aa:	f002 fc48 	bl	801793e <memcpy>
 80150ae:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80150b2:	cb0c      	ldmia	r3, {r2, r3}
 80150b4:	4620      	mov	r0, r4
 80150b6:	f7f8 ff8f 	bl	800dfd8 <rmw_uxrce_get_static_input_buffer_for_entity>
 80150ba:	4607      	mov	r7, r0
 80150bc:	b1e0      	cbz	r0, 80150f8 <on_topic+0x88>
 80150be:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80150c2:	4632      	mov	r2, r6
 80150c4:	4628      	mov	r0, r5
 80150c6:	f108 0110 	add.w	r1, r8, #16
 80150ca:	f000 fd99 	bl	8015c00 <ucdr_deserialize_array_uint8_t>
 80150ce:	b930      	cbnz	r0, 80150de <on_topic+0x6e>
 80150d0:	480c      	ldr	r0, [pc, #48]	@ (8015104 <on_topic+0x94>)
 80150d2:	4639      	mov	r1, r7
 80150d4:	b014      	add	sp, #80	@ 0x50
 80150d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80150da:	f000 b8bd 	b.w	8015258 <put_memory>
 80150de:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80150e2:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 80150e6:	f7f8 fd75 	bl	800dbd4 <rmw_uros_epoch_nanos>
 80150ea:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80150ee:	2305      	movs	r3, #5
 80150f0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80150f4:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80150f8:	b014      	add	sp, #80	@ 0x50
 80150fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150fe:	bf00      	nop
 8015100:	2000ac3c 	.word	0x2000ac3c
 8015104:	2000ac2c 	.word	0x2000ac2c

08015108 <on_request>:
 8015108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801510c:	4823      	ldr	r0, [pc, #140]	@ (801519c <on_request+0x94>)
 801510e:	b094      	sub	sp, #80	@ 0x50
 8015110:	6800      	ldr	r0, [r0, #0]
 8015112:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8015114:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015118:	9113      	str	r1, [sp, #76]	@ 0x4c
 801511a:	2800      	cmp	r0, #0
 801511c:	d03b      	beq.n	8015196 <on_request+0x8e>
 801511e:	461d      	mov	r5, r3
 8015120:	e001      	b.n	8015126 <on_request+0x1e>
 8015122:	6840      	ldr	r0, [r0, #4]
 8015124:	b3b8      	cbz	r0, 8015196 <on_request+0x8e>
 8015126:	6884      	ldr	r4, [r0, #8]
 8015128:	8b21      	ldrh	r1, [r4, #24]
 801512a:	4291      	cmp	r1, r2
 801512c:	d1f9      	bne.n	8015122 <on_request+0x1a>
 801512e:	2248      	movs	r2, #72	@ 0x48
 8015130:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8015134:	4668      	mov	r0, sp
 8015136:	f002 fc02 	bl	801793e <memcpy>
 801513a:	f104 0320 	add.w	r3, r4, #32
 801513e:	cb0c      	ldmia	r3, {r2, r3}
 8015140:	4620      	mov	r0, r4
 8015142:	f7f8 ff49 	bl	800dfd8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015146:	4680      	mov	r8, r0
 8015148:	b328      	cbz	r0, 8015196 <on_request+0x8e>
 801514a:	4638      	mov	r0, r7
 801514c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8015150:	4632      	mov	r2, r6
 8015152:	f107 0110 	add.w	r1, r7, #16
 8015156:	f000 fd53 	bl	8015c00 <ucdr_deserialize_array_uint8_t>
 801515a:	b930      	cbnz	r0, 801516a <on_request+0x62>
 801515c:	4810      	ldr	r0, [pc, #64]	@ (80151a0 <on_request+0x98>)
 801515e:	4641      	mov	r1, r8
 8015160:	b014      	add	sp, #80	@ 0x50
 8015162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015166:	f000 b877 	b.w	8015258 <put_memory>
 801516a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801516c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8015170:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8015174:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8015178:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801517c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015180:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015184:	f7f8 fd26 	bl	800dbd4 <rmw_uros_epoch_nanos>
 8015188:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801518c:	2303      	movs	r3, #3
 801518e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015192:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8015196:	b014      	add	sp, #80	@ 0x50
 8015198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801519c:	2000ac0c 	.word	0x2000ac0c
 80151a0:	2000ac2c 	.word	0x2000ac2c

080151a4 <on_reply>:
 80151a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151a8:	4821      	ldr	r0, [pc, #132]	@ (8015230 <on_reply+0x8c>)
 80151aa:	b094      	sub	sp, #80	@ 0x50
 80151ac:	6800      	ldr	r0, [r0, #0]
 80151ae:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80151b0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80151b4:	9113      	str	r1, [sp, #76]	@ 0x4c
 80151b6:	b3b8      	cbz	r0, 8015228 <on_reply+0x84>
 80151b8:	461d      	mov	r5, r3
 80151ba:	e001      	b.n	80151c0 <on_reply+0x1c>
 80151bc:	6840      	ldr	r0, [r0, #4]
 80151be:	b398      	cbz	r0, 8015228 <on_reply+0x84>
 80151c0:	6884      	ldr	r4, [r0, #8]
 80151c2:	8b21      	ldrh	r1, [r4, #24]
 80151c4:	4291      	cmp	r1, r2
 80151c6:	d1f9      	bne.n	80151bc <on_reply+0x18>
 80151c8:	2248      	movs	r2, #72	@ 0x48
 80151ca:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80151ce:	4668      	mov	r0, sp
 80151d0:	f002 fbb5 	bl	801793e <memcpy>
 80151d4:	f104 0320 	add.w	r3, r4, #32
 80151d8:	cb0c      	ldmia	r3, {r2, r3}
 80151da:	4620      	mov	r0, r4
 80151dc:	f7f8 fefc 	bl	800dfd8 <rmw_uxrce_get_static_input_buffer_for_entity>
 80151e0:	4680      	mov	r8, r0
 80151e2:	b308      	cbz	r0, 8015228 <on_reply+0x84>
 80151e4:	4638      	mov	r0, r7
 80151e6:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80151ea:	4632      	mov	r2, r6
 80151ec:	f107 0110 	add.w	r1, r7, #16
 80151f0:	f000 fd06 	bl	8015c00 <ucdr_deserialize_array_uint8_t>
 80151f4:	b930      	cbnz	r0, 8015204 <on_reply+0x60>
 80151f6:	480f      	ldr	r0, [pc, #60]	@ (8015234 <on_reply+0x90>)
 80151f8:	4641      	mov	r1, r8
 80151fa:	b014      	add	sp, #80	@ 0x50
 80151fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015200:	f000 b82a 	b.w	8015258 <put_memory>
 8015204:	2200      	movs	r2, #0
 8015206:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801520a:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801520e:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8015212:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8015216:	f7f8 fcdd 	bl	800dbd4 <rmw_uros_epoch_nanos>
 801521a:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801521e:	2304      	movs	r3, #4
 8015220:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015224:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8015228:	b014      	add	sp, #80	@ 0x50
 801522a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801522e:	bf00      	nop
 8015230:	2000631c 	.word	0x2000631c
 8015234:	2000ac2c 	.word	0x2000ac2c

08015238 <get_memory>:
 8015238:	4603      	mov	r3, r0
 801523a:	6840      	ldr	r0, [r0, #4]
 801523c:	b158      	cbz	r0, 8015256 <get_memory+0x1e>
 801523e:	6842      	ldr	r2, [r0, #4]
 8015240:	605a      	str	r2, [r3, #4]
 8015242:	b10a      	cbz	r2, 8015248 <get_memory+0x10>
 8015244:	2100      	movs	r1, #0
 8015246:	6011      	str	r1, [r2, #0]
 8015248:	681a      	ldr	r2, [r3, #0]
 801524a:	6042      	str	r2, [r0, #4]
 801524c:	b102      	cbz	r2, 8015250 <get_memory+0x18>
 801524e:	6010      	str	r0, [r2, #0]
 8015250:	2200      	movs	r2, #0
 8015252:	6002      	str	r2, [r0, #0]
 8015254:	6018      	str	r0, [r3, #0]
 8015256:	4770      	bx	lr

08015258 <put_memory>:
 8015258:	680b      	ldr	r3, [r1, #0]
 801525a:	b10b      	cbz	r3, 8015260 <put_memory+0x8>
 801525c:	684a      	ldr	r2, [r1, #4]
 801525e:	605a      	str	r2, [r3, #4]
 8015260:	684a      	ldr	r2, [r1, #4]
 8015262:	b102      	cbz	r2, 8015266 <put_memory+0xe>
 8015264:	6013      	str	r3, [r2, #0]
 8015266:	6803      	ldr	r3, [r0, #0]
 8015268:	428b      	cmp	r3, r1
 801526a:	6843      	ldr	r3, [r0, #4]
 801526c:	bf08      	it	eq
 801526e:	6002      	streq	r2, [r0, #0]
 8015270:	604b      	str	r3, [r1, #4]
 8015272:	b103      	cbz	r3, 8015276 <put_memory+0x1e>
 8015274:	6019      	str	r1, [r3, #0]
 8015276:	2300      	movs	r3, #0
 8015278:	600b      	str	r3, [r1, #0]
 801527a:	6041      	str	r1, [r0, #4]
 801527c:	4770      	bx	lr
 801527e:	bf00      	nop

08015280 <rmw_destroy_client>:
 8015280:	b570      	push	{r4, r5, r6, lr}
 8015282:	b128      	cbz	r0, 8015290 <rmw_destroy_client+0x10>
 8015284:	4604      	mov	r4, r0
 8015286:	6800      	ldr	r0, [r0, #0]
 8015288:	460d      	mov	r5, r1
 801528a:	f7f9 f81b 	bl	800e2c4 <is_uxrce_rmw_identifier_valid>
 801528e:	b910      	cbnz	r0, 8015296 <rmw_destroy_client+0x16>
 8015290:	2401      	movs	r4, #1
 8015292:	4620      	mov	r0, r4
 8015294:	bd70      	pop	{r4, r5, r6, pc}
 8015296:	6863      	ldr	r3, [r4, #4]
 8015298:	2b00      	cmp	r3, #0
 801529a:	d0f9      	beq.n	8015290 <rmw_destroy_client+0x10>
 801529c:	2d00      	cmp	r5, #0
 801529e:	d0f7      	beq.n	8015290 <rmw_destroy_client+0x10>
 80152a0:	6828      	ldr	r0, [r5, #0]
 80152a2:	f7f9 f80f 	bl	800e2c4 <is_uxrce_rmw_identifier_valid>
 80152a6:	2800      	cmp	r0, #0
 80152a8:	d0f2      	beq.n	8015290 <rmw_destroy_client+0x10>
 80152aa:	686e      	ldr	r6, [r5, #4]
 80152ac:	2e00      	cmp	r6, #0
 80152ae:	d0ef      	beq.n	8015290 <rmw_destroy_client+0x10>
 80152b0:	6864      	ldr	r4, [r4, #4]
 80152b2:	6932      	ldr	r2, [r6, #16]
 80152b4:	6920      	ldr	r0, [r4, #16]
 80152b6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80152ba:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80152be:	6819      	ldr	r1, [r3, #0]
 80152c0:	f7f9 fa9a 	bl	800e7f8 <uxr_buffer_cancel_data>
 80152c4:	4602      	mov	r2, r0
 80152c6:	6920      	ldr	r0, [r4, #16]
 80152c8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80152cc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80152d0:	f7f8 ff78 	bl	800e1c4 <run_xrce_session>
 80152d4:	6920      	ldr	r0, [r4, #16]
 80152d6:	6932      	ldr	r2, [r6, #16]
 80152d8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80152dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80152e0:	6819      	ldr	r1, [r3, #0]
 80152e2:	f7f9 f83d 	bl	800e360 <uxr_buffer_delete_entity>
 80152e6:	4602      	mov	r2, r0
 80152e8:	6920      	ldr	r0, [r4, #16]
 80152ea:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80152ee:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80152f2:	f7f8 ff67 	bl	800e1c4 <run_xrce_session>
 80152f6:	2800      	cmp	r0, #0
 80152f8:	4628      	mov	r0, r5
 80152fa:	bf14      	ite	ne
 80152fc:	2400      	movne	r4, #0
 80152fe:	2402      	moveq	r4, #2
 8015300:	f7f8 fe48 	bl	800df94 <rmw_uxrce_fini_client_memory>
 8015304:	e7c5      	b.n	8015292 <rmw_destroy_client+0x12>
 8015306:	bf00      	nop

08015308 <rmw_get_implementation_identifier>:
 8015308:	4b01      	ldr	r3, [pc, #4]	@ (8015310 <rmw_get_implementation_identifier+0x8>)
 801530a:	6818      	ldr	r0, [r3, #0]
 801530c:	4770      	bx	lr
 801530e:	bf00      	nop
 8015310:	080192b8 	.word	0x080192b8

08015314 <create_topic>:
 8015314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015318:	4605      	mov	r5, r0
 801531a:	b084      	sub	sp, #16
 801531c:	4822      	ldr	r0, [pc, #136]	@ (80153a8 <create_topic+0x94>)
 801531e:	460f      	mov	r7, r1
 8015320:	4616      	mov	r6, r2
 8015322:	f7ff ff89 	bl	8015238 <get_memory>
 8015326:	4604      	mov	r4, r0
 8015328:	2800      	cmp	r0, #0
 801532a:	d039      	beq.n	80153a0 <create_topic+0x8c>
 801532c:	692b      	ldr	r3, [r5, #16]
 801532e:	6884      	ldr	r4, [r0, #8]
 8015330:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 80153b0 <create_topic+0x9c>
 8015334:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015338:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801533c:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8015340:	1c42      	adds	r2, r0, #1
 8015342:	2102      	movs	r1, #2
 8015344:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8015348:	f7f9 fa26 	bl	800e798 <uxr_object_id>
 801534c:	223c      	movs	r2, #60	@ 0x3c
 801534e:	6120      	str	r0, [r4, #16]
 8015350:	4641      	mov	r1, r8
 8015352:	4638      	mov	r0, r7
 8015354:	f7f8 ff9c 	bl	800e290 <generate_topic_name>
 8015358:	b1f0      	cbz	r0, 8015398 <create_topic+0x84>
 801535a:	4f14      	ldr	r7, [pc, #80]	@ (80153ac <create_topic+0x98>)
 801535c:	4630      	mov	r0, r6
 801535e:	2264      	movs	r2, #100	@ 0x64
 8015360:	4639      	mov	r1, r7
 8015362:	f7f8 ff65 	bl	800e230 <generate_type_name>
 8015366:	b1b8      	cbz	r0, 8015398 <create_topic+0x84>
 8015368:	6928      	ldr	r0, [r5, #16]
 801536a:	2306      	movs	r3, #6
 801536c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8015370:	f8cd 8000 	str.w	r8, [sp]
 8015374:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8015378:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801537c:	6811      	ldr	r1, [r2, #0]
 801537e:	696b      	ldr	r3, [r5, #20]
 8015380:	6922      	ldr	r2, [r4, #16]
 8015382:	f7f9 f86b 	bl	800e45c <uxr_buffer_create_topic_bin>
 8015386:	4602      	mov	r2, r0
 8015388:	6928      	ldr	r0, [r5, #16]
 801538a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801538e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015392:	f7f8 ff17 	bl	800e1c4 <run_xrce_session>
 8015396:	b918      	cbnz	r0, 80153a0 <create_topic+0x8c>
 8015398:	4620      	mov	r0, r4
 801539a:	f7f8 fe11 	bl	800dfc0 <rmw_uxrce_fini_topic_memory>
 801539e:	2400      	movs	r4, #0
 80153a0:	4620      	mov	r0, r4
 80153a2:	b004      	add	sp, #16
 80153a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153a8:	2000ac4c 	.word	0x2000ac4c
 80153ac:	2000accc 	.word	0x2000accc
 80153b0:	2000ac90 	.word	0x2000ac90

080153b4 <destroy_topic>:
 80153b4:	b538      	push	{r3, r4, r5, lr}
 80153b6:	6985      	ldr	r5, [r0, #24]
 80153b8:	b1d5      	cbz	r5, 80153f0 <destroy_topic+0x3c>
 80153ba:	4604      	mov	r4, r0
 80153bc:	6928      	ldr	r0, [r5, #16]
 80153be:	6922      	ldr	r2, [r4, #16]
 80153c0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80153c4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80153c8:	6819      	ldr	r1, [r3, #0]
 80153ca:	f7f8 ffc9 	bl	800e360 <uxr_buffer_delete_entity>
 80153ce:	4602      	mov	r2, r0
 80153d0:	6928      	ldr	r0, [r5, #16]
 80153d2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80153d6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80153da:	f7f8 fef3 	bl	800e1c4 <run_xrce_session>
 80153de:	2800      	cmp	r0, #0
 80153e0:	4620      	mov	r0, r4
 80153e2:	bf14      	ite	ne
 80153e4:	2400      	movne	r4, #0
 80153e6:	2402      	moveq	r4, #2
 80153e8:	f7f8 fdea 	bl	800dfc0 <rmw_uxrce_fini_topic_memory>
 80153ec:	4620      	mov	r0, r4
 80153ee:	bd38      	pop	{r3, r4, r5, pc}
 80153f0:	2401      	movs	r4, #1
 80153f2:	4620      	mov	r0, r4
 80153f4:	bd38      	pop	{r3, r4, r5, pc}
 80153f6:	bf00      	nop

080153f8 <rmw_send_request>:
 80153f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80153fc:	4604      	mov	r4, r0
 80153fe:	6800      	ldr	r0, [r0, #0]
 8015400:	b08b      	sub	sp, #44	@ 0x2c
 8015402:	460e      	mov	r6, r1
 8015404:	4615      	mov	r5, r2
 8015406:	b128      	cbz	r0, 8015414 <rmw_send_request+0x1c>
 8015408:	4b21      	ldr	r3, [pc, #132]	@ (8015490 <rmw_send_request+0x98>)
 801540a:	6819      	ldr	r1, [r3, #0]
 801540c:	f7ea ff08 	bl	8000220 <strcmp>
 8015410:	2800      	cmp	r0, #0
 8015412:	d139      	bne.n	8015488 <rmw_send_request+0x90>
 8015414:	6864      	ldr	r4, [r4, #4]
 8015416:	6963      	ldr	r3, [r4, #20]
 8015418:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 801541c:	689b      	ldr	r3, [r3, #8]
 801541e:	4798      	blx	r3
 8015420:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8015424:	4630      	mov	r0, r6
 8015426:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801542a:	4798      	blx	r3
 801542c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015430:	9000      	str	r0, [sp, #0]
 8015432:	6922      	ldr	r2, [r4, #16]
 8015434:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8015436:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801543a:	ab02      	add	r3, sp, #8
 801543c:	f7fb fa82 	bl	8010944 <uxr_prepare_output_stream>
 8015440:	2700      	movs	r7, #0
 8015442:	6028      	str	r0, [r5, #0]
 8015444:	606f      	str	r7, [r5, #4]
 8015446:	b198      	cbz	r0, 8015470 <rmw_send_request+0x78>
 8015448:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801544c:	a902      	add	r1, sp, #8
 801544e:	4630      	mov	r0, r6
 8015450:	4798      	blx	r3
 8015452:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8015456:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801545a:	2b01      	cmp	r3, #1
 801545c:	d00c      	beq.n	8015478 <rmw_send_request+0x80>
 801545e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8015460:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015464:	f7f9 ff9c 	bl	800f3a0 <uxr_run_session_until_confirm_delivery>
 8015468:	4638      	mov	r0, r7
 801546a:	b00b      	add	sp, #44	@ 0x2c
 801546c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015470:	2001      	movs	r0, #1
 8015472:	b00b      	add	sp, #44	@ 0x2c
 8015474:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015478:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801547c:	f7f9 fbd0 	bl	800ec20 <uxr_flash_output_streams>
 8015480:	4638      	mov	r0, r7
 8015482:	b00b      	add	sp, #44	@ 0x2c
 8015484:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015488:	200c      	movs	r0, #12
 801548a:	b00b      	add	sp, #44	@ 0x2c
 801548c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015490:	080192b8 	.word	0x080192b8

08015494 <rmw_take_request>:
 8015494:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015498:	4605      	mov	r5, r0
 801549a:	6800      	ldr	r0, [r0, #0]
 801549c:	b089      	sub	sp, #36	@ 0x24
 801549e:	460c      	mov	r4, r1
 80154a0:	4690      	mov	r8, r2
 80154a2:	461e      	mov	r6, r3
 80154a4:	b128      	cbz	r0, 80154b2 <rmw_take_request+0x1e>
 80154a6:	4b28      	ldr	r3, [pc, #160]	@ (8015548 <rmw_take_request+0xb4>)
 80154a8:	6819      	ldr	r1, [r3, #0]
 80154aa:	f7ea feb9 	bl	8000220 <strcmp>
 80154ae:	2800      	cmp	r0, #0
 80154b0:	d146      	bne.n	8015540 <rmw_take_request+0xac>
 80154b2:	b10e      	cbz	r6, 80154b8 <rmw_take_request+0x24>
 80154b4:	2300      	movs	r3, #0
 80154b6:	7033      	strb	r3, [r6, #0]
 80154b8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80154bc:	f7f8 fe04 	bl	800e0c8 <rmw_uxrce_clean_expired_static_input_buffer>
 80154c0:	4648      	mov	r0, r9
 80154c2:	f7f8 fdd9 	bl	800e078 <rmw_uxrce_find_static_input_buffer_by_owner>
 80154c6:	4607      	mov	r7, r0
 80154c8:	b3b0      	cbz	r0, 8015538 <rmw_take_request+0xa4>
 80154ca:	6885      	ldr	r5, [r0, #8]
 80154cc:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 80154d0:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 80154d4:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80154d8:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 80154dc:	7423      	strb	r3, [r4, #16]
 80154de:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 80154e2:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 80154e6:	74e2      	strb	r2, [r4, #19]
 80154e8:	f8a4 3011 	strh.w	r3, [r4, #17]
 80154ec:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80154f0:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 80154f4:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80154f8:	61e1      	str	r1, [r4, #28]
 80154fa:	6162      	str	r2, [r4, #20]
 80154fc:	61a3      	str	r3, [r4, #24]
 80154fe:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015502:	689b      	ldr	r3, [r3, #8]
 8015504:	4798      	blx	r3
 8015506:	6844      	ldr	r4, [r0, #4]
 8015508:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801550c:	f105 0110 	add.w	r1, r5, #16
 8015510:	4668      	mov	r0, sp
 8015512:	f7f6 fb13 	bl	800bb3c <ucdr_init_buffer>
 8015516:	68e3      	ldr	r3, [r4, #12]
 8015518:	4641      	mov	r1, r8
 801551a:	4668      	mov	r0, sp
 801551c:	4798      	blx	r3
 801551e:	4639      	mov	r1, r7
 8015520:	4604      	mov	r4, r0
 8015522:	480a      	ldr	r0, [pc, #40]	@ (801554c <rmw_take_request+0xb8>)
 8015524:	f7ff fe98 	bl	8015258 <put_memory>
 8015528:	b106      	cbz	r6, 801552c <rmw_take_request+0x98>
 801552a:	7034      	strb	r4, [r6, #0]
 801552c:	f084 0001 	eor.w	r0, r4, #1
 8015530:	b2c0      	uxtb	r0, r0
 8015532:	b009      	add	sp, #36	@ 0x24
 8015534:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015538:	2001      	movs	r0, #1
 801553a:	b009      	add	sp, #36	@ 0x24
 801553c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015540:	200c      	movs	r0, #12
 8015542:	b009      	add	sp, #36	@ 0x24
 8015544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015548:	080192b8 	.word	0x080192b8
 801554c:	2000ac2c 	.word	0x2000ac2c

08015550 <rmw_send_response>:
 8015550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015552:	4605      	mov	r5, r0
 8015554:	6800      	ldr	r0, [r0, #0]
 8015556:	b091      	sub	sp, #68	@ 0x44
 8015558:	460c      	mov	r4, r1
 801555a:	4616      	mov	r6, r2
 801555c:	b128      	cbz	r0, 801556a <rmw_send_response+0x1a>
 801555e:	4b29      	ldr	r3, [pc, #164]	@ (8015604 <rmw_send_response+0xb4>)
 8015560:	6819      	ldr	r1, [r3, #0]
 8015562:	f7ea fe5d 	bl	8000220 <strcmp>
 8015566:	2800      	cmp	r0, #0
 8015568:	d141      	bne.n	80155ee <rmw_send_response+0x9e>
 801556a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801556e:	9306      	str	r3, [sp, #24]
 8015570:	4623      	mov	r3, r4
 8015572:	9207      	str	r2, [sp, #28]
 8015574:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015578:	686d      	ldr	r5, [r5, #4]
 801557a:	789b      	ldrb	r3, [r3, #2]
 801557c:	68a1      	ldr	r1, [r4, #8]
 801557e:	f88d 2017 	strb.w	r2, [sp, #23]
 8015582:	f88d 3016 	strb.w	r3, [sp, #22]
 8015586:	68e2      	ldr	r2, [r4, #12]
 8015588:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801558c:	6860      	ldr	r0, [r4, #4]
 801558e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015592:	ab02      	add	r3, sp, #8
 8015594:	c307      	stmia	r3!, {r0, r1, r2}
 8015596:	696b      	ldr	r3, [r5, #20]
 8015598:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801559a:	68db      	ldr	r3, [r3, #12]
 801559c:	4798      	blx	r3
 801559e:	6844      	ldr	r4, [r0, #4]
 80155a0:	4630      	mov	r0, r6
 80155a2:	6923      	ldr	r3, [r4, #16]
 80155a4:	4798      	blx	r3
 80155a6:	f100 0318 	add.w	r3, r0, #24
 80155aa:	6938      	ldr	r0, [r7, #16]
 80155ac:	9300      	str	r3, [sp, #0]
 80155ae:	692a      	ldr	r2, [r5, #16]
 80155b0:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80155b2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80155b6:	ab08      	add	r3, sp, #32
 80155b8:	f7fb f9c4 	bl	8010944 <uxr_prepare_output_stream>
 80155bc:	b910      	cbnz	r0, 80155c4 <rmw_send_response+0x74>
 80155be:	2001      	movs	r0, #1
 80155c0:	b011      	add	sp, #68	@ 0x44
 80155c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155c4:	a902      	add	r1, sp, #8
 80155c6:	a808      	add	r0, sp, #32
 80155c8:	f7fc fa16 	bl	80119f8 <uxr_serialize_SampleIdentity>
 80155cc:	68a3      	ldr	r3, [r4, #8]
 80155ce:	a908      	add	r1, sp, #32
 80155d0:	4630      	mov	r0, r6
 80155d2:	4798      	blx	r3
 80155d4:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 80155d8:	6938      	ldr	r0, [r7, #16]
 80155da:	2b01      	cmp	r3, #1
 80155dc:	d00a      	beq.n	80155f4 <rmw_send_response+0xa4>
 80155de:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 80155e0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80155e4:	f7f9 fedc 	bl	800f3a0 <uxr_run_session_until_confirm_delivery>
 80155e8:	2000      	movs	r0, #0
 80155ea:	b011      	add	sp, #68	@ 0x44
 80155ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155ee:	200c      	movs	r0, #12
 80155f0:	b011      	add	sp, #68	@ 0x44
 80155f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80155f8:	f7f9 fb12 	bl	800ec20 <uxr_flash_output_streams>
 80155fc:	2000      	movs	r0, #0
 80155fe:	b011      	add	sp, #68	@ 0x44
 8015600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015602:	bf00      	nop
 8015604:	080192b8 	.word	0x080192b8

08015608 <rmw_take_response>:
 8015608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801560c:	4604      	mov	r4, r0
 801560e:	6800      	ldr	r0, [r0, #0]
 8015610:	b088      	sub	sp, #32
 8015612:	4688      	mov	r8, r1
 8015614:	4617      	mov	r7, r2
 8015616:	461d      	mov	r5, r3
 8015618:	b120      	cbz	r0, 8015624 <rmw_take_response+0x1c>
 801561a:	4b1e      	ldr	r3, [pc, #120]	@ (8015694 <rmw_take_response+0x8c>)
 801561c:	6819      	ldr	r1, [r3, #0]
 801561e:	f7ea fdff 	bl	8000220 <strcmp>
 8015622:	bb78      	cbnz	r0, 8015684 <rmw_take_response+0x7c>
 8015624:	b10d      	cbz	r5, 801562a <rmw_take_response+0x22>
 8015626:	2300      	movs	r3, #0
 8015628:	702b      	strb	r3, [r5, #0]
 801562a:	6864      	ldr	r4, [r4, #4]
 801562c:	f7f8 fd4c 	bl	800e0c8 <rmw_uxrce_clean_expired_static_input_buffer>
 8015630:	4620      	mov	r0, r4
 8015632:	f7f8 fd21 	bl	800e078 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015636:	4606      	mov	r6, r0
 8015638:	b340      	cbz	r0, 801568c <rmw_take_response+0x84>
 801563a:	6963      	ldr	r3, [r4, #20]
 801563c:	6884      	ldr	r4, [r0, #8]
 801563e:	68db      	ldr	r3, [r3, #12]
 8015640:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8015644:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8015648:	e9c8 0108 	strd	r0, r1, [r8, #32]
 801564c:	4798      	blx	r3
 801564e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8015652:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8015656:	f104 0110 	add.w	r1, r4, #16
 801565a:	4668      	mov	r0, sp
 801565c:	f7f6 fa6e 	bl	800bb3c <ucdr_init_buffer>
 8015660:	4639      	mov	r1, r7
 8015662:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015666:	4668      	mov	r0, sp
 8015668:	4798      	blx	r3
 801566a:	4631      	mov	r1, r6
 801566c:	4604      	mov	r4, r0
 801566e:	480a      	ldr	r0, [pc, #40]	@ (8015698 <rmw_take_response+0x90>)
 8015670:	f7ff fdf2 	bl	8015258 <put_memory>
 8015674:	b105      	cbz	r5, 8015678 <rmw_take_response+0x70>
 8015676:	702c      	strb	r4, [r5, #0]
 8015678:	f084 0001 	eor.w	r0, r4, #1
 801567c:	b2c0      	uxtb	r0, r0
 801567e:	b008      	add	sp, #32
 8015680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015684:	200c      	movs	r0, #12
 8015686:	b008      	add	sp, #32
 8015688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801568c:	2001      	movs	r0, #1
 801568e:	b008      	add	sp, #32
 8015690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015694:	080192b8 	.word	0x080192b8
 8015698:	2000ac2c 	.word	0x2000ac2c

0801569c <rmw_take_with_info>:
 801569c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801569e:	4604      	mov	r4, r0
 80156a0:	6800      	ldr	r0, [r0, #0]
 80156a2:	b089      	sub	sp, #36	@ 0x24
 80156a4:	460f      	mov	r7, r1
 80156a6:	4615      	mov	r5, r2
 80156a8:	b128      	cbz	r0, 80156b6 <rmw_take_with_info+0x1a>
 80156aa:	4b24      	ldr	r3, [pc, #144]	@ (801573c <rmw_take_with_info+0xa0>)
 80156ac:	6819      	ldr	r1, [r3, #0]
 80156ae:	f7ea fdb7 	bl	8000220 <strcmp>
 80156b2:	2800      	cmp	r0, #0
 80156b4:	d13e      	bne.n	8015734 <rmw_take_with_info+0x98>
 80156b6:	b305      	cbz	r5, 80156fa <rmw_take_with_info+0x5e>
 80156b8:	6864      	ldr	r4, [r4, #4]
 80156ba:	2300      	movs	r3, #0
 80156bc:	702b      	strb	r3, [r5, #0]
 80156be:	f7f8 fd03 	bl	800e0c8 <rmw_uxrce_clean_expired_static_input_buffer>
 80156c2:	4620      	mov	r0, r4
 80156c4:	f7f8 fcd8 	bl	800e078 <rmw_uxrce_find_static_input_buffer_by_owner>
 80156c8:	4606      	mov	r6, r0
 80156ca:	b1f0      	cbz	r0, 801570a <rmw_take_with_info+0x6e>
 80156cc:	6881      	ldr	r1, [r0, #8]
 80156ce:	4668      	mov	r0, sp
 80156d0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80156d4:	3110      	adds	r1, #16
 80156d6:	f7f6 fa31 	bl	800bb3c <ucdr_init_buffer>
 80156da:	69a3      	ldr	r3, [r4, #24]
 80156dc:	4639      	mov	r1, r7
 80156de:	68db      	ldr	r3, [r3, #12]
 80156e0:	4668      	mov	r0, sp
 80156e2:	4798      	blx	r3
 80156e4:	4631      	mov	r1, r6
 80156e6:	4604      	mov	r4, r0
 80156e8:	4815      	ldr	r0, [pc, #84]	@ (8015740 <rmw_take_with_info+0xa4>)
 80156ea:	f7ff fdb5 	bl	8015258 <put_memory>
 80156ee:	702c      	strb	r4, [r5, #0]
 80156f0:	f084 0001 	eor.w	r0, r4, #1
 80156f4:	b2c0      	uxtb	r0, r0
 80156f6:	b009      	add	sp, #36	@ 0x24
 80156f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80156fa:	6864      	ldr	r4, [r4, #4]
 80156fc:	f7f8 fce4 	bl	800e0c8 <rmw_uxrce_clean_expired_static_input_buffer>
 8015700:	4620      	mov	r0, r4
 8015702:	f7f8 fcb9 	bl	800e078 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015706:	4605      	mov	r5, r0
 8015708:	b910      	cbnz	r0, 8015710 <rmw_take_with_info+0x74>
 801570a:	2001      	movs	r0, #1
 801570c:	b009      	add	sp, #36	@ 0x24
 801570e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015710:	68a9      	ldr	r1, [r5, #8]
 8015712:	4668      	mov	r0, sp
 8015714:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8015718:	3110      	adds	r1, #16
 801571a:	f7f6 fa0f 	bl	800bb3c <ucdr_init_buffer>
 801571e:	69a3      	ldr	r3, [r4, #24]
 8015720:	4639      	mov	r1, r7
 8015722:	68db      	ldr	r3, [r3, #12]
 8015724:	4668      	mov	r0, sp
 8015726:	4798      	blx	r3
 8015728:	4629      	mov	r1, r5
 801572a:	4604      	mov	r4, r0
 801572c:	4804      	ldr	r0, [pc, #16]	@ (8015740 <rmw_take_with_info+0xa4>)
 801572e:	f7ff fd93 	bl	8015258 <put_memory>
 8015732:	e7dd      	b.n	80156f0 <rmw_take_with_info+0x54>
 8015734:	200c      	movs	r0, #12
 8015736:	b009      	add	sp, #36	@ 0x24
 8015738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801573a:	bf00      	nop
 801573c:	080192b8 	.word	0x080192b8
 8015740:	2000ac2c 	.word	0x2000ac2c

08015744 <rmw_wait>:
 8015744:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015748:	b089      	sub	sp, #36	@ 0x24
 801574a:	4605      	mov	r5, r0
 801574c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801574e:	460e      	mov	r6, r1
 8015750:	4698      	mov	r8, r3
 8015752:	4691      	mov	r9, r2
 8015754:	2a00      	cmp	r2, #0
 8015756:	f000 810a 	beq.w	801596e <rmw_wait+0x22a>
 801575a:	b16c      	cbz	r4, 8015778 <rmw_wait+0x34>
 801575c:	4bae      	ldr	r3, [pc, #696]	@ (8015a18 <rmw_wait+0x2d4>)
 801575e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015760:	af04      	add	r7, sp, #16
 8015762:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8015766:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801576a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801576e:	f7ff faaf 	bl	8014cd0 <rmw_time_equal>
 8015772:	2800      	cmp	r0, #0
 8015774:	f000 8127 	beq.w	80159c6 <rmw_wait+0x282>
 8015778:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801577c:	f7f8 fca4 	bl	800e0c8 <rmw_uxrce_clean_expired_static_input_buffer>
 8015780:	4ba6      	ldr	r3, [pc, #664]	@ (8015a1c <rmw_wait+0x2d8>)
 8015782:	681c      	ldr	r4, [r3, #0]
 8015784:	b14c      	cbz	r4, 801579a <rmw_wait+0x56>
 8015786:	4623      	mov	r3, r4
 8015788:	2100      	movs	r1, #0
 801578a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801578e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015792:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8015796:	2b00      	cmp	r3, #0
 8015798:	d1f7      	bne.n	801578a <rmw_wait+0x46>
 801579a:	f1b9 0f00 	cmp.w	r9, #0
 801579e:	d011      	beq.n	80157c4 <rmw_wait+0x80>
 80157a0:	f8d9 1000 	ldr.w	r1, [r9]
 80157a4:	b171      	cbz	r1, 80157c4 <rmw_wait+0x80>
 80157a6:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80157aa:	2300      	movs	r3, #0
 80157ac:	2001      	movs	r0, #1
 80157ae:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80157b2:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80157b4:	6912      	ldr	r2, [r2, #16]
 80157b6:	3301      	adds	r3, #1
 80157b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80157bc:	4299      	cmp	r1, r3
 80157be:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80157c2:	d1f4      	bne.n	80157ae <rmw_wait+0x6a>
 80157c4:	f1b8 0f00 	cmp.w	r8, #0
 80157c8:	d011      	beq.n	80157ee <rmw_wait+0xaa>
 80157ca:	f8d8 1000 	ldr.w	r1, [r8]
 80157ce:	b171      	cbz	r1, 80157ee <rmw_wait+0xaa>
 80157d0:	f8d8 c004 	ldr.w	ip, [r8, #4]
 80157d4:	2300      	movs	r3, #0
 80157d6:	2001      	movs	r0, #1
 80157d8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80157dc:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80157de:	6912      	ldr	r2, [r2, #16]
 80157e0:	3301      	adds	r3, #1
 80157e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80157e6:	4299      	cmp	r1, r3
 80157e8:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80157ec:	d1f4      	bne.n	80157d8 <rmw_wait+0x94>
 80157ee:	b185      	cbz	r5, 8015812 <rmw_wait+0xce>
 80157f0:	6829      	ldr	r1, [r5, #0]
 80157f2:	b171      	cbz	r1, 8015812 <rmw_wait+0xce>
 80157f4:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80157f8:	2300      	movs	r3, #0
 80157fa:	2001      	movs	r0, #1
 80157fc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015800:	6a12      	ldr	r2, [r2, #32]
 8015802:	6912      	ldr	r2, [r2, #16]
 8015804:	3301      	adds	r3, #1
 8015806:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801580a:	4299      	cmp	r1, r3
 801580c:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015810:	d1f4      	bne.n	80157fc <rmw_wait+0xb8>
 8015812:	b34c      	cbz	r4, 8015868 <rmw_wait+0x124>
 8015814:	4622      	mov	r2, r4
 8015816:	2300      	movs	r3, #0
 8015818:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801581c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8015820:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8015824:	440b      	add	r3, r1
 8015826:	b2db      	uxtb	r3, r3
 8015828:	2a00      	cmp	r2, #0
 801582a:	d1f5      	bne.n	8015818 <rmw_wait+0xd4>
 801582c:	2b00      	cmp	r3, #0
 801582e:	f000 8084 	beq.w	801593a <rmw_wait+0x1f6>
 8015832:	1c7a      	adds	r2, r7, #1
 8015834:	d00d      	beq.n	8015852 <rmw_wait+0x10e>
 8015836:	ee07 7a90 	vmov	s15, r7
 801583a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801583e:	ee07 3a90 	vmov	s15, r3
 8015842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801584a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801584e:	ee17 7a90 	vmov	r7, s15
 8015852:	68a0      	ldr	r0, [r4, #8]
 8015854:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8015858:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 801585c:	2b00      	cmp	r3, #0
 801585e:	f040 8090 	bne.w	8015982 <rmw_wait+0x23e>
 8015862:	6864      	ldr	r4, [r4, #4]
 8015864:	2c00      	cmp	r4, #0
 8015866:	d1f4      	bne.n	8015852 <rmw_wait+0x10e>
 8015868:	f1b9 0f00 	cmp.w	r9, #0
 801586c:	f000 80bc 	beq.w	80159e8 <rmw_wait+0x2a4>
 8015870:	f8d9 7000 	ldr.w	r7, [r9]
 8015874:	2f00      	cmp	r7, #0
 8015876:	f000 808e 	beq.w	8015996 <rmw_wait+0x252>
 801587a:	2400      	movs	r4, #0
 801587c:	4627      	mov	r7, r4
 801587e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015882:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015886:	f7f8 fbf7 	bl	800e078 <rmw_uxrce_find_static_input_buffer_by_owner>
 801588a:	2800      	cmp	r0, #0
 801588c:	d05f      	beq.n	801594e <rmw_wait+0x20a>
 801588e:	f8d9 3000 	ldr.w	r3, [r9]
 8015892:	3401      	adds	r4, #1
 8015894:	42a3      	cmp	r3, r4
 8015896:	f04f 0701 	mov.w	r7, #1
 801589a:	d8f0      	bhi.n	801587e <rmw_wait+0x13a>
 801589c:	f1b8 0f00 	cmp.w	r8, #0
 80158a0:	d012      	beq.n	80158c8 <rmw_wait+0x184>
 80158a2:	f8d8 3000 	ldr.w	r3, [r8]
 80158a6:	b17b      	cbz	r3, 80158c8 <rmw_wait+0x184>
 80158a8:	2400      	movs	r4, #0
 80158aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80158ae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80158b2:	f7f8 fbe1 	bl	800e078 <rmw_uxrce_find_static_input_buffer_by_owner>
 80158b6:	2800      	cmp	r0, #0
 80158b8:	d051      	beq.n	801595e <rmw_wait+0x21a>
 80158ba:	f8d8 3000 	ldr.w	r3, [r8]
 80158be:	3401      	adds	r4, #1
 80158c0:	42a3      	cmp	r3, r4
 80158c2:	f04f 0701 	mov.w	r7, #1
 80158c6:	d8f0      	bhi.n	80158aa <rmw_wait+0x166>
 80158c8:	b1dd      	cbz	r5, 8015902 <rmw_wait+0x1be>
 80158ca:	682b      	ldr	r3, [r5, #0]
 80158cc:	b1cb      	cbz	r3, 8015902 <rmw_wait+0x1be>
 80158ce:	2400      	movs	r4, #0
 80158d0:	686b      	ldr	r3, [r5, #4]
 80158d2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80158d6:	f7f8 fbcf 	bl	800e078 <rmw_uxrce_find_static_input_buffer_by_owner>
 80158da:	b158      	cbz	r0, 80158f4 <rmw_wait+0x1b0>
 80158dc:	682b      	ldr	r3, [r5, #0]
 80158de:	3401      	adds	r4, #1
 80158e0:	42a3      	cmp	r3, r4
 80158e2:	d969      	bls.n	80159b8 <rmw_wait+0x274>
 80158e4:	686b      	ldr	r3, [r5, #4]
 80158e6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80158ea:	2701      	movs	r7, #1
 80158ec:	f7f8 fbc4 	bl	800e078 <rmw_uxrce_find_static_input_buffer_by_owner>
 80158f0:	2800      	cmp	r0, #0
 80158f2:	d1f3      	bne.n	80158dc <rmw_wait+0x198>
 80158f4:	e9d5 3200 	ldrd	r3, r2, [r5]
 80158f8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80158fc:	3401      	adds	r4, #1
 80158fe:	42a3      	cmp	r3, r4
 8015900:	d8e6      	bhi.n	80158d0 <rmw_wait+0x18c>
 8015902:	b1a6      	cbz	r6, 801592e <rmw_wait+0x1ea>
 8015904:	6834      	ldr	r4, [r6, #0]
 8015906:	b194      	cbz	r4, 801592e <rmw_wait+0x1ea>
 8015908:	2300      	movs	r3, #0
 801590a:	461d      	mov	r5, r3
 801590c:	e004      	b.n	8015918 <rmw_wait+0x1d4>
 801590e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8015912:	3301      	adds	r3, #1
 8015914:	42a3      	cmp	r3, r4
 8015916:	d00a      	beq.n	801592e <rmw_wait+0x1ea>
 8015918:	6870      	ldr	r0, [r6, #4]
 801591a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801591e:	7c0a      	ldrb	r2, [r1, #16]
 8015920:	2a00      	cmp	r2, #0
 8015922:	d0f4      	beq.n	801590e <rmw_wait+0x1ca>
 8015924:	3301      	adds	r3, #1
 8015926:	42a3      	cmp	r3, r4
 8015928:	740d      	strb	r5, [r1, #16]
 801592a:	4617      	mov	r7, r2
 801592c:	d1f4      	bne.n	8015918 <rmw_wait+0x1d4>
 801592e:	2f00      	cmp	r7, #0
 8015930:	d03e      	beq.n	80159b0 <rmw_wait+0x26c>
 8015932:	2000      	movs	r0, #0
 8015934:	b009      	add	sp, #36	@ 0x24
 8015936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801593a:	68a0      	ldr	r0, [r4, #8]
 801593c:	2100      	movs	r1, #0
 801593e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015942:	f7f9 fcf3 	bl	800f32c <uxr_run_session_timeout>
 8015946:	6864      	ldr	r4, [r4, #4]
 8015948:	2c00      	cmp	r4, #0
 801594a:	d1f6      	bne.n	801593a <rmw_wait+0x1f6>
 801594c:	e78c      	b.n	8015868 <rmw_wait+0x124>
 801594e:	e9d9 3200 	ldrd	r3, r2, [r9]
 8015952:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015956:	3401      	adds	r4, #1
 8015958:	42a3      	cmp	r3, r4
 801595a:	d890      	bhi.n	801587e <rmw_wait+0x13a>
 801595c:	e79e      	b.n	801589c <rmw_wait+0x158>
 801595e:	e9d8 3200 	ldrd	r3, r2, [r8]
 8015962:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015966:	3401      	adds	r4, #1
 8015968:	429c      	cmp	r4, r3
 801596a:	d39e      	bcc.n	80158aa <rmw_wait+0x166>
 801596c:	e7ac      	b.n	80158c8 <rmw_wait+0x184>
 801596e:	2b00      	cmp	r3, #0
 8015970:	f47f aef3 	bne.w	801575a <rmw_wait+0x16>
 8015974:	2800      	cmp	r0, #0
 8015976:	f47f aef0 	bne.w	801575a <rmw_wait+0x16>
 801597a:	2900      	cmp	r1, #0
 801597c:	f47f aeed 	bne.w	801575a <rmw_wait+0x16>
 8015980:	e7d7      	b.n	8015932 <rmw_wait+0x1ee>
 8015982:	4639      	mov	r1, r7
 8015984:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015988:	f7f9 fcea 	bl	800f360 <uxr_run_session_until_data>
 801598c:	6864      	ldr	r4, [r4, #4]
 801598e:	2c00      	cmp	r4, #0
 8015990:	f47f af5f 	bne.w	8015852 <rmw_wait+0x10e>
 8015994:	e768      	b.n	8015868 <rmw_wait+0x124>
 8015996:	f1b8 0f00 	cmp.w	r8, #0
 801599a:	d032      	beq.n	8015a02 <rmw_wait+0x2be>
 801599c:	f8d8 3000 	ldr.w	r3, [r8]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d181      	bne.n	80158a8 <rmw_wait+0x164>
 80159a4:	461f      	mov	r7, r3
 80159a6:	2d00      	cmp	r5, #0
 80159a8:	d18f      	bne.n	80158ca <rmw_wait+0x186>
 80159aa:	462f      	mov	r7, r5
 80159ac:	2e00      	cmp	r6, #0
 80159ae:	d1a9      	bne.n	8015904 <rmw_wait+0x1c0>
 80159b0:	2002      	movs	r0, #2
 80159b2:	b009      	add	sp, #36	@ 0x24
 80159b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80159b8:	2e00      	cmp	r6, #0
 80159ba:	d0ba      	beq.n	8015932 <rmw_wait+0x1ee>
 80159bc:	6834      	ldr	r4, [r6, #0]
 80159be:	2701      	movs	r7, #1
 80159c0:	2c00      	cmp	r4, #0
 80159c2:	d1a1      	bne.n	8015908 <rmw_wait+0x1c4>
 80159c4:	e7b5      	b.n	8015932 <rmw_wait+0x1ee>
 80159c6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80159ca:	f7ff f9d5 	bl	8014d78 <rmw_time_total_nsec>
 80159ce:	2300      	movs	r3, #0
 80159d0:	4a13      	ldr	r2, [pc, #76]	@ (8015a20 <rmw_wait+0x2dc>)
 80159d2:	f7eb f8fb 	bl	8000bcc <__aeabi_uldivmod>
 80159d6:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 80159da:	f171 0300 	sbcs.w	r3, r1, #0
 80159de:	4607      	mov	r7, r0
 80159e0:	bfa8      	it	ge
 80159e2:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 80159e6:	e6c9      	b.n	801577c <rmw_wait+0x38>
 80159e8:	f1b8 0f00 	cmp.w	r8, #0
 80159ec:	d009      	beq.n	8015a02 <rmw_wait+0x2be>
 80159ee:	f8d8 3000 	ldr.w	r3, [r8]
 80159f2:	464f      	mov	r7, r9
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	f47f af57 	bne.w	80158a8 <rmw_wait+0x164>
 80159fa:	2d00      	cmp	r5, #0
 80159fc:	f47f af65 	bne.w	80158ca <rmw_wait+0x186>
 8015a00:	e7d3      	b.n	80159aa <rmw_wait+0x266>
 8015a02:	b17d      	cbz	r5, 8015a24 <rmw_wait+0x2e0>
 8015a04:	682b      	ldr	r3, [r5, #0]
 8015a06:	4647      	mov	r7, r8
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	f47f af60 	bne.w	80158ce <rmw_wait+0x18a>
 8015a0e:	2e00      	cmp	r6, #0
 8015a10:	f47f af78 	bne.w	8015904 <rmw_wait+0x1c0>
 8015a14:	e7cc      	b.n	80159b0 <rmw_wait+0x26c>
 8015a16:	bf00      	nop
 8015a18:	08018798 	.word	0x08018798
 8015a1c:	2000ac1c 	.word	0x2000ac1c
 8015a20:	000f4240 	.word	0x000f4240
 8015a24:	2e00      	cmp	r6, #0
 8015a26:	d0c3      	beq.n	80159b0 <rmw_wait+0x26c>
 8015a28:	6834      	ldr	r4, [r6, #0]
 8015a2a:	462f      	mov	r7, r5
 8015a2c:	2c00      	cmp	r4, #0
 8015a2e:	f47f af6b 	bne.w	8015908 <rmw_wait+0x1c4>
 8015a32:	e7bd      	b.n	80159b0 <rmw_wait+0x26c>

08015a34 <rmw_create_wait_set>:
 8015a34:	b508      	push	{r3, lr}
 8015a36:	4803      	ldr	r0, [pc, #12]	@ (8015a44 <rmw_create_wait_set+0x10>)
 8015a38:	f7ff fbfe 	bl	8015238 <get_memory>
 8015a3c:	b108      	cbz	r0, 8015a42 <rmw_create_wait_set+0xe>
 8015a3e:	6880      	ldr	r0, [r0, #8]
 8015a40:	3010      	adds	r0, #16
 8015a42:	bd08      	pop	{r3, pc}
 8015a44:	2000ac5c 	.word	0x2000ac5c

08015a48 <rmw_destroy_wait_set>:
 8015a48:	b508      	push	{r3, lr}
 8015a4a:	4b08      	ldr	r3, [pc, #32]	@ (8015a6c <rmw_destroy_wait_set+0x24>)
 8015a4c:	6819      	ldr	r1, [r3, #0]
 8015a4e:	b911      	cbnz	r1, 8015a56 <rmw_destroy_wait_set+0xe>
 8015a50:	e00a      	b.n	8015a68 <rmw_destroy_wait_set+0x20>
 8015a52:	6849      	ldr	r1, [r1, #4]
 8015a54:	b141      	cbz	r1, 8015a68 <rmw_destroy_wait_set+0x20>
 8015a56:	688b      	ldr	r3, [r1, #8]
 8015a58:	3310      	adds	r3, #16
 8015a5a:	4298      	cmp	r0, r3
 8015a5c:	d1f9      	bne.n	8015a52 <rmw_destroy_wait_set+0xa>
 8015a5e:	4803      	ldr	r0, [pc, #12]	@ (8015a6c <rmw_destroy_wait_set+0x24>)
 8015a60:	f7ff fbfa 	bl	8015258 <put_memory>
 8015a64:	2000      	movs	r0, #0
 8015a66:	bd08      	pop	{r3, pc}
 8015a68:	2001      	movs	r0, #1
 8015a6a:	bd08      	pop	{r3, pc}
 8015a6c:	2000ac5c 	.word	0x2000ac5c

08015a70 <ucdr_serialize_endian_array_char>:
 8015a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a74:	4619      	mov	r1, r3
 8015a76:	461f      	mov	r7, r3
 8015a78:	4605      	mov	r5, r0
 8015a7a:	4690      	mov	r8, r2
 8015a7c:	f7f6 f80a 	bl	800ba94 <ucdr_check_buffer_available_for>
 8015a80:	b9e0      	cbnz	r0, 8015abc <ucdr_serialize_endian_array_char+0x4c>
 8015a82:	463e      	mov	r6, r7
 8015a84:	e009      	b.n	8015a9a <ucdr_serialize_endian_array_char+0x2a>
 8015a86:	68a8      	ldr	r0, [r5, #8]
 8015a88:	f001 ff59 	bl	801793e <memcpy>
 8015a8c:	68ab      	ldr	r3, [r5, #8]
 8015a8e:	6928      	ldr	r0, [r5, #16]
 8015a90:	4423      	add	r3, r4
 8015a92:	4420      	add	r0, r4
 8015a94:	1b36      	subs	r6, r6, r4
 8015a96:	60ab      	str	r3, [r5, #8]
 8015a98:	6128      	str	r0, [r5, #16]
 8015a9a:	4631      	mov	r1, r6
 8015a9c:	2201      	movs	r2, #1
 8015a9e:	4628      	mov	r0, r5
 8015aa0:	f7f6 f880 	bl	800bba4 <ucdr_check_final_buffer_behavior_array>
 8015aa4:	1bb9      	subs	r1, r7, r6
 8015aa6:	4441      	add	r1, r8
 8015aa8:	4604      	mov	r4, r0
 8015aaa:	4602      	mov	r2, r0
 8015aac:	2800      	cmp	r0, #0
 8015aae:	d1ea      	bne.n	8015a86 <ucdr_serialize_endian_array_char+0x16>
 8015ab0:	2301      	movs	r3, #1
 8015ab2:	7da8      	ldrb	r0, [r5, #22]
 8015ab4:	756b      	strb	r3, [r5, #21]
 8015ab6:	4058      	eors	r0, r3
 8015ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015abc:	463a      	mov	r2, r7
 8015abe:	68a8      	ldr	r0, [r5, #8]
 8015ac0:	4641      	mov	r1, r8
 8015ac2:	f001 ff3c 	bl	801793e <memcpy>
 8015ac6:	68aa      	ldr	r2, [r5, #8]
 8015ac8:	692b      	ldr	r3, [r5, #16]
 8015aca:	443a      	add	r2, r7
 8015acc:	443b      	add	r3, r7
 8015ace:	60aa      	str	r2, [r5, #8]
 8015ad0:	612b      	str	r3, [r5, #16]
 8015ad2:	e7ed      	b.n	8015ab0 <ucdr_serialize_endian_array_char+0x40>

08015ad4 <ucdr_deserialize_endian_array_char>:
 8015ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ad8:	4619      	mov	r1, r3
 8015ada:	461f      	mov	r7, r3
 8015adc:	4605      	mov	r5, r0
 8015ade:	4690      	mov	r8, r2
 8015ae0:	f7f5 ffd8 	bl	800ba94 <ucdr_check_buffer_available_for>
 8015ae4:	b9e0      	cbnz	r0, 8015b20 <ucdr_deserialize_endian_array_char+0x4c>
 8015ae6:	463e      	mov	r6, r7
 8015ae8:	e009      	b.n	8015afe <ucdr_deserialize_endian_array_char+0x2a>
 8015aea:	68a9      	ldr	r1, [r5, #8]
 8015aec:	f001 ff27 	bl	801793e <memcpy>
 8015af0:	68ab      	ldr	r3, [r5, #8]
 8015af2:	6928      	ldr	r0, [r5, #16]
 8015af4:	4423      	add	r3, r4
 8015af6:	4420      	add	r0, r4
 8015af8:	1b36      	subs	r6, r6, r4
 8015afa:	60ab      	str	r3, [r5, #8]
 8015afc:	6128      	str	r0, [r5, #16]
 8015afe:	2201      	movs	r2, #1
 8015b00:	4631      	mov	r1, r6
 8015b02:	4628      	mov	r0, r5
 8015b04:	f7f6 f84e 	bl	800bba4 <ucdr_check_final_buffer_behavior_array>
 8015b08:	4604      	mov	r4, r0
 8015b0a:	1bb8      	subs	r0, r7, r6
 8015b0c:	4440      	add	r0, r8
 8015b0e:	4622      	mov	r2, r4
 8015b10:	2c00      	cmp	r4, #0
 8015b12:	d1ea      	bne.n	8015aea <ucdr_deserialize_endian_array_char+0x16>
 8015b14:	2301      	movs	r3, #1
 8015b16:	7da8      	ldrb	r0, [r5, #22]
 8015b18:	756b      	strb	r3, [r5, #21]
 8015b1a:	4058      	eors	r0, r3
 8015b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b20:	463a      	mov	r2, r7
 8015b22:	68a9      	ldr	r1, [r5, #8]
 8015b24:	4640      	mov	r0, r8
 8015b26:	f001 ff0a 	bl	801793e <memcpy>
 8015b2a:	68aa      	ldr	r2, [r5, #8]
 8015b2c:	692b      	ldr	r3, [r5, #16]
 8015b2e:	443a      	add	r2, r7
 8015b30:	443b      	add	r3, r7
 8015b32:	60aa      	str	r2, [r5, #8]
 8015b34:	612b      	str	r3, [r5, #16]
 8015b36:	e7ed      	b.n	8015b14 <ucdr_deserialize_endian_array_char+0x40>

08015b38 <ucdr_serialize_array_uint8_t>:
 8015b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b3c:	4688      	mov	r8, r1
 8015b3e:	4611      	mov	r1, r2
 8015b40:	4617      	mov	r7, r2
 8015b42:	4605      	mov	r5, r0
 8015b44:	f7f5 ffa6 	bl	800ba94 <ucdr_check_buffer_available_for>
 8015b48:	b9e0      	cbnz	r0, 8015b84 <ucdr_serialize_array_uint8_t+0x4c>
 8015b4a:	463e      	mov	r6, r7
 8015b4c:	e009      	b.n	8015b62 <ucdr_serialize_array_uint8_t+0x2a>
 8015b4e:	68a8      	ldr	r0, [r5, #8]
 8015b50:	f001 fef5 	bl	801793e <memcpy>
 8015b54:	68aa      	ldr	r2, [r5, #8]
 8015b56:	692b      	ldr	r3, [r5, #16]
 8015b58:	4422      	add	r2, r4
 8015b5a:	4423      	add	r3, r4
 8015b5c:	1b36      	subs	r6, r6, r4
 8015b5e:	60aa      	str	r2, [r5, #8]
 8015b60:	612b      	str	r3, [r5, #16]
 8015b62:	4631      	mov	r1, r6
 8015b64:	2201      	movs	r2, #1
 8015b66:	4628      	mov	r0, r5
 8015b68:	f7f6 f81c 	bl	800bba4 <ucdr_check_final_buffer_behavior_array>
 8015b6c:	1bb9      	subs	r1, r7, r6
 8015b6e:	4441      	add	r1, r8
 8015b70:	4604      	mov	r4, r0
 8015b72:	4602      	mov	r2, r0
 8015b74:	2800      	cmp	r0, #0
 8015b76:	d1ea      	bne.n	8015b4e <ucdr_serialize_array_uint8_t+0x16>
 8015b78:	2301      	movs	r3, #1
 8015b7a:	7da8      	ldrb	r0, [r5, #22]
 8015b7c:	756b      	strb	r3, [r5, #21]
 8015b7e:	4058      	eors	r0, r3
 8015b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b84:	463a      	mov	r2, r7
 8015b86:	68a8      	ldr	r0, [r5, #8]
 8015b88:	4641      	mov	r1, r8
 8015b8a:	f001 fed8 	bl	801793e <memcpy>
 8015b8e:	68aa      	ldr	r2, [r5, #8]
 8015b90:	692b      	ldr	r3, [r5, #16]
 8015b92:	443a      	add	r2, r7
 8015b94:	443b      	add	r3, r7
 8015b96:	60aa      	str	r2, [r5, #8]
 8015b98:	612b      	str	r3, [r5, #16]
 8015b9a:	e7ed      	b.n	8015b78 <ucdr_serialize_array_uint8_t+0x40>

08015b9c <ucdr_serialize_endian_array_uint8_t>:
 8015b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ba0:	4619      	mov	r1, r3
 8015ba2:	461f      	mov	r7, r3
 8015ba4:	4605      	mov	r5, r0
 8015ba6:	4690      	mov	r8, r2
 8015ba8:	f7f5 ff74 	bl	800ba94 <ucdr_check_buffer_available_for>
 8015bac:	b9e0      	cbnz	r0, 8015be8 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8015bae:	463e      	mov	r6, r7
 8015bb0:	e009      	b.n	8015bc6 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8015bb2:	68a8      	ldr	r0, [r5, #8]
 8015bb4:	f001 fec3 	bl	801793e <memcpy>
 8015bb8:	68ab      	ldr	r3, [r5, #8]
 8015bba:	6928      	ldr	r0, [r5, #16]
 8015bbc:	4423      	add	r3, r4
 8015bbe:	4420      	add	r0, r4
 8015bc0:	1b36      	subs	r6, r6, r4
 8015bc2:	60ab      	str	r3, [r5, #8]
 8015bc4:	6128      	str	r0, [r5, #16]
 8015bc6:	4631      	mov	r1, r6
 8015bc8:	2201      	movs	r2, #1
 8015bca:	4628      	mov	r0, r5
 8015bcc:	f7f5 ffea 	bl	800bba4 <ucdr_check_final_buffer_behavior_array>
 8015bd0:	1bb9      	subs	r1, r7, r6
 8015bd2:	4441      	add	r1, r8
 8015bd4:	4604      	mov	r4, r0
 8015bd6:	4602      	mov	r2, r0
 8015bd8:	2800      	cmp	r0, #0
 8015bda:	d1ea      	bne.n	8015bb2 <ucdr_serialize_endian_array_uint8_t+0x16>
 8015bdc:	2301      	movs	r3, #1
 8015bde:	7da8      	ldrb	r0, [r5, #22]
 8015be0:	756b      	strb	r3, [r5, #21]
 8015be2:	4058      	eors	r0, r3
 8015be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015be8:	463a      	mov	r2, r7
 8015bea:	68a8      	ldr	r0, [r5, #8]
 8015bec:	4641      	mov	r1, r8
 8015bee:	f001 fea6 	bl	801793e <memcpy>
 8015bf2:	68aa      	ldr	r2, [r5, #8]
 8015bf4:	692b      	ldr	r3, [r5, #16]
 8015bf6:	443a      	add	r2, r7
 8015bf8:	443b      	add	r3, r7
 8015bfa:	60aa      	str	r2, [r5, #8]
 8015bfc:	612b      	str	r3, [r5, #16]
 8015bfe:	e7ed      	b.n	8015bdc <ucdr_serialize_endian_array_uint8_t+0x40>

08015c00 <ucdr_deserialize_array_uint8_t>:
 8015c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c04:	4688      	mov	r8, r1
 8015c06:	4611      	mov	r1, r2
 8015c08:	4617      	mov	r7, r2
 8015c0a:	4605      	mov	r5, r0
 8015c0c:	f7f5 ff42 	bl	800ba94 <ucdr_check_buffer_available_for>
 8015c10:	b9e0      	cbnz	r0, 8015c4c <ucdr_deserialize_array_uint8_t+0x4c>
 8015c12:	463e      	mov	r6, r7
 8015c14:	e009      	b.n	8015c2a <ucdr_deserialize_array_uint8_t+0x2a>
 8015c16:	68a9      	ldr	r1, [r5, #8]
 8015c18:	f001 fe91 	bl	801793e <memcpy>
 8015c1c:	68aa      	ldr	r2, [r5, #8]
 8015c1e:	692b      	ldr	r3, [r5, #16]
 8015c20:	4422      	add	r2, r4
 8015c22:	4423      	add	r3, r4
 8015c24:	1b36      	subs	r6, r6, r4
 8015c26:	60aa      	str	r2, [r5, #8]
 8015c28:	612b      	str	r3, [r5, #16]
 8015c2a:	2201      	movs	r2, #1
 8015c2c:	4631      	mov	r1, r6
 8015c2e:	4628      	mov	r0, r5
 8015c30:	f7f5 ffb8 	bl	800bba4 <ucdr_check_final_buffer_behavior_array>
 8015c34:	4604      	mov	r4, r0
 8015c36:	1bb8      	subs	r0, r7, r6
 8015c38:	4440      	add	r0, r8
 8015c3a:	4622      	mov	r2, r4
 8015c3c:	2c00      	cmp	r4, #0
 8015c3e:	d1ea      	bne.n	8015c16 <ucdr_deserialize_array_uint8_t+0x16>
 8015c40:	2301      	movs	r3, #1
 8015c42:	7da8      	ldrb	r0, [r5, #22]
 8015c44:	756b      	strb	r3, [r5, #21]
 8015c46:	4058      	eors	r0, r3
 8015c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c4c:	463a      	mov	r2, r7
 8015c4e:	68a9      	ldr	r1, [r5, #8]
 8015c50:	4640      	mov	r0, r8
 8015c52:	f001 fe74 	bl	801793e <memcpy>
 8015c56:	68aa      	ldr	r2, [r5, #8]
 8015c58:	692b      	ldr	r3, [r5, #16]
 8015c5a:	443a      	add	r2, r7
 8015c5c:	443b      	add	r3, r7
 8015c5e:	60aa      	str	r2, [r5, #8]
 8015c60:	612b      	str	r3, [r5, #16]
 8015c62:	e7ed      	b.n	8015c40 <ucdr_deserialize_array_uint8_t+0x40>

08015c64 <ucdr_deserialize_endian_array_uint8_t>:
 8015c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c68:	4619      	mov	r1, r3
 8015c6a:	461f      	mov	r7, r3
 8015c6c:	4605      	mov	r5, r0
 8015c6e:	4690      	mov	r8, r2
 8015c70:	f7f5 ff10 	bl	800ba94 <ucdr_check_buffer_available_for>
 8015c74:	b9e0      	cbnz	r0, 8015cb0 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8015c76:	463e      	mov	r6, r7
 8015c78:	e009      	b.n	8015c8e <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8015c7a:	68a9      	ldr	r1, [r5, #8]
 8015c7c:	f001 fe5f 	bl	801793e <memcpy>
 8015c80:	68ab      	ldr	r3, [r5, #8]
 8015c82:	6928      	ldr	r0, [r5, #16]
 8015c84:	4423      	add	r3, r4
 8015c86:	4420      	add	r0, r4
 8015c88:	1b36      	subs	r6, r6, r4
 8015c8a:	60ab      	str	r3, [r5, #8]
 8015c8c:	6128      	str	r0, [r5, #16]
 8015c8e:	2201      	movs	r2, #1
 8015c90:	4631      	mov	r1, r6
 8015c92:	4628      	mov	r0, r5
 8015c94:	f7f5 ff86 	bl	800bba4 <ucdr_check_final_buffer_behavior_array>
 8015c98:	4604      	mov	r4, r0
 8015c9a:	1bb8      	subs	r0, r7, r6
 8015c9c:	4440      	add	r0, r8
 8015c9e:	4622      	mov	r2, r4
 8015ca0:	2c00      	cmp	r4, #0
 8015ca2:	d1ea      	bne.n	8015c7a <ucdr_deserialize_endian_array_uint8_t+0x16>
 8015ca4:	2301      	movs	r3, #1
 8015ca6:	7da8      	ldrb	r0, [r5, #22]
 8015ca8:	756b      	strb	r3, [r5, #21]
 8015caa:	4058      	eors	r0, r3
 8015cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cb0:	463a      	mov	r2, r7
 8015cb2:	68a9      	ldr	r1, [r5, #8]
 8015cb4:	4640      	mov	r0, r8
 8015cb6:	f001 fe42 	bl	801793e <memcpy>
 8015cba:	68aa      	ldr	r2, [r5, #8]
 8015cbc:	692b      	ldr	r3, [r5, #16]
 8015cbe:	443a      	add	r2, r7
 8015cc0:	443b      	add	r3, r7
 8015cc2:	60aa      	str	r2, [r5, #8]
 8015cc4:	612b      	str	r3, [r5, #16]
 8015cc6:	e7ed      	b.n	8015ca4 <ucdr_deserialize_endian_array_uint8_t+0x40>

08015cc8 <ucdr_serialize_sequence_char>:
 8015cc8:	b570      	push	{r4, r5, r6, lr}
 8015cca:	4615      	mov	r5, r2
 8015ccc:	460e      	mov	r6, r1
 8015cce:	7d01      	ldrb	r1, [r0, #20]
 8015cd0:	4604      	mov	r4, r0
 8015cd2:	f7f5 f89f 	bl	800ae14 <ucdr_serialize_endian_uint32_t>
 8015cd6:	b90d      	cbnz	r5, 8015cdc <ucdr_serialize_sequence_char+0x14>
 8015cd8:	2001      	movs	r0, #1
 8015cda:	bd70      	pop	{r4, r5, r6, pc}
 8015cdc:	7d21      	ldrb	r1, [r4, #20]
 8015cde:	462b      	mov	r3, r5
 8015ce0:	4632      	mov	r2, r6
 8015ce2:	4620      	mov	r0, r4
 8015ce4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015ce8:	f7ff bec2 	b.w	8015a70 <ucdr_serialize_endian_array_char>

08015cec <ucdr_deserialize_sequence_char>:
 8015cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cf0:	461d      	mov	r5, r3
 8015cf2:	4616      	mov	r6, r2
 8015cf4:	460f      	mov	r7, r1
 8015cf6:	461a      	mov	r2, r3
 8015cf8:	7d01      	ldrb	r1, [r0, #20]
 8015cfa:	4604      	mov	r4, r0
 8015cfc:	f7f5 f9b2 	bl	800b064 <ucdr_deserialize_endian_uint32_t>
 8015d00:	682b      	ldr	r3, [r5, #0]
 8015d02:	429e      	cmp	r6, r3
 8015d04:	bf3c      	itt	cc
 8015d06:	2201      	movcc	r2, #1
 8015d08:	75a2      	strbcc	r2, [r4, #22]
 8015d0a:	b913      	cbnz	r3, 8015d12 <ucdr_deserialize_sequence_char+0x26>
 8015d0c:	2001      	movs	r0, #1
 8015d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d12:	7d21      	ldrb	r1, [r4, #20]
 8015d14:	463a      	mov	r2, r7
 8015d16:	4620      	mov	r0, r4
 8015d18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015d1c:	f7ff beda 	b.w	8015ad4 <ucdr_deserialize_endian_array_char>

08015d20 <ucdr_serialize_sequence_uint8_t>:
 8015d20:	b570      	push	{r4, r5, r6, lr}
 8015d22:	4615      	mov	r5, r2
 8015d24:	460e      	mov	r6, r1
 8015d26:	7d01      	ldrb	r1, [r0, #20]
 8015d28:	4604      	mov	r4, r0
 8015d2a:	f7f5 f873 	bl	800ae14 <ucdr_serialize_endian_uint32_t>
 8015d2e:	b90d      	cbnz	r5, 8015d34 <ucdr_serialize_sequence_uint8_t+0x14>
 8015d30:	2001      	movs	r0, #1
 8015d32:	bd70      	pop	{r4, r5, r6, pc}
 8015d34:	7d21      	ldrb	r1, [r4, #20]
 8015d36:	462b      	mov	r3, r5
 8015d38:	4632      	mov	r2, r6
 8015d3a:	4620      	mov	r0, r4
 8015d3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015d40:	f7ff bf2c 	b.w	8015b9c <ucdr_serialize_endian_array_uint8_t>

08015d44 <ucdr_deserialize_sequence_uint8_t>:
 8015d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d48:	461d      	mov	r5, r3
 8015d4a:	4616      	mov	r6, r2
 8015d4c:	460f      	mov	r7, r1
 8015d4e:	461a      	mov	r2, r3
 8015d50:	7d01      	ldrb	r1, [r0, #20]
 8015d52:	4604      	mov	r4, r0
 8015d54:	f7f5 f986 	bl	800b064 <ucdr_deserialize_endian_uint32_t>
 8015d58:	682b      	ldr	r3, [r5, #0]
 8015d5a:	429e      	cmp	r6, r3
 8015d5c:	bf3c      	itt	cc
 8015d5e:	2201      	movcc	r2, #1
 8015d60:	75a2      	strbcc	r2, [r4, #22]
 8015d62:	b913      	cbnz	r3, 8015d6a <ucdr_deserialize_sequence_uint8_t+0x26>
 8015d64:	2001      	movs	r0, #1
 8015d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d6a:	7d21      	ldrb	r1, [r4, #20]
 8015d6c:	463a      	mov	r2, r7
 8015d6e:	4620      	mov	r0, r4
 8015d70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015d74:	f7ff bf76 	b.w	8015c64 <ucdr_deserialize_endian_array_uint8_t>

08015d78 <ucdr_serialize_string>:
 8015d78:	b510      	push	{r4, lr}
 8015d7a:	b082      	sub	sp, #8
 8015d7c:	4604      	mov	r4, r0
 8015d7e:	4608      	mov	r0, r1
 8015d80:	9101      	str	r1, [sp, #4]
 8015d82:	f7ea fa57 	bl	8000234 <strlen>
 8015d86:	9901      	ldr	r1, [sp, #4]
 8015d88:	1c42      	adds	r2, r0, #1
 8015d8a:	4620      	mov	r0, r4
 8015d8c:	b002      	add	sp, #8
 8015d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015d92:	f7ff bf99 	b.w	8015cc8 <ucdr_serialize_sequence_char>
 8015d96:	bf00      	nop

08015d98 <ucdr_deserialize_string>:
 8015d98:	b500      	push	{lr}
 8015d9a:	b083      	sub	sp, #12
 8015d9c:	ab01      	add	r3, sp, #4
 8015d9e:	f7ff ffa5 	bl	8015cec <ucdr_deserialize_sequence_char>
 8015da2:	b003      	add	sp, #12
 8015da4:	f85d fb04 	ldr.w	pc, [sp], #4

08015da8 <uxr_init_input_best_effort_stream>:
 8015da8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015dac:	8003      	strh	r3, [r0, #0]
 8015dae:	4770      	bx	lr

08015db0 <uxr_reset_input_best_effort_stream>:
 8015db0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015db4:	8003      	strh	r3, [r0, #0]
 8015db6:	4770      	bx	lr

08015db8 <uxr_receive_best_effort_message>:
 8015db8:	b538      	push	{r3, r4, r5, lr}
 8015dba:	4604      	mov	r4, r0
 8015dbc:	8800      	ldrh	r0, [r0, #0]
 8015dbe:	460d      	mov	r5, r1
 8015dc0:	f000 fd42 	bl	8016848 <uxr_seq_num_cmp>
 8015dc4:	4603      	mov	r3, r0
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8015dcc:	bfb8      	it	lt
 8015dce:	8025      	strhlt	r5, [r4, #0]
 8015dd0:	bd38      	pop	{r3, r4, r5, pc}
 8015dd2:	bf00      	nop

08015dd4 <on_full_input_buffer>:
 8015dd4:	b570      	push	{r4, r5, r6, lr}
 8015dd6:	4605      	mov	r5, r0
 8015dd8:	460c      	mov	r4, r1
 8015dda:	682b      	ldr	r3, [r5, #0]
 8015ddc:	6809      	ldr	r1, [r1, #0]
 8015dde:	8920      	ldrh	r0, [r4, #8]
 8015de0:	6862      	ldr	r2, [r4, #4]
 8015de2:	fbb2 f2f0 	udiv	r2, r2, r0
 8015de6:	eba3 0c01 	sub.w	ip, r3, r1
 8015dea:	fbbc fcf2 	udiv	ip, ip, r2
 8015dee:	f10c 0c01 	add.w	ip, ip, #1
 8015df2:	fa1f f38c 	uxth.w	r3, ip
 8015df6:	fbb3 f6f0 	udiv	r6, r3, r0
 8015dfa:	fb00 3316 	mls	r3, r0, r6, r3
 8015dfe:	b29b      	uxth	r3, r3
 8015e00:	fb02 f303 	mul.w	r3, r2, r3
 8015e04:	1d18      	adds	r0, r3, #4
 8015e06:	4408      	add	r0, r1
 8015e08:	7d26      	ldrb	r6, [r4, #20]
 8015e0a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8015e0e:	b116      	cbz	r6, 8015e16 <on_full_input_buffer+0x42>
 8015e10:	2600      	movs	r6, #0
 8015e12:	f840 6c04 	str.w	r6, [r0, #-4]
 8015e16:	2a03      	cmp	r2, #3
 8015e18:	d801      	bhi.n	8015e1e <on_full_input_buffer+0x4a>
 8015e1a:	2001      	movs	r0, #1
 8015e1c:	bd70      	pop	{r4, r5, r6, pc}
 8015e1e:	3308      	adds	r3, #8
 8015e20:	4419      	add	r1, r3
 8015e22:	4628      	mov	r0, r5
 8015e24:	692b      	ldr	r3, [r5, #16]
 8015e26:	3a04      	subs	r2, #4
 8015e28:	f7f5 fe80 	bl	800bb2c <ucdr_init_buffer_origin>
 8015e2c:	4628      	mov	r0, r5
 8015e2e:	4903      	ldr	r1, [pc, #12]	@ (8015e3c <on_full_input_buffer+0x68>)
 8015e30:	4622      	mov	r2, r4
 8015e32:	f7f5 fe57 	bl	800bae4 <ucdr_set_on_full_buffer_callback>
 8015e36:	2000      	movs	r0, #0
 8015e38:	bd70      	pop	{r4, r5, r6, pc}
 8015e3a:	bf00      	nop
 8015e3c:	08015dd5 	.word	0x08015dd5

08015e40 <uxr_init_input_reliable_stream>:
 8015e40:	b500      	push	{lr}
 8015e42:	e9c0 1200 	strd	r1, r2, [r0]
 8015e46:	f04f 0e00 	mov.w	lr, #0
 8015e4a:	9a01      	ldr	r2, [sp, #4]
 8015e4c:	8103      	strh	r3, [r0, #8]
 8015e4e:	6102      	str	r2, [r0, #16]
 8015e50:	f880 e014 	strb.w	lr, [r0, #20]
 8015e54:	b1d3      	cbz	r3, 8015e8c <uxr_init_input_reliable_stream+0x4c>
 8015e56:	f8c1 e000 	str.w	lr, [r1]
 8015e5a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015e5e:	f1bc 0f01 	cmp.w	ip, #1
 8015e62:	d913      	bls.n	8015e8c <uxr_init_input_reliable_stream+0x4c>
 8015e64:	2301      	movs	r3, #1
 8015e66:	fbb3 f1fc 	udiv	r1, r3, ip
 8015e6a:	fb0c 3111 	mls	r1, ip, r1, r3
 8015e6e:	b289      	uxth	r1, r1
 8015e70:	6842      	ldr	r2, [r0, #4]
 8015e72:	fbb2 f2fc 	udiv	r2, r2, ip
 8015e76:	fb01 f202 	mul.w	r2, r1, r2
 8015e7a:	6801      	ldr	r1, [r0, #0]
 8015e7c:	f841 e002 	str.w	lr, [r1, r2]
 8015e80:	3301      	adds	r3, #1
 8015e82:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015e86:	b29b      	uxth	r3, r3
 8015e88:	459c      	cmp	ip, r3
 8015e8a:	d8ec      	bhi.n	8015e66 <uxr_init_input_reliable_stream+0x26>
 8015e8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015e90:	60c3      	str	r3, [r0, #12]
 8015e92:	f85d fb04 	ldr.w	pc, [sp], #4
 8015e96:	bf00      	nop

08015e98 <uxr_reset_input_reliable_stream>:
 8015e98:	8901      	ldrh	r1, [r0, #8]
 8015e9a:	b1e9      	cbz	r1, 8015ed8 <uxr_reset_input_reliable_stream+0x40>
 8015e9c:	f04f 0c00 	mov.w	ip, #0
 8015ea0:	b500      	push	{lr}
 8015ea2:	4663      	mov	r3, ip
 8015ea4:	46e6      	mov	lr, ip
 8015ea6:	fbb3 f2f1 	udiv	r2, r3, r1
 8015eaa:	fb01 3312 	mls	r3, r1, r2, r3
 8015eae:	b29b      	uxth	r3, r3
 8015eb0:	6842      	ldr	r2, [r0, #4]
 8015eb2:	fbb2 f2f1 	udiv	r2, r2, r1
 8015eb6:	fb02 f303 	mul.w	r3, r2, r3
 8015eba:	6802      	ldr	r2, [r0, #0]
 8015ebc:	f842 e003 	str.w	lr, [r2, r3]
 8015ec0:	f10c 0c01 	add.w	ip, ip, #1
 8015ec4:	8901      	ldrh	r1, [r0, #8]
 8015ec6:	fa1f f38c 	uxth.w	r3, ip
 8015eca:	4299      	cmp	r1, r3
 8015ecc:	d8eb      	bhi.n	8015ea6 <uxr_reset_input_reliable_stream+0xe>
 8015ece:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015ed2:	60c3      	str	r3, [r0, #12]
 8015ed4:	f85d fb04 	ldr.w	pc, [sp], #4
 8015ed8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015edc:	60c3      	str	r3, [r0, #12]
 8015ede:	4770      	bx	lr

08015ee0 <uxr_receive_reliable_message>:
 8015ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ee4:	4604      	mov	r4, r0
 8015ee6:	460d      	mov	r5, r1
 8015ee8:	8901      	ldrh	r1, [r0, #8]
 8015eea:	8980      	ldrh	r0, [r0, #12]
 8015eec:	4690      	mov	r8, r2
 8015eee:	461f      	mov	r7, r3
 8015ef0:	f000 fca2 	bl	8016838 <uxr_seq_num_add>
 8015ef4:	4629      	mov	r1, r5
 8015ef6:	4606      	mov	r6, r0
 8015ef8:	89a0      	ldrh	r0, [r4, #12]
 8015efa:	f000 fca5 	bl	8016848 <uxr_seq_num_cmp>
 8015efe:	2800      	cmp	r0, #0
 8015f00:	db0a      	blt.n	8015f18 <uxr_receive_reliable_message+0x38>
 8015f02:	2600      	movs	r6, #0
 8015f04:	89e0      	ldrh	r0, [r4, #14]
 8015f06:	4629      	mov	r1, r5
 8015f08:	f000 fc9e 	bl	8016848 <uxr_seq_num_cmp>
 8015f0c:	2800      	cmp	r0, #0
 8015f0e:	da00      	bge.n	8015f12 <uxr_receive_reliable_message+0x32>
 8015f10:	81e5      	strh	r5, [r4, #14]
 8015f12:	4630      	mov	r0, r6
 8015f14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f18:	4630      	mov	r0, r6
 8015f1a:	4629      	mov	r1, r5
 8015f1c:	f000 fc94 	bl	8016848 <uxr_seq_num_cmp>
 8015f20:	2800      	cmp	r0, #0
 8015f22:	dbee      	blt.n	8015f02 <uxr_receive_reliable_message+0x22>
 8015f24:	6923      	ldr	r3, [r4, #16]
 8015f26:	4640      	mov	r0, r8
 8015f28:	4798      	blx	r3
 8015f2a:	2101      	movs	r1, #1
 8015f2c:	4681      	mov	r9, r0
 8015f2e:	89a0      	ldrh	r0, [r4, #12]
 8015f30:	f000 fc82 	bl	8016838 <uxr_seq_num_add>
 8015f34:	f1b9 0f00 	cmp.w	r9, #0
 8015f38:	d101      	bne.n	8015f3e <uxr_receive_reliable_message+0x5e>
 8015f3a:	4285      	cmp	r5, r0
 8015f3c:	d047      	beq.n	8015fce <uxr_receive_reliable_message+0xee>
 8015f3e:	8922      	ldrh	r2, [r4, #8]
 8015f40:	fbb5 f0f2 	udiv	r0, r5, r2
 8015f44:	fb02 5010 	mls	r0, r2, r0, r5
 8015f48:	b280      	uxth	r0, r0
 8015f4a:	6863      	ldr	r3, [r4, #4]
 8015f4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8015f50:	fb00 f303 	mul.w	r3, r0, r3
 8015f54:	6820      	ldr	r0, [r4, #0]
 8015f56:	3304      	adds	r3, #4
 8015f58:	4418      	add	r0, r3
 8015f5a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d1cf      	bne.n	8015f02 <uxr_receive_reliable_message+0x22>
 8015f62:	4641      	mov	r1, r8
 8015f64:	463a      	mov	r2, r7
 8015f66:	f001 fcea 	bl	801793e <memcpy>
 8015f6a:	8921      	ldrh	r1, [r4, #8]
 8015f6c:	fbb5 f2f1 	udiv	r2, r5, r1
 8015f70:	fb01 5212 	mls	r2, r1, r2, r5
 8015f74:	b292      	uxth	r2, r2
 8015f76:	6863      	ldr	r3, [r4, #4]
 8015f78:	fbb3 f3f1 	udiv	r3, r3, r1
 8015f7c:	fb02 f303 	mul.w	r3, r2, r3
 8015f80:	6822      	ldr	r2, [r4, #0]
 8015f82:	50d7      	str	r7, [r2, r3]
 8015f84:	9a08      	ldr	r2, [sp, #32]
 8015f86:	2301      	movs	r3, #1
 8015f88:	7013      	strb	r3, [r2, #0]
 8015f8a:	f1b9 0f00 	cmp.w	r9, #0
 8015f8e:	d0b8      	beq.n	8015f02 <uxr_receive_reliable_message+0x22>
 8015f90:	89a6      	ldrh	r6, [r4, #12]
 8015f92:	4630      	mov	r0, r6
 8015f94:	2101      	movs	r1, #1
 8015f96:	f000 fc4f 	bl	8016838 <uxr_seq_num_add>
 8015f9a:	8922      	ldrh	r2, [r4, #8]
 8015f9c:	6863      	ldr	r3, [r4, #4]
 8015f9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8015fa2:	4606      	mov	r6, r0
 8015fa4:	fbb0 f0f2 	udiv	r0, r0, r2
 8015fa8:	fb02 6010 	mls	r0, r2, r0, r6
 8015fac:	b280      	uxth	r0, r0
 8015fae:	fb00 f303 	mul.w	r3, r0, r3
 8015fb2:	6820      	ldr	r0, [r4, #0]
 8015fb4:	3304      	adds	r3, #4
 8015fb6:	4418      	add	r0, r3
 8015fb8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d0a0      	beq.n	8015f02 <uxr_receive_reliable_message+0x22>
 8015fc0:	6923      	ldr	r3, [r4, #16]
 8015fc2:	4798      	blx	r3
 8015fc4:	2802      	cmp	r0, #2
 8015fc6:	d008      	beq.n	8015fda <uxr_receive_reliable_message+0xfa>
 8015fc8:	2801      	cmp	r0, #1
 8015fca:	d0e2      	beq.n	8015f92 <uxr_receive_reliable_message+0xb2>
 8015fcc:	e799      	b.n	8015f02 <uxr_receive_reliable_message+0x22>
 8015fce:	9b08      	ldr	r3, [sp, #32]
 8015fd0:	81a5      	strh	r5, [r4, #12]
 8015fd2:	2601      	movs	r6, #1
 8015fd4:	f883 9000 	strb.w	r9, [r3]
 8015fd8:	e794      	b.n	8015f04 <uxr_receive_reliable_message+0x24>
 8015fda:	2601      	movs	r6, #1
 8015fdc:	e792      	b.n	8015f04 <uxr_receive_reliable_message+0x24>
 8015fde:	bf00      	nop

08015fe0 <uxr_next_input_reliable_buffer_available>:
 8015fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015fe4:	4604      	mov	r4, r0
 8015fe6:	460f      	mov	r7, r1
 8015fe8:	8980      	ldrh	r0, [r0, #12]
 8015fea:	2101      	movs	r1, #1
 8015fec:	4690      	mov	r8, r2
 8015fee:	f000 fc23 	bl	8016838 <uxr_seq_num_add>
 8015ff2:	8922      	ldrh	r2, [r4, #8]
 8015ff4:	fbb0 f6f2 	udiv	r6, r0, r2
 8015ff8:	fb02 0616 	mls	r6, r2, r6, r0
 8015ffc:	b2b6      	uxth	r6, r6
 8015ffe:	6863      	ldr	r3, [r4, #4]
 8016000:	fbb3 f3f2 	udiv	r3, r3, r2
 8016004:	fb06 f303 	mul.w	r3, r6, r3
 8016008:	6826      	ldr	r6, [r4, #0]
 801600a:	3304      	adds	r3, #4
 801600c:	441e      	add	r6, r3
 801600e:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8016012:	f1b9 0f00 	cmp.w	r9, #0
 8016016:	d023      	beq.n	8016060 <uxr_next_input_reliable_buffer_available+0x80>
 8016018:	6923      	ldr	r3, [r4, #16]
 801601a:	4605      	mov	r5, r0
 801601c:	4630      	mov	r0, r6
 801601e:	4798      	blx	r3
 8016020:	4682      	mov	sl, r0
 8016022:	b300      	cbz	r0, 8016066 <uxr_next_input_reliable_buffer_available+0x86>
 8016024:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8016028:	2101      	movs	r1, #1
 801602a:	4650      	mov	r0, sl
 801602c:	f000 fc04 	bl	8016838 <uxr_seq_num_add>
 8016030:	8921      	ldrh	r1, [r4, #8]
 8016032:	fbb0 f2f1 	udiv	r2, r0, r1
 8016036:	4682      	mov	sl, r0
 8016038:	fb01 0212 	mls	r2, r1, r2, r0
 801603c:	e9d4 0300 	ldrd	r0, r3, [r4]
 8016040:	b292      	uxth	r2, r2
 8016042:	fbb3 f3f1 	udiv	r3, r3, r1
 8016046:	fb02 f303 	mul.w	r3, r2, r3
 801604a:	3304      	adds	r3, #4
 801604c:	4418      	add	r0, r3
 801604e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016052:	b12b      	cbz	r3, 8016060 <uxr_next_input_reliable_buffer_available+0x80>
 8016054:	6923      	ldr	r3, [r4, #16]
 8016056:	4798      	blx	r3
 8016058:	2802      	cmp	r0, #2
 801605a:	d01b      	beq.n	8016094 <uxr_next_input_reliable_buffer_available+0xb4>
 801605c:	2801      	cmp	r0, #1
 801605e:	d0e3      	beq.n	8016028 <uxr_next_input_reliable_buffer_available+0x48>
 8016060:	2000      	movs	r0, #0
 8016062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016066:	464a      	mov	r2, r9
 8016068:	4631      	mov	r1, r6
 801606a:	4638      	mov	r0, r7
 801606c:	f7f5 fd66 	bl	800bb3c <ucdr_init_buffer>
 8016070:	8921      	ldrh	r1, [r4, #8]
 8016072:	fbb5 f2f1 	udiv	r2, r5, r1
 8016076:	fb01 5212 	mls	r2, r1, r2, r5
 801607a:	b292      	uxth	r2, r2
 801607c:	6863      	ldr	r3, [r4, #4]
 801607e:	fbb3 f3f1 	udiv	r3, r3, r1
 8016082:	fb02 f303 	mul.w	r3, r2, r3
 8016086:	6822      	ldr	r2, [r4, #0]
 8016088:	f842 a003 	str.w	sl, [r2, r3]
 801608c:	2001      	movs	r0, #1
 801608e:	81a5      	strh	r5, [r4, #12]
 8016090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016094:	8920      	ldrh	r0, [r4, #8]
 8016096:	fbb5 f3f0 	udiv	r3, r5, r0
 801609a:	fb00 5513 	mls	r5, r0, r3, r5
 801609e:	b2ad      	uxth	r5, r5
 80160a0:	6863      	ldr	r3, [r4, #4]
 80160a2:	fbb3 f3f0 	udiv	r3, r3, r0
 80160a6:	fb03 f505 	mul.w	r5, r3, r5
 80160aa:	6823      	ldr	r3, [r4, #0]
 80160ac:	2000      	movs	r0, #0
 80160ae:	5158      	str	r0, [r3, r5]
 80160b0:	eb06 0108 	add.w	r1, r6, r8
 80160b4:	eba9 0208 	sub.w	r2, r9, r8
 80160b8:	4638      	mov	r0, r7
 80160ba:	f7f5 fd3f 	bl	800bb3c <ucdr_init_buffer>
 80160be:	4638      	mov	r0, r7
 80160c0:	4903      	ldr	r1, [pc, #12]	@ (80160d0 <uxr_next_input_reliable_buffer_available+0xf0>)
 80160c2:	4622      	mov	r2, r4
 80160c4:	f7f5 fd0e 	bl	800bae4 <ucdr_set_on_full_buffer_callback>
 80160c8:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80160cc:	2001      	movs	r0, #1
 80160ce:	e7c8      	b.n	8016062 <uxr_next_input_reliable_buffer_available+0x82>
 80160d0:	08015dd5 	.word	0x08015dd5

080160d4 <uxr_process_heartbeat>:
 80160d4:	b538      	push	{r3, r4, r5, lr}
 80160d6:	4611      	mov	r1, r2
 80160d8:	4604      	mov	r4, r0
 80160da:	89c0      	ldrh	r0, [r0, #14]
 80160dc:	4615      	mov	r5, r2
 80160de:	f000 fbb3 	bl	8016848 <uxr_seq_num_cmp>
 80160e2:	2800      	cmp	r0, #0
 80160e4:	bfb8      	it	lt
 80160e6:	81e5      	strhlt	r5, [r4, #14]
 80160e8:	bd38      	pop	{r3, r4, r5, pc}
 80160ea:	bf00      	nop

080160ec <uxr_compute_acknack>:
 80160ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160f0:	8903      	ldrh	r3, [r0, #8]
 80160f2:	8985      	ldrh	r5, [r0, #12]
 80160f4:	4604      	mov	r4, r0
 80160f6:	460e      	mov	r6, r1
 80160f8:	b1d3      	cbz	r3, 8016130 <uxr_compute_acknack+0x44>
 80160fa:	4628      	mov	r0, r5
 80160fc:	2701      	movs	r7, #1
 80160fe:	e003      	b.n	8016108 <uxr_compute_acknack+0x1c>
 8016100:	4567      	cmp	r7, ip
 8016102:	d215      	bcs.n	8016130 <uxr_compute_acknack+0x44>
 8016104:	89a0      	ldrh	r0, [r4, #12]
 8016106:	3701      	adds	r7, #1
 8016108:	b2b9      	uxth	r1, r7
 801610a:	f000 fb95 	bl	8016838 <uxr_seq_num_add>
 801610e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016112:	fbb0 f3fc 	udiv	r3, r0, ip
 8016116:	fb0c 0313 	mls	r3, ip, r3, r0
 801611a:	b29a      	uxth	r2, r3
 801611c:	e9d4 1300 	ldrd	r1, r3, [r4]
 8016120:	fbb3 f3fc 	udiv	r3, r3, ip
 8016124:	fb02 f303 	mul.w	r3, r2, r3
 8016128:	58cb      	ldr	r3, [r1, r3]
 801612a:	2b00      	cmp	r3, #0
 801612c:	d1e8      	bne.n	8016100 <uxr_compute_acknack+0x14>
 801612e:	4605      	mov	r5, r0
 8016130:	8035      	strh	r5, [r6, #0]
 8016132:	2101      	movs	r1, #1
 8016134:	4628      	mov	r0, r5
 8016136:	89e7      	ldrh	r7, [r4, #14]
 8016138:	f000 fb82 	bl	8016840 <uxr_seq_num_sub>
 801613c:	4601      	mov	r1, r0
 801613e:	4638      	mov	r0, r7
 8016140:	f000 fb7e 	bl	8016840 <uxr_seq_num_sub>
 8016144:	4605      	mov	r5, r0
 8016146:	b318      	cbz	r0, 8016190 <uxr_compute_acknack+0xa4>
 8016148:	f04f 0900 	mov.w	r9, #0
 801614c:	464f      	mov	r7, r9
 801614e:	f04f 0801 	mov.w	r8, #1
 8016152:	fa1f f189 	uxth.w	r1, r9
 8016156:	8830      	ldrh	r0, [r6, #0]
 8016158:	f000 fb6e 	bl	8016838 <uxr_seq_num_add>
 801615c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016160:	fbb0 f3fc 	udiv	r3, r0, ip
 8016164:	e9d4 1200 	ldrd	r1, r2, [r4]
 8016168:	fb03 001c 	mls	r0, r3, ip, r0
 801616c:	b283      	uxth	r3, r0
 801616e:	fbb2 f2fc 	udiv	r2, r2, ip
 8016172:	fb02 f303 	mul.w	r3, r2, r3
 8016176:	fa08 f209 	lsl.w	r2, r8, r9
 801617a:	58cb      	ldr	r3, [r1, r3]
 801617c:	f109 0901 	add.w	r9, r9, #1
 8016180:	b90b      	cbnz	r3, 8016186 <uxr_compute_acknack+0x9a>
 8016182:	4317      	orrs	r7, r2
 8016184:	b2bf      	uxth	r7, r7
 8016186:	454d      	cmp	r5, r9
 8016188:	d1e3      	bne.n	8016152 <uxr_compute_acknack+0x66>
 801618a:	4638      	mov	r0, r7
 801618c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016190:	4607      	mov	r7, r0
 8016192:	4638      	mov	r0, r7
 8016194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016198 <uxr_init_output_best_effort_stream>:
 8016198:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801619c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80161a0:	6001      	str	r1, [r0, #0]
 80161a2:	7303      	strb	r3, [r0, #12]
 80161a4:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80161a8:	4770      	bx	lr
 80161aa:	bf00      	nop

080161ac <uxr_reset_output_best_effort_stream>:
 80161ac:	7b02      	ldrb	r2, [r0, #12]
 80161ae:	6042      	str	r2, [r0, #4]
 80161b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80161b4:	81c3      	strh	r3, [r0, #14]
 80161b6:	4770      	bx	lr

080161b8 <uxr_prepare_best_effort_buffer_to_write>:
 80161b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161ba:	4604      	mov	r4, r0
 80161bc:	b083      	sub	sp, #12
 80161be:	6840      	ldr	r0, [r0, #4]
 80161c0:	460d      	mov	r5, r1
 80161c2:	4616      	mov	r6, r2
 80161c4:	f7fa fafe 	bl	80107c4 <uxr_submessage_padding>
 80161c8:	6863      	ldr	r3, [r4, #4]
 80161ca:	4418      	add	r0, r3
 80161cc:	68a3      	ldr	r3, [r4, #8]
 80161ce:	1942      	adds	r2, r0, r5
 80161d0:	4293      	cmp	r3, r2
 80161d2:	bf2c      	ite	cs
 80161d4:	2701      	movcs	r7, #1
 80161d6:	2700      	movcc	r7, #0
 80161d8:	d202      	bcs.n	80161e0 <uxr_prepare_best_effort_buffer_to_write+0x28>
 80161da:	4638      	mov	r0, r7
 80161dc:	b003      	add	sp, #12
 80161de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80161e0:	9000      	str	r0, [sp, #0]
 80161e2:	6821      	ldr	r1, [r4, #0]
 80161e4:	4630      	mov	r0, r6
 80161e6:	2300      	movs	r3, #0
 80161e8:	f7f5 fc96 	bl	800bb18 <ucdr_init_buffer_origin_offset>
 80161ec:	6861      	ldr	r1, [r4, #4]
 80161ee:	4638      	mov	r0, r7
 80161f0:	4429      	add	r1, r5
 80161f2:	6061      	str	r1, [r4, #4]
 80161f4:	b003      	add	sp, #12
 80161f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080161f8 <uxr_prepare_best_effort_buffer_to_send>:
 80161f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161fc:	4604      	mov	r4, r0
 80161fe:	461d      	mov	r5, r3
 8016200:	6840      	ldr	r0, [r0, #4]
 8016202:	7b23      	ldrb	r3, [r4, #12]
 8016204:	4298      	cmp	r0, r3
 8016206:	bf8c      	ite	hi
 8016208:	2601      	movhi	r6, #1
 801620a:	2600      	movls	r6, #0
 801620c:	d802      	bhi.n	8016214 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801620e:	4630      	mov	r0, r6
 8016210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016214:	4688      	mov	r8, r1
 8016216:	89e0      	ldrh	r0, [r4, #14]
 8016218:	2101      	movs	r1, #1
 801621a:	4617      	mov	r7, r2
 801621c:	f000 fb0c 	bl	8016838 <uxr_seq_num_add>
 8016220:	6823      	ldr	r3, [r4, #0]
 8016222:	81e0      	strh	r0, [r4, #14]
 8016224:	8028      	strh	r0, [r5, #0]
 8016226:	f8c8 3000 	str.w	r3, [r8]
 801622a:	6863      	ldr	r3, [r4, #4]
 801622c:	603b      	str	r3, [r7, #0]
 801622e:	7b23      	ldrb	r3, [r4, #12]
 8016230:	6063      	str	r3, [r4, #4]
 8016232:	4630      	mov	r0, r6
 8016234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016238 <on_full_output_buffer>:
 8016238:	b538      	push	{r3, r4, r5, lr}
 801623a:	6802      	ldr	r2, [r0, #0]
 801623c:	460c      	mov	r4, r1
 801623e:	6809      	ldr	r1, [r1, #0]
 8016240:	8923      	ldrh	r3, [r4, #8]
 8016242:	eba2 0c01 	sub.w	ip, r2, r1
 8016246:	6862      	ldr	r2, [r4, #4]
 8016248:	fbb2 f2f3 	udiv	r2, r2, r3
 801624c:	fbbc fcf2 	udiv	ip, ip, r2
 8016250:	f10c 0c01 	add.w	ip, ip, #1
 8016254:	fa1f fc8c 	uxth.w	ip, ip
 8016258:	fbbc fef3 	udiv	lr, ip, r3
 801625c:	fb03 c31e 	mls	r3, r3, lr, ip
 8016260:	b29b      	uxth	r3, r3
 8016262:	fb02 f303 	mul.w	r3, r2, r3
 8016266:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801626a:	58ca      	ldr	r2, [r1, r3]
 801626c:	4463      	add	r3, ip
 801626e:	eba2 020c 	sub.w	r2, r2, ip
 8016272:	3308      	adds	r3, #8
 8016274:	4605      	mov	r5, r0
 8016276:	4419      	add	r1, r3
 8016278:	3a04      	subs	r2, #4
 801627a:	6903      	ldr	r3, [r0, #16]
 801627c:	f7f5 fc56 	bl	800bb2c <ucdr_init_buffer_origin>
 8016280:	4628      	mov	r0, r5
 8016282:	4903      	ldr	r1, [pc, #12]	@ (8016290 <on_full_output_buffer+0x58>)
 8016284:	4622      	mov	r2, r4
 8016286:	f7f5 fc2d 	bl	800bae4 <ucdr_set_on_full_buffer_callback>
 801628a:	2000      	movs	r0, #0
 801628c:	bd38      	pop	{r3, r4, r5, pc}
 801628e:	bf00      	nop
 8016290:	08016239 	.word	0x08016239

08016294 <uxr_init_output_reliable_stream>:
 8016294:	b410      	push	{r4}
 8016296:	f89d c004 	ldrb.w	ip, [sp, #4]
 801629a:	8103      	strh	r3, [r0, #8]
 801629c:	e9c0 1200 	strd	r1, r2, [r0]
 80162a0:	f880 c00c 	strb.w	ip, [r0, #12]
 80162a4:	b1d3      	cbz	r3, 80162dc <uxr_init_output_reliable_stream+0x48>
 80162a6:	f8c1 c000 	str.w	ip, [r1]
 80162aa:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80162ae:	f1bc 0f01 	cmp.w	ip, #1
 80162b2:	d913      	bls.n	80162dc <uxr_init_output_reliable_stream+0x48>
 80162b4:	2301      	movs	r3, #1
 80162b6:	fbb3 f1fc 	udiv	r1, r3, ip
 80162ba:	fb0c 3111 	mls	r1, ip, r1, r3
 80162be:	b289      	uxth	r1, r1
 80162c0:	6842      	ldr	r2, [r0, #4]
 80162c2:	6804      	ldr	r4, [r0, #0]
 80162c4:	fbb2 f2fc 	udiv	r2, r2, ip
 80162c8:	fb01 f202 	mul.w	r2, r1, r2
 80162cc:	7b01      	ldrb	r1, [r0, #12]
 80162ce:	50a1      	str	r1, [r4, r2]
 80162d0:	3301      	adds	r3, #1
 80162d2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80162d6:	b29b      	uxth	r3, r3
 80162d8:	459c      	cmp	ip, r3
 80162da:	d8ec      	bhi.n	80162b6 <uxr_init_output_reliable_stream+0x22>
 80162dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80162e0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80162e4:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80162e8:	4905      	ldr	r1, [pc, #20]	@ (8016300 <uxr_init_output_reliable_stream+0x6c>)
 80162ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80162ee:	f8c0 100e 	str.w	r1, [r0, #14]
 80162f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80162f6:	2300      	movs	r3, #0
 80162f8:	8242      	strh	r2, [r0, #18]
 80162fa:	8403      	strh	r3, [r0, #32]
 80162fc:	4770      	bx	lr
 80162fe:	bf00      	nop
 8016300:	ffff0000 	.word	0xffff0000

08016304 <uxr_reset_output_reliable_stream>:
 8016304:	8901      	ldrh	r1, [r0, #8]
 8016306:	b1b1      	cbz	r1, 8016336 <uxr_reset_output_reliable_stream+0x32>
 8016308:	f04f 0c00 	mov.w	ip, #0
 801630c:	4663      	mov	r3, ip
 801630e:	fbb3 f2f1 	udiv	r2, r3, r1
 8016312:	fb01 3312 	mls	r3, r1, r2, r3
 8016316:	b29b      	uxth	r3, r3
 8016318:	6842      	ldr	r2, [r0, #4]
 801631a:	fbb2 f2f1 	udiv	r2, r2, r1
 801631e:	6801      	ldr	r1, [r0, #0]
 8016320:	fb02 f303 	mul.w	r3, r2, r3
 8016324:	7b02      	ldrb	r2, [r0, #12]
 8016326:	50ca      	str	r2, [r1, r3]
 8016328:	f10c 0c01 	add.w	ip, ip, #1
 801632c:	8901      	ldrh	r1, [r0, #8]
 801632e:	fa1f f38c 	uxth.w	r3, ip
 8016332:	4299      	cmp	r1, r3
 8016334:	d8eb      	bhi.n	801630e <uxr_reset_output_reliable_stream+0xa>
 8016336:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801633a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801633e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8016342:	4904      	ldr	r1, [pc, #16]	@ (8016354 <uxr_reset_output_reliable_stream+0x50>)
 8016344:	f8c0 100e 	str.w	r1, [r0, #14]
 8016348:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801634c:	2300      	movs	r3, #0
 801634e:	8242      	strh	r2, [r0, #18]
 8016350:	8403      	strh	r3, [r0, #32]
 8016352:	4770      	bx	lr
 8016354:	ffff0000 	.word	0xffff0000

08016358 <uxr_prepare_reliable_buffer_to_write>:
 8016358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801635c:	4604      	mov	r4, r0
 801635e:	b091      	sub	sp, #68	@ 0x44
 8016360:	8900      	ldrh	r0, [r0, #8]
 8016362:	89e6      	ldrh	r6, [r4, #14]
 8016364:	6823      	ldr	r3, [r4, #0]
 8016366:	9204      	str	r2, [sp, #16]
 8016368:	fbb6 f2f0 	udiv	r2, r6, r0
 801636c:	fb00 6212 	mls	r2, r0, r2, r6
 8016370:	b292      	uxth	r2, r2
 8016372:	6865      	ldr	r5, [r4, #4]
 8016374:	fbb5 f5f0 	udiv	r5, r5, r0
 8016378:	fb05 3202 	mla	r2, r5, r2, r3
 801637c:	3204      	adds	r2, #4
 801637e:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8016382:	f894 900c 	ldrb.w	r9, [r4, #12]
 8016386:	9203      	str	r2, [sp, #12]
 8016388:	468b      	mov	fp, r1
 801638a:	1f2f      	subs	r7, r5, #4
 801638c:	2800      	cmp	r0, #0
 801638e:	f000 814c 	beq.w	801662a <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8016392:	f04f 0c00 	mov.w	ip, #0
 8016396:	46e2      	mov	sl, ip
 8016398:	4661      	mov	r1, ip
 801639a:	fbb1 f2f0 	udiv	r2, r1, r0
 801639e:	fb00 1212 	mls	r2, r0, r2, r1
 80163a2:	b292      	uxth	r2, r2
 80163a4:	fb05 f202 	mul.w	r2, r5, r2
 80163a8:	f10c 0c01 	add.w	ip, ip, #1
 80163ac:	589a      	ldr	r2, [r3, r2]
 80163ae:	454a      	cmp	r2, r9
 80163b0:	bf08      	it	eq
 80163b2:	f10a 0a01 	addeq.w	sl, sl, #1
 80163b6:	fa1f f18c 	uxth.w	r1, ip
 80163ba:	bf08      	it	eq
 80163bc:	fa1f fa8a 	uxtheq.w	sl, sl
 80163c0:	4281      	cmp	r1, r0
 80163c2:	d3ea      	bcc.n	801639a <uxr_prepare_reliable_buffer_to_write+0x42>
 80163c4:	4640      	mov	r0, r8
 80163c6:	2104      	movs	r1, #4
 80163c8:	f8cd a014 	str.w	sl, [sp, #20]
 80163cc:	f7f5 fbba 	bl	800bb44 <ucdr_alignment>
 80163d0:	4480      	add	r8, r0
 80163d2:	eb08 020b 	add.w	r2, r8, fp
 80163d6:	42ba      	cmp	r2, r7
 80163d8:	f240 80cd 	bls.w	8016576 <uxr_prepare_reliable_buffer_to_write+0x21e>
 80163dc:	7b22      	ldrb	r2, [r4, #12]
 80163de:	445a      	add	r2, fp
 80163e0:	42ba      	cmp	r2, r7
 80163e2:	f240 80b5 	bls.w	8016550 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80163e6:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 80163ea:	33fc      	adds	r3, #252	@ 0xfc
 80163ec:	b2ba      	uxth	r2, r7
 80163ee:	4413      	add	r3, r2
 80163f0:	b29b      	uxth	r3, r3
 80163f2:	fb0a f903 	mul.w	r9, sl, r3
 80163f6:	45d9      	cmp	r9, fp
 80163f8:	9305      	str	r3, [sp, #20]
 80163fa:	9306      	str	r3, [sp, #24]
 80163fc:	f0c0 80b7 	bcc.w	801656e <uxr_prepare_reliable_buffer_to_write+0x216>
 8016400:	f108 0304 	add.w	r3, r8, #4
 8016404:	42bb      	cmp	r3, r7
 8016406:	f080 80db 	bcs.w	80165c0 <uxr_prepare_reliable_buffer_to_write+0x268>
 801640a:	f1a2 0904 	sub.w	r9, r2, #4
 801640e:	eba9 0908 	sub.w	r9, r9, r8
 8016412:	9b05      	ldr	r3, [sp, #20]
 8016414:	fa1f f989 	uxth.w	r9, r9
 8016418:	ebab 0b09 	sub.w	fp, fp, r9
 801641c:	fbbb f2f3 	udiv	r2, fp, r3
 8016420:	fb03 b312 	mls	r3, r3, r2, fp
 8016424:	2b00      	cmp	r3, #0
 8016426:	f000 80c8 	beq.w	80165ba <uxr_prepare_reliable_buffer_to_write+0x262>
 801642a:	3201      	adds	r2, #1
 801642c:	b292      	uxth	r2, r2
 801642e:	9306      	str	r3, [sp, #24]
 8016430:	4552      	cmp	r2, sl
 8016432:	f200 809c 	bhi.w	801656e <uxr_prepare_reliable_buffer_to_write+0x216>
 8016436:	f10d 0b20 	add.w	fp, sp, #32
 801643a:	2a00      	cmp	r2, #0
 801643c:	d042      	beq.n	80164c4 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801643e:	f8cd 801c 	str.w	r8, [sp, #28]
 8016442:	f04f 0a00 	mov.w	sl, #0
 8016446:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801644a:	9505      	str	r5, [sp, #20]
 801644c:	f10d 0b20 	add.w	fp, sp, #32
 8016450:	4615      	mov	r5, r2
 8016452:	e000      	b.n	8016456 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8016454:	46c1      	mov	r9, r8
 8016456:	8920      	ldrh	r0, [r4, #8]
 8016458:	fbb6 f2f0 	udiv	r2, r6, r0
 801645c:	fb00 6112 	mls	r1, r0, r2, r6
 8016460:	b28a      	uxth	r2, r1
 8016462:	6863      	ldr	r3, [r4, #4]
 8016464:	fbb3 f1f0 	udiv	r1, r3, r0
 8016468:	6823      	ldr	r3, [r4, #0]
 801646a:	fb02 f101 	mul.w	r1, r2, r1
 801646e:	3104      	adds	r1, #4
 8016470:	4419      	add	r1, r3
 8016472:	4658      	mov	r0, fp
 8016474:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8016478:	9200      	str	r2, [sp, #0]
 801647a:	2300      	movs	r3, #0
 801647c:	463a      	mov	r2, r7
 801647e:	f7f5 fb4b 	bl	800bb18 <ucdr_init_buffer_origin_offset>
 8016482:	464a      	mov	r2, r9
 8016484:	2300      	movs	r3, #0
 8016486:	210d      	movs	r1, #13
 8016488:	4658      	mov	r0, fp
 801648a:	f7fa f95b 	bl	8010744 <uxr_buffer_submessage_header>
 801648e:	8921      	ldrh	r1, [r4, #8]
 8016490:	fbb6 f2f1 	udiv	r2, r6, r1
 8016494:	fb01 6212 	mls	r2, r1, r2, r6
 8016498:	b292      	uxth	r2, r2
 801649a:	6863      	ldr	r3, [r4, #4]
 801649c:	fbb3 f3f1 	udiv	r3, r3, r1
 80164a0:	fb02 f303 	mul.w	r3, r2, r3
 80164a4:	6822      	ldr	r2, [r4, #0]
 80164a6:	4630      	mov	r0, r6
 80164a8:	50d7      	str	r7, [r2, r3]
 80164aa:	2101      	movs	r1, #1
 80164ac:	f000 f9c4 	bl	8016838 <uxr_seq_num_add>
 80164b0:	f10a 0a01 	add.w	sl, sl, #1
 80164b4:	fa1f f38a 	uxth.w	r3, sl
 80164b8:	429d      	cmp	r5, r3
 80164ba:	4606      	mov	r6, r0
 80164bc:	d8ca      	bhi.n	8016454 <uxr_prepare_reliable_buffer_to_write+0xfc>
 80164be:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80164c2:	9d05      	ldr	r5, [sp, #20]
 80164c4:	8920      	ldrh	r0, [r4, #8]
 80164c6:	fbb6 f3f0 	udiv	r3, r6, r0
 80164ca:	fb00 6313 	mls	r3, r0, r3, r6
 80164ce:	b299      	uxth	r1, r3
 80164d0:	6863      	ldr	r3, [r4, #4]
 80164d2:	fbb3 f3f0 	udiv	r3, r3, r0
 80164d6:	fb01 f303 	mul.w	r3, r1, r3
 80164da:	6821      	ldr	r1, [r4, #0]
 80164dc:	3304      	adds	r3, #4
 80164de:	4419      	add	r1, r3
 80164e0:	463a      	mov	r2, r7
 80164e2:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80164e6:	9000      	str	r0, [sp, #0]
 80164e8:	2300      	movs	r3, #0
 80164ea:	4658      	mov	r0, fp
 80164ec:	f7f5 fb14 	bl	800bb18 <ucdr_init_buffer_origin_offset>
 80164f0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80164f4:	4658      	mov	r0, fp
 80164f6:	fa1f f289 	uxth.w	r2, r9
 80164fa:	2302      	movs	r3, #2
 80164fc:	210d      	movs	r1, #13
 80164fe:	f7fa f921 	bl	8010744 <uxr_buffer_submessage_header>
 8016502:	9b03      	ldr	r3, [sp, #12]
 8016504:	8927      	ldrh	r7, [r4, #8]
 8016506:	7b20      	ldrb	r0, [r4, #12]
 8016508:	f108 0104 	add.w	r1, r8, #4
 801650c:	440b      	add	r3, r1
 801650e:	4619      	mov	r1, r3
 8016510:	fbb6 f3f7 	udiv	r3, r6, r7
 8016514:	fb07 6313 	mls	r3, r7, r3, r6
 8016518:	f1a5 0208 	sub.w	r2, r5, #8
 801651c:	b29d      	uxth	r5, r3
 801651e:	3004      	adds	r0, #4
 8016520:	6863      	ldr	r3, [r4, #4]
 8016522:	fbb3 f3f7 	udiv	r3, r3, r7
 8016526:	fb05 f303 	mul.w	r3, r5, r3
 801652a:	6825      	ldr	r5, [r4, #0]
 801652c:	4448      	add	r0, r9
 801652e:	50e8      	str	r0, [r5, r3]
 8016530:	9d04      	ldr	r5, [sp, #16]
 8016532:	eba2 0208 	sub.w	r2, r2, r8
 8016536:	4628      	mov	r0, r5
 8016538:	f7f5 fb00 	bl	800bb3c <ucdr_init_buffer>
 801653c:	4628      	mov	r0, r5
 801653e:	493c      	ldr	r1, [pc, #240]	@ (8016630 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8016540:	4622      	mov	r2, r4
 8016542:	f7f5 facf 	bl	800bae4 <ucdr_set_on_full_buffer_callback>
 8016546:	2001      	movs	r0, #1
 8016548:	81e6      	strh	r6, [r4, #14]
 801654a:	b011      	add	sp, #68	@ 0x44
 801654c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016550:	2101      	movs	r1, #1
 8016552:	89e0      	ldrh	r0, [r4, #14]
 8016554:	f000 f970 	bl	8016838 <uxr_seq_num_add>
 8016558:	8921      	ldrh	r1, [r4, #8]
 801655a:	4605      	mov	r5, r0
 801655c:	8a60      	ldrh	r0, [r4, #18]
 801655e:	f000 f96b 	bl	8016838 <uxr_seq_num_add>
 8016562:	4601      	mov	r1, r0
 8016564:	4628      	mov	r0, r5
 8016566:	f000 f96f 	bl	8016848 <uxr_seq_num_cmp>
 801656a:	2800      	cmp	r0, #0
 801656c:	dd42      	ble.n	80165f4 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801656e:	2000      	movs	r0, #0
 8016570:	b011      	add	sp, #68	@ 0x44
 8016572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016576:	8921      	ldrh	r1, [r4, #8]
 8016578:	8a60      	ldrh	r0, [r4, #18]
 801657a:	9205      	str	r2, [sp, #20]
 801657c:	f000 f95c 	bl	8016838 <uxr_seq_num_add>
 8016580:	4601      	mov	r1, r0
 8016582:	4630      	mov	r0, r6
 8016584:	f000 f960 	bl	8016848 <uxr_seq_num_cmp>
 8016588:	2800      	cmp	r0, #0
 801658a:	9a05      	ldr	r2, [sp, #20]
 801658c:	dcef      	bgt.n	801656e <uxr_prepare_reliable_buffer_to_write+0x216>
 801658e:	8927      	ldrh	r7, [r4, #8]
 8016590:	fbb6 f3f7 	udiv	r3, r6, r7
 8016594:	fb07 6313 	mls	r3, r7, r3, r6
 8016598:	b29d      	uxth	r5, r3
 801659a:	6863      	ldr	r3, [r4, #4]
 801659c:	6824      	ldr	r4, [r4, #0]
 801659e:	fbb3 f3f7 	udiv	r3, r3, r7
 80165a2:	fb05 f303 	mul.w	r3, r5, r3
 80165a6:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80165aa:	50e2      	str	r2, [r4, r3]
 80165ac:	2300      	movs	r3, #0
 80165ae:	f8cd 8000 	str.w	r8, [sp]
 80165b2:	f7f5 fab1 	bl	800bb18 <ucdr_init_buffer_origin_offset>
 80165b6:	2001      	movs	r0, #1
 80165b8:	e7da      	b.n	8016570 <uxr_prepare_reliable_buffer_to_write+0x218>
 80165ba:	b293      	uxth	r3, r2
 80165bc:	461a      	mov	r2, r3
 80165be:	e737      	b.n	8016430 <uxr_prepare_reliable_buffer_to_write+0xd8>
 80165c0:	4630      	mov	r0, r6
 80165c2:	2101      	movs	r1, #1
 80165c4:	9207      	str	r2, [sp, #28]
 80165c6:	f000 f937 	bl	8016838 <uxr_seq_num_add>
 80165ca:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80165ce:	fbb0 f1fc 	udiv	r1, r0, ip
 80165d2:	fb0c 0111 	mls	r1, ip, r1, r0
 80165d6:	4606      	mov	r6, r0
 80165d8:	b288      	uxth	r0, r1
 80165da:	6863      	ldr	r3, [r4, #4]
 80165dc:	fbb3 f1fc 	udiv	r1, r3, ip
 80165e0:	6823      	ldr	r3, [r4, #0]
 80165e2:	9a07      	ldr	r2, [sp, #28]
 80165e4:	fb00 f101 	mul.w	r1, r0, r1
 80165e8:	3104      	adds	r1, #4
 80165ea:	440b      	add	r3, r1
 80165ec:	9303      	str	r3, [sp, #12]
 80165ee:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80165f2:	e70a      	b.n	801640a <uxr_prepare_reliable_buffer_to_write+0xb2>
 80165f4:	8921      	ldrh	r1, [r4, #8]
 80165f6:	fbb5 f3f1 	udiv	r3, r5, r1
 80165fa:	fb01 5313 	mls	r3, r1, r3, r5
 80165fe:	b29a      	uxth	r2, r3
 8016600:	6863      	ldr	r3, [r4, #4]
 8016602:	fbb3 f3f1 	udiv	r3, r3, r1
 8016606:	6821      	ldr	r1, [r4, #0]
 8016608:	9804      	ldr	r0, [sp, #16]
 801660a:	fb02 f303 	mul.w	r3, r2, r3
 801660e:	3304      	adds	r3, #4
 8016610:	7b22      	ldrb	r2, [r4, #12]
 8016612:	4419      	add	r1, r3
 8016614:	445a      	add	r2, fp
 8016616:	f841 2c04 	str.w	r2, [r1, #-4]
 801661a:	7b23      	ldrb	r3, [r4, #12]
 801661c:	9300      	str	r3, [sp, #0]
 801661e:	2300      	movs	r3, #0
 8016620:	f7f5 fa7a 	bl	800bb18 <ucdr_init_buffer_origin_offset>
 8016624:	81e5      	strh	r5, [r4, #14]
 8016626:	2001      	movs	r0, #1
 8016628:	e7a2      	b.n	8016570 <uxr_prepare_reliable_buffer_to_write+0x218>
 801662a:	4682      	mov	sl, r0
 801662c:	e6ca      	b.n	80163c4 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801662e:	bf00      	nop
 8016630:	08016239 	.word	0x08016239

08016634 <uxr_prepare_next_reliable_buffer_to_send>:
 8016634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016636:	4604      	mov	r4, r0
 8016638:	460f      	mov	r7, r1
 801663a:	8a00      	ldrh	r0, [r0, #16]
 801663c:	2101      	movs	r1, #1
 801663e:	4616      	mov	r6, r2
 8016640:	461d      	mov	r5, r3
 8016642:	f000 f8f9 	bl	8016838 <uxr_seq_num_add>
 8016646:	8028      	strh	r0, [r5, #0]
 8016648:	8922      	ldrh	r2, [r4, #8]
 801664a:	fbb0 f3f2 	udiv	r3, r0, r2
 801664e:	fb02 0c13 	mls	ip, r2, r3, r0
 8016652:	fa1f fc8c 	uxth.w	ip, ip
 8016656:	6863      	ldr	r3, [r4, #4]
 8016658:	fbb3 f3f2 	udiv	r3, r3, r2
 801665c:	fb0c fc03 	mul.w	ip, ip, r3
 8016660:	6823      	ldr	r3, [r4, #0]
 8016662:	89e1      	ldrh	r1, [r4, #14]
 8016664:	f10c 0c04 	add.w	ip, ip, #4
 8016668:	4463      	add	r3, ip
 801666a:	603b      	str	r3, [r7, #0]
 801666c:	6823      	ldr	r3, [r4, #0]
 801666e:	449c      	add	ip, r3
 8016670:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8016674:	6033      	str	r3, [r6, #0]
 8016676:	f000 f8e7 	bl	8016848 <uxr_seq_num_cmp>
 801667a:	2800      	cmp	r0, #0
 801667c:	dd01      	ble.n	8016682 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801667e:	2000      	movs	r0, #0
 8016680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016682:	7b23      	ldrb	r3, [r4, #12]
 8016684:	6832      	ldr	r2, [r6, #0]
 8016686:	429a      	cmp	r2, r3
 8016688:	d9f9      	bls.n	801667e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801668a:	8a61      	ldrh	r1, [r4, #18]
 801668c:	8a20      	ldrh	r0, [r4, #16]
 801668e:	f000 f8d7 	bl	8016840 <uxr_seq_num_sub>
 8016692:	8923      	ldrh	r3, [r4, #8]
 8016694:	4283      	cmp	r3, r0
 8016696:	d0f2      	beq.n	801667e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016698:	8828      	ldrh	r0, [r5, #0]
 801669a:	89e3      	ldrh	r3, [r4, #14]
 801669c:	8220      	strh	r0, [r4, #16]
 801669e:	4298      	cmp	r0, r3
 80166a0:	d001      	beq.n	80166a6 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80166a2:	2001      	movs	r0, #1
 80166a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80166a6:	2101      	movs	r1, #1
 80166a8:	f000 f8c6 	bl	8016838 <uxr_seq_num_add>
 80166ac:	81e0      	strh	r0, [r4, #14]
 80166ae:	2001      	movs	r0, #1
 80166b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80166b2:	bf00      	nop

080166b4 <uxr_update_output_stream_heartbeat_timestamp>:
 80166b4:	b570      	push	{r4, r5, r6, lr}
 80166b6:	8a01      	ldrh	r1, [r0, #16]
 80166b8:	4604      	mov	r4, r0
 80166ba:	8a40      	ldrh	r0, [r0, #18]
 80166bc:	4615      	mov	r5, r2
 80166be:	461e      	mov	r6, r3
 80166c0:	f000 f8c2 	bl	8016848 <uxr_seq_num_cmp>
 80166c4:	2800      	cmp	r0, #0
 80166c6:	db07      	blt.n	80166d8 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80166c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80166cc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80166d0:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80166d4:	2000      	movs	r0, #0
 80166d6:	bd70      	pop	{r4, r5, r6, pc}
 80166d8:	f894 0020 	ldrb.w	r0, [r4, #32]
 80166dc:	b940      	cbnz	r0, 80166f0 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80166de:	2301      	movs	r3, #1
 80166e0:	f884 3020 	strb.w	r3, [r4, #32]
 80166e4:	3564      	adds	r5, #100	@ 0x64
 80166e6:	f146 0600 	adc.w	r6, r6, #0
 80166ea:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80166ee:	bd70      	pop	{r4, r5, r6, pc}
 80166f0:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80166f4:	4295      	cmp	r5, r2
 80166f6:	eb76 0303 	sbcs.w	r3, r6, r3
 80166fa:	bfa5      	ittet	ge
 80166fc:	3001      	addge	r0, #1
 80166fe:	f884 0020 	strbge.w	r0, [r4, #32]
 8016702:	2000      	movlt	r0, #0
 8016704:	2001      	movge	r0, #1
 8016706:	e7ed      	b.n	80166e4 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08016708 <uxr_begin_output_nack_buffer_it>:
 8016708:	8a40      	ldrh	r0, [r0, #18]
 801670a:	4770      	bx	lr

0801670c <uxr_next_reliable_nack_buffer_to_send>:
 801670c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016710:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8016714:	b082      	sub	sp, #8
 8016716:	f1b8 0f00 	cmp.w	r8, #0
 801671a:	d011      	beq.n	8016740 <uxr_next_reliable_nack_buffer_to_send+0x34>
 801671c:	4604      	mov	r4, r0
 801671e:	8818      	ldrh	r0, [r3, #0]
 8016720:	460e      	mov	r6, r1
 8016722:	4617      	mov	r7, r2
 8016724:	461d      	mov	r5, r3
 8016726:	2101      	movs	r1, #1
 8016728:	f000 f886 	bl	8016838 <uxr_seq_num_add>
 801672c:	8028      	strh	r0, [r5, #0]
 801672e:	8a21      	ldrh	r1, [r4, #16]
 8016730:	f000 f88a 	bl	8016848 <uxr_seq_num_cmp>
 8016734:	2800      	cmp	r0, #0
 8016736:	dd07      	ble.n	8016748 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8016738:	f04f 0800 	mov.w	r8, #0
 801673c:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8016740:	4640      	mov	r0, r8
 8016742:	b002      	add	sp, #8
 8016744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016748:	8921      	ldrh	r1, [r4, #8]
 801674a:	8828      	ldrh	r0, [r5, #0]
 801674c:	6823      	ldr	r3, [r4, #0]
 801674e:	fbb0 f2f1 	udiv	r2, r0, r1
 8016752:	fb01 0c12 	mls	ip, r1, r2, r0
 8016756:	fa1f f28c 	uxth.w	r2, ip
 801675a:	9301      	str	r3, [sp, #4]
 801675c:	6863      	ldr	r3, [r4, #4]
 801675e:	fbb3 fcf1 	udiv	ip, r3, r1
 8016762:	9b01      	ldr	r3, [sp, #4]
 8016764:	fb02 fc0c 	mul.w	ip, r2, ip
 8016768:	f10c 0c04 	add.w	ip, ip, #4
 801676c:	4463      	add	r3, ip
 801676e:	6033      	str	r3, [r6, #0]
 8016770:	6823      	ldr	r3, [r4, #0]
 8016772:	4463      	add	r3, ip
 8016774:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016778:	603b      	str	r3, [r7, #0]
 801677a:	7b22      	ldrb	r2, [r4, #12]
 801677c:	429a      	cmp	r2, r3
 801677e:	d0d2      	beq.n	8016726 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8016780:	4640      	mov	r0, r8
 8016782:	b002      	add	sp, #8
 8016784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016788 <uxr_process_acknack>:
 8016788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801678a:	4604      	mov	r4, r0
 801678c:	460e      	mov	r6, r1
 801678e:	4610      	mov	r0, r2
 8016790:	2101      	movs	r1, #1
 8016792:	f000 f855 	bl	8016840 <uxr_seq_num_sub>
 8016796:	8a61      	ldrh	r1, [r4, #18]
 8016798:	f000 f852 	bl	8016840 <uxr_seq_num_sub>
 801679c:	b1c0      	cbz	r0, 80167d0 <uxr_process_acknack+0x48>
 801679e:	4605      	mov	r5, r0
 80167a0:	2700      	movs	r7, #0
 80167a2:	2101      	movs	r1, #1
 80167a4:	8a60      	ldrh	r0, [r4, #18]
 80167a6:	f000 f847 	bl	8016838 <uxr_seq_num_add>
 80167aa:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80167ae:	fbb0 f1fc 	udiv	r1, r0, ip
 80167b2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80167b6:	fb0c 0111 	mls	r1, ip, r1, r0
 80167ba:	b289      	uxth	r1, r1
 80167bc:	3701      	adds	r7, #1
 80167be:	fbb3 f3fc 	udiv	r3, r3, ip
 80167c2:	fb01 f303 	mul.w	r3, r1, r3
 80167c6:	42bd      	cmp	r5, r7
 80167c8:	7b21      	ldrb	r1, [r4, #12]
 80167ca:	8260      	strh	r0, [r4, #18]
 80167cc:	50d1      	str	r1, [r2, r3]
 80167ce:	d1e8      	bne.n	80167a2 <uxr_process_acknack+0x1a>
 80167d0:	3e00      	subs	r6, #0
 80167d2:	f04f 0300 	mov.w	r3, #0
 80167d6:	bf18      	it	ne
 80167d8:	2601      	movne	r6, #1
 80167da:	f884 3020 	strb.w	r3, [r4, #32]
 80167de:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80167e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080167e4 <uxr_is_output_up_to_date>:
 80167e4:	8a01      	ldrh	r1, [r0, #16]
 80167e6:	8a40      	ldrh	r0, [r0, #18]
 80167e8:	b508      	push	{r3, lr}
 80167ea:	f000 f82d 	bl	8016848 <uxr_seq_num_cmp>
 80167ee:	fab0 f080 	clz	r0, r0
 80167f2:	0940      	lsrs	r0, r0, #5
 80167f4:	bd08      	pop	{r3, pc}
 80167f6:	bf00      	nop

080167f8 <get_available_free_slots>:
 80167f8:	8902      	ldrh	r2, [r0, #8]
 80167fa:	b1da      	cbz	r2, 8016834 <get_available_free_slots+0x3c>
 80167fc:	b530      	push	{r4, r5, lr}
 80167fe:	2100      	movs	r1, #0
 8016800:	6843      	ldr	r3, [r0, #4]
 8016802:	6805      	ldr	r5, [r0, #0]
 8016804:	7b04      	ldrb	r4, [r0, #12]
 8016806:	fbb3 fef2 	udiv	lr, r3, r2
 801680a:	4608      	mov	r0, r1
 801680c:	460b      	mov	r3, r1
 801680e:	fbb3 fcf2 	udiv	ip, r3, r2
 8016812:	fb02 331c 	mls	r3, r2, ip, r3
 8016816:	b29b      	uxth	r3, r3
 8016818:	fb0e f303 	mul.w	r3, lr, r3
 801681c:	3101      	adds	r1, #1
 801681e:	f855 c003 	ldr.w	ip, [r5, r3]
 8016822:	4564      	cmp	r4, ip
 8016824:	bf08      	it	eq
 8016826:	3001      	addeq	r0, #1
 8016828:	b28b      	uxth	r3, r1
 801682a:	bf08      	it	eq
 801682c:	b280      	uxtheq	r0, r0
 801682e:	4293      	cmp	r3, r2
 8016830:	d3ed      	bcc.n	801680e <get_available_free_slots+0x16>
 8016832:	bd30      	pop	{r4, r5, pc}
 8016834:	4610      	mov	r0, r2
 8016836:	4770      	bx	lr

08016838 <uxr_seq_num_add>:
 8016838:	4408      	add	r0, r1
 801683a:	b280      	uxth	r0, r0
 801683c:	4770      	bx	lr
 801683e:	bf00      	nop

08016840 <uxr_seq_num_sub>:
 8016840:	1a40      	subs	r0, r0, r1
 8016842:	b280      	uxth	r0, r0
 8016844:	4770      	bx	lr
 8016846:	bf00      	nop

08016848 <uxr_seq_num_cmp>:
 8016848:	4288      	cmp	r0, r1
 801684a:	d011      	beq.n	8016870 <uxr_seq_num_cmp+0x28>
 801684c:	d309      	bcc.n	8016862 <uxr_seq_num_cmp+0x1a>
 801684e:	4288      	cmp	r0, r1
 8016850:	d910      	bls.n	8016874 <uxr_seq_num_cmp+0x2c>
 8016852:	1a40      	subs	r0, r0, r1
 8016854:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8016858:	bfd4      	ite	le
 801685a:	2001      	movle	r0, #1
 801685c:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8016860:	4770      	bx	lr
 8016862:	1a0b      	subs	r3, r1, r0
 8016864:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016868:	daf1      	bge.n	801684e <uxr_seq_num_cmp+0x6>
 801686a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801686e:	4770      	bx	lr
 8016870:	2000      	movs	r0, #0
 8016872:	4770      	bx	lr
 8016874:	2001      	movs	r0, #1
 8016876:	4770      	bx	lr

08016878 <rcl_get_default_domain_id>:
 8016878:	b530      	push	{r4, r5, lr}
 801687a:	b083      	sub	sp, #12
 801687c:	2300      	movs	r3, #0
 801687e:	9300      	str	r3, [sp, #0]
 8016880:	b1d0      	cbz	r0, 80168b8 <rcl_get_default_domain_id+0x40>
 8016882:	4604      	mov	r4, r0
 8016884:	4669      	mov	r1, sp
 8016886:	4815      	ldr	r0, [pc, #84]	@ (80168dc <rcl_get_default_domain_id+0x64>)
 8016888:	f7fd ff66 	bl	8014758 <rcutils_get_env>
 801688c:	4602      	mov	r2, r0
 801688e:	b110      	cbz	r0, 8016896 <rcl_get_default_domain_id+0x1e>
 8016890:	2001      	movs	r0, #1
 8016892:	b003      	add	sp, #12
 8016894:	bd30      	pop	{r4, r5, pc}
 8016896:	9b00      	ldr	r3, [sp, #0]
 8016898:	b18b      	cbz	r3, 80168be <rcl_get_default_domain_id+0x46>
 801689a:	7818      	ldrb	r0, [r3, #0]
 801689c:	2800      	cmp	r0, #0
 801689e:	d0f8      	beq.n	8016892 <rcl_get_default_domain_id+0x1a>
 80168a0:	a901      	add	r1, sp, #4
 80168a2:	4618      	mov	r0, r3
 80168a4:	9201      	str	r2, [sp, #4]
 80168a6:	f000 fdc9 	bl	801743c <strtoul>
 80168aa:	4605      	mov	r5, r0
 80168ac:	b150      	cbz	r0, 80168c4 <rcl_get_default_domain_id+0x4c>
 80168ae:	1c43      	adds	r3, r0, #1
 80168b0:	d00d      	beq.n	80168ce <rcl_get_default_domain_id+0x56>
 80168b2:	6025      	str	r5, [r4, #0]
 80168b4:	2000      	movs	r0, #0
 80168b6:	e7ec      	b.n	8016892 <rcl_get_default_domain_id+0x1a>
 80168b8:	200b      	movs	r0, #11
 80168ba:	b003      	add	sp, #12
 80168bc:	bd30      	pop	{r4, r5, pc}
 80168be:	4618      	mov	r0, r3
 80168c0:	b003      	add	sp, #12
 80168c2:	bd30      	pop	{r4, r5, pc}
 80168c4:	9b01      	ldr	r3, [sp, #4]
 80168c6:	781b      	ldrb	r3, [r3, #0]
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d0f2      	beq.n	80168b2 <rcl_get_default_domain_id+0x3a>
 80168cc:	e7e0      	b.n	8016890 <rcl_get_default_domain_id+0x18>
 80168ce:	f001 f801 	bl	80178d4 <__errno>
 80168d2:	6803      	ldr	r3, [r0, #0]
 80168d4:	2b22      	cmp	r3, #34	@ 0x22
 80168d6:	d1ec      	bne.n	80168b2 <rcl_get_default_domain_id+0x3a>
 80168d8:	e7da      	b.n	8016890 <rcl_get_default_domain_id+0x18>
 80168da:	bf00      	nop
 80168dc:	080192bc 	.word	0x080192bc

080168e0 <rcl_expand_topic_name>:
 80168e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168e4:	b08b      	sub	sp, #44	@ 0x2c
 80168e6:	9306      	str	r3, [sp, #24]
 80168e8:	2800      	cmp	r0, #0
 80168ea:	f000 80ad 	beq.w	8016a48 <rcl_expand_topic_name+0x168>
 80168ee:	460e      	mov	r6, r1
 80168f0:	2900      	cmp	r1, #0
 80168f2:	f000 80a9 	beq.w	8016a48 <rcl_expand_topic_name+0x168>
 80168f6:	4617      	mov	r7, r2
 80168f8:	2a00      	cmp	r2, #0
 80168fa:	f000 80a5 	beq.w	8016a48 <rcl_expand_topic_name+0x168>
 80168fe:	2b00      	cmp	r3, #0
 8016900:	f000 80a2 	beq.w	8016a48 <rcl_expand_topic_name+0x168>
 8016904:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016906:	2b00      	cmp	r3, #0
 8016908:	f000 809e 	beq.w	8016a48 <rcl_expand_topic_name+0x168>
 801690c:	2200      	movs	r2, #0
 801690e:	a909      	add	r1, sp, #36	@ 0x24
 8016910:	4680      	mov	r8, r0
 8016912:	f000 fa57 	bl	8016dc4 <rcl_validate_topic_name>
 8016916:	4604      	mov	r4, r0
 8016918:	2800      	cmp	r0, #0
 801691a:	f040 8096 	bne.w	8016a4a <rcl_expand_topic_name+0x16a>
 801691e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016920:	2b00      	cmp	r3, #0
 8016922:	f040 809a 	bne.w	8016a5a <rcl_expand_topic_name+0x17a>
 8016926:	4602      	mov	r2, r0
 8016928:	a909      	add	r1, sp, #36	@ 0x24
 801692a:	4630      	mov	r0, r6
 801692c:	f7fe fb3e 	bl	8014fac <rmw_validate_node_name>
 8016930:	2800      	cmp	r0, #0
 8016932:	f040 808e 	bne.w	8016a52 <rcl_expand_topic_name+0x172>
 8016936:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016938:	2a00      	cmp	r2, #0
 801693a:	f040 8093 	bne.w	8016a64 <rcl_expand_topic_name+0x184>
 801693e:	a909      	add	r1, sp, #36	@ 0x24
 8016940:	4638      	mov	r0, r7
 8016942:	f7fe fb15 	bl	8014f70 <rmw_validate_namespace>
 8016946:	2800      	cmp	r0, #0
 8016948:	f040 8083 	bne.w	8016a52 <rcl_expand_topic_name+0x172>
 801694c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801694e:	2c00      	cmp	r4, #0
 8016950:	f040 80ed 	bne.w	8016b2e <rcl_expand_topic_name+0x24e>
 8016954:	217b      	movs	r1, #123	@ 0x7b
 8016956:	4640      	mov	r0, r8
 8016958:	f000 ff30 	bl	80177bc <strchr>
 801695c:	f898 3000 	ldrb.w	r3, [r8]
 8016960:	2b2f      	cmp	r3, #47	@ 0x2f
 8016962:	4605      	mov	r5, r0
 8016964:	f000 809e 	beq.w	8016aa4 <rcl_expand_topic_name+0x1c4>
 8016968:	2b7e      	cmp	r3, #126	@ 0x7e
 801696a:	f040 80a2 	bne.w	8016ab2 <rcl_expand_topic_name+0x1d2>
 801696e:	4638      	mov	r0, r7
 8016970:	f7e9 fc60 	bl	8000234 <strlen>
 8016974:	4a82      	ldr	r2, [pc, #520]	@ (8016b80 <rcl_expand_topic_name+0x2a0>)
 8016976:	4b83      	ldr	r3, [pc, #524]	@ (8016b84 <rcl_expand_topic_name+0x2a4>)
 8016978:	2801      	cmp	r0, #1
 801697a:	bf18      	it	ne
 801697c:	4613      	movne	r3, r2
 801697e:	9302      	str	r3, [sp, #8]
 8016980:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8016982:	9300      	str	r3, [sp, #0]
 8016984:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8016988:	f108 0301 	add.w	r3, r8, #1
 801698c:	9305      	str	r3, [sp, #20]
 801698e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016992:	9301      	str	r3, [sp, #4]
 8016994:	ab14      	add	r3, sp, #80	@ 0x50
 8016996:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016998:	f7fd ff06 	bl	80147a8 <rcutils_format_string_limit>
 801699c:	4682      	mov	sl, r0
 801699e:	2800      	cmp	r0, #0
 80169a0:	f000 80c7 	beq.w	8016b32 <rcl_expand_topic_name+0x252>
 80169a4:	2d00      	cmp	r5, #0
 80169a6:	f000 80a2 	beq.w	8016aee <rcl_expand_topic_name+0x20e>
 80169aa:	217b      	movs	r1, #123	@ 0x7b
 80169ac:	f000 ff06 	bl	80177bc <strchr>
 80169b0:	46d1      	mov	r9, sl
 80169b2:	4605      	mov	r5, r0
 80169b4:	9407      	str	r4, [sp, #28]
 80169b6:	46d3      	mov	fp, sl
 80169b8:	464c      	mov	r4, r9
 80169ba:	2d00      	cmp	r5, #0
 80169bc:	f000 80be 	beq.w	8016b3c <rcl_expand_topic_name+0x25c>
 80169c0:	217d      	movs	r1, #125	@ 0x7d
 80169c2:	4620      	mov	r0, r4
 80169c4:	f000 fefa 	bl	80177bc <strchr>
 80169c8:	eba0 0905 	sub.w	r9, r0, r5
 80169cc:	f109 0a01 	add.w	sl, r9, #1
 80169d0:	486d      	ldr	r0, [pc, #436]	@ (8016b88 <rcl_expand_topic_name+0x2a8>)
 80169d2:	4652      	mov	r2, sl
 80169d4:	4629      	mov	r1, r5
 80169d6:	f000 fefe 	bl	80177d6 <strncmp>
 80169da:	2800      	cmp	r0, #0
 80169dc:	d067      	beq.n	8016aae <rcl_expand_topic_name+0x1ce>
 80169de:	486b      	ldr	r0, [pc, #428]	@ (8016b8c <rcl_expand_topic_name+0x2ac>)
 80169e0:	4652      	mov	r2, sl
 80169e2:	4629      	mov	r1, r5
 80169e4:	f000 fef7 	bl	80177d6 <strncmp>
 80169e8:	b130      	cbz	r0, 80169f8 <rcl_expand_topic_name+0x118>
 80169ea:	4869      	ldr	r0, [pc, #420]	@ (8016b90 <rcl_expand_topic_name+0x2b0>)
 80169ec:	4652      	mov	r2, sl
 80169ee:	4629      	mov	r1, r5
 80169f0:	f000 fef1 	bl	80177d6 <strncmp>
 80169f4:	2800      	cmp	r0, #0
 80169f6:	d137      	bne.n	8016a68 <rcl_expand_topic_name+0x188>
 80169f8:	46b9      	mov	r9, r7
 80169fa:	ab16      	add	r3, sp, #88	@ 0x58
 80169fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016a00:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016a04:	ab14      	add	r3, sp, #80	@ 0x50
 8016a06:	4628      	mov	r0, r5
 8016a08:	cb0c      	ldmia	r3, {r2, r3}
 8016a0a:	4651      	mov	r1, sl
 8016a0c:	f7fe f808 	bl	8014a20 <rcutils_strndup>
 8016a10:	4605      	mov	r5, r0
 8016a12:	2800      	cmp	r0, #0
 8016a14:	f000 809c 	beq.w	8016b50 <rcl_expand_topic_name+0x270>
 8016a18:	464a      	mov	r2, r9
 8016a1a:	4620      	mov	r0, r4
 8016a1c:	ab14      	add	r3, sp, #80	@ 0x50
 8016a1e:	4629      	mov	r1, r5
 8016a20:	f7fd fefc 	bl	801481c <rcutils_repl_str>
 8016a24:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016a26:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016a28:	4604      	mov	r4, r0
 8016a2a:	4628      	mov	r0, r5
 8016a2c:	4798      	blx	r3
 8016a2e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016a30:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016a32:	4658      	mov	r0, fp
 8016a34:	4798      	blx	r3
 8016a36:	2c00      	cmp	r4, #0
 8016a38:	d07b      	beq.n	8016b32 <rcl_expand_topic_name+0x252>
 8016a3a:	217b      	movs	r1, #123	@ 0x7b
 8016a3c:	4620      	mov	r0, r4
 8016a3e:	f000 febd 	bl	80177bc <strchr>
 8016a42:	46a3      	mov	fp, r4
 8016a44:	4605      	mov	r5, r0
 8016a46:	e7b8      	b.n	80169ba <rcl_expand_topic_name+0xda>
 8016a48:	240b      	movs	r4, #11
 8016a4a:	4620      	mov	r0, r4
 8016a4c:	b00b      	add	sp, #44	@ 0x2c
 8016a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a52:	f7fb f8af 	bl	8011bb4 <rcl_convert_rmw_ret_to_rcl_ret>
 8016a56:	4604      	mov	r4, r0
 8016a58:	e7f7      	b.n	8016a4a <rcl_expand_topic_name+0x16a>
 8016a5a:	2467      	movs	r4, #103	@ 0x67
 8016a5c:	4620      	mov	r0, r4
 8016a5e:	b00b      	add	sp, #44	@ 0x2c
 8016a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a64:	24c9      	movs	r4, #201	@ 0xc9
 8016a66:	e7f0      	b.n	8016a4a <rcl_expand_topic_name+0x16a>
 8016a68:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8016a6c:	9806      	ldr	r0, [sp, #24]
 8016a6e:	1c69      	adds	r1, r5, #1
 8016a70:	f7fe f8f0 	bl	8014c54 <rcutils_string_map_getn>
 8016a74:	4681      	mov	r9, r0
 8016a76:	2800      	cmp	r0, #0
 8016a78:	d1bf      	bne.n	80169fa <rcl_expand_topic_name+0x11a>
 8016a7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016a7c:	aa16      	add	r2, sp, #88	@ 0x58
 8016a7e:	6018      	str	r0, [r3, #0]
 8016a80:	ca07      	ldmia	r2, {r0, r1, r2}
 8016a82:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016a86:	ab14      	add	r3, sp, #80	@ 0x50
 8016a88:	cb0c      	ldmia	r3, {r2, r3}
 8016a8a:	4651      	mov	r1, sl
 8016a8c:	4628      	mov	r0, r5
 8016a8e:	f7fd ffc7 	bl	8014a20 <rcutils_strndup>
 8016a92:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016a94:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016a96:	4798      	blx	r3
 8016a98:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016a9a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016a9c:	4658      	mov	r0, fp
 8016a9e:	2469      	movs	r4, #105	@ 0x69
 8016aa0:	4798      	blx	r3
 8016aa2:	e7d2      	b.n	8016a4a <rcl_expand_topic_name+0x16a>
 8016aa4:	2800      	cmp	r0, #0
 8016aa6:	d05b      	beq.n	8016b60 <rcl_expand_topic_name+0x280>
 8016aa8:	46c1      	mov	r9, r8
 8016aaa:	46a2      	mov	sl, r4
 8016aac:	e782      	b.n	80169b4 <rcl_expand_topic_name+0xd4>
 8016aae:	46b1      	mov	r9, r6
 8016ab0:	e7a3      	b.n	80169fa <rcl_expand_topic_name+0x11a>
 8016ab2:	2800      	cmp	r0, #0
 8016ab4:	d1f8      	bne.n	8016aa8 <rcl_expand_topic_name+0x1c8>
 8016ab6:	4638      	mov	r0, r7
 8016ab8:	f7e9 fbbc 	bl	8000234 <strlen>
 8016abc:	4a35      	ldr	r2, [pc, #212]	@ (8016b94 <rcl_expand_topic_name+0x2b4>)
 8016abe:	4b36      	ldr	r3, [pc, #216]	@ (8016b98 <rcl_expand_topic_name+0x2b8>)
 8016ac0:	f8cd 8010 	str.w	r8, [sp, #16]
 8016ac4:	2801      	cmp	r0, #1
 8016ac6:	bf18      	it	ne
 8016ac8:	4613      	movne	r3, r2
 8016aca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8016ace:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8016ad2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016ad4:	9703      	str	r7, [sp, #12]
 8016ad6:	9200      	str	r2, [sp, #0]
 8016ad8:	ab14      	add	r3, sp, #80	@ 0x50
 8016ada:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016adc:	f7fd fe64 	bl	80147a8 <rcutils_format_string_limit>
 8016ae0:	4682      	mov	sl, r0
 8016ae2:	4653      	mov	r3, sl
 8016ae4:	b32b      	cbz	r3, 8016b32 <rcl_expand_topic_name+0x252>
 8016ae6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016ae8:	f8c3 a000 	str.w	sl, [r3]
 8016aec:	e7ad      	b.n	8016a4a <rcl_expand_topic_name+0x16a>
 8016aee:	f89a 3000 	ldrb.w	r3, [sl]
 8016af2:	2b2f      	cmp	r3, #47	@ 0x2f
 8016af4:	d0f7      	beq.n	8016ae6 <rcl_expand_topic_name+0x206>
 8016af6:	4638      	mov	r0, r7
 8016af8:	f7e9 fb9c 	bl	8000234 <strlen>
 8016afc:	4a25      	ldr	r2, [pc, #148]	@ (8016b94 <rcl_expand_topic_name+0x2b4>)
 8016afe:	4b26      	ldr	r3, [pc, #152]	@ (8016b98 <rcl_expand_topic_name+0x2b8>)
 8016b00:	f8cd a010 	str.w	sl, [sp, #16]
 8016b04:	2801      	cmp	r0, #1
 8016b06:	bf18      	it	ne
 8016b08:	4613      	movne	r3, r2
 8016b0a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8016b0e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8016b12:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016b14:	9703      	str	r7, [sp, #12]
 8016b16:	9200      	str	r2, [sp, #0]
 8016b18:	ab14      	add	r3, sp, #80	@ 0x50
 8016b1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016b1c:	f7fd fe44 	bl	80147a8 <rcutils_format_string_limit>
 8016b20:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016b22:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016b24:	4605      	mov	r5, r0
 8016b26:	4650      	mov	r0, sl
 8016b28:	4798      	blx	r3
 8016b2a:	46aa      	mov	sl, r5
 8016b2c:	e7d9      	b.n	8016ae2 <rcl_expand_topic_name+0x202>
 8016b2e:	24ca      	movs	r4, #202	@ 0xca
 8016b30:	e78b      	b.n	8016a4a <rcl_expand_topic_name+0x16a>
 8016b32:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016b34:	2300      	movs	r3, #0
 8016b36:	6013      	str	r3, [r2, #0]
 8016b38:	240a      	movs	r4, #10
 8016b3a:	e786      	b.n	8016a4a <rcl_expand_topic_name+0x16a>
 8016b3c:	465b      	mov	r3, fp
 8016b3e:	9c07      	ldr	r4, [sp, #28]
 8016b40:	46da      	mov	sl, fp
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d1d3      	bne.n	8016aee <rcl_expand_topic_name+0x20e>
 8016b46:	f898 3000 	ldrb.w	r3, [r8]
 8016b4a:	2b2f      	cmp	r3, #47	@ 0x2f
 8016b4c:	d0cb      	beq.n	8016ae6 <rcl_expand_topic_name+0x206>
 8016b4e:	e7b2      	b.n	8016ab6 <rcl_expand_topic_name+0x1d6>
 8016b50:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8016b54:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016b56:	6015      	str	r5, [r2, #0]
 8016b58:	4658      	mov	r0, fp
 8016b5a:	4798      	blx	r3
 8016b5c:	240a      	movs	r4, #10
 8016b5e:	e774      	b.n	8016a4a <rcl_expand_topic_name+0x16a>
 8016b60:	ab17      	add	r3, sp, #92	@ 0x5c
 8016b62:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016b66:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016b6a:	ab14      	add	r3, sp, #80	@ 0x50
 8016b6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016b6e:	4640      	mov	r0, r8
 8016b70:	f7fd ff34 	bl	80149dc <rcutils_strdup>
 8016b74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016b76:	2800      	cmp	r0, #0
 8016b78:	6018      	str	r0, [r3, #0]
 8016b7a:	bf08      	it	eq
 8016b7c:	240a      	moveq	r4, #10
 8016b7e:	e764      	b.n	8016a4a <rcl_expand_topic_name+0x16a>
 8016b80:	080192cc 	.word	0x080192cc
 8016b84:	08018b28 	.word	0x08018b28
 8016b88:	080192d4 	.word	0x080192d4
 8016b8c:	080192dc 	.word	0x080192dc
 8016b90:	080192e4 	.word	0x080192e4
 8016b94:	08018b14 	.word	0x08018b14
 8016b98:	08018b38 	.word	0x08018b38

08016b9c <rcl_get_default_topic_name_substitutions>:
 8016b9c:	2800      	cmp	r0, #0
 8016b9e:	bf0c      	ite	eq
 8016ba0:	200b      	moveq	r0, #11
 8016ba2:	2000      	movne	r0, #0
 8016ba4:	4770      	bx	lr
 8016ba6:	bf00      	nop

08016ba8 <rcl_get_zero_initialized_guard_condition>:
 8016ba8:	4a03      	ldr	r2, [pc, #12]	@ (8016bb8 <rcl_get_zero_initialized_guard_condition+0x10>)
 8016baa:	4603      	mov	r3, r0
 8016bac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016bb0:	e883 0003 	stmia.w	r3, {r0, r1}
 8016bb4:	4618      	mov	r0, r3
 8016bb6:	4770      	bx	lr
 8016bb8:	080192f0 	.word	0x080192f0

08016bbc <rcl_guard_condition_init>:
 8016bbc:	b082      	sub	sp, #8
 8016bbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016bc0:	b087      	sub	sp, #28
 8016bc2:	ac0c      	add	r4, sp, #48	@ 0x30
 8016bc4:	e884 000c 	stmia.w	r4, {r2, r3}
 8016bc8:	46a6      	mov	lr, r4
 8016bca:	460d      	mov	r5, r1
 8016bcc:	4604      	mov	r4, r0
 8016bce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016bd2:	f10d 0c04 	add.w	ip, sp, #4
 8016bd6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016bda:	f8de 3000 	ldr.w	r3, [lr]
 8016bde:	f8cc 3000 	str.w	r3, [ip]
 8016be2:	a801      	add	r0, sp, #4
 8016be4:	f7f6 f962 	bl	800ceac <rcutils_allocator_is_valid>
 8016be8:	b338      	cbz	r0, 8016c3a <rcl_guard_condition_init+0x7e>
 8016bea:	b334      	cbz	r4, 8016c3a <rcl_guard_condition_init+0x7e>
 8016bec:	6866      	ldr	r6, [r4, #4]
 8016bee:	b9ee      	cbnz	r6, 8016c2c <rcl_guard_condition_init+0x70>
 8016bf0:	b31d      	cbz	r5, 8016c3a <rcl_guard_condition_init+0x7e>
 8016bf2:	4628      	mov	r0, r5
 8016bf4:	f7fa fffc 	bl	8011bf0 <rcl_context_is_valid>
 8016bf8:	b308      	cbz	r0, 8016c3e <rcl_guard_condition_init+0x82>
 8016bfa:	9b01      	ldr	r3, [sp, #4]
 8016bfc:	9905      	ldr	r1, [sp, #20]
 8016bfe:	201c      	movs	r0, #28
 8016c00:	4798      	blx	r3
 8016c02:	4607      	mov	r7, r0
 8016c04:	6060      	str	r0, [r4, #4]
 8016c06:	b310      	cbz	r0, 8016c4e <rcl_guard_condition_init+0x92>
 8016c08:	6828      	ldr	r0, [r5, #0]
 8016c0a:	3028      	adds	r0, #40	@ 0x28
 8016c0c:	f000 f9ac 	bl	8016f68 <rmw_create_guard_condition>
 8016c10:	6038      	str	r0, [r7, #0]
 8016c12:	6860      	ldr	r0, [r4, #4]
 8016c14:	6805      	ldr	r5, [r0, #0]
 8016c16:	b1a5      	cbz	r5, 8016c42 <rcl_guard_condition_init+0x86>
 8016c18:	2301      	movs	r3, #1
 8016c1a:	ac01      	add	r4, sp, #4
 8016c1c:	7103      	strb	r3, [r0, #4]
 8016c1e:	f100 0708 	add.w	r7, r0, #8
 8016c22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016c24:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016c26:	6823      	ldr	r3, [r4, #0]
 8016c28:	603b      	str	r3, [r7, #0]
 8016c2a:	e000      	b.n	8016c2e <rcl_guard_condition_init+0x72>
 8016c2c:	2664      	movs	r6, #100	@ 0x64
 8016c2e:	4630      	mov	r0, r6
 8016c30:	b007      	add	sp, #28
 8016c32:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016c36:	b002      	add	sp, #8
 8016c38:	4770      	bx	lr
 8016c3a:	260b      	movs	r6, #11
 8016c3c:	e7f7      	b.n	8016c2e <rcl_guard_condition_init+0x72>
 8016c3e:	2665      	movs	r6, #101	@ 0x65
 8016c40:	e7f5      	b.n	8016c2e <rcl_guard_condition_init+0x72>
 8016c42:	9b02      	ldr	r3, [sp, #8]
 8016c44:	9905      	ldr	r1, [sp, #20]
 8016c46:	4798      	blx	r3
 8016c48:	2601      	movs	r6, #1
 8016c4a:	6065      	str	r5, [r4, #4]
 8016c4c:	e7ef      	b.n	8016c2e <rcl_guard_condition_init+0x72>
 8016c4e:	260a      	movs	r6, #10
 8016c50:	e7ed      	b.n	8016c2e <rcl_guard_condition_init+0x72>
 8016c52:	bf00      	nop

08016c54 <rcl_guard_condition_init_from_rmw>:
 8016c54:	b082      	sub	sp, #8
 8016c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c5a:	b086      	sub	sp, #24
 8016c5c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8016c60:	4604      	mov	r4, r0
 8016c62:	f84c 3f04 	str.w	r3, [ip, #4]!
 8016c66:	460e      	mov	r6, r1
 8016c68:	4617      	mov	r7, r2
 8016c6a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016c6e:	f10d 0e04 	add.w	lr, sp, #4
 8016c72:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016c76:	f8dc 3000 	ldr.w	r3, [ip]
 8016c7a:	f8ce 3000 	str.w	r3, [lr]
 8016c7e:	a801      	add	r0, sp, #4
 8016c80:	f7f6 f914 	bl	800ceac <rcutils_allocator_is_valid>
 8016c84:	b350      	cbz	r0, 8016cdc <rcl_guard_condition_init_from_rmw+0x88>
 8016c86:	b34c      	cbz	r4, 8016cdc <rcl_guard_condition_init_from_rmw+0x88>
 8016c88:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8016c8c:	f1b8 0f00 	cmp.w	r8, #0
 8016c90:	d11e      	bne.n	8016cd0 <rcl_guard_condition_init_from_rmw+0x7c>
 8016c92:	b31f      	cbz	r7, 8016cdc <rcl_guard_condition_init_from_rmw+0x88>
 8016c94:	4638      	mov	r0, r7
 8016c96:	f7fa ffab 	bl	8011bf0 <rcl_context_is_valid>
 8016c9a:	b328      	cbz	r0, 8016ce8 <rcl_guard_condition_init_from_rmw+0x94>
 8016c9c:	9b01      	ldr	r3, [sp, #4]
 8016c9e:	9905      	ldr	r1, [sp, #20]
 8016ca0:	201c      	movs	r0, #28
 8016ca2:	4798      	blx	r3
 8016ca4:	4605      	mov	r5, r0
 8016ca6:	6060      	str	r0, [r4, #4]
 8016ca8:	b358      	cbz	r0, 8016d02 <rcl_guard_condition_init_from_rmw+0xae>
 8016caa:	b1fe      	cbz	r6, 8016cec <rcl_guard_condition_init_from_rmw+0x98>
 8016cac:	6006      	str	r6, [r0, #0]
 8016cae:	f880 8004 	strb.w	r8, [r0, #4]
 8016cb2:	ac01      	add	r4, sp, #4
 8016cb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016cb6:	f105 0c08 	add.w	ip, r5, #8
 8016cba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016cbe:	6823      	ldr	r3, [r4, #0]
 8016cc0:	f8cc 3000 	str.w	r3, [ip]
 8016cc4:	2000      	movs	r0, #0
 8016cc6:	b006      	add	sp, #24
 8016cc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ccc:	b002      	add	sp, #8
 8016cce:	4770      	bx	lr
 8016cd0:	2064      	movs	r0, #100	@ 0x64
 8016cd2:	b006      	add	sp, #24
 8016cd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016cd8:	b002      	add	sp, #8
 8016cda:	4770      	bx	lr
 8016cdc:	200b      	movs	r0, #11
 8016cde:	b006      	add	sp, #24
 8016ce0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ce4:	b002      	add	sp, #8
 8016ce6:	4770      	bx	lr
 8016ce8:	2065      	movs	r0, #101	@ 0x65
 8016cea:	e7f2      	b.n	8016cd2 <rcl_guard_condition_init_from_rmw+0x7e>
 8016cec:	6838      	ldr	r0, [r7, #0]
 8016cee:	3028      	adds	r0, #40	@ 0x28
 8016cf0:	f000 f93a 	bl	8016f68 <rmw_create_guard_condition>
 8016cf4:	6028      	str	r0, [r5, #0]
 8016cf6:	6865      	ldr	r5, [r4, #4]
 8016cf8:	682e      	ldr	r6, [r5, #0]
 8016cfa:	b126      	cbz	r6, 8016d06 <rcl_guard_condition_init_from_rmw+0xb2>
 8016cfc:	2301      	movs	r3, #1
 8016cfe:	712b      	strb	r3, [r5, #4]
 8016d00:	e7d7      	b.n	8016cb2 <rcl_guard_condition_init_from_rmw+0x5e>
 8016d02:	200a      	movs	r0, #10
 8016d04:	e7e5      	b.n	8016cd2 <rcl_guard_condition_init_from_rmw+0x7e>
 8016d06:	4628      	mov	r0, r5
 8016d08:	9b02      	ldr	r3, [sp, #8]
 8016d0a:	9905      	ldr	r1, [sp, #20]
 8016d0c:	4798      	blx	r3
 8016d0e:	6066      	str	r6, [r4, #4]
 8016d10:	2001      	movs	r0, #1
 8016d12:	e7de      	b.n	8016cd2 <rcl_guard_condition_init_from_rmw+0x7e>

08016d14 <rcl_guard_condition_fini>:
 8016d14:	b570      	push	{r4, r5, r6, lr}
 8016d16:	b082      	sub	sp, #8
 8016d18:	b1f0      	cbz	r0, 8016d58 <rcl_guard_condition_fini+0x44>
 8016d1a:	6843      	ldr	r3, [r0, #4]
 8016d1c:	4604      	mov	r4, r0
 8016d1e:	b163      	cbz	r3, 8016d3a <rcl_guard_condition_fini+0x26>
 8016d20:	6818      	ldr	r0, [r3, #0]
 8016d22:	68de      	ldr	r6, [r3, #12]
 8016d24:	6999      	ldr	r1, [r3, #24]
 8016d26:	b160      	cbz	r0, 8016d42 <rcl_guard_condition_fini+0x2e>
 8016d28:	791d      	ldrb	r5, [r3, #4]
 8016d2a:	b965      	cbnz	r5, 8016d46 <rcl_guard_condition_fini+0x32>
 8016d2c:	4618      	mov	r0, r3
 8016d2e:	47b0      	blx	r6
 8016d30:	2300      	movs	r3, #0
 8016d32:	4628      	mov	r0, r5
 8016d34:	6063      	str	r3, [r4, #4]
 8016d36:	b002      	add	sp, #8
 8016d38:	bd70      	pop	{r4, r5, r6, pc}
 8016d3a:	461d      	mov	r5, r3
 8016d3c:	4628      	mov	r0, r5
 8016d3e:	b002      	add	sp, #8
 8016d40:	bd70      	pop	{r4, r5, r6, pc}
 8016d42:	4605      	mov	r5, r0
 8016d44:	e7f2      	b.n	8016d2c <rcl_guard_condition_fini+0x18>
 8016d46:	9101      	str	r1, [sp, #4]
 8016d48:	f000 f922 	bl	8016f90 <rmw_destroy_guard_condition>
 8016d4c:	1e05      	subs	r5, r0, #0
 8016d4e:	6863      	ldr	r3, [r4, #4]
 8016d50:	9901      	ldr	r1, [sp, #4]
 8016d52:	bf18      	it	ne
 8016d54:	2501      	movne	r5, #1
 8016d56:	e7e9      	b.n	8016d2c <rcl_guard_condition_fini+0x18>
 8016d58:	250b      	movs	r5, #11
 8016d5a:	4628      	mov	r0, r5
 8016d5c:	b002      	add	sp, #8
 8016d5e:	bd70      	pop	{r4, r5, r6, pc}

08016d60 <rcl_guard_condition_get_default_options>:
 8016d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d62:	b087      	sub	sp, #28
 8016d64:	4606      	mov	r6, r0
 8016d66:	4668      	mov	r0, sp
 8016d68:	f7f6 f892 	bl	800ce90 <rcutils_get_default_allocator>
 8016d6c:	4b09      	ldr	r3, [pc, #36]	@ (8016d94 <rcl_guard_condition_get_default_options+0x34>)
 8016d6e:	46ee      	mov	lr, sp
 8016d70:	469c      	mov	ip, r3
 8016d72:	461d      	mov	r5, r3
 8016d74:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016d78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016d7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016d7e:	4634      	mov	r4, r6
 8016d80:	f8de 7000 	ldr.w	r7, [lr]
 8016d84:	f8cc 7000 	str.w	r7, [ip]
 8016d88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016d8a:	4630      	mov	r0, r6
 8016d8c:	6027      	str	r7, [r4, #0]
 8016d8e:	b007      	add	sp, #28
 8016d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d92:	bf00      	nop
 8016d94:	2000ad30 	.word	0x2000ad30

08016d98 <rcl_trigger_guard_condition>:
 8016d98:	b148      	cbz	r0, 8016dae <rcl_trigger_guard_condition+0x16>
 8016d9a:	b508      	push	{r3, lr}
 8016d9c:	6843      	ldr	r3, [r0, #4]
 8016d9e:	b143      	cbz	r3, 8016db2 <rcl_trigger_guard_condition+0x1a>
 8016da0:	6818      	ldr	r0, [r3, #0]
 8016da2:	f000 f909 	bl	8016fb8 <rmw_trigger_guard_condition>
 8016da6:	3800      	subs	r0, #0
 8016da8:	bf18      	it	ne
 8016daa:	2001      	movne	r0, #1
 8016dac:	bd08      	pop	{r3, pc}
 8016dae:	200b      	movs	r0, #11
 8016db0:	4770      	bx	lr
 8016db2:	200b      	movs	r0, #11
 8016db4:	bd08      	pop	{r3, pc}
 8016db6:	bf00      	nop

08016db8 <rcl_guard_condition_get_rmw_handle>:
 8016db8:	b110      	cbz	r0, 8016dc0 <rcl_guard_condition_get_rmw_handle+0x8>
 8016dba:	6840      	ldr	r0, [r0, #4]
 8016dbc:	b100      	cbz	r0, 8016dc0 <rcl_guard_condition_get_rmw_handle+0x8>
 8016dbe:	6800      	ldr	r0, [r0, #0]
 8016dc0:	4770      	bx	lr
 8016dc2:	bf00      	nop

08016dc4 <rcl_validate_topic_name>:
 8016dc4:	2800      	cmp	r0, #0
 8016dc6:	d07a      	beq.n	8016ebe <rcl_validate_topic_name+0xfa>
 8016dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016dcc:	460e      	mov	r6, r1
 8016dce:	2900      	cmp	r1, #0
 8016dd0:	d07c      	beq.n	8016ecc <rcl_validate_topic_name+0x108>
 8016dd2:	4617      	mov	r7, r2
 8016dd4:	4605      	mov	r5, r0
 8016dd6:	f7e9 fa2d 	bl	8000234 <strlen>
 8016dda:	b1b0      	cbz	r0, 8016e0a <rcl_validate_topic_name+0x46>
 8016ddc:	f895 9000 	ldrb.w	r9, [r5]
 8016de0:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8016f64 <rcl_validate_topic_name+0x1a0>
 8016de4:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8016de8:	f013 0304 	ands.w	r3, r3, #4
 8016dec:	d169      	bne.n	8016ec2 <rcl_validate_topic_name+0xfe>
 8016dee:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8016df2:	f815 2008 	ldrb.w	r2, [r5, r8]
 8016df6:	2a2f      	cmp	r2, #47	@ 0x2f
 8016df8:	d10e      	bne.n	8016e18 <rcl_validate_topic_name+0x54>
 8016dfa:	2202      	movs	r2, #2
 8016dfc:	6032      	str	r2, [r6, #0]
 8016dfe:	b36f      	cbz	r7, 8016e5c <rcl_validate_topic_name+0x98>
 8016e00:	f8c7 8000 	str.w	r8, [r7]
 8016e04:	4618      	mov	r0, r3
 8016e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e0a:	2301      	movs	r3, #1
 8016e0c:	6033      	str	r3, [r6, #0]
 8016e0e:	b32f      	cbz	r7, 8016e5c <rcl_validate_topic_name+0x98>
 8016e10:	2000      	movs	r0, #0
 8016e12:	6038      	str	r0, [r7, #0]
 8016e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e18:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8016e1c:	461c      	mov	r4, r3
 8016e1e:	4619      	mov	r1, r3
 8016e20:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8016e24:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8016e28:	f1be 0f09 	cmp.w	lr, #9
 8016e2c:	d919      	bls.n	8016e62 <rcl_validate_topic_name+0x9e>
 8016e2e:	f022 0e20 	bic.w	lr, r2, #32
 8016e32:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8016e36:	f1be 0f19 	cmp.w	lr, #25
 8016e3a:	d912      	bls.n	8016e62 <rcl_validate_topic_name+0x9e>
 8016e3c:	2a5f      	cmp	r2, #95	@ 0x5f
 8016e3e:	d019      	beq.n	8016e74 <rcl_validate_topic_name+0xb0>
 8016e40:	2a2f      	cmp	r2, #47	@ 0x2f
 8016e42:	d051      	beq.n	8016ee8 <rcl_validate_topic_name+0x124>
 8016e44:	2a7e      	cmp	r2, #126	@ 0x7e
 8016e46:	d048      	beq.n	8016eda <rcl_validate_topic_name+0x116>
 8016e48:	2a7b      	cmp	r2, #123	@ 0x7b
 8016e4a:	d054      	beq.n	8016ef6 <rcl_validate_topic_name+0x132>
 8016e4c:	2a7d      	cmp	r2, #125	@ 0x7d
 8016e4e:	d161      	bne.n	8016f14 <rcl_validate_topic_name+0x150>
 8016e50:	2c00      	cmp	r4, #0
 8016e52:	d155      	bne.n	8016f00 <rcl_validate_topic_name+0x13c>
 8016e54:	2305      	movs	r3, #5
 8016e56:	6033      	str	r3, [r6, #0]
 8016e58:	b107      	cbz	r7, 8016e5c <rcl_validate_topic_name+0x98>
 8016e5a:	6039      	str	r1, [r7, #0]
 8016e5c:	2000      	movs	r0, #0
 8016e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e62:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016e66:	0752      	lsls	r2, r2, #29
 8016e68:	d504      	bpl.n	8016e74 <rcl_validate_topic_name+0xb0>
 8016e6a:	b11c      	cbz	r4, 8016e74 <rcl_validate_topic_name+0xb0>
 8016e6c:	b111      	cbz	r1, 8016e74 <rcl_validate_topic_name+0xb0>
 8016e6e:	1e4a      	subs	r2, r1, #1
 8016e70:	429a      	cmp	r2, r3
 8016e72:	d02d      	beq.n	8016ed0 <rcl_validate_topic_name+0x10c>
 8016e74:	3101      	adds	r1, #1
 8016e76:	4288      	cmp	r0, r1
 8016e78:	d1d2      	bne.n	8016e20 <rcl_validate_topic_name+0x5c>
 8016e7a:	2c00      	cmp	r4, #0
 8016e7c:	d145      	bne.n	8016f0a <rcl_validate_topic_name+0x146>
 8016e7e:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8016e82:	d04f      	beq.n	8016f24 <rcl_validate_topic_name+0x160>
 8016e84:	4620      	mov	r0, r4
 8016e86:	2301      	movs	r3, #1
 8016e88:	e006      	b.n	8016e98 <rcl_validate_topic_name+0xd4>
 8016e8a:	428b      	cmp	r3, r1
 8016e8c:	f105 0501 	add.w	r5, r5, #1
 8016e90:	f103 0201 	add.w	r2, r3, #1
 8016e94:	d236      	bcs.n	8016f04 <rcl_validate_topic_name+0x140>
 8016e96:	4613      	mov	r3, r2
 8016e98:	4580      	cmp	r8, r0
 8016e9a:	f100 0001 	add.w	r0, r0, #1
 8016e9e:	d0f4      	beq.n	8016e8a <rcl_validate_topic_name+0xc6>
 8016ea0:	782a      	ldrb	r2, [r5, #0]
 8016ea2:	2a2f      	cmp	r2, #47	@ 0x2f
 8016ea4:	d1f1      	bne.n	8016e8a <rcl_validate_topic_name+0xc6>
 8016ea6:	786a      	ldrb	r2, [r5, #1]
 8016ea8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016eac:	0754      	lsls	r4, r2, #29
 8016eae:	d5ec      	bpl.n	8016e8a <rcl_validate_topic_name+0xc6>
 8016eb0:	2204      	movs	r2, #4
 8016eb2:	6032      	str	r2, [r6, #0]
 8016eb4:	2f00      	cmp	r7, #0
 8016eb6:	d0d1      	beq.n	8016e5c <rcl_validate_topic_name+0x98>
 8016eb8:	603b      	str	r3, [r7, #0]
 8016eba:	2000      	movs	r0, #0
 8016ebc:	e7aa      	b.n	8016e14 <rcl_validate_topic_name+0x50>
 8016ebe:	200b      	movs	r0, #11
 8016ec0:	4770      	bx	lr
 8016ec2:	2304      	movs	r3, #4
 8016ec4:	6033      	str	r3, [r6, #0]
 8016ec6:	2f00      	cmp	r7, #0
 8016ec8:	d1a2      	bne.n	8016e10 <rcl_validate_topic_name+0x4c>
 8016eca:	e7c7      	b.n	8016e5c <rcl_validate_topic_name+0x98>
 8016ecc:	200b      	movs	r0, #11
 8016ece:	e7a1      	b.n	8016e14 <rcl_validate_topic_name+0x50>
 8016ed0:	2309      	movs	r3, #9
 8016ed2:	6033      	str	r3, [r6, #0]
 8016ed4:	2f00      	cmp	r7, #0
 8016ed6:	d1c0      	bne.n	8016e5a <rcl_validate_topic_name+0x96>
 8016ed8:	e7c0      	b.n	8016e5c <rcl_validate_topic_name+0x98>
 8016eda:	2900      	cmp	r1, #0
 8016edc:	d0ca      	beq.n	8016e74 <rcl_validate_topic_name+0xb0>
 8016ede:	2306      	movs	r3, #6
 8016ee0:	6033      	str	r3, [r6, #0]
 8016ee2:	2f00      	cmp	r7, #0
 8016ee4:	d1b9      	bne.n	8016e5a <rcl_validate_topic_name+0x96>
 8016ee6:	e7b9      	b.n	8016e5c <rcl_validate_topic_name+0x98>
 8016ee8:	2c00      	cmp	r4, #0
 8016eea:	d0c3      	beq.n	8016e74 <rcl_validate_topic_name+0xb0>
 8016eec:	2308      	movs	r3, #8
 8016eee:	6033      	str	r3, [r6, #0]
 8016ef0:	2f00      	cmp	r7, #0
 8016ef2:	d1b2      	bne.n	8016e5a <rcl_validate_topic_name+0x96>
 8016ef4:	e7b2      	b.n	8016e5c <rcl_validate_topic_name+0x98>
 8016ef6:	2c00      	cmp	r4, #0
 8016ef8:	d1f8      	bne.n	8016eec <rcl_validate_topic_name+0x128>
 8016efa:	460b      	mov	r3, r1
 8016efc:	2401      	movs	r4, #1
 8016efe:	e7b9      	b.n	8016e74 <rcl_validate_topic_name+0xb0>
 8016f00:	2400      	movs	r4, #0
 8016f02:	e7b7      	b.n	8016e74 <rcl_validate_topic_name+0xb0>
 8016f04:	2000      	movs	r0, #0
 8016f06:	6030      	str	r0, [r6, #0]
 8016f08:	e784      	b.n	8016e14 <rcl_validate_topic_name+0x50>
 8016f0a:	2205      	movs	r2, #5
 8016f0c:	6032      	str	r2, [r6, #0]
 8016f0e:	2f00      	cmp	r7, #0
 8016f10:	d1d2      	bne.n	8016eb8 <rcl_validate_topic_name+0xf4>
 8016f12:	e7a3      	b.n	8016e5c <rcl_validate_topic_name+0x98>
 8016f14:	2c00      	cmp	r4, #0
 8016f16:	bf14      	ite	ne
 8016f18:	2308      	movne	r3, #8
 8016f1a:	2303      	moveq	r3, #3
 8016f1c:	6033      	str	r3, [r6, #0]
 8016f1e:	2f00      	cmp	r7, #0
 8016f20:	d19b      	bne.n	8016e5a <rcl_validate_topic_name+0x96>
 8016f22:	e79b      	b.n	8016e5c <rcl_validate_topic_name+0x98>
 8016f24:	2301      	movs	r3, #1
 8016f26:	e00a      	b.n	8016f3e <rcl_validate_topic_name+0x17a>
 8016f28:	2c01      	cmp	r4, #1
 8016f2a:	d013      	beq.n	8016f54 <rcl_validate_topic_name+0x190>
 8016f2c:	4299      	cmp	r1, r3
 8016f2e:	f104 0401 	add.w	r4, r4, #1
 8016f32:	f105 0501 	add.w	r5, r5, #1
 8016f36:	f103 0201 	add.w	r2, r3, #1
 8016f3a:	d9e3      	bls.n	8016f04 <rcl_validate_topic_name+0x140>
 8016f3c:	4613      	mov	r3, r2
 8016f3e:	45a0      	cmp	r8, r4
 8016f40:	d0f4      	beq.n	8016f2c <rcl_validate_topic_name+0x168>
 8016f42:	782a      	ldrb	r2, [r5, #0]
 8016f44:	2a2f      	cmp	r2, #47	@ 0x2f
 8016f46:	d1ef      	bne.n	8016f28 <rcl_validate_topic_name+0x164>
 8016f48:	786a      	ldrb	r2, [r5, #1]
 8016f4a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016f4e:	0752      	lsls	r2, r2, #29
 8016f50:	d5ec      	bpl.n	8016f2c <rcl_validate_topic_name+0x168>
 8016f52:	e7ad      	b.n	8016eb0 <rcl_validate_topic_name+0xec>
 8016f54:	2307      	movs	r3, #7
 8016f56:	6033      	str	r3, [r6, #0]
 8016f58:	2f00      	cmp	r7, #0
 8016f5a:	f43f af7f 	beq.w	8016e5c <rcl_validate_topic_name+0x98>
 8016f5e:	603c      	str	r4, [r7, #0]
 8016f60:	2000      	movs	r0, #0
 8016f62:	e757      	b.n	8016e14 <rcl_validate_topic_name+0x50>
 8016f64:	08019368 	.word	0x08019368

08016f68 <rmw_create_guard_condition>:
 8016f68:	b538      	push	{r3, r4, r5, lr}
 8016f6a:	4605      	mov	r5, r0
 8016f6c:	4807      	ldr	r0, [pc, #28]	@ (8016f8c <rmw_create_guard_condition+0x24>)
 8016f6e:	f7fe f963 	bl	8015238 <get_memory>
 8016f72:	b148      	cbz	r0, 8016f88 <rmw_create_guard_condition+0x20>
 8016f74:	6884      	ldr	r4, [r0, #8]
 8016f76:	2300      	movs	r3, #0
 8016f78:	7423      	strb	r3, [r4, #16]
 8016f7a:	61e5      	str	r5, [r4, #28]
 8016f7c:	f7fe f9c4 	bl	8015308 <rmw_get_implementation_identifier>
 8016f80:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8016f84:	f104 0014 	add.w	r0, r4, #20
 8016f88:	bd38      	pop	{r3, r4, r5, pc}
 8016f8a:	bf00      	nop
 8016f8c:	2000abcc 	.word	0x2000abcc

08016f90 <rmw_destroy_guard_condition>:
 8016f90:	b508      	push	{r3, lr}
 8016f92:	4b08      	ldr	r3, [pc, #32]	@ (8016fb4 <rmw_destroy_guard_condition+0x24>)
 8016f94:	6819      	ldr	r1, [r3, #0]
 8016f96:	b911      	cbnz	r1, 8016f9e <rmw_destroy_guard_condition+0xe>
 8016f98:	e00a      	b.n	8016fb0 <rmw_destroy_guard_condition+0x20>
 8016f9a:	6849      	ldr	r1, [r1, #4]
 8016f9c:	b141      	cbz	r1, 8016fb0 <rmw_destroy_guard_condition+0x20>
 8016f9e:	688b      	ldr	r3, [r1, #8]
 8016fa0:	3314      	adds	r3, #20
 8016fa2:	4298      	cmp	r0, r3
 8016fa4:	d1f9      	bne.n	8016f9a <rmw_destroy_guard_condition+0xa>
 8016fa6:	4803      	ldr	r0, [pc, #12]	@ (8016fb4 <rmw_destroy_guard_condition+0x24>)
 8016fa8:	f7fe f956 	bl	8015258 <put_memory>
 8016fac:	2000      	movs	r0, #0
 8016fae:	bd08      	pop	{r3, pc}
 8016fb0:	2001      	movs	r0, #1
 8016fb2:	bd08      	pop	{r3, pc}
 8016fb4:	2000abcc 	.word	0x2000abcc

08016fb8 <rmw_trigger_guard_condition>:
 8016fb8:	b160      	cbz	r0, 8016fd4 <rmw_trigger_guard_condition+0x1c>
 8016fba:	b510      	push	{r4, lr}
 8016fbc:	4604      	mov	r4, r0
 8016fbe:	6800      	ldr	r0, [r0, #0]
 8016fc0:	f7f7 f980 	bl	800e2c4 <is_uxrce_rmw_identifier_valid>
 8016fc4:	b908      	cbnz	r0, 8016fca <rmw_trigger_guard_condition+0x12>
 8016fc6:	2001      	movs	r0, #1
 8016fc8:	bd10      	pop	{r4, pc}
 8016fca:	6863      	ldr	r3, [r4, #4]
 8016fcc:	2201      	movs	r2, #1
 8016fce:	741a      	strb	r2, [r3, #16]
 8016fd0:	2000      	movs	r0, #0
 8016fd2:	bd10      	pop	{r4, pc}
 8016fd4:	2001      	movs	r0, #1
 8016fd6:	4770      	bx	lr

08016fd8 <calloc>:
 8016fd8:	4b02      	ldr	r3, [pc, #8]	@ (8016fe4 <calloc+0xc>)
 8016fda:	460a      	mov	r2, r1
 8016fdc:	4601      	mov	r1, r0
 8016fde:	6818      	ldr	r0, [r3, #0]
 8016fe0:	f000 b802 	b.w	8016fe8 <_calloc_r>
 8016fe4:	200000fc 	.word	0x200000fc

08016fe8 <_calloc_r>:
 8016fe8:	b570      	push	{r4, r5, r6, lr}
 8016fea:	fba1 5402 	umull	r5, r4, r1, r2
 8016fee:	b93c      	cbnz	r4, 8017000 <_calloc_r+0x18>
 8016ff0:	4629      	mov	r1, r5
 8016ff2:	f000 f887 	bl	8017104 <_malloc_r>
 8016ff6:	4606      	mov	r6, r0
 8016ff8:	b928      	cbnz	r0, 8017006 <_calloc_r+0x1e>
 8016ffa:	2600      	movs	r6, #0
 8016ffc:	4630      	mov	r0, r6
 8016ffe:	bd70      	pop	{r4, r5, r6, pc}
 8017000:	220c      	movs	r2, #12
 8017002:	6002      	str	r2, [r0, #0]
 8017004:	e7f9      	b.n	8016ffa <_calloc_r+0x12>
 8017006:	462a      	mov	r2, r5
 8017008:	4621      	mov	r1, r4
 801700a:	f000 fbcf 	bl	80177ac <memset>
 801700e:	e7f5      	b.n	8016ffc <_calloc_r+0x14>

08017010 <getenv>:
 8017010:	b507      	push	{r0, r1, r2, lr}
 8017012:	4b04      	ldr	r3, [pc, #16]	@ (8017024 <getenv+0x14>)
 8017014:	4601      	mov	r1, r0
 8017016:	aa01      	add	r2, sp, #4
 8017018:	6818      	ldr	r0, [r3, #0]
 801701a:	f000 f805 	bl	8017028 <_findenv_r>
 801701e:	b003      	add	sp, #12
 8017020:	f85d fb04 	ldr.w	pc, [sp], #4
 8017024:	200000fc 	.word	0x200000fc

08017028 <_findenv_r>:
 8017028:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801702c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801709c <_findenv_r+0x74>
 8017030:	4606      	mov	r6, r0
 8017032:	4689      	mov	r9, r1
 8017034:	4617      	mov	r7, r2
 8017036:	f000 fcaf 	bl	8017998 <__env_lock>
 801703a:	f8da 4000 	ldr.w	r4, [sl]
 801703e:	b134      	cbz	r4, 801704e <_findenv_r+0x26>
 8017040:	464b      	mov	r3, r9
 8017042:	4698      	mov	r8, r3
 8017044:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017048:	b13a      	cbz	r2, 801705a <_findenv_r+0x32>
 801704a:	2a3d      	cmp	r2, #61	@ 0x3d
 801704c:	d1f9      	bne.n	8017042 <_findenv_r+0x1a>
 801704e:	4630      	mov	r0, r6
 8017050:	f000 fca8 	bl	80179a4 <__env_unlock>
 8017054:	2000      	movs	r0, #0
 8017056:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801705a:	eba8 0809 	sub.w	r8, r8, r9
 801705e:	46a3      	mov	fp, r4
 8017060:	f854 0b04 	ldr.w	r0, [r4], #4
 8017064:	2800      	cmp	r0, #0
 8017066:	d0f2      	beq.n	801704e <_findenv_r+0x26>
 8017068:	4642      	mov	r2, r8
 801706a:	4649      	mov	r1, r9
 801706c:	f000 fbb3 	bl	80177d6 <strncmp>
 8017070:	2800      	cmp	r0, #0
 8017072:	d1f4      	bne.n	801705e <_findenv_r+0x36>
 8017074:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017078:	eb03 0508 	add.w	r5, r3, r8
 801707c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8017080:	2b3d      	cmp	r3, #61	@ 0x3d
 8017082:	d1ec      	bne.n	801705e <_findenv_r+0x36>
 8017084:	f8da 3000 	ldr.w	r3, [sl]
 8017088:	ebab 0303 	sub.w	r3, fp, r3
 801708c:	109b      	asrs	r3, r3, #2
 801708e:	4630      	mov	r0, r6
 8017090:	603b      	str	r3, [r7, #0]
 8017092:	f000 fc87 	bl	80179a4 <__env_unlock>
 8017096:	1c68      	adds	r0, r5, #1
 8017098:	e7dd      	b.n	8017056 <_findenv_r+0x2e>
 801709a:	bf00      	nop
 801709c:	20000000 	.word	0x20000000

080170a0 <malloc>:
 80170a0:	4b02      	ldr	r3, [pc, #8]	@ (80170ac <malloc+0xc>)
 80170a2:	4601      	mov	r1, r0
 80170a4:	6818      	ldr	r0, [r3, #0]
 80170a6:	f000 b82d 	b.w	8017104 <_malloc_r>
 80170aa:	bf00      	nop
 80170ac:	200000fc 	.word	0x200000fc

080170b0 <free>:
 80170b0:	4b02      	ldr	r3, [pc, #8]	@ (80170bc <free+0xc>)
 80170b2:	4601      	mov	r1, r0
 80170b4:	6818      	ldr	r0, [r3, #0]
 80170b6:	f000 bc7b 	b.w	80179b0 <_free_r>
 80170ba:	bf00      	nop
 80170bc:	200000fc 	.word	0x200000fc

080170c0 <sbrk_aligned>:
 80170c0:	b570      	push	{r4, r5, r6, lr}
 80170c2:	4e0f      	ldr	r6, [pc, #60]	@ (8017100 <sbrk_aligned+0x40>)
 80170c4:	460c      	mov	r4, r1
 80170c6:	6831      	ldr	r1, [r6, #0]
 80170c8:	4605      	mov	r5, r0
 80170ca:	b911      	cbnz	r1, 80170d2 <sbrk_aligned+0x12>
 80170cc:	f000 fbe0 	bl	8017890 <_sbrk_r>
 80170d0:	6030      	str	r0, [r6, #0]
 80170d2:	4621      	mov	r1, r4
 80170d4:	4628      	mov	r0, r5
 80170d6:	f000 fbdb 	bl	8017890 <_sbrk_r>
 80170da:	1c43      	adds	r3, r0, #1
 80170dc:	d103      	bne.n	80170e6 <sbrk_aligned+0x26>
 80170de:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80170e2:	4620      	mov	r0, r4
 80170e4:	bd70      	pop	{r4, r5, r6, pc}
 80170e6:	1cc4      	adds	r4, r0, #3
 80170e8:	f024 0403 	bic.w	r4, r4, #3
 80170ec:	42a0      	cmp	r0, r4
 80170ee:	d0f8      	beq.n	80170e2 <sbrk_aligned+0x22>
 80170f0:	1a21      	subs	r1, r4, r0
 80170f2:	4628      	mov	r0, r5
 80170f4:	f000 fbcc 	bl	8017890 <_sbrk_r>
 80170f8:	3001      	adds	r0, #1
 80170fa:	d1f2      	bne.n	80170e2 <sbrk_aligned+0x22>
 80170fc:	e7ef      	b.n	80170de <sbrk_aligned+0x1e>
 80170fe:	bf00      	nop
 8017100:	2000ad44 	.word	0x2000ad44

08017104 <_malloc_r>:
 8017104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017108:	1ccd      	adds	r5, r1, #3
 801710a:	f025 0503 	bic.w	r5, r5, #3
 801710e:	3508      	adds	r5, #8
 8017110:	2d0c      	cmp	r5, #12
 8017112:	bf38      	it	cc
 8017114:	250c      	movcc	r5, #12
 8017116:	2d00      	cmp	r5, #0
 8017118:	4606      	mov	r6, r0
 801711a:	db01      	blt.n	8017120 <_malloc_r+0x1c>
 801711c:	42a9      	cmp	r1, r5
 801711e:	d904      	bls.n	801712a <_malloc_r+0x26>
 8017120:	230c      	movs	r3, #12
 8017122:	6033      	str	r3, [r6, #0]
 8017124:	2000      	movs	r0, #0
 8017126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801712a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017200 <_malloc_r+0xfc>
 801712e:	f000 f869 	bl	8017204 <__malloc_lock>
 8017132:	f8d8 3000 	ldr.w	r3, [r8]
 8017136:	461c      	mov	r4, r3
 8017138:	bb44      	cbnz	r4, 801718c <_malloc_r+0x88>
 801713a:	4629      	mov	r1, r5
 801713c:	4630      	mov	r0, r6
 801713e:	f7ff ffbf 	bl	80170c0 <sbrk_aligned>
 8017142:	1c43      	adds	r3, r0, #1
 8017144:	4604      	mov	r4, r0
 8017146:	d158      	bne.n	80171fa <_malloc_r+0xf6>
 8017148:	f8d8 4000 	ldr.w	r4, [r8]
 801714c:	4627      	mov	r7, r4
 801714e:	2f00      	cmp	r7, #0
 8017150:	d143      	bne.n	80171da <_malloc_r+0xd6>
 8017152:	2c00      	cmp	r4, #0
 8017154:	d04b      	beq.n	80171ee <_malloc_r+0xea>
 8017156:	6823      	ldr	r3, [r4, #0]
 8017158:	4639      	mov	r1, r7
 801715a:	4630      	mov	r0, r6
 801715c:	eb04 0903 	add.w	r9, r4, r3
 8017160:	f000 fb96 	bl	8017890 <_sbrk_r>
 8017164:	4581      	cmp	r9, r0
 8017166:	d142      	bne.n	80171ee <_malloc_r+0xea>
 8017168:	6821      	ldr	r1, [r4, #0]
 801716a:	1a6d      	subs	r5, r5, r1
 801716c:	4629      	mov	r1, r5
 801716e:	4630      	mov	r0, r6
 8017170:	f7ff ffa6 	bl	80170c0 <sbrk_aligned>
 8017174:	3001      	adds	r0, #1
 8017176:	d03a      	beq.n	80171ee <_malloc_r+0xea>
 8017178:	6823      	ldr	r3, [r4, #0]
 801717a:	442b      	add	r3, r5
 801717c:	6023      	str	r3, [r4, #0]
 801717e:	f8d8 3000 	ldr.w	r3, [r8]
 8017182:	685a      	ldr	r2, [r3, #4]
 8017184:	bb62      	cbnz	r2, 80171e0 <_malloc_r+0xdc>
 8017186:	f8c8 7000 	str.w	r7, [r8]
 801718a:	e00f      	b.n	80171ac <_malloc_r+0xa8>
 801718c:	6822      	ldr	r2, [r4, #0]
 801718e:	1b52      	subs	r2, r2, r5
 8017190:	d420      	bmi.n	80171d4 <_malloc_r+0xd0>
 8017192:	2a0b      	cmp	r2, #11
 8017194:	d917      	bls.n	80171c6 <_malloc_r+0xc2>
 8017196:	1961      	adds	r1, r4, r5
 8017198:	42a3      	cmp	r3, r4
 801719a:	6025      	str	r5, [r4, #0]
 801719c:	bf18      	it	ne
 801719e:	6059      	strne	r1, [r3, #4]
 80171a0:	6863      	ldr	r3, [r4, #4]
 80171a2:	bf08      	it	eq
 80171a4:	f8c8 1000 	streq.w	r1, [r8]
 80171a8:	5162      	str	r2, [r4, r5]
 80171aa:	604b      	str	r3, [r1, #4]
 80171ac:	4630      	mov	r0, r6
 80171ae:	f000 f82f 	bl	8017210 <__malloc_unlock>
 80171b2:	f104 000b 	add.w	r0, r4, #11
 80171b6:	1d23      	adds	r3, r4, #4
 80171b8:	f020 0007 	bic.w	r0, r0, #7
 80171bc:	1ac2      	subs	r2, r0, r3
 80171be:	bf1c      	itt	ne
 80171c0:	1a1b      	subne	r3, r3, r0
 80171c2:	50a3      	strne	r3, [r4, r2]
 80171c4:	e7af      	b.n	8017126 <_malloc_r+0x22>
 80171c6:	6862      	ldr	r2, [r4, #4]
 80171c8:	42a3      	cmp	r3, r4
 80171ca:	bf0c      	ite	eq
 80171cc:	f8c8 2000 	streq.w	r2, [r8]
 80171d0:	605a      	strne	r2, [r3, #4]
 80171d2:	e7eb      	b.n	80171ac <_malloc_r+0xa8>
 80171d4:	4623      	mov	r3, r4
 80171d6:	6864      	ldr	r4, [r4, #4]
 80171d8:	e7ae      	b.n	8017138 <_malloc_r+0x34>
 80171da:	463c      	mov	r4, r7
 80171dc:	687f      	ldr	r7, [r7, #4]
 80171de:	e7b6      	b.n	801714e <_malloc_r+0x4a>
 80171e0:	461a      	mov	r2, r3
 80171e2:	685b      	ldr	r3, [r3, #4]
 80171e4:	42a3      	cmp	r3, r4
 80171e6:	d1fb      	bne.n	80171e0 <_malloc_r+0xdc>
 80171e8:	2300      	movs	r3, #0
 80171ea:	6053      	str	r3, [r2, #4]
 80171ec:	e7de      	b.n	80171ac <_malloc_r+0xa8>
 80171ee:	230c      	movs	r3, #12
 80171f0:	6033      	str	r3, [r6, #0]
 80171f2:	4630      	mov	r0, r6
 80171f4:	f000 f80c 	bl	8017210 <__malloc_unlock>
 80171f8:	e794      	b.n	8017124 <_malloc_r+0x20>
 80171fa:	6005      	str	r5, [r0, #0]
 80171fc:	e7d6      	b.n	80171ac <_malloc_r+0xa8>
 80171fe:	bf00      	nop
 8017200:	2000ad48 	.word	0x2000ad48

08017204 <__malloc_lock>:
 8017204:	4801      	ldr	r0, [pc, #4]	@ (801720c <__malloc_lock+0x8>)
 8017206:	f000 bb90 	b.w	801792a <__retarget_lock_acquire_recursive>
 801720a:	bf00      	nop
 801720c:	2000ae8d 	.word	0x2000ae8d

08017210 <__malloc_unlock>:
 8017210:	4801      	ldr	r0, [pc, #4]	@ (8017218 <__malloc_unlock+0x8>)
 8017212:	f000 bb8b 	b.w	801792c <__retarget_lock_release_recursive>
 8017216:	bf00      	nop
 8017218:	2000ae8d 	.word	0x2000ae8d

0801721c <srand>:
 801721c:	b538      	push	{r3, r4, r5, lr}
 801721e:	4b10      	ldr	r3, [pc, #64]	@ (8017260 <srand+0x44>)
 8017220:	681d      	ldr	r5, [r3, #0]
 8017222:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017224:	4604      	mov	r4, r0
 8017226:	b9b3      	cbnz	r3, 8017256 <srand+0x3a>
 8017228:	2018      	movs	r0, #24
 801722a:	f7ff ff39 	bl	80170a0 <malloc>
 801722e:	4602      	mov	r2, r0
 8017230:	6328      	str	r0, [r5, #48]	@ 0x30
 8017232:	b920      	cbnz	r0, 801723e <srand+0x22>
 8017234:	4b0b      	ldr	r3, [pc, #44]	@ (8017264 <srand+0x48>)
 8017236:	480c      	ldr	r0, [pc, #48]	@ (8017268 <srand+0x4c>)
 8017238:	2146      	movs	r1, #70	@ 0x46
 801723a:	f000 fb8f 	bl	801795c <__assert_func>
 801723e:	490b      	ldr	r1, [pc, #44]	@ (801726c <srand+0x50>)
 8017240:	4b0b      	ldr	r3, [pc, #44]	@ (8017270 <srand+0x54>)
 8017242:	e9c0 1300 	strd	r1, r3, [r0]
 8017246:	4b0b      	ldr	r3, [pc, #44]	@ (8017274 <srand+0x58>)
 8017248:	6083      	str	r3, [r0, #8]
 801724a:	230b      	movs	r3, #11
 801724c:	8183      	strh	r3, [r0, #12]
 801724e:	2100      	movs	r1, #0
 8017250:	2001      	movs	r0, #1
 8017252:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017256:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017258:	2200      	movs	r2, #0
 801725a:	611c      	str	r4, [r3, #16]
 801725c:	615a      	str	r2, [r3, #20]
 801725e:	bd38      	pop	{r3, r4, r5, pc}
 8017260:	200000fc 	.word	0x200000fc
 8017264:	080192f8 	.word	0x080192f8
 8017268:	0801930f 	.word	0x0801930f
 801726c:	abcd330e 	.word	0xabcd330e
 8017270:	e66d1234 	.word	0xe66d1234
 8017274:	0005deec 	.word	0x0005deec

08017278 <rand>:
 8017278:	4b16      	ldr	r3, [pc, #88]	@ (80172d4 <rand+0x5c>)
 801727a:	b510      	push	{r4, lr}
 801727c:	681c      	ldr	r4, [r3, #0]
 801727e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017280:	b9b3      	cbnz	r3, 80172b0 <rand+0x38>
 8017282:	2018      	movs	r0, #24
 8017284:	f7ff ff0c 	bl	80170a0 <malloc>
 8017288:	4602      	mov	r2, r0
 801728a:	6320      	str	r0, [r4, #48]	@ 0x30
 801728c:	b920      	cbnz	r0, 8017298 <rand+0x20>
 801728e:	4b12      	ldr	r3, [pc, #72]	@ (80172d8 <rand+0x60>)
 8017290:	4812      	ldr	r0, [pc, #72]	@ (80172dc <rand+0x64>)
 8017292:	2152      	movs	r1, #82	@ 0x52
 8017294:	f000 fb62 	bl	801795c <__assert_func>
 8017298:	4911      	ldr	r1, [pc, #68]	@ (80172e0 <rand+0x68>)
 801729a:	4b12      	ldr	r3, [pc, #72]	@ (80172e4 <rand+0x6c>)
 801729c:	e9c0 1300 	strd	r1, r3, [r0]
 80172a0:	4b11      	ldr	r3, [pc, #68]	@ (80172e8 <rand+0x70>)
 80172a2:	6083      	str	r3, [r0, #8]
 80172a4:	230b      	movs	r3, #11
 80172a6:	8183      	strh	r3, [r0, #12]
 80172a8:	2100      	movs	r1, #0
 80172aa:	2001      	movs	r0, #1
 80172ac:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80172b0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80172b2:	480e      	ldr	r0, [pc, #56]	@ (80172ec <rand+0x74>)
 80172b4:	690b      	ldr	r3, [r1, #16]
 80172b6:	694c      	ldr	r4, [r1, #20]
 80172b8:	4a0d      	ldr	r2, [pc, #52]	@ (80172f0 <rand+0x78>)
 80172ba:	4358      	muls	r0, r3
 80172bc:	fb02 0004 	mla	r0, r2, r4, r0
 80172c0:	fba3 3202 	umull	r3, r2, r3, r2
 80172c4:	3301      	adds	r3, #1
 80172c6:	eb40 0002 	adc.w	r0, r0, r2
 80172ca:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80172ce:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80172d2:	bd10      	pop	{r4, pc}
 80172d4:	200000fc 	.word	0x200000fc
 80172d8:	080192f8 	.word	0x080192f8
 80172dc:	0801930f 	.word	0x0801930f
 80172e0:	abcd330e 	.word	0xabcd330e
 80172e4:	e66d1234 	.word	0xe66d1234
 80172e8:	0005deec 	.word	0x0005deec
 80172ec:	5851f42d 	.word	0x5851f42d
 80172f0:	4c957f2d 	.word	0x4c957f2d

080172f4 <realloc>:
 80172f4:	4b02      	ldr	r3, [pc, #8]	@ (8017300 <realloc+0xc>)
 80172f6:	460a      	mov	r2, r1
 80172f8:	4601      	mov	r1, r0
 80172fa:	6818      	ldr	r0, [r3, #0]
 80172fc:	f000 b802 	b.w	8017304 <_realloc_r>
 8017300:	200000fc 	.word	0x200000fc

08017304 <_realloc_r>:
 8017304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017308:	4680      	mov	r8, r0
 801730a:	4615      	mov	r5, r2
 801730c:	460c      	mov	r4, r1
 801730e:	b921      	cbnz	r1, 801731a <_realloc_r+0x16>
 8017310:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017314:	4611      	mov	r1, r2
 8017316:	f7ff bef5 	b.w	8017104 <_malloc_r>
 801731a:	b92a      	cbnz	r2, 8017328 <_realloc_r+0x24>
 801731c:	f000 fb48 	bl	80179b0 <_free_r>
 8017320:	2400      	movs	r4, #0
 8017322:	4620      	mov	r0, r4
 8017324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017328:	f000 fb8c 	bl	8017a44 <_malloc_usable_size_r>
 801732c:	4285      	cmp	r5, r0
 801732e:	4606      	mov	r6, r0
 8017330:	d802      	bhi.n	8017338 <_realloc_r+0x34>
 8017332:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017336:	d8f4      	bhi.n	8017322 <_realloc_r+0x1e>
 8017338:	4629      	mov	r1, r5
 801733a:	4640      	mov	r0, r8
 801733c:	f7ff fee2 	bl	8017104 <_malloc_r>
 8017340:	4607      	mov	r7, r0
 8017342:	2800      	cmp	r0, #0
 8017344:	d0ec      	beq.n	8017320 <_realloc_r+0x1c>
 8017346:	42b5      	cmp	r5, r6
 8017348:	462a      	mov	r2, r5
 801734a:	4621      	mov	r1, r4
 801734c:	bf28      	it	cs
 801734e:	4632      	movcs	r2, r6
 8017350:	f000 faf5 	bl	801793e <memcpy>
 8017354:	4621      	mov	r1, r4
 8017356:	4640      	mov	r0, r8
 8017358:	f000 fb2a 	bl	80179b0 <_free_r>
 801735c:	463c      	mov	r4, r7
 801735e:	e7e0      	b.n	8017322 <_realloc_r+0x1e>

08017360 <_strtoul_l.constprop.0>:
 8017360:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017364:	4e34      	ldr	r6, [pc, #208]	@ (8017438 <_strtoul_l.constprop.0+0xd8>)
 8017366:	4686      	mov	lr, r0
 8017368:	460d      	mov	r5, r1
 801736a:	4628      	mov	r0, r5
 801736c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017370:	5d37      	ldrb	r7, [r6, r4]
 8017372:	f017 0708 	ands.w	r7, r7, #8
 8017376:	d1f8      	bne.n	801736a <_strtoul_l.constprop.0+0xa>
 8017378:	2c2d      	cmp	r4, #45	@ 0x2d
 801737a:	d12f      	bne.n	80173dc <_strtoul_l.constprop.0+0x7c>
 801737c:	782c      	ldrb	r4, [r5, #0]
 801737e:	2701      	movs	r7, #1
 8017380:	1c85      	adds	r5, r0, #2
 8017382:	f033 0010 	bics.w	r0, r3, #16
 8017386:	d109      	bne.n	801739c <_strtoul_l.constprop.0+0x3c>
 8017388:	2c30      	cmp	r4, #48	@ 0x30
 801738a:	d12c      	bne.n	80173e6 <_strtoul_l.constprop.0+0x86>
 801738c:	7828      	ldrb	r0, [r5, #0]
 801738e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8017392:	2858      	cmp	r0, #88	@ 0x58
 8017394:	d127      	bne.n	80173e6 <_strtoul_l.constprop.0+0x86>
 8017396:	786c      	ldrb	r4, [r5, #1]
 8017398:	2310      	movs	r3, #16
 801739a:	3502      	adds	r5, #2
 801739c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80173a0:	2600      	movs	r6, #0
 80173a2:	fbb8 f8f3 	udiv	r8, r8, r3
 80173a6:	fb03 f908 	mul.w	r9, r3, r8
 80173aa:	ea6f 0909 	mvn.w	r9, r9
 80173ae:	4630      	mov	r0, r6
 80173b0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80173b4:	f1bc 0f09 	cmp.w	ip, #9
 80173b8:	d81c      	bhi.n	80173f4 <_strtoul_l.constprop.0+0x94>
 80173ba:	4664      	mov	r4, ip
 80173bc:	42a3      	cmp	r3, r4
 80173be:	dd2a      	ble.n	8017416 <_strtoul_l.constprop.0+0xb6>
 80173c0:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80173c4:	d007      	beq.n	80173d6 <_strtoul_l.constprop.0+0x76>
 80173c6:	4580      	cmp	r8, r0
 80173c8:	d322      	bcc.n	8017410 <_strtoul_l.constprop.0+0xb0>
 80173ca:	d101      	bne.n	80173d0 <_strtoul_l.constprop.0+0x70>
 80173cc:	45a1      	cmp	r9, r4
 80173ce:	db1f      	blt.n	8017410 <_strtoul_l.constprop.0+0xb0>
 80173d0:	fb00 4003 	mla	r0, r0, r3, r4
 80173d4:	2601      	movs	r6, #1
 80173d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80173da:	e7e9      	b.n	80173b0 <_strtoul_l.constprop.0+0x50>
 80173dc:	2c2b      	cmp	r4, #43	@ 0x2b
 80173de:	bf04      	itt	eq
 80173e0:	782c      	ldrbeq	r4, [r5, #0]
 80173e2:	1c85      	addeq	r5, r0, #2
 80173e4:	e7cd      	b.n	8017382 <_strtoul_l.constprop.0+0x22>
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d1d8      	bne.n	801739c <_strtoul_l.constprop.0+0x3c>
 80173ea:	2c30      	cmp	r4, #48	@ 0x30
 80173ec:	bf0c      	ite	eq
 80173ee:	2308      	moveq	r3, #8
 80173f0:	230a      	movne	r3, #10
 80173f2:	e7d3      	b.n	801739c <_strtoul_l.constprop.0+0x3c>
 80173f4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80173f8:	f1bc 0f19 	cmp.w	ip, #25
 80173fc:	d801      	bhi.n	8017402 <_strtoul_l.constprop.0+0xa2>
 80173fe:	3c37      	subs	r4, #55	@ 0x37
 8017400:	e7dc      	b.n	80173bc <_strtoul_l.constprop.0+0x5c>
 8017402:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8017406:	f1bc 0f19 	cmp.w	ip, #25
 801740a:	d804      	bhi.n	8017416 <_strtoul_l.constprop.0+0xb6>
 801740c:	3c57      	subs	r4, #87	@ 0x57
 801740e:	e7d5      	b.n	80173bc <_strtoul_l.constprop.0+0x5c>
 8017410:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8017414:	e7df      	b.n	80173d6 <_strtoul_l.constprop.0+0x76>
 8017416:	1c73      	adds	r3, r6, #1
 8017418:	d106      	bne.n	8017428 <_strtoul_l.constprop.0+0xc8>
 801741a:	2322      	movs	r3, #34	@ 0x22
 801741c:	f8ce 3000 	str.w	r3, [lr]
 8017420:	4630      	mov	r0, r6
 8017422:	b932      	cbnz	r2, 8017432 <_strtoul_l.constprop.0+0xd2>
 8017424:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017428:	b107      	cbz	r7, 801742c <_strtoul_l.constprop.0+0xcc>
 801742a:	4240      	negs	r0, r0
 801742c:	2a00      	cmp	r2, #0
 801742e:	d0f9      	beq.n	8017424 <_strtoul_l.constprop.0+0xc4>
 8017430:	b106      	cbz	r6, 8017434 <_strtoul_l.constprop.0+0xd4>
 8017432:	1e69      	subs	r1, r5, #1
 8017434:	6011      	str	r1, [r2, #0]
 8017436:	e7f5      	b.n	8017424 <_strtoul_l.constprop.0+0xc4>
 8017438:	08019368 	.word	0x08019368

0801743c <strtoul>:
 801743c:	4613      	mov	r3, r2
 801743e:	460a      	mov	r2, r1
 8017440:	4601      	mov	r1, r0
 8017442:	4802      	ldr	r0, [pc, #8]	@ (801744c <strtoul+0x10>)
 8017444:	6800      	ldr	r0, [r0, #0]
 8017446:	f7ff bf8b 	b.w	8017360 <_strtoul_l.constprop.0>
 801744a:	bf00      	nop
 801744c:	200000fc 	.word	0x200000fc

08017450 <std>:
 8017450:	2300      	movs	r3, #0
 8017452:	b510      	push	{r4, lr}
 8017454:	4604      	mov	r4, r0
 8017456:	e9c0 3300 	strd	r3, r3, [r0]
 801745a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801745e:	6083      	str	r3, [r0, #8]
 8017460:	8181      	strh	r1, [r0, #12]
 8017462:	6643      	str	r3, [r0, #100]	@ 0x64
 8017464:	81c2      	strh	r2, [r0, #14]
 8017466:	6183      	str	r3, [r0, #24]
 8017468:	4619      	mov	r1, r3
 801746a:	2208      	movs	r2, #8
 801746c:	305c      	adds	r0, #92	@ 0x5c
 801746e:	f000 f99d 	bl	80177ac <memset>
 8017472:	4b0d      	ldr	r3, [pc, #52]	@ (80174a8 <std+0x58>)
 8017474:	6263      	str	r3, [r4, #36]	@ 0x24
 8017476:	4b0d      	ldr	r3, [pc, #52]	@ (80174ac <std+0x5c>)
 8017478:	62a3      	str	r3, [r4, #40]	@ 0x28
 801747a:	4b0d      	ldr	r3, [pc, #52]	@ (80174b0 <std+0x60>)
 801747c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801747e:	4b0d      	ldr	r3, [pc, #52]	@ (80174b4 <std+0x64>)
 8017480:	6323      	str	r3, [r4, #48]	@ 0x30
 8017482:	4b0d      	ldr	r3, [pc, #52]	@ (80174b8 <std+0x68>)
 8017484:	6224      	str	r4, [r4, #32]
 8017486:	429c      	cmp	r4, r3
 8017488:	d006      	beq.n	8017498 <std+0x48>
 801748a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801748e:	4294      	cmp	r4, r2
 8017490:	d002      	beq.n	8017498 <std+0x48>
 8017492:	33d0      	adds	r3, #208	@ 0xd0
 8017494:	429c      	cmp	r4, r3
 8017496:	d105      	bne.n	80174a4 <std+0x54>
 8017498:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801749c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80174a0:	f000 ba42 	b.w	8017928 <__retarget_lock_init_recursive>
 80174a4:	bd10      	pop	{r4, pc}
 80174a6:	bf00      	nop
 80174a8:	08017661 	.word	0x08017661
 80174ac:	08017683 	.word	0x08017683
 80174b0:	080176bb 	.word	0x080176bb
 80174b4:	080176df 	.word	0x080176df
 80174b8:	2000ad4c 	.word	0x2000ad4c

080174bc <stdio_exit_handler>:
 80174bc:	4a02      	ldr	r2, [pc, #8]	@ (80174c8 <stdio_exit_handler+0xc>)
 80174be:	4903      	ldr	r1, [pc, #12]	@ (80174cc <stdio_exit_handler+0x10>)
 80174c0:	4803      	ldr	r0, [pc, #12]	@ (80174d0 <stdio_exit_handler+0x14>)
 80174c2:	f000 b869 	b.w	8017598 <_fwalk_sglue>
 80174c6:	bf00      	nop
 80174c8:	200000f0 	.word	0x200000f0
 80174cc:	080183ad 	.word	0x080183ad
 80174d0:	20000100 	.word	0x20000100

080174d4 <cleanup_stdio>:
 80174d4:	6841      	ldr	r1, [r0, #4]
 80174d6:	4b0c      	ldr	r3, [pc, #48]	@ (8017508 <cleanup_stdio+0x34>)
 80174d8:	4299      	cmp	r1, r3
 80174da:	b510      	push	{r4, lr}
 80174dc:	4604      	mov	r4, r0
 80174de:	d001      	beq.n	80174e4 <cleanup_stdio+0x10>
 80174e0:	f000 ff64 	bl	80183ac <_fflush_r>
 80174e4:	68a1      	ldr	r1, [r4, #8]
 80174e6:	4b09      	ldr	r3, [pc, #36]	@ (801750c <cleanup_stdio+0x38>)
 80174e8:	4299      	cmp	r1, r3
 80174ea:	d002      	beq.n	80174f2 <cleanup_stdio+0x1e>
 80174ec:	4620      	mov	r0, r4
 80174ee:	f000 ff5d 	bl	80183ac <_fflush_r>
 80174f2:	68e1      	ldr	r1, [r4, #12]
 80174f4:	4b06      	ldr	r3, [pc, #24]	@ (8017510 <cleanup_stdio+0x3c>)
 80174f6:	4299      	cmp	r1, r3
 80174f8:	d004      	beq.n	8017504 <cleanup_stdio+0x30>
 80174fa:	4620      	mov	r0, r4
 80174fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017500:	f000 bf54 	b.w	80183ac <_fflush_r>
 8017504:	bd10      	pop	{r4, pc}
 8017506:	bf00      	nop
 8017508:	2000ad4c 	.word	0x2000ad4c
 801750c:	2000adb4 	.word	0x2000adb4
 8017510:	2000ae1c 	.word	0x2000ae1c

08017514 <global_stdio_init.part.0>:
 8017514:	b510      	push	{r4, lr}
 8017516:	4b0b      	ldr	r3, [pc, #44]	@ (8017544 <global_stdio_init.part.0+0x30>)
 8017518:	4c0b      	ldr	r4, [pc, #44]	@ (8017548 <global_stdio_init.part.0+0x34>)
 801751a:	4a0c      	ldr	r2, [pc, #48]	@ (801754c <global_stdio_init.part.0+0x38>)
 801751c:	601a      	str	r2, [r3, #0]
 801751e:	4620      	mov	r0, r4
 8017520:	2200      	movs	r2, #0
 8017522:	2104      	movs	r1, #4
 8017524:	f7ff ff94 	bl	8017450 <std>
 8017528:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801752c:	2201      	movs	r2, #1
 801752e:	2109      	movs	r1, #9
 8017530:	f7ff ff8e 	bl	8017450 <std>
 8017534:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017538:	2202      	movs	r2, #2
 801753a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801753e:	2112      	movs	r1, #18
 8017540:	f7ff bf86 	b.w	8017450 <std>
 8017544:	2000ae84 	.word	0x2000ae84
 8017548:	2000ad4c 	.word	0x2000ad4c
 801754c:	080174bd 	.word	0x080174bd

08017550 <__sfp_lock_acquire>:
 8017550:	4801      	ldr	r0, [pc, #4]	@ (8017558 <__sfp_lock_acquire+0x8>)
 8017552:	f000 b9ea 	b.w	801792a <__retarget_lock_acquire_recursive>
 8017556:	bf00      	nop
 8017558:	2000ae8e 	.word	0x2000ae8e

0801755c <__sfp_lock_release>:
 801755c:	4801      	ldr	r0, [pc, #4]	@ (8017564 <__sfp_lock_release+0x8>)
 801755e:	f000 b9e5 	b.w	801792c <__retarget_lock_release_recursive>
 8017562:	bf00      	nop
 8017564:	2000ae8e 	.word	0x2000ae8e

08017568 <__sinit>:
 8017568:	b510      	push	{r4, lr}
 801756a:	4604      	mov	r4, r0
 801756c:	f7ff fff0 	bl	8017550 <__sfp_lock_acquire>
 8017570:	6a23      	ldr	r3, [r4, #32]
 8017572:	b11b      	cbz	r3, 801757c <__sinit+0x14>
 8017574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017578:	f7ff bff0 	b.w	801755c <__sfp_lock_release>
 801757c:	4b04      	ldr	r3, [pc, #16]	@ (8017590 <__sinit+0x28>)
 801757e:	6223      	str	r3, [r4, #32]
 8017580:	4b04      	ldr	r3, [pc, #16]	@ (8017594 <__sinit+0x2c>)
 8017582:	681b      	ldr	r3, [r3, #0]
 8017584:	2b00      	cmp	r3, #0
 8017586:	d1f5      	bne.n	8017574 <__sinit+0xc>
 8017588:	f7ff ffc4 	bl	8017514 <global_stdio_init.part.0>
 801758c:	e7f2      	b.n	8017574 <__sinit+0xc>
 801758e:	bf00      	nop
 8017590:	080174d5 	.word	0x080174d5
 8017594:	2000ae84 	.word	0x2000ae84

08017598 <_fwalk_sglue>:
 8017598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801759c:	4607      	mov	r7, r0
 801759e:	4688      	mov	r8, r1
 80175a0:	4614      	mov	r4, r2
 80175a2:	2600      	movs	r6, #0
 80175a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80175a8:	f1b9 0901 	subs.w	r9, r9, #1
 80175ac:	d505      	bpl.n	80175ba <_fwalk_sglue+0x22>
 80175ae:	6824      	ldr	r4, [r4, #0]
 80175b0:	2c00      	cmp	r4, #0
 80175b2:	d1f7      	bne.n	80175a4 <_fwalk_sglue+0xc>
 80175b4:	4630      	mov	r0, r6
 80175b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80175ba:	89ab      	ldrh	r3, [r5, #12]
 80175bc:	2b01      	cmp	r3, #1
 80175be:	d907      	bls.n	80175d0 <_fwalk_sglue+0x38>
 80175c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80175c4:	3301      	adds	r3, #1
 80175c6:	d003      	beq.n	80175d0 <_fwalk_sglue+0x38>
 80175c8:	4629      	mov	r1, r5
 80175ca:	4638      	mov	r0, r7
 80175cc:	47c0      	blx	r8
 80175ce:	4306      	orrs	r6, r0
 80175d0:	3568      	adds	r5, #104	@ 0x68
 80175d2:	e7e9      	b.n	80175a8 <_fwalk_sglue+0x10>

080175d4 <iprintf>:
 80175d4:	b40f      	push	{r0, r1, r2, r3}
 80175d6:	b507      	push	{r0, r1, r2, lr}
 80175d8:	4906      	ldr	r1, [pc, #24]	@ (80175f4 <iprintf+0x20>)
 80175da:	ab04      	add	r3, sp, #16
 80175dc:	6808      	ldr	r0, [r1, #0]
 80175de:	f853 2b04 	ldr.w	r2, [r3], #4
 80175e2:	6881      	ldr	r1, [r0, #8]
 80175e4:	9301      	str	r3, [sp, #4]
 80175e6:	f000 fbb7 	bl	8017d58 <_vfiprintf_r>
 80175ea:	b003      	add	sp, #12
 80175ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80175f0:	b004      	add	sp, #16
 80175f2:	4770      	bx	lr
 80175f4:	200000fc 	.word	0x200000fc

080175f8 <sniprintf>:
 80175f8:	b40c      	push	{r2, r3}
 80175fa:	b530      	push	{r4, r5, lr}
 80175fc:	4b17      	ldr	r3, [pc, #92]	@ (801765c <sniprintf+0x64>)
 80175fe:	1e0c      	subs	r4, r1, #0
 8017600:	681d      	ldr	r5, [r3, #0]
 8017602:	b09d      	sub	sp, #116	@ 0x74
 8017604:	da08      	bge.n	8017618 <sniprintf+0x20>
 8017606:	238b      	movs	r3, #139	@ 0x8b
 8017608:	602b      	str	r3, [r5, #0]
 801760a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801760e:	b01d      	add	sp, #116	@ 0x74
 8017610:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017614:	b002      	add	sp, #8
 8017616:	4770      	bx	lr
 8017618:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801761c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017620:	bf14      	ite	ne
 8017622:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8017626:	4623      	moveq	r3, r4
 8017628:	9304      	str	r3, [sp, #16]
 801762a:	9307      	str	r3, [sp, #28]
 801762c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017630:	9002      	str	r0, [sp, #8]
 8017632:	9006      	str	r0, [sp, #24]
 8017634:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017638:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801763a:	ab21      	add	r3, sp, #132	@ 0x84
 801763c:	a902      	add	r1, sp, #8
 801763e:	4628      	mov	r0, r5
 8017640:	9301      	str	r3, [sp, #4]
 8017642:	f000 fa63 	bl	8017b0c <_svfiprintf_r>
 8017646:	1c43      	adds	r3, r0, #1
 8017648:	bfbc      	itt	lt
 801764a:	238b      	movlt	r3, #139	@ 0x8b
 801764c:	602b      	strlt	r3, [r5, #0]
 801764e:	2c00      	cmp	r4, #0
 8017650:	d0dd      	beq.n	801760e <sniprintf+0x16>
 8017652:	9b02      	ldr	r3, [sp, #8]
 8017654:	2200      	movs	r2, #0
 8017656:	701a      	strb	r2, [r3, #0]
 8017658:	e7d9      	b.n	801760e <sniprintf+0x16>
 801765a:	bf00      	nop
 801765c:	200000fc 	.word	0x200000fc

08017660 <__sread>:
 8017660:	b510      	push	{r4, lr}
 8017662:	460c      	mov	r4, r1
 8017664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017668:	f000 f900 	bl	801786c <_read_r>
 801766c:	2800      	cmp	r0, #0
 801766e:	bfab      	itete	ge
 8017670:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017672:	89a3      	ldrhlt	r3, [r4, #12]
 8017674:	181b      	addge	r3, r3, r0
 8017676:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801767a:	bfac      	ite	ge
 801767c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801767e:	81a3      	strhlt	r3, [r4, #12]
 8017680:	bd10      	pop	{r4, pc}

08017682 <__swrite>:
 8017682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017686:	461f      	mov	r7, r3
 8017688:	898b      	ldrh	r3, [r1, #12]
 801768a:	05db      	lsls	r3, r3, #23
 801768c:	4605      	mov	r5, r0
 801768e:	460c      	mov	r4, r1
 8017690:	4616      	mov	r6, r2
 8017692:	d505      	bpl.n	80176a0 <__swrite+0x1e>
 8017694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017698:	2302      	movs	r3, #2
 801769a:	2200      	movs	r2, #0
 801769c:	f000 f8d4 	bl	8017848 <_lseek_r>
 80176a0:	89a3      	ldrh	r3, [r4, #12]
 80176a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80176a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80176aa:	81a3      	strh	r3, [r4, #12]
 80176ac:	4632      	mov	r2, r6
 80176ae:	463b      	mov	r3, r7
 80176b0:	4628      	mov	r0, r5
 80176b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80176b6:	f000 b8fb 	b.w	80178b0 <_write_r>

080176ba <__sseek>:
 80176ba:	b510      	push	{r4, lr}
 80176bc:	460c      	mov	r4, r1
 80176be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80176c2:	f000 f8c1 	bl	8017848 <_lseek_r>
 80176c6:	1c43      	adds	r3, r0, #1
 80176c8:	89a3      	ldrh	r3, [r4, #12]
 80176ca:	bf15      	itete	ne
 80176cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80176ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80176d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80176d6:	81a3      	strheq	r3, [r4, #12]
 80176d8:	bf18      	it	ne
 80176da:	81a3      	strhne	r3, [r4, #12]
 80176dc:	bd10      	pop	{r4, pc}

080176de <__sclose>:
 80176de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80176e2:	f000 b8a1 	b.w	8017828 <_close_r>

080176e6 <_vsniprintf_r>:
 80176e6:	b530      	push	{r4, r5, lr}
 80176e8:	4614      	mov	r4, r2
 80176ea:	2c00      	cmp	r4, #0
 80176ec:	b09b      	sub	sp, #108	@ 0x6c
 80176ee:	4605      	mov	r5, r0
 80176f0:	461a      	mov	r2, r3
 80176f2:	da05      	bge.n	8017700 <_vsniprintf_r+0x1a>
 80176f4:	238b      	movs	r3, #139	@ 0x8b
 80176f6:	6003      	str	r3, [r0, #0]
 80176f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80176fc:	b01b      	add	sp, #108	@ 0x6c
 80176fe:	bd30      	pop	{r4, r5, pc}
 8017700:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017704:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017708:	bf14      	ite	ne
 801770a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801770e:	4623      	moveq	r3, r4
 8017710:	9302      	str	r3, [sp, #8]
 8017712:	9305      	str	r3, [sp, #20]
 8017714:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017718:	9100      	str	r1, [sp, #0]
 801771a:	9104      	str	r1, [sp, #16]
 801771c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017720:	4669      	mov	r1, sp
 8017722:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017724:	f000 f9f2 	bl	8017b0c <_svfiprintf_r>
 8017728:	1c43      	adds	r3, r0, #1
 801772a:	bfbc      	itt	lt
 801772c:	238b      	movlt	r3, #139	@ 0x8b
 801772e:	602b      	strlt	r3, [r5, #0]
 8017730:	2c00      	cmp	r4, #0
 8017732:	d0e3      	beq.n	80176fc <_vsniprintf_r+0x16>
 8017734:	9b00      	ldr	r3, [sp, #0]
 8017736:	2200      	movs	r2, #0
 8017738:	701a      	strb	r2, [r3, #0]
 801773a:	e7df      	b.n	80176fc <_vsniprintf_r+0x16>

0801773c <vsniprintf>:
 801773c:	b507      	push	{r0, r1, r2, lr}
 801773e:	9300      	str	r3, [sp, #0]
 8017740:	4613      	mov	r3, r2
 8017742:	460a      	mov	r2, r1
 8017744:	4601      	mov	r1, r0
 8017746:	4803      	ldr	r0, [pc, #12]	@ (8017754 <vsniprintf+0x18>)
 8017748:	6800      	ldr	r0, [r0, #0]
 801774a:	f7ff ffcc 	bl	80176e6 <_vsniprintf_r>
 801774e:	b003      	add	sp, #12
 8017750:	f85d fb04 	ldr.w	pc, [sp], #4
 8017754:	200000fc 	.word	0x200000fc

08017758 <memcmp>:
 8017758:	b510      	push	{r4, lr}
 801775a:	3901      	subs	r1, #1
 801775c:	4402      	add	r2, r0
 801775e:	4290      	cmp	r0, r2
 8017760:	d101      	bne.n	8017766 <memcmp+0xe>
 8017762:	2000      	movs	r0, #0
 8017764:	e005      	b.n	8017772 <memcmp+0x1a>
 8017766:	7803      	ldrb	r3, [r0, #0]
 8017768:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801776c:	42a3      	cmp	r3, r4
 801776e:	d001      	beq.n	8017774 <memcmp+0x1c>
 8017770:	1b18      	subs	r0, r3, r4
 8017772:	bd10      	pop	{r4, pc}
 8017774:	3001      	adds	r0, #1
 8017776:	e7f2      	b.n	801775e <memcmp+0x6>

08017778 <memmove>:
 8017778:	4288      	cmp	r0, r1
 801777a:	b510      	push	{r4, lr}
 801777c:	eb01 0402 	add.w	r4, r1, r2
 8017780:	d902      	bls.n	8017788 <memmove+0x10>
 8017782:	4284      	cmp	r4, r0
 8017784:	4623      	mov	r3, r4
 8017786:	d807      	bhi.n	8017798 <memmove+0x20>
 8017788:	1e43      	subs	r3, r0, #1
 801778a:	42a1      	cmp	r1, r4
 801778c:	d008      	beq.n	80177a0 <memmove+0x28>
 801778e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017792:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017796:	e7f8      	b.n	801778a <memmove+0x12>
 8017798:	4402      	add	r2, r0
 801779a:	4601      	mov	r1, r0
 801779c:	428a      	cmp	r2, r1
 801779e:	d100      	bne.n	80177a2 <memmove+0x2a>
 80177a0:	bd10      	pop	{r4, pc}
 80177a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80177a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80177aa:	e7f7      	b.n	801779c <memmove+0x24>

080177ac <memset>:
 80177ac:	4402      	add	r2, r0
 80177ae:	4603      	mov	r3, r0
 80177b0:	4293      	cmp	r3, r2
 80177b2:	d100      	bne.n	80177b6 <memset+0xa>
 80177b4:	4770      	bx	lr
 80177b6:	f803 1b01 	strb.w	r1, [r3], #1
 80177ba:	e7f9      	b.n	80177b0 <memset+0x4>

080177bc <strchr>:
 80177bc:	b2c9      	uxtb	r1, r1
 80177be:	4603      	mov	r3, r0
 80177c0:	4618      	mov	r0, r3
 80177c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80177c6:	b112      	cbz	r2, 80177ce <strchr+0x12>
 80177c8:	428a      	cmp	r2, r1
 80177ca:	d1f9      	bne.n	80177c0 <strchr+0x4>
 80177cc:	4770      	bx	lr
 80177ce:	2900      	cmp	r1, #0
 80177d0:	bf18      	it	ne
 80177d2:	2000      	movne	r0, #0
 80177d4:	4770      	bx	lr

080177d6 <strncmp>:
 80177d6:	b510      	push	{r4, lr}
 80177d8:	b16a      	cbz	r2, 80177f6 <strncmp+0x20>
 80177da:	3901      	subs	r1, #1
 80177dc:	1884      	adds	r4, r0, r2
 80177de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80177e2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80177e6:	429a      	cmp	r2, r3
 80177e8:	d103      	bne.n	80177f2 <strncmp+0x1c>
 80177ea:	42a0      	cmp	r0, r4
 80177ec:	d001      	beq.n	80177f2 <strncmp+0x1c>
 80177ee:	2a00      	cmp	r2, #0
 80177f0:	d1f5      	bne.n	80177de <strncmp+0x8>
 80177f2:	1ad0      	subs	r0, r2, r3
 80177f4:	bd10      	pop	{r4, pc}
 80177f6:	4610      	mov	r0, r2
 80177f8:	e7fc      	b.n	80177f4 <strncmp+0x1e>

080177fa <strstr>:
 80177fa:	780a      	ldrb	r2, [r1, #0]
 80177fc:	b570      	push	{r4, r5, r6, lr}
 80177fe:	b96a      	cbnz	r2, 801781c <strstr+0x22>
 8017800:	bd70      	pop	{r4, r5, r6, pc}
 8017802:	429a      	cmp	r2, r3
 8017804:	d109      	bne.n	801781a <strstr+0x20>
 8017806:	460c      	mov	r4, r1
 8017808:	4605      	mov	r5, r0
 801780a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801780e:	2b00      	cmp	r3, #0
 8017810:	d0f6      	beq.n	8017800 <strstr+0x6>
 8017812:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8017816:	429e      	cmp	r6, r3
 8017818:	d0f7      	beq.n	801780a <strstr+0x10>
 801781a:	3001      	adds	r0, #1
 801781c:	7803      	ldrb	r3, [r0, #0]
 801781e:	2b00      	cmp	r3, #0
 8017820:	d1ef      	bne.n	8017802 <strstr+0x8>
 8017822:	4618      	mov	r0, r3
 8017824:	e7ec      	b.n	8017800 <strstr+0x6>
	...

08017828 <_close_r>:
 8017828:	b538      	push	{r3, r4, r5, lr}
 801782a:	4d06      	ldr	r5, [pc, #24]	@ (8017844 <_close_r+0x1c>)
 801782c:	2300      	movs	r3, #0
 801782e:	4604      	mov	r4, r0
 8017830:	4608      	mov	r0, r1
 8017832:	602b      	str	r3, [r5, #0]
 8017834:	f7ea fdae 	bl	8002394 <_close>
 8017838:	1c43      	adds	r3, r0, #1
 801783a:	d102      	bne.n	8017842 <_close_r+0x1a>
 801783c:	682b      	ldr	r3, [r5, #0]
 801783e:	b103      	cbz	r3, 8017842 <_close_r+0x1a>
 8017840:	6023      	str	r3, [r4, #0]
 8017842:	bd38      	pop	{r3, r4, r5, pc}
 8017844:	2000ae88 	.word	0x2000ae88

08017848 <_lseek_r>:
 8017848:	b538      	push	{r3, r4, r5, lr}
 801784a:	4d07      	ldr	r5, [pc, #28]	@ (8017868 <_lseek_r+0x20>)
 801784c:	4604      	mov	r4, r0
 801784e:	4608      	mov	r0, r1
 8017850:	4611      	mov	r1, r2
 8017852:	2200      	movs	r2, #0
 8017854:	602a      	str	r2, [r5, #0]
 8017856:	461a      	mov	r2, r3
 8017858:	f7ea fdc3 	bl	80023e2 <_lseek>
 801785c:	1c43      	adds	r3, r0, #1
 801785e:	d102      	bne.n	8017866 <_lseek_r+0x1e>
 8017860:	682b      	ldr	r3, [r5, #0]
 8017862:	b103      	cbz	r3, 8017866 <_lseek_r+0x1e>
 8017864:	6023      	str	r3, [r4, #0]
 8017866:	bd38      	pop	{r3, r4, r5, pc}
 8017868:	2000ae88 	.word	0x2000ae88

0801786c <_read_r>:
 801786c:	b538      	push	{r3, r4, r5, lr}
 801786e:	4d07      	ldr	r5, [pc, #28]	@ (801788c <_read_r+0x20>)
 8017870:	4604      	mov	r4, r0
 8017872:	4608      	mov	r0, r1
 8017874:	4611      	mov	r1, r2
 8017876:	2200      	movs	r2, #0
 8017878:	602a      	str	r2, [r5, #0]
 801787a:	461a      	mov	r2, r3
 801787c:	f7ea fd51 	bl	8002322 <_read>
 8017880:	1c43      	adds	r3, r0, #1
 8017882:	d102      	bne.n	801788a <_read_r+0x1e>
 8017884:	682b      	ldr	r3, [r5, #0]
 8017886:	b103      	cbz	r3, 801788a <_read_r+0x1e>
 8017888:	6023      	str	r3, [r4, #0]
 801788a:	bd38      	pop	{r3, r4, r5, pc}
 801788c:	2000ae88 	.word	0x2000ae88

08017890 <_sbrk_r>:
 8017890:	b538      	push	{r3, r4, r5, lr}
 8017892:	4d06      	ldr	r5, [pc, #24]	@ (80178ac <_sbrk_r+0x1c>)
 8017894:	2300      	movs	r3, #0
 8017896:	4604      	mov	r4, r0
 8017898:	4608      	mov	r0, r1
 801789a:	602b      	str	r3, [r5, #0]
 801789c:	f7ea fdae 	bl	80023fc <_sbrk>
 80178a0:	1c43      	adds	r3, r0, #1
 80178a2:	d102      	bne.n	80178aa <_sbrk_r+0x1a>
 80178a4:	682b      	ldr	r3, [r5, #0]
 80178a6:	b103      	cbz	r3, 80178aa <_sbrk_r+0x1a>
 80178a8:	6023      	str	r3, [r4, #0]
 80178aa:	bd38      	pop	{r3, r4, r5, pc}
 80178ac:	2000ae88 	.word	0x2000ae88

080178b0 <_write_r>:
 80178b0:	b538      	push	{r3, r4, r5, lr}
 80178b2:	4d07      	ldr	r5, [pc, #28]	@ (80178d0 <_write_r+0x20>)
 80178b4:	4604      	mov	r4, r0
 80178b6:	4608      	mov	r0, r1
 80178b8:	4611      	mov	r1, r2
 80178ba:	2200      	movs	r2, #0
 80178bc:	602a      	str	r2, [r5, #0]
 80178be:	461a      	mov	r2, r3
 80178c0:	f7ea fd4c 	bl	800235c <_write>
 80178c4:	1c43      	adds	r3, r0, #1
 80178c6:	d102      	bne.n	80178ce <_write_r+0x1e>
 80178c8:	682b      	ldr	r3, [r5, #0]
 80178ca:	b103      	cbz	r3, 80178ce <_write_r+0x1e>
 80178cc:	6023      	str	r3, [r4, #0]
 80178ce:	bd38      	pop	{r3, r4, r5, pc}
 80178d0:	2000ae88 	.word	0x2000ae88

080178d4 <__errno>:
 80178d4:	4b01      	ldr	r3, [pc, #4]	@ (80178dc <__errno+0x8>)
 80178d6:	6818      	ldr	r0, [r3, #0]
 80178d8:	4770      	bx	lr
 80178da:	bf00      	nop
 80178dc:	200000fc 	.word	0x200000fc

080178e0 <__libc_init_array>:
 80178e0:	b570      	push	{r4, r5, r6, lr}
 80178e2:	4d0d      	ldr	r5, [pc, #52]	@ (8017918 <__libc_init_array+0x38>)
 80178e4:	4c0d      	ldr	r4, [pc, #52]	@ (801791c <__libc_init_array+0x3c>)
 80178e6:	1b64      	subs	r4, r4, r5
 80178e8:	10a4      	asrs	r4, r4, #2
 80178ea:	2600      	movs	r6, #0
 80178ec:	42a6      	cmp	r6, r4
 80178ee:	d109      	bne.n	8017904 <__libc_init_array+0x24>
 80178f0:	4d0b      	ldr	r5, [pc, #44]	@ (8017920 <__libc_init_array+0x40>)
 80178f2:	4c0c      	ldr	r4, [pc, #48]	@ (8017924 <__libc_init_array+0x44>)
 80178f4:	f000 fef8 	bl	80186e8 <_init>
 80178f8:	1b64      	subs	r4, r4, r5
 80178fa:	10a4      	asrs	r4, r4, #2
 80178fc:	2600      	movs	r6, #0
 80178fe:	42a6      	cmp	r6, r4
 8017900:	d105      	bne.n	801790e <__libc_init_array+0x2e>
 8017902:	bd70      	pop	{r4, r5, r6, pc}
 8017904:	f855 3b04 	ldr.w	r3, [r5], #4
 8017908:	4798      	blx	r3
 801790a:	3601      	adds	r6, #1
 801790c:	e7ee      	b.n	80178ec <__libc_init_array+0xc>
 801790e:	f855 3b04 	ldr.w	r3, [r5], #4
 8017912:	4798      	blx	r3
 8017914:	3601      	adds	r6, #1
 8017916:	e7f2      	b.n	80178fe <__libc_init_array+0x1e>
 8017918:	080194e0 	.word	0x080194e0
 801791c:	080194e0 	.word	0x080194e0
 8017920:	080194e0 	.word	0x080194e0
 8017924:	080194e8 	.word	0x080194e8

08017928 <__retarget_lock_init_recursive>:
 8017928:	4770      	bx	lr

0801792a <__retarget_lock_acquire_recursive>:
 801792a:	4770      	bx	lr

0801792c <__retarget_lock_release_recursive>:
 801792c:	4770      	bx	lr

0801792e <strcpy>:
 801792e:	4603      	mov	r3, r0
 8017930:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017934:	f803 2b01 	strb.w	r2, [r3], #1
 8017938:	2a00      	cmp	r2, #0
 801793a:	d1f9      	bne.n	8017930 <strcpy+0x2>
 801793c:	4770      	bx	lr

0801793e <memcpy>:
 801793e:	440a      	add	r2, r1
 8017940:	4291      	cmp	r1, r2
 8017942:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8017946:	d100      	bne.n	801794a <memcpy+0xc>
 8017948:	4770      	bx	lr
 801794a:	b510      	push	{r4, lr}
 801794c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017950:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017954:	4291      	cmp	r1, r2
 8017956:	d1f9      	bne.n	801794c <memcpy+0xe>
 8017958:	bd10      	pop	{r4, pc}
	...

0801795c <__assert_func>:
 801795c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801795e:	4614      	mov	r4, r2
 8017960:	461a      	mov	r2, r3
 8017962:	4b09      	ldr	r3, [pc, #36]	@ (8017988 <__assert_func+0x2c>)
 8017964:	681b      	ldr	r3, [r3, #0]
 8017966:	4605      	mov	r5, r0
 8017968:	68d8      	ldr	r0, [r3, #12]
 801796a:	b954      	cbnz	r4, 8017982 <__assert_func+0x26>
 801796c:	4b07      	ldr	r3, [pc, #28]	@ (801798c <__assert_func+0x30>)
 801796e:	461c      	mov	r4, r3
 8017970:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017974:	9100      	str	r1, [sp, #0]
 8017976:	462b      	mov	r3, r5
 8017978:	4905      	ldr	r1, [pc, #20]	@ (8017990 <__assert_func+0x34>)
 801797a:	f000 fd3f 	bl	80183fc <fiprintf>
 801797e:	f000 fde3 	bl	8018548 <abort>
 8017982:	4b04      	ldr	r3, [pc, #16]	@ (8017994 <__assert_func+0x38>)
 8017984:	e7f4      	b.n	8017970 <__assert_func+0x14>
 8017986:	bf00      	nop
 8017988:	200000fc 	.word	0x200000fc
 801798c:	080194a3 	.word	0x080194a3
 8017990:	08019475 	.word	0x08019475
 8017994:	08019468 	.word	0x08019468

08017998 <__env_lock>:
 8017998:	4801      	ldr	r0, [pc, #4]	@ (80179a0 <__env_lock+0x8>)
 801799a:	f7ff bfc6 	b.w	801792a <__retarget_lock_acquire_recursive>
 801799e:	bf00      	nop
 80179a0:	2000ae8c 	.word	0x2000ae8c

080179a4 <__env_unlock>:
 80179a4:	4801      	ldr	r0, [pc, #4]	@ (80179ac <__env_unlock+0x8>)
 80179a6:	f7ff bfc1 	b.w	801792c <__retarget_lock_release_recursive>
 80179aa:	bf00      	nop
 80179ac:	2000ae8c 	.word	0x2000ae8c

080179b0 <_free_r>:
 80179b0:	b538      	push	{r3, r4, r5, lr}
 80179b2:	4605      	mov	r5, r0
 80179b4:	2900      	cmp	r1, #0
 80179b6:	d041      	beq.n	8017a3c <_free_r+0x8c>
 80179b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80179bc:	1f0c      	subs	r4, r1, #4
 80179be:	2b00      	cmp	r3, #0
 80179c0:	bfb8      	it	lt
 80179c2:	18e4      	addlt	r4, r4, r3
 80179c4:	f7ff fc1e 	bl	8017204 <__malloc_lock>
 80179c8:	4a1d      	ldr	r2, [pc, #116]	@ (8017a40 <_free_r+0x90>)
 80179ca:	6813      	ldr	r3, [r2, #0]
 80179cc:	b933      	cbnz	r3, 80179dc <_free_r+0x2c>
 80179ce:	6063      	str	r3, [r4, #4]
 80179d0:	6014      	str	r4, [r2, #0]
 80179d2:	4628      	mov	r0, r5
 80179d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80179d8:	f7ff bc1a 	b.w	8017210 <__malloc_unlock>
 80179dc:	42a3      	cmp	r3, r4
 80179de:	d908      	bls.n	80179f2 <_free_r+0x42>
 80179e0:	6820      	ldr	r0, [r4, #0]
 80179e2:	1821      	adds	r1, r4, r0
 80179e4:	428b      	cmp	r3, r1
 80179e6:	bf01      	itttt	eq
 80179e8:	6819      	ldreq	r1, [r3, #0]
 80179ea:	685b      	ldreq	r3, [r3, #4]
 80179ec:	1809      	addeq	r1, r1, r0
 80179ee:	6021      	streq	r1, [r4, #0]
 80179f0:	e7ed      	b.n	80179ce <_free_r+0x1e>
 80179f2:	461a      	mov	r2, r3
 80179f4:	685b      	ldr	r3, [r3, #4]
 80179f6:	b10b      	cbz	r3, 80179fc <_free_r+0x4c>
 80179f8:	42a3      	cmp	r3, r4
 80179fa:	d9fa      	bls.n	80179f2 <_free_r+0x42>
 80179fc:	6811      	ldr	r1, [r2, #0]
 80179fe:	1850      	adds	r0, r2, r1
 8017a00:	42a0      	cmp	r0, r4
 8017a02:	d10b      	bne.n	8017a1c <_free_r+0x6c>
 8017a04:	6820      	ldr	r0, [r4, #0]
 8017a06:	4401      	add	r1, r0
 8017a08:	1850      	adds	r0, r2, r1
 8017a0a:	4283      	cmp	r3, r0
 8017a0c:	6011      	str	r1, [r2, #0]
 8017a0e:	d1e0      	bne.n	80179d2 <_free_r+0x22>
 8017a10:	6818      	ldr	r0, [r3, #0]
 8017a12:	685b      	ldr	r3, [r3, #4]
 8017a14:	6053      	str	r3, [r2, #4]
 8017a16:	4408      	add	r0, r1
 8017a18:	6010      	str	r0, [r2, #0]
 8017a1a:	e7da      	b.n	80179d2 <_free_r+0x22>
 8017a1c:	d902      	bls.n	8017a24 <_free_r+0x74>
 8017a1e:	230c      	movs	r3, #12
 8017a20:	602b      	str	r3, [r5, #0]
 8017a22:	e7d6      	b.n	80179d2 <_free_r+0x22>
 8017a24:	6820      	ldr	r0, [r4, #0]
 8017a26:	1821      	adds	r1, r4, r0
 8017a28:	428b      	cmp	r3, r1
 8017a2a:	bf04      	itt	eq
 8017a2c:	6819      	ldreq	r1, [r3, #0]
 8017a2e:	685b      	ldreq	r3, [r3, #4]
 8017a30:	6063      	str	r3, [r4, #4]
 8017a32:	bf04      	itt	eq
 8017a34:	1809      	addeq	r1, r1, r0
 8017a36:	6021      	streq	r1, [r4, #0]
 8017a38:	6054      	str	r4, [r2, #4]
 8017a3a:	e7ca      	b.n	80179d2 <_free_r+0x22>
 8017a3c:	bd38      	pop	{r3, r4, r5, pc}
 8017a3e:	bf00      	nop
 8017a40:	2000ad48 	.word	0x2000ad48

08017a44 <_malloc_usable_size_r>:
 8017a44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017a48:	1f18      	subs	r0, r3, #4
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	bfbc      	itt	lt
 8017a4e:	580b      	ldrlt	r3, [r1, r0]
 8017a50:	18c0      	addlt	r0, r0, r3
 8017a52:	4770      	bx	lr

08017a54 <__ssputs_r>:
 8017a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a58:	688e      	ldr	r6, [r1, #8]
 8017a5a:	461f      	mov	r7, r3
 8017a5c:	42be      	cmp	r6, r7
 8017a5e:	680b      	ldr	r3, [r1, #0]
 8017a60:	4682      	mov	sl, r0
 8017a62:	460c      	mov	r4, r1
 8017a64:	4690      	mov	r8, r2
 8017a66:	d82d      	bhi.n	8017ac4 <__ssputs_r+0x70>
 8017a68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017a6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017a70:	d026      	beq.n	8017ac0 <__ssputs_r+0x6c>
 8017a72:	6965      	ldr	r5, [r4, #20]
 8017a74:	6909      	ldr	r1, [r1, #16]
 8017a76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017a7a:	eba3 0901 	sub.w	r9, r3, r1
 8017a7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017a82:	1c7b      	adds	r3, r7, #1
 8017a84:	444b      	add	r3, r9
 8017a86:	106d      	asrs	r5, r5, #1
 8017a88:	429d      	cmp	r5, r3
 8017a8a:	bf38      	it	cc
 8017a8c:	461d      	movcc	r5, r3
 8017a8e:	0553      	lsls	r3, r2, #21
 8017a90:	d527      	bpl.n	8017ae2 <__ssputs_r+0x8e>
 8017a92:	4629      	mov	r1, r5
 8017a94:	f7ff fb36 	bl	8017104 <_malloc_r>
 8017a98:	4606      	mov	r6, r0
 8017a9a:	b360      	cbz	r0, 8017af6 <__ssputs_r+0xa2>
 8017a9c:	6921      	ldr	r1, [r4, #16]
 8017a9e:	464a      	mov	r2, r9
 8017aa0:	f7ff ff4d 	bl	801793e <memcpy>
 8017aa4:	89a3      	ldrh	r3, [r4, #12]
 8017aa6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017aae:	81a3      	strh	r3, [r4, #12]
 8017ab0:	6126      	str	r6, [r4, #16]
 8017ab2:	6165      	str	r5, [r4, #20]
 8017ab4:	444e      	add	r6, r9
 8017ab6:	eba5 0509 	sub.w	r5, r5, r9
 8017aba:	6026      	str	r6, [r4, #0]
 8017abc:	60a5      	str	r5, [r4, #8]
 8017abe:	463e      	mov	r6, r7
 8017ac0:	42be      	cmp	r6, r7
 8017ac2:	d900      	bls.n	8017ac6 <__ssputs_r+0x72>
 8017ac4:	463e      	mov	r6, r7
 8017ac6:	6820      	ldr	r0, [r4, #0]
 8017ac8:	4632      	mov	r2, r6
 8017aca:	4641      	mov	r1, r8
 8017acc:	f7ff fe54 	bl	8017778 <memmove>
 8017ad0:	68a3      	ldr	r3, [r4, #8]
 8017ad2:	1b9b      	subs	r3, r3, r6
 8017ad4:	60a3      	str	r3, [r4, #8]
 8017ad6:	6823      	ldr	r3, [r4, #0]
 8017ad8:	4433      	add	r3, r6
 8017ada:	6023      	str	r3, [r4, #0]
 8017adc:	2000      	movs	r0, #0
 8017ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ae2:	462a      	mov	r2, r5
 8017ae4:	f7ff fc0e 	bl	8017304 <_realloc_r>
 8017ae8:	4606      	mov	r6, r0
 8017aea:	2800      	cmp	r0, #0
 8017aec:	d1e0      	bne.n	8017ab0 <__ssputs_r+0x5c>
 8017aee:	6921      	ldr	r1, [r4, #16]
 8017af0:	4650      	mov	r0, sl
 8017af2:	f7ff ff5d 	bl	80179b0 <_free_r>
 8017af6:	230c      	movs	r3, #12
 8017af8:	f8ca 3000 	str.w	r3, [sl]
 8017afc:	89a3      	ldrh	r3, [r4, #12]
 8017afe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017b02:	81a3      	strh	r3, [r4, #12]
 8017b04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017b08:	e7e9      	b.n	8017ade <__ssputs_r+0x8a>
	...

08017b0c <_svfiprintf_r>:
 8017b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b10:	4698      	mov	r8, r3
 8017b12:	898b      	ldrh	r3, [r1, #12]
 8017b14:	061b      	lsls	r3, r3, #24
 8017b16:	b09d      	sub	sp, #116	@ 0x74
 8017b18:	4607      	mov	r7, r0
 8017b1a:	460d      	mov	r5, r1
 8017b1c:	4614      	mov	r4, r2
 8017b1e:	d510      	bpl.n	8017b42 <_svfiprintf_r+0x36>
 8017b20:	690b      	ldr	r3, [r1, #16]
 8017b22:	b973      	cbnz	r3, 8017b42 <_svfiprintf_r+0x36>
 8017b24:	2140      	movs	r1, #64	@ 0x40
 8017b26:	f7ff faed 	bl	8017104 <_malloc_r>
 8017b2a:	6028      	str	r0, [r5, #0]
 8017b2c:	6128      	str	r0, [r5, #16]
 8017b2e:	b930      	cbnz	r0, 8017b3e <_svfiprintf_r+0x32>
 8017b30:	230c      	movs	r3, #12
 8017b32:	603b      	str	r3, [r7, #0]
 8017b34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017b38:	b01d      	add	sp, #116	@ 0x74
 8017b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b3e:	2340      	movs	r3, #64	@ 0x40
 8017b40:	616b      	str	r3, [r5, #20]
 8017b42:	2300      	movs	r3, #0
 8017b44:	9309      	str	r3, [sp, #36]	@ 0x24
 8017b46:	2320      	movs	r3, #32
 8017b48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017b4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8017b50:	2330      	movs	r3, #48	@ 0x30
 8017b52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017cf0 <_svfiprintf_r+0x1e4>
 8017b56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017b5a:	f04f 0901 	mov.w	r9, #1
 8017b5e:	4623      	mov	r3, r4
 8017b60:	469a      	mov	sl, r3
 8017b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017b66:	b10a      	cbz	r2, 8017b6c <_svfiprintf_r+0x60>
 8017b68:	2a25      	cmp	r2, #37	@ 0x25
 8017b6a:	d1f9      	bne.n	8017b60 <_svfiprintf_r+0x54>
 8017b6c:	ebba 0b04 	subs.w	fp, sl, r4
 8017b70:	d00b      	beq.n	8017b8a <_svfiprintf_r+0x7e>
 8017b72:	465b      	mov	r3, fp
 8017b74:	4622      	mov	r2, r4
 8017b76:	4629      	mov	r1, r5
 8017b78:	4638      	mov	r0, r7
 8017b7a:	f7ff ff6b 	bl	8017a54 <__ssputs_r>
 8017b7e:	3001      	adds	r0, #1
 8017b80:	f000 80a7 	beq.w	8017cd2 <_svfiprintf_r+0x1c6>
 8017b84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017b86:	445a      	add	r2, fp
 8017b88:	9209      	str	r2, [sp, #36]	@ 0x24
 8017b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	f000 809f 	beq.w	8017cd2 <_svfiprintf_r+0x1c6>
 8017b94:	2300      	movs	r3, #0
 8017b96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017b9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017b9e:	f10a 0a01 	add.w	sl, sl, #1
 8017ba2:	9304      	str	r3, [sp, #16]
 8017ba4:	9307      	str	r3, [sp, #28]
 8017ba6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017baa:	931a      	str	r3, [sp, #104]	@ 0x68
 8017bac:	4654      	mov	r4, sl
 8017bae:	2205      	movs	r2, #5
 8017bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017bb4:	484e      	ldr	r0, [pc, #312]	@ (8017cf0 <_svfiprintf_r+0x1e4>)
 8017bb6:	f7e8 fb4b 	bl	8000250 <memchr>
 8017bba:	9a04      	ldr	r2, [sp, #16]
 8017bbc:	b9d8      	cbnz	r0, 8017bf6 <_svfiprintf_r+0xea>
 8017bbe:	06d0      	lsls	r0, r2, #27
 8017bc0:	bf44      	itt	mi
 8017bc2:	2320      	movmi	r3, #32
 8017bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017bc8:	0711      	lsls	r1, r2, #28
 8017bca:	bf44      	itt	mi
 8017bcc:	232b      	movmi	r3, #43	@ 0x2b
 8017bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8017bd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8017bd8:	d015      	beq.n	8017c06 <_svfiprintf_r+0xfa>
 8017bda:	9a07      	ldr	r2, [sp, #28]
 8017bdc:	4654      	mov	r4, sl
 8017bde:	2000      	movs	r0, #0
 8017be0:	f04f 0c0a 	mov.w	ip, #10
 8017be4:	4621      	mov	r1, r4
 8017be6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017bea:	3b30      	subs	r3, #48	@ 0x30
 8017bec:	2b09      	cmp	r3, #9
 8017bee:	d94b      	bls.n	8017c88 <_svfiprintf_r+0x17c>
 8017bf0:	b1b0      	cbz	r0, 8017c20 <_svfiprintf_r+0x114>
 8017bf2:	9207      	str	r2, [sp, #28]
 8017bf4:	e014      	b.n	8017c20 <_svfiprintf_r+0x114>
 8017bf6:	eba0 0308 	sub.w	r3, r0, r8
 8017bfa:	fa09 f303 	lsl.w	r3, r9, r3
 8017bfe:	4313      	orrs	r3, r2
 8017c00:	9304      	str	r3, [sp, #16]
 8017c02:	46a2      	mov	sl, r4
 8017c04:	e7d2      	b.n	8017bac <_svfiprintf_r+0xa0>
 8017c06:	9b03      	ldr	r3, [sp, #12]
 8017c08:	1d19      	adds	r1, r3, #4
 8017c0a:	681b      	ldr	r3, [r3, #0]
 8017c0c:	9103      	str	r1, [sp, #12]
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	bfbb      	ittet	lt
 8017c12:	425b      	neglt	r3, r3
 8017c14:	f042 0202 	orrlt.w	r2, r2, #2
 8017c18:	9307      	strge	r3, [sp, #28]
 8017c1a:	9307      	strlt	r3, [sp, #28]
 8017c1c:	bfb8      	it	lt
 8017c1e:	9204      	strlt	r2, [sp, #16]
 8017c20:	7823      	ldrb	r3, [r4, #0]
 8017c22:	2b2e      	cmp	r3, #46	@ 0x2e
 8017c24:	d10a      	bne.n	8017c3c <_svfiprintf_r+0x130>
 8017c26:	7863      	ldrb	r3, [r4, #1]
 8017c28:	2b2a      	cmp	r3, #42	@ 0x2a
 8017c2a:	d132      	bne.n	8017c92 <_svfiprintf_r+0x186>
 8017c2c:	9b03      	ldr	r3, [sp, #12]
 8017c2e:	1d1a      	adds	r2, r3, #4
 8017c30:	681b      	ldr	r3, [r3, #0]
 8017c32:	9203      	str	r2, [sp, #12]
 8017c34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017c38:	3402      	adds	r4, #2
 8017c3a:	9305      	str	r3, [sp, #20]
 8017c3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017d00 <_svfiprintf_r+0x1f4>
 8017c40:	7821      	ldrb	r1, [r4, #0]
 8017c42:	2203      	movs	r2, #3
 8017c44:	4650      	mov	r0, sl
 8017c46:	f7e8 fb03 	bl	8000250 <memchr>
 8017c4a:	b138      	cbz	r0, 8017c5c <_svfiprintf_r+0x150>
 8017c4c:	9b04      	ldr	r3, [sp, #16]
 8017c4e:	eba0 000a 	sub.w	r0, r0, sl
 8017c52:	2240      	movs	r2, #64	@ 0x40
 8017c54:	4082      	lsls	r2, r0
 8017c56:	4313      	orrs	r3, r2
 8017c58:	3401      	adds	r4, #1
 8017c5a:	9304      	str	r3, [sp, #16]
 8017c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c60:	4824      	ldr	r0, [pc, #144]	@ (8017cf4 <_svfiprintf_r+0x1e8>)
 8017c62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017c66:	2206      	movs	r2, #6
 8017c68:	f7e8 faf2 	bl	8000250 <memchr>
 8017c6c:	2800      	cmp	r0, #0
 8017c6e:	d036      	beq.n	8017cde <_svfiprintf_r+0x1d2>
 8017c70:	4b21      	ldr	r3, [pc, #132]	@ (8017cf8 <_svfiprintf_r+0x1ec>)
 8017c72:	bb1b      	cbnz	r3, 8017cbc <_svfiprintf_r+0x1b0>
 8017c74:	9b03      	ldr	r3, [sp, #12]
 8017c76:	3307      	adds	r3, #7
 8017c78:	f023 0307 	bic.w	r3, r3, #7
 8017c7c:	3308      	adds	r3, #8
 8017c7e:	9303      	str	r3, [sp, #12]
 8017c80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017c82:	4433      	add	r3, r6
 8017c84:	9309      	str	r3, [sp, #36]	@ 0x24
 8017c86:	e76a      	b.n	8017b5e <_svfiprintf_r+0x52>
 8017c88:	fb0c 3202 	mla	r2, ip, r2, r3
 8017c8c:	460c      	mov	r4, r1
 8017c8e:	2001      	movs	r0, #1
 8017c90:	e7a8      	b.n	8017be4 <_svfiprintf_r+0xd8>
 8017c92:	2300      	movs	r3, #0
 8017c94:	3401      	adds	r4, #1
 8017c96:	9305      	str	r3, [sp, #20]
 8017c98:	4619      	mov	r1, r3
 8017c9a:	f04f 0c0a 	mov.w	ip, #10
 8017c9e:	4620      	mov	r0, r4
 8017ca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017ca4:	3a30      	subs	r2, #48	@ 0x30
 8017ca6:	2a09      	cmp	r2, #9
 8017ca8:	d903      	bls.n	8017cb2 <_svfiprintf_r+0x1a6>
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d0c6      	beq.n	8017c3c <_svfiprintf_r+0x130>
 8017cae:	9105      	str	r1, [sp, #20]
 8017cb0:	e7c4      	b.n	8017c3c <_svfiprintf_r+0x130>
 8017cb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8017cb6:	4604      	mov	r4, r0
 8017cb8:	2301      	movs	r3, #1
 8017cba:	e7f0      	b.n	8017c9e <_svfiprintf_r+0x192>
 8017cbc:	ab03      	add	r3, sp, #12
 8017cbe:	9300      	str	r3, [sp, #0]
 8017cc0:	462a      	mov	r2, r5
 8017cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8017cfc <_svfiprintf_r+0x1f0>)
 8017cc4:	a904      	add	r1, sp, #16
 8017cc6:	4638      	mov	r0, r7
 8017cc8:	f3af 8000 	nop.w
 8017ccc:	1c42      	adds	r2, r0, #1
 8017cce:	4606      	mov	r6, r0
 8017cd0:	d1d6      	bne.n	8017c80 <_svfiprintf_r+0x174>
 8017cd2:	89ab      	ldrh	r3, [r5, #12]
 8017cd4:	065b      	lsls	r3, r3, #25
 8017cd6:	f53f af2d 	bmi.w	8017b34 <_svfiprintf_r+0x28>
 8017cda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017cdc:	e72c      	b.n	8017b38 <_svfiprintf_r+0x2c>
 8017cde:	ab03      	add	r3, sp, #12
 8017ce0:	9300      	str	r3, [sp, #0]
 8017ce2:	462a      	mov	r2, r5
 8017ce4:	4b05      	ldr	r3, [pc, #20]	@ (8017cfc <_svfiprintf_r+0x1f0>)
 8017ce6:	a904      	add	r1, sp, #16
 8017ce8:	4638      	mov	r0, r7
 8017cea:	f000 f9bb 	bl	8018064 <_printf_i>
 8017cee:	e7ed      	b.n	8017ccc <_svfiprintf_r+0x1c0>
 8017cf0:	080194a4 	.word	0x080194a4
 8017cf4:	080194ae 	.word	0x080194ae
 8017cf8:	00000000 	.word	0x00000000
 8017cfc:	08017a55 	.word	0x08017a55
 8017d00:	080194aa 	.word	0x080194aa

08017d04 <__sfputc_r>:
 8017d04:	6893      	ldr	r3, [r2, #8]
 8017d06:	3b01      	subs	r3, #1
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	b410      	push	{r4}
 8017d0c:	6093      	str	r3, [r2, #8]
 8017d0e:	da08      	bge.n	8017d22 <__sfputc_r+0x1e>
 8017d10:	6994      	ldr	r4, [r2, #24]
 8017d12:	42a3      	cmp	r3, r4
 8017d14:	db01      	blt.n	8017d1a <__sfputc_r+0x16>
 8017d16:	290a      	cmp	r1, #10
 8017d18:	d103      	bne.n	8017d22 <__sfputc_r+0x1e>
 8017d1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d1e:	f000 bb7f 	b.w	8018420 <__swbuf_r>
 8017d22:	6813      	ldr	r3, [r2, #0]
 8017d24:	1c58      	adds	r0, r3, #1
 8017d26:	6010      	str	r0, [r2, #0]
 8017d28:	7019      	strb	r1, [r3, #0]
 8017d2a:	4608      	mov	r0, r1
 8017d2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d30:	4770      	bx	lr

08017d32 <__sfputs_r>:
 8017d32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d34:	4606      	mov	r6, r0
 8017d36:	460f      	mov	r7, r1
 8017d38:	4614      	mov	r4, r2
 8017d3a:	18d5      	adds	r5, r2, r3
 8017d3c:	42ac      	cmp	r4, r5
 8017d3e:	d101      	bne.n	8017d44 <__sfputs_r+0x12>
 8017d40:	2000      	movs	r0, #0
 8017d42:	e007      	b.n	8017d54 <__sfputs_r+0x22>
 8017d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d48:	463a      	mov	r2, r7
 8017d4a:	4630      	mov	r0, r6
 8017d4c:	f7ff ffda 	bl	8017d04 <__sfputc_r>
 8017d50:	1c43      	adds	r3, r0, #1
 8017d52:	d1f3      	bne.n	8017d3c <__sfputs_r+0xa>
 8017d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017d58 <_vfiprintf_r>:
 8017d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d5c:	460d      	mov	r5, r1
 8017d5e:	b09d      	sub	sp, #116	@ 0x74
 8017d60:	4614      	mov	r4, r2
 8017d62:	4698      	mov	r8, r3
 8017d64:	4606      	mov	r6, r0
 8017d66:	b118      	cbz	r0, 8017d70 <_vfiprintf_r+0x18>
 8017d68:	6a03      	ldr	r3, [r0, #32]
 8017d6a:	b90b      	cbnz	r3, 8017d70 <_vfiprintf_r+0x18>
 8017d6c:	f7ff fbfc 	bl	8017568 <__sinit>
 8017d70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017d72:	07d9      	lsls	r1, r3, #31
 8017d74:	d405      	bmi.n	8017d82 <_vfiprintf_r+0x2a>
 8017d76:	89ab      	ldrh	r3, [r5, #12]
 8017d78:	059a      	lsls	r2, r3, #22
 8017d7a:	d402      	bmi.n	8017d82 <_vfiprintf_r+0x2a>
 8017d7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017d7e:	f7ff fdd4 	bl	801792a <__retarget_lock_acquire_recursive>
 8017d82:	89ab      	ldrh	r3, [r5, #12]
 8017d84:	071b      	lsls	r3, r3, #28
 8017d86:	d501      	bpl.n	8017d8c <_vfiprintf_r+0x34>
 8017d88:	692b      	ldr	r3, [r5, #16]
 8017d8a:	b99b      	cbnz	r3, 8017db4 <_vfiprintf_r+0x5c>
 8017d8c:	4629      	mov	r1, r5
 8017d8e:	4630      	mov	r0, r6
 8017d90:	f000 fb84 	bl	801849c <__swsetup_r>
 8017d94:	b170      	cbz	r0, 8017db4 <_vfiprintf_r+0x5c>
 8017d96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017d98:	07dc      	lsls	r4, r3, #31
 8017d9a:	d504      	bpl.n	8017da6 <_vfiprintf_r+0x4e>
 8017d9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017da0:	b01d      	add	sp, #116	@ 0x74
 8017da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017da6:	89ab      	ldrh	r3, [r5, #12]
 8017da8:	0598      	lsls	r0, r3, #22
 8017daa:	d4f7      	bmi.n	8017d9c <_vfiprintf_r+0x44>
 8017dac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017dae:	f7ff fdbd 	bl	801792c <__retarget_lock_release_recursive>
 8017db2:	e7f3      	b.n	8017d9c <_vfiprintf_r+0x44>
 8017db4:	2300      	movs	r3, #0
 8017db6:	9309      	str	r3, [sp, #36]	@ 0x24
 8017db8:	2320      	movs	r3, #32
 8017dba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017dbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8017dc2:	2330      	movs	r3, #48	@ 0x30
 8017dc4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017f74 <_vfiprintf_r+0x21c>
 8017dc8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017dcc:	f04f 0901 	mov.w	r9, #1
 8017dd0:	4623      	mov	r3, r4
 8017dd2:	469a      	mov	sl, r3
 8017dd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017dd8:	b10a      	cbz	r2, 8017dde <_vfiprintf_r+0x86>
 8017dda:	2a25      	cmp	r2, #37	@ 0x25
 8017ddc:	d1f9      	bne.n	8017dd2 <_vfiprintf_r+0x7a>
 8017dde:	ebba 0b04 	subs.w	fp, sl, r4
 8017de2:	d00b      	beq.n	8017dfc <_vfiprintf_r+0xa4>
 8017de4:	465b      	mov	r3, fp
 8017de6:	4622      	mov	r2, r4
 8017de8:	4629      	mov	r1, r5
 8017dea:	4630      	mov	r0, r6
 8017dec:	f7ff ffa1 	bl	8017d32 <__sfputs_r>
 8017df0:	3001      	adds	r0, #1
 8017df2:	f000 80a7 	beq.w	8017f44 <_vfiprintf_r+0x1ec>
 8017df6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017df8:	445a      	add	r2, fp
 8017dfa:	9209      	str	r2, [sp, #36]	@ 0x24
 8017dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	f000 809f 	beq.w	8017f44 <_vfiprintf_r+0x1ec>
 8017e06:	2300      	movs	r3, #0
 8017e08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017e0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017e10:	f10a 0a01 	add.w	sl, sl, #1
 8017e14:	9304      	str	r3, [sp, #16]
 8017e16:	9307      	str	r3, [sp, #28]
 8017e18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017e1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8017e1e:	4654      	mov	r4, sl
 8017e20:	2205      	movs	r2, #5
 8017e22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e26:	4853      	ldr	r0, [pc, #332]	@ (8017f74 <_vfiprintf_r+0x21c>)
 8017e28:	f7e8 fa12 	bl	8000250 <memchr>
 8017e2c:	9a04      	ldr	r2, [sp, #16]
 8017e2e:	b9d8      	cbnz	r0, 8017e68 <_vfiprintf_r+0x110>
 8017e30:	06d1      	lsls	r1, r2, #27
 8017e32:	bf44      	itt	mi
 8017e34:	2320      	movmi	r3, #32
 8017e36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017e3a:	0713      	lsls	r3, r2, #28
 8017e3c:	bf44      	itt	mi
 8017e3e:	232b      	movmi	r3, #43	@ 0x2b
 8017e40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017e44:	f89a 3000 	ldrb.w	r3, [sl]
 8017e48:	2b2a      	cmp	r3, #42	@ 0x2a
 8017e4a:	d015      	beq.n	8017e78 <_vfiprintf_r+0x120>
 8017e4c:	9a07      	ldr	r2, [sp, #28]
 8017e4e:	4654      	mov	r4, sl
 8017e50:	2000      	movs	r0, #0
 8017e52:	f04f 0c0a 	mov.w	ip, #10
 8017e56:	4621      	mov	r1, r4
 8017e58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017e5c:	3b30      	subs	r3, #48	@ 0x30
 8017e5e:	2b09      	cmp	r3, #9
 8017e60:	d94b      	bls.n	8017efa <_vfiprintf_r+0x1a2>
 8017e62:	b1b0      	cbz	r0, 8017e92 <_vfiprintf_r+0x13a>
 8017e64:	9207      	str	r2, [sp, #28]
 8017e66:	e014      	b.n	8017e92 <_vfiprintf_r+0x13a>
 8017e68:	eba0 0308 	sub.w	r3, r0, r8
 8017e6c:	fa09 f303 	lsl.w	r3, r9, r3
 8017e70:	4313      	orrs	r3, r2
 8017e72:	9304      	str	r3, [sp, #16]
 8017e74:	46a2      	mov	sl, r4
 8017e76:	e7d2      	b.n	8017e1e <_vfiprintf_r+0xc6>
 8017e78:	9b03      	ldr	r3, [sp, #12]
 8017e7a:	1d19      	adds	r1, r3, #4
 8017e7c:	681b      	ldr	r3, [r3, #0]
 8017e7e:	9103      	str	r1, [sp, #12]
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	bfbb      	ittet	lt
 8017e84:	425b      	neglt	r3, r3
 8017e86:	f042 0202 	orrlt.w	r2, r2, #2
 8017e8a:	9307      	strge	r3, [sp, #28]
 8017e8c:	9307      	strlt	r3, [sp, #28]
 8017e8e:	bfb8      	it	lt
 8017e90:	9204      	strlt	r2, [sp, #16]
 8017e92:	7823      	ldrb	r3, [r4, #0]
 8017e94:	2b2e      	cmp	r3, #46	@ 0x2e
 8017e96:	d10a      	bne.n	8017eae <_vfiprintf_r+0x156>
 8017e98:	7863      	ldrb	r3, [r4, #1]
 8017e9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8017e9c:	d132      	bne.n	8017f04 <_vfiprintf_r+0x1ac>
 8017e9e:	9b03      	ldr	r3, [sp, #12]
 8017ea0:	1d1a      	adds	r2, r3, #4
 8017ea2:	681b      	ldr	r3, [r3, #0]
 8017ea4:	9203      	str	r2, [sp, #12]
 8017ea6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017eaa:	3402      	adds	r4, #2
 8017eac:	9305      	str	r3, [sp, #20]
 8017eae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017f84 <_vfiprintf_r+0x22c>
 8017eb2:	7821      	ldrb	r1, [r4, #0]
 8017eb4:	2203      	movs	r2, #3
 8017eb6:	4650      	mov	r0, sl
 8017eb8:	f7e8 f9ca 	bl	8000250 <memchr>
 8017ebc:	b138      	cbz	r0, 8017ece <_vfiprintf_r+0x176>
 8017ebe:	9b04      	ldr	r3, [sp, #16]
 8017ec0:	eba0 000a 	sub.w	r0, r0, sl
 8017ec4:	2240      	movs	r2, #64	@ 0x40
 8017ec6:	4082      	lsls	r2, r0
 8017ec8:	4313      	orrs	r3, r2
 8017eca:	3401      	adds	r4, #1
 8017ecc:	9304      	str	r3, [sp, #16]
 8017ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ed2:	4829      	ldr	r0, [pc, #164]	@ (8017f78 <_vfiprintf_r+0x220>)
 8017ed4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017ed8:	2206      	movs	r2, #6
 8017eda:	f7e8 f9b9 	bl	8000250 <memchr>
 8017ede:	2800      	cmp	r0, #0
 8017ee0:	d03f      	beq.n	8017f62 <_vfiprintf_r+0x20a>
 8017ee2:	4b26      	ldr	r3, [pc, #152]	@ (8017f7c <_vfiprintf_r+0x224>)
 8017ee4:	bb1b      	cbnz	r3, 8017f2e <_vfiprintf_r+0x1d6>
 8017ee6:	9b03      	ldr	r3, [sp, #12]
 8017ee8:	3307      	adds	r3, #7
 8017eea:	f023 0307 	bic.w	r3, r3, #7
 8017eee:	3308      	adds	r3, #8
 8017ef0:	9303      	str	r3, [sp, #12]
 8017ef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017ef4:	443b      	add	r3, r7
 8017ef6:	9309      	str	r3, [sp, #36]	@ 0x24
 8017ef8:	e76a      	b.n	8017dd0 <_vfiprintf_r+0x78>
 8017efa:	fb0c 3202 	mla	r2, ip, r2, r3
 8017efe:	460c      	mov	r4, r1
 8017f00:	2001      	movs	r0, #1
 8017f02:	e7a8      	b.n	8017e56 <_vfiprintf_r+0xfe>
 8017f04:	2300      	movs	r3, #0
 8017f06:	3401      	adds	r4, #1
 8017f08:	9305      	str	r3, [sp, #20]
 8017f0a:	4619      	mov	r1, r3
 8017f0c:	f04f 0c0a 	mov.w	ip, #10
 8017f10:	4620      	mov	r0, r4
 8017f12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017f16:	3a30      	subs	r2, #48	@ 0x30
 8017f18:	2a09      	cmp	r2, #9
 8017f1a:	d903      	bls.n	8017f24 <_vfiprintf_r+0x1cc>
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d0c6      	beq.n	8017eae <_vfiprintf_r+0x156>
 8017f20:	9105      	str	r1, [sp, #20]
 8017f22:	e7c4      	b.n	8017eae <_vfiprintf_r+0x156>
 8017f24:	fb0c 2101 	mla	r1, ip, r1, r2
 8017f28:	4604      	mov	r4, r0
 8017f2a:	2301      	movs	r3, #1
 8017f2c:	e7f0      	b.n	8017f10 <_vfiprintf_r+0x1b8>
 8017f2e:	ab03      	add	r3, sp, #12
 8017f30:	9300      	str	r3, [sp, #0]
 8017f32:	462a      	mov	r2, r5
 8017f34:	4b12      	ldr	r3, [pc, #72]	@ (8017f80 <_vfiprintf_r+0x228>)
 8017f36:	a904      	add	r1, sp, #16
 8017f38:	4630      	mov	r0, r6
 8017f3a:	f3af 8000 	nop.w
 8017f3e:	4607      	mov	r7, r0
 8017f40:	1c78      	adds	r0, r7, #1
 8017f42:	d1d6      	bne.n	8017ef2 <_vfiprintf_r+0x19a>
 8017f44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017f46:	07d9      	lsls	r1, r3, #31
 8017f48:	d405      	bmi.n	8017f56 <_vfiprintf_r+0x1fe>
 8017f4a:	89ab      	ldrh	r3, [r5, #12]
 8017f4c:	059a      	lsls	r2, r3, #22
 8017f4e:	d402      	bmi.n	8017f56 <_vfiprintf_r+0x1fe>
 8017f50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017f52:	f7ff fceb 	bl	801792c <__retarget_lock_release_recursive>
 8017f56:	89ab      	ldrh	r3, [r5, #12]
 8017f58:	065b      	lsls	r3, r3, #25
 8017f5a:	f53f af1f 	bmi.w	8017d9c <_vfiprintf_r+0x44>
 8017f5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017f60:	e71e      	b.n	8017da0 <_vfiprintf_r+0x48>
 8017f62:	ab03      	add	r3, sp, #12
 8017f64:	9300      	str	r3, [sp, #0]
 8017f66:	462a      	mov	r2, r5
 8017f68:	4b05      	ldr	r3, [pc, #20]	@ (8017f80 <_vfiprintf_r+0x228>)
 8017f6a:	a904      	add	r1, sp, #16
 8017f6c:	4630      	mov	r0, r6
 8017f6e:	f000 f879 	bl	8018064 <_printf_i>
 8017f72:	e7e4      	b.n	8017f3e <_vfiprintf_r+0x1e6>
 8017f74:	080194a4 	.word	0x080194a4
 8017f78:	080194ae 	.word	0x080194ae
 8017f7c:	00000000 	.word	0x00000000
 8017f80:	08017d33 	.word	0x08017d33
 8017f84:	080194aa 	.word	0x080194aa

08017f88 <_printf_common>:
 8017f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f8c:	4616      	mov	r6, r2
 8017f8e:	4698      	mov	r8, r3
 8017f90:	688a      	ldr	r2, [r1, #8]
 8017f92:	690b      	ldr	r3, [r1, #16]
 8017f94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017f98:	4293      	cmp	r3, r2
 8017f9a:	bfb8      	it	lt
 8017f9c:	4613      	movlt	r3, r2
 8017f9e:	6033      	str	r3, [r6, #0]
 8017fa0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017fa4:	4607      	mov	r7, r0
 8017fa6:	460c      	mov	r4, r1
 8017fa8:	b10a      	cbz	r2, 8017fae <_printf_common+0x26>
 8017faa:	3301      	adds	r3, #1
 8017fac:	6033      	str	r3, [r6, #0]
 8017fae:	6823      	ldr	r3, [r4, #0]
 8017fb0:	0699      	lsls	r1, r3, #26
 8017fb2:	bf42      	ittt	mi
 8017fb4:	6833      	ldrmi	r3, [r6, #0]
 8017fb6:	3302      	addmi	r3, #2
 8017fb8:	6033      	strmi	r3, [r6, #0]
 8017fba:	6825      	ldr	r5, [r4, #0]
 8017fbc:	f015 0506 	ands.w	r5, r5, #6
 8017fc0:	d106      	bne.n	8017fd0 <_printf_common+0x48>
 8017fc2:	f104 0a19 	add.w	sl, r4, #25
 8017fc6:	68e3      	ldr	r3, [r4, #12]
 8017fc8:	6832      	ldr	r2, [r6, #0]
 8017fca:	1a9b      	subs	r3, r3, r2
 8017fcc:	42ab      	cmp	r3, r5
 8017fce:	dc26      	bgt.n	801801e <_printf_common+0x96>
 8017fd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017fd4:	6822      	ldr	r2, [r4, #0]
 8017fd6:	3b00      	subs	r3, #0
 8017fd8:	bf18      	it	ne
 8017fda:	2301      	movne	r3, #1
 8017fdc:	0692      	lsls	r2, r2, #26
 8017fde:	d42b      	bmi.n	8018038 <_printf_common+0xb0>
 8017fe0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017fe4:	4641      	mov	r1, r8
 8017fe6:	4638      	mov	r0, r7
 8017fe8:	47c8      	blx	r9
 8017fea:	3001      	adds	r0, #1
 8017fec:	d01e      	beq.n	801802c <_printf_common+0xa4>
 8017fee:	6823      	ldr	r3, [r4, #0]
 8017ff0:	6922      	ldr	r2, [r4, #16]
 8017ff2:	f003 0306 	and.w	r3, r3, #6
 8017ff6:	2b04      	cmp	r3, #4
 8017ff8:	bf02      	ittt	eq
 8017ffa:	68e5      	ldreq	r5, [r4, #12]
 8017ffc:	6833      	ldreq	r3, [r6, #0]
 8017ffe:	1aed      	subeq	r5, r5, r3
 8018000:	68a3      	ldr	r3, [r4, #8]
 8018002:	bf0c      	ite	eq
 8018004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018008:	2500      	movne	r5, #0
 801800a:	4293      	cmp	r3, r2
 801800c:	bfc4      	itt	gt
 801800e:	1a9b      	subgt	r3, r3, r2
 8018010:	18ed      	addgt	r5, r5, r3
 8018012:	2600      	movs	r6, #0
 8018014:	341a      	adds	r4, #26
 8018016:	42b5      	cmp	r5, r6
 8018018:	d11a      	bne.n	8018050 <_printf_common+0xc8>
 801801a:	2000      	movs	r0, #0
 801801c:	e008      	b.n	8018030 <_printf_common+0xa8>
 801801e:	2301      	movs	r3, #1
 8018020:	4652      	mov	r2, sl
 8018022:	4641      	mov	r1, r8
 8018024:	4638      	mov	r0, r7
 8018026:	47c8      	blx	r9
 8018028:	3001      	adds	r0, #1
 801802a:	d103      	bne.n	8018034 <_printf_common+0xac>
 801802c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018034:	3501      	adds	r5, #1
 8018036:	e7c6      	b.n	8017fc6 <_printf_common+0x3e>
 8018038:	18e1      	adds	r1, r4, r3
 801803a:	1c5a      	adds	r2, r3, #1
 801803c:	2030      	movs	r0, #48	@ 0x30
 801803e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018042:	4422      	add	r2, r4
 8018044:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018048:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801804c:	3302      	adds	r3, #2
 801804e:	e7c7      	b.n	8017fe0 <_printf_common+0x58>
 8018050:	2301      	movs	r3, #1
 8018052:	4622      	mov	r2, r4
 8018054:	4641      	mov	r1, r8
 8018056:	4638      	mov	r0, r7
 8018058:	47c8      	blx	r9
 801805a:	3001      	adds	r0, #1
 801805c:	d0e6      	beq.n	801802c <_printf_common+0xa4>
 801805e:	3601      	adds	r6, #1
 8018060:	e7d9      	b.n	8018016 <_printf_common+0x8e>
	...

08018064 <_printf_i>:
 8018064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018068:	7e0f      	ldrb	r7, [r1, #24]
 801806a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801806c:	2f78      	cmp	r7, #120	@ 0x78
 801806e:	4691      	mov	r9, r2
 8018070:	4680      	mov	r8, r0
 8018072:	460c      	mov	r4, r1
 8018074:	469a      	mov	sl, r3
 8018076:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801807a:	d807      	bhi.n	801808c <_printf_i+0x28>
 801807c:	2f62      	cmp	r7, #98	@ 0x62
 801807e:	d80a      	bhi.n	8018096 <_printf_i+0x32>
 8018080:	2f00      	cmp	r7, #0
 8018082:	f000 80d2 	beq.w	801822a <_printf_i+0x1c6>
 8018086:	2f58      	cmp	r7, #88	@ 0x58
 8018088:	f000 80b9 	beq.w	80181fe <_printf_i+0x19a>
 801808c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018090:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018094:	e03a      	b.n	801810c <_printf_i+0xa8>
 8018096:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801809a:	2b15      	cmp	r3, #21
 801809c:	d8f6      	bhi.n	801808c <_printf_i+0x28>
 801809e:	a101      	add	r1, pc, #4	@ (adr r1, 80180a4 <_printf_i+0x40>)
 80180a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80180a4:	080180fd 	.word	0x080180fd
 80180a8:	08018111 	.word	0x08018111
 80180ac:	0801808d 	.word	0x0801808d
 80180b0:	0801808d 	.word	0x0801808d
 80180b4:	0801808d 	.word	0x0801808d
 80180b8:	0801808d 	.word	0x0801808d
 80180bc:	08018111 	.word	0x08018111
 80180c0:	0801808d 	.word	0x0801808d
 80180c4:	0801808d 	.word	0x0801808d
 80180c8:	0801808d 	.word	0x0801808d
 80180cc:	0801808d 	.word	0x0801808d
 80180d0:	08018211 	.word	0x08018211
 80180d4:	0801813b 	.word	0x0801813b
 80180d8:	080181cb 	.word	0x080181cb
 80180dc:	0801808d 	.word	0x0801808d
 80180e0:	0801808d 	.word	0x0801808d
 80180e4:	08018233 	.word	0x08018233
 80180e8:	0801808d 	.word	0x0801808d
 80180ec:	0801813b 	.word	0x0801813b
 80180f0:	0801808d 	.word	0x0801808d
 80180f4:	0801808d 	.word	0x0801808d
 80180f8:	080181d3 	.word	0x080181d3
 80180fc:	6833      	ldr	r3, [r6, #0]
 80180fe:	1d1a      	adds	r2, r3, #4
 8018100:	681b      	ldr	r3, [r3, #0]
 8018102:	6032      	str	r2, [r6, #0]
 8018104:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018108:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801810c:	2301      	movs	r3, #1
 801810e:	e09d      	b.n	801824c <_printf_i+0x1e8>
 8018110:	6833      	ldr	r3, [r6, #0]
 8018112:	6820      	ldr	r0, [r4, #0]
 8018114:	1d19      	adds	r1, r3, #4
 8018116:	6031      	str	r1, [r6, #0]
 8018118:	0606      	lsls	r6, r0, #24
 801811a:	d501      	bpl.n	8018120 <_printf_i+0xbc>
 801811c:	681d      	ldr	r5, [r3, #0]
 801811e:	e003      	b.n	8018128 <_printf_i+0xc4>
 8018120:	0645      	lsls	r5, r0, #25
 8018122:	d5fb      	bpl.n	801811c <_printf_i+0xb8>
 8018124:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018128:	2d00      	cmp	r5, #0
 801812a:	da03      	bge.n	8018134 <_printf_i+0xd0>
 801812c:	232d      	movs	r3, #45	@ 0x2d
 801812e:	426d      	negs	r5, r5
 8018130:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018134:	4859      	ldr	r0, [pc, #356]	@ (801829c <_printf_i+0x238>)
 8018136:	230a      	movs	r3, #10
 8018138:	e011      	b.n	801815e <_printf_i+0xfa>
 801813a:	6821      	ldr	r1, [r4, #0]
 801813c:	6833      	ldr	r3, [r6, #0]
 801813e:	0608      	lsls	r0, r1, #24
 8018140:	f853 5b04 	ldr.w	r5, [r3], #4
 8018144:	d402      	bmi.n	801814c <_printf_i+0xe8>
 8018146:	0649      	lsls	r1, r1, #25
 8018148:	bf48      	it	mi
 801814a:	b2ad      	uxthmi	r5, r5
 801814c:	2f6f      	cmp	r7, #111	@ 0x6f
 801814e:	4853      	ldr	r0, [pc, #332]	@ (801829c <_printf_i+0x238>)
 8018150:	6033      	str	r3, [r6, #0]
 8018152:	bf14      	ite	ne
 8018154:	230a      	movne	r3, #10
 8018156:	2308      	moveq	r3, #8
 8018158:	2100      	movs	r1, #0
 801815a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801815e:	6866      	ldr	r6, [r4, #4]
 8018160:	60a6      	str	r6, [r4, #8]
 8018162:	2e00      	cmp	r6, #0
 8018164:	bfa2      	ittt	ge
 8018166:	6821      	ldrge	r1, [r4, #0]
 8018168:	f021 0104 	bicge.w	r1, r1, #4
 801816c:	6021      	strge	r1, [r4, #0]
 801816e:	b90d      	cbnz	r5, 8018174 <_printf_i+0x110>
 8018170:	2e00      	cmp	r6, #0
 8018172:	d04b      	beq.n	801820c <_printf_i+0x1a8>
 8018174:	4616      	mov	r6, r2
 8018176:	fbb5 f1f3 	udiv	r1, r5, r3
 801817a:	fb03 5711 	mls	r7, r3, r1, r5
 801817e:	5dc7      	ldrb	r7, [r0, r7]
 8018180:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018184:	462f      	mov	r7, r5
 8018186:	42bb      	cmp	r3, r7
 8018188:	460d      	mov	r5, r1
 801818a:	d9f4      	bls.n	8018176 <_printf_i+0x112>
 801818c:	2b08      	cmp	r3, #8
 801818e:	d10b      	bne.n	80181a8 <_printf_i+0x144>
 8018190:	6823      	ldr	r3, [r4, #0]
 8018192:	07df      	lsls	r7, r3, #31
 8018194:	d508      	bpl.n	80181a8 <_printf_i+0x144>
 8018196:	6923      	ldr	r3, [r4, #16]
 8018198:	6861      	ldr	r1, [r4, #4]
 801819a:	4299      	cmp	r1, r3
 801819c:	bfde      	ittt	le
 801819e:	2330      	movle	r3, #48	@ 0x30
 80181a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80181a4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80181a8:	1b92      	subs	r2, r2, r6
 80181aa:	6122      	str	r2, [r4, #16]
 80181ac:	f8cd a000 	str.w	sl, [sp]
 80181b0:	464b      	mov	r3, r9
 80181b2:	aa03      	add	r2, sp, #12
 80181b4:	4621      	mov	r1, r4
 80181b6:	4640      	mov	r0, r8
 80181b8:	f7ff fee6 	bl	8017f88 <_printf_common>
 80181bc:	3001      	adds	r0, #1
 80181be:	d14a      	bne.n	8018256 <_printf_i+0x1f2>
 80181c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80181c4:	b004      	add	sp, #16
 80181c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80181ca:	6823      	ldr	r3, [r4, #0]
 80181cc:	f043 0320 	orr.w	r3, r3, #32
 80181d0:	6023      	str	r3, [r4, #0]
 80181d2:	4833      	ldr	r0, [pc, #204]	@ (80182a0 <_printf_i+0x23c>)
 80181d4:	2778      	movs	r7, #120	@ 0x78
 80181d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80181da:	6823      	ldr	r3, [r4, #0]
 80181dc:	6831      	ldr	r1, [r6, #0]
 80181de:	061f      	lsls	r7, r3, #24
 80181e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80181e4:	d402      	bmi.n	80181ec <_printf_i+0x188>
 80181e6:	065f      	lsls	r7, r3, #25
 80181e8:	bf48      	it	mi
 80181ea:	b2ad      	uxthmi	r5, r5
 80181ec:	6031      	str	r1, [r6, #0]
 80181ee:	07d9      	lsls	r1, r3, #31
 80181f0:	bf44      	itt	mi
 80181f2:	f043 0320 	orrmi.w	r3, r3, #32
 80181f6:	6023      	strmi	r3, [r4, #0]
 80181f8:	b11d      	cbz	r5, 8018202 <_printf_i+0x19e>
 80181fa:	2310      	movs	r3, #16
 80181fc:	e7ac      	b.n	8018158 <_printf_i+0xf4>
 80181fe:	4827      	ldr	r0, [pc, #156]	@ (801829c <_printf_i+0x238>)
 8018200:	e7e9      	b.n	80181d6 <_printf_i+0x172>
 8018202:	6823      	ldr	r3, [r4, #0]
 8018204:	f023 0320 	bic.w	r3, r3, #32
 8018208:	6023      	str	r3, [r4, #0]
 801820a:	e7f6      	b.n	80181fa <_printf_i+0x196>
 801820c:	4616      	mov	r6, r2
 801820e:	e7bd      	b.n	801818c <_printf_i+0x128>
 8018210:	6833      	ldr	r3, [r6, #0]
 8018212:	6825      	ldr	r5, [r4, #0]
 8018214:	6961      	ldr	r1, [r4, #20]
 8018216:	1d18      	adds	r0, r3, #4
 8018218:	6030      	str	r0, [r6, #0]
 801821a:	062e      	lsls	r6, r5, #24
 801821c:	681b      	ldr	r3, [r3, #0]
 801821e:	d501      	bpl.n	8018224 <_printf_i+0x1c0>
 8018220:	6019      	str	r1, [r3, #0]
 8018222:	e002      	b.n	801822a <_printf_i+0x1c6>
 8018224:	0668      	lsls	r0, r5, #25
 8018226:	d5fb      	bpl.n	8018220 <_printf_i+0x1bc>
 8018228:	8019      	strh	r1, [r3, #0]
 801822a:	2300      	movs	r3, #0
 801822c:	6123      	str	r3, [r4, #16]
 801822e:	4616      	mov	r6, r2
 8018230:	e7bc      	b.n	80181ac <_printf_i+0x148>
 8018232:	6833      	ldr	r3, [r6, #0]
 8018234:	1d1a      	adds	r2, r3, #4
 8018236:	6032      	str	r2, [r6, #0]
 8018238:	681e      	ldr	r6, [r3, #0]
 801823a:	6862      	ldr	r2, [r4, #4]
 801823c:	2100      	movs	r1, #0
 801823e:	4630      	mov	r0, r6
 8018240:	f7e8 f806 	bl	8000250 <memchr>
 8018244:	b108      	cbz	r0, 801824a <_printf_i+0x1e6>
 8018246:	1b80      	subs	r0, r0, r6
 8018248:	6060      	str	r0, [r4, #4]
 801824a:	6863      	ldr	r3, [r4, #4]
 801824c:	6123      	str	r3, [r4, #16]
 801824e:	2300      	movs	r3, #0
 8018250:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018254:	e7aa      	b.n	80181ac <_printf_i+0x148>
 8018256:	6923      	ldr	r3, [r4, #16]
 8018258:	4632      	mov	r2, r6
 801825a:	4649      	mov	r1, r9
 801825c:	4640      	mov	r0, r8
 801825e:	47d0      	blx	sl
 8018260:	3001      	adds	r0, #1
 8018262:	d0ad      	beq.n	80181c0 <_printf_i+0x15c>
 8018264:	6823      	ldr	r3, [r4, #0]
 8018266:	079b      	lsls	r3, r3, #30
 8018268:	d413      	bmi.n	8018292 <_printf_i+0x22e>
 801826a:	68e0      	ldr	r0, [r4, #12]
 801826c:	9b03      	ldr	r3, [sp, #12]
 801826e:	4298      	cmp	r0, r3
 8018270:	bfb8      	it	lt
 8018272:	4618      	movlt	r0, r3
 8018274:	e7a6      	b.n	80181c4 <_printf_i+0x160>
 8018276:	2301      	movs	r3, #1
 8018278:	4632      	mov	r2, r6
 801827a:	4649      	mov	r1, r9
 801827c:	4640      	mov	r0, r8
 801827e:	47d0      	blx	sl
 8018280:	3001      	adds	r0, #1
 8018282:	d09d      	beq.n	80181c0 <_printf_i+0x15c>
 8018284:	3501      	adds	r5, #1
 8018286:	68e3      	ldr	r3, [r4, #12]
 8018288:	9903      	ldr	r1, [sp, #12]
 801828a:	1a5b      	subs	r3, r3, r1
 801828c:	42ab      	cmp	r3, r5
 801828e:	dcf2      	bgt.n	8018276 <_printf_i+0x212>
 8018290:	e7eb      	b.n	801826a <_printf_i+0x206>
 8018292:	2500      	movs	r5, #0
 8018294:	f104 0619 	add.w	r6, r4, #25
 8018298:	e7f5      	b.n	8018286 <_printf_i+0x222>
 801829a:	bf00      	nop
 801829c:	080194b5 	.word	0x080194b5
 80182a0:	080194c6 	.word	0x080194c6

080182a4 <__sflush_r>:
 80182a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80182a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182ac:	0716      	lsls	r6, r2, #28
 80182ae:	4605      	mov	r5, r0
 80182b0:	460c      	mov	r4, r1
 80182b2:	d454      	bmi.n	801835e <__sflush_r+0xba>
 80182b4:	684b      	ldr	r3, [r1, #4]
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	dc02      	bgt.n	80182c0 <__sflush_r+0x1c>
 80182ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80182bc:	2b00      	cmp	r3, #0
 80182be:	dd48      	ble.n	8018352 <__sflush_r+0xae>
 80182c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80182c2:	2e00      	cmp	r6, #0
 80182c4:	d045      	beq.n	8018352 <__sflush_r+0xae>
 80182c6:	2300      	movs	r3, #0
 80182c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80182cc:	682f      	ldr	r7, [r5, #0]
 80182ce:	6a21      	ldr	r1, [r4, #32]
 80182d0:	602b      	str	r3, [r5, #0]
 80182d2:	d030      	beq.n	8018336 <__sflush_r+0x92>
 80182d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80182d6:	89a3      	ldrh	r3, [r4, #12]
 80182d8:	0759      	lsls	r1, r3, #29
 80182da:	d505      	bpl.n	80182e8 <__sflush_r+0x44>
 80182dc:	6863      	ldr	r3, [r4, #4]
 80182de:	1ad2      	subs	r2, r2, r3
 80182e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80182e2:	b10b      	cbz	r3, 80182e8 <__sflush_r+0x44>
 80182e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80182e6:	1ad2      	subs	r2, r2, r3
 80182e8:	2300      	movs	r3, #0
 80182ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80182ec:	6a21      	ldr	r1, [r4, #32]
 80182ee:	4628      	mov	r0, r5
 80182f0:	47b0      	blx	r6
 80182f2:	1c43      	adds	r3, r0, #1
 80182f4:	89a3      	ldrh	r3, [r4, #12]
 80182f6:	d106      	bne.n	8018306 <__sflush_r+0x62>
 80182f8:	6829      	ldr	r1, [r5, #0]
 80182fa:	291d      	cmp	r1, #29
 80182fc:	d82b      	bhi.n	8018356 <__sflush_r+0xb2>
 80182fe:	4a2a      	ldr	r2, [pc, #168]	@ (80183a8 <__sflush_r+0x104>)
 8018300:	410a      	asrs	r2, r1
 8018302:	07d6      	lsls	r6, r2, #31
 8018304:	d427      	bmi.n	8018356 <__sflush_r+0xb2>
 8018306:	2200      	movs	r2, #0
 8018308:	6062      	str	r2, [r4, #4]
 801830a:	04d9      	lsls	r1, r3, #19
 801830c:	6922      	ldr	r2, [r4, #16]
 801830e:	6022      	str	r2, [r4, #0]
 8018310:	d504      	bpl.n	801831c <__sflush_r+0x78>
 8018312:	1c42      	adds	r2, r0, #1
 8018314:	d101      	bne.n	801831a <__sflush_r+0x76>
 8018316:	682b      	ldr	r3, [r5, #0]
 8018318:	b903      	cbnz	r3, 801831c <__sflush_r+0x78>
 801831a:	6560      	str	r0, [r4, #84]	@ 0x54
 801831c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801831e:	602f      	str	r7, [r5, #0]
 8018320:	b1b9      	cbz	r1, 8018352 <__sflush_r+0xae>
 8018322:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018326:	4299      	cmp	r1, r3
 8018328:	d002      	beq.n	8018330 <__sflush_r+0x8c>
 801832a:	4628      	mov	r0, r5
 801832c:	f7ff fb40 	bl	80179b0 <_free_r>
 8018330:	2300      	movs	r3, #0
 8018332:	6363      	str	r3, [r4, #52]	@ 0x34
 8018334:	e00d      	b.n	8018352 <__sflush_r+0xae>
 8018336:	2301      	movs	r3, #1
 8018338:	4628      	mov	r0, r5
 801833a:	47b0      	blx	r6
 801833c:	4602      	mov	r2, r0
 801833e:	1c50      	adds	r0, r2, #1
 8018340:	d1c9      	bne.n	80182d6 <__sflush_r+0x32>
 8018342:	682b      	ldr	r3, [r5, #0]
 8018344:	2b00      	cmp	r3, #0
 8018346:	d0c6      	beq.n	80182d6 <__sflush_r+0x32>
 8018348:	2b1d      	cmp	r3, #29
 801834a:	d001      	beq.n	8018350 <__sflush_r+0xac>
 801834c:	2b16      	cmp	r3, #22
 801834e:	d11e      	bne.n	801838e <__sflush_r+0xea>
 8018350:	602f      	str	r7, [r5, #0]
 8018352:	2000      	movs	r0, #0
 8018354:	e022      	b.n	801839c <__sflush_r+0xf8>
 8018356:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801835a:	b21b      	sxth	r3, r3
 801835c:	e01b      	b.n	8018396 <__sflush_r+0xf2>
 801835e:	690f      	ldr	r7, [r1, #16]
 8018360:	2f00      	cmp	r7, #0
 8018362:	d0f6      	beq.n	8018352 <__sflush_r+0xae>
 8018364:	0793      	lsls	r3, r2, #30
 8018366:	680e      	ldr	r6, [r1, #0]
 8018368:	bf08      	it	eq
 801836a:	694b      	ldreq	r3, [r1, #20]
 801836c:	600f      	str	r7, [r1, #0]
 801836e:	bf18      	it	ne
 8018370:	2300      	movne	r3, #0
 8018372:	eba6 0807 	sub.w	r8, r6, r7
 8018376:	608b      	str	r3, [r1, #8]
 8018378:	f1b8 0f00 	cmp.w	r8, #0
 801837c:	dde9      	ble.n	8018352 <__sflush_r+0xae>
 801837e:	6a21      	ldr	r1, [r4, #32]
 8018380:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018382:	4643      	mov	r3, r8
 8018384:	463a      	mov	r2, r7
 8018386:	4628      	mov	r0, r5
 8018388:	47b0      	blx	r6
 801838a:	2800      	cmp	r0, #0
 801838c:	dc08      	bgt.n	80183a0 <__sflush_r+0xfc>
 801838e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018392:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018396:	81a3      	strh	r3, [r4, #12]
 8018398:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801839c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183a0:	4407      	add	r7, r0
 80183a2:	eba8 0800 	sub.w	r8, r8, r0
 80183a6:	e7e7      	b.n	8018378 <__sflush_r+0xd4>
 80183a8:	dfbffffe 	.word	0xdfbffffe

080183ac <_fflush_r>:
 80183ac:	b538      	push	{r3, r4, r5, lr}
 80183ae:	690b      	ldr	r3, [r1, #16]
 80183b0:	4605      	mov	r5, r0
 80183b2:	460c      	mov	r4, r1
 80183b4:	b913      	cbnz	r3, 80183bc <_fflush_r+0x10>
 80183b6:	2500      	movs	r5, #0
 80183b8:	4628      	mov	r0, r5
 80183ba:	bd38      	pop	{r3, r4, r5, pc}
 80183bc:	b118      	cbz	r0, 80183c6 <_fflush_r+0x1a>
 80183be:	6a03      	ldr	r3, [r0, #32]
 80183c0:	b90b      	cbnz	r3, 80183c6 <_fflush_r+0x1a>
 80183c2:	f7ff f8d1 	bl	8017568 <__sinit>
 80183c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d0f3      	beq.n	80183b6 <_fflush_r+0xa>
 80183ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80183d0:	07d0      	lsls	r0, r2, #31
 80183d2:	d404      	bmi.n	80183de <_fflush_r+0x32>
 80183d4:	0599      	lsls	r1, r3, #22
 80183d6:	d402      	bmi.n	80183de <_fflush_r+0x32>
 80183d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80183da:	f7ff faa6 	bl	801792a <__retarget_lock_acquire_recursive>
 80183de:	4628      	mov	r0, r5
 80183e0:	4621      	mov	r1, r4
 80183e2:	f7ff ff5f 	bl	80182a4 <__sflush_r>
 80183e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80183e8:	07da      	lsls	r2, r3, #31
 80183ea:	4605      	mov	r5, r0
 80183ec:	d4e4      	bmi.n	80183b8 <_fflush_r+0xc>
 80183ee:	89a3      	ldrh	r3, [r4, #12]
 80183f0:	059b      	lsls	r3, r3, #22
 80183f2:	d4e1      	bmi.n	80183b8 <_fflush_r+0xc>
 80183f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80183f6:	f7ff fa99 	bl	801792c <__retarget_lock_release_recursive>
 80183fa:	e7dd      	b.n	80183b8 <_fflush_r+0xc>

080183fc <fiprintf>:
 80183fc:	b40e      	push	{r1, r2, r3}
 80183fe:	b503      	push	{r0, r1, lr}
 8018400:	4601      	mov	r1, r0
 8018402:	ab03      	add	r3, sp, #12
 8018404:	4805      	ldr	r0, [pc, #20]	@ (801841c <fiprintf+0x20>)
 8018406:	f853 2b04 	ldr.w	r2, [r3], #4
 801840a:	6800      	ldr	r0, [r0, #0]
 801840c:	9301      	str	r3, [sp, #4]
 801840e:	f7ff fca3 	bl	8017d58 <_vfiprintf_r>
 8018412:	b002      	add	sp, #8
 8018414:	f85d eb04 	ldr.w	lr, [sp], #4
 8018418:	b003      	add	sp, #12
 801841a:	4770      	bx	lr
 801841c:	200000fc 	.word	0x200000fc

08018420 <__swbuf_r>:
 8018420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018422:	460e      	mov	r6, r1
 8018424:	4614      	mov	r4, r2
 8018426:	4605      	mov	r5, r0
 8018428:	b118      	cbz	r0, 8018432 <__swbuf_r+0x12>
 801842a:	6a03      	ldr	r3, [r0, #32]
 801842c:	b90b      	cbnz	r3, 8018432 <__swbuf_r+0x12>
 801842e:	f7ff f89b 	bl	8017568 <__sinit>
 8018432:	69a3      	ldr	r3, [r4, #24]
 8018434:	60a3      	str	r3, [r4, #8]
 8018436:	89a3      	ldrh	r3, [r4, #12]
 8018438:	071a      	lsls	r2, r3, #28
 801843a:	d501      	bpl.n	8018440 <__swbuf_r+0x20>
 801843c:	6923      	ldr	r3, [r4, #16]
 801843e:	b943      	cbnz	r3, 8018452 <__swbuf_r+0x32>
 8018440:	4621      	mov	r1, r4
 8018442:	4628      	mov	r0, r5
 8018444:	f000 f82a 	bl	801849c <__swsetup_r>
 8018448:	b118      	cbz	r0, 8018452 <__swbuf_r+0x32>
 801844a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801844e:	4638      	mov	r0, r7
 8018450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018452:	6823      	ldr	r3, [r4, #0]
 8018454:	6922      	ldr	r2, [r4, #16]
 8018456:	1a98      	subs	r0, r3, r2
 8018458:	6963      	ldr	r3, [r4, #20]
 801845a:	b2f6      	uxtb	r6, r6
 801845c:	4283      	cmp	r3, r0
 801845e:	4637      	mov	r7, r6
 8018460:	dc05      	bgt.n	801846e <__swbuf_r+0x4e>
 8018462:	4621      	mov	r1, r4
 8018464:	4628      	mov	r0, r5
 8018466:	f7ff ffa1 	bl	80183ac <_fflush_r>
 801846a:	2800      	cmp	r0, #0
 801846c:	d1ed      	bne.n	801844a <__swbuf_r+0x2a>
 801846e:	68a3      	ldr	r3, [r4, #8]
 8018470:	3b01      	subs	r3, #1
 8018472:	60a3      	str	r3, [r4, #8]
 8018474:	6823      	ldr	r3, [r4, #0]
 8018476:	1c5a      	adds	r2, r3, #1
 8018478:	6022      	str	r2, [r4, #0]
 801847a:	701e      	strb	r6, [r3, #0]
 801847c:	6962      	ldr	r2, [r4, #20]
 801847e:	1c43      	adds	r3, r0, #1
 8018480:	429a      	cmp	r2, r3
 8018482:	d004      	beq.n	801848e <__swbuf_r+0x6e>
 8018484:	89a3      	ldrh	r3, [r4, #12]
 8018486:	07db      	lsls	r3, r3, #31
 8018488:	d5e1      	bpl.n	801844e <__swbuf_r+0x2e>
 801848a:	2e0a      	cmp	r6, #10
 801848c:	d1df      	bne.n	801844e <__swbuf_r+0x2e>
 801848e:	4621      	mov	r1, r4
 8018490:	4628      	mov	r0, r5
 8018492:	f7ff ff8b 	bl	80183ac <_fflush_r>
 8018496:	2800      	cmp	r0, #0
 8018498:	d0d9      	beq.n	801844e <__swbuf_r+0x2e>
 801849a:	e7d6      	b.n	801844a <__swbuf_r+0x2a>

0801849c <__swsetup_r>:
 801849c:	b538      	push	{r3, r4, r5, lr}
 801849e:	4b29      	ldr	r3, [pc, #164]	@ (8018544 <__swsetup_r+0xa8>)
 80184a0:	4605      	mov	r5, r0
 80184a2:	6818      	ldr	r0, [r3, #0]
 80184a4:	460c      	mov	r4, r1
 80184a6:	b118      	cbz	r0, 80184b0 <__swsetup_r+0x14>
 80184a8:	6a03      	ldr	r3, [r0, #32]
 80184aa:	b90b      	cbnz	r3, 80184b0 <__swsetup_r+0x14>
 80184ac:	f7ff f85c 	bl	8017568 <__sinit>
 80184b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80184b4:	0719      	lsls	r1, r3, #28
 80184b6:	d422      	bmi.n	80184fe <__swsetup_r+0x62>
 80184b8:	06da      	lsls	r2, r3, #27
 80184ba:	d407      	bmi.n	80184cc <__swsetup_r+0x30>
 80184bc:	2209      	movs	r2, #9
 80184be:	602a      	str	r2, [r5, #0]
 80184c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80184c4:	81a3      	strh	r3, [r4, #12]
 80184c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80184ca:	e033      	b.n	8018534 <__swsetup_r+0x98>
 80184cc:	0758      	lsls	r0, r3, #29
 80184ce:	d512      	bpl.n	80184f6 <__swsetup_r+0x5a>
 80184d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80184d2:	b141      	cbz	r1, 80184e6 <__swsetup_r+0x4a>
 80184d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80184d8:	4299      	cmp	r1, r3
 80184da:	d002      	beq.n	80184e2 <__swsetup_r+0x46>
 80184dc:	4628      	mov	r0, r5
 80184de:	f7ff fa67 	bl	80179b0 <_free_r>
 80184e2:	2300      	movs	r3, #0
 80184e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80184e6:	89a3      	ldrh	r3, [r4, #12]
 80184e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80184ec:	81a3      	strh	r3, [r4, #12]
 80184ee:	2300      	movs	r3, #0
 80184f0:	6063      	str	r3, [r4, #4]
 80184f2:	6923      	ldr	r3, [r4, #16]
 80184f4:	6023      	str	r3, [r4, #0]
 80184f6:	89a3      	ldrh	r3, [r4, #12]
 80184f8:	f043 0308 	orr.w	r3, r3, #8
 80184fc:	81a3      	strh	r3, [r4, #12]
 80184fe:	6923      	ldr	r3, [r4, #16]
 8018500:	b94b      	cbnz	r3, 8018516 <__swsetup_r+0x7a>
 8018502:	89a3      	ldrh	r3, [r4, #12]
 8018504:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018508:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801850c:	d003      	beq.n	8018516 <__swsetup_r+0x7a>
 801850e:	4621      	mov	r1, r4
 8018510:	4628      	mov	r0, r5
 8018512:	f000 f846 	bl	80185a2 <__smakebuf_r>
 8018516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801851a:	f013 0201 	ands.w	r2, r3, #1
 801851e:	d00a      	beq.n	8018536 <__swsetup_r+0x9a>
 8018520:	2200      	movs	r2, #0
 8018522:	60a2      	str	r2, [r4, #8]
 8018524:	6962      	ldr	r2, [r4, #20]
 8018526:	4252      	negs	r2, r2
 8018528:	61a2      	str	r2, [r4, #24]
 801852a:	6922      	ldr	r2, [r4, #16]
 801852c:	b942      	cbnz	r2, 8018540 <__swsetup_r+0xa4>
 801852e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018532:	d1c5      	bne.n	80184c0 <__swsetup_r+0x24>
 8018534:	bd38      	pop	{r3, r4, r5, pc}
 8018536:	0799      	lsls	r1, r3, #30
 8018538:	bf58      	it	pl
 801853a:	6962      	ldrpl	r2, [r4, #20]
 801853c:	60a2      	str	r2, [r4, #8]
 801853e:	e7f4      	b.n	801852a <__swsetup_r+0x8e>
 8018540:	2000      	movs	r0, #0
 8018542:	e7f7      	b.n	8018534 <__swsetup_r+0x98>
 8018544:	200000fc 	.word	0x200000fc

08018548 <abort>:
 8018548:	b508      	push	{r3, lr}
 801854a:	2006      	movs	r0, #6
 801854c:	f000 f88e 	bl	801866c <raise>
 8018550:	2001      	movs	r0, #1
 8018552:	f7e9 fedb 	bl	800230c <_exit>

08018556 <__swhatbuf_r>:
 8018556:	b570      	push	{r4, r5, r6, lr}
 8018558:	460c      	mov	r4, r1
 801855a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801855e:	2900      	cmp	r1, #0
 8018560:	b096      	sub	sp, #88	@ 0x58
 8018562:	4615      	mov	r5, r2
 8018564:	461e      	mov	r6, r3
 8018566:	da0d      	bge.n	8018584 <__swhatbuf_r+0x2e>
 8018568:	89a3      	ldrh	r3, [r4, #12]
 801856a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801856e:	f04f 0100 	mov.w	r1, #0
 8018572:	bf14      	ite	ne
 8018574:	2340      	movne	r3, #64	@ 0x40
 8018576:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801857a:	2000      	movs	r0, #0
 801857c:	6031      	str	r1, [r6, #0]
 801857e:	602b      	str	r3, [r5, #0]
 8018580:	b016      	add	sp, #88	@ 0x58
 8018582:	bd70      	pop	{r4, r5, r6, pc}
 8018584:	466a      	mov	r2, sp
 8018586:	f000 f879 	bl	801867c <_fstat_r>
 801858a:	2800      	cmp	r0, #0
 801858c:	dbec      	blt.n	8018568 <__swhatbuf_r+0x12>
 801858e:	9901      	ldr	r1, [sp, #4]
 8018590:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018594:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018598:	4259      	negs	r1, r3
 801859a:	4159      	adcs	r1, r3
 801859c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80185a0:	e7eb      	b.n	801857a <__swhatbuf_r+0x24>

080185a2 <__smakebuf_r>:
 80185a2:	898b      	ldrh	r3, [r1, #12]
 80185a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80185a6:	079d      	lsls	r5, r3, #30
 80185a8:	4606      	mov	r6, r0
 80185aa:	460c      	mov	r4, r1
 80185ac:	d507      	bpl.n	80185be <__smakebuf_r+0x1c>
 80185ae:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80185b2:	6023      	str	r3, [r4, #0]
 80185b4:	6123      	str	r3, [r4, #16]
 80185b6:	2301      	movs	r3, #1
 80185b8:	6163      	str	r3, [r4, #20]
 80185ba:	b003      	add	sp, #12
 80185bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80185be:	ab01      	add	r3, sp, #4
 80185c0:	466a      	mov	r2, sp
 80185c2:	f7ff ffc8 	bl	8018556 <__swhatbuf_r>
 80185c6:	9f00      	ldr	r7, [sp, #0]
 80185c8:	4605      	mov	r5, r0
 80185ca:	4639      	mov	r1, r7
 80185cc:	4630      	mov	r0, r6
 80185ce:	f7fe fd99 	bl	8017104 <_malloc_r>
 80185d2:	b948      	cbnz	r0, 80185e8 <__smakebuf_r+0x46>
 80185d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80185d8:	059a      	lsls	r2, r3, #22
 80185da:	d4ee      	bmi.n	80185ba <__smakebuf_r+0x18>
 80185dc:	f023 0303 	bic.w	r3, r3, #3
 80185e0:	f043 0302 	orr.w	r3, r3, #2
 80185e4:	81a3      	strh	r3, [r4, #12]
 80185e6:	e7e2      	b.n	80185ae <__smakebuf_r+0xc>
 80185e8:	89a3      	ldrh	r3, [r4, #12]
 80185ea:	6020      	str	r0, [r4, #0]
 80185ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80185f0:	81a3      	strh	r3, [r4, #12]
 80185f2:	9b01      	ldr	r3, [sp, #4]
 80185f4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80185f8:	b15b      	cbz	r3, 8018612 <__smakebuf_r+0x70>
 80185fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80185fe:	4630      	mov	r0, r6
 8018600:	f000 f84e 	bl	80186a0 <_isatty_r>
 8018604:	b128      	cbz	r0, 8018612 <__smakebuf_r+0x70>
 8018606:	89a3      	ldrh	r3, [r4, #12]
 8018608:	f023 0303 	bic.w	r3, r3, #3
 801860c:	f043 0301 	orr.w	r3, r3, #1
 8018610:	81a3      	strh	r3, [r4, #12]
 8018612:	89a3      	ldrh	r3, [r4, #12]
 8018614:	431d      	orrs	r5, r3
 8018616:	81a5      	strh	r5, [r4, #12]
 8018618:	e7cf      	b.n	80185ba <__smakebuf_r+0x18>

0801861a <_raise_r>:
 801861a:	291f      	cmp	r1, #31
 801861c:	b538      	push	{r3, r4, r5, lr}
 801861e:	4605      	mov	r5, r0
 8018620:	460c      	mov	r4, r1
 8018622:	d904      	bls.n	801862e <_raise_r+0x14>
 8018624:	2316      	movs	r3, #22
 8018626:	6003      	str	r3, [r0, #0]
 8018628:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801862c:	bd38      	pop	{r3, r4, r5, pc}
 801862e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018630:	b112      	cbz	r2, 8018638 <_raise_r+0x1e>
 8018632:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018636:	b94b      	cbnz	r3, 801864c <_raise_r+0x32>
 8018638:	4628      	mov	r0, r5
 801863a:	f000 f853 	bl	80186e4 <_getpid_r>
 801863e:	4622      	mov	r2, r4
 8018640:	4601      	mov	r1, r0
 8018642:	4628      	mov	r0, r5
 8018644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018648:	f000 b83a 	b.w	80186c0 <_kill_r>
 801864c:	2b01      	cmp	r3, #1
 801864e:	d00a      	beq.n	8018666 <_raise_r+0x4c>
 8018650:	1c59      	adds	r1, r3, #1
 8018652:	d103      	bne.n	801865c <_raise_r+0x42>
 8018654:	2316      	movs	r3, #22
 8018656:	6003      	str	r3, [r0, #0]
 8018658:	2001      	movs	r0, #1
 801865a:	e7e7      	b.n	801862c <_raise_r+0x12>
 801865c:	2100      	movs	r1, #0
 801865e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018662:	4620      	mov	r0, r4
 8018664:	4798      	blx	r3
 8018666:	2000      	movs	r0, #0
 8018668:	e7e0      	b.n	801862c <_raise_r+0x12>
	...

0801866c <raise>:
 801866c:	4b02      	ldr	r3, [pc, #8]	@ (8018678 <raise+0xc>)
 801866e:	4601      	mov	r1, r0
 8018670:	6818      	ldr	r0, [r3, #0]
 8018672:	f7ff bfd2 	b.w	801861a <_raise_r>
 8018676:	bf00      	nop
 8018678:	200000fc 	.word	0x200000fc

0801867c <_fstat_r>:
 801867c:	b538      	push	{r3, r4, r5, lr}
 801867e:	4d07      	ldr	r5, [pc, #28]	@ (801869c <_fstat_r+0x20>)
 8018680:	2300      	movs	r3, #0
 8018682:	4604      	mov	r4, r0
 8018684:	4608      	mov	r0, r1
 8018686:	4611      	mov	r1, r2
 8018688:	602b      	str	r3, [r5, #0]
 801868a:	f7e9 fe8f 	bl	80023ac <_fstat>
 801868e:	1c43      	adds	r3, r0, #1
 8018690:	d102      	bne.n	8018698 <_fstat_r+0x1c>
 8018692:	682b      	ldr	r3, [r5, #0]
 8018694:	b103      	cbz	r3, 8018698 <_fstat_r+0x1c>
 8018696:	6023      	str	r3, [r4, #0]
 8018698:	bd38      	pop	{r3, r4, r5, pc}
 801869a:	bf00      	nop
 801869c:	2000ae88 	.word	0x2000ae88

080186a0 <_isatty_r>:
 80186a0:	b538      	push	{r3, r4, r5, lr}
 80186a2:	4d06      	ldr	r5, [pc, #24]	@ (80186bc <_isatty_r+0x1c>)
 80186a4:	2300      	movs	r3, #0
 80186a6:	4604      	mov	r4, r0
 80186a8:	4608      	mov	r0, r1
 80186aa:	602b      	str	r3, [r5, #0]
 80186ac:	f7e9 fe8e 	bl	80023cc <_isatty>
 80186b0:	1c43      	adds	r3, r0, #1
 80186b2:	d102      	bne.n	80186ba <_isatty_r+0x1a>
 80186b4:	682b      	ldr	r3, [r5, #0]
 80186b6:	b103      	cbz	r3, 80186ba <_isatty_r+0x1a>
 80186b8:	6023      	str	r3, [r4, #0]
 80186ba:	bd38      	pop	{r3, r4, r5, pc}
 80186bc:	2000ae88 	.word	0x2000ae88

080186c0 <_kill_r>:
 80186c0:	b538      	push	{r3, r4, r5, lr}
 80186c2:	4d07      	ldr	r5, [pc, #28]	@ (80186e0 <_kill_r+0x20>)
 80186c4:	2300      	movs	r3, #0
 80186c6:	4604      	mov	r4, r0
 80186c8:	4608      	mov	r0, r1
 80186ca:	4611      	mov	r1, r2
 80186cc:	602b      	str	r3, [r5, #0]
 80186ce:	f7e9 fe0d 	bl	80022ec <_kill>
 80186d2:	1c43      	adds	r3, r0, #1
 80186d4:	d102      	bne.n	80186dc <_kill_r+0x1c>
 80186d6:	682b      	ldr	r3, [r5, #0]
 80186d8:	b103      	cbz	r3, 80186dc <_kill_r+0x1c>
 80186da:	6023      	str	r3, [r4, #0]
 80186dc:	bd38      	pop	{r3, r4, r5, pc}
 80186de:	bf00      	nop
 80186e0:	2000ae88 	.word	0x2000ae88

080186e4 <_getpid_r>:
 80186e4:	f7e9 bdfa 	b.w	80022dc <_getpid>

080186e8 <_init>:
 80186e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186ea:	bf00      	nop
 80186ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80186ee:	bc08      	pop	{r3}
 80186f0:	469e      	mov	lr, r3
 80186f2:	4770      	bx	lr

080186f4 <_fini>:
 80186f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186f6:	bf00      	nop
 80186f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80186fa:	bc08      	pop	{r3}
 80186fc:	469e      	mov	lr, r3
 80186fe:	4770      	bx	lr
