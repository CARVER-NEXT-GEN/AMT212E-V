
AMT212E-V_Micro-ROS_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018480  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dd8  08018660  08018660  00019660  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019438  08019438  0001b14c  2**0
                  CONTENTS
  4 .ARM          00000008  08019438  08019438  0001a438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019440  08019440  0001b14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08019440  08019440  0001a440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08019448  08019448  0001a448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  0801944c  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ad38  20000150  08019598  0001b150  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000ae88  08019598  0001be88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b14c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002458d  00000000  00000000  0001b17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051ab  00000000  00000000  0003f709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd8  00000000  00000000  000448b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001560  00000000  00000000  00046490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d280  00000000  00000000  000479f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000232f6  00000000  00000000  00074c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112fc0  00000000  00000000  00097f66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001aaf26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081a8  00000000  00000000  001aaf9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009e  00000000  00000000  001b3144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000150 	.word	0x20000150
 80001fc:	00000000 	.word	0x00000000
 8000200:	08018648 	.word	0x08018648

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000154 	.word	0x20000154
 800021c:	08018648 	.word	0x08018648

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_ldivmod>:
 8000b2c:	b97b      	cbnz	r3, 8000b4e <__aeabi_ldivmod+0x22>
 8000b2e:	b972      	cbnz	r2, 8000b4e <__aeabi_ldivmod+0x22>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bfbe      	ittt	lt
 8000b34:	2000      	movlt	r0, #0
 8000b36:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b3a:	e006      	blt.n	8000b4a <__aeabi_ldivmod+0x1e>
 8000b3c:	bf08      	it	eq
 8000b3e:	2800      	cmpeq	r0, #0
 8000b40:	bf1c      	itt	ne
 8000b42:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b46:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b4a:	f000 b9b5 	b.w	8000eb8 <__aeabi_idiv0>
 8000b4e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b52:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b56:	2900      	cmp	r1, #0
 8000b58:	db09      	blt.n	8000b6e <__aeabi_ldivmod+0x42>
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	db1a      	blt.n	8000b94 <__aeabi_ldivmod+0x68>
 8000b5e:	f000 f84d 	bl	8000bfc <__udivmoddi4>
 8000b62:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6a:	b004      	add	sp, #16
 8000b6c:	4770      	bx	lr
 8000b6e:	4240      	negs	r0, r0
 8000b70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	db1b      	blt.n	8000bb0 <__aeabi_ldivmod+0x84>
 8000b78:	f000 f840 	bl	8000bfc <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4240      	negs	r0, r0
 8000b88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b8c:	4252      	negs	r2, r2
 8000b8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b92:	4770      	bx	lr
 8000b94:	4252      	negs	r2, r2
 8000b96:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b9a:	f000 f82f 	bl	8000bfc <__udivmoddi4>
 8000b9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba6:	b004      	add	sp, #16
 8000ba8:	4240      	negs	r0, r0
 8000baa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bae:	4770      	bx	lr
 8000bb0:	4252      	negs	r2, r2
 8000bb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bb6:	f000 f821 	bl	8000bfc <__udivmoddi4>
 8000bba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc2:	b004      	add	sp, #16
 8000bc4:	4252      	negs	r2, r2
 8000bc6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_uldivmod>:
 8000bcc:	b953      	cbnz	r3, 8000be4 <__aeabi_uldivmod+0x18>
 8000bce:	b94a      	cbnz	r2, 8000be4 <__aeabi_uldivmod+0x18>
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	bf08      	it	eq
 8000bd4:	2800      	cmpeq	r0, #0
 8000bd6:	bf1c      	itt	ne
 8000bd8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bdc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000be0:	f000 b96a 	b.w	8000eb8 <__aeabi_idiv0>
 8000be4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bec:	f000 f806 	bl	8000bfc <__udivmoddi4>
 8000bf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf8:	b004      	add	sp, #16
 8000bfa:	4770      	bx	lr

08000bfc <__udivmoddi4>:
 8000bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c00:	9d08      	ldr	r5, [sp, #32]
 8000c02:	460c      	mov	r4, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14e      	bne.n	8000ca6 <__udivmoddi4+0xaa>
 8000c08:	4694      	mov	ip, r2
 8000c0a:	458c      	cmp	ip, r1
 8000c0c:	4686      	mov	lr, r0
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	d962      	bls.n	8000cda <__udivmoddi4+0xde>
 8000c14:	b14a      	cbz	r2, 8000c2a <__udivmoddi4+0x2e>
 8000c16:	f1c2 0320 	rsb	r3, r2, #32
 8000c1a:	4091      	lsls	r1, r2
 8000c1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c24:	4319      	orrs	r1, r3
 8000c26:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2e:	fa1f f68c 	uxth.w	r6, ip
 8000c32:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c3a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c42:	fb04 f106 	mul.w	r1, r4, r6
 8000c46:	4299      	cmp	r1, r3
 8000c48:	d90a      	bls.n	8000c60 <__udivmoddi4+0x64>
 8000c4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c52:	f080 8112 	bcs.w	8000e7a <__udivmoddi4+0x27e>
 8000c56:	4299      	cmp	r1, r3
 8000c58:	f240 810f 	bls.w	8000e7a <__udivmoddi4+0x27e>
 8000c5c:	3c02      	subs	r4, #2
 8000c5e:	4463      	add	r3, ip
 8000c60:	1a59      	subs	r1, r3, r1
 8000c62:	fa1f f38e 	uxth.w	r3, lr
 8000c66:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c72:	fb00 f606 	mul.w	r6, r0, r6
 8000c76:	429e      	cmp	r6, r3
 8000c78:	d90a      	bls.n	8000c90 <__udivmoddi4+0x94>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c82:	f080 80fc 	bcs.w	8000e7e <__udivmoddi4+0x282>
 8000c86:	429e      	cmp	r6, r3
 8000c88:	f240 80f9 	bls.w	8000e7e <__udivmoddi4+0x282>
 8000c8c:	4463      	add	r3, ip
 8000c8e:	3802      	subs	r0, #2
 8000c90:	1b9b      	subs	r3, r3, r6
 8000c92:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c96:	2100      	movs	r1, #0
 8000c98:	b11d      	cbz	r5, 8000ca2 <__udivmoddi4+0xa6>
 8000c9a:	40d3      	lsrs	r3, r2
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	e9c5 3200 	strd	r3, r2, [r5]
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d905      	bls.n	8000cb6 <__udivmoddi4+0xba>
 8000caa:	b10d      	cbz	r5, 8000cb0 <__udivmoddi4+0xb4>
 8000cac:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e7f5      	b.n	8000ca2 <__udivmoddi4+0xa6>
 8000cb6:	fab3 f183 	clz	r1, r3
 8000cba:	2900      	cmp	r1, #0
 8000cbc:	d146      	bne.n	8000d4c <__udivmoddi4+0x150>
 8000cbe:	42a3      	cmp	r3, r4
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0xcc>
 8000cc2:	4290      	cmp	r0, r2
 8000cc4:	f0c0 80f0 	bcc.w	8000ea8 <__udivmoddi4+0x2ac>
 8000cc8:	1a86      	subs	r6, r0, r2
 8000cca:	eb64 0303 	sbc.w	r3, r4, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	2d00      	cmp	r5, #0
 8000cd2:	d0e6      	beq.n	8000ca2 <__udivmoddi4+0xa6>
 8000cd4:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd8:	e7e3      	b.n	8000ca2 <__udivmoddi4+0xa6>
 8000cda:	2a00      	cmp	r2, #0
 8000cdc:	f040 8090 	bne.w	8000e00 <__udivmoddi4+0x204>
 8000ce0:	eba1 040c 	sub.w	r4, r1, ip
 8000ce4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce8:	fa1f f78c 	uxth.w	r7, ip
 8000cec:	2101      	movs	r1, #1
 8000cee:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb08 4416 	mls	r4, r8, r6, r4
 8000cfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfe:	fb07 f006 	mul.w	r0, r7, r6
 8000d02:	4298      	cmp	r0, r3
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x11c>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d0e:	d202      	bcs.n	8000d16 <__udivmoddi4+0x11a>
 8000d10:	4298      	cmp	r0, r3
 8000d12:	f200 80cd 	bhi.w	8000eb0 <__udivmoddi4+0x2b4>
 8000d16:	4626      	mov	r6, r4
 8000d18:	1a1c      	subs	r4, r3, r0
 8000d1a:	fa1f f38e 	uxth.w	r3, lr
 8000d1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d22:	fb08 4410 	mls	r4, r8, r0, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb00 f707 	mul.w	r7, r0, r7
 8000d2e:	429f      	cmp	r7, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x148>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x146>
 8000d3c:	429f      	cmp	r7, r3
 8000d3e:	f200 80b0 	bhi.w	8000ea2 <__udivmoddi4+0x2a6>
 8000d42:	4620      	mov	r0, r4
 8000d44:	1bdb      	subs	r3, r3, r7
 8000d46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0x9c>
 8000d4c:	f1c1 0620 	rsb	r6, r1, #32
 8000d50:	408b      	lsls	r3, r1
 8000d52:	fa22 f706 	lsr.w	r7, r2, r6
 8000d56:	431f      	orrs	r7, r3
 8000d58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d60:	ea43 030c 	orr.w	r3, r3, ip
 8000d64:	40f4      	lsrs	r4, r6
 8000d66:	fa00 f801 	lsl.w	r8, r0, r1
 8000d6a:	0c38      	lsrs	r0, r7, #16
 8000d6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d70:	fbb4 fef0 	udiv	lr, r4, r0
 8000d74:	fa1f fc87 	uxth.w	ip, r7
 8000d78:	fb00 441e 	mls	r4, r0, lr, r4
 8000d7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d80:	fb0e f90c 	mul.w	r9, lr, ip
 8000d84:	45a1      	cmp	r9, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	d90a      	bls.n	8000da2 <__udivmoddi4+0x1a6>
 8000d8c:	193c      	adds	r4, r7, r4
 8000d8e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d92:	f080 8084 	bcs.w	8000e9e <__udivmoddi4+0x2a2>
 8000d96:	45a1      	cmp	r9, r4
 8000d98:	f240 8081 	bls.w	8000e9e <__udivmoddi4+0x2a2>
 8000d9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000da0:	443c      	add	r4, r7
 8000da2:	eba4 0409 	sub.w	r4, r4, r9
 8000da6:	fa1f f983 	uxth.w	r9, r3
 8000daa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dae:	fb00 4413 	mls	r4, r0, r3, r4
 8000db2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dba:	45a4      	cmp	ip, r4
 8000dbc:	d907      	bls.n	8000dce <__udivmoddi4+0x1d2>
 8000dbe:	193c      	adds	r4, r7, r4
 8000dc0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000dc4:	d267      	bcs.n	8000e96 <__udivmoddi4+0x29a>
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d965      	bls.n	8000e96 <__udivmoddi4+0x29a>
 8000dca:	3b02      	subs	r3, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dd2:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd6:	eba4 040c 	sub.w	r4, r4, ip
 8000dda:	429c      	cmp	r4, r3
 8000ddc:	46ce      	mov	lr, r9
 8000dde:	469c      	mov	ip, r3
 8000de0:	d351      	bcc.n	8000e86 <__udivmoddi4+0x28a>
 8000de2:	d04e      	beq.n	8000e82 <__udivmoddi4+0x286>
 8000de4:	b155      	cbz	r5, 8000dfc <__udivmoddi4+0x200>
 8000de6:	ebb8 030e 	subs.w	r3, r8, lr
 8000dea:	eb64 040c 	sbc.w	r4, r4, ip
 8000dee:	fa04 f606 	lsl.w	r6, r4, r6
 8000df2:	40cb      	lsrs	r3, r1
 8000df4:	431e      	orrs	r6, r3
 8000df6:	40cc      	lsrs	r4, r1
 8000df8:	e9c5 6400 	strd	r6, r4, [r5]
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	e750      	b.n	8000ca2 <__udivmoddi4+0xa6>
 8000e00:	f1c2 0320 	rsb	r3, r2, #32
 8000e04:	fa20 f103 	lsr.w	r1, r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e10:	4094      	lsls	r4, r2
 8000e12:	430c      	orrs	r4, r1
 8000e14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e1c:	fa1f f78c 	uxth.w	r7, ip
 8000e20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e24:	fb08 3110 	mls	r1, r8, r0, r3
 8000e28:	0c23      	lsrs	r3, r4, #16
 8000e2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2e:	fb00 f107 	mul.w	r1, r0, r7
 8000e32:	4299      	cmp	r1, r3
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x24c>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e3e:	d22c      	bcs.n	8000e9a <__udivmoddi4+0x29e>
 8000e40:	4299      	cmp	r1, r3
 8000e42:	d92a      	bls.n	8000e9a <__udivmoddi4+0x29e>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1a5b      	subs	r3, r3, r1
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e50:	fb08 3311 	mls	r3, r8, r1, r3
 8000e54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e58:	fb01 f307 	mul.w	r3, r1, r7
 8000e5c:	42a3      	cmp	r3, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x276>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e68:	d213      	bcs.n	8000e92 <__udivmoddi4+0x296>
 8000e6a:	42a3      	cmp	r3, r4
 8000e6c:	d911      	bls.n	8000e92 <__udivmoddi4+0x296>
 8000e6e:	3902      	subs	r1, #2
 8000e70:	4464      	add	r4, ip
 8000e72:	1ae4      	subs	r4, r4, r3
 8000e74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e78:	e739      	b.n	8000cee <__udivmoddi4+0xf2>
 8000e7a:	4604      	mov	r4, r0
 8000e7c:	e6f0      	b.n	8000c60 <__udivmoddi4+0x64>
 8000e7e:	4608      	mov	r0, r1
 8000e80:	e706      	b.n	8000c90 <__udivmoddi4+0x94>
 8000e82:	45c8      	cmp	r8, r9
 8000e84:	d2ae      	bcs.n	8000de4 <__udivmoddi4+0x1e8>
 8000e86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8e:	3801      	subs	r0, #1
 8000e90:	e7a8      	b.n	8000de4 <__udivmoddi4+0x1e8>
 8000e92:	4631      	mov	r1, r6
 8000e94:	e7ed      	b.n	8000e72 <__udivmoddi4+0x276>
 8000e96:	4603      	mov	r3, r0
 8000e98:	e799      	b.n	8000dce <__udivmoddi4+0x1d2>
 8000e9a:	4630      	mov	r0, r6
 8000e9c:	e7d4      	b.n	8000e48 <__udivmoddi4+0x24c>
 8000e9e:	46d6      	mov	lr, sl
 8000ea0:	e77f      	b.n	8000da2 <__udivmoddi4+0x1a6>
 8000ea2:	4463      	add	r3, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e74d      	b.n	8000d44 <__udivmoddi4+0x148>
 8000ea8:	4606      	mov	r6, r0
 8000eaa:	4623      	mov	r3, r4
 8000eac:	4608      	mov	r0, r1
 8000eae:	e70f      	b.n	8000cd0 <__udivmoddi4+0xd4>
 8000eb0:	3e02      	subs	r6, #2
 8000eb2:	4463      	add	r3, ip
 8000eb4:	e730      	b.n	8000d18 <__udivmoddi4+0x11c>
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <AMT212EV_Init>:
 * (total count per revolute) that depend on the resolution.
 */


void AMT212EV_Init(AMT212EV *amt212ev ,UART_HandleTypeDef *huartx,uint16_t freq,int16_t cpr)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	461a      	mov	r2, r3
 8000eca:	460b      	mov	r3, r1
 8000ecc:	80fb      	strh	r3, [r7, #6]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	80bb      	strh	r3, [r7, #4]
	amt212ev->huartx = huartx;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	68ba      	ldr	r2, [r7, #8]
 8000ed6:	601a      	str	r2, [r3, #0]
	amt212ev->freq = freq;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	88fa      	ldrh	r2, [r7, #6]
 8000edc:	809a      	strh	r2, [r3, #4]
	amt212ev->cpr = cpr;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	88ba      	ldrh	r2, [r7, #4]
 8000ee2:	80da      	strh	r2, [r3, #6]
	amt212ev->left_limit = 0;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	82da      	strh	r2, [r3, #22]
	amt212ev->right_limit = 0;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	2200      	movs	r2, #0
 8000eee:	831a      	strh	r2, [r3, #24]
	amt212ev->dir = -1;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	22ff      	movs	r2, #255	@ 0xff
 8000ef4:	771a      	strb	r2, [r3, #28]
	amt212ev->raw_count = 0;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	829a      	strh	r2, [r3, #20]
	amt212ev->enc_home_pos = 2810;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f640 22fa 	movw	r2, #2810	@ 0xafa
 8000f02:	835a      	strh	r2, [r3, #26]
	amt212ev->degree = 0;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f04f 0200 	mov.w	r2, #0
 8000f0a:	629a      	str	r2, [r3, #40]	@ 0x28
	amt212ev->c[1] = 0;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	825a      	strh	r2, [r3, #18]
	amt212ev->c[0] = 0;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	2200      	movs	r2, #0
 8000f16:	821a      	strh	r2, [r3, #16]
	amt212ev->diff_count = 0;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	621a      	str	r2, [r3, #32]
	amt212ev->pulses = 0;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2200      	movs	r2, #0
 8000f22:	625a      	str	r2, [r3, #36]	@ 0x24
	amt212ev->revs = 0;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f04f 0200 	mov.w	r2, #0
 8000f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
	amt212ev->rads = 0;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f04f 0200 	mov.w	r2, #0
 8000f32:	631a      	str	r2, [r3, #48]	@ 0x30
	amt212ev->pps = 0;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f04f 0200 	mov.w	r2, #0
 8000f3a:	635a      	str	r2, [r3, #52]	@ 0x34
	amt212ev->radps = 0;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f04f 0200 	mov.w	r2, #0
 8000f42:	639a      	str	r2, [r3, #56]	@ 0x38
	amt212ev->rpm = 0;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f04f 0200 	mov.w	r2, #0
 8000f4a:	63da      	str	r2, [r3, #60]	@ 0x3c
	amt212ev->rx[0] = 0;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	amt212ev->rx[1] = 0;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	amt212ev->timeout = 0;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
	amt212ev->error_caught = 0;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

	// Start using UART DMA
	HAL_UART_Receive_DMA(huartx, amt212ev->rx, sizeof(amt212ev->rx));
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	3340      	adds	r3, #64	@ 0x40
 8000f6e:	2202      	movs	r2, #2
 8000f70:	4619      	mov	r1, r3
 8000f72:	68b8      	ldr	r0, [r7, #8]
 8000f74:	f005 f836 	bl	8005fe4 <HAL_UART_Receive_DMA>



}
 8000f78:	bf00      	nop
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <AMT212EV_ReadPosition>:

//void AMT212EV_Flip(AMT212EV *amt212ev){
//	amt212ev->dir = -1;
//}

void AMT212EV_ReadPosition(AMT212EV *amt212ev){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

	// Arrays to command an encoder
	uint8_t read_pos[1] = {0x54}; // Read Raw count data
 8000f88:	2354      	movs	r3, #84	@ 0x54
 8000f8a:	733b      	strb	r3, [r7, #12]

		if (HAL_UART_Transmit_DMA(amt212ev->huartx, read_pos, sizeof(read_pos)) != HAL_OK)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f107 010c 	add.w	r1, r7, #12
 8000f94:	2201      	movs	r2, #1
 8000f96:	4618      	mov	r0, r3
 8000f98:	f004 ffa4 	bl	8005ee4 <HAL_UART_Transmit_DMA>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <AMT212EV_ReadPosition+0x2a>
		{
			// Handle transmission error if necessary
			amt212ev->error_caught = READPOS;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
		}

}
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <AMT212EV_Processing_Data>:

	}
}


uint16_t AMT212EV_Processing_Data(AMT212EV *amt212ev){
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b084      	sub	sp, #16
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
	 // Extract encoder data
	    uint16_t data = (amt212ev->rx[1] << 8) | amt212ev->rx[0];
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000fc0:	021b      	lsls	r3, r3, #8
 8000fc2:	b21a      	sxth	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b21b      	sxth	r3, r3
 8000fd0:	81fb      	strh	r3, [r7, #14]

	    // Verify the checksum
	    if (verifyChecksumRS485(data)) {
 8000fd2:	89fb      	ldrh	r3, [r7, #14]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 f991 	bl	80012fc <verifyChecksumRS485>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d019      	beq.n	8001014 <AMT212EV_Processing_Data+0x62>
	    	if(amt212ev->cpr == 4096){
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000fe6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000fea:	d105      	bne.n	8000ff8 <AMT212EV_Processing_Data+0x46>
	    		 return data &= 0x0FFF;  // Mask to keep only 12 bits (valid data)
 8000fec:	89fb      	ldrh	r3, [r7, #14]
 8000fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ff2:	81fb      	strh	r3, [r7, #14]
 8000ff4:	89fb      	ldrh	r3, [r7, #14]
 8000ff6:	e012      	b.n	800101e <AMT212EV_Processing_Data+0x6c>

	    	}

	    	else if(amt212ev->cpr == 16384){
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000ffe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001002:	d105      	bne.n	8001010 <AMT212EV_Processing_Data+0x5e>
	    		 return data &= 0x3FFF; // Mask to keep only 14 bits (valid data)
 8001004:	89fb      	ldrh	r3, [r7, #14]
 8001006:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800100a:	81fb      	strh	r3, [r7, #14]
 800100c:	89fb      	ldrh	r3, [r7, #14]
 800100e:	e006      	b.n	800101e <AMT212EV_Processing_Data+0x6c>
	    	}

	        return data;
 8001010:	89fb      	ldrh	r3, [r7, #14]
 8001012:	e004      	b.n	800101e <AMT212EV_Processing_Data+0x6c>

	    } else {
	        // Handle checksum error by counting timeout
	    	amt212ev->timeout += 1;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	1c5a      	adds	r2, r3, #1
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	60da      	str	r2, [r3, #12]
	    }
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <AMT212EV_DiffCount>:


void AMT212EV_DiffCount(AMT212EV *amt212ev){
 8001028:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800102c:	b084      	sub	sp, #16
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]

	amt212ev->raw_count = AMT212EV_Processing_Data(amt212ev);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ffbd 	bl	8000fb2 <AMT212EV_Processing_Data>
 8001038:	4603      	mov	r3, r0
 800103a:	b21a      	sxth	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	829a      	strh	r2, [r3, #20]

	amt212ev->c[1] = (amt212ev->raw_count - amt212ev->enc_home_pos) * amt212ev->dir;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001046:	461a      	mov	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	b29a      	uxth	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8001058:	b29b      	uxth	r3, r3
 800105a:	fb12 f303 	smulbb	r3, r2, r3
 800105e:	b29b      	uxth	r3, r3
 8001060:	b21a      	sxth	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	825a      	strh	r2, [r3, #18]

	// Difference of Raw Position
	int32_t diff_count = amt212ev->c[1] - amt212ev->c[0];
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800106c:	461a      	mov	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	60fb      	str	r3, [r7, #12]

	if (diff_count > (amt212ev->cpr / 2)) {
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800107e:	0fda      	lsrs	r2, r3, #31
 8001080:	4413      	add	r3, r2
 8001082:	105b      	asrs	r3, r3, #1
 8001084:	b21b      	sxth	r3, r3
 8001086:	461a      	mov	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4293      	cmp	r3, r2
 800108c:	dd07      	ble.n	800109e <AMT212EV_DiffCount+0x76>
		diff_count -= amt212ev->cpr;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001094:	461a      	mov	r2, r3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	1a9b      	subs	r3, r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	e011      	b.n	80010c2 <AMT212EV_DiffCount+0x9a>
	} else if (diff_count < -(amt212ev->cpr / 2)) {
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010a4:	0fda      	lsrs	r2, r3, #31
 80010a6:	4413      	add	r3, r2
 80010a8:	105b      	asrs	r3, r3, #1
 80010aa:	b21b      	sxth	r3, r3
 80010ac:	425b      	negs	r3, r3
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	da06      	bge.n	80010c2 <AMT212EV_DiffCount+0x9a>
		diff_count += amt212ev->cpr;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010ba:	461a      	mov	r2, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	4413      	add	r3, r2
 80010c0:	60fb      	str	r3, [r7, #12]
	}
	amt212ev->diff_count = diff_count;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	621a      	str	r2, [r3, #32]
	amt212ev->pulses += amt212ev->diff_count;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a1b      	ldr	r3, [r3, #32]
 80010d0:	441a      	add	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	625a      	str	r2, [r3, #36]	@ 0x24
	amt212ev->revs += amt212ev->diff_count / (float)amt212ev->cpr;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	ee07 3a90 	vmov	s15, r3
 80010e4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010ee:	ee07 3a90 	vmov	s15, r3
 80010f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010f6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80010fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	amt212ev->degree += ((amt212ev->diff_count * 360.0) /(float) amt212ev->cpr) ;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fa55 	bl	80005b8 <__aeabi_f2d>
 800110e:	4604      	mov	r4, r0
 8001110:	460d      	mov	r5, r1
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6a1b      	ldr	r3, [r3, #32]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fa3c 	bl	8000594 <__aeabi_i2d>
 800111c:	f04f 0200 	mov.w	r2, #0
 8001120:	4b39      	ldr	r3, [pc, #228]	@ (8001208 <AMT212EV_DiffCount+0x1e0>)
 8001122:	f7ff faa1 	bl	8000668 <__aeabi_dmul>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4690      	mov	r8, r2
 800112c:	4699      	mov	r9, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001134:	ee07 3a90 	vmov	s15, r3
 8001138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800113c:	ee17 0a90 	vmov	r0, s15
 8001140:	f7ff fa3a 	bl	80005b8 <__aeabi_f2d>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4640      	mov	r0, r8
 800114a:	4649      	mov	r1, r9
 800114c:	f7ff fbb6 	bl	80008bc <__aeabi_ddiv>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4620      	mov	r0, r4
 8001156:	4629      	mov	r1, r5
 8001158:	f7ff f8d0 	bl	80002fc <__adddf3>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	f7ff fc92 	bl	8000a8c <__aeabi_d2f>
 8001168:	4602      	mov	r2, r0
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	629a      	str	r2, [r3, #40]	@ 0x28
	amt212ev->rads += ((amt212ev->diff_count * 2.0 * M_PI) /(float) amt212ev->cpr);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fa20 	bl	80005b8 <__aeabi_f2d>
 8001178:	4604      	mov	r4, r0
 800117a:	460d      	mov	r5, r1
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fa07 	bl	8000594 <__aeabi_i2d>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	f7ff f8b7 	bl	80002fc <__adddf3>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	4610      	mov	r0, r2
 8001194:	4619      	mov	r1, r3
 8001196:	a31a      	add	r3, pc, #104	@ (adr r3, 8001200 <AMT212EV_DiffCount+0x1d8>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	f7ff fa64 	bl	8000668 <__aeabi_dmul>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4690      	mov	r8, r2
 80011a6:	4699      	mov	r9, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80011ae:	ee07 3a90 	vmov	s15, r3
 80011b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b6:	ee17 0a90 	vmov	r0, s15
 80011ba:	f7ff f9fd 	bl	80005b8 <__aeabi_f2d>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4640      	mov	r0, r8
 80011c4:	4649      	mov	r1, r9
 80011c6:	f7ff fb79 	bl	80008bc <__aeabi_ddiv>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4620      	mov	r0, r4
 80011d0:	4629      	mov	r1, r5
 80011d2:	f7ff f893 	bl	80002fc <__adddf3>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4610      	mov	r0, r2
 80011dc:	4619      	mov	r1, r3
 80011de:	f7ff fc55 	bl	8000a8c <__aeabi_d2f>
 80011e2:	4602      	mov	r2, r0
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	631a      	str	r2, [r3, #48]	@ 0x30
	amt212ev->c[0] = amt212ev->c[1];
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	821a      	strh	r2, [r3, #16]

}
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011fc:	f3af 8000 	nop.w
 8001200:	54442d18 	.word	0x54442d18
 8001204:	400921fb 	.word	0x400921fb
 8001208:	40768000 	.word	0x40768000
 800120c:	00000000 	.word	0x00000000

08001210 <AMT212EV_Compute>:

void AMT212EV_Compute(AMT212EV *amt212ev){
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]


	amt212ev->pps = (amt212ev->diff_count * (float)amt212ev->freq) ; // Pulse per second
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a1b      	ldr	r3, [r3, #32]
 800121c:	ee07 3a90 	vmov	s15, r3
 8001220:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	889b      	ldrh	r3, [r3, #4]
 8001228:	ee07 3a90 	vmov	s15, r3
 800122c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001230:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	amt212ev->radps = amt212ev->pps * 2 * M_PI / (float)amt212ev->cpr;; // Radian per second
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001240:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001244:	ee17 0a90 	vmov	r0, s15
 8001248:	f7ff f9b6 	bl	80005b8 <__aeabi_f2d>
 800124c:	a329      	add	r3, pc, #164	@ (adr r3, 80012f4 <AMT212EV_Compute+0xe4>)
 800124e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001252:	f7ff fa09 	bl	8000668 <__aeabi_dmul>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4614      	mov	r4, r2
 800125c:	461d      	mov	r5, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001264:	ee07 3a90 	vmov	s15, r3
 8001268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800126c:	ee17 0a90 	vmov	r0, s15
 8001270:	f7ff f9a2 	bl	80005b8 <__aeabi_f2d>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4620      	mov	r0, r4
 800127a:	4629      	mov	r1, r5
 800127c:	f7ff fb1e 	bl	80008bc <__aeabi_ddiv>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	f7ff fc00 	bl	8000a8c <__aeabi_d2f>
 800128c:	4602      	mov	r2, r0
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	639a      	str	r2, [r3, #56]	@ 0x38
	amt212ev->rpm = amt212ev->pps * 60.0 / (float)amt212ev->cpr; // Round per second
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f98e 	bl	80005b8 <__aeabi_f2d>
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	4b13      	ldr	r3, [pc, #76]	@ (80012f0 <AMT212EV_Compute+0xe0>)
 80012a2:	f7ff f9e1 	bl	8000668 <__aeabi_dmul>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4614      	mov	r4, r2
 80012ac:	461d      	mov	r5, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80012b4:	ee07 3a90 	vmov	s15, r3
 80012b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012bc:	ee17 0a90 	vmov	r0, s15
 80012c0:	f7ff f97a 	bl	80005b8 <__aeabi_f2d>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4620      	mov	r0, r4
 80012ca:	4629      	mov	r1, r5
 80012cc:	f7ff faf6 	bl	80008bc <__aeabi_ddiv>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	f7ff fbd8 	bl	8000a8c <__aeabi_d2f>
 80012dc:	4602      	mov	r2, r0
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	63da      	str	r2, [r3, #60]	@ 0x3c



}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bdb0      	pop	{r4, r5, r7, pc}
 80012ea:	bf00      	nop
 80012ec:	f3af 8000 	nop.w
 80012f0:	404e0000 	.word	0x404e0000
 80012f4:	54442d18 	.word	0x54442d18
 80012f8:	400921fb 	.word	0x400921fb

080012fc <verifyChecksumRS485>:

}



bool verifyChecksumRS485(uint16_t currentPosition) {
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	80fb      	strh	r3, [r7, #6]
    uint16_t checksum = 0x3;
 8001306:	2303      	movs	r3, #3
 8001308:	81fb      	strh	r3, [r7, #14]

    // XOR 2-bit pairs
    for (int i = 0; i < 14; i += 2) {
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	e00f      	b.n	8001330 <verifyChecksumRS485+0x34>
        checksum ^= (currentPosition >> i) & 0x3;
 8001310:	88fa      	ldrh	r2, [r7, #6]
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	fa42 f303 	asr.w	r3, r2, r3
 8001318:	b21b      	sxth	r3, r3
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	b21a      	sxth	r2, r3
 8001320:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001324:	4053      	eors	r3, r2
 8001326:	b21b      	sxth	r3, r3
 8001328:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < 14; i += 2) {
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	3302      	adds	r3, #2
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	2b0d      	cmp	r3, #13
 8001334:	ddec      	ble.n	8001310 <verifyChecksumRS485+0x14>
    }
    return (checksum == (currentPosition >> 14));
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	0b9b      	lsrs	r3, r3, #14
 800133a:	b29b      	uxth	r3, r3
 800133c:	89fa      	ldrh	r2, [r7, #14]
 800133e:	429a      	cmp	r2, r3
 8001340:	bf0c      	ite	eq
 8001342:	2301      	moveq	r3, #1
 8001344:	2300      	movne	r3, #0
 8001346:	b2db      	uxtb	r3, r3
}
 8001348:	4618      	mov	r0, r3
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001358:	4a04      	ldr	r2, [pc, #16]	@ (800136c <MX_FREERTOS_Init+0x18>)
 800135a:	2100      	movs	r1, #0
 800135c:	4804      	ldr	r0, [pc, #16]	@ (8001370 <MX_FREERTOS_Init+0x1c>)
 800135e:	f006 fc4b 	bl	8007bf8 <osThreadNew>
 8001362:	4603      	mov	r3, r0
 8001364:	4a03      	ldr	r2, [pc, #12]	@ (8001374 <MX_FREERTOS_Init+0x20>)
 8001366:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}
 800136c:	08018708 	.word	0x08018708
 8001370:	08001379 	.word	0x08001379
 8001374:	20000188 	.word	0x20000188

08001378 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001378:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800137c:	b0ec      	sub	sp, #432	@ 0x1b0
 800137e:	af02      	add	r7, sp, #8
 8001380:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001384:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001388:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */

  // micro-ROS configuration
  rmw_uros_set_custom_transport(
 800138a:	4b5d      	ldr	r3, [pc, #372]	@ (8001500 <StartDefaultTask+0x188>)
 800138c:	9301      	str	r3, [sp, #4]
 800138e:	4b5d      	ldr	r3, [pc, #372]	@ (8001504 <StartDefaultTask+0x18c>)
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	4b5d      	ldr	r3, [pc, #372]	@ (8001508 <StartDefaultTask+0x190>)
 8001394:	4a5d      	ldr	r2, [pc, #372]	@ (800150c <StartDefaultTask+0x194>)
 8001396:	495e      	ldr	r1, [pc, #376]	@ (8001510 <StartDefaultTask+0x198>)
 8001398:	2001      	movs	r0, #1
 800139a:	f00b fde1 	bl	800cf60 <rmw_uros_set_custom_transport>
	cubemx_transport_open,
	cubemx_transport_close,
	cubemx_transport_write,
	cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 800139e:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 80013a2:	4618      	mov	r0, r3
 80013a4:	f00b fcf8 	bl	800cd98 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 80013a8:	4b5a      	ldr	r3, [pc, #360]	@ (8001514 <StartDefaultTask+0x19c>)
 80013aa:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
  freeRTOS_allocator.deallocate = microros_deallocate;
 80013ae:	4b5a      	ldr	r3, [pc, #360]	@ (8001518 <StartDefaultTask+0x1a0>)
 80013b0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
  freeRTOS_allocator.reallocate = microros_reallocate;
 80013b4:	4b59      	ldr	r3, [pc, #356]	@ (800151c <StartDefaultTask+0x1a4>)
 80013b6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80013ba:	4b59      	ldr	r3, [pc, #356]	@ (8001520 <StartDefaultTask+0x1a8>)
 80013bc:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80013c0:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 80013c4:	4618      	mov	r0, r3
 80013c6:	f00b fcf5 	bl	800cdb4 <rcutils_set_default_allocator>
 80013ca:	4603      	mov	r3, r0
 80013cc:	f083 0301 	eor.w	r3, r3, #1
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <StartDefaultTask+0x66>
	  printf("Error on default allocators (line %d)\n", __LINE__);
 80013d6:	21ab      	movs	r1, #171	@ 0xab
 80013d8:	4852      	ldr	r0, [pc, #328]	@ (8001524 <StartDefaultTask+0x1ac>)
 80013da:	f016 f8ab 	bl	8017534 <iprintf>
  rclc_support_t support;
  rclc_executor_t executor;
  rcl_allocator_t allocator;
  rcl_init_options_t init_options;

  const unsigned int timer_period = RCL_MS_TO_NS(1);
 80013de:	4b52      	ldr	r3, [pc, #328]	@ (8001528 <StartDefaultTask+0x1b0>)
 80013e0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
  const int timeout_ms = 5000;
 80013e4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80013e8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
  int executor_num = 1;
 80013ec:	2301      	movs	r3, #1
 80013ee:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c

  const rosidl_message_type_support_t * amt_type_support =
  	  ROSIDL_GET_MSG_TYPE_SUPPORT(amt212ev_interfaces, msg, AmtRead);
 80013f2:	f009 f961 	bl	800a6b8 <rosidl_typesupport_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead>
 80013f6:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198

  allocator = rcl_get_default_allocator();
 80013fa:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80013fe:	4618      	mov	r0, r3
 8001400:	f00b fcf6 	bl	800cdf0 <rcutils_get_default_allocator>
 8001404:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001408:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800140c:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 8001410:	461d      	mov	r5, r3
 8001412:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001414:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001416:	682b      	ldr	r3, [r5, #0]
 8001418:	6023      	str	r3, [r4, #0]

  executor = rclc_executor_get_zero_initialized_executor();
 800141a:	463b      	mov	r3, r7
 800141c:	4618      	mov	r0, r3
 800141e:	f00b f90b 	bl	800c638 <rclc_executor_get_zero_initialized_executor>
 8001422:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001426:	f5a3 72d4 	sub.w	r2, r3, #424	@ 0x1a8
 800142a:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800142e:	4611      	mov	r1, r2
 8001430:	2288      	movs	r2, #136	@ 0x88
 8001432:	4618      	mov	r0, r3
 8001434:	f016 fa33 	bl	801789e <memcpy>

  init_options = rcl_get_zero_initialized_init_options();
 8001438:	f00a fba0 	bl	800bb7c <rcl_get_zero_initialized_init_options>
 800143c:	4602      	mov	r2, r0
 800143e:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001442:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001446:	601a      	str	r2, [r3, #0]

  RCSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 8001448:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 800144c:	466a      	mov	r2, sp
 800144e:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001452:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001456:	e882 0003 	stmia.w	r2, {r0, r1}
 800145a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800145e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001460:	4620      	mov	r0, r4
 8001462:	f00a fb8d 	bl	800bb80 <rcl_init_options_init>
  RCSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 198));
 8001466:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800146a:	21c6      	movs	r1, #198	@ 0xc6
 800146c:	4618      	mov	r0, r3
 800146e:	f00a fc83 	bl	800bd78 <rcl_init_options_set_domain_id>

  // create support init_options
  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8001472:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8001476:	f507 70a6 	add.w	r0, r7, #332	@ 0x14c
 800147a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	4613      	mov	r3, r2
 8001482:	2200      	movs	r2, #0
 8001484:	2100      	movs	r1, #0
 8001486:	f00b fbab 	bl	800cbe0 <rclc_support_init_with_options>

  // create timer
  rclc_timer_init_default(&AMT_timer, &support, timer_period, timer_callback);
 800148a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800148e:	2200      	movs	r2, #0
 8001490:	4698      	mov	r8, r3
 8001492:	4691      	mov	r9, r2
 8001494:	f507 71a6 	add.w	r1, r7, #332	@ 0x14c
 8001498:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 800149c:	4b23      	ldr	r3, [pc, #140]	@ (800152c <StartDefaultTask+0x1b4>)
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	4642      	mov	r2, r8
 80014a2:	464b      	mov	r3, r9
 80014a4:	f00b fc40 	bl	800cd28 <rclc_timer_init_default>

  // create node
  rclc_node_init_default(&node, "uros_AMT_Node", "", &support);
 80014a8:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 80014ac:	4a20      	ldr	r2, [pc, #128]	@ (8001530 <StartDefaultTask+0x1b8>)
 80014ae:	4921      	ldr	r1, [pc, #132]	@ (8001534 <StartDefaultTask+0x1bc>)
 80014b0:	4821      	ldr	r0, [pc, #132]	@ (8001538 <StartDefaultTask+0x1c0>)
 80014b2:	f00b fbc9 	bl	800cc48 <rclc_node_init_default>

  // create publisher
  rclc_publisher_init_default(&amt_publisher, &node, amt_type_support, "amt_publisher");
 80014b6:	4b21      	ldr	r3, [pc, #132]	@ (800153c <StartDefaultTask+0x1c4>)
 80014b8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80014bc:	491e      	ldr	r1, [pc, #120]	@ (8001538 <StartDefaultTask+0x1c0>)
 80014be:	4820      	ldr	r0, [pc, #128]	@ (8001540 <StartDefaultTask+0x1c8>)
 80014c0:	f00b fbfe 	bl	800ccc0 <rclc_publisher_init_default>
  // create service server

  // create service client

  // create executor
  rclc_executor_init(&executor, &support.context, executor_num, &allocator);
 80014c4:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80014c8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80014cc:	f507 71a6 	add.w	r1, r7, #332	@ 0x14c
 80014d0:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 80014d4:	f00b f8bc 	bl	800c650 <rclc_executor_init>

  rclc_executor_add_timer(&executor, &AMT_timer);
 80014d8:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80014dc:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80014e0:	4611      	mov	r1, r2
 80014e2:	4618      	mov	r0, r3
 80014e4:	f00b f924 	bl	800c730 <rclc_executor_add_timer>

  rclc_executor_spin(&executor);
 80014e8:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f00b fb35 	bl	800cb5c <rclc_executor_spin>
  rmw_uros_sync_session(timeout_ms);
 80014f2:	f8d7 01a0 	ldr.w	r0, [r7, #416]	@ 0x1a0
 80014f6:	f00c fb2b 	bl	800db50 <rmw_uros_sync_session>

  for(;;)
 80014fa:	bf00      	nop
 80014fc:	e7fd      	b.n	80014fa <StartDefaultTask+0x182>
 80014fe:	bf00      	nop
 8001500:	08002b55 	.word	0x08002b55
 8001504:	08002af1 	.word	0x08002af1
 8001508:	08002ad1 	.word	0x08002ad1
 800150c:	08002aa5 	.word	0x08002aa5
 8001510:	20003e28 	.word	0x20003e28
 8001514:	08001d55 	.word	0x08001d55
 8001518:	08001d99 	.word	0x08001d99
 800151c:	08001dd1 	.word	0x08001dd1
 8001520:	08001e3d 	.word	0x08001e3d
 8001524:	0801866c 	.word	0x0801866c
 8001528:	000f4240 	.word	0x000f4240
 800152c:	08001549 	.word	0x08001549
 8001530:	08018694 	.word	0x08018694
 8001534:	08018698 	.word	0x08018698
 8001538:	2000016c 	.word	0x2000016c
 800153c:	080186a8 	.word	0x080186a8
 8001540:	20000174 	.word	0x20000174
 8001544:	00000000 	.word	0x00000000

08001548 <timer_callback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	e9c7 2300 	strd	r2, r3, [r7]

	if (timer != NULL)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d008      	beq.n	800156c <timer_callback+0x24>
	{
		amt_publish(1.0,1.0);
 800155a:	ed9f 1b07 	vldr	d1, [pc, #28]	@ 8001578 <timer_callback+0x30>
 800155e:	ed9f 0b06 	vldr	d0, [pc, #24]	@ 8001578 <timer_callback+0x30>
 8001562:	f000 f80f 	bl	8001584 <amt_publish>
		HAL_IWDG_Refresh(&hiwdg);
 8001566:	4806      	ldr	r0, [pc, #24]	@ (8001580 <timer_callback+0x38>)
 8001568:	f002 f9d2 	bl	8003910 <HAL_IWDG_Refresh>
	}
}
 800156c:	bf00      	nop
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	f3af 8000 	nop.w
 8001578:	00000000 	.word	0x00000000
 800157c:	3ff00000 	.word	0x3ff00000
 8001580:	20003ce0 	.word	0x20003ce0

08001584 <amt_publish>:

void amt_publish(double rads, double radps)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	ed87 0b02 	vstr	d0, [r7, #8]
 800158e:	ed87 1b00 	vstr	d1, [r7]
	amt_msg.rads = rads;
 8001592:	490d      	ldr	r1, [pc, #52]	@ (80015c8 <amt_publish+0x44>)
 8001594:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001598:	e9c1 2300 	strd	r2, r3, [r1]
	amt_msg.radps = radps;
 800159c:	490a      	ldr	r1, [pc, #40]	@ (80015c8 <amt_publish+0x44>)
 800159e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015a2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	rcl_ret_t ret = rcl_publish(&amt_publisher, &amt_msg, NULL);
 80015a6:	2200      	movs	r2, #0
 80015a8:	4907      	ldr	r1, [pc, #28]	@ (80015c8 <amt_publish+0x44>)
 80015aa:	4808      	ldr	r0, [pc, #32]	@ (80015cc <amt_publish+0x48>)
 80015ac:	f00a fcb6 	bl	800bf1c <rcl_publish>
 80015b0:	6178      	str	r0, [r7, #20]
	if (ret != RCL_RET_OK) printf("Error publishing (line %d)\n", __LINE__);
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <amt_publish+0x3c>
 80015b8:	21f7      	movs	r1, #247	@ 0xf7
 80015ba:	4805      	ldr	r0, [pc, #20]	@ (80015d0 <amt_publish+0x4c>)
 80015bc:	f015 ffba 	bl	8017534 <iprintf>
}
 80015c0:	bf00      	nop
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000178 	.word	0x20000178
 80015cc:	20000174 	.word	0x20000174
 80015d0:	080186b8 	.word	0x080186b8

080015d4 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	@ 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80015e0:	f007 fbde 	bl	8008da0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80015e4:	4b5a      	ldr	r3, [pc, #360]	@ (8001750 <pvPortMallocMicroROS+0x17c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80015ec:	f000 f986 	bl	80018fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80015f0:	4b58      	ldr	r3, [pc, #352]	@ (8001754 <pvPortMallocMicroROS+0x180>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4013      	ands	r3, r2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f040 8090 	bne.w	800171e <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d01e      	beq.n	8001642 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8001604:	2208      	movs	r2, #8
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	2b00      	cmp	r3, #0
 8001614:	d015      	beq.n	8001642 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f023 0307 	bic.w	r3, r3, #7
 800161c:	3308      	adds	r3, #8
 800161e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00b      	beq.n	8001642 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800162a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800162e:	f383 8811 	msr	BASEPRI, r3
 8001632:	f3bf 8f6f 	isb	sy
 8001636:	f3bf 8f4f 	dsb	sy
 800163a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800163c:	bf00      	nop
 800163e:	bf00      	nop
 8001640:	e7fd      	b.n	800163e <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d06a      	beq.n	800171e <pvPortMallocMicroROS+0x14a>
 8001648:	4b43      	ldr	r3, [pc, #268]	@ (8001758 <pvPortMallocMicroROS+0x184>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	429a      	cmp	r2, r3
 8001650:	d865      	bhi.n	800171e <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001652:	4b42      	ldr	r3, [pc, #264]	@ (800175c <pvPortMallocMicroROS+0x188>)
 8001654:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001656:	4b41      	ldr	r3, [pc, #260]	@ (800175c <pvPortMallocMicroROS+0x188>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800165c:	e004      	b.n	8001668 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 800165e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001660:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	429a      	cmp	r2, r3
 8001670:	d903      	bls.n	800167a <pvPortMallocMicroROS+0xa6>
 8001672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1f1      	bne.n	800165e <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800167a:	4b35      	ldr	r3, [pc, #212]	@ (8001750 <pvPortMallocMicroROS+0x17c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001680:	429a      	cmp	r2, r3
 8001682:	d04c      	beq.n	800171e <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001684:	6a3b      	ldr	r3, [r7, #32]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2208      	movs	r2, #8
 800168a:	4413      	add	r3, r2
 800168c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800168e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	6a3b      	ldr	r3, [r7, #32]
 8001694:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	1ad2      	subs	r2, r2, r3
 800169e:	2308      	movs	r3, #8
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d920      	bls.n	80016e8 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80016a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4413      	add	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00b      	beq.n	80016d0 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80016b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016bc:	f383 8811 	msr	BASEPRI, r3
 80016c0:	f3bf 8f6f 	isb	sy
 80016c4:	f3bf 8f4f 	dsb	sy
 80016c8:	613b      	str	r3, [r7, #16]
}
 80016ca:	bf00      	nop
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80016d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	1ad2      	subs	r2, r2, r3
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80016dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80016e2:	69b8      	ldr	r0, [r7, #24]
 80016e4:	f000 f96c 	bl	80019c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80016e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001758 <pvPortMallocMicroROS+0x184>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	4a19      	ldr	r2, [pc, #100]	@ (8001758 <pvPortMallocMicroROS+0x184>)
 80016f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80016f6:	4b18      	ldr	r3, [pc, #96]	@ (8001758 <pvPortMallocMicroROS+0x184>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <pvPortMallocMicroROS+0x18c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d203      	bcs.n	800170a <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001702:	4b15      	ldr	r3, [pc, #84]	@ (8001758 <pvPortMallocMicroROS+0x184>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a16      	ldr	r2, [pc, #88]	@ (8001760 <pvPortMallocMicroROS+0x18c>)
 8001708:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <pvPortMallocMicroROS+0x180>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	431a      	orrs	r2, r3
 8001714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001716:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800171e:	f007 fb4d 	bl	8008dbc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	2b00      	cmp	r3, #0
 800172a:	d00b      	beq.n	8001744 <pvPortMallocMicroROS+0x170>
	__asm volatile
 800172c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001730:	f383 8811 	msr	BASEPRI, r3
 8001734:	f3bf 8f6f 	isb	sy
 8001738:	f3bf 8f4f 	dsb	sy
 800173c:	60fb      	str	r3, [r7, #12]
}
 800173e:	bf00      	nop
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001744:	69fb      	ldr	r3, [r7, #28]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3728      	adds	r7, #40	@ 0x28
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20003cd0 	.word	0x20003cd0
 8001754:	20003cdc 	.word	0x20003cdc
 8001758:	20003cd4 	.word	0x20003cd4
 800175c:	20003cc8 	.word	0x20003cc8
 8001760:	20003cd8 	.word	0x20003cd8

08001764 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d04a      	beq.n	800180c <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001776:	2308      	movs	r3, #8
 8001778:	425b      	negs	r3, r3
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	4413      	add	r3, r2
 800177e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	4b22      	ldr	r3, [pc, #136]	@ (8001814 <vPortFreeMicroROS+0xb0>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4013      	ands	r3, r2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10b      	bne.n	80017aa <vPortFreeMicroROS+0x46>
	__asm volatile
 8001792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001796:	f383 8811 	msr	BASEPRI, r3
 800179a:	f3bf 8f6f 	isb	sy
 800179e:	f3bf 8f4f 	dsb	sy
 80017a2:	60fb      	str	r3, [r7, #12]
}
 80017a4:	bf00      	nop
 80017a6:	bf00      	nop
 80017a8:	e7fd      	b.n	80017a6 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d00b      	beq.n	80017ca <vPortFreeMicroROS+0x66>
	__asm volatile
 80017b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017b6:	f383 8811 	msr	BASEPRI, r3
 80017ba:	f3bf 8f6f 	isb	sy
 80017be:	f3bf 8f4f 	dsb	sy
 80017c2:	60bb      	str	r3, [r7, #8]
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	e7fd      	b.n	80017c6 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <vPortFreeMicroROS+0xb0>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4013      	ands	r3, r2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d019      	beq.n	800180c <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d115      	bne.n	800180c <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <vPortFreeMicroROS+0xb0>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	43db      	mvns	r3, r3
 80017ea:	401a      	ands	r2, r3
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80017f0:	f007 fad6 	bl	8008da0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	4b07      	ldr	r3, [pc, #28]	@ (8001818 <vPortFreeMicroROS+0xb4>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4413      	add	r3, r2
 80017fe:	4a06      	ldr	r2, [pc, #24]	@ (8001818 <vPortFreeMicroROS+0xb4>)
 8001800:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001802:	6938      	ldr	r0, [r7, #16]
 8001804:	f000 f8dc 	bl	80019c0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001808:	f007 fad8 	bl	8008dbc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800180c:	bf00      	nop
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20003cdc 	.word	0x20003cdc
 8001818:	20003cd4 	.word	0x20003cd4

0800181c <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 800181c:	b480      	push	{r7}
 800181e:	b087      	sub	sp, #28
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001828:	2308      	movs	r3, #8
 800182a:	425b      	negs	r3, r3
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	4413      	add	r3, r2
 8001830:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <getBlockSize+0x38>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	43db      	mvns	r3, r3
 8001840:	4013      	ands	r3, r2
 8001842:	60fb      	str	r3, [r7, #12]

	return count;
 8001844:	68fb      	ldr	r3, [r7, #12]
}
 8001846:	4618      	mov	r0, r3
 8001848:	371c      	adds	r7, #28
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20003cdc 	.word	0x20003cdc

08001858 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001862:	f007 fa9d 	bl	8008da0 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001866:	6838      	ldr	r0, [r7, #0]
 8001868:	f7ff feb4 	bl	80015d4 <pvPortMallocMicroROS>
 800186c:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d017      	beq.n	80018a4 <pvPortReallocMicroROS+0x4c>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d014      	beq.n	80018a4 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff ffce 	bl	800181c <getBlockSize>
 8001880:	4603      	mov	r3, r0
 8001882:	2208      	movs	r2, #8
 8001884:	1a9b      	subs	r3, r3, r2
 8001886:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	429a      	cmp	r2, r3
 800188e:	d201      	bcs.n	8001894 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	68b8      	ldr	r0, [r7, #8]
 800189a:	f016 f800 	bl	801789e <memcpy>

		vPortFreeMicroROS(pv);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ff60 	bl	8001764 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80018a4:	f007 fa8a 	bl	8008dbc <xTaskResumeAll>

	return newmem;
 80018a8:	68bb      	ldr	r3, [r7, #8]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b086      	sub	sp, #24
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80018bc:	f007 fa70 	bl	8008da0 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	fb02 f303 	mul.w	r3, r2, r3
 80018c8:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80018ca:	6978      	ldr	r0, [r7, #20]
 80018cc:	f7ff fe82 	bl	80015d4 <pvPortMallocMicroROS>
 80018d0:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	613b      	str	r3, [r7, #16]

  	while(count--)
 80018d6:	e004      	b.n	80018e2 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1c5a      	adds	r2, r3, #1
 80018dc:	613a      	str	r2, [r7, #16]
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	1e5a      	subs	r2, r3, #1
 80018e6:	617a      	str	r2, [r7, #20]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1f5      	bne.n	80018d8 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80018ec:	f007 fa66 	bl	8008dbc <xTaskResumeAll>
  	return mem;
 80018f0:	68fb      	ldr	r3, [r7, #12]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001902:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001906:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001908:	4b27      	ldr	r3, [pc, #156]	@ (80019a8 <prvHeapInit+0xac>)
 800190a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00c      	beq.n	8001930 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	3307      	adds	r3, #7
 800191a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f023 0307 	bic.w	r3, r3, #7
 8001922:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	4a1f      	ldr	r2, [pc, #124]	@ (80019a8 <prvHeapInit+0xac>)
 800192c:	4413      	add	r3, r2
 800192e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001934:	4a1d      	ldr	r2, [pc, #116]	@ (80019ac <prvHeapInit+0xb0>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800193a:	4b1c      	ldr	r3, [pc, #112]	@ (80019ac <prvHeapInit+0xb0>)
 800193c:	2200      	movs	r2, #0
 800193e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	4413      	add	r3, r2
 8001946:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001948:	2208      	movs	r2, #8
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	1a9b      	subs	r3, r3, r2
 800194e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f023 0307 	bic.w	r3, r3, #7
 8001956:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4a15      	ldr	r2, [pc, #84]	@ (80019b0 <prvHeapInit+0xb4>)
 800195c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800195e:	4b14      	ldr	r3, [pc, #80]	@ (80019b0 <prvHeapInit+0xb4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2200      	movs	r2, #0
 8001964:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001966:	4b12      	ldr	r3, [pc, #72]	@ (80019b0 <prvHeapInit+0xb4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	1ad2      	subs	r2, r2, r3
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800197c:	4b0c      	ldr	r3, [pc, #48]	@ (80019b0 <prvHeapInit+0xb4>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	4a0a      	ldr	r2, [pc, #40]	@ (80019b4 <prvHeapInit+0xb8>)
 800198a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	4a09      	ldr	r2, [pc, #36]	@ (80019b8 <prvHeapInit+0xbc>)
 8001992:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001994:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <prvHeapInit+0xc0>)
 8001996:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800199a:	601a      	str	r2, [r3, #0]
}
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	200030c8 	.word	0x200030c8
 80019ac:	20003cc8 	.word	0x20003cc8
 80019b0:	20003cd0 	.word	0x20003cd0
 80019b4:	20003cd8 	.word	0x20003cd8
 80019b8:	20003cd4 	.word	0x20003cd4
 80019bc:	20003cdc 	.word	0x20003cdc

080019c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80019c8:	4b28      	ldr	r3, [pc, #160]	@ (8001a6c <prvInsertBlockIntoFreeList+0xac>)
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	e002      	b.n	80019d4 <prvInsertBlockIntoFreeList+0x14>
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d8f7      	bhi.n	80019ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	4413      	add	r3, r2
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d108      	bne.n	8001a02 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	441a      	add	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	441a      	add	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d118      	bne.n	8001a48 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <prvInsertBlockIntoFreeList+0xb0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d00d      	beq.n	8001a3e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	441a      	add	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	e008      	b.n	8001a50 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a70 <prvInsertBlockIntoFreeList+0xb0>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	e003      	b.n	8001a50 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d002      	beq.n	8001a5e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001a5e:	bf00      	nop
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	20003cc8 	.word	0x20003cc8
 8001a70:	20003cd0 	.word	0x20003cd0

08001a74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001a7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001af4 <MX_DMA_Init+0x80>)
 8001a7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a7e:	4a1d      	ldr	r2, [pc, #116]	@ (8001af4 <MX_DMA_Init+0x80>)
 8001a80:	f043 0304 	orr.w	r3, r3, #4
 8001a84:	6493      	str	r3, [r2, #72]	@ 0x48
 8001a86:	4b1b      	ldr	r3, [pc, #108]	@ (8001af4 <MX_DMA_Init+0x80>)
 8001a88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a8a:	f003 0304 	and.w	r3, r3, #4
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a92:	4b18      	ldr	r3, [pc, #96]	@ (8001af4 <MX_DMA_Init+0x80>)
 8001a94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a96:	4a17      	ldr	r2, [pc, #92]	@ (8001af4 <MX_DMA_Init+0x80>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6493      	str	r3, [r2, #72]	@ 0x48
 8001a9e:	4b15      	ldr	r3, [pc, #84]	@ (8001af4 <MX_DMA_Init+0x80>)
 8001aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	603b      	str	r3, [r7, #0]
 8001aa8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2105      	movs	r1, #5
 8001aae:	200b      	movs	r0, #11
 8001ab0:	f001 f9bc 	bl	8002e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ab4:	200b      	movs	r0, #11
 8001ab6:	f001 f9d3 	bl	8002e60 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2105      	movs	r1, #5
 8001abe:	200c      	movs	r0, #12
 8001ac0:	f001 f9b4 	bl	8002e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001ac4:	200c      	movs	r0, #12
 8001ac6:	f001 f9cb 	bl	8002e60 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2105      	movs	r1, #5
 8001ace:	200d      	movs	r0, #13
 8001ad0:	f001 f9ac 	bl	8002e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001ad4:	200d      	movs	r0, #13
 8001ad6:	f001 f9c3 	bl	8002e60 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2105      	movs	r1, #5
 8001ade:	200e      	movs	r0, #14
 8001ae0:	f001 f9a4 	bl	8002e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001ae4:	200e      	movs	r0, #14
 8001ae6:	f001 f9bb 	bl	8002e60 <HAL_NVIC_EnableIRQ>

}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40021000 	.word	0x40021000

08001af8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	@ 0x28
 8001afc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afe:	f107 0314 	add.w	r3, r7, #20
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	60da      	str	r2, [r3, #12]
 8001b0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b0e:	4b2f      	ldr	r3, [pc, #188]	@ (8001bcc <MX_GPIO_Init+0xd4>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b12:	4a2e      	ldr	r2, [pc, #184]	@ (8001bcc <MX_GPIO_Init+0xd4>)
 8001b14:	f043 0304 	orr.w	r3, r3, #4
 8001b18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b1a:	4b2c      	ldr	r3, [pc, #176]	@ (8001bcc <MX_GPIO_Init+0xd4>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1e:	f003 0304 	and.w	r3, r3, #4
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b26:	4b29      	ldr	r3, [pc, #164]	@ (8001bcc <MX_GPIO_Init+0xd4>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2a:	4a28      	ldr	r2, [pc, #160]	@ (8001bcc <MX_GPIO_Init+0xd4>)
 8001b2c:	f043 0320 	orr.w	r3, r3, #32
 8001b30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b32:	4b26      	ldr	r3, [pc, #152]	@ (8001bcc <MX_GPIO_Init+0xd4>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b36:	f003 0320 	and.w	r3, r3, #32
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3e:	4b23      	ldr	r3, [pc, #140]	@ (8001bcc <MX_GPIO_Init+0xd4>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b42:	4a22      	ldr	r2, [pc, #136]	@ (8001bcc <MX_GPIO_Init+0xd4>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b4a:	4b20      	ldr	r3, [pc, #128]	@ (8001bcc <MX_GPIO_Init+0xd4>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b56:	4b1d      	ldr	r3, [pc, #116]	@ (8001bcc <MX_GPIO_Init+0xd4>)
 8001b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5a:	4a1c      	ldr	r2, [pc, #112]	@ (8001bcc <MX_GPIO_Init+0xd4>)
 8001b5c:	f043 0302 	orr.w	r3, r3, #2
 8001b60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b62:	4b1a      	ldr	r3, [pc, #104]	@ (8001bcc <MX_GPIO_Init+0xd4>)
 8001b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	607b      	str	r3, [r7, #4]
 8001b6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2120      	movs	r1, #32
 8001b72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b76:	f001 fe41 	bl	80037fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b80:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	4619      	mov	r1, r3
 8001b90:	480f      	ldr	r0, [pc, #60]	@ (8001bd0 <MX_GPIO_Init+0xd8>)
 8001b92:	f001 fcb1 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b96:	2320      	movs	r3, #32
 8001b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	4619      	mov	r1, r3
 8001bac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bb0:	f001 fca2 	bl	80034f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2105      	movs	r1, #5
 8001bb8:	2028      	movs	r0, #40	@ 0x28
 8001bba:	f001 f937 	bl	8002e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bbe:	2028      	movs	r0, #40	@ 0x28
 8001bc0:	f001 f94e 	bl	8002e60 <HAL_NVIC_EnableIRQ>

}
 8001bc4:	bf00      	nop
 8001bc6:	3728      	adds	r7, #40	@ 0x28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	48000800 	.word	0x48000800

08001bd4 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c08 <MX_IWDG_Init+0x34>)
 8001bda:	4a0c      	ldr	r2, [pc, #48]	@ (8001c0c <MX_IWDG_Init+0x38>)
 8001bdc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8001bde:	4b0a      	ldr	r3, [pc, #40]	@ (8001c08 <MX_IWDG_Init+0x34>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8001be4:	4b08      	ldr	r3, [pc, #32]	@ (8001c08 <MX_IWDG_Init+0x34>)
 8001be6:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001bea:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 8001bec:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <MX_IWDG_Init+0x34>)
 8001bee:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001bf2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001bf4:	4804      	ldr	r0, [pc, #16]	@ (8001c08 <MX_IWDG_Init+0x34>)
 8001bf6:	f001 fe3c 	bl	8003872 <HAL_IWDG_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8001c00:	f000 f8a2 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20003ce0 	.word	0x20003ce0
 8001c0c:	40003000 	.word	0x40003000

08001c10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c14:	f001 f81b 	bl	8002c4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c18:	f000 f828 	bl	8001c6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c1c:	f7ff ff6c 	bl	8001af8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c20:	f7ff ff28 	bl	8001a74 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001c24:	f000 fd1c 	bl	8002660 <MX_LPUART1_UART_Init>
  MX_IWDG_Init();
 8001c28:	f7ff ffd4 	bl	8001bd4 <MX_IWDG_Init>
  MX_TIM2_Init();
 8001c2c:	f000 fbda 	bl	80023e4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001c30:	f000 fd60 	bl	80026f4 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001c34:	f000 fc24 	bl	8002480 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  AMT212EV_Init(&amt, &huart1, 1000, 16384);
 8001c38:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c3c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c40:	4907      	ldr	r1, [pc, #28]	@ (8001c60 <main+0x50>)
 8001c42:	4808      	ldr	r0, [pc, #32]	@ (8001c64 <main+0x54>)
 8001c44:	f7ff f93a 	bl	8000ebc <AMT212EV_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8001c48:	4807      	ldr	r0, [pc, #28]	@ (8001c68 <main+0x58>)
 8001c4a:	f002 ff2b 	bl	8004aa4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001c4e:	f005 ff89 	bl	8007b64 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001c52:	f7ff fb7f 	bl	8001354 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001c56:	f005 ffa9 	bl	8007bac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c5a:	bf00      	nop
 8001c5c:	e7fd      	b.n	8001c5a <main+0x4a>
 8001c5e:	bf00      	nop
 8001c60:	20003ebc 	.word	0x20003ebc
 8001c64:	20003cf0 	.word	0x20003cf0
 8001c68:	20003d90 	.word	0x20003d90

08001c6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b094      	sub	sp, #80	@ 0x50
 8001c70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c72:	f107 0318 	add.w	r3, r7, #24
 8001c76:	2238      	movs	r2, #56	@ 0x38
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f015 fd46 	bl	801770c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	60da      	str	r2, [r3, #12]
 8001c8c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f001 fe4e 	bl	8003930 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001c94:	2309      	movs	r3, #9
 8001c96:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c9c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001caa:	2306      	movs	r3, #6
 8001cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001cae:	2355      	movs	r3, #85	@ 0x55
 8001cb0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cbe:	f107 0318 	add.w	r3, r7, #24
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f001 fee8 	bl	8003a98 <HAL_RCC_OscConfig>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001cce:	f000 f83b 	bl	8001d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cd2:	230f      	movs	r3, #15
 8001cd4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ce6:	1d3b      	adds	r3, r7, #4
 8001ce8:	2104      	movs	r1, #4
 8001cea:	4618      	mov	r0, r3
 8001cec:	f002 f9e6 	bl	80040bc <HAL_RCC_ClockConfig>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001cf6:	f000 f827 	bl	8001d48 <Error_Handler>
  }
}
 8001cfa:	bf00      	nop
 8001cfc:	3750      	adds	r7, #80	@ 0x50
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a0b      	ldr	r2, [pc, #44]	@ (8001d40 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d101      	bne.n	8001d1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d16:	f000 ffb3 	bl	8002c80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2) {
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d22:	d108      	bne.n	8001d36 <HAL_TIM_PeriodElapsedCallback+0x32>
    AMT212EV_ReadPosition(&amt);
 8001d24:	4807      	ldr	r0, [pc, #28]	@ (8001d44 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001d26:	f7ff f92b 	bl	8000f80 <AMT212EV_ReadPosition>
    AMT212EV_DiffCount(&amt);
 8001d2a:	4806      	ldr	r0, [pc, #24]	@ (8001d44 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001d2c:	f7ff f97c 	bl	8001028 <AMT212EV_DiffCount>
    AMT212EV_Compute(&amt);
 8001d30:	4804      	ldr	r0, [pc, #16]	@ (8001d44 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001d32:	f7ff fa6d 	bl	8001210 <AMT212EV_Compute>
  }
  /* USER CODE END Callback 1 */
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40012c00 	.word	0x40012c00
 8001d44:	20003cf0 	.word	0x20003cf0

08001d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d4c:	b672      	cpsid	i
}
 8001d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <Error_Handler+0x8>

08001d54 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d90 <microros_allocate+0x3c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4413      	add	r3, r2
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4b09      	ldr	r3, [pc, #36]	@ (8001d90 <microros_allocate+0x3c>)
 8001d6c:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001d6e:	4b09      	ldr	r3, [pc, #36]	@ (8001d94 <microros_allocate+0x40>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	461a      	mov	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4413      	add	r3, r2
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4b06      	ldr	r3, [pc, #24]	@ (8001d94 <microros_allocate+0x40>)
 8001d7c:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff fc28 	bl	80015d4 <pvPortMallocMicroROS>
 8001d84:	4603      	mov	r3, r0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20003d34 	.word	0x20003d34
 8001d94:	20003d38 	.word	0x20003d38

08001d98 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00c      	beq.n	8001dc2 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7ff fd37 	bl	800181c <getBlockSize>
 8001dae:	4603      	mov	r3, r0
 8001db0:	4a06      	ldr	r2, [pc, #24]	@ (8001dcc <microros_deallocate+0x34>)
 8001db2:	6812      	ldr	r2, [r2, #0]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	461a      	mov	r2, r3
 8001db8:	4b04      	ldr	r3, [pc, #16]	@ (8001dcc <microros_deallocate+0x34>)
 8001dba:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff fcd1 	bl	8001764 <vPortFreeMicroROS>
  }
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20003d38 	.word	0x20003d38

08001dd0 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001ddc:	4b15      	ldr	r3, [pc, #84]	@ (8001e34 <microros_reallocate+0x64>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	461a      	mov	r2, r3
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	4413      	add	r3, r2
 8001de6:	461a      	mov	r2, r3
 8001de8:	4b12      	ldr	r3, [pc, #72]	@ (8001e34 <microros_reallocate+0x64>)
 8001dea:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001dec:	4b12      	ldr	r3, [pc, #72]	@ (8001e38 <microros_reallocate+0x68>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	461a      	mov	r2, r3
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	4413      	add	r3, r2
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e38 <microros_reallocate+0x68>)
 8001dfa:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d104      	bne.n	8001e0c <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001e02:	68b8      	ldr	r0, [r7, #8]
 8001e04:	f7ff fbe6 	bl	80015d4 <pvPortMallocMicroROS>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	e00e      	b.n	8001e2a <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f7ff fd05 	bl	800181c <getBlockSize>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4a08      	ldr	r2, [pc, #32]	@ (8001e38 <microros_reallocate+0x68>)
 8001e16:	6812      	ldr	r2, [r2, #0]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <microros_reallocate+0x68>)
 8001e1e:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f7ff fd18 	bl	8001858 <pvPortReallocMicroROS>
 8001e28:	4603      	mov	r3, r0
  }
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20003d34 	.word	0x20003d34
 8001e38:	20003d38 	.word	0x20003d38

08001e3c <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	fb02 f303 	mul.w	r3, r2, r3
 8001e50:	4a0c      	ldr	r2, [pc, #48]	@ (8001e84 <microros_zero_allocate+0x48>)
 8001e52:	6812      	ldr	r2, [r2, #0]
 8001e54:	4413      	add	r3, r2
 8001e56:	461a      	mov	r2, r3
 8001e58:	4b0a      	ldr	r3, [pc, #40]	@ (8001e84 <microros_zero_allocate+0x48>)
 8001e5a:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	fb02 f303 	mul.w	r3, r2, r3
 8001e64:	4a08      	ldr	r2, [pc, #32]	@ (8001e88 <microros_zero_allocate+0x4c>)
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	4413      	add	r3, r2
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <microros_zero_allocate+0x4c>)
 8001e6e:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f7ff fd1d 	bl	80018b2 <pvPortCallocMicroROS>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20003d34 	.word	0x20003d34
 8001e88:	20003d38 	.word	0x20003d38
 8001e8c:	00000000 	.word	0x00000000

08001e90 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001e90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e94:	b086      	sub	sp, #24
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001ea2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ea6:	a320      	add	r3, pc, #128	@ (adr r3, 8001f28 <UTILS_NanosecondsToTimespec+0x98>)
 8001ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eac:	f7fe fe3e 	bl	8000b2c <__aeabi_ldivmod>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001eba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ebe:	a31a      	add	r3, pc, #104	@ (adr r3, 8001f28 <UTILS_NanosecondsToTimespec+0x98>)
 8001ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec4:	f7fe fe32 	bl	8000b2c <__aeabi_ldivmod>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	da20      	bge.n	8001f16 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	4a11      	ldr	r2, [pc, #68]	@ (8001f20 <UTILS_NanosecondsToTimespec+0x90>)
 8001eda:	fb82 1203 	smull	r1, r2, r2, r3
 8001ede:	1712      	asrs	r2, r2, #28
 8001ee0:	17db      	asrs	r3, r3, #31
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eee:	6979      	ldr	r1, [r7, #20]
 8001ef0:	17c8      	asrs	r0, r1, #31
 8001ef2:	460c      	mov	r4, r1
 8001ef4:	4605      	mov	r5, r0
 8001ef6:	ebb2 0804 	subs.w	r8, r2, r4
 8001efa:	eb63 0905 	sbc.w	r9, r3, r5
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	4906      	ldr	r1, [pc, #24]	@ (8001f24 <UTILS_NanosecondsToTimespec+0x94>)
 8001f0c:	fb01 f303 	mul.w	r3, r1, r3
 8001f10:	441a      	add	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	609a      	str	r2, [r3, #8]
    }
}
 8001f16:	bf00      	nop
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f20:	44b82fa1 	.word	0x44b82fa1
 8001f24:	3b9aca00 	.word	0x3b9aca00
 8001f28:	3b9aca00 	.word	0x3b9aca00
 8001f2c:	00000000 	.word	0x00000000

08001f30 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f34:	b08e      	sub	sp, #56	@ 0x38
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6278      	str	r0, [r7, #36]	@ 0x24
 8001f3a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001f3c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001f40:	2300      	movs	r3, #0
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	f04f 0300 	mov.w	r3, #0
 8001f4e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001f52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f56:	4618      	mov	r0, r3
 8001f58:	f007 f9ac 	bl	80092b4 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f5e:	17da      	asrs	r2, r3, #31
 8001f60:	61bb      	str	r3, [r7, #24]
 8001f62:	61fa      	str	r2, [r7, #28]
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	69b9      	ldr	r1, [r7, #24]
 8001f6e:	000b      	movs	r3, r1
 8001f70:	2200      	movs	r2, #0
 8001f72:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f78:	2200      	movs	r2, #0
 8001f7a:	461c      	mov	r4, r3
 8001f7c:	4615      	mov	r5, r2
 8001f7e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001f82:	1911      	adds	r1, r2, r4
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	416b      	adcs	r3, r5
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001f8e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001f92:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	f04f 0400 	mov.w	r4, #0
 8001f9e:	f04f 0500 	mov.w	r5, #0
 8001fa2:	015d      	lsls	r5, r3, #5
 8001fa4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001fa8:	0154      	lsls	r4, r2, #5
 8001faa:	4622      	mov	r2, r4
 8001fac:	462b      	mov	r3, r5
 8001fae:	ebb2 0800 	subs.w	r8, r2, r0
 8001fb2:	eb63 0901 	sbc.w	r9, r3, r1
 8001fb6:	f04f 0200 	mov.w	r2, #0
 8001fba:	f04f 0300 	mov.w	r3, #0
 8001fbe:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001fc2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001fc6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001fca:	4690      	mov	r8, r2
 8001fcc:	4699      	mov	r9, r3
 8001fce:	eb18 0a00 	adds.w	sl, r8, r0
 8001fd2:	eb49 0b01 	adc.w	fp, r9, r1
 8001fd6:	f04f 0200 	mov.w	r2, #0
 8001fda:	f04f 0300 	mov.w	r3, #0
 8001fde:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001fe2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001fe6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001fea:	ebb2 040a 	subs.w	r4, r2, sl
 8001fee:	603c      	str	r4, [r7, #0]
 8001ff0:	eb63 030b 	sbc.w	r3, r3, fp
 8001ff4:	607b      	str	r3, [r7, #4]
 8001ff6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ffa:	4623      	mov	r3, r4
 8001ffc:	181b      	adds	r3, r3, r0
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	462b      	mov	r3, r5
 8002002:	eb41 0303 	adc.w	r3, r1, r3
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	6a3a      	ldr	r2, [r7, #32]
 800200a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800200e:	f7ff ff3f 	bl	8001e90 <UTILS_NanosecondsToTimespec>

    return 0;
 8002012:	2300      	movs	r3, #0
 8002014:	4618      	mov	r0, r3
 8002016:	3738      	adds	r7, #56	@ 0x38
 8002018:	46bd      	mov	sp, r7
 800201a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002020 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002026:	4b12      	ldr	r3, [pc, #72]	@ (8002070 <HAL_MspInit+0x50>)
 8002028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800202a:	4a11      	ldr	r2, [pc, #68]	@ (8002070 <HAL_MspInit+0x50>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	6613      	str	r3, [r2, #96]	@ 0x60
 8002032:	4b0f      	ldr	r3, [pc, #60]	@ (8002070 <HAL_MspInit+0x50>)
 8002034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	607b      	str	r3, [r7, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800203e:	4b0c      	ldr	r3, [pc, #48]	@ (8002070 <HAL_MspInit+0x50>)
 8002040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002042:	4a0b      	ldr	r2, [pc, #44]	@ (8002070 <HAL_MspInit+0x50>)
 8002044:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002048:	6593      	str	r3, [r2, #88]	@ 0x58
 800204a:	4b09      	ldr	r3, [pc, #36]	@ (8002070 <HAL_MspInit+0x50>)
 800204c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800204e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002056:	2200      	movs	r2, #0
 8002058:	210f      	movs	r1, #15
 800205a:	f06f 0001 	mvn.w	r0, #1
 800205e:	f000 fee5 	bl	8002e2c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002062:	f001 fd09 	bl	8003a78 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000

08002074 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08c      	sub	sp, #48	@ 0x30
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002084:	4b2c      	ldr	r3, [pc, #176]	@ (8002138 <HAL_InitTick+0xc4>)
 8002086:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002088:	4a2b      	ldr	r2, [pc, #172]	@ (8002138 <HAL_InitTick+0xc4>)
 800208a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800208e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002090:	4b29      	ldr	r3, [pc, #164]	@ (8002138 <HAL_InitTick+0xc4>)
 8002092:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002094:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800209c:	f107 020c 	add.w	r2, r7, #12
 80020a0:	f107 0310 	add.w	r3, r7, #16
 80020a4:	4611      	mov	r1, r2
 80020a6:	4618      	mov	r0, r3
 80020a8:	f002 f9de 	bl	8004468 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80020ac:	f002 f9c6 	bl	800443c <HAL_RCC_GetPCLK2Freq>
 80020b0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020b4:	4a21      	ldr	r2, [pc, #132]	@ (800213c <HAL_InitTick+0xc8>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	0c9b      	lsrs	r3, r3, #18
 80020bc:	3b01      	subs	r3, #1
 80020be:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80020c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002140 <HAL_InitTick+0xcc>)
 80020c2:	4a20      	ldr	r2, [pc, #128]	@ (8002144 <HAL_InitTick+0xd0>)
 80020c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80020c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002140 <HAL_InitTick+0xcc>)
 80020c8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80020cc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80020ce:	4a1c      	ldr	r2, [pc, #112]	@ (8002140 <HAL_InitTick+0xcc>)
 80020d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80020d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002140 <HAL_InitTick+0xcc>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020da:	4b19      	ldr	r3, [pc, #100]	@ (8002140 <HAL_InitTick+0xcc>)
 80020dc:	2200      	movs	r2, #0
 80020de:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80020e0:	4817      	ldr	r0, [pc, #92]	@ (8002140 <HAL_InitTick+0xcc>)
 80020e2:	f002 fc87 	bl	80049f4 <HAL_TIM_Base_Init>
 80020e6:	4603      	mov	r3, r0
 80020e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80020ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d11b      	bne.n	800212c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80020f4:	4812      	ldr	r0, [pc, #72]	@ (8002140 <HAL_InitTick+0xcc>)
 80020f6:	f002 fcd5 	bl	8004aa4 <HAL_TIM_Base_Start_IT>
 80020fa:	4603      	mov	r3, r0
 80020fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002100:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002104:	2b00      	cmp	r3, #0
 8002106:	d111      	bne.n	800212c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002108:	2019      	movs	r0, #25
 800210a:	f000 fea9 	bl	8002e60 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b0f      	cmp	r3, #15
 8002112:	d808      	bhi.n	8002126 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002114:	2200      	movs	r2, #0
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	2019      	movs	r0, #25
 800211a:	f000 fe87 	bl	8002e2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800211e:	4a0a      	ldr	r2, [pc, #40]	@ (8002148 <HAL_InitTick+0xd4>)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	e002      	b.n	800212c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800212c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002130:	4618      	mov	r0, r3
 8002132:	3730      	adds	r7, #48	@ 0x30
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40021000 	.word	0x40021000
 800213c:	431bde83 	.word	0x431bde83
 8002140:	20003d3c 	.word	0x20003d3c
 8002144:	40012c00 	.word	0x40012c00
 8002148:	20000008 	.word	0x20000008

0800214c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002150:	bf00      	nop
 8002152:	e7fd      	b.n	8002150 <NMI_Handler+0x4>

08002154 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002158:	bf00      	nop
 800215a:	e7fd      	b.n	8002158 <HardFault_Handler+0x4>

0800215c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002160:	bf00      	nop
 8002162:	e7fd      	b.n	8002160 <MemManage_Handler+0x4>

08002164 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002168:	bf00      	nop
 800216a:	e7fd      	b.n	8002168 <BusFault_Handler+0x4>

0800216c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002170:	bf00      	nop
 8002172:	e7fd      	b.n	8002170 <UsageFault_Handler+0x4>

08002174 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002188:	4802      	ldr	r0, [pc, #8]	@ (8002194 <DMA1_Channel1_IRQHandler+0x10>)
 800218a:	f001 f85a 	bl	8003242 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20003f50 	.word	0x20003f50

08002198 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800219c:	4802      	ldr	r0, [pc, #8]	@ (80021a8 <DMA1_Channel2_IRQHandler+0x10>)
 800219e:	f001 f850 	bl	8003242 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20003fb0 	.word	0x20003fb0

080021ac <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80021b0:	4802      	ldr	r0, [pc, #8]	@ (80021bc <DMA1_Channel3_IRQHandler+0x10>)
 80021b2:	f001 f846 	bl	8003242 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20004010 	.word	0x20004010

080021c0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80021c4:	4802      	ldr	r0, [pc, #8]	@ (80021d0 <DMA1_Channel4_IRQHandler+0x10>)
 80021c6:	f001 f83c 	bl	8003242 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20004070 	.word	0x20004070

080021d4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021d8:	4802      	ldr	r0, [pc, #8]	@ (80021e4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80021da:	f002 fd3c 	bl	8004c56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20003d3c 	.word	0x20003d3c

080021e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021ec:	4802      	ldr	r0, [pc, #8]	@ (80021f8 <TIM2_IRQHandler+0x10>)
 80021ee:	f002 fd32 	bl	8004c56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20003d90 	.word	0x20003d90

080021fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002200:	4802      	ldr	r0, [pc, #8]	@ (800220c <USART1_IRQHandler+0x10>)
 8002202:	f003 ffd1 	bl	80061a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20003ebc 	.word	0x20003ebc

08002210 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002214:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002218:	f001 fb08 	bl	800382c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800221c:	bf00      	nop
 800221e:	bd80      	pop	{r7, pc}

08002220 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002224:	4802      	ldr	r0, [pc, #8]	@ (8002230 <LPUART1_IRQHandler+0x10>)
 8002226:	f003 ffbf 	bl	80061a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20003e28 	.word	0x20003e28

08002234 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return 1;
 8002238:	2301      	movs	r3, #1
}
 800223a:	4618      	mov	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <_kill>:

int _kill(int pid, int sig)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800224e:	f015 faf1 	bl	8017834 <__errno>
 8002252:	4603      	mov	r3, r0
 8002254:	2216      	movs	r2, #22
 8002256:	601a      	str	r2, [r3, #0]
  return -1;
 8002258:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <_exit>:

void _exit (int status)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800226c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7ff ffe7 	bl	8002244 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002276:	bf00      	nop
 8002278:	e7fd      	b.n	8002276 <_exit+0x12>

0800227a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b086      	sub	sp, #24
 800227e:	af00      	add	r7, sp, #0
 8002280:	60f8      	str	r0, [r7, #12]
 8002282:	60b9      	str	r1, [r7, #8]
 8002284:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	e00a      	b.n	80022a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800228c:	f3af 8000 	nop.w
 8002290:	4601      	mov	r1, r0
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	1c5a      	adds	r2, r3, #1
 8002296:	60ba      	str	r2, [r7, #8]
 8002298:	b2ca      	uxtb	r2, r1
 800229a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	3301      	adds	r3, #1
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	dbf0      	blt.n	800228c <_read+0x12>
  }

  return len;
 80022aa:	687b      	ldr	r3, [r7, #4]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	e009      	b.n	80022da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	60ba      	str	r2, [r7, #8]
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	3301      	adds	r3, #1
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	429a      	cmp	r2, r3
 80022e0:	dbf1      	blt.n	80022c6 <_write+0x12>
  }
  return len;
 80022e2:	687b      	ldr	r3, [r7, #4]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <_close>:

int _close(int file)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002314:	605a      	str	r2, [r3, #4]
  return 0;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <_isatty>:

int _isatty(int file)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800232c:	2301      	movs	r3, #1
}
 800232e:	4618      	mov	r0, r3
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800233a:	b480      	push	{r7}
 800233c:	b085      	sub	sp, #20
 800233e:	af00      	add	r7, sp, #0
 8002340:	60f8      	str	r0, [r7, #12]
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800235c:	4a14      	ldr	r2, [pc, #80]	@ (80023b0 <_sbrk+0x5c>)
 800235e:	4b15      	ldr	r3, [pc, #84]	@ (80023b4 <_sbrk+0x60>)
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002368:	4b13      	ldr	r3, [pc, #76]	@ (80023b8 <_sbrk+0x64>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d102      	bne.n	8002376 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002370:	4b11      	ldr	r3, [pc, #68]	@ (80023b8 <_sbrk+0x64>)
 8002372:	4a12      	ldr	r2, [pc, #72]	@ (80023bc <_sbrk+0x68>)
 8002374:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002376:	4b10      	ldr	r3, [pc, #64]	@ (80023b8 <_sbrk+0x64>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4413      	add	r3, r2
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	429a      	cmp	r2, r3
 8002382:	d207      	bcs.n	8002394 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002384:	f015 fa56 	bl	8017834 <__errno>
 8002388:	4603      	mov	r3, r0
 800238a:	220c      	movs	r2, #12
 800238c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800238e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002392:	e009      	b.n	80023a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002394:	4b08      	ldr	r3, [pc, #32]	@ (80023b8 <_sbrk+0x64>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800239a:	4b07      	ldr	r3, [pc, #28]	@ (80023b8 <_sbrk+0x64>)
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4413      	add	r3, r2
 80023a2:	4a05      	ldr	r2, [pc, #20]	@ (80023b8 <_sbrk+0x64>)
 80023a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023a6:	68fb      	ldr	r3, [r7, #12]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20020000 	.word	0x20020000
 80023b4:	00000400 	.word	0x00000400
 80023b8:	20003d8c 	.word	0x20003d8c
 80023bc:	2000ae88 	.word	0x2000ae88

080023c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023c4:	4b06      	ldr	r3, [pc, #24]	@ (80023e0 <SystemInit+0x20>)
 80023c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ca:	4a05      	ldr	r2, [pc, #20]	@ (80023e0 <SystemInit+0x20>)
 80023cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b088      	sub	sp, #32
 80023e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023ea:	f107 0310 	add.w	r3, r7, #16
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	605a      	str	r2, [r3, #4]
 80023f4:	609a      	str	r2, [r3, #8]
 80023f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023f8:	1d3b      	adds	r3, r7, #4
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	605a      	str	r2, [r3, #4]
 8002400:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002402:	4b1e      	ldr	r3, [pc, #120]	@ (800247c <MX_TIM2_Init+0x98>)
 8002404:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002408:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800240a:	4b1c      	ldr	r3, [pc, #112]	@ (800247c <MX_TIM2_Init+0x98>)
 800240c:	22a9      	movs	r2, #169	@ 0xa9
 800240e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002410:	4b1a      	ldr	r3, [pc, #104]	@ (800247c <MX_TIM2_Init+0x98>)
 8002412:	2200      	movs	r2, #0
 8002414:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002416:	4b19      	ldr	r3, [pc, #100]	@ (800247c <MX_TIM2_Init+0x98>)
 8002418:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800241c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800241e:	4b17      	ldr	r3, [pc, #92]	@ (800247c <MX_TIM2_Init+0x98>)
 8002420:	2200      	movs	r2, #0
 8002422:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002424:	4b15      	ldr	r3, [pc, #84]	@ (800247c <MX_TIM2_Init+0x98>)
 8002426:	2200      	movs	r2, #0
 8002428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800242a:	4814      	ldr	r0, [pc, #80]	@ (800247c <MX_TIM2_Init+0x98>)
 800242c:	f002 fae2 	bl	80049f4 <HAL_TIM_Base_Init>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002436:	f7ff fc87 	bl	8001d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800243a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800243e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002440:	f107 0310 	add.w	r3, r7, #16
 8002444:	4619      	mov	r1, r3
 8002446:	480d      	ldr	r0, [pc, #52]	@ (800247c <MX_TIM2_Init+0x98>)
 8002448:	f002 fe68 	bl	800511c <HAL_TIM_ConfigClockSource>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002452:	f7ff fc79 	bl	8001d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002456:	2300      	movs	r3, #0
 8002458:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800245e:	1d3b      	adds	r3, r7, #4
 8002460:	4619      	mov	r1, r3
 8002462:	4806      	ldr	r0, [pc, #24]	@ (800247c <MX_TIM2_Init+0x98>)
 8002464:	f003 fc12 	bl	8005c8c <HAL_TIMEx_MasterConfigSynchronization>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800246e:	f7ff fc6b 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002472:	bf00      	nop
 8002474:	3720      	adds	r7, #32
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20003d90 	.word	0x20003d90

08002480 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08e      	sub	sp, #56	@ 0x38
 8002484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002486:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]
 8002490:	609a      	str	r2, [r3, #8]
 8002492:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002494:	f107 031c 	add.w	r3, r7, #28
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024a0:	463b      	mov	r3, r7
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	605a      	str	r2, [r3, #4]
 80024a8:	609a      	str	r2, [r3, #8]
 80024aa:	60da      	str	r2, [r3, #12]
 80024ac:	611a      	str	r2, [r3, #16]
 80024ae:	615a      	str	r2, [r3, #20]
 80024b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024b2:	4b32      	ldr	r3, [pc, #200]	@ (800257c <MX_TIM3_Init+0xfc>)
 80024b4:	4a32      	ldr	r2, [pc, #200]	@ (8002580 <MX_TIM3_Init+0x100>)
 80024b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80024b8:	4b30      	ldr	r3, [pc, #192]	@ (800257c <MX_TIM3_Init+0xfc>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024be:	4b2f      	ldr	r3, [pc, #188]	@ (800257c <MX_TIM3_Init+0xfc>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80024c4:	4b2d      	ldr	r3, [pc, #180]	@ (800257c <MX_TIM3_Init+0xfc>)
 80024c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024cc:	4b2b      	ldr	r3, [pc, #172]	@ (800257c <MX_TIM3_Init+0xfc>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024d2:	4b2a      	ldr	r3, [pc, #168]	@ (800257c <MX_TIM3_Init+0xfc>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024d8:	4828      	ldr	r0, [pc, #160]	@ (800257c <MX_TIM3_Init+0xfc>)
 80024da:	f002 fa8b 	bl	80049f4 <HAL_TIM_Base_Init>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80024e4:	f7ff fc30 	bl	8001d48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80024ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024f2:	4619      	mov	r1, r3
 80024f4:	4821      	ldr	r0, [pc, #132]	@ (800257c <MX_TIM3_Init+0xfc>)
 80024f6:	f002 fe11 	bl	800511c <HAL_TIM_ConfigClockSource>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002500:	f7ff fc22 	bl	8001d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002504:	481d      	ldr	r0, [pc, #116]	@ (800257c <MX_TIM3_Init+0xfc>)
 8002506:	f002 fb45 	bl	8004b94 <HAL_TIM_PWM_Init>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002510:	f7ff fc1a 	bl	8001d48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002514:	2300      	movs	r3, #0
 8002516:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002518:	2300      	movs	r3, #0
 800251a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800251c:	f107 031c 	add.w	r3, r7, #28
 8002520:	4619      	mov	r1, r3
 8002522:	4816      	ldr	r0, [pc, #88]	@ (800257c <MX_TIM3_Init+0xfc>)
 8002524:	f003 fbb2 	bl	8005c8c <HAL_TIMEx_MasterConfigSynchronization>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800252e:	f7ff fc0b 	bl	8001d48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002532:	2360      	movs	r3, #96	@ 0x60
 8002534:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800253a:	2300      	movs	r3, #0
 800253c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800253e:	2300      	movs	r3, #0
 8002540:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002542:	463b      	mov	r3, r7
 8002544:	2200      	movs	r2, #0
 8002546:	4619      	mov	r1, r3
 8002548:	480c      	ldr	r0, [pc, #48]	@ (800257c <MX_TIM3_Init+0xfc>)
 800254a:	f002 fcd3 	bl	8004ef4 <HAL_TIM_PWM_ConfigChannel>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002554:	f7ff fbf8 	bl	8001d48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002558:	463b      	mov	r3, r7
 800255a:	2204      	movs	r2, #4
 800255c:	4619      	mov	r1, r3
 800255e:	4807      	ldr	r0, [pc, #28]	@ (800257c <MX_TIM3_Init+0xfc>)
 8002560:	f002 fcc8 	bl	8004ef4 <HAL_TIM_PWM_ConfigChannel>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800256a:	f7ff fbed 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800256e:	4803      	ldr	r0, [pc, #12]	@ (800257c <MX_TIM3_Init+0xfc>)
 8002570:	f000 f840 	bl	80025f4 <HAL_TIM_MspPostInit>

}
 8002574:	bf00      	nop
 8002576:	3738      	adds	r7, #56	@ 0x38
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	20003ddc 	.word	0x20003ddc
 8002580:	40000400 	.word	0x40000400

08002584 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002594:	d114      	bne.n	80025c0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002596:	4b15      	ldr	r3, [pc, #84]	@ (80025ec <HAL_TIM_Base_MspInit+0x68>)
 8002598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259a:	4a14      	ldr	r2, [pc, #80]	@ (80025ec <HAL_TIM_Base_MspInit+0x68>)
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80025a2:	4b12      	ldr	r3, [pc, #72]	@ (80025ec <HAL_TIM_Base_MspInit+0x68>)
 80025a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80025ae:	2200      	movs	r2, #0
 80025b0:	2105      	movs	r1, #5
 80025b2:	201c      	movs	r0, #28
 80025b4:	f000 fc3a 	bl	8002e2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025b8:	201c      	movs	r0, #28
 80025ba:	f000 fc51 	bl	8002e60 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80025be:	e010      	b.n	80025e2 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a0a      	ldr	r2, [pc, #40]	@ (80025f0 <HAL_TIM_Base_MspInit+0x6c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d10b      	bne.n	80025e2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025ca:	4b08      	ldr	r3, [pc, #32]	@ (80025ec <HAL_TIM_Base_MspInit+0x68>)
 80025cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ce:	4a07      	ldr	r2, [pc, #28]	@ (80025ec <HAL_TIM_Base_MspInit+0x68>)
 80025d0:	f043 0302 	orr.w	r3, r3, #2
 80025d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80025d6:	4b05      	ldr	r3, [pc, #20]	@ (80025ec <HAL_TIM_Base_MspInit+0x68>)
 80025d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	60bb      	str	r3, [r7, #8]
 80025e0:	68bb      	ldr	r3, [r7, #8]
}
 80025e2:	bf00      	nop
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40000400 	.word	0x40000400

080025f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fc:	f107 030c 	add.w	r3, r7, #12
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a11      	ldr	r2, [pc, #68]	@ (8002658 <HAL_TIM_MspPostInit+0x64>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d11c      	bne.n	8002650 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002616:	4b11      	ldr	r3, [pc, #68]	@ (800265c <HAL_TIM_MspPostInit+0x68>)
 8002618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800261a:	4a10      	ldr	r2, [pc, #64]	@ (800265c <HAL_TIM_MspPostInit+0x68>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002622:	4b0e      	ldr	r3, [pc, #56]	@ (800265c <HAL_TIM_MspPostInit+0x68>)
 8002624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800262e:	2350      	movs	r3, #80	@ 0x50
 8002630:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002632:	2302      	movs	r3, #2
 8002634:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263a:	2300      	movs	r3, #0
 800263c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800263e:	2302      	movs	r3, #2
 8002640:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002642:	f107 030c 	add.w	r3, r7, #12
 8002646:	4619      	mov	r1, r3
 8002648:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800264c:	f000 ff54 	bl	80034f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002650:	bf00      	nop
 8002652:	3720      	adds	r7, #32
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40000400 	.word	0x40000400
 800265c:	40021000 	.word	0x40021000

08002660 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002664:	4b21      	ldr	r3, [pc, #132]	@ (80026ec <MX_LPUART1_UART_Init+0x8c>)
 8002666:	4a22      	ldr	r2, [pc, #136]	@ (80026f0 <MX_LPUART1_UART_Init+0x90>)
 8002668:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800266a:	4b20      	ldr	r3, [pc, #128]	@ (80026ec <MX_LPUART1_UART_Init+0x8c>)
 800266c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002670:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002672:	4b1e      	ldr	r3, [pc, #120]	@ (80026ec <MX_LPUART1_UART_Init+0x8c>)
 8002674:	2200      	movs	r2, #0
 8002676:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002678:	4b1c      	ldr	r3, [pc, #112]	@ (80026ec <MX_LPUART1_UART_Init+0x8c>)
 800267a:	2200      	movs	r2, #0
 800267c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800267e:	4b1b      	ldr	r3, [pc, #108]	@ (80026ec <MX_LPUART1_UART_Init+0x8c>)
 8002680:	2200      	movs	r2, #0
 8002682:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002684:	4b19      	ldr	r3, [pc, #100]	@ (80026ec <MX_LPUART1_UART_Init+0x8c>)
 8002686:	220c      	movs	r2, #12
 8002688:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800268a:	4b18      	ldr	r3, [pc, #96]	@ (80026ec <MX_LPUART1_UART_Init+0x8c>)
 800268c:	2200      	movs	r2, #0
 800268e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002690:	4b16      	ldr	r3, [pc, #88]	@ (80026ec <MX_LPUART1_UART_Init+0x8c>)
 8002692:	2200      	movs	r2, #0
 8002694:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002696:	4b15      	ldr	r3, [pc, #84]	@ (80026ec <MX_LPUART1_UART_Init+0x8c>)
 8002698:	2200      	movs	r2, #0
 800269a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800269c:	4b13      	ldr	r3, [pc, #76]	@ (80026ec <MX_LPUART1_UART_Init+0x8c>)
 800269e:	2200      	movs	r2, #0
 80026a0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80026a2:	4812      	ldr	r0, [pc, #72]	@ (80026ec <MX_LPUART1_UART_Init+0x8c>)
 80026a4:	f003 fbce 	bl	8005e44 <HAL_UART_Init>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80026ae:	f7ff fb4b 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026b2:	2100      	movs	r1, #0
 80026b4:	480d      	ldr	r0, [pc, #52]	@ (80026ec <MX_LPUART1_UART_Init+0x8c>)
 80026b6:	f005 f947 	bl	8007948 <HAL_UARTEx_SetTxFifoThreshold>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80026c0:	f7ff fb42 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026c4:	2100      	movs	r1, #0
 80026c6:	4809      	ldr	r0, [pc, #36]	@ (80026ec <MX_LPUART1_UART_Init+0x8c>)
 80026c8:	f005 f97c 	bl	80079c4 <HAL_UARTEx_SetRxFifoThreshold>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80026d2:	f7ff fb39 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80026d6:	4805      	ldr	r0, [pc, #20]	@ (80026ec <MX_LPUART1_UART_Init+0x8c>)
 80026d8:	f005 f8fd 	bl	80078d6 <HAL_UARTEx_DisableFifoMode>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80026e2:	f7ff fb31 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20003e28 	.word	0x20003e28
 80026f0:	40008000 	.word	0x40008000

080026f4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026f8:	4b24      	ldr	r3, [pc, #144]	@ (800278c <MX_USART1_UART_Init+0x98>)
 80026fa:	4a25      	ldr	r2, [pc, #148]	@ (8002790 <MX_USART1_UART_Init+0x9c>)
 80026fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026fe:	4b23      	ldr	r3, [pc, #140]	@ (800278c <MX_USART1_UART_Init+0x98>)
 8002700:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002704:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002706:	4b21      	ldr	r3, [pc, #132]	@ (800278c <MX_USART1_UART_Init+0x98>)
 8002708:	2200      	movs	r2, #0
 800270a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800270c:	4b1f      	ldr	r3, [pc, #124]	@ (800278c <MX_USART1_UART_Init+0x98>)
 800270e:	2200      	movs	r2, #0
 8002710:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002712:	4b1e      	ldr	r3, [pc, #120]	@ (800278c <MX_USART1_UART_Init+0x98>)
 8002714:	2200      	movs	r2, #0
 8002716:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002718:	4b1c      	ldr	r3, [pc, #112]	@ (800278c <MX_USART1_UART_Init+0x98>)
 800271a:	220c      	movs	r2, #12
 800271c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800271e:	4b1b      	ldr	r3, [pc, #108]	@ (800278c <MX_USART1_UART_Init+0x98>)
 8002720:	2200      	movs	r2, #0
 8002722:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002724:	4b19      	ldr	r3, [pc, #100]	@ (800278c <MX_USART1_UART_Init+0x98>)
 8002726:	2200      	movs	r2, #0
 8002728:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800272a:	4b18      	ldr	r3, [pc, #96]	@ (800278c <MX_USART1_UART_Init+0x98>)
 800272c:	2200      	movs	r2, #0
 800272e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002730:	4b16      	ldr	r3, [pc, #88]	@ (800278c <MX_USART1_UART_Init+0x98>)
 8002732:	2200      	movs	r2, #0
 8002734:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002736:	4b15      	ldr	r3, [pc, #84]	@ (800278c <MX_USART1_UART_Init+0x98>)
 8002738:	2200      	movs	r2, #0
 800273a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800273c:	2300      	movs	r3, #0
 800273e:	2200      	movs	r2, #0
 8002740:	2100      	movs	r1, #0
 8002742:	4812      	ldr	r0, [pc, #72]	@ (800278c <MX_USART1_UART_Init+0x98>)
 8002744:	f005 f840 	bl	80077c8 <HAL_RS485Ex_Init>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 800274e:	f7ff fafb 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002752:	2100      	movs	r1, #0
 8002754:	480d      	ldr	r0, [pc, #52]	@ (800278c <MX_USART1_UART_Init+0x98>)
 8002756:	f005 f8f7 	bl	8007948 <HAL_UARTEx_SetTxFifoThreshold>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 8002760:	f7ff faf2 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002764:	2100      	movs	r1, #0
 8002766:	4809      	ldr	r0, [pc, #36]	@ (800278c <MX_USART1_UART_Init+0x98>)
 8002768:	f005 f92c 	bl	80079c4 <HAL_UARTEx_SetRxFifoThreshold>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 8002772:	f7ff fae9 	bl	8001d48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002776:	4805      	ldr	r0, [pc, #20]	@ (800278c <MX_USART1_UART_Init+0x98>)
 8002778:	f005 f8ad 	bl	80078d6 <HAL_UARTEx_DisableFifoMode>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 8002782:	f7ff fae1 	bl	8001d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20003ebc 	.word	0x20003ebc
 8002790:	40013800 	.word	0x40013800

08002794 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b0a2      	sub	sp, #136	@ 0x88
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	60da      	str	r2, [r3, #12]
 80027aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027ac:	f107 0320 	add.w	r3, r7, #32
 80027b0:	2254      	movs	r2, #84	@ 0x54
 80027b2:	2100      	movs	r1, #0
 80027b4:	4618      	mov	r0, r3
 80027b6:	f014 ffa9 	bl	801770c <memset>
  if(uartHandle->Instance==LPUART1)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a4d      	ldr	r2, [pc, #308]	@ (80028f4 <HAL_UART_MspInit+0x160>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	f040 80a3 	bne.w	800290c <HAL_UART_MspInit+0x178>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80027c6:	2320      	movs	r3, #32
 80027c8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80027ca:	2300      	movs	r3, #0
 80027cc:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027ce:	f107 0320 	add.w	r3, r7, #32
 80027d2:	4618      	mov	r0, r3
 80027d4:	f001 fec0 	bl	8004558 <HAL_RCCEx_PeriphCLKConfig>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80027de:	f7ff fab3 	bl	8001d48 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80027e2:	4b45      	ldr	r3, [pc, #276]	@ (80028f8 <HAL_UART_MspInit+0x164>)
 80027e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e6:	4a44      	ldr	r2, [pc, #272]	@ (80028f8 <HAL_UART_MspInit+0x164>)
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80027ee:	4b42      	ldr	r3, [pc, #264]	@ (80028f8 <HAL_UART_MspInit+0x164>)
 80027f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	61fb      	str	r3, [r7, #28]
 80027f8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fa:	4b3f      	ldr	r3, [pc, #252]	@ (80028f8 <HAL_UART_MspInit+0x164>)
 80027fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027fe:	4a3e      	ldr	r2, [pc, #248]	@ (80028f8 <HAL_UART_MspInit+0x164>)
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002806:	4b3c      	ldr	r3, [pc, #240]	@ (80028f8 <HAL_UART_MspInit+0x164>)
 8002808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	61bb      	str	r3, [r7, #24]
 8002810:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002812:	230c      	movs	r3, #12
 8002814:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002816:	2302      	movs	r3, #2
 8002818:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281e:	2300      	movs	r3, #0
 8002820:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002824:	230c      	movs	r3, #12
 8002826:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800282e:	4619      	mov	r1, r3
 8002830:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002834:	f000 fe60 	bl	80034f8 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8002838:	4b30      	ldr	r3, [pc, #192]	@ (80028fc <HAL_UART_MspInit+0x168>)
 800283a:	4a31      	ldr	r2, [pc, #196]	@ (8002900 <HAL_UART_MspInit+0x16c>)
 800283c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800283e:	4b2f      	ldr	r3, [pc, #188]	@ (80028fc <HAL_UART_MspInit+0x168>)
 8002840:	2222      	movs	r2, #34	@ 0x22
 8002842:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002844:	4b2d      	ldr	r3, [pc, #180]	@ (80028fc <HAL_UART_MspInit+0x168>)
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800284a:	4b2c      	ldr	r3, [pc, #176]	@ (80028fc <HAL_UART_MspInit+0x168>)
 800284c:	2200      	movs	r2, #0
 800284e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002850:	4b2a      	ldr	r3, [pc, #168]	@ (80028fc <HAL_UART_MspInit+0x168>)
 8002852:	2280      	movs	r2, #128	@ 0x80
 8002854:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002856:	4b29      	ldr	r3, [pc, #164]	@ (80028fc <HAL_UART_MspInit+0x168>)
 8002858:	2200      	movs	r2, #0
 800285a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800285c:	4b27      	ldr	r3, [pc, #156]	@ (80028fc <HAL_UART_MspInit+0x168>)
 800285e:	2200      	movs	r2, #0
 8002860:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8002862:	4b26      	ldr	r3, [pc, #152]	@ (80028fc <HAL_UART_MspInit+0x168>)
 8002864:	2220      	movs	r2, #32
 8002866:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002868:	4b24      	ldr	r3, [pc, #144]	@ (80028fc <HAL_UART_MspInit+0x168>)
 800286a:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800286e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002870:	4822      	ldr	r0, [pc, #136]	@ (80028fc <HAL_UART_MspInit+0x168>)
 8002872:	f000 fb03 	bl	8002e7c <HAL_DMA_Init>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 800287c:	f7ff fa64 	bl	8001d48 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a1e      	ldr	r2, [pc, #120]	@ (80028fc <HAL_UART_MspInit+0x168>)
 8002884:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002888:	4a1c      	ldr	r2, [pc, #112]	@ (80028fc <HAL_UART_MspInit+0x168>)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 800288e:	4b1d      	ldr	r3, [pc, #116]	@ (8002904 <HAL_UART_MspInit+0x170>)
 8002890:	4a1d      	ldr	r2, [pc, #116]	@ (8002908 <HAL_UART_MspInit+0x174>)
 8002892:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002894:	4b1b      	ldr	r3, [pc, #108]	@ (8002904 <HAL_UART_MspInit+0x170>)
 8002896:	2223      	movs	r2, #35	@ 0x23
 8002898:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800289a:	4b1a      	ldr	r3, [pc, #104]	@ (8002904 <HAL_UART_MspInit+0x170>)
 800289c:	2210      	movs	r2, #16
 800289e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028a0:	4b18      	ldr	r3, [pc, #96]	@ (8002904 <HAL_UART_MspInit+0x170>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028a6:	4b17      	ldr	r3, [pc, #92]	@ (8002904 <HAL_UART_MspInit+0x170>)
 80028a8:	2280      	movs	r2, #128	@ 0x80
 80028aa:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028ac:	4b15      	ldr	r3, [pc, #84]	@ (8002904 <HAL_UART_MspInit+0x170>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028b2:	4b14      	ldr	r3, [pc, #80]	@ (8002904 <HAL_UART_MspInit+0x170>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80028b8:	4b12      	ldr	r3, [pc, #72]	@ (8002904 <HAL_UART_MspInit+0x170>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80028be:	4b11      	ldr	r3, [pc, #68]	@ (8002904 <HAL_UART_MspInit+0x170>)
 80028c0:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80028c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80028c6:	480f      	ldr	r0, [pc, #60]	@ (8002904 <HAL_UART_MspInit+0x170>)
 80028c8:	f000 fad8 	bl	8002e7c <HAL_DMA_Init>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 80028d2:	f7ff fa39 	bl	8001d48 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002904 <HAL_UART_MspInit+0x170>)
 80028da:	67da      	str	r2, [r3, #124]	@ 0x7c
 80028dc:	4a09      	ldr	r2, [pc, #36]	@ (8002904 <HAL_UART_MspInit+0x170>)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 80028e2:	2200      	movs	r2, #0
 80028e4:	2105      	movs	r1, #5
 80028e6:	205b      	movs	r0, #91	@ 0x5b
 80028e8:	f000 faa0 	bl	8002e2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80028ec:	205b      	movs	r0, #91	@ 0x5b
 80028ee:	f000 fab7 	bl	8002e60 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80028f2:	e0c4      	b.n	8002a7e <HAL_UART_MspInit+0x2ea>
 80028f4:	40008000 	.word	0x40008000
 80028f8:	40021000 	.word	0x40021000
 80028fc:	20003f50 	.word	0x20003f50
 8002900:	40020008 	.word	0x40020008
 8002904:	20003fb0 	.word	0x20003fb0
 8002908:	4002001c 	.word	0x4002001c
  else if(uartHandle->Instance==USART1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a5d      	ldr	r2, [pc, #372]	@ (8002a88 <HAL_UART_MspInit+0x2f4>)
 8002912:	4293      	cmp	r3, r2
 8002914:	f040 80b3 	bne.w	8002a7e <HAL_UART_MspInit+0x2ea>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002918:	2301      	movs	r3, #1
 800291a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800291c:	2300      	movs	r3, #0
 800291e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002920:	f107 0320 	add.w	r3, r7, #32
 8002924:	4618      	mov	r0, r3
 8002926:	f001 fe17 	bl	8004558 <HAL_RCCEx_PeriphCLKConfig>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8002930:	f7ff fa0a 	bl	8001d48 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002934:	4b55      	ldr	r3, [pc, #340]	@ (8002a8c <HAL_UART_MspInit+0x2f8>)
 8002936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002938:	4a54      	ldr	r2, [pc, #336]	@ (8002a8c <HAL_UART_MspInit+0x2f8>)
 800293a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800293e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002940:	4b52      	ldr	r3, [pc, #328]	@ (8002a8c <HAL_UART_MspInit+0x2f8>)
 8002942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002944:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800294c:	4b4f      	ldr	r3, [pc, #316]	@ (8002a8c <HAL_UART_MspInit+0x2f8>)
 800294e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002950:	4a4e      	ldr	r2, [pc, #312]	@ (8002a8c <HAL_UART_MspInit+0x2f8>)
 8002952:	f043 0304 	orr.w	r3, r3, #4
 8002956:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002958:	4b4c      	ldr	r3, [pc, #304]	@ (8002a8c <HAL_UART_MspInit+0x2f8>)
 800295a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002964:	4b49      	ldr	r3, [pc, #292]	@ (8002a8c <HAL_UART_MspInit+0x2f8>)
 8002966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002968:	4a48      	ldr	r2, [pc, #288]	@ (8002a8c <HAL_UART_MspInit+0x2f8>)
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002970:	4b46      	ldr	r3, [pc, #280]	@ (8002a8c <HAL_UART_MspInit+0x2f8>)
 8002972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800297c:	2330      	movs	r3, #48	@ 0x30
 800297e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002980:	2302      	movs	r3, #2
 8002982:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002984:	2300      	movs	r3, #0
 8002986:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002988:	2300      	movs	r3, #0
 800298a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800298e:	2307      	movs	r3, #7
 8002990:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002994:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002998:	4619      	mov	r1, r3
 800299a:	483d      	ldr	r0, [pc, #244]	@ (8002a90 <HAL_UART_MspInit+0x2fc>)
 800299c:	f000 fdac 	bl	80034f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80029a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029a4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a6:	2302      	movs	r3, #2
 80029a8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ae:	2300      	movs	r3, #0
 80029b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029b4:	2307      	movs	r3, #7
 80029b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ba:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80029be:	4619      	mov	r1, r3
 80029c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029c4:	f000 fd98 	bl	80034f8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80029c8:	4b32      	ldr	r3, [pc, #200]	@ (8002a94 <HAL_UART_MspInit+0x300>)
 80029ca:	4a33      	ldr	r2, [pc, #204]	@ (8002a98 <HAL_UART_MspInit+0x304>)
 80029cc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80029ce:	4b31      	ldr	r3, [pc, #196]	@ (8002a94 <HAL_UART_MspInit+0x300>)
 80029d0:	2218      	movs	r2, #24
 80029d2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029d4:	4b2f      	ldr	r3, [pc, #188]	@ (8002a94 <HAL_UART_MspInit+0x300>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029da:	4b2e      	ldr	r3, [pc, #184]	@ (8002a94 <HAL_UART_MspInit+0x300>)
 80029dc:	2200      	movs	r2, #0
 80029de:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029e0:	4b2c      	ldr	r3, [pc, #176]	@ (8002a94 <HAL_UART_MspInit+0x300>)
 80029e2:	2280      	movs	r2, #128	@ 0x80
 80029e4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002a94 <HAL_UART_MspInit+0x300>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029ec:	4b29      	ldr	r3, [pc, #164]	@ (8002a94 <HAL_UART_MspInit+0x300>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80029f2:	4b28      	ldr	r3, [pc, #160]	@ (8002a94 <HAL_UART_MspInit+0x300>)
 80029f4:	2220      	movs	r2, #32
 80029f6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029f8:	4b26      	ldr	r3, [pc, #152]	@ (8002a94 <HAL_UART_MspInit+0x300>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80029fe:	4825      	ldr	r0, [pc, #148]	@ (8002a94 <HAL_UART_MspInit+0x300>)
 8002a00:	f000 fa3c 	bl	8002e7c <HAL_DMA_Init>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_UART_MspInit+0x27a>
      Error_Handler();
 8002a0a:	f7ff f99d 	bl	8001d48 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a20      	ldr	r2, [pc, #128]	@ (8002a94 <HAL_UART_MspInit+0x300>)
 8002a12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002a16:	4a1f      	ldr	r2, [pc, #124]	@ (8002a94 <HAL_UART_MspInit+0x300>)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8002a9c <HAL_UART_MspInit+0x308>)
 8002a1e:	4a20      	ldr	r2, [pc, #128]	@ (8002aa0 <HAL_UART_MspInit+0x30c>)
 8002a20:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002a22:	4b1e      	ldr	r3, [pc, #120]	@ (8002a9c <HAL_UART_MspInit+0x308>)
 8002a24:	2219      	movs	r2, #25
 8002a26:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a28:	4b1c      	ldr	r3, [pc, #112]	@ (8002a9c <HAL_UART_MspInit+0x308>)
 8002a2a:	2210      	movs	r2, #16
 8002a2c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8002a9c <HAL_UART_MspInit+0x308>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a34:	4b19      	ldr	r3, [pc, #100]	@ (8002a9c <HAL_UART_MspInit+0x308>)
 8002a36:	2280      	movs	r2, #128	@ 0x80
 8002a38:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a3a:	4b18      	ldr	r3, [pc, #96]	@ (8002a9c <HAL_UART_MspInit+0x308>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a40:	4b16      	ldr	r3, [pc, #88]	@ (8002a9c <HAL_UART_MspInit+0x308>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002a46:	4b15      	ldr	r3, [pc, #84]	@ (8002a9c <HAL_UART_MspInit+0x308>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a4c:	4b13      	ldr	r3, [pc, #76]	@ (8002a9c <HAL_UART_MspInit+0x308>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002a52:	4812      	ldr	r0, [pc, #72]	@ (8002a9c <HAL_UART_MspInit+0x308>)
 8002a54:	f000 fa12 	bl	8002e7c <HAL_DMA_Init>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_UART_MspInit+0x2ce>
      Error_Handler();
 8002a5e:	f7ff f973 	bl	8001d48 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a0d      	ldr	r2, [pc, #52]	@ (8002a9c <HAL_UART_MspInit+0x308>)
 8002a66:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002a68:	4a0c      	ldr	r2, [pc, #48]	@ (8002a9c <HAL_UART_MspInit+0x308>)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2105      	movs	r1, #5
 8002a72:	2025      	movs	r0, #37	@ 0x25
 8002a74:	f000 f9da 	bl	8002e2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a78:	2025      	movs	r0, #37	@ 0x25
 8002a7a:	f000 f9f1 	bl	8002e60 <HAL_NVIC_EnableIRQ>
}
 8002a7e:	bf00      	nop
 8002a80:	3788      	adds	r7, #136	@ 0x88
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40013800 	.word	0x40013800
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	48000800 	.word	0x48000800
 8002a94:	20004010 	.word	0x20004010
 8002a98:	40020030 	.word	0x40020030
 8002a9c:	20004070 	.word	0x20004070
 8002aa0:	40020044 	.word	0x40020044

08002aa4 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002ab2:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002ab4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ab8:	4904      	ldr	r1, [pc, #16]	@ (8002acc <cubemx_transport_open+0x28>)
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f003 fa92 	bl	8005fe4 <HAL_UART_Receive_DMA>
    return true;
 8002ac0:	2301      	movs	r3, #1
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	200040d0 	.word	0x200040d0

08002ad0 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002ade:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f003 facb 	bl	800607c <HAL_UART_DMAStop>
    return true;
 8002ae6:	2301      	movs	r3, #1
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
 8002afc:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002b04:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b0c:	2b20      	cmp	r3, #32
 8002b0e:	d11b      	bne.n	8002b48 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	461a      	mov	r2, r3
 8002b16:	68b9      	ldr	r1, [r7, #8]
 8002b18:	6978      	ldr	r0, [r7, #20]
 8002b1a:	f003 f9e3 	bl	8005ee4 <HAL_UART_Transmit_DMA>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002b22:	e002      	b.n	8002b2a <cubemx_transport_write+0x3a>
            osDelay(1);
 8002b24:	2001      	movs	r0, #1
 8002b26:	f005 f8f9 	bl	8007d1c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002b2a:	7cfb      	ldrb	r3, [r7, #19]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d104      	bne.n	8002b3a <cubemx_transport_write+0x4a>
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b36:	2b20      	cmp	r3, #32
 8002b38:	d1f4      	bne.n	8002b24 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8002b3a:	7cfb      	ldrb	r3, [r7, #19]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <cubemx_transport_write+0x54>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	e002      	b.n	8002b4a <cubemx_transport_write+0x5a>
 8002b44:	2300      	movs	r3, #0
 8002b46:	e000      	b.n	8002b4a <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8002b48:	2300      	movs	r3, #0
    }
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
 8002b60:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002b68:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b6e:	b672      	cpsid	i
}
 8002b70:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002b80:	4a1b      	ldr	r2, [pc, #108]	@ (8002bf0 <cubemx_transport_read+0x9c>)
 8002b82:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b84:	b662      	cpsie	i
}
 8002b86:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002b8e:	2001      	movs	r0, #1
 8002b90:	f005 f8c4 	bl	8007d1c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002b94:	4b17      	ldr	r3, [pc, #92]	@ (8002bf4 <cubemx_transport_read+0xa0>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	4b15      	ldr	r3, [pc, #84]	@ (8002bf0 <cubemx_transport_read+0x9c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d103      	bne.n	8002ba8 <cubemx_transport_read+0x54>
 8002ba0:	69fa      	ldr	r2, [r7, #28]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	dbe2      	blt.n	8002b6e <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002bac:	e011      	b.n	8002bd2 <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 8002bae:	4b11      	ldr	r3, [pc, #68]	@ (8002bf4 <cubemx_transport_read+0xa0>)
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68b9      	ldr	r1, [r7, #8]
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	440b      	add	r3, r1
 8002bb8:	490f      	ldr	r1, [pc, #60]	@ (8002bf8 <cubemx_transport_read+0xa4>)
 8002bba:	5c8a      	ldrb	r2, [r1, r2]
 8002bbc:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf4 <cubemx_transport_read+0xa0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bc8:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf4 <cubemx_transport_read+0xa0>)
 8002bca:	6013      	str	r3, [r2, #0]
        wrote++;
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002bd2:	4b08      	ldr	r3, [pc, #32]	@ (8002bf4 <cubemx_transport_read+0xa0>)
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <cubemx_transport_read+0x9c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d003      	beq.n	8002be6 <cubemx_transport_read+0x92>
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d3e3      	bcc.n	8002bae <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8002be6:	69bb      	ldr	r3, [r7, #24]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3720      	adds	r7, #32
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	200048d4 	.word	0x200048d4
 8002bf4:	200048d0 	.word	0x200048d0
 8002bf8:	200040d0 	.word	0x200040d0

08002bfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002bfc:	480d      	ldr	r0, [pc, #52]	@ (8002c34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002bfe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c00:	f7ff fbde 	bl	80023c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c04:	480c      	ldr	r0, [pc, #48]	@ (8002c38 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c06:	490d      	ldr	r1, [pc, #52]	@ (8002c3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c08:	4a0d      	ldr	r2, [pc, #52]	@ (8002c40 <LoopForever+0xe>)
  movs r3, #0
 8002c0a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002c0c:	e002      	b.n	8002c14 <LoopCopyDataInit>

08002c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c12:	3304      	adds	r3, #4

08002c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c18:	d3f9      	bcc.n	8002c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c1c:	4c0a      	ldr	r4, [pc, #40]	@ (8002c48 <LoopForever+0x16>)
  movs r3, #0
 8002c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c20:	e001      	b.n	8002c26 <LoopFillZerobss>

08002c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c24:	3204      	adds	r2, #4

08002c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c28:	d3fb      	bcc.n	8002c22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c2a:	f014 fe09 	bl	8017840 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c2e:	f7fe ffef 	bl	8001c10 <main>

08002c32 <LoopForever>:

LoopForever:
    b LoopForever
 8002c32:	e7fe      	b.n	8002c32 <LoopForever>
  ldr   r0, =_estack
 8002c34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c3c:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8002c40:	0801944c 	.word	0x0801944c
  ldr r2, =_sbss
 8002c44:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8002c48:	2000ae88 	.word	0x2000ae88

08002c4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c4c:	e7fe      	b.n	8002c4c <ADC1_2_IRQHandler>

08002c4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b082      	sub	sp, #8
 8002c52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c58:	2003      	movs	r0, #3
 8002c5a:	f000 f8dc 	bl	8002e16 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c5e:	200f      	movs	r0, #15
 8002c60:	f7ff fa08 	bl	8002074 <HAL_InitTick>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	71fb      	strb	r3, [r7, #7]
 8002c6e:	e001      	b.n	8002c74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c70:	f7ff f9d6 	bl	8002020 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c74:	79fb      	ldrb	r3, [r7, #7]

}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c84:	4b05      	ldr	r3, [pc, #20]	@ (8002c9c <HAL_IncTick+0x1c>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4b05      	ldr	r3, [pc, #20]	@ (8002ca0 <HAL_IncTick+0x20>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	4a03      	ldr	r2, [pc, #12]	@ (8002c9c <HAL_IncTick+0x1c>)
 8002c90:	6013      	str	r3, [r2, #0]
}
 8002c92:	bf00      	nop
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	200048d8 	.word	0x200048d8
 8002ca0:	2000000c 	.word	0x2000000c

08002ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ca8:	4b03      	ldr	r3, [pc, #12]	@ (8002cb8 <HAL_GetTick+0x14>)
 8002caa:	681b      	ldr	r3, [r3, #0]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	200048d8 	.word	0x200048d8

08002cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8002d00 <__NVIC_SetPriorityGrouping+0x44>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ce4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cee:	4a04      	ldr	r2, [pc, #16]	@ (8002d00 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	60d3      	str	r3, [r2, #12]
}
 8002cf4:	bf00      	nop
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	e000ed00 	.word	0xe000ed00

08002d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d08:	4b04      	ldr	r3, [pc, #16]	@ (8002d1c <__NVIC_GetPriorityGrouping+0x18>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	0a1b      	lsrs	r3, r3, #8
 8002d0e:	f003 0307 	and.w	r3, r3, #7
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	db0b      	blt.n	8002d4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	f003 021f 	and.w	r2, r3, #31
 8002d38:	4907      	ldr	r1, [pc, #28]	@ (8002d58 <__NVIC_EnableIRQ+0x38>)
 8002d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	2001      	movs	r0, #1
 8002d42:	fa00 f202 	lsl.w	r2, r0, r2
 8002d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	e000e100 	.word	0xe000e100

08002d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	6039      	str	r1, [r7, #0]
 8002d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	db0a      	blt.n	8002d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	490c      	ldr	r1, [pc, #48]	@ (8002da8 <__NVIC_SetPriority+0x4c>)
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	0112      	lsls	r2, r2, #4
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	440b      	add	r3, r1
 8002d80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d84:	e00a      	b.n	8002d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	4908      	ldr	r1, [pc, #32]	@ (8002dac <__NVIC_SetPriority+0x50>)
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	3b04      	subs	r3, #4
 8002d94:	0112      	lsls	r2, r2, #4
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	440b      	add	r3, r1
 8002d9a:	761a      	strb	r2, [r3, #24]
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000e100 	.word	0xe000e100
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b089      	sub	sp, #36	@ 0x24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f1c3 0307 	rsb	r3, r3, #7
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	bf28      	it	cs
 8002dce:	2304      	movcs	r3, #4
 8002dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	2b06      	cmp	r3, #6
 8002dd8:	d902      	bls.n	8002de0 <NVIC_EncodePriority+0x30>
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3b03      	subs	r3, #3
 8002dde:	e000      	b.n	8002de2 <NVIC_EncodePriority+0x32>
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43da      	mvns	r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	401a      	ands	r2, r3
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002df8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002e02:	43d9      	mvns	r1, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e08:	4313      	orrs	r3, r2
         );
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3724      	adds	r7, #36	@ 0x24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff ff4c 	bl	8002cbc <__NVIC_SetPriorityGrouping>
}
 8002e24:	bf00      	nop
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
 8002e38:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e3a:	f7ff ff63 	bl	8002d04 <__NVIC_GetPriorityGrouping>
 8002e3e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	68b9      	ldr	r1, [r7, #8]
 8002e44:	6978      	ldr	r0, [r7, #20]
 8002e46:	f7ff ffb3 	bl	8002db0 <NVIC_EncodePriority>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e50:	4611      	mov	r1, r2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff ff82 	bl	8002d5c <__NVIC_SetPriority>
}
 8002e58:	bf00      	nop
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff ff56 	bl	8002d20 <__NVIC_EnableIRQ>
}
 8002e74:	bf00      	nop
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e08d      	b.n	8002faa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	461a      	mov	r2, r3
 8002e94:	4b47      	ldr	r3, [pc, #284]	@ (8002fb4 <HAL_DMA_Init+0x138>)
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d80f      	bhi.n	8002eba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	4b45      	ldr	r3, [pc, #276]	@ (8002fb8 <HAL_DMA_Init+0x13c>)
 8002ea2:	4413      	add	r3, r2
 8002ea4:	4a45      	ldr	r2, [pc, #276]	@ (8002fbc <HAL_DMA_Init+0x140>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	091b      	lsrs	r3, r3, #4
 8002eac:	009a      	lsls	r2, r3, #2
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a42      	ldr	r2, [pc, #264]	@ (8002fc0 <HAL_DMA_Init+0x144>)
 8002eb6:	641a      	str	r2, [r3, #64]	@ 0x40
 8002eb8:	e00e      	b.n	8002ed8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	4b40      	ldr	r3, [pc, #256]	@ (8002fc4 <HAL_DMA_Init+0x148>)
 8002ec2:	4413      	add	r3, r2
 8002ec4:	4a3d      	ldr	r2, [pc, #244]	@ (8002fbc <HAL_DMA_Init+0x140>)
 8002ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eca:	091b      	lsrs	r3, r3, #4
 8002ecc:	009a      	lsls	r2, r3, #2
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a3c      	ldr	r2, [pc, #240]	@ (8002fc8 <HAL_DMA_Init+0x14c>)
 8002ed6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2202      	movs	r2, #2
 8002edc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002eee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ef2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002efc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 fa82 	bl	8003434 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f38:	d102      	bne.n	8002f40 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f54:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d010      	beq.n	8002f80 <HAL_DMA_Init+0x104>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d80c      	bhi.n	8002f80 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 faa2 	bl	80034b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	e008      	b.n	8002f92 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40020407 	.word	0x40020407
 8002fb8:	bffdfff8 	.word	0xbffdfff8
 8002fbc:	cccccccd 	.word	0xcccccccd
 8002fc0:	40020000 	.word	0x40020000
 8002fc4:	bffdfbf8 	.word	0xbffdfbf8
 8002fc8:	40020400 	.word	0x40020400

08002fcc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_DMA_Start_IT+0x20>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e066      	b.n	80030ba <HAL_DMA_Start_IT+0xee>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d155      	bne.n	80030ac <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0201 	bic.w	r2, r2, #1
 800301c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	68b9      	ldr	r1, [r7, #8]
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 f9c7 	bl	80033b8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302e:	2b00      	cmp	r3, #0
 8003030:	d008      	beq.n	8003044 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 020e 	orr.w	r2, r2, #14
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	e00f      	b.n	8003064 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0204 	bic.w	r2, r2, #4
 8003052:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 020a 	orr.w	r2, r2, #10
 8003062:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d007      	beq.n	8003082 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800307c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003080:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003086:	2b00      	cmp	r3, #0
 8003088:	d007      	beq.n	800309a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003094:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003098:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0201 	orr.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	e005      	b.n	80030b8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80030b4:	2302      	movs	r3, #2
 80030b6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80030b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b085      	sub	sp, #20
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d005      	beq.n	80030e6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2204      	movs	r2, #4
 80030de:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	73fb      	strb	r3, [r7, #15]
 80030e4:	e037      	b.n	8003156 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 020e 	bic.w	r2, r2, #14
 80030f4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003100:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003104:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0201 	bic.w	r2, r2, #1
 8003114:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311a:	f003 021f 	and.w	r2, r3, #31
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003122:	2101      	movs	r1, #1
 8003124:	fa01 f202 	lsl.w	r2, r1, r2
 8003128:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003132:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00c      	beq.n	8003156 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003146:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800314a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003154:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003166:	7bfb      	ldrb	r3, [r7, #15]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d00d      	beq.n	80031a8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2204      	movs	r2, #4
 8003190:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	73fb      	strb	r3, [r7, #15]
 80031a6:	e047      	b.n	8003238 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 020e 	bic.w	r2, r2, #14
 80031b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0201 	bic.w	r2, r2, #1
 80031c6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031dc:	f003 021f 	and.w	r2, r3, #31
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e4:	2101      	movs	r1, #1
 80031e6:	fa01 f202 	lsl.w	r2, r1, r2
 80031ea:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80031f4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00c      	beq.n	8003218 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003208:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800320c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003216:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	4798      	blx	r3
    }
  }
  return status;
 8003238:	7bfb      	ldrb	r3, [r7, #15]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b084      	sub	sp, #16
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325e:	f003 031f 	and.w	r3, r3, #31
 8003262:	2204      	movs	r2, #4
 8003264:	409a      	lsls	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4013      	ands	r3, r2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d026      	beq.n	80032bc <HAL_DMA_IRQHandler+0x7a>
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	d021      	beq.n	80032bc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	2b00      	cmp	r3, #0
 8003284:	d107      	bne.n	8003296 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0204 	bic.w	r2, r2, #4
 8003294:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329a:	f003 021f 	and.w	r2, r3, #31
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a2:	2104      	movs	r1, #4
 80032a4:	fa01 f202 	lsl.w	r2, r1, r2
 80032a8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d071      	beq.n	8003396 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80032ba:	e06c      	b.n	8003396 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c0:	f003 031f 	and.w	r3, r3, #31
 80032c4:	2202      	movs	r2, #2
 80032c6:	409a      	lsls	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d02e      	beq.n	800332e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d029      	beq.n	800332e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0320 	and.w	r3, r3, #32
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10b      	bne.n	8003300 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 020a 	bic.w	r2, r2, #10
 80032f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003304:	f003 021f 	and.w	r2, r3, #31
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330c:	2102      	movs	r1, #2
 800330e:	fa01 f202 	lsl.w	r2, r1, r2
 8003312:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003320:	2b00      	cmp	r3, #0
 8003322:	d038      	beq.n	8003396 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800332c:	e033      	b.n	8003396 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003332:	f003 031f 	and.w	r3, r3, #31
 8003336:	2208      	movs	r2, #8
 8003338:	409a      	lsls	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4013      	ands	r3, r2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d02a      	beq.n	8003398 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	f003 0308 	and.w	r3, r3, #8
 8003348:	2b00      	cmp	r3, #0
 800334a:	d025      	beq.n	8003398 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 020e 	bic.w	r2, r2, #14
 800335a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003360:	f003 021f 	and.w	r2, r3, #31
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003368:	2101      	movs	r1, #1
 800336a:	fa01 f202 	lsl.w	r2, r1, r2
 800336e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800338a:	2b00      	cmp	r3, #0
 800338c:	d004      	beq.n	8003398 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003396:	bf00      	nop
 8003398:	bf00      	nop
}
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
 80033c4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80033ce:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d004      	beq.n	80033e2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80033e0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e6:	f003 021f 	and.w	r2, r3, #31
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ee:	2101      	movs	r1, #1
 80033f0:	fa01 f202 	lsl.w	r2, r1, r2
 80033f4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	2b10      	cmp	r3, #16
 8003404:	d108      	bne.n	8003418 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003416:	e007      	b.n	8003428 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	60da      	str	r2, [r3, #12]
}
 8003428:	bf00      	nop
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003434:	b480      	push	{r7}
 8003436:	b087      	sub	sp, #28
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	4b16      	ldr	r3, [pc, #88]	@ (800349c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003444:	429a      	cmp	r2, r3
 8003446:	d802      	bhi.n	800344e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003448:	4b15      	ldr	r3, [pc, #84]	@ (80034a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800344a:	617b      	str	r3, [r7, #20]
 800344c:	e001      	b.n	8003452 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800344e:	4b15      	ldr	r3, [pc, #84]	@ (80034a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003450:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	b2db      	uxtb	r3, r3
 800345c:	3b08      	subs	r3, #8
 800345e:	4a12      	ldr	r2, [pc, #72]	@ (80034a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003460:	fba2 2303 	umull	r2, r3, r2, r3
 8003464:	091b      	lsrs	r3, r3, #4
 8003466:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800346c:	089b      	lsrs	r3, r3, #2
 800346e:	009a      	lsls	r2, r3, #2
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	4413      	add	r3, r2
 8003474:	461a      	mov	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a0b      	ldr	r2, [pc, #44]	@ (80034ac <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800347e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 031f 	and.w	r3, r3, #31
 8003486:	2201      	movs	r2, #1
 8003488:	409a      	lsls	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800348e:	bf00      	nop
 8003490:	371c      	adds	r7, #28
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40020407 	.word	0x40020407
 80034a0:	40020800 	.word	0x40020800
 80034a4:	40020820 	.word	0x40020820
 80034a8:	cccccccd 	.word	0xcccccccd
 80034ac:	40020880 	.word	0x40020880

080034b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4b0b      	ldr	r3, [pc, #44]	@ (80034f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80034c4:	4413      	add	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	461a      	mov	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a08      	ldr	r2, [pc, #32]	@ (80034f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80034d2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	f003 031f 	and.w	r3, r3, #31
 80034dc:	2201      	movs	r2, #1
 80034de:	409a      	lsls	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80034e4:	bf00      	nop
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	1000823f 	.word	0x1000823f
 80034f4:	40020940 	.word	0x40020940

080034f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003506:	e15a      	b.n	80037be <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	2101      	movs	r1, #1
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	fa01 f303 	lsl.w	r3, r1, r3
 8003514:	4013      	ands	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 814c 	beq.w	80037b8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	2b01      	cmp	r3, #1
 800352a:	d005      	beq.n	8003538 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003534:	2b02      	cmp	r3, #2
 8003536:	d130      	bne.n	800359a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	2203      	movs	r2, #3
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	4013      	ands	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	4313      	orrs	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800356e:	2201      	movs	r2, #1
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	43db      	mvns	r3, r3
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4013      	ands	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	091b      	lsrs	r3, r3, #4
 8003584:	f003 0201 	and.w	r2, r3, #1
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	4313      	orrs	r3, r2
 8003592:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d017      	beq.n	80035d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	2203      	movs	r2, #3
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43db      	mvns	r3, r3
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4013      	ands	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d123      	bne.n	800362a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	08da      	lsrs	r2, r3, #3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	3208      	adds	r2, #8
 80035ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	220f      	movs	r2, #15
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43db      	mvns	r3, r3
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4013      	ands	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	08da      	lsrs	r2, r3, #3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3208      	adds	r2, #8
 8003624:	6939      	ldr	r1, [r7, #16]
 8003626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	2203      	movs	r2, #3
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	43db      	mvns	r3, r3
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	4013      	ands	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f003 0203 	and.w	r2, r3, #3
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 80a6 	beq.w	80037b8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800366c:	4b5b      	ldr	r3, [pc, #364]	@ (80037dc <HAL_GPIO_Init+0x2e4>)
 800366e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003670:	4a5a      	ldr	r2, [pc, #360]	@ (80037dc <HAL_GPIO_Init+0x2e4>)
 8003672:	f043 0301 	orr.w	r3, r3, #1
 8003676:	6613      	str	r3, [r2, #96]	@ 0x60
 8003678:	4b58      	ldr	r3, [pc, #352]	@ (80037dc <HAL_GPIO_Init+0x2e4>)
 800367a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	60bb      	str	r3, [r7, #8]
 8003682:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003684:	4a56      	ldr	r2, [pc, #344]	@ (80037e0 <HAL_GPIO_Init+0x2e8>)
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	089b      	lsrs	r3, r3, #2
 800368a:	3302      	adds	r3, #2
 800368c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003690:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f003 0303 	and.w	r3, r3, #3
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	220f      	movs	r2, #15
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	43db      	mvns	r3, r3
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	4013      	ands	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80036ae:	d01f      	beq.n	80036f0 <HAL_GPIO_Init+0x1f8>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a4c      	ldr	r2, [pc, #304]	@ (80037e4 <HAL_GPIO_Init+0x2ec>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d019      	beq.n	80036ec <HAL_GPIO_Init+0x1f4>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a4b      	ldr	r2, [pc, #300]	@ (80037e8 <HAL_GPIO_Init+0x2f0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d013      	beq.n	80036e8 <HAL_GPIO_Init+0x1f0>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a4a      	ldr	r2, [pc, #296]	@ (80037ec <HAL_GPIO_Init+0x2f4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d00d      	beq.n	80036e4 <HAL_GPIO_Init+0x1ec>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a49      	ldr	r2, [pc, #292]	@ (80037f0 <HAL_GPIO_Init+0x2f8>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d007      	beq.n	80036e0 <HAL_GPIO_Init+0x1e8>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a48      	ldr	r2, [pc, #288]	@ (80037f4 <HAL_GPIO_Init+0x2fc>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d101      	bne.n	80036dc <HAL_GPIO_Init+0x1e4>
 80036d8:	2305      	movs	r3, #5
 80036da:	e00a      	b.n	80036f2 <HAL_GPIO_Init+0x1fa>
 80036dc:	2306      	movs	r3, #6
 80036de:	e008      	b.n	80036f2 <HAL_GPIO_Init+0x1fa>
 80036e0:	2304      	movs	r3, #4
 80036e2:	e006      	b.n	80036f2 <HAL_GPIO_Init+0x1fa>
 80036e4:	2303      	movs	r3, #3
 80036e6:	e004      	b.n	80036f2 <HAL_GPIO_Init+0x1fa>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e002      	b.n	80036f2 <HAL_GPIO_Init+0x1fa>
 80036ec:	2301      	movs	r3, #1
 80036ee:	e000      	b.n	80036f2 <HAL_GPIO_Init+0x1fa>
 80036f0:	2300      	movs	r3, #0
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	f002 0203 	and.w	r2, r2, #3
 80036f8:	0092      	lsls	r2, r2, #2
 80036fa:	4093      	lsls	r3, r2
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	4313      	orrs	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003702:	4937      	ldr	r1, [pc, #220]	@ (80037e0 <HAL_GPIO_Init+0x2e8>)
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	089b      	lsrs	r3, r3, #2
 8003708:	3302      	adds	r3, #2
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003710:	4b39      	ldr	r3, [pc, #228]	@ (80037f8 <HAL_GPIO_Init+0x300>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	43db      	mvns	r3, r3
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4013      	ands	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4313      	orrs	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003734:	4a30      	ldr	r2, [pc, #192]	@ (80037f8 <HAL_GPIO_Init+0x300>)
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800373a:	4b2f      	ldr	r3, [pc, #188]	@ (80037f8 <HAL_GPIO_Init+0x300>)
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	43db      	mvns	r3, r3
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	4013      	ands	r3, r2
 8003748:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800375e:	4a26      	ldr	r2, [pc, #152]	@ (80037f8 <HAL_GPIO_Init+0x300>)
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003764:	4b24      	ldr	r3, [pc, #144]	@ (80037f8 <HAL_GPIO_Init+0x300>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	43db      	mvns	r3, r3
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4013      	ands	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4313      	orrs	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003788:	4a1b      	ldr	r2, [pc, #108]	@ (80037f8 <HAL_GPIO_Init+0x300>)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800378e:	4b1a      	ldr	r3, [pc, #104]	@ (80037f8 <HAL_GPIO_Init+0x300>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	43db      	mvns	r3, r3
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4013      	ands	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037b2:	4a11      	ldr	r2, [pc, #68]	@ (80037f8 <HAL_GPIO_Init+0x300>)
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	3301      	adds	r3, #1
 80037bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	fa22 f303 	lsr.w	r3, r2, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f47f ae9d 	bne.w	8003508 <HAL_GPIO_Init+0x10>
  }
}
 80037ce:	bf00      	nop
 80037d0:	bf00      	nop
 80037d2:	371c      	adds	r7, #28
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	40021000 	.word	0x40021000
 80037e0:	40010000 	.word	0x40010000
 80037e4:	48000400 	.word	0x48000400
 80037e8:	48000800 	.word	0x48000800
 80037ec:	48000c00 	.word	0x48000c00
 80037f0:	48001000 	.word	0x48001000
 80037f4:	48001400 	.word	0x48001400
 80037f8:	40010400 	.word	0x40010400

080037fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	807b      	strh	r3, [r7, #2]
 8003808:	4613      	mov	r3, r2
 800380a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800380c:	787b      	ldrb	r3, [r7, #1]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003812:	887a      	ldrh	r2, [r7, #2]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003818:	e002      	b.n	8003820 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800381a:	887a      	ldrh	r2, [r7, #2]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003836:	4b08      	ldr	r3, [pc, #32]	@ (8003858 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003838:	695a      	ldr	r2, [r3, #20]
 800383a:	88fb      	ldrh	r3, [r7, #6]
 800383c:	4013      	ands	r3, r2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d006      	beq.n	8003850 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003842:	4a05      	ldr	r2, [pc, #20]	@ (8003858 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003844:	88fb      	ldrh	r3, [r7, #6]
 8003846:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003848:	88fb      	ldrh	r3, [r7, #6]
 800384a:	4618      	mov	r0, r3
 800384c:	f000 f806 	bl	800385c <HAL_GPIO_EXTI_Callback>
  }
}
 8003850:	bf00      	nop
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40010400 	.word	0x40010400

0800385c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b084      	sub	sp, #16
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e041      	b.n	8003908 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 800388c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f245 5255 	movw	r2, #21845	@ 0x5555
 8003896:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6852      	ldr	r2, [r2, #4]
 80038a0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6892      	ldr	r2, [r2, #8]
 80038aa:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80038ac:	f7ff f9fa 	bl	8002ca4 <HAL_GetTick>
 80038b0:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80038b2:	e00f      	b.n	80038d4 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80038b4:	f7ff f9f6 	bl	8002ca4 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b31      	cmp	r3, #49	@ 0x31
 80038c0:	d908      	bls.n	80038d4 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e019      	b.n	8003908 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1e8      	bne.n	80038b4 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	691a      	ldr	r2, [r3, #16]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d005      	beq.n	80038fc <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	68d2      	ldr	r2, [r2, #12]
 80038f8:	611a      	str	r2, [r3, #16]
 80038fa:	e004      	b.n	8003906 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8003904:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8003920:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d141      	bne.n	80039c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800393e:	4b4b      	ldr	r3, [pc, #300]	@ (8003a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003946:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800394a:	d131      	bne.n	80039b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800394c:	4b47      	ldr	r3, [pc, #284]	@ (8003a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800394e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003952:	4a46      	ldr	r2, [pc, #280]	@ (8003a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003954:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003958:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800395c:	4b43      	ldr	r3, [pc, #268]	@ (8003a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003964:	4a41      	ldr	r2, [pc, #260]	@ (8003a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003966:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800396a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800396c:	4b40      	ldr	r3, [pc, #256]	@ (8003a70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2232      	movs	r2, #50	@ 0x32
 8003972:	fb02 f303 	mul.w	r3, r2, r3
 8003976:	4a3f      	ldr	r2, [pc, #252]	@ (8003a74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003978:	fba2 2303 	umull	r2, r3, r2, r3
 800397c:	0c9b      	lsrs	r3, r3, #18
 800397e:	3301      	adds	r3, #1
 8003980:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003982:	e002      	b.n	800398a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	3b01      	subs	r3, #1
 8003988:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800398a:	4b38      	ldr	r3, [pc, #224]	@ (8003a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003992:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003996:	d102      	bne.n	800399e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1f2      	bne.n	8003984 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800399e:	4b33      	ldr	r3, [pc, #204]	@ (8003a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039aa:	d158      	bne.n	8003a5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e057      	b.n	8003a60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039b0:	4b2e      	ldr	r3, [pc, #184]	@ (8003a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039b6:	4a2d      	ldr	r2, [pc, #180]	@ (8003a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80039c0:	e04d      	b.n	8003a5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039c8:	d141      	bne.n	8003a4e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039ca:	4b28      	ldr	r3, [pc, #160]	@ (8003a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80039d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039d6:	d131      	bne.n	8003a3c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039d8:	4b24      	ldr	r3, [pc, #144]	@ (8003a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039de:	4a23      	ldr	r2, [pc, #140]	@ (8003a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039e8:	4b20      	ldr	r3, [pc, #128]	@ (8003a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80039f0:	4a1e      	ldr	r2, [pc, #120]	@ (8003a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003a70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2232      	movs	r2, #50	@ 0x32
 80039fe:	fb02 f303 	mul.w	r3, r2, r3
 8003a02:	4a1c      	ldr	r2, [pc, #112]	@ (8003a74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a04:	fba2 2303 	umull	r2, r3, r2, r3
 8003a08:	0c9b      	lsrs	r3, r3, #18
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a0e:	e002      	b.n	8003a16 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a16:	4b15      	ldr	r3, [pc, #84]	@ (8003a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a22:	d102      	bne.n	8003a2a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1f2      	bne.n	8003a10 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a2a:	4b10      	ldr	r3, [pc, #64]	@ (8003a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a36:	d112      	bne.n	8003a5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e011      	b.n	8003a60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a42:	4a0a      	ldr	r2, [pc, #40]	@ (8003a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003a4c:	e007      	b.n	8003a5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a4e:	4b07      	ldr	r3, [pc, #28]	@ (8003a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a56:	4a05      	ldr	r2, [pc, #20]	@ (8003a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a58:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a5c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	40007000 	.word	0x40007000
 8003a70:	20000004 	.word	0x20000004
 8003a74:	431bde83 	.word	0x431bde83

08003a78 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003a7c:	4b05      	ldr	r3, [pc, #20]	@ (8003a94 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	4a04      	ldr	r2, [pc, #16]	@ (8003a94 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a86:	6093      	str	r3, [r2, #8]
}
 8003a88:	bf00      	nop
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	40007000 	.word	0x40007000

08003a98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e2fe      	b.n	80040a8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d075      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ab6:	4b97      	ldr	r3, [pc, #604]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 030c 	and.w	r3, r3, #12
 8003abe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ac0:	4b94      	ldr	r3, [pc, #592]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f003 0303 	and.w	r3, r3, #3
 8003ac8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	2b0c      	cmp	r3, #12
 8003ace:	d102      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x3e>
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2b03      	cmp	r3, #3
 8003ad4:	d002      	beq.n	8003adc <HAL_RCC_OscConfig+0x44>
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d10b      	bne.n	8003af4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003adc:	4b8d      	ldr	r3, [pc, #564]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d05b      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x108>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d157      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e2d9      	b.n	80040a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003afc:	d106      	bne.n	8003b0c <HAL_RCC_OscConfig+0x74>
 8003afe:	4b85      	ldr	r3, [pc, #532]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a84      	ldr	r2, [pc, #528]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003b04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	e01d      	b.n	8003b48 <HAL_RCC_OscConfig+0xb0>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b14:	d10c      	bne.n	8003b30 <HAL_RCC_OscConfig+0x98>
 8003b16:	4b7f      	ldr	r3, [pc, #508]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a7e      	ldr	r2, [pc, #504]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003b1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	4b7c      	ldr	r3, [pc, #496]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a7b      	ldr	r2, [pc, #492]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003b28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	e00b      	b.n	8003b48 <HAL_RCC_OscConfig+0xb0>
 8003b30:	4b78      	ldr	r3, [pc, #480]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a77      	ldr	r2, [pc, #476]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003b36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b3a:	6013      	str	r3, [r2, #0]
 8003b3c:	4b75      	ldr	r3, [pc, #468]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a74      	ldr	r2, [pc, #464]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003b42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d013      	beq.n	8003b78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b50:	f7ff f8a8 	bl	8002ca4 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b58:	f7ff f8a4 	bl	8002ca4 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	@ 0x64
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e29e      	b.n	80040a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b6a:	4b6a      	ldr	r3, [pc, #424]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0f0      	beq.n	8003b58 <HAL_RCC_OscConfig+0xc0>
 8003b76:	e014      	b.n	8003ba2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b78:	f7ff f894 	bl	8002ca4 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b80:	f7ff f890 	bl	8002ca4 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b64      	cmp	r3, #100	@ 0x64
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e28a      	b.n	80040a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b92:	4b60      	ldr	r3, [pc, #384]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f0      	bne.n	8003b80 <HAL_RCC_OscConfig+0xe8>
 8003b9e:	e000      	b.n	8003ba2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d075      	beq.n	8003c9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bae:	4b59      	ldr	r3, [pc, #356]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 030c 	and.w	r3, r3, #12
 8003bb6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bb8:	4b56      	ldr	r3, [pc, #344]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f003 0303 	and.w	r3, r3, #3
 8003bc0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	2b0c      	cmp	r3, #12
 8003bc6:	d102      	bne.n	8003bce <HAL_RCC_OscConfig+0x136>
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d002      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x13c>
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d11f      	bne.n	8003c14 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bd4:	4b4f      	ldr	r3, [pc, #316]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d005      	beq.n	8003bec <HAL_RCC_OscConfig+0x154>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e25d      	b.n	80040a8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bec:	4b49      	ldr	r3, [pc, #292]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	061b      	lsls	r3, r3, #24
 8003bfa:	4946      	ldr	r1, [pc, #280]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c00:	4b45      	ldr	r3, [pc, #276]	@ (8003d18 <HAL_RCC_OscConfig+0x280>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7fe fa35 	bl	8002074 <HAL_InitTick>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d043      	beq.n	8003c98 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e249      	b.n	80040a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d023      	beq.n	8003c64 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c1c:	4b3d      	ldr	r3, [pc, #244]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a3c      	ldr	r2, [pc, #240]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003c22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c28:	f7ff f83c 	bl	8002ca4 <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c30:	f7ff f838 	bl	8002ca4 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e232      	b.n	80040a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c42:	4b34      	ldr	r3, [pc, #208]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0f0      	beq.n	8003c30 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c4e:	4b31      	ldr	r3, [pc, #196]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	061b      	lsls	r3, r3, #24
 8003c5c:	492d      	ldr	r1, [pc, #180]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	604b      	str	r3, [r1, #4]
 8003c62:	e01a      	b.n	8003c9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c64:	4b2b      	ldr	r3, [pc, #172]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a2a      	ldr	r2, [pc, #168]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003c6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c70:	f7ff f818 	bl	8002ca4 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c78:	f7ff f814 	bl	8002ca4 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e20e      	b.n	80040a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c8a:	4b22      	ldr	r3, [pc, #136]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f0      	bne.n	8003c78 <HAL_RCC_OscConfig+0x1e0>
 8003c96:	e000      	b.n	8003c9a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d041      	beq.n	8003d2a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d01c      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cae:	4b19      	ldr	r3, [pc, #100]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cb4:	4a17      	ldr	r2, [pc, #92]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003cb6:	f043 0301 	orr.w	r3, r3, #1
 8003cba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cbe:	f7fe fff1 	bl	8002ca4 <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc6:	f7fe ffed 	bl	8002ca4 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e1e7      	b.n	80040a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0ef      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x22e>
 8003ce6:	e020      	b.n	8003d2a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cee:	4a09      	ldr	r2, [pc, #36]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003cf0:	f023 0301 	bic.w	r3, r3, #1
 8003cf4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf8:	f7fe ffd4 	bl	8002ca4 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cfe:	e00d      	b.n	8003d1c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d00:	f7fe ffd0 	bl	8002ca4 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d906      	bls.n	8003d1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e1ca      	b.n	80040a8 <HAL_RCC_OscConfig+0x610>
 8003d12:	bf00      	nop
 8003d14:	40021000 	.word	0x40021000
 8003d18:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d1c:	4b8c      	ldr	r3, [pc, #560]	@ (8003f50 <HAL_RCC_OscConfig+0x4b8>)
 8003d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1ea      	bne.n	8003d00 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 80a6 	beq.w	8003e84 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d3c:	4b84      	ldr	r3, [pc, #528]	@ (8003f50 <HAL_RCC_OscConfig+0x4b8>)
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_RCC_OscConfig+0x2b4>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e000      	b.n	8003d4e <HAL_RCC_OscConfig+0x2b6>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00d      	beq.n	8003d6e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d52:	4b7f      	ldr	r3, [pc, #508]	@ (8003f50 <HAL_RCC_OscConfig+0x4b8>)
 8003d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d56:	4a7e      	ldr	r2, [pc, #504]	@ (8003f50 <HAL_RCC_OscConfig+0x4b8>)
 8003d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d5e:	4b7c      	ldr	r3, [pc, #496]	@ (8003f50 <HAL_RCC_OscConfig+0x4b8>)
 8003d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d6e:	4b79      	ldr	r3, [pc, #484]	@ (8003f54 <HAL_RCC_OscConfig+0x4bc>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d118      	bne.n	8003dac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d7a:	4b76      	ldr	r3, [pc, #472]	@ (8003f54 <HAL_RCC_OscConfig+0x4bc>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a75      	ldr	r2, [pc, #468]	@ (8003f54 <HAL_RCC_OscConfig+0x4bc>)
 8003d80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d86:	f7fe ff8d 	bl	8002ca4 <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d8e:	f7fe ff89 	bl	8002ca4 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e183      	b.n	80040a8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003da0:	4b6c      	ldr	r3, [pc, #432]	@ (8003f54 <HAL_RCC_OscConfig+0x4bc>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0f0      	beq.n	8003d8e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d108      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x32e>
 8003db4:	4b66      	ldr	r3, [pc, #408]	@ (8003f50 <HAL_RCC_OscConfig+0x4b8>)
 8003db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dba:	4a65      	ldr	r2, [pc, #404]	@ (8003f50 <HAL_RCC_OscConfig+0x4b8>)
 8003dbc:	f043 0301 	orr.w	r3, r3, #1
 8003dc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dc4:	e024      	b.n	8003e10 <HAL_RCC_OscConfig+0x378>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	2b05      	cmp	r3, #5
 8003dcc:	d110      	bne.n	8003df0 <HAL_RCC_OscConfig+0x358>
 8003dce:	4b60      	ldr	r3, [pc, #384]	@ (8003f50 <HAL_RCC_OscConfig+0x4b8>)
 8003dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd4:	4a5e      	ldr	r2, [pc, #376]	@ (8003f50 <HAL_RCC_OscConfig+0x4b8>)
 8003dd6:	f043 0304 	orr.w	r3, r3, #4
 8003dda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dde:	4b5c      	ldr	r3, [pc, #368]	@ (8003f50 <HAL_RCC_OscConfig+0x4b8>)
 8003de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de4:	4a5a      	ldr	r2, [pc, #360]	@ (8003f50 <HAL_RCC_OscConfig+0x4b8>)
 8003de6:	f043 0301 	orr.w	r3, r3, #1
 8003dea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dee:	e00f      	b.n	8003e10 <HAL_RCC_OscConfig+0x378>
 8003df0:	4b57      	ldr	r3, [pc, #348]	@ (8003f50 <HAL_RCC_OscConfig+0x4b8>)
 8003df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df6:	4a56      	ldr	r2, [pc, #344]	@ (8003f50 <HAL_RCC_OscConfig+0x4b8>)
 8003df8:	f023 0301 	bic.w	r3, r3, #1
 8003dfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e00:	4b53      	ldr	r3, [pc, #332]	@ (8003f50 <HAL_RCC_OscConfig+0x4b8>)
 8003e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e06:	4a52      	ldr	r2, [pc, #328]	@ (8003f50 <HAL_RCC_OscConfig+0x4b8>)
 8003e08:	f023 0304 	bic.w	r3, r3, #4
 8003e0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d016      	beq.n	8003e46 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e18:	f7fe ff44 	bl	8002ca4 <HAL_GetTick>
 8003e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e1e:	e00a      	b.n	8003e36 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e20:	f7fe ff40 	bl	8002ca4 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e138      	b.n	80040a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e36:	4b46      	ldr	r3, [pc, #280]	@ (8003f50 <HAL_RCC_OscConfig+0x4b8>)
 8003e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0ed      	beq.n	8003e20 <HAL_RCC_OscConfig+0x388>
 8003e44:	e015      	b.n	8003e72 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e46:	f7fe ff2d 	bl	8002ca4 <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e4c:	e00a      	b.n	8003e64 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4e:	f7fe ff29 	bl	8002ca4 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e121      	b.n	80040a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e64:	4b3a      	ldr	r3, [pc, #232]	@ (8003f50 <HAL_RCC_OscConfig+0x4b8>)
 8003e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1ed      	bne.n	8003e4e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e72:	7ffb      	ldrb	r3, [r7, #31]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d105      	bne.n	8003e84 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e78:	4b35      	ldr	r3, [pc, #212]	@ (8003f50 <HAL_RCC_OscConfig+0x4b8>)
 8003e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e7c:	4a34      	ldr	r2, [pc, #208]	@ (8003f50 <HAL_RCC_OscConfig+0x4b8>)
 8003e7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e82:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0320 	and.w	r3, r3, #32
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d03c      	beq.n	8003f0a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d01c      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e98:	4b2d      	ldr	r3, [pc, #180]	@ (8003f50 <HAL_RCC_OscConfig+0x4b8>)
 8003e9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e9e:	4a2c      	ldr	r2, [pc, #176]	@ (8003f50 <HAL_RCC_OscConfig+0x4b8>)
 8003ea0:	f043 0301 	orr.w	r3, r3, #1
 8003ea4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea8:	f7fe fefc 	bl	8002ca4 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003eb0:	f7fe fef8 	bl	8002ca4 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e0f2      	b.n	80040a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ec2:	4b23      	ldr	r3, [pc, #140]	@ (8003f50 <HAL_RCC_OscConfig+0x4b8>)
 8003ec4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0ef      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x418>
 8003ed0:	e01b      	b.n	8003f0a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ed2:	4b1f      	ldr	r3, [pc, #124]	@ (8003f50 <HAL_RCC_OscConfig+0x4b8>)
 8003ed4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8003f50 <HAL_RCC_OscConfig+0x4b8>)
 8003eda:	f023 0301 	bic.w	r3, r3, #1
 8003ede:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee2:	f7fe fedf 	bl	8002ca4 <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ee8:	e008      	b.n	8003efc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003eea:	f7fe fedb 	bl	8002ca4 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d901      	bls.n	8003efc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e0d5      	b.n	80040a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003efc:	4b14      	ldr	r3, [pc, #80]	@ (8003f50 <HAL_RCC_OscConfig+0x4b8>)
 8003efe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1ef      	bne.n	8003eea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 80c9 	beq.w	80040a6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f14:	4b0e      	ldr	r3, [pc, #56]	@ (8003f50 <HAL_RCC_OscConfig+0x4b8>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f003 030c 	and.w	r3, r3, #12
 8003f1c:	2b0c      	cmp	r3, #12
 8003f1e:	f000 8083 	beq.w	8004028 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d15e      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2a:	4b09      	ldr	r3, [pc, #36]	@ (8003f50 <HAL_RCC_OscConfig+0x4b8>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a08      	ldr	r2, [pc, #32]	@ (8003f50 <HAL_RCC_OscConfig+0x4b8>)
 8003f30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f36:	f7fe feb5 	bl	8002ca4 <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f3c:	e00c      	b.n	8003f58 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f3e:	f7fe feb1 	bl	8002ca4 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d905      	bls.n	8003f58 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e0ab      	b.n	80040a8 <HAL_RCC_OscConfig+0x610>
 8003f50:	40021000 	.word	0x40021000
 8003f54:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f58:	4b55      	ldr	r3, [pc, #340]	@ (80040b0 <HAL_RCC_OscConfig+0x618>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1ec      	bne.n	8003f3e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f64:	4b52      	ldr	r3, [pc, #328]	@ (80040b0 <HAL_RCC_OscConfig+0x618>)
 8003f66:	68da      	ldr	r2, [r3, #12]
 8003f68:	4b52      	ldr	r3, [pc, #328]	@ (80040b4 <HAL_RCC_OscConfig+0x61c>)
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6a11      	ldr	r1, [r2, #32]
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f74:	3a01      	subs	r2, #1
 8003f76:	0112      	lsls	r2, r2, #4
 8003f78:	4311      	orrs	r1, r2
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003f7e:	0212      	lsls	r2, r2, #8
 8003f80:	4311      	orrs	r1, r2
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003f86:	0852      	lsrs	r2, r2, #1
 8003f88:	3a01      	subs	r2, #1
 8003f8a:	0552      	lsls	r2, r2, #21
 8003f8c:	4311      	orrs	r1, r2
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003f92:	0852      	lsrs	r2, r2, #1
 8003f94:	3a01      	subs	r2, #1
 8003f96:	0652      	lsls	r2, r2, #25
 8003f98:	4311      	orrs	r1, r2
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f9e:	06d2      	lsls	r2, r2, #27
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	4943      	ldr	r1, [pc, #268]	@ (80040b0 <HAL_RCC_OscConfig+0x618>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fa8:	4b41      	ldr	r3, [pc, #260]	@ (80040b0 <HAL_RCC_OscConfig+0x618>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a40      	ldr	r2, [pc, #256]	@ (80040b0 <HAL_RCC_OscConfig+0x618>)
 8003fae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fb2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fb4:	4b3e      	ldr	r3, [pc, #248]	@ (80040b0 <HAL_RCC_OscConfig+0x618>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	4a3d      	ldr	r2, [pc, #244]	@ (80040b0 <HAL_RCC_OscConfig+0x618>)
 8003fba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fbe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc0:	f7fe fe70 	bl	8002ca4 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc8:	f7fe fe6c 	bl	8002ca4 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e066      	b.n	80040a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fda:	4b35      	ldr	r3, [pc, #212]	@ (80040b0 <HAL_RCC_OscConfig+0x618>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x530>
 8003fe6:	e05e      	b.n	80040a6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fe8:	4b31      	ldr	r3, [pc, #196]	@ (80040b0 <HAL_RCC_OscConfig+0x618>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a30      	ldr	r2, [pc, #192]	@ (80040b0 <HAL_RCC_OscConfig+0x618>)
 8003fee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff4:	f7fe fe56 	bl	8002ca4 <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ffc:	f7fe fe52 	bl	8002ca4 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e04c      	b.n	80040a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800400e:	4b28      	ldr	r3, [pc, #160]	@ (80040b0 <HAL_RCC_OscConfig+0x618>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1f0      	bne.n	8003ffc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800401a:	4b25      	ldr	r3, [pc, #148]	@ (80040b0 <HAL_RCC_OscConfig+0x618>)
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	4924      	ldr	r1, [pc, #144]	@ (80040b0 <HAL_RCC_OscConfig+0x618>)
 8004020:	4b25      	ldr	r3, [pc, #148]	@ (80040b8 <HAL_RCC_OscConfig+0x620>)
 8004022:	4013      	ands	r3, r2
 8004024:	60cb      	str	r3, [r1, #12]
 8004026:	e03e      	b.n	80040a6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e039      	b.n	80040a8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004034:	4b1e      	ldr	r3, [pc, #120]	@ (80040b0 <HAL_RCC_OscConfig+0x618>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f003 0203 	and.w	r2, r3, #3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	429a      	cmp	r2, r3
 8004046:	d12c      	bne.n	80040a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004052:	3b01      	subs	r3, #1
 8004054:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004056:	429a      	cmp	r2, r3
 8004058:	d123      	bne.n	80040a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004064:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004066:	429a      	cmp	r2, r3
 8004068:	d11b      	bne.n	80040a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004074:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004076:	429a      	cmp	r2, r3
 8004078:	d113      	bne.n	80040a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004084:	085b      	lsrs	r3, r3, #1
 8004086:	3b01      	subs	r3, #1
 8004088:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800408a:	429a      	cmp	r2, r3
 800408c:	d109      	bne.n	80040a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004098:	085b      	lsrs	r3, r3, #1
 800409a:	3b01      	subs	r3, #1
 800409c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800409e:	429a      	cmp	r2, r3
 80040a0:	d001      	beq.n	80040a6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e000      	b.n	80040a8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3720      	adds	r7, #32
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	40021000 	.word	0x40021000
 80040b4:	019f800c 	.word	0x019f800c
 80040b8:	feeefffc 	.word	0xfeeefffc

080040bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80040c6:	2300      	movs	r3, #0
 80040c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e11e      	b.n	8004312 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040d4:	4b91      	ldr	r3, [pc, #580]	@ (800431c <HAL_RCC_ClockConfig+0x260>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 030f 	and.w	r3, r3, #15
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d910      	bls.n	8004104 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e2:	4b8e      	ldr	r3, [pc, #568]	@ (800431c <HAL_RCC_ClockConfig+0x260>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f023 020f 	bic.w	r2, r3, #15
 80040ea:	498c      	ldr	r1, [pc, #560]	@ (800431c <HAL_RCC_ClockConfig+0x260>)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f2:	4b8a      	ldr	r3, [pc, #552]	@ (800431c <HAL_RCC_ClockConfig+0x260>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d001      	beq.n	8004104 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e106      	b.n	8004312 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	2b00      	cmp	r3, #0
 800410e:	d073      	beq.n	80041f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2b03      	cmp	r3, #3
 8004116:	d129      	bne.n	800416c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004118:	4b81      	ldr	r3, [pc, #516]	@ (8004320 <HAL_RCC_ClockConfig+0x264>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e0f4      	b.n	8004312 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004128:	f000 f9d0 	bl	80044cc <RCC_GetSysClockFreqFromPLLSource>
 800412c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	4a7c      	ldr	r2, [pc, #496]	@ (8004324 <HAL_RCC_ClockConfig+0x268>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d93f      	bls.n	80041b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004136:	4b7a      	ldr	r3, [pc, #488]	@ (8004320 <HAL_RCC_ClockConfig+0x264>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d009      	beq.n	8004156 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800414a:	2b00      	cmp	r3, #0
 800414c:	d033      	beq.n	80041b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004152:	2b00      	cmp	r3, #0
 8004154:	d12f      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004156:	4b72      	ldr	r3, [pc, #456]	@ (8004320 <HAL_RCC_ClockConfig+0x264>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800415e:	4a70      	ldr	r2, [pc, #448]	@ (8004320 <HAL_RCC_ClockConfig+0x264>)
 8004160:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004164:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004166:	2380      	movs	r3, #128	@ 0x80
 8004168:	617b      	str	r3, [r7, #20]
 800416a:	e024      	b.n	80041b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2b02      	cmp	r3, #2
 8004172:	d107      	bne.n	8004184 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004174:	4b6a      	ldr	r3, [pc, #424]	@ (8004320 <HAL_RCC_ClockConfig+0x264>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d109      	bne.n	8004194 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e0c6      	b.n	8004312 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004184:	4b66      	ldr	r3, [pc, #408]	@ (8004320 <HAL_RCC_ClockConfig+0x264>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e0be      	b.n	8004312 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004194:	f000 f8ce 	bl	8004334 <HAL_RCC_GetSysClockFreq>
 8004198:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	4a61      	ldr	r2, [pc, #388]	@ (8004324 <HAL_RCC_ClockConfig+0x268>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d909      	bls.n	80041b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041a2:	4b5f      	ldr	r3, [pc, #380]	@ (8004320 <HAL_RCC_ClockConfig+0x264>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041aa:	4a5d      	ldr	r2, [pc, #372]	@ (8004320 <HAL_RCC_ClockConfig+0x264>)
 80041ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80041b2:	2380      	movs	r3, #128	@ 0x80
 80041b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041b6:	4b5a      	ldr	r3, [pc, #360]	@ (8004320 <HAL_RCC_ClockConfig+0x264>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f023 0203 	bic.w	r2, r3, #3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	4957      	ldr	r1, [pc, #348]	@ (8004320 <HAL_RCC_ClockConfig+0x264>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041c8:	f7fe fd6c 	bl	8002ca4 <HAL_GetTick>
 80041cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ce:	e00a      	b.n	80041e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041d0:	f7fe fd68 	bl	8002ca4 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041de:	4293      	cmp	r3, r2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e095      	b.n	8004312 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041e6:	4b4e      	ldr	r3, [pc, #312]	@ (8004320 <HAL_RCC_ClockConfig+0x264>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 020c 	and.w	r2, r3, #12
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d1eb      	bne.n	80041d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d023      	beq.n	800424c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0304 	and.w	r3, r3, #4
 800420c:	2b00      	cmp	r3, #0
 800420e:	d005      	beq.n	800421c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004210:	4b43      	ldr	r3, [pc, #268]	@ (8004320 <HAL_RCC_ClockConfig+0x264>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	4a42      	ldr	r2, [pc, #264]	@ (8004320 <HAL_RCC_ClockConfig+0x264>)
 8004216:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800421a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0308 	and.w	r3, r3, #8
 8004224:	2b00      	cmp	r3, #0
 8004226:	d007      	beq.n	8004238 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004228:	4b3d      	ldr	r3, [pc, #244]	@ (8004320 <HAL_RCC_ClockConfig+0x264>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004230:	4a3b      	ldr	r2, [pc, #236]	@ (8004320 <HAL_RCC_ClockConfig+0x264>)
 8004232:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004236:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004238:	4b39      	ldr	r3, [pc, #228]	@ (8004320 <HAL_RCC_ClockConfig+0x264>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	4936      	ldr	r1, [pc, #216]	@ (8004320 <HAL_RCC_ClockConfig+0x264>)
 8004246:	4313      	orrs	r3, r2
 8004248:	608b      	str	r3, [r1, #8]
 800424a:	e008      	b.n	800425e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	2b80      	cmp	r3, #128	@ 0x80
 8004250:	d105      	bne.n	800425e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004252:	4b33      	ldr	r3, [pc, #204]	@ (8004320 <HAL_RCC_ClockConfig+0x264>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	4a32      	ldr	r2, [pc, #200]	@ (8004320 <HAL_RCC_ClockConfig+0x264>)
 8004258:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800425c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800425e:	4b2f      	ldr	r3, [pc, #188]	@ (800431c <HAL_RCC_ClockConfig+0x260>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d21d      	bcs.n	80042a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800426c:	4b2b      	ldr	r3, [pc, #172]	@ (800431c <HAL_RCC_ClockConfig+0x260>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f023 020f 	bic.w	r2, r3, #15
 8004274:	4929      	ldr	r1, [pc, #164]	@ (800431c <HAL_RCC_ClockConfig+0x260>)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	4313      	orrs	r3, r2
 800427a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800427c:	f7fe fd12 	bl	8002ca4 <HAL_GetTick>
 8004280:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004282:	e00a      	b.n	800429a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004284:	f7fe fd0e 	bl	8002ca4 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004292:	4293      	cmp	r3, r2
 8004294:	d901      	bls.n	800429a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e03b      	b.n	8004312 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800429a:	4b20      	ldr	r3, [pc, #128]	@ (800431c <HAL_RCC_ClockConfig+0x260>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d1ed      	bne.n	8004284 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d008      	beq.n	80042c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004320 <HAL_RCC_ClockConfig+0x264>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	4917      	ldr	r1, [pc, #92]	@ (8004320 <HAL_RCC_ClockConfig+0x264>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d009      	beq.n	80042e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042d2:	4b13      	ldr	r3, [pc, #76]	@ (8004320 <HAL_RCC_ClockConfig+0x264>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	490f      	ldr	r1, [pc, #60]	@ (8004320 <HAL_RCC_ClockConfig+0x264>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042e6:	f000 f825 	bl	8004334 <HAL_RCC_GetSysClockFreq>
 80042ea:	4602      	mov	r2, r0
 80042ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004320 <HAL_RCC_ClockConfig+0x264>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	091b      	lsrs	r3, r3, #4
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	490c      	ldr	r1, [pc, #48]	@ (8004328 <HAL_RCC_ClockConfig+0x26c>)
 80042f8:	5ccb      	ldrb	r3, [r1, r3]
 80042fa:	f003 031f 	and.w	r3, r3, #31
 80042fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004302:	4a0a      	ldr	r2, [pc, #40]	@ (800432c <HAL_RCC_ClockConfig+0x270>)
 8004304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004306:	4b0a      	ldr	r3, [pc, #40]	@ (8004330 <HAL_RCC_ClockConfig+0x274>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4618      	mov	r0, r3
 800430c:	f7fd feb2 	bl	8002074 <HAL_InitTick>
 8004310:	4603      	mov	r3, r0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40022000 	.word	0x40022000
 8004320:	40021000 	.word	0x40021000
 8004324:	04c4b400 	.word	0x04c4b400
 8004328:	0801872c 	.word	0x0801872c
 800432c:	20000004 	.word	0x20000004
 8004330:	20000008 	.word	0x20000008

08004334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004334:	b480      	push	{r7}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800433a:	4b2c      	ldr	r3, [pc, #176]	@ (80043ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 030c 	and.w	r3, r3, #12
 8004342:	2b04      	cmp	r3, #4
 8004344:	d102      	bne.n	800434c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004346:	4b2a      	ldr	r3, [pc, #168]	@ (80043f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	e047      	b.n	80043dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800434c:	4b27      	ldr	r3, [pc, #156]	@ (80043ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f003 030c 	and.w	r3, r3, #12
 8004354:	2b08      	cmp	r3, #8
 8004356:	d102      	bne.n	800435e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004358:	4b26      	ldr	r3, [pc, #152]	@ (80043f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	e03e      	b.n	80043dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800435e:	4b23      	ldr	r3, [pc, #140]	@ (80043ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 030c 	and.w	r3, r3, #12
 8004366:	2b0c      	cmp	r3, #12
 8004368:	d136      	bne.n	80043d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800436a:	4b20      	ldr	r3, [pc, #128]	@ (80043ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f003 0303 	and.w	r3, r3, #3
 8004372:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004374:	4b1d      	ldr	r3, [pc, #116]	@ (80043ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	091b      	lsrs	r3, r3, #4
 800437a:	f003 030f 	and.w	r3, r3, #15
 800437e:	3301      	adds	r3, #1
 8004380:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2b03      	cmp	r3, #3
 8004386:	d10c      	bne.n	80043a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004388:	4a1a      	ldr	r2, [pc, #104]	@ (80043f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004390:	4a16      	ldr	r2, [pc, #88]	@ (80043ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8004392:	68d2      	ldr	r2, [r2, #12]
 8004394:	0a12      	lsrs	r2, r2, #8
 8004396:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800439a:	fb02 f303 	mul.w	r3, r2, r3
 800439e:	617b      	str	r3, [r7, #20]
      break;
 80043a0:	e00c      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80043a2:	4a13      	ldr	r2, [pc, #76]	@ (80043f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043aa:	4a10      	ldr	r2, [pc, #64]	@ (80043ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80043ac:	68d2      	ldr	r2, [r2, #12]
 80043ae:	0a12      	lsrs	r2, r2, #8
 80043b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80043b4:	fb02 f303 	mul.w	r3, r2, r3
 80043b8:	617b      	str	r3, [r7, #20]
      break;
 80043ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043bc:	4b0b      	ldr	r3, [pc, #44]	@ (80043ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	0e5b      	lsrs	r3, r3, #25
 80043c2:	f003 0303 	and.w	r3, r3, #3
 80043c6:	3301      	adds	r3, #1
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d4:	613b      	str	r3, [r7, #16]
 80043d6:	e001      	b.n	80043dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80043dc:	693b      	ldr	r3, [r7, #16]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	371c      	adds	r7, #28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	40021000 	.word	0x40021000
 80043f0:	00f42400 	.word	0x00f42400
 80043f4:	016e3600 	.word	0x016e3600

080043f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043fc:	4b03      	ldr	r3, [pc, #12]	@ (800440c <HAL_RCC_GetHCLKFreq+0x14>)
 80043fe:	681b      	ldr	r3, [r3, #0]
}
 8004400:	4618      	mov	r0, r3
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	20000004 	.word	0x20000004

08004410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004414:	f7ff fff0 	bl	80043f8 <HAL_RCC_GetHCLKFreq>
 8004418:	4602      	mov	r2, r0
 800441a:	4b06      	ldr	r3, [pc, #24]	@ (8004434 <HAL_RCC_GetPCLK1Freq+0x24>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	0a1b      	lsrs	r3, r3, #8
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	4904      	ldr	r1, [pc, #16]	@ (8004438 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004426:	5ccb      	ldrb	r3, [r1, r3]
 8004428:	f003 031f 	and.w	r3, r3, #31
 800442c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004430:	4618      	mov	r0, r3
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40021000 	.word	0x40021000
 8004438:	0801873c 	.word	0x0801873c

0800443c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004440:	f7ff ffda 	bl	80043f8 <HAL_RCC_GetHCLKFreq>
 8004444:	4602      	mov	r2, r0
 8004446:	4b06      	ldr	r3, [pc, #24]	@ (8004460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	0adb      	lsrs	r3, r3, #11
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	4904      	ldr	r1, [pc, #16]	@ (8004464 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004452:	5ccb      	ldrb	r3, [r1, r3]
 8004454:	f003 031f 	and.w	r3, r3, #31
 8004458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800445c:	4618      	mov	r0, r3
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40021000 	.word	0x40021000
 8004464:	0801873c 	.word	0x0801873c

08004468 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	220f      	movs	r2, #15
 8004476:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004478:	4b12      	ldr	r3, [pc, #72]	@ (80044c4 <HAL_RCC_GetClockConfig+0x5c>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f003 0203 	and.w	r2, r3, #3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004484:	4b0f      	ldr	r3, [pc, #60]	@ (80044c4 <HAL_RCC_GetClockConfig+0x5c>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004490:	4b0c      	ldr	r3, [pc, #48]	@ (80044c4 <HAL_RCC_GetClockConfig+0x5c>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800449c:	4b09      	ldr	r3, [pc, #36]	@ (80044c4 <HAL_RCC_GetClockConfig+0x5c>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	08db      	lsrs	r3, r3, #3
 80044a2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80044aa:	4b07      	ldr	r3, [pc, #28]	@ (80044c8 <HAL_RCC_GetClockConfig+0x60>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 020f 	and.w	r2, r3, #15
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	601a      	str	r2, [r3, #0]
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	40021000 	.word	0x40021000
 80044c8:	40022000 	.word	0x40022000

080044cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044d2:	4b1e      	ldr	r3, [pc, #120]	@ (800454c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044dc:	4b1b      	ldr	r3, [pc, #108]	@ (800454c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	091b      	lsrs	r3, r3, #4
 80044e2:	f003 030f 	and.w	r3, r3, #15
 80044e6:	3301      	adds	r3, #1
 80044e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	2b03      	cmp	r3, #3
 80044ee:	d10c      	bne.n	800450a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044f0:	4a17      	ldr	r2, [pc, #92]	@ (8004550 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f8:	4a14      	ldr	r2, [pc, #80]	@ (800454c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044fa:	68d2      	ldr	r2, [r2, #12]
 80044fc:	0a12      	lsrs	r2, r2, #8
 80044fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004502:	fb02 f303 	mul.w	r3, r2, r3
 8004506:	617b      	str	r3, [r7, #20]
    break;
 8004508:	e00c      	b.n	8004524 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800450a:	4a12      	ldr	r2, [pc, #72]	@ (8004554 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004512:	4a0e      	ldr	r2, [pc, #56]	@ (800454c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004514:	68d2      	ldr	r2, [r2, #12]
 8004516:	0a12      	lsrs	r2, r2, #8
 8004518:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800451c:	fb02 f303 	mul.w	r3, r2, r3
 8004520:	617b      	str	r3, [r7, #20]
    break;
 8004522:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004524:	4b09      	ldr	r3, [pc, #36]	@ (800454c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	0e5b      	lsrs	r3, r3, #25
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	3301      	adds	r3, #1
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	fbb2 f3f3 	udiv	r3, r2, r3
 800453c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800453e:	687b      	ldr	r3, [r7, #4]
}
 8004540:	4618      	mov	r0, r3
 8004542:	371c      	adds	r7, #28
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	40021000 	.word	0x40021000
 8004550:	016e3600 	.word	0x016e3600
 8004554:	00f42400 	.word	0x00f42400

08004558 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004560:	2300      	movs	r3, #0
 8004562:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004564:	2300      	movs	r3, #0
 8004566:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 8098 	beq.w	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004576:	2300      	movs	r3, #0
 8004578:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800457a:	4b43      	ldr	r3, [pc, #268]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800457c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800457e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10d      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004586:	4b40      	ldr	r3, [pc, #256]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800458a:	4a3f      	ldr	r2, [pc, #252]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800458c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004590:	6593      	str	r3, [r2, #88]	@ 0x58
 8004592:	4b3d      	ldr	r3, [pc, #244]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800459a:	60bb      	str	r3, [r7, #8]
 800459c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800459e:	2301      	movs	r3, #1
 80045a0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045a2:	4b3a      	ldr	r3, [pc, #232]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a39      	ldr	r2, [pc, #228]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80045a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045ae:	f7fe fb79 	bl	8002ca4 <HAL_GetTick>
 80045b2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045b4:	e009      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045b6:	f7fe fb75 	bl	8002ca4 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d902      	bls.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	74fb      	strb	r3, [r7, #19]
        break;
 80045c8:	e005      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045ca:	4b30      	ldr	r3, [pc, #192]	@ (800468c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0ef      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80045d6:	7cfb      	ldrb	r3, [r7, #19]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d159      	bne.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045dc:	4b2a      	ldr	r3, [pc, #168]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045e6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d01e      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d019      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045f8:	4b23      	ldr	r3, [pc, #140]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004602:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004604:	4b20      	ldr	r3, [pc, #128]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800460a:	4a1f      	ldr	r2, [pc, #124]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800460c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004610:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004614:	4b1c      	ldr	r3, [pc, #112]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800461a:	4a1b      	ldr	r2, [pc, #108]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800461c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004620:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004624:	4a18      	ldr	r2, [pc, #96]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d016      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004636:	f7fe fb35 	bl	8002ca4 <HAL_GetTick>
 800463a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800463c:	e00b      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800463e:	f7fe fb31 	bl	8002ca4 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	f241 3288 	movw	r2, #5000	@ 0x1388
 800464c:	4293      	cmp	r3, r2
 800464e:	d902      	bls.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	74fb      	strb	r3, [r7, #19]
            break;
 8004654:	e006      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004656:	4b0c      	ldr	r3, [pc, #48]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0ec      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004664:	7cfb      	ldrb	r3, [r7, #19]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10b      	bne.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800466a:	4b07      	ldr	r3, [pc, #28]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800466c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004670:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004678:	4903      	ldr	r1, [pc, #12]	@ (8004688 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004680:	e008      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004682:	7cfb      	ldrb	r3, [r7, #19]
 8004684:	74bb      	strb	r3, [r7, #18]
 8004686:	e005      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004688:	40021000 	.word	0x40021000
 800468c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004690:	7cfb      	ldrb	r3, [r7, #19]
 8004692:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004694:	7c7b      	ldrb	r3, [r7, #17]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d105      	bne.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800469a:	4ba7      	ldr	r3, [pc, #668]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800469c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800469e:	4aa6      	ldr	r2, [pc, #664]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046a4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00a      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046b2:	4ba1      	ldr	r3, [pc, #644]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b8:	f023 0203 	bic.w	r2, r3, #3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	499d      	ldr	r1, [pc, #628]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00a      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046d4:	4b98      	ldr	r3, [pc, #608]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046da:	f023 020c 	bic.w	r2, r3, #12
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	4995      	ldr	r1, [pc, #596]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0304 	and.w	r3, r3, #4
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00a      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046f6:	4b90      	ldr	r3, [pc, #576]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046fc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	498c      	ldr	r1, [pc, #560]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004706:	4313      	orrs	r3, r2
 8004708:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0308 	and.w	r3, r3, #8
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00a      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004718:	4b87      	ldr	r3, [pc, #540]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800471a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800471e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	4984      	ldr	r1, [pc, #528]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0310 	and.w	r3, r3, #16
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00a      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800473a:	4b7f      	ldr	r3, [pc, #508]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800473c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004740:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	497b      	ldr	r1, [pc, #492]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800474a:	4313      	orrs	r3, r2
 800474c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0320 	and.w	r3, r3, #32
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00a      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800475c:	4b76      	ldr	r3, [pc, #472]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800475e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004762:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	4973      	ldr	r1, [pc, #460]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800476c:	4313      	orrs	r3, r2
 800476e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00a      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800477e:	4b6e      	ldr	r3, [pc, #440]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004784:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	496a      	ldr	r1, [pc, #424]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800478e:	4313      	orrs	r3, r2
 8004790:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00a      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047a0:	4b65      	ldr	r3, [pc, #404]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	4962      	ldr	r1, [pc, #392]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047c2:	4b5d      	ldr	r3, [pc, #372]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d0:	4959      	ldr	r1, [pc, #356]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00a      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047e4:	4b54      	ldr	r3, [pc, #336]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047ea:	f023 0203 	bic.w	r2, r3, #3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f2:	4951      	ldr	r1, [pc, #324]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004806:	4b4c      	ldr	r3, [pc, #304]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800480c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004814:	4948      	ldr	r1, [pc, #288]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004824:	2b00      	cmp	r3, #0
 8004826:	d015      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004828:	4b43      	ldr	r3, [pc, #268]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800482a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800482e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004836:	4940      	ldr	r1, [pc, #256]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004842:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004846:	d105      	bne.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004848:	4b3b      	ldr	r3, [pc, #236]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	4a3a      	ldr	r2, [pc, #232]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800484e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004852:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800485c:	2b00      	cmp	r3, #0
 800485e:	d015      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004860:	4b35      	ldr	r3, [pc, #212]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004866:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800486e:	4932      	ldr	r1, [pc, #200]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800487a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800487e:	d105      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004880:	4b2d      	ldr	r3, [pc, #180]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	4a2c      	ldr	r2, [pc, #176]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004886:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800488a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d015      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004898:	4b27      	ldr	r3, [pc, #156]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800489a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800489e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a6:	4924      	ldr	r1, [pc, #144]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048b6:	d105      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048b8:	4b1f      	ldr	r3, [pc, #124]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	4a1e      	ldr	r2, [pc, #120]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048c2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d015      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048d0:	4b19      	ldr	r3, [pc, #100]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048de:	4916      	ldr	r1, [pc, #88]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048ee:	d105      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048f0:	4b11      	ldr	r3, [pc, #68]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	4a10      	ldr	r2, [pc, #64]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048fa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d019      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004908:	4b0b      	ldr	r3, [pc, #44]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800490a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800490e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004916:	4908      	ldr	r1, [pc, #32]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004918:	4313      	orrs	r3, r2
 800491a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004922:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004926:	d109      	bne.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004928:	4b03      	ldr	r3, [pc, #12]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	4a02      	ldr	r2, [pc, #8]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800492e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004932:	60d3      	str	r3, [r2, #12]
 8004934:	e002      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004936:	bf00      	nop
 8004938:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d015      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004948:	4b29      	ldr	r3, [pc, #164]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800494a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800494e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004956:	4926      	ldr	r1, [pc, #152]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004958:	4313      	orrs	r3, r2
 800495a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004962:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004966:	d105      	bne.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004968:	4b21      	ldr	r3, [pc, #132]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	4a20      	ldr	r2, [pc, #128]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800496e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004972:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d015      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004980:	4b1b      	ldr	r3, [pc, #108]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004986:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800498e:	4918      	ldr	r1, [pc, #96]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004990:	4313      	orrs	r3, r2
 8004992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800499a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800499e:	d105      	bne.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80049a0:	4b13      	ldr	r3, [pc, #76]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	4a12      	ldr	r2, [pc, #72]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049aa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d015      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80049b8:	4b0d      	ldr	r3, [pc, #52]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049c6:	490a      	ldr	r1, [pc, #40]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049d6:	d105      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049d8:	4b05      	ldr	r3, [pc, #20]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	4a04      	ldr	r2, [pc, #16]	@ (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80049e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3718      	adds	r7, #24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	40021000 	.word	0x40021000

080049f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e049      	b.n	8004a9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d106      	bne.n	8004a20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7fd fdb2 	bl	8002584 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3304      	adds	r3, #4
 8004a30:	4619      	mov	r1, r3
 8004a32:	4610      	mov	r0, r2
 8004a34:	f000 fcb0 	bl	8005398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
	...

08004aa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d001      	beq.n	8004abc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e054      	b.n	8004b66 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0201 	orr.w	r2, r2, #1
 8004ad2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a26      	ldr	r2, [pc, #152]	@ (8004b74 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d022      	beq.n	8004b24 <HAL_TIM_Base_Start_IT+0x80>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ae6:	d01d      	beq.n	8004b24 <HAL_TIM_Base_Start_IT+0x80>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a22      	ldr	r2, [pc, #136]	@ (8004b78 <HAL_TIM_Base_Start_IT+0xd4>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d018      	beq.n	8004b24 <HAL_TIM_Base_Start_IT+0x80>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a21      	ldr	r2, [pc, #132]	@ (8004b7c <HAL_TIM_Base_Start_IT+0xd8>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d013      	beq.n	8004b24 <HAL_TIM_Base_Start_IT+0x80>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a1f      	ldr	r2, [pc, #124]	@ (8004b80 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00e      	beq.n	8004b24 <HAL_TIM_Base_Start_IT+0x80>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8004b84 <HAL_TIM_Base_Start_IT+0xe0>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d009      	beq.n	8004b24 <HAL_TIM_Base_Start_IT+0x80>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a1c      	ldr	r2, [pc, #112]	@ (8004b88 <HAL_TIM_Base_Start_IT+0xe4>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d004      	beq.n	8004b24 <HAL_TIM_Base_Start_IT+0x80>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a1b      	ldr	r2, [pc, #108]	@ (8004b8c <HAL_TIM_Base_Start_IT+0xe8>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d115      	bne.n	8004b50 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689a      	ldr	r2, [r3, #8]
 8004b2a:	4b19      	ldr	r3, [pc, #100]	@ (8004b90 <HAL_TIM_Base_Start_IT+0xec>)
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2b06      	cmp	r3, #6
 8004b34:	d015      	beq.n	8004b62 <HAL_TIM_Base_Start_IT+0xbe>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b3c:	d011      	beq.n	8004b62 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f042 0201 	orr.w	r2, r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b4e:	e008      	b.n	8004b62 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0201 	orr.w	r2, r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	e000      	b.n	8004b64 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40012c00 	.word	0x40012c00
 8004b78:	40000400 	.word	0x40000400
 8004b7c:	40000800 	.word	0x40000800
 8004b80:	40000c00 	.word	0x40000c00
 8004b84:	40013400 	.word	0x40013400
 8004b88:	40014000 	.word	0x40014000
 8004b8c:	40015000 	.word	0x40015000
 8004b90:	00010007 	.word	0x00010007

08004b94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e049      	b.n	8004c3a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d106      	bne.n	8004bc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f841 	bl	8004c42 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	3304      	adds	r3, #4
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	4610      	mov	r0, r2
 8004bd4:	f000 fbe0 	bl	8005398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b083      	sub	sp, #12
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c4a:	bf00      	nop
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b084      	sub	sp, #16
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d020      	beq.n	8004cba <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d01b      	beq.n	8004cba <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f06f 0202 	mvn.w	r2, #2
 8004c8a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	f003 0303 	and.w	r3, r3, #3
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d003      	beq.n	8004ca8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 fb5b 	bl	800535c <HAL_TIM_IC_CaptureCallback>
 8004ca6:	e005      	b.n	8004cb4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 fb4d 	bl	8005348 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 fb5e 	bl	8005370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d020      	beq.n	8004d06 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f003 0304 	and.w	r3, r3, #4
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d01b      	beq.n	8004d06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f06f 0204 	mvn.w	r2, #4
 8004cd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 fb35 	bl	800535c <HAL_TIM_IC_CaptureCallback>
 8004cf2:	e005      	b.n	8004d00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 fb27 	bl	8005348 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fb38 	bl	8005370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	f003 0308 	and.w	r3, r3, #8
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d020      	beq.n	8004d52 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d01b      	beq.n	8004d52 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f06f 0208 	mvn.w	r2, #8
 8004d22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2204      	movs	r2, #4
 8004d28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	f003 0303 	and.w	r3, r3, #3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d003      	beq.n	8004d40 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 fb0f 	bl	800535c <HAL_TIM_IC_CaptureCallback>
 8004d3e:	e005      	b.n	8004d4c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 fb01 	bl	8005348 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 fb12 	bl	8005370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f003 0310 	and.w	r3, r3, #16
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d020      	beq.n	8004d9e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f003 0310 	and.w	r3, r3, #16
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d01b      	beq.n	8004d9e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f06f 0210 	mvn.w	r2, #16
 8004d6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2208      	movs	r2, #8
 8004d74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d003      	beq.n	8004d8c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 fae9 	bl	800535c <HAL_TIM_IC_CaptureCallback>
 8004d8a:	e005      	b.n	8004d98 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 fadb 	bl	8005348 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 faec 	bl	8005370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00c      	beq.n	8004dc2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d007      	beq.n	8004dc2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f06f 0201 	mvn.w	r2, #1
 8004dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7fc ffa1 	bl	8001d04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d104      	bne.n	8004dd6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00c      	beq.n	8004df0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d007      	beq.n	8004df0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 ffee 	bl	8005dcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00c      	beq.n	8004e14 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d007      	beq.n	8004e14 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 ffe6 	bl	8005de0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00c      	beq.n	8004e38 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d007      	beq.n	8004e38 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 faa6 	bl	8005384 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f003 0320 	and.w	r3, r3, #32
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00c      	beq.n	8004e5c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f003 0320 	and.w	r3, r3, #32
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d007      	beq.n	8004e5c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f06f 0220 	mvn.w	r2, #32
 8004e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 ffae 	bl	8005db8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00c      	beq.n	8004e80 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d007      	beq.n	8004e80 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 ffba 	bl	8005df4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00c      	beq.n	8004ea4 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d007      	beq.n	8004ea4 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 ffb2 	bl	8005e08 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00c      	beq.n	8004ec8 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d007      	beq.n	8004ec8 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 ffaa 	bl	8005e1c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00c      	beq.n	8004eec <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d007      	beq.n	8004eec <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 ffa2 	bl	8005e30 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004eec:	bf00      	nop
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b086      	sub	sp, #24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f00:	2300      	movs	r3, #0
 8004f02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d101      	bne.n	8004f12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f0e:	2302      	movs	r3, #2
 8004f10:	e0ff      	b.n	8005112 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b14      	cmp	r3, #20
 8004f1e:	f200 80f0 	bhi.w	8005102 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f22:	a201      	add	r2, pc, #4	@ (adr r2, 8004f28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f28:	08004f7d 	.word	0x08004f7d
 8004f2c:	08005103 	.word	0x08005103
 8004f30:	08005103 	.word	0x08005103
 8004f34:	08005103 	.word	0x08005103
 8004f38:	08004fbd 	.word	0x08004fbd
 8004f3c:	08005103 	.word	0x08005103
 8004f40:	08005103 	.word	0x08005103
 8004f44:	08005103 	.word	0x08005103
 8004f48:	08004fff 	.word	0x08004fff
 8004f4c:	08005103 	.word	0x08005103
 8004f50:	08005103 	.word	0x08005103
 8004f54:	08005103 	.word	0x08005103
 8004f58:	0800503f 	.word	0x0800503f
 8004f5c:	08005103 	.word	0x08005103
 8004f60:	08005103 	.word	0x08005103
 8004f64:	08005103 	.word	0x08005103
 8004f68:	08005081 	.word	0x08005081
 8004f6c:	08005103 	.word	0x08005103
 8004f70:	08005103 	.word	0x08005103
 8004f74:	08005103 	.word	0x08005103
 8004f78:	080050c1 	.word	0x080050c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68b9      	ldr	r1, [r7, #8]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 fabc 	bl	8005500 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699a      	ldr	r2, [r3, #24]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f042 0208 	orr.w	r2, r2, #8
 8004f96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	699a      	ldr	r2, [r3, #24]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 0204 	bic.w	r2, r2, #4
 8004fa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6999      	ldr	r1, [r3, #24]
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	691a      	ldr	r2, [r3, #16]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	619a      	str	r2, [r3, #24]
      break;
 8004fba:	e0a5      	b.n	8005108 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68b9      	ldr	r1, [r7, #8]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 fb36 	bl	8005634 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	699a      	ldr	r2, [r3, #24]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	699a      	ldr	r2, [r3, #24]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fe6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6999      	ldr	r1, [r3, #24]
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	021a      	lsls	r2, r3, #8
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	619a      	str	r2, [r3, #24]
      break;
 8004ffc:	e084      	b.n	8005108 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68b9      	ldr	r1, [r7, #8]
 8005004:	4618      	mov	r0, r3
 8005006:	f000 fba9 	bl	800575c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69da      	ldr	r2, [r3, #28]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f042 0208 	orr.w	r2, r2, #8
 8005018:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	69da      	ldr	r2, [r3, #28]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f022 0204 	bic.w	r2, r2, #4
 8005028:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	69d9      	ldr	r1, [r3, #28]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	691a      	ldr	r2, [r3, #16]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	430a      	orrs	r2, r1
 800503a:	61da      	str	r2, [r3, #28]
      break;
 800503c:	e064      	b.n	8005108 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68b9      	ldr	r1, [r7, #8]
 8005044:	4618      	mov	r0, r3
 8005046:	f000 fc1b 	bl	8005880 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	69da      	ldr	r2, [r3, #28]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005058:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	69da      	ldr	r2, [r3, #28]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005068:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	69d9      	ldr	r1, [r3, #28]
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	021a      	lsls	r2, r3, #8
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	61da      	str	r2, [r3, #28]
      break;
 800507e:	e043      	b.n	8005108 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68b9      	ldr	r1, [r7, #8]
 8005086:	4618      	mov	r0, r3
 8005088:	f000 fc8e 	bl	80059a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0208 	orr.w	r2, r2, #8
 800509a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 0204 	bic.w	r2, r2, #4
 80050aa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	691a      	ldr	r2, [r3, #16]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80050be:	e023      	b.n	8005108 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68b9      	ldr	r1, [r7, #8]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 fcd8 	bl	8005a7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050da:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050ea:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	021a      	lsls	r2, r3, #8
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005100:	e002      	b.n	8005108 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	75fb      	strb	r3, [r7, #23]
      break;
 8005106:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005110:	7dfb      	ldrb	r3, [r7, #23]
}
 8005112:	4618      	mov	r0, r3
 8005114:	3718      	adds	r7, #24
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop

0800511c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005126:	2300      	movs	r3, #0
 8005128:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005130:	2b01      	cmp	r3, #1
 8005132:	d101      	bne.n	8005138 <HAL_TIM_ConfigClockSource+0x1c>
 8005134:	2302      	movs	r3, #2
 8005136:	e0f6      	b.n	8005326 <HAL_TIM_ConfigClockSource+0x20a>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2202      	movs	r2, #2
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005156:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800515a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005162:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a6f      	ldr	r2, [pc, #444]	@ (8005330 <HAL_TIM_ConfigClockSource+0x214>)
 8005172:	4293      	cmp	r3, r2
 8005174:	f000 80c1 	beq.w	80052fa <HAL_TIM_ConfigClockSource+0x1de>
 8005178:	4a6d      	ldr	r2, [pc, #436]	@ (8005330 <HAL_TIM_ConfigClockSource+0x214>)
 800517a:	4293      	cmp	r3, r2
 800517c:	f200 80c6 	bhi.w	800530c <HAL_TIM_ConfigClockSource+0x1f0>
 8005180:	4a6c      	ldr	r2, [pc, #432]	@ (8005334 <HAL_TIM_ConfigClockSource+0x218>)
 8005182:	4293      	cmp	r3, r2
 8005184:	f000 80b9 	beq.w	80052fa <HAL_TIM_ConfigClockSource+0x1de>
 8005188:	4a6a      	ldr	r2, [pc, #424]	@ (8005334 <HAL_TIM_ConfigClockSource+0x218>)
 800518a:	4293      	cmp	r3, r2
 800518c:	f200 80be 	bhi.w	800530c <HAL_TIM_ConfigClockSource+0x1f0>
 8005190:	4a69      	ldr	r2, [pc, #420]	@ (8005338 <HAL_TIM_ConfigClockSource+0x21c>)
 8005192:	4293      	cmp	r3, r2
 8005194:	f000 80b1 	beq.w	80052fa <HAL_TIM_ConfigClockSource+0x1de>
 8005198:	4a67      	ldr	r2, [pc, #412]	@ (8005338 <HAL_TIM_ConfigClockSource+0x21c>)
 800519a:	4293      	cmp	r3, r2
 800519c:	f200 80b6 	bhi.w	800530c <HAL_TIM_ConfigClockSource+0x1f0>
 80051a0:	4a66      	ldr	r2, [pc, #408]	@ (800533c <HAL_TIM_ConfigClockSource+0x220>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	f000 80a9 	beq.w	80052fa <HAL_TIM_ConfigClockSource+0x1de>
 80051a8:	4a64      	ldr	r2, [pc, #400]	@ (800533c <HAL_TIM_ConfigClockSource+0x220>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	f200 80ae 	bhi.w	800530c <HAL_TIM_ConfigClockSource+0x1f0>
 80051b0:	4a63      	ldr	r2, [pc, #396]	@ (8005340 <HAL_TIM_ConfigClockSource+0x224>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	f000 80a1 	beq.w	80052fa <HAL_TIM_ConfigClockSource+0x1de>
 80051b8:	4a61      	ldr	r2, [pc, #388]	@ (8005340 <HAL_TIM_ConfigClockSource+0x224>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	f200 80a6 	bhi.w	800530c <HAL_TIM_ConfigClockSource+0x1f0>
 80051c0:	4a60      	ldr	r2, [pc, #384]	@ (8005344 <HAL_TIM_ConfigClockSource+0x228>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	f000 8099 	beq.w	80052fa <HAL_TIM_ConfigClockSource+0x1de>
 80051c8:	4a5e      	ldr	r2, [pc, #376]	@ (8005344 <HAL_TIM_ConfigClockSource+0x228>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	f200 809e 	bhi.w	800530c <HAL_TIM_ConfigClockSource+0x1f0>
 80051d0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80051d4:	f000 8091 	beq.w	80052fa <HAL_TIM_ConfigClockSource+0x1de>
 80051d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80051dc:	f200 8096 	bhi.w	800530c <HAL_TIM_ConfigClockSource+0x1f0>
 80051e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051e4:	f000 8089 	beq.w	80052fa <HAL_TIM_ConfigClockSource+0x1de>
 80051e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051ec:	f200 808e 	bhi.w	800530c <HAL_TIM_ConfigClockSource+0x1f0>
 80051f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051f4:	d03e      	beq.n	8005274 <HAL_TIM_ConfigClockSource+0x158>
 80051f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051fa:	f200 8087 	bhi.w	800530c <HAL_TIM_ConfigClockSource+0x1f0>
 80051fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005202:	f000 8086 	beq.w	8005312 <HAL_TIM_ConfigClockSource+0x1f6>
 8005206:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800520a:	d87f      	bhi.n	800530c <HAL_TIM_ConfigClockSource+0x1f0>
 800520c:	2b70      	cmp	r3, #112	@ 0x70
 800520e:	d01a      	beq.n	8005246 <HAL_TIM_ConfigClockSource+0x12a>
 8005210:	2b70      	cmp	r3, #112	@ 0x70
 8005212:	d87b      	bhi.n	800530c <HAL_TIM_ConfigClockSource+0x1f0>
 8005214:	2b60      	cmp	r3, #96	@ 0x60
 8005216:	d050      	beq.n	80052ba <HAL_TIM_ConfigClockSource+0x19e>
 8005218:	2b60      	cmp	r3, #96	@ 0x60
 800521a:	d877      	bhi.n	800530c <HAL_TIM_ConfigClockSource+0x1f0>
 800521c:	2b50      	cmp	r3, #80	@ 0x50
 800521e:	d03c      	beq.n	800529a <HAL_TIM_ConfigClockSource+0x17e>
 8005220:	2b50      	cmp	r3, #80	@ 0x50
 8005222:	d873      	bhi.n	800530c <HAL_TIM_ConfigClockSource+0x1f0>
 8005224:	2b40      	cmp	r3, #64	@ 0x40
 8005226:	d058      	beq.n	80052da <HAL_TIM_ConfigClockSource+0x1be>
 8005228:	2b40      	cmp	r3, #64	@ 0x40
 800522a:	d86f      	bhi.n	800530c <HAL_TIM_ConfigClockSource+0x1f0>
 800522c:	2b30      	cmp	r3, #48	@ 0x30
 800522e:	d064      	beq.n	80052fa <HAL_TIM_ConfigClockSource+0x1de>
 8005230:	2b30      	cmp	r3, #48	@ 0x30
 8005232:	d86b      	bhi.n	800530c <HAL_TIM_ConfigClockSource+0x1f0>
 8005234:	2b20      	cmp	r3, #32
 8005236:	d060      	beq.n	80052fa <HAL_TIM_ConfigClockSource+0x1de>
 8005238:	2b20      	cmp	r3, #32
 800523a:	d867      	bhi.n	800530c <HAL_TIM_ConfigClockSource+0x1f0>
 800523c:	2b00      	cmp	r3, #0
 800523e:	d05c      	beq.n	80052fa <HAL_TIM_ConfigClockSource+0x1de>
 8005240:	2b10      	cmp	r3, #16
 8005242:	d05a      	beq.n	80052fa <HAL_TIM_ConfigClockSource+0x1de>
 8005244:	e062      	b.n	800530c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005256:	f000 fcf9 	bl	8005c4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005268:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	609a      	str	r2, [r3, #8]
      break;
 8005272:	e04f      	b.n	8005314 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005284:	f000 fce2 	bl	8005c4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689a      	ldr	r2, [r3, #8]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005296:	609a      	str	r2, [r3, #8]
      break;
 8005298:	e03c      	b.n	8005314 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052a6:	461a      	mov	r2, r3
 80052a8:	f000 fc54 	bl	8005b54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2150      	movs	r1, #80	@ 0x50
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fcad 	bl	8005c12 <TIM_ITRx_SetConfig>
      break;
 80052b8:	e02c      	b.n	8005314 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052c6:	461a      	mov	r2, r3
 80052c8:	f000 fc73 	bl	8005bb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2160      	movs	r1, #96	@ 0x60
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 fc9d 	bl	8005c12 <TIM_ITRx_SetConfig>
      break;
 80052d8:	e01c      	b.n	8005314 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052e6:	461a      	mov	r2, r3
 80052e8:	f000 fc34 	bl	8005b54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2140      	movs	r1, #64	@ 0x40
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 fc8d 	bl	8005c12 <TIM_ITRx_SetConfig>
      break;
 80052f8:	e00c      	b.n	8005314 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4619      	mov	r1, r3
 8005304:	4610      	mov	r0, r2
 8005306:	f000 fc84 	bl	8005c12 <TIM_ITRx_SetConfig>
      break;
 800530a:	e003      	b.n	8005314 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	73fb      	strb	r3, [r7, #15]
      break;
 8005310:	e000      	b.n	8005314 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005312:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005324:	7bfb      	ldrb	r3, [r7, #15]
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	00100070 	.word	0x00100070
 8005334:	00100060 	.word	0x00100060
 8005338:	00100050 	.word	0x00100050
 800533c:	00100040 	.word	0x00100040
 8005340:	00100030 	.word	0x00100030
 8005344:	00100020 	.word	0x00100020

08005348 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a4c      	ldr	r2, [pc, #304]	@ (80054dc <TIM_Base_SetConfig+0x144>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d017      	beq.n	80053e0 <TIM_Base_SetConfig+0x48>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053b6:	d013      	beq.n	80053e0 <TIM_Base_SetConfig+0x48>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a49      	ldr	r2, [pc, #292]	@ (80054e0 <TIM_Base_SetConfig+0x148>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d00f      	beq.n	80053e0 <TIM_Base_SetConfig+0x48>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a48      	ldr	r2, [pc, #288]	@ (80054e4 <TIM_Base_SetConfig+0x14c>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d00b      	beq.n	80053e0 <TIM_Base_SetConfig+0x48>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a47      	ldr	r2, [pc, #284]	@ (80054e8 <TIM_Base_SetConfig+0x150>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d007      	beq.n	80053e0 <TIM_Base_SetConfig+0x48>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a46      	ldr	r2, [pc, #280]	@ (80054ec <TIM_Base_SetConfig+0x154>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d003      	beq.n	80053e0 <TIM_Base_SetConfig+0x48>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a45      	ldr	r2, [pc, #276]	@ (80054f0 <TIM_Base_SetConfig+0x158>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d108      	bne.n	80053f2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a39      	ldr	r2, [pc, #228]	@ (80054dc <TIM_Base_SetConfig+0x144>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d023      	beq.n	8005442 <TIM_Base_SetConfig+0xaa>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005400:	d01f      	beq.n	8005442 <TIM_Base_SetConfig+0xaa>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a36      	ldr	r2, [pc, #216]	@ (80054e0 <TIM_Base_SetConfig+0x148>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d01b      	beq.n	8005442 <TIM_Base_SetConfig+0xaa>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a35      	ldr	r2, [pc, #212]	@ (80054e4 <TIM_Base_SetConfig+0x14c>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d017      	beq.n	8005442 <TIM_Base_SetConfig+0xaa>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a34      	ldr	r2, [pc, #208]	@ (80054e8 <TIM_Base_SetConfig+0x150>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d013      	beq.n	8005442 <TIM_Base_SetConfig+0xaa>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a33      	ldr	r2, [pc, #204]	@ (80054ec <TIM_Base_SetConfig+0x154>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d00f      	beq.n	8005442 <TIM_Base_SetConfig+0xaa>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a33      	ldr	r2, [pc, #204]	@ (80054f4 <TIM_Base_SetConfig+0x15c>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d00b      	beq.n	8005442 <TIM_Base_SetConfig+0xaa>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a32      	ldr	r2, [pc, #200]	@ (80054f8 <TIM_Base_SetConfig+0x160>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d007      	beq.n	8005442 <TIM_Base_SetConfig+0xaa>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a31      	ldr	r2, [pc, #196]	@ (80054fc <TIM_Base_SetConfig+0x164>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d003      	beq.n	8005442 <TIM_Base_SetConfig+0xaa>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a2c      	ldr	r2, [pc, #176]	@ (80054f0 <TIM_Base_SetConfig+0x158>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d108      	bne.n	8005454 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	4313      	orrs	r3, r2
 8005452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a18      	ldr	r2, [pc, #96]	@ (80054dc <TIM_Base_SetConfig+0x144>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d013      	beq.n	80054a8 <TIM_Base_SetConfig+0x110>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a1a      	ldr	r2, [pc, #104]	@ (80054ec <TIM_Base_SetConfig+0x154>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d00f      	beq.n	80054a8 <TIM_Base_SetConfig+0x110>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a1a      	ldr	r2, [pc, #104]	@ (80054f4 <TIM_Base_SetConfig+0x15c>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d00b      	beq.n	80054a8 <TIM_Base_SetConfig+0x110>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a19      	ldr	r2, [pc, #100]	@ (80054f8 <TIM_Base_SetConfig+0x160>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d007      	beq.n	80054a8 <TIM_Base_SetConfig+0x110>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a18      	ldr	r2, [pc, #96]	@ (80054fc <TIM_Base_SetConfig+0x164>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d003      	beq.n	80054a8 <TIM_Base_SetConfig+0x110>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a13      	ldr	r2, [pc, #76]	@ (80054f0 <TIM_Base_SetConfig+0x158>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d103      	bne.n	80054b0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	691a      	ldr	r2, [r3, #16]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d105      	bne.n	80054ce <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	f023 0201 	bic.w	r2, r3, #1
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	611a      	str	r2, [r3, #16]
  }
}
 80054ce:	bf00      	nop
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	40012c00 	.word	0x40012c00
 80054e0:	40000400 	.word	0x40000400
 80054e4:	40000800 	.word	0x40000800
 80054e8:	40000c00 	.word	0x40000c00
 80054ec:	40013400 	.word	0x40013400
 80054f0:	40015000 	.word	0x40015000
 80054f4:	40014000 	.word	0x40014000
 80054f8:	40014400 	.word	0x40014400
 80054fc:	40014800 	.word	0x40014800

08005500 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005500:	b480      	push	{r7}
 8005502:	b087      	sub	sp, #28
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a1b      	ldr	r3, [r3, #32]
 8005514:	f023 0201 	bic.w	r2, r3, #1
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800552e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 0303 	bic.w	r3, r3, #3
 800553a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f023 0302 	bic.w	r3, r3, #2
 800554c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	4313      	orrs	r3, r2
 8005556:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a30      	ldr	r2, [pc, #192]	@ (800561c <TIM_OC1_SetConfig+0x11c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d013      	beq.n	8005588 <TIM_OC1_SetConfig+0x88>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a2f      	ldr	r2, [pc, #188]	@ (8005620 <TIM_OC1_SetConfig+0x120>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d00f      	beq.n	8005588 <TIM_OC1_SetConfig+0x88>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a2e      	ldr	r2, [pc, #184]	@ (8005624 <TIM_OC1_SetConfig+0x124>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00b      	beq.n	8005588 <TIM_OC1_SetConfig+0x88>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a2d      	ldr	r2, [pc, #180]	@ (8005628 <TIM_OC1_SetConfig+0x128>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d007      	beq.n	8005588 <TIM_OC1_SetConfig+0x88>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a2c      	ldr	r2, [pc, #176]	@ (800562c <TIM_OC1_SetConfig+0x12c>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d003      	beq.n	8005588 <TIM_OC1_SetConfig+0x88>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a2b      	ldr	r2, [pc, #172]	@ (8005630 <TIM_OC1_SetConfig+0x130>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d10c      	bne.n	80055a2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f023 0308 	bic.w	r3, r3, #8
 800558e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	4313      	orrs	r3, r2
 8005598:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f023 0304 	bic.w	r3, r3, #4
 80055a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a1d      	ldr	r2, [pc, #116]	@ (800561c <TIM_OC1_SetConfig+0x11c>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d013      	beq.n	80055d2 <TIM_OC1_SetConfig+0xd2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a1c      	ldr	r2, [pc, #112]	@ (8005620 <TIM_OC1_SetConfig+0x120>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d00f      	beq.n	80055d2 <TIM_OC1_SetConfig+0xd2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a1b      	ldr	r2, [pc, #108]	@ (8005624 <TIM_OC1_SetConfig+0x124>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d00b      	beq.n	80055d2 <TIM_OC1_SetConfig+0xd2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a1a      	ldr	r2, [pc, #104]	@ (8005628 <TIM_OC1_SetConfig+0x128>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d007      	beq.n	80055d2 <TIM_OC1_SetConfig+0xd2>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a19      	ldr	r2, [pc, #100]	@ (800562c <TIM_OC1_SetConfig+0x12c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d003      	beq.n	80055d2 <TIM_OC1_SetConfig+0xd2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a18      	ldr	r2, [pc, #96]	@ (8005630 <TIM_OC1_SetConfig+0x130>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d111      	bne.n	80055f6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80055e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	621a      	str	r2, [r3, #32]
}
 8005610:	bf00      	nop
 8005612:	371c      	adds	r7, #28
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	40012c00 	.word	0x40012c00
 8005620:	40013400 	.word	0x40013400
 8005624:	40014000 	.word	0x40014000
 8005628:	40014400 	.word	0x40014400
 800562c:	40014800 	.word	0x40014800
 8005630:	40015000 	.word	0x40015000

08005634 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005634:	b480      	push	{r7}
 8005636:	b087      	sub	sp, #28
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	f023 0210 	bic.w	r2, r3, #16
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005662:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800566e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	021b      	lsls	r3, r3, #8
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	4313      	orrs	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f023 0320 	bic.w	r3, r3, #32
 8005682:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	011b      	lsls	r3, r3, #4
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	4313      	orrs	r3, r2
 800568e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a2c      	ldr	r2, [pc, #176]	@ (8005744 <TIM_OC2_SetConfig+0x110>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d007      	beq.n	80056a8 <TIM_OC2_SetConfig+0x74>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a2b      	ldr	r2, [pc, #172]	@ (8005748 <TIM_OC2_SetConfig+0x114>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d003      	beq.n	80056a8 <TIM_OC2_SetConfig+0x74>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a2a      	ldr	r2, [pc, #168]	@ (800574c <TIM_OC2_SetConfig+0x118>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d10d      	bne.n	80056c4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a1f      	ldr	r2, [pc, #124]	@ (8005744 <TIM_OC2_SetConfig+0x110>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d013      	beq.n	80056f4 <TIM_OC2_SetConfig+0xc0>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005748 <TIM_OC2_SetConfig+0x114>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d00f      	beq.n	80056f4 <TIM_OC2_SetConfig+0xc0>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a1e      	ldr	r2, [pc, #120]	@ (8005750 <TIM_OC2_SetConfig+0x11c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d00b      	beq.n	80056f4 <TIM_OC2_SetConfig+0xc0>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a1d      	ldr	r2, [pc, #116]	@ (8005754 <TIM_OC2_SetConfig+0x120>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d007      	beq.n	80056f4 <TIM_OC2_SetConfig+0xc0>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005758 <TIM_OC2_SetConfig+0x124>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d003      	beq.n	80056f4 <TIM_OC2_SetConfig+0xc0>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a17      	ldr	r2, [pc, #92]	@ (800574c <TIM_OC2_SetConfig+0x118>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d113      	bne.n	800571c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005702:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	695b      	ldr	r3, [r3, #20]
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	4313      	orrs	r3, r2
 800571a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	621a      	str	r2, [r3, #32]
}
 8005736:	bf00      	nop
 8005738:	371c      	adds	r7, #28
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	40012c00 	.word	0x40012c00
 8005748:	40013400 	.word	0x40013400
 800574c:	40015000 	.word	0x40015000
 8005750:	40014000 	.word	0x40014000
 8005754:	40014400 	.word	0x40014400
 8005758:	40014800 	.word	0x40014800

0800575c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800575c:	b480      	push	{r7}
 800575e:	b087      	sub	sp, #28
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800578a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800578e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f023 0303 	bic.w	r3, r3, #3
 8005796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	4313      	orrs	r3, r2
 80057a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	021b      	lsls	r3, r3, #8
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a2b      	ldr	r2, [pc, #172]	@ (8005868 <TIM_OC3_SetConfig+0x10c>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d007      	beq.n	80057ce <TIM_OC3_SetConfig+0x72>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a2a      	ldr	r2, [pc, #168]	@ (800586c <TIM_OC3_SetConfig+0x110>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d003      	beq.n	80057ce <TIM_OC3_SetConfig+0x72>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a29      	ldr	r2, [pc, #164]	@ (8005870 <TIM_OC3_SetConfig+0x114>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d10d      	bne.n	80057ea <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	021b      	lsls	r3, r3, #8
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	4313      	orrs	r3, r2
 80057e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a1e      	ldr	r2, [pc, #120]	@ (8005868 <TIM_OC3_SetConfig+0x10c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d013      	beq.n	800581a <TIM_OC3_SetConfig+0xbe>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a1d      	ldr	r2, [pc, #116]	@ (800586c <TIM_OC3_SetConfig+0x110>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d00f      	beq.n	800581a <TIM_OC3_SetConfig+0xbe>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005874 <TIM_OC3_SetConfig+0x118>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d00b      	beq.n	800581a <TIM_OC3_SetConfig+0xbe>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a1c      	ldr	r2, [pc, #112]	@ (8005878 <TIM_OC3_SetConfig+0x11c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d007      	beq.n	800581a <TIM_OC3_SetConfig+0xbe>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a1b      	ldr	r2, [pc, #108]	@ (800587c <TIM_OC3_SetConfig+0x120>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d003      	beq.n	800581a <TIM_OC3_SetConfig+0xbe>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a16      	ldr	r2, [pc, #88]	@ (8005870 <TIM_OC3_SetConfig+0x114>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d113      	bne.n	8005842 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005820:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005828:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	4313      	orrs	r3, r2
 8005834:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	011b      	lsls	r3, r3, #4
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	4313      	orrs	r3, r2
 8005840:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	621a      	str	r2, [r3, #32]
}
 800585c:	bf00      	nop
 800585e:	371c      	adds	r7, #28
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr
 8005868:	40012c00 	.word	0x40012c00
 800586c:	40013400 	.word	0x40013400
 8005870:	40015000 	.word	0x40015000
 8005874:	40014000 	.word	0x40014000
 8005878:	40014400 	.word	0x40014400
 800587c:	40014800 	.word	0x40014800

08005880 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005880:	b480      	push	{r7}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	021b      	lsls	r3, r3, #8
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	031b      	lsls	r3, r3, #12
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	4313      	orrs	r3, r2
 80058da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a2c      	ldr	r2, [pc, #176]	@ (8005990 <TIM_OC4_SetConfig+0x110>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d007      	beq.n	80058f4 <TIM_OC4_SetConfig+0x74>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a2b      	ldr	r2, [pc, #172]	@ (8005994 <TIM_OC4_SetConfig+0x114>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d003      	beq.n	80058f4 <TIM_OC4_SetConfig+0x74>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a2a      	ldr	r2, [pc, #168]	@ (8005998 <TIM_OC4_SetConfig+0x118>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d10d      	bne.n	8005910 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80058fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	031b      	lsls	r3, r3, #12
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	4313      	orrs	r3, r2
 8005906:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800590e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a1f      	ldr	r2, [pc, #124]	@ (8005990 <TIM_OC4_SetConfig+0x110>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d013      	beq.n	8005940 <TIM_OC4_SetConfig+0xc0>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a1e      	ldr	r2, [pc, #120]	@ (8005994 <TIM_OC4_SetConfig+0x114>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d00f      	beq.n	8005940 <TIM_OC4_SetConfig+0xc0>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a1e      	ldr	r2, [pc, #120]	@ (800599c <TIM_OC4_SetConfig+0x11c>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d00b      	beq.n	8005940 <TIM_OC4_SetConfig+0xc0>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a1d      	ldr	r2, [pc, #116]	@ (80059a0 <TIM_OC4_SetConfig+0x120>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d007      	beq.n	8005940 <TIM_OC4_SetConfig+0xc0>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a1c      	ldr	r2, [pc, #112]	@ (80059a4 <TIM_OC4_SetConfig+0x124>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d003      	beq.n	8005940 <TIM_OC4_SetConfig+0xc0>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a17      	ldr	r2, [pc, #92]	@ (8005998 <TIM_OC4_SetConfig+0x118>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d113      	bne.n	8005968 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005946:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800594e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	019b      	lsls	r3, r3, #6
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	4313      	orrs	r3, r2
 800595a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	019b      	lsls	r3, r3, #6
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	4313      	orrs	r3, r2
 8005966:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	621a      	str	r2, [r3, #32]
}
 8005982:	bf00      	nop
 8005984:	371c      	adds	r7, #28
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	40012c00 	.word	0x40012c00
 8005994:	40013400 	.word	0x40013400
 8005998:	40015000 	.word	0x40015000
 800599c:	40014000 	.word	0x40014000
 80059a0:	40014400 	.word	0x40014400
 80059a4:	40014800 	.word	0x40014800

080059a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80059ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	041b      	lsls	r3, r3, #16
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a19      	ldr	r2, [pc, #100]	@ (8005a64 <TIM_OC5_SetConfig+0xbc>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d013      	beq.n	8005a2a <TIM_OC5_SetConfig+0x82>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a18      	ldr	r2, [pc, #96]	@ (8005a68 <TIM_OC5_SetConfig+0xc0>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d00f      	beq.n	8005a2a <TIM_OC5_SetConfig+0x82>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a17      	ldr	r2, [pc, #92]	@ (8005a6c <TIM_OC5_SetConfig+0xc4>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d00b      	beq.n	8005a2a <TIM_OC5_SetConfig+0x82>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a16      	ldr	r2, [pc, #88]	@ (8005a70 <TIM_OC5_SetConfig+0xc8>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d007      	beq.n	8005a2a <TIM_OC5_SetConfig+0x82>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a15      	ldr	r2, [pc, #84]	@ (8005a74 <TIM_OC5_SetConfig+0xcc>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d003      	beq.n	8005a2a <TIM_OC5_SetConfig+0x82>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a14      	ldr	r2, [pc, #80]	@ (8005a78 <TIM_OC5_SetConfig+0xd0>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d109      	bne.n	8005a3e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	021b      	lsls	r3, r3, #8
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	621a      	str	r2, [r3, #32]
}
 8005a58:	bf00      	nop
 8005a5a:	371c      	adds	r7, #28
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr
 8005a64:	40012c00 	.word	0x40012c00
 8005a68:	40013400 	.word	0x40013400
 8005a6c:	40014000 	.word	0x40014000
 8005a70:	40014400 	.word	0x40014400
 8005a74:	40014800 	.word	0x40014800
 8005a78:	40015000 	.word	0x40015000

08005a7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a1b      	ldr	r3, [r3, #32]
 8005a90:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005aaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	021b      	lsls	r3, r3, #8
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005ac2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	051b      	lsls	r3, r3, #20
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a1a      	ldr	r2, [pc, #104]	@ (8005b3c <TIM_OC6_SetConfig+0xc0>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d013      	beq.n	8005b00 <TIM_OC6_SetConfig+0x84>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a19      	ldr	r2, [pc, #100]	@ (8005b40 <TIM_OC6_SetConfig+0xc4>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d00f      	beq.n	8005b00 <TIM_OC6_SetConfig+0x84>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a18      	ldr	r2, [pc, #96]	@ (8005b44 <TIM_OC6_SetConfig+0xc8>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d00b      	beq.n	8005b00 <TIM_OC6_SetConfig+0x84>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a17      	ldr	r2, [pc, #92]	@ (8005b48 <TIM_OC6_SetConfig+0xcc>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d007      	beq.n	8005b00 <TIM_OC6_SetConfig+0x84>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a16      	ldr	r2, [pc, #88]	@ (8005b4c <TIM_OC6_SetConfig+0xd0>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d003      	beq.n	8005b00 <TIM_OC6_SetConfig+0x84>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a15      	ldr	r2, [pc, #84]	@ (8005b50 <TIM_OC6_SetConfig+0xd4>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d109      	bne.n	8005b14 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	029b      	lsls	r3, r3, #10
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	621a      	str	r2, [r3, #32]
}
 8005b2e:	bf00      	nop
 8005b30:	371c      	adds	r7, #28
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	40012c00 	.word	0x40012c00
 8005b40:	40013400 	.word	0x40013400
 8005b44:	40014000 	.word	0x40014000
 8005b48:	40014400 	.word	0x40014400
 8005b4c:	40014800 	.word	0x40014800
 8005b50:	40015000 	.word	0x40015000

08005b54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b087      	sub	sp, #28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	f023 0201 	bic.w	r2, r3, #1
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	011b      	lsls	r3, r3, #4
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f023 030a 	bic.w	r3, r3, #10
 8005b90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	621a      	str	r2, [r3, #32]
}
 8005ba6:	bf00      	nop
 8005ba8:	371c      	adds	r7, #28
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b087      	sub	sp, #28
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	60f8      	str	r0, [r7, #12]
 8005bba:	60b9      	str	r1, [r7, #8]
 8005bbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6a1b      	ldr	r3, [r3, #32]
 8005bc8:	f023 0210 	bic.w	r2, r3, #16
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005bdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	031b      	lsls	r3, r3, #12
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005bee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	011b      	lsls	r3, r3, #4
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	621a      	str	r2, [r3, #32]
}
 8005c06:	bf00      	nop
 8005c08:	371c      	adds	r7, #28
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b085      	sub	sp, #20
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
 8005c1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005c28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	f043 0307 	orr.w	r3, r3, #7
 8005c38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	609a      	str	r2, [r3, #8]
}
 8005c40:	bf00      	nop
 8005c42:	3714      	adds	r7, #20
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b087      	sub	sp, #28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
 8005c58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	021a      	lsls	r2, r3, #8
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	609a      	str	r2, [r3, #8]
}
 8005c80:	bf00      	nop
 8005c82:	371c      	adds	r7, #28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d101      	bne.n	8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	e074      	b.n	8005d8e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a34      	ldr	r2, [pc, #208]	@ (8005d9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d009      	beq.n	8005ce2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a33      	ldr	r2, [pc, #204]	@ (8005da0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d004      	beq.n	8005ce2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a31      	ldr	r2, [pc, #196]	@ (8005da4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d108      	bne.n	8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005ce8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005cfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a21      	ldr	r2, [pc, #132]	@ (8005d9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d022      	beq.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d24:	d01d      	beq.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a1f      	ldr	r2, [pc, #124]	@ (8005da8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d018      	beq.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a1d      	ldr	r2, [pc, #116]	@ (8005dac <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d013      	beq.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a1c      	ldr	r2, [pc, #112]	@ (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d00e      	beq.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a15      	ldr	r2, [pc, #84]	@ (8005da0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d009      	beq.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a18      	ldr	r2, [pc, #96]	@ (8005db4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d004      	beq.n	8005d62 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a11      	ldr	r2, [pc, #68]	@ (8005da4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d10c      	bne.n	8005d7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	40012c00 	.word	0x40012c00
 8005da0:	40013400 	.word	0x40013400
 8005da4:	40015000 	.word	0x40015000
 8005da8:	40000400 	.word	0x40000400
 8005dac:	40000800 	.word	0x40000800
 8005db0:	40000c00 	.word	0x40000c00
 8005db4:	40014000 	.word	0x40014000

08005db8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e042      	b.n	8005edc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d106      	bne.n	8005e6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f7fc fc93 	bl	8002794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2224      	movs	r2, #36	@ 0x24
 8005e72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f022 0201 	bic.w	r2, r2, #1
 8005e84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d002      	beq.n	8005e94 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f001 f806 	bl	8006ea0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fd07 	bl	80068a8 <UART_SetConfig>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d101      	bne.n	8005ea4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e01b      	b.n	8005edc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005eb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689a      	ldr	r2, [r3, #8]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ec2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f042 0201 	orr.w	r2, r2, #1
 8005ed2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f001 f885 	bl	8006fe4 <UART_CheckIdleState>
 8005eda:	4603      	mov	r3, r0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3708      	adds	r7, #8
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b08a      	sub	sp, #40	@ 0x28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ef8:	2b20      	cmp	r3, #32
 8005efa:	d167      	bne.n	8005fcc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d002      	beq.n	8005f08 <HAL_UART_Transmit_DMA+0x24>
 8005f02:	88fb      	ldrh	r3, [r7, #6]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e060      	b.n	8005fce <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	88fa      	ldrh	r2, [r7, #6]
 8005f16:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	88fa      	ldrh	r2, [r7, #6]
 8005f1e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2221      	movs	r2, #33	@ 0x21
 8005f2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d028      	beq.n	8005f8c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f3e:	4a26      	ldr	r2, [pc, #152]	@ (8005fd8 <HAL_UART_Transmit_DMA+0xf4>)
 8005f40:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f46:	4a25      	ldr	r2, [pc, #148]	@ (8005fdc <HAL_UART_Transmit_DMA+0xf8>)
 8005f48:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f4e:	4a24      	ldr	r2, [pc, #144]	@ (8005fe0 <HAL_UART_Transmit_DMA+0xfc>)
 8005f50:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f56:	2200      	movs	r2, #0
 8005f58:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f62:	4619      	mov	r1, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3328      	adds	r3, #40	@ 0x28
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	88fb      	ldrh	r3, [r7, #6]
 8005f6e:	f7fd f82d 	bl	8002fcc <HAL_DMA_Start_IT>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d009      	beq.n	8005f8c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2210      	movs	r2, #16
 8005f7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2220      	movs	r2, #32
 8005f84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e020      	b.n	8005fce <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2240      	movs	r2, #64	@ 0x40
 8005f92:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	3308      	adds	r3, #8
 8005f9a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	e853 3f00 	ldrex	r3, [r3]
 8005fa2:	613b      	str	r3, [r7, #16]
   return(result);
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	3308      	adds	r3, #8
 8005fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fb4:	623a      	str	r2, [r7, #32]
 8005fb6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb8:	69f9      	ldr	r1, [r7, #28]
 8005fba:	6a3a      	ldr	r2, [r7, #32]
 8005fbc:	e841 2300 	strex	r3, r2, [r1]
 8005fc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1e5      	bne.n	8005f94 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	e000      	b.n	8005fce <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005fcc:	2302      	movs	r3, #2
  }
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3728      	adds	r7, #40	@ 0x28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	080074af 	.word	0x080074af
 8005fdc:	08007549 	.word	0x08007549
 8005fe0:	080076cf 	.word	0x080076cf

08005fe4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b08a      	sub	sp, #40	@ 0x28
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ff8:	2b20      	cmp	r3, #32
 8005ffa:	d137      	bne.n	800606c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d002      	beq.n	8006008 <HAL_UART_Receive_DMA+0x24>
 8006002:	88fb      	ldrh	r3, [r7, #6]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e030      	b.n	800606e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a18      	ldr	r2, [pc, #96]	@ (8006078 <HAL_UART_Receive_DMA+0x94>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d01f      	beq.n	800605c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d018      	beq.n	800605c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	e853 3f00 	ldrex	r3, [r3]
 8006036:	613b      	str	r3, [r7, #16]
   return(result);
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800603e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	461a      	mov	r2, r3
 8006046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006048:	623b      	str	r3, [r7, #32]
 800604a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604c:	69f9      	ldr	r1, [r7, #28]
 800604e:	6a3a      	ldr	r2, [r7, #32]
 8006050:	e841 2300 	strex	r3, r2, [r1]
 8006054:	61bb      	str	r3, [r7, #24]
   return(result);
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1e6      	bne.n	800602a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800605c:	88fb      	ldrh	r3, [r7, #6]
 800605e:	461a      	mov	r2, r3
 8006060:	68b9      	ldr	r1, [r7, #8]
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f001 f8d6 	bl	8007214 <UART_Start_Receive_DMA>
 8006068:	4603      	mov	r3, r0
 800606a:	e000      	b.n	800606e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800606c:	2302      	movs	r3, #2
  }
}
 800606e:	4618      	mov	r0, r3
 8006070:	3728      	adds	r7, #40	@ 0x28
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	40008000 	.word	0x40008000

0800607c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b090      	sub	sp, #64	@ 0x40
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800608a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006092:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800609e:	2b80      	cmp	r3, #128	@ 0x80
 80060a0:	d139      	bne.n	8006116 <HAL_UART_DMAStop+0x9a>
 80060a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060a4:	2b21      	cmp	r3, #33	@ 0x21
 80060a6:	d136      	bne.n	8006116 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	3308      	adds	r3, #8
 80060ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	e853 3f00 	ldrex	r3, [r3]
 80060b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060be:	637b      	str	r3, [r7, #52]	@ 0x34
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	3308      	adds	r3, #8
 80060c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80060c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060d0:	e841 2300 	strex	r3, r2, [r1]
 80060d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1e5      	bne.n	80060a8 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d015      	beq.n	8006110 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7fc ffea 	bl	80030c2 <HAL_DMA_Abort>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00d      	beq.n	8006110 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7fd f951 	bl	80033a0 <HAL_DMA_GetError>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b20      	cmp	r3, #32
 8006102:	d105      	bne.n	8006110 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2210      	movs	r2, #16
 8006108:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e047      	b.n	80061a0 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f001 f925 	bl	8007360 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006120:	2b40      	cmp	r3, #64	@ 0x40
 8006122:	d13c      	bne.n	800619e <HAL_UART_DMAStop+0x122>
 8006124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006126:	2b22      	cmp	r3, #34	@ 0x22
 8006128:	d139      	bne.n	800619e <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3308      	adds	r3, #8
 8006130:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	e853 3f00 	ldrex	r3, [r3]
 8006138:	60bb      	str	r3, [r7, #8]
   return(result);
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006140:	633b      	str	r3, [r7, #48]	@ 0x30
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	3308      	adds	r3, #8
 8006148:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800614a:	61ba      	str	r2, [r7, #24]
 800614c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614e:	6979      	ldr	r1, [r7, #20]
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	e841 2300 	strex	r3, r2, [r1]
 8006156:	613b      	str	r3, [r7, #16]
   return(result);
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1e5      	bne.n	800612a <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006164:	2b00      	cmp	r3, #0
 8006166:	d017      	beq.n	8006198 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800616e:	4618      	mov	r0, r3
 8006170:	f7fc ffa7 	bl	80030c2 <HAL_DMA_Abort>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00e      	beq.n	8006198 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006180:	4618      	mov	r0, r3
 8006182:	f7fd f90d 	bl	80033a0 <HAL_DMA_GetError>
 8006186:	4603      	mov	r3, r0
 8006188:	2b20      	cmp	r3, #32
 800618a:	d105      	bne.n	8006198 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2210      	movs	r2, #16
 8006190:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e003      	b.n	80061a0 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f001 f922 	bl	80073e2 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3740      	adds	r7, #64	@ 0x40
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b0ba      	sub	sp, #232	@ 0xe8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80061ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80061d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80061d6:	4013      	ands	r3, r2
 80061d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80061dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d11b      	bne.n	800621c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80061e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061e8:	f003 0320 	and.w	r3, r3, #32
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d015      	beq.n	800621c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80061f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061f4:	f003 0320 	and.w	r3, r3, #32
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d105      	bne.n	8006208 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80061fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006200:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d009      	beq.n	800621c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 8300 	beq.w	8006812 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	4798      	blx	r3
      }
      return;
 800621a:	e2fa      	b.n	8006812 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800621c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006220:	2b00      	cmp	r3, #0
 8006222:	f000 8123 	beq.w	800646c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006226:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800622a:	4b8d      	ldr	r3, [pc, #564]	@ (8006460 <HAL_UART_IRQHandler+0x2b8>)
 800622c:	4013      	ands	r3, r2
 800622e:	2b00      	cmp	r3, #0
 8006230:	d106      	bne.n	8006240 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006232:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006236:	4b8b      	ldr	r3, [pc, #556]	@ (8006464 <HAL_UART_IRQHandler+0x2bc>)
 8006238:	4013      	ands	r3, r2
 800623a:	2b00      	cmp	r3, #0
 800623c:	f000 8116 	beq.w	800646c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	2b00      	cmp	r3, #0
 800624a:	d011      	beq.n	8006270 <HAL_UART_IRQHandler+0xc8>
 800624c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00b      	beq.n	8006270 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2201      	movs	r2, #1
 800625e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006266:	f043 0201 	orr.w	r2, r3, #1
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006274:	f003 0302 	and.w	r3, r3, #2
 8006278:	2b00      	cmp	r3, #0
 800627a:	d011      	beq.n	80062a0 <HAL_UART_IRQHandler+0xf8>
 800627c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006280:	f003 0301 	and.w	r3, r3, #1
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00b      	beq.n	80062a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2202      	movs	r2, #2
 800628e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006296:	f043 0204 	orr.w	r2, r3, #4
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062a4:	f003 0304 	and.w	r3, r3, #4
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d011      	beq.n	80062d0 <HAL_UART_IRQHandler+0x128>
 80062ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00b      	beq.n	80062d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2204      	movs	r2, #4
 80062be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062c6:	f043 0202 	orr.w	r2, r3, #2
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80062d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062d4:	f003 0308 	and.w	r3, r3, #8
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d017      	beq.n	800630c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80062dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062e0:	f003 0320 	and.w	r3, r3, #32
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d105      	bne.n	80062f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80062e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80062ec:	4b5c      	ldr	r3, [pc, #368]	@ (8006460 <HAL_UART_IRQHandler+0x2b8>)
 80062ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00b      	beq.n	800630c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2208      	movs	r2, #8
 80062fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006302:	f043 0208 	orr.w	r2, r3, #8
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800630c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006310:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006314:	2b00      	cmp	r3, #0
 8006316:	d012      	beq.n	800633e <HAL_UART_IRQHandler+0x196>
 8006318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800631c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00c      	beq.n	800633e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800632c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006334:	f043 0220 	orr.w	r2, r3, #32
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 8266 	beq.w	8006816 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800634a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800634e:	f003 0320 	and.w	r3, r3, #32
 8006352:	2b00      	cmp	r3, #0
 8006354:	d013      	beq.n	800637e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800635a:	f003 0320 	and.w	r3, r3, #32
 800635e:	2b00      	cmp	r3, #0
 8006360:	d105      	bne.n	800636e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d007      	beq.n	800637e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006384:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006392:	2b40      	cmp	r3, #64	@ 0x40
 8006394:	d005      	beq.n	80063a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800639a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d054      	beq.n	800644c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f001 f81d 	bl	80073e2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063b2:	2b40      	cmp	r3, #64	@ 0x40
 80063b4:	d146      	bne.n	8006444 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3308      	adds	r3, #8
 80063bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063c4:	e853 3f00 	ldrex	r3, [r3]
 80063c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80063cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3308      	adds	r3, #8
 80063de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80063e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80063e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80063ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80063f2:	e841 2300 	strex	r3, r2, [r1]
 80063f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80063fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1d9      	bne.n	80063b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006408:	2b00      	cmp	r3, #0
 800640a:	d017      	beq.n	800643c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006412:	4a15      	ldr	r2, [pc, #84]	@ (8006468 <HAL_UART_IRQHandler+0x2c0>)
 8006414:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800641c:	4618      	mov	r0, r3
 800641e:	f7fc fea9 	bl	8003174 <HAL_DMA_Abort_IT>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d019      	beq.n	800645c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800642e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006436:	4610      	mov	r0, r2
 8006438:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800643a:	e00f      	b.n	800645c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 fa1d 	bl	800687c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006442:	e00b      	b.n	800645c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 fa19 	bl	800687c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800644a:	e007      	b.n	800645c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fa15 	bl	800687c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800645a:	e1dc      	b.n	8006816 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800645c:	bf00      	nop
    return;
 800645e:	e1da      	b.n	8006816 <HAL_UART_IRQHandler+0x66e>
 8006460:	10000001 	.word	0x10000001
 8006464:	04000120 	.word	0x04000120
 8006468:	0800774f 	.word	0x0800774f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006470:	2b01      	cmp	r3, #1
 8006472:	f040 8170 	bne.w	8006756 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800647a:	f003 0310 	and.w	r3, r3, #16
 800647e:	2b00      	cmp	r3, #0
 8006480:	f000 8169 	beq.w	8006756 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006488:	f003 0310 	and.w	r3, r3, #16
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 8162 	beq.w	8006756 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2210      	movs	r2, #16
 8006498:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064a4:	2b40      	cmp	r3, #64	@ 0x40
 80064a6:	f040 80d8 	bne.w	800665a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 80af 	beq.w	8006620 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80064c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064cc:	429a      	cmp	r2, r3
 80064ce:	f080 80a7 	bcs.w	8006620 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0320 	and.w	r3, r3, #32
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f040 8087 	bne.w	80065fe <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80064fc:	e853 3f00 	ldrex	r3, [r3]
 8006500:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006504:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006508:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800650c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	461a      	mov	r2, r3
 8006516:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800651a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800651e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006522:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006526:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800652a:	e841 2300 	strex	r3, r2, [r1]
 800652e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006532:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1da      	bne.n	80064f0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	3308      	adds	r3, #8
 8006540:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006542:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006544:	e853 3f00 	ldrex	r3, [r3]
 8006548:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800654a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800654c:	f023 0301 	bic.w	r3, r3, #1
 8006550:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	3308      	adds	r3, #8
 800655a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800655e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006562:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006564:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006566:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800656a:	e841 2300 	strex	r3, r2, [r1]
 800656e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006570:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1e1      	bne.n	800653a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	3308      	adds	r3, #8
 800657c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006580:	e853 3f00 	ldrex	r3, [r3]
 8006584:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006586:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006588:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800658c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	3308      	adds	r3, #8
 8006596:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800659a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800659c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80065a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80065a2:	e841 2300 	strex	r3, r2, [r1]
 80065a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80065a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1e3      	bne.n	8006576 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2220      	movs	r2, #32
 80065b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065c4:	e853 3f00 	ldrex	r3, [r3]
 80065c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80065ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065cc:	f023 0310 	bic.w	r3, r3, #16
 80065d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	461a      	mov	r2, r3
 80065da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065e0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80065e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065e6:	e841 2300 	strex	r3, r2, [r1]
 80065ea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80065ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1e4      	bne.n	80065bc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7fc fd62 	bl	80030c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2202      	movs	r2, #2
 8006602:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006610:	b29b      	uxth	r3, r3
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	b29b      	uxth	r3, r3
 8006616:	4619      	mov	r1, r3
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f939 	bl	8006890 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800661e:	e0fc      	b.n	800681a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006626:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800662a:	429a      	cmp	r2, r3
 800662c:	f040 80f5 	bne.w	800681a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0320 	and.w	r3, r3, #32
 800663e:	2b20      	cmp	r3, #32
 8006640:	f040 80eb 	bne.w	800681a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2202      	movs	r2, #2
 8006648:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006650:	4619      	mov	r1, r3
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f91c 	bl	8006890 <HAL_UARTEx_RxEventCallback>
      return;
 8006658:	e0df      	b.n	800681a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006666:	b29b      	uxth	r3, r3
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006674:	b29b      	uxth	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	f000 80d1 	beq.w	800681e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800667c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006680:	2b00      	cmp	r3, #0
 8006682:	f000 80cc 	beq.w	800681e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800668e:	e853 3f00 	ldrex	r3, [r3]
 8006692:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006696:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800669a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	461a      	mov	r2, r3
 80066a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80066aa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066b0:	e841 2300 	strex	r3, r2, [r1]
 80066b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1e4      	bne.n	8006686 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	3308      	adds	r3, #8
 80066c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c6:	e853 3f00 	ldrex	r3, [r3]
 80066ca:	623b      	str	r3, [r7, #32]
   return(result);
 80066cc:	6a3b      	ldr	r3, [r7, #32]
 80066ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066d2:	f023 0301 	bic.w	r3, r3, #1
 80066d6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	3308      	adds	r3, #8
 80066e0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80066e4:	633a      	str	r2, [r7, #48]	@ 0x30
 80066e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066ec:	e841 2300 	strex	r3, r2, [r1]
 80066f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1e1      	bne.n	80066bc <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2220      	movs	r2, #32
 80066fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	e853 3f00 	ldrex	r3, [r3]
 8006718:	60fb      	str	r3, [r7, #12]
   return(result);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f023 0310 	bic.w	r3, r3, #16
 8006720:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	461a      	mov	r2, r3
 800672a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800672e:	61fb      	str	r3, [r7, #28]
 8006730:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006732:	69b9      	ldr	r1, [r7, #24]
 8006734:	69fa      	ldr	r2, [r7, #28]
 8006736:	e841 2300 	strex	r3, r2, [r1]
 800673a:	617b      	str	r3, [r7, #20]
   return(result);
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1e4      	bne.n	800670c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2202      	movs	r2, #2
 8006746:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006748:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800674c:	4619      	mov	r1, r3
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f89e 	bl	8006890 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006754:	e063      	b.n	800681e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800675a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00e      	beq.n	8006780 <HAL_UART_IRQHandler+0x5d8>
 8006762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006766:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d008      	beq.n	8006780 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006776:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f001 f88e 	bl	800789a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800677e:	e051      	b.n	8006824 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006784:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006788:	2b00      	cmp	r3, #0
 800678a:	d014      	beq.n	80067b6 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800678c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006794:	2b00      	cmp	r3, #0
 8006796:	d105      	bne.n	80067a4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800679c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d008      	beq.n	80067b6 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d03a      	beq.n	8006822 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	4798      	blx	r3
    }
    return;
 80067b4:	e035      	b.n	8006822 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80067b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d009      	beq.n	80067d6 <HAL_UART_IRQHandler+0x62e>
 80067c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 ffcf 	bl	8007772 <UART_EndTransmit_IT>
    return;
 80067d4:	e026      	b.n	8006824 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80067d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d009      	beq.n	80067f6 <HAL_UART_IRQHandler+0x64e>
 80067e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067e6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d003      	beq.n	80067f6 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f001 f867 	bl	80078c2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067f4:	e016      	b.n	8006824 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80067f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d010      	beq.n	8006824 <HAL_UART_IRQHandler+0x67c>
 8006802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006806:	2b00      	cmp	r3, #0
 8006808:	da0c      	bge.n	8006824 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f001 f84f 	bl	80078ae <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006810:	e008      	b.n	8006824 <HAL_UART_IRQHandler+0x67c>
      return;
 8006812:	bf00      	nop
 8006814:	e006      	b.n	8006824 <HAL_UART_IRQHandler+0x67c>
    return;
 8006816:	bf00      	nop
 8006818:	e004      	b.n	8006824 <HAL_UART_IRQHandler+0x67c>
      return;
 800681a:	bf00      	nop
 800681c:	e002      	b.n	8006824 <HAL_UART_IRQHandler+0x67c>
      return;
 800681e:	bf00      	nop
 8006820:	e000      	b.n	8006824 <HAL_UART_IRQHandler+0x67c>
    return;
 8006822:	bf00      	nop
  }
}
 8006824:	37e8      	adds	r7, #232	@ 0xe8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop

0800682c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800685c:	bf00      	nop
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	460b      	mov	r3, r1
 800689a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800689c:	bf00      	nop
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068ac:	b08c      	sub	sp, #48	@ 0x30
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	689a      	ldr	r2, [r3, #8]
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	431a      	orrs	r2, r3
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	431a      	orrs	r2, r3
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	69db      	ldr	r3, [r3, #28]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	4baa      	ldr	r3, [pc, #680]	@ (8006b80 <UART_SetConfig+0x2d8>)
 80068d8:	4013      	ands	r3, r2
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	6812      	ldr	r2, [r2, #0]
 80068de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068e0:	430b      	orrs	r3, r1
 80068e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	68da      	ldr	r2, [r3, #12]
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a9f      	ldr	r2, [pc, #636]	@ (8006b84 <UART_SetConfig+0x2dc>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d004      	beq.n	8006914 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006910:	4313      	orrs	r3, r2
 8006912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800691e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	6812      	ldr	r2, [r2, #0]
 8006926:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006928:	430b      	orrs	r3, r1
 800692a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006932:	f023 010f 	bic.w	r1, r3, #15
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	430a      	orrs	r2, r1
 8006940:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a90      	ldr	r2, [pc, #576]	@ (8006b88 <UART_SetConfig+0x2e0>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d125      	bne.n	8006998 <UART_SetConfig+0xf0>
 800694c:	4b8f      	ldr	r3, [pc, #572]	@ (8006b8c <UART_SetConfig+0x2e4>)
 800694e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006952:	f003 0303 	and.w	r3, r3, #3
 8006956:	2b03      	cmp	r3, #3
 8006958:	d81a      	bhi.n	8006990 <UART_SetConfig+0xe8>
 800695a:	a201      	add	r2, pc, #4	@ (adr r2, 8006960 <UART_SetConfig+0xb8>)
 800695c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006960:	08006971 	.word	0x08006971
 8006964:	08006981 	.word	0x08006981
 8006968:	08006979 	.word	0x08006979
 800696c:	08006989 	.word	0x08006989
 8006970:	2301      	movs	r3, #1
 8006972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006976:	e116      	b.n	8006ba6 <UART_SetConfig+0x2fe>
 8006978:	2302      	movs	r3, #2
 800697a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800697e:	e112      	b.n	8006ba6 <UART_SetConfig+0x2fe>
 8006980:	2304      	movs	r3, #4
 8006982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006986:	e10e      	b.n	8006ba6 <UART_SetConfig+0x2fe>
 8006988:	2308      	movs	r3, #8
 800698a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800698e:	e10a      	b.n	8006ba6 <UART_SetConfig+0x2fe>
 8006990:	2310      	movs	r3, #16
 8006992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006996:	e106      	b.n	8006ba6 <UART_SetConfig+0x2fe>
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a7c      	ldr	r2, [pc, #496]	@ (8006b90 <UART_SetConfig+0x2e8>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d138      	bne.n	8006a14 <UART_SetConfig+0x16c>
 80069a2:	4b7a      	ldr	r3, [pc, #488]	@ (8006b8c <UART_SetConfig+0x2e4>)
 80069a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069a8:	f003 030c 	and.w	r3, r3, #12
 80069ac:	2b0c      	cmp	r3, #12
 80069ae:	d82d      	bhi.n	8006a0c <UART_SetConfig+0x164>
 80069b0:	a201      	add	r2, pc, #4	@ (adr r2, 80069b8 <UART_SetConfig+0x110>)
 80069b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b6:	bf00      	nop
 80069b8:	080069ed 	.word	0x080069ed
 80069bc:	08006a0d 	.word	0x08006a0d
 80069c0:	08006a0d 	.word	0x08006a0d
 80069c4:	08006a0d 	.word	0x08006a0d
 80069c8:	080069fd 	.word	0x080069fd
 80069cc:	08006a0d 	.word	0x08006a0d
 80069d0:	08006a0d 	.word	0x08006a0d
 80069d4:	08006a0d 	.word	0x08006a0d
 80069d8:	080069f5 	.word	0x080069f5
 80069dc:	08006a0d 	.word	0x08006a0d
 80069e0:	08006a0d 	.word	0x08006a0d
 80069e4:	08006a0d 	.word	0x08006a0d
 80069e8:	08006a05 	.word	0x08006a05
 80069ec:	2300      	movs	r3, #0
 80069ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069f2:	e0d8      	b.n	8006ba6 <UART_SetConfig+0x2fe>
 80069f4:	2302      	movs	r3, #2
 80069f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069fa:	e0d4      	b.n	8006ba6 <UART_SetConfig+0x2fe>
 80069fc:	2304      	movs	r3, #4
 80069fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a02:	e0d0      	b.n	8006ba6 <UART_SetConfig+0x2fe>
 8006a04:	2308      	movs	r3, #8
 8006a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a0a:	e0cc      	b.n	8006ba6 <UART_SetConfig+0x2fe>
 8006a0c:	2310      	movs	r3, #16
 8006a0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a12:	e0c8      	b.n	8006ba6 <UART_SetConfig+0x2fe>
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a5e      	ldr	r2, [pc, #376]	@ (8006b94 <UART_SetConfig+0x2ec>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d125      	bne.n	8006a6a <UART_SetConfig+0x1c2>
 8006a1e:	4b5b      	ldr	r3, [pc, #364]	@ (8006b8c <UART_SetConfig+0x2e4>)
 8006a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a24:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006a28:	2b30      	cmp	r3, #48	@ 0x30
 8006a2a:	d016      	beq.n	8006a5a <UART_SetConfig+0x1b2>
 8006a2c:	2b30      	cmp	r3, #48	@ 0x30
 8006a2e:	d818      	bhi.n	8006a62 <UART_SetConfig+0x1ba>
 8006a30:	2b20      	cmp	r3, #32
 8006a32:	d00a      	beq.n	8006a4a <UART_SetConfig+0x1a2>
 8006a34:	2b20      	cmp	r3, #32
 8006a36:	d814      	bhi.n	8006a62 <UART_SetConfig+0x1ba>
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d002      	beq.n	8006a42 <UART_SetConfig+0x19a>
 8006a3c:	2b10      	cmp	r3, #16
 8006a3e:	d008      	beq.n	8006a52 <UART_SetConfig+0x1aa>
 8006a40:	e00f      	b.n	8006a62 <UART_SetConfig+0x1ba>
 8006a42:	2300      	movs	r3, #0
 8006a44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a48:	e0ad      	b.n	8006ba6 <UART_SetConfig+0x2fe>
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a50:	e0a9      	b.n	8006ba6 <UART_SetConfig+0x2fe>
 8006a52:	2304      	movs	r3, #4
 8006a54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a58:	e0a5      	b.n	8006ba6 <UART_SetConfig+0x2fe>
 8006a5a:	2308      	movs	r3, #8
 8006a5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a60:	e0a1      	b.n	8006ba6 <UART_SetConfig+0x2fe>
 8006a62:	2310      	movs	r3, #16
 8006a64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a68:	e09d      	b.n	8006ba6 <UART_SetConfig+0x2fe>
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a4a      	ldr	r2, [pc, #296]	@ (8006b98 <UART_SetConfig+0x2f0>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d125      	bne.n	8006ac0 <UART_SetConfig+0x218>
 8006a74:	4b45      	ldr	r3, [pc, #276]	@ (8006b8c <UART_SetConfig+0x2e4>)
 8006a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006a7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a80:	d016      	beq.n	8006ab0 <UART_SetConfig+0x208>
 8006a82:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a84:	d818      	bhi.n	8006ab8 <UART_SetConfig+0x210>
 8006a86:	2b80      	cmp	r3, #128	@ 0x80
 8006a88:	d00a      	beq.n	8006aa0 <UART_SetConfig+0x1f8>
 8006a8a:	2b80      	cmp	r3, #128	@ 0x80
 8006a8c:	d814      	bhi.n	8006ab8 <UART_SetConfig+0x210>
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d002      	beq.n	8006a98 <UART_SetConfig+0x1f0>
 8006a92:	2b40      	cmp	r3, #64	@ 0x40
 8006a94:	d008      	beq.n	8006aa8 <UART_SetConfig+0x200>
 8006a96:	e00f      	b.n	8006ab8 <UART_SetConfig+0x210>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a9e:	e082      	b.n	8006ba6 <UART_SetConfig+0x2fe>
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aa6:	e07e      	b.n	8006ba6 <UART_SetConfig+0x2fe>
 8006aa8:	2304      	movs	r3, #4
 8006aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aae:	e07a      	b.n	8006ba6 <UART_SetConfig+0x2fe>
 8006ab0:	2308      	movs	r3, #8
 8006ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ab6:	e076      	b.n	8006ba6 <UART_SetConfig+0x2fe>
 8006ab8:	2310      	movs	r3, #16
 8006aba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006abe:	e072      	b.n	8006ba6 <UART_SetConfig+0x2fe>
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a35      	ldr	r2, [pc, #212]	@ (8006b9c <UART_SetConfig+0x2f4>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d12a      	bne.n	8006b20 <UART_SetConfig+0x278>
 8006aca:	4b30      	ldr	r3, [pc, #192]	@ (8006b8c <UART_SetConfig+0x2e4>)
 8006acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ad0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ad4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ad8:	d01a      	beq.n	8006b10 <UART_SetConfig+0x268>
 8006ada:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ade:	d81b      	bhi.n	8006b18 <UART_SetConfig+0x270>
 8006ae0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ae4:	d00c      	beq.n	8006b00 <UART_SetConfig+0x258>
 8006ae6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006aea:	d815      	bhi.n	8006b18 <UART_SetConfig+0x270>
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d003      	beq.n	8006af8 <UART_SetConfig+0x250>
 8006af0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006af4:	d008      	beq.n	8006b08 <UART_SetConfig+0x260>
 8006af6:	e00f      	b.n	8006b18 <UART_SetConfig+0x270>
 8006af8:	2300      	movs	r3, #0
 8006afa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006afe:	e052      	b.n	8006ba6 <UART_SetConfig+0x2fe>
 8006b00:	2302      	movs	r3, #2
 8006b02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b06:	e04e      	b.n	8006ba6 <UART_SetConfig+0x2fe>
 8006b08:	2304      	movs	r3, #4
 8006b0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b0e:	e04a      	b.n	8006ba6 <UART_SetConfig+0x2fe>
 8006b10:	2308      	movs	r3, #8
 8006b12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b16:	e046      	b.n	8006ba6 <UART_SetConfig+0x2fe>
 8006b18:	2310      	movs	r3, #16
 8006b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b1e:	e042      	b.n	8006ba6 <UART_SetConfig+0x2fe>
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a17      	ldr	r2, [pc, #92]	@ (8006b84 <UART_SetConfig+0x2dc>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d13a      	bne.n	8006ba0 <UART_SetConfig+0x2f8>
 8006b2a:	4b18      	ldr	r3, [pc, #96]	@ (8006b8c <UART_SetConfig+0x2e4>)
 8006b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b30:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006b34:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b38:	d01a      	beq.n	8006b70 <UART_SetConfig+0x2c8>
 8006b3a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b3e:	d81b      	bhi.n	8006b78 <UART_SetConfig+0x2d0>
 8006b40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b44:	d00c      	beq.n	8006b60 <UART_SetConfig+0x2b8>
 8006b46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b4a:	d815      	bhi.n	8006b78 <UART_SetConfig+0x2d0>
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d003      	beq.n	8006b58 <UART_SetConfig+0x2b0>
 8006b50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b54:	d008      	beq.n	8006b68 <UART_SetConfig+0x2c0>
 8006b56:	e00f      	b.n	8006b78 <UART_SetConfig+0x2d0>
 8006b58:	2300      	movs	r3, #0
 8006b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b5e:	e022      	b.n	8006ba6 <UART_SetConfig+0x2fe>
 8006b60:	2302      	movs	r3, #2
 8006b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b66:	e01e      	b.n	8006ba6 <UART_SetConfig+0x2fe>
 8006b68:	2304      	movs	r3, #4
 8006b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b6e:	e01a      	b.n	8006ba6 <UART_SetConfig+0x2fe>
 8006b70:	2308      	movs	r3, #8
 8006b72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b76:	e016      	b.n	8006ba6 <UART_SetConfig+0x2fe>
 8006b78:	2310      	movs	r3, #16
 8006b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b7e:	e012      	b.n	8006ba6 <UART_SetConfig+0x2fe>
 8006b80:	cfff69f3 	.word	0xcfff69f3
 8006b84:	40008000 	.word	0x40008000
 8006b88:	40013800 	.word	0x40013800
 8006b8c:	40021000 	.word	0x40021000
 8006b90:	40004400 	.word	0x40004400
 8006b94:	40004800 	.word	0x40004800
 8006b98:	40004c00 	.word	0x40004c00
 8006b9c:	40005000 	.word	0x40005000
 8006ba0:	2310      	movs	r3, #16
 8006ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4aae      	ldr	r2, [pc, #696]	@ (8006e64 <UART_SetConfig+0x5bc>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	f040 8097 	bne.w	8006ce0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006bb2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006bb6:	2b08      	cmp	r3, #8
 8006bb8:	d823      	bhi.n	8006c02 <UART_SetConfig+0x35a>
 8006bba:	a201      	add	r2, pc, #4	@ (adr r2, 8006bc0 <UART_SetConfig+0x318>)
 8006bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc0:	08006be5 	.word	0x08006be5
 8006bc4:	08006c03 	.word	0x08006c03
 8006bc8:	08006bed 	.word	0x08006bed
 8006bcc:	08006c03 	.word	0x08006c03
 8006bd0:	08006bf3 	.word	0x08006bf3
 8006bd4:	08006c03 	.word	0x08006c03
 8006bd8:	08006c03 	.word	0x08006c03
 8006bdc:	08006c03 	.word	0x08006c03
 8006be0:	08006bfb 	.word	0x08006bfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006be4:	f7fd fc14 	bl	8004410 <HAL_RCC_GetPCLK1Freq>
 8006be8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006bea:	e010      	b.n	8006c0e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bec:	4b9e      	ldr	r3, [pc, #632]	@ (8006e68 <UART_SetConfig+0x5c0>)
 8006bee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006bf0:	e00d      	b.n	8006c0e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bf2:	f7fd fb9f 	bl	8004334 <HAL_RCC_GetSysClockFreq>
 8006bf6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006bf8:	e009      	b.n	8006c0e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c00:	e005      	b.n	8006c0e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006c02:	2300      	movs	r3, #0
 8006c04:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006c0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 8130 	beq.w	8006e76 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c1a:	4a94      	ldr	r2, [pc, #592]	@ (8006e6c <UART_SetConfig+0x5c4>)
 8006c1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c20:	461a      	mov	r2, r3
 8006c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c24:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c28:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	685a      	ldr	r2, [r3, #4]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	005b      	lsls	r3, r3, #1
 8006c32:	4413      	add	r3, r2
 8006c34:	69ba      	ldr	r2, [r7, #24]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d305      	bcc.n	8006c46 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d903      	bls.n	8006c4e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006c4c:	e113      	b.n	8006e76 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c50:	2200      	movs	r2, #0
 8006c52:	60bb      	str	r3, [r7, #8]
 8006c54:	60fa      	str	r2, [r7, #12]
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c5a:	4a84      	ldr	r2, [pc, #528]	@ (8006e6c <UART_SetConfig+0x5c4>)
 8006c5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	2200      	movs	r2, #0
 8006c64:	603b      	str	r3, [r7, #0]
 8006c66:	607a      	str	r2, [r7, #4]
 8006c68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c70:	f7f9 ffac 	bl	8000bcc <__aeabi_uldivmod>
 8006c74:	4602      	mov	r2, r0
 8006c76:	460b      	mov	r3, r1
 8006c78:	4610      	mov	r0, r2
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	f04f 0200 	mov.w	r2, #0
 8006c80:	f04f 0300 	mov.w	r3, #0
 8006c84:	020b      	lsls	r3, r1, #8
 8006c86:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006c8a:	0202      	lsls	r2, r0, #8
 8006c8c:	6979      	ldr	r1, [r7, #20]
 8006c8e:	6849      	ldr	r1, [r1, #4]
 8006c90:	0849      	lsrs	r1, r1, #1
 8006c92:	2000      	movs	r0, #0
 8006c94:	460c      	mov	r4, r1
 8006c96:	4605      	mov	r5, r0
 8006c98:	eb12 0804 	adds.w	r8, r2, r4
 8006c9c:	eb43 0905 	adc.w	r9, r3, r5
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	469a      	mov	sl, r3
 8006ca8:	4693      	mov	fp, r2
 8006caa:	4652      	mov	r2, sl
 8006cac:	465b      	mov	r3, fp
 8006cae:	4640      	mov	r0, r8
 8006cb0:	4649      	mov	r1, r9
 8006cb2:	f7f9 ff8b 	bl	8000bcc <__aeabi_uldivmod>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	460b      	mov	r3, r1
 8006cba:	4613      	mov	r3, r2
 8006cbc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006cbe:	6a3b      	ldr	r3, [r7, #32]
 8006cc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cc4:	d308      	bcc.n	8006cd8 <UART_SetConfig+0x430>
 8006cc6:	6a3b      	ldr	r3, [r7, #32]
 8006cc8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ccc:	d204      	bcs.n	8006cd8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6a3a      	ldr	r2, [r7, #32]
 8006cd4:	60da      	str	r2, [r3, #12]
 8006cd6:	e0ce      	b.n	8006e76 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006cde:	e0ca      	b.n	8006e76 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	69db      	ldr	r3, [r3, #28]
 8006ce4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ce8:	d166      	bne.n	8006db8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006cea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006cee:	2b08      	cmp	r3, #8
 8006cf0:	d827      	bhi.n	8006d42 <UART_SetConfig+0x49a>
 8006cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8006cf8 <UART_SetConfig+0x450>)
 8006cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf8:	08006d1d 	.word	0x08006d1d
 8006cfc:	08006d25 	.word	0x08006d25
 8006d00:	08006d2d 	.word	0x08006d2d
 8006d04:	08006d43 	.word	0x08006d43
 8006d08:	08006d33 	.word	0x08006d33
 8006d0c:	08006d43 	.word	0x08006d43
 8006d10:	08006d43 	.word	0x08006d43
 8006d14:	08006d43 	.word	0x08006d43
 8006d18:	08006d3b 	.word	0x08006d3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d1c:	f7fd fb78 	bl	8004410 <HAL_RCC_GetPCLK1Freq>
 8006d20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d22:	e014      	b.n	8006d4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d24:	f7fd fb8a 	bl	800443c <HAL_RCC_GetPCLK2Freq>
 8006d28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d2a:	e010      	b.n	8006d4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d2c:	4b4e      	ldr	r3, [pc, #312]	@ (8006e68 <UART_SetConfig+0x5c0>)
 8006d2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d30:	e00d      	b.n	8006d4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d32:	f7fd faff 	bl	8004334 <HAL_RCC_GetSysClockFreq>
 8006d36:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d38:	e009      	b.n	8006d4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d40:	e005      	b.n	8006d4e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006d42:	2300      	movs	r3, #0
 8006d44:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f000 8090 	beq.w	8006e76 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d5a:	4a44      	ldr	r2, [pc, #272]	@ (8006e6c <UART_SetConfig+0x5c4>)
 8006d5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d60:	461a      	mov	r2, r3
 8006d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d64:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d68:	005a      	lsls	r2, r3, #1
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	085b      	lsrs	r3, r3, #1
 8006d70:	441a      	add	r2, r3
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d7c:	6a3b      	ldr	r3, [r7, #32]
 8006d7e:	2b0f      	cmp	r3, #15
 8006d80:	d916      	bls.n	8006db0 <UART_SetConfig+0x508>
 8006d82:	6a3b      	ldr	r3, [r7, #32]
 8006d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d88:	d212      	bcs.n	8006db0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	f023 030f 	bic.w	r3, r3, #15
 8006d92:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d94:	6a3b      	ldr	r3, [r7, #32]
 8006d96:	085b      	lsrs	r3, r3, #1
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	f003 0307 	and.w	r3, r3, #7
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	8bfb      	ldrh	r3, [r7, #30]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	8bfa      	ldrh	r2, [r7, #30]
 8006dac:	60da      	str	r2, [r3, #12]
 8006dae:	e062      	b.n	8006e76 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006db6:	e05e      	b.n	8006e76 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006db8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006dbc:	2b08      	cmp	r3, #8
 8006dbe:	d828      	bhi.n	8006e12 <UART_SetConfig+0x56a>
 8006dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8006dc8 <UART_SetConfig+0x520>)
 8006dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc6:	bf00      	nop
 8006dc8:	08006ded 	.word	0x08006ded
 8006dcc:	08006df5 	.word	0x08006df5
 8006dd0:	08006dfd 	.word	0x08006dfd
 8006dd4:	08006e13 	.word	0x08006e13
 8006dd8:	08006e03 	.word	0x08006e03
 8006ddc:	08006e13 	.word	0x08006e13
 8006de0:	08006e13 	.word	0x08006e13
 8006de4:	08006e13 	.word	0x08006e13
 8006de8:	08006e0b 	.word	0x08006e0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dec:	f7fd fb10 	bl	8004410 <HAL_RCC_GetPCLK1Freq>
 8006df0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006df2:	e014      	b.n	8006e1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006df4:	f7fd fb22 	bl	800443c <HAL_RCC_GetPCLK2Freq>
 8006df8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dfa:	e010      	b.n	8006e1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8006e68 <UART_SetConfig+0x5c0>)
 8006dfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e00:	e00d      	b.n	8006e1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e02:	f7fd fa97 	bl	8004334 <HAL_RCC_GetSysClockFreq>
 8006e06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e08:	e009      	b.n	8006e1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e10:	e005      	b.n	8006e1e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006e12:	2300      	movs	r3, #0
 8006e14:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006e1c:	bf00      	nop
    }

    if (pclk != 0U)
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d028      	beq.n	8006e76 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e28:	4a10      	ldr	r2, [pc, #64]	@ (8006e6c <UART_SetConfig+0x5c4>)
 8006e2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e32:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	085b      	lsrs	r3, r3, #1
 8006e3c:	441a      	add	r2, r3
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e48:	6a3b      	ldr	r3, [r7, #32]
 8006e4a:	2b0f      	cmp	r3, #15
 8006e4c:	d910      	bls.n	8006e70 <UART_SetConfig+0x5c8>
 8006e4e:	6a3b      	ldr	r3, [r7, #32]
 8006e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e54:	d20c      	bcs.n	8006e70 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e56:	6a3b      	ldr	r3, [r7, #32]
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	60da      	str	r2, [r3, #12]
 8006e60:	e009      	b.n	8006e76 <UART_SetConfig+0x5ce>
 8006e62:	bf00      	nop
 8006e64:	40008000 	.word	0x40008000
 8006e68:	00f42400 	.word	0x00f42400
 8006e6c:	08018744 	.word	0x08018744
      }
      else
      {
        ret = HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006e92:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3730      	adds	r7, #48	@ 0x30
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006ea0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eac:	f003 0308 	and.w	r3, r3, #8
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00a      	beq.n	8006eca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ece:	f003 0301 	and.w	r3, r3, #1
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00a      	beq.n	8006eec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	430a      	orrs	r2, r1
 8006eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ef0:	f003 0302 	and.w	r3, r3, #2
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00a      	beq.n	8006f0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	430a      	orrs	r2, r1
 8006f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f12:	f003 0304 	and.w	r3, r3, #4
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00a      	beq.n	8006f30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f34:	f003 0310 	and.w	r3, r3, #16
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d00a      	beq.n	8006f52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f56:	f003 0320 	and.w	r3, r3, #32
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00a      	beq.n	8006f74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	430a      	orrs	r2, r1
 8006f72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d01a      	beq.n	8006fb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	430a      	orrs	r2, r1
 8006f94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f9e:	d10a      	bne.n	8006fb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	430a      	orrs	r2, r1
 8006fb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00a      	beq.n	8006fd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	605a      	str	r2, [r3, #4]
  }
}
 8006fd8:	bf00      	nop
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b098      	sub	sp, #96	@ 0x60
 8006fe8:	af02      	add	r7, sp, #8
 8006fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ff4:	f7fb fe56 	bl	8002ca4 <HAL_GetTick>
 8006ff8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0308 	and.w	r3, r3, #8
 8007004:	2b08      	cmp	r3, #8
 8007006:	d12f      	bne.n	8007068 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007008:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800700c:	9300      	str	r3, [sp, #0]
 800700e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007010:	2200      	movs	r2, #0
 8007012:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 f88e 	bl	8007138 <UART_WaitOnFlagUntilTimeout>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d022      	beq.n	8007068 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800702a:	e853 3f00 	ldrex	r3, [r3]
 800702e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007032:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007036:	653b      	str	r3, [r7, #80]	@ 0x50
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	461a      	mov	r2, r3
 800703e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007040:	647b      	str	r3, [r7, #68]	@ 0x44
 8007042:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007044:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007046:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007048:	e841 2300 	strex	r3, r2, [r1]
 800704c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800704e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1e6      	bne.n	8007022 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2220      	movs	r2, #32
 8007058:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e063      	b.n	8007130 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0304 	and.w	r3, r3, #4
 8007072:	2b04      	cmp	r3, #4
 8007074:	d149      	bne.n	800710a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007076:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800707e:	2200      	movs	r2, #0
 8007080:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f857 	bl	8007138 <UART_WaitOnFlagUntilTimeout>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d03c      	beq.n	800710a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007098:	e853 3f00 	ldrex	r3, [r3]
 800709c:	623b      	str	r3, [r7, #32]
   return(result);
 800709e:	6a3b      	ldr	r3, [r7, #32]
 80070a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	461a      	mov	r2, r3
 80070ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80070b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070b6:	e841 2300 	strex	r3, r2, [r1]
 80070ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80070bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1e6      	bne.n	8007090 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	3308      	adds	r3, #8
 80070c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	e853 3f00 	ldrex	r3, [r3]
 80070d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f023 0301 	bic.w	r3, r3, #1
 80070d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	3308      	adds	r3, #8
 80070e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070e2:	61fa      	str	r2, [r7, #28]
 80070e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e6:	69b9      	ldr	r1, [r7, #24]
 80070e8:	69fa      	ldr	r2, [r7, #28]
 80070ea:	e841 2300 	strex	r3, r2, [r1]
 80070ee:	617b      	str	r3, [r7, #20]
   return(result);
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1e5      	bne.n	80070c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2220      	movs	r2, #32
 80070fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e012      	b.n	8007130 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2220      	movs	r2, #32
 800710e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2220      	movs	r2, #32
 8007116:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3758      	adds	r7, #88	@ 0x58
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	603b      	str	r3, [r7, #0]
 8007144:	4613      	mov	r3, r2
 8007146:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007148:	e04f      	b.n	80071ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007150:	d04b      	beq.n	80071ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007152:	f7fb fda7 	bl	8002ca4 <HAL_GetTick>
 8007156:	4602      	mov	r2, r0
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	69ba      	ldr	r2, [r7, #24]
 800715e:	429a      	cmp	r2, r3
 8007160:	d302      	bcc.n	8007168 <UART_WaitOnFlagUntilTimeout+0x30>
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d101      	bne.n	800716c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e04e      	b.n	800720a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0304 	and.w	r3, r3, #4
 8007176:	2b00      	cmp	r3, #0
 8007178:	d037      	beq.n	80071ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	2b80      	cmp	r3, #128	@ 0x80
 800717e:	d034      	beq.n	80071ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	2b40      	cmp	r3, #64	@ 0x40
 8007184:	d031      	beq.n	80071ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	69db      	ldr	r3, [r3, #28]
 800718c:	f003 0308 	and.w	r3, r3, #8
 8007190:	2b08      	cmp	r3, #8
 8007192:	d110      	bne.n	80071b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2208      	movs	r2, #8
 800719a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f000 f920 	bl	80073e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2208      	movs	r2, #8
 80071a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e029      	b.n	800720a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	69db      	ldr	r3, [r3, #28]
 80071bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071c4:	d111      	bne.n	80071ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80071ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f000 f906 	bl	80073e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2220      	movs	r2, #32
 80071da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e00f      	b.n	800720a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	69da      	ldr	r2, [r3, #28]
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	4013      	ands	r3, r2
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	bf0c      	ite	eq
 80071fa:	2301      	moveq	r3, #1
 80071fc:	2300      	movne	r3, #0
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	461a      	mov	r2, r3
 8007202:	79fb      	ldrb	r3, [r7, #7]
 8007204:	429a      	cmp	r2, r3
 8007206:	d0a0      	beq.n	800714a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
	...

08007214 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b096      	sub	sp, #88	@ 0x58
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	4613      	mov	r3, r2
 8007220:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	88fa      	ldrh	r2, [r7, #6]
 800722c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2222      	movs	r2, #34	@ 0x22
 800723c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007246:	2b00      	cmp	r3, #0
 8007248:	d02d      	beq.n	80072a6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007250:	4a40      	ldr	r2, [pc, #256]	@ (8007354 <UART_Start_Receive_DMA+0x140>)
 8007252:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800725a:	4a3f      	ldr	r2, [pc, #252]	@ (8007358 <UART_Start_Receive_DMA+0x144>)
 800725c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007264:	4a3d      	ldr	r2, [pc, #244]	@ (800735c <UART_Start_Receive_DMA+0x148>)
 8007266:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800726e:	2200      	movs	r2, #0
 8007270:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3324      	adds	r3, #36	@ 0x24
 800727e:	4619      	mov	r1, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007284:	461a      	mov	r2, r3
 8007286:	88fb      	ldrh	r3, [r7, #6]
 8007288:	f7fb fea0 	bl	8002fcc <HAL_DMA_Start_IT>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d009      	beq.n	80072a6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2210      	movs	r2, #16
 8007296:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2220      	movs	r2, #32
 800729e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e051      	b.n	800734a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d018      	beq.n	80072e0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072b6:	e853 3f00 	ldrex	r3, [r3]
 80072ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80072bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	461a      	mov	r2, r3
 80072ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072ce:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80072d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80072d4:	e841 2300 	strex	r3, r2, [r1]
 80072d8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80072da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1e6      	bne.n	80072ae <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	3308      	adds	r3, #8
 80072e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ea:	e853 3f00 	ldrex	r3, [r3]
 80072ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80072f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f2:	f043 0301 	orr.w	r3, r3, #1
 80072f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	3308      	adds	r3, #8
 80072fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007300:	637a      	str	r2, [r7, #52]	@ 0x34
 8007302:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007304:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007306:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007308:	e841 2300 	strex	r3, r2, [r1]
 800730c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800730e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1e5      	bne.n	80072e0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	3308      	adds	r3, #8
 800731a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	e853 3f00 	ldrex	r3, [r3]
 8007322:	613b      	str	r3, [r7, #16]
   return(result);
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800732a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	3308      	adds	r3, #8
 8007332:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007334:	623a      	str	r2, [r7, #32]
 8007336:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007338:	69f9      	ldr	r1, [r7, #28]
 800733a:	6a3a      	ldr	r2, [r7, #32]
 800733c:	e841 2300 	strex	r3, r2, [r1]
 8007340:	61bb      	str	r3, [r7, #24]
   return(result);
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1e5      	bne.n	8007314 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3758      	adds	r7, #88	@ 0x58
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	08007565 	.word	0x08007565
 8007358:	08007691 	.word	0x08007691
 800735c:	080076cf 	.word	0x080076cf

08007360 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007360:	b480      	push	{r7}
 8007362:	b08f      	sub	sp, #60	@ 0x3c
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736e:	6a3b      	ldr	r3, [r7, #32]
 8007370:	e853 3f00 	ldrex	r3, [r3]
 8007374:	61fb      	str	r3, [r7, #28]
   return(result);
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800737c:	637b      	str	r3, [r7, #52]	@ 0x34
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	461a      	mov	r2, r3
 8007384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007386:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007388:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800738c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800738e:	e841 2300 	strex	r3, r2, [r1]
 8007392:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1e6      	bne.n	8007368 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	3308      	adds	r3, #8
 80073a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	e853 3f00 	ldrex	r3, [r3]
 80073a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80073b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	3308      	adds	r3, #8
 80073b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073ba:	61ba      	str	r2, [r7, #24]
 80073bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073be:	6979      	ldr	r1, [r7, #20]
 80073c0:	69ba      	ldr	r2, [r7, #24]
 80073c2:	e841 2300 	strex	r3, r2, [r1]
 80073c6:	613b      	str	r3, [r7, #16]
   return(result);
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1e5      	bne.n	800739a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2220      	movs	r2, #32
 80073d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80073d6:	bf00      	nop
 80073d8:	373c      	adds	r7, #60	@ 0x3c
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr

080073e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b095      	sub	sp, #84	@ 0x54
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073f2:	e853 3f00 	ldrex	r3, [r3]
 80073f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80073f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	461a      	mov	r2, r3
 8007406:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007408:	643b      	str	r3, [r7, #64]	@ 0x40
 800740a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800740e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007410:	e841 2300 	strex	r3, r2, [r1]
 8007414:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1e6      	bne.n	80073ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	3308      	adds	r3, #8
 8007422:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	e853 3f00 	ldrex	r3, [r3]
 800742a:	61fb      	str	r3, [r7, #28]
   return(result);
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007432:	f023 0301 	bic.w	r3, r3, #1
 8007436:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	3308      	adds	r3, #8
 800743e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007440:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007442:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007444:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007446:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007448:	e841 2300 	strex	r3, r2, [r1]
 800744c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800744e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1e3      	bne.n	800741c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007458:	2b01      	cmp	r3, #1
 800745a:	d118      	bne.n	800748e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	e853 3f00 	ldrex	r3, [r3]
 8007468:	60bb      	str	r3, [r7, #8]
   return(result);
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	f023 0310 	bic.w	r3, r3, #16
 8007470:	647b      	str	r3, [r7, #68]	@ 0x44
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	461a      	mov	r2, r3
 8007478:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800747a:	61bb      	str	r3, [r7, #24]
 800747c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747e:	6979      	ldr	r1, [r7, #20]
 8007480:	69ba      	ldr	r2, [r7, #24]
 8007482:	e841 2300 	strex	r3, r2, [r1]
 8007486:	613b      	str	r3, [r7, #16]
   return(result);
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1e6      	bne.n	800745c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2220      	movs	r2, #32
 8007492:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80074a2:	bf00      	nop
 80074a4:	3754      	adds	r7, #84	@ 0x54
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b090      	sub	sp, #64	@ 0x40
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ba:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0320 	and.w	r3, r3, #32
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d137      	bne.n	800753a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80074ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074cc:	2200      	movs	r2, #0
 80074ce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80074d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3308      	adds	r3, #8
 80074d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074dc:	e853 3f00 	ldrex	r3, [r3]
 80074e0:	623b      	str	r3, [r7, #32]
   return(result);
 80074e2:	6a3b      	ldr	r3, [r7, #32]
 80074e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	3308      	adds	r3, #8
 80074f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80074f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80074f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074fa:	e841 2300 	strex	r3, r2, [r1]
 80074fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1e5      	bne.n	80074d2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	e853 3f00 	ldrex	r3, [r3]
 8007512:	60fb      	str	r3, [r7, #12]
   return(result);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800751a:	637b      	str	r3, [r7, #52]	@ 0x34
 800751c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	461a      	mov	r2, r3
 8007522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007524:	61fb      	str	r3, [r7, #28]
 8007526:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007528:	69b9      	ldr	r1, [r7, #24]
 800752a:	69fa      	ldr	r2, [r7, #28]
 800752c:	e841 2300 	strex	r3, r2, [r1]
 8007530:	617b      	str	r3, [r7, #20]
   return(result);
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1e6      	bne.n	8007506 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007538:	e002      	b.n	8007540 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800753a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800753c:	f7ff f976 	bl	800682c <HAL_UART_TxCpltCallback>
}
 8007540:	bf00      	nop
 8007542:	3740      	adds	r7, #64	@ 0x40
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007554:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f7ff f972 	bl	8006840 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800755c:	bf00      	nop
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b09c      	sub	sp, #112	@ 0x70
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007570:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0320 	and.w	r3, r3, #32
 800757c:	2b00      	cmp	r3, #0
 800757e:	d171      	bne.n	8007664 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007580:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007582:	2200      	movs	r2, #0
 8007584:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007588:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007590:	e853 3f00 	ldrex	r3, [r3]
 8007594:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007596:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007598:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800759c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800759e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	461a      	mov	r2, r3
 80075a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80075a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80075a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80075ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80075ae:	e841 2300 	strex	r3, r2, [r1]
 80075b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80075b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1e6      	bne.n	8007588 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	3308      	adds	r3, #8
 80075c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c4:	e853 3f00 	ldrex	r3, [r3]
 80075c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80075ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075cc:	f023 0301 	bic.w	r3, r3, #1
 80075d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80075d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	3308      	adds	r3, #8
 80075d8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80075da:	647a      	str	r2, [r7, #68]	@ 0x44
 80075dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80075e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075e2:	e841 2300 	strex	r3, r2, [r1]
 80075e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80075e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1e5      	bne.n	80075ba <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	3308      	adds	r3, #8
 80075f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f8:	e853 3f00 	ldrex	r3, [r3]
 80075fc:	623b      	str	r3, [r7, #32]
   return(result);
 80075fe:	6a3b      	ldr	r3, [r7, #32]
 8007600:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007604:	663b      	str	r3, [r7, #96]	@ 0x60
 8007606:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	3308      	adds	r3, #8
 800760c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800760e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007610:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007612:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007614:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007616:	e841 2300 	strex	r3, r2, [r1]
 800761a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800761c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1e5      	bne.n	80075ee <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007622:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007624:	2220      	movs	r2, #32
 8007626:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800762a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800762c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800762e:	2b01      	cmp	r3, #1
 8007630:	d118      	bne.n	8007664 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007632:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	e853 3f00 	ldrex	r3, [r3]
 800763e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f023 0310 	bic.w	r3, r3, #16
 8007646:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007648:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	461a      	mov	r2, r3
 800764e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007650:	61fb      	str	r3, [r7, #28]
 8007652:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007654:	69b9      	ldr	r1, [r7, #24]
 8007656:	69fa      	ldr	r2, [r7, #28]
 8007658:	e841 2300 	strex	r3, r2, [r1]
 800765c:	617b      	str	r3, [r7, #20]
   return(result);
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1e6      	bne.n	8007632 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007664:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007666:	2200      	movs	r2, #0
 8007668:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800766a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800766c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800766e:	2b01      	cmp	r3, #1
 8007670:	d107      	bne.n	8007682 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007672:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007674:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007678:	4619      	mov	r1, r3
 800767a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800767c:	f7ff f908 	bl	8006890 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007680:	e002      	b.n	8007688 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007682:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007684:	f7ff f8e6 	bl	8006854 <HAL_UART_RxCpltCallback>
}
 8007688:	bf00      	nop
 800768a:	3770      	adds	r7, #112	@ 0x70
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800769c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2201      	movs	r2, #1
 80076a2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d109      	bne.n	80076c0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80076b2:	085b      	lsrs	r3, r3, #1
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	4619      	mov	r1, r3
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f7ff f8e9 	bl	8006890 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80076be:	e002      	b.n	80076c6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f7ff f8d1 	bl	8006868 <HAL_UART_RxHalfCpltCallback>
}
 80076c6:	bf00      	nop
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b086      	sub	sp, #24
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076da:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076e2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076ea:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076f6:	2b80      	cmp	r3, #128	@ 0x80
 80076f8:	d109      	bne.n	800770e <UART_DMAError+0x40>
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	2b21      	cmp	r3, #33	@ 0x21
 80076fe:	d106      	bne.n	800770e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	2200      	movs	r2, #0
 8007704:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007708:	6978      	ldr	r0, [r7, #20]
 800770a:	f7ff fe29 	bl	8007360 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007718:	2b40      	cmp	r3, #64	@ 0x40
 800771a:	d109      	bne.n	8007730 <UART_DMAError+0x62>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2b22      	cmp	r3, #34	@ 0x22
 8007720:	d106      	bne.n	8007730 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	2200      	movs	r2, #0
 8007726:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800772a:	6978      	ldr	r0, [r7, #20]
 800772c:	f7ff fe59 	bl	80073e2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007736:	f043 0210 	orr.w	r2, r3, #16
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007740:	6978      	ldr	r0, [r7, #20]
 8007742:	f7ff f89b 	bl	800687c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007746:	bf00      	nop
 8007748:	3718      	adds	r7, #24
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b084      	sub	sp, #16
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800775a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f7ff f889 	bl	800687c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800776a:	bf00      	nop
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b088      	sub	sp, #32
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	e853 3f00 	ldrex	r3, [r3]
 8007786:	60bb      	str	r3, [r7, #8]
   return(result);
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800778e:	61fb      	str	r3, [r7, #28]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	461a      	mov	r2, r3
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	61bb      	str	r3, [r7, #24]
 800779a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779c:	6979      	ldr	r1, [r7, #20]
 800779e:	69ba      	ldr	r2, [r7, #24]
 80077a0:	e841 2300 	strex	r3, r2, [r1]
 80077a4:	613b      	str	r3, [r7, #16]
   return(result);
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1e6      	bne.n	800777a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2220      	movs	r2, #32
 80077b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f7ff f836 	bl	800682c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077c0:	bf00      	nop
 80077c2:	3720      	adds	r7, #32
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]
 80077d4:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d101      	bne.n	80077e0 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e058      	b.n	8007892 <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d106      	bne.n	80077f8 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80077f2:	68f8      	ldr	r0, [r7, #12]
 80077f4:	f7fa ffce 	bl	8002794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2224      	movs	r2, #36	@ 0x24
 80077fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f022 0201 	bic.w	r2, r2, #1
 800780e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007814:	2b00      	cmp	r3, #0
 8007816:	d002      	beq.n	800781e <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f7ff fb41 	bl	8006ea0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f7ff f842 	bl	80068a8 <UART_SetConfig>
 8007824:	4603      	mov	r3, r0
 8007826:	2b01      	cmp	r3, #1
 8007828:	d101      	bne.n	800782e <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e031      	b.n	8007892 <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	689a      	ldr	r2, [r3, #8]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800783c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	430a      	orrs	r2, r1
 8007850:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	055b      	lsls	r3, r3, #21
 8007856:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	041b      	lsls	r3, r3, #16
 800785c:	697a      	ldr	r2, [r7, #20]
 800785e:	4313      	orrs	r3, r2
 8007860:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 800786c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	6812      	ldr	r2, [r2, #0]
 8007874:	6979      	ldr	r1, [r7, #20]
 8007876:	430b      	orrs	r3, r1
 8007878:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f042 0201 	orr.w	r2, r2, #1
 8007888:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f7ff fbaa 	bl	8006fe4 <UART_CheckIdleState>
 8007890:	4603      	mov	r3, r0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3718      	adds	r7, #24
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800789a:	b480      	push	{r7}
 800789c:	b083      	sub	sp, #12
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80078a2:	bf00      	nop
 80078a4:	370c      	adds	r7, #12
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr

080078ae <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80078ae:	b480      	push	{r7}
 80078b0:	b083      	sub	sp, #12
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80078b6:	bf00      	nop
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80078c2:	b480      	push	{r7}
 80078c4:	b083      	sub	sp, #12
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80078ca:	bf00      	nop
 80078cc:	370c      	adds	r7, #12
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b085      	sub	sp, #20
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d101      	bne.n	80078ec <HAL_UARTEx_DisableFifoMode+0x16>
 80078e8:	2302      	movs	r3, #2
 80078ea:	e027      	b.n	800793c <HAL_UARTEx_DisableFifoMode+0x66>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2224      	movs	r2, #36	@ 0x24
 80078f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f022 0201 	bic.w	r2, r2, #1
 8007912:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800791a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2220      	movs	r2, #32
 800792e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3714      	adds	r7, #20
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007958:	2b01      	cmp	r3, #1
 800795a:	d101      	bne.n	8007960 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800795c:	2302      	movs	r3, #2
 800795e:	e02d      	b.n	80079bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2224      	movs	r2, #36	@ 0x24
 800796c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f022 0201 	bic.w	r2, r2, #1
 8007986:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	683a      	ldr	r2, [r7, #0]
 8007998:	430a      	orrs	r2, r1
 800799a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 f84f 	bl	8007a40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2220      	movs	r2, #32
 80079ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d101      	bne.n	80079dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80079d8:	2302      	movs	r3, #2
 80079da:	e02d      	b.n	8007a38 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2224      	movs	r2, #36	@ 0x24
 80079e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f022 0201 	bic.w	r2, r2, #1
 8007a02:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	430a      	orrs	r2, r1
 8007a16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 f811 	bl	8007a40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2220      	movs	r2, #32
 8007a2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d108      	bne.n	8007a62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a60:	e031      	b.n	8007ac6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a62:	2308      	movs	r3, #8
 8007a64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a66:	2308      	movs	r3, #8
 8007a68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	0e5b      	lsrs	r3, r3, #25
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	f003 0307 	and.w	r3, r3, #7
 8007a78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	0f5b      	lsrs	r3, r3, #29
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	f003 0307 	and.w	r3, r3, #7
 8007a88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a8a:	7bbb      	ldrb	r3, [r7, #14]
 8007a8c:	7b3a      	ldrb	r2, [r7, #12]
 8007a8e:	4911      	ldr	r1, [pc, #68]	@ (8007ad4 <UARTEx_SetNbDataToProcess+0x94>)
 8007a90:	5c8a      	ldrb	r2, [r1, r2]
 8007a92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a96:	7b3a      	ldrb	r2, [r7, #12]
 8007a98:	490f      	ldr	r1, [pc, #60]	@ (8007ad8 <UARTEx_SetNbDataToProcess+0x98>)
 8007a9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007aa8:	7bfb      	ldrb	r3, [r7, #15]
 8007aaa:	7b7a      	ldrb	r2, [r7, #13]
 8007aac:	4909      	ldr	r1, [pc, #36]	@ (8007ad4 <UARTEx_SetNbDataToProcess+0x94>)
 8007aae:	5c8a      	ldrb	r2, [r1, r2]
 8007ab0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ab4:	7b7a      	ldrb	r2, [r7, #13]
 8007ab6:	4908      	ldr	r1, [pc, #32]	@ (8007ad8 <UARTEx_SetNbDataToProcess+0x98>)
 8007ab8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007aba:	fb93 f3f2 	sdiv	r3, r3, r2
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007ac6:	bf00      	nop
 8007ac8:	3714      	adds	r7, #20
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop
 8007ad4:	0801875c 	.word	0x0801875c
 8007ad8:	08018764 	.word	0x08018764

08007adc <__NVIC_SetPriority>:
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	6039      	str	r1, [r7, #0]
 8007ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	db0a      	blt.n	8007b06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	b2da      	uxtb	r2, r3
 8007af4:	490c      	ldr	r1, [pc, #48]	@ (8007b28 <__NVIC_SetPriority+0x4c>)
 8007af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007afa:	0112      	lsls	r2, r2, #4
 8007afc:	b2d2      	uxtb	r2, r2
 8007afe:	440b      	add	r3, r1
 8007b00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007b04:	e00a      	b.n	8007b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	b2da      	uxtb	r2, r3
 8007b0a:	4908      	ldr	r1, [pc, #32]	@ (8007b2c <__NVIC_SetPriority+0x50>)
 8007b0c:	79fb      	ldrb	r3, [r7, #7]
 8007b0e:	f003 030f 	and.w	r3, r3, #15
 8007b12:	3b04      	subs	r3, #4
 8007b14:	0112      	lsls	r2, r2, #4
 8007b16:	b2d2      	uxtb	r2, r2
 8007b18:	440b      	add	r3, r1
 8007b1a:	761a      	strb	r2, [r3, #24]
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr
 8007b28:	e000e100 	.word	0xe000e100
 8007b2c:	e000ed00 	.word	0xe000ed00

08007b30 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007b30:	b580      	push	{r7, lr}
 8007b32:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007b34:	4b05      	ldr	r3, [pc, #20]	@ (8007b4c <SysTick_Handler+0x1c>)
 8007b36:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007b38:	f001 fd40 	bl	80095bc <xTaskGetSchedulerState>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d001      	beq.n	8007b46 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007b42:	f002 fb39 	bl	800a1b8 <xPortSysTickHandler>
  }
}
 8007b46:	bf00      	nop
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	e000e010 	.word	0xe000e010

08007b50 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007b50:	b580      	push	{r7, lr}
 8007b52:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007b54:	2100      	movs	r1, #0
 8007b56:	f06f 0004 	mvn.w	r0, #4
 8007b5a:	f7ff ffbf 	bl	8007adc <__NVIC_SetPriority>
#endif
}
 8007b5e:	bf00      	nop
 8007b60:	bd80      	pop	{r7, pc}
	...

08007b64 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b6a:	f3ef 8305 	mrs	r3, IPSR
 8007b6e:	603b      	str	r3, [r7, #0]
  return(result);
 8007b70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d003      	beq.n	8007b7e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007b76:	f06f 0305 	mvn.w	r3, #5
 8007b7a:	607b      	str	r3, [r7, #4]
 8007b7c:	e00c      	b.n	8007b98 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8007ba8 <osKernelInitialize+0x44>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d105      	bne.n	8007b92 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007b86:	4b08      	ldr	r3, [pc, #32]	@ (8007ba8 <osKernelInitialize+0x44>)
 8007b88:	2201      	movs	r2, #1
 8007b8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	607b      	str	r3, [r7, #4]
 8007b90:	e002      	b.n	8007b98 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007b92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007b98:	687b      	ldr	r3, [r7, #4]
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	370c      	adds	r7, #12
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop
 8007ba8:	200048dc 	.word	0x200048dc

08007bac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bb2:	f3ef 8305 	mrs	r3, IPSR
 8007bb6:	603b      	str	r3, [r7, #0]
  return(result);
 8007bb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d003      	beq.n	8007bc6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007bbe:	f06f 0305 	mvn.w	r3, #5
 8007bc2:	607b      	str	r3, [r7, #4]
 8007bc4:	e010      	b.n	8007be8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8007bf4 <osKernelStart+0x48>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d109      	bne.n	8007be2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007bce:	f7ff ffbf 	bl	8007b50 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007bd2:	4b08      	ldr	r3, [pc, #32]	@ (8007bf4 <osKernelStart+0x48>)
 8007bd4:	2202      	movs	r2, #2
 8007bd6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007bd8:	f001 f87a 	bl	8008cd0 <vTaskStartScheduler>
      stat = osOK;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	607b      	str	r3, [r7, #4]
 8007be0:	e002      	b.n	8007be8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007be2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007be6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007be8:	687b      	ldr	r3, [r7, #4]
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3708      	adds	r7, #8
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	200048dc 	.word	0x200048dc

08007bf8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b08e      	sub	sp, #56	@ 0x38
 8007bfc:	af04      	add	r7, sp, #16
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007c04:	2300      	movs	r3, #0
 8007c06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c08:	f3ef 8305 	mrs	r3, IPSR
 8007c0c:	617b      	str	r3, [r7, #20]
  return(result);
 8007c0e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d17e      	bne.n	8007d12 <osThreadNew+0x11a>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d07b      	beq.n	8007d12 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007c1a:	2380      	movs	r3, #128	@ 0x80
 8007c1c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007c1e:	2318      	movs	r3, #24
 8007c20:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007c22:	2300      	movs	r3, #0
 8007c24:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007c26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007c2a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d045      	beq.n	8007cbe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d002      	beq.n	8007c40 <osThreadNew+0x48>
        name = attr->name;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d002      	beq.n	8007c4e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d008      	beq.n	8007c66 <osThreadNew+0x6e>
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	2b38      	cmp	r3, #56	@ 0x38
 8007c58:	d805      	bhi.n	8007c66 <osThreadNew+0x6e>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	f003 0301 	and.w	r3, r3, #1
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d001      	beq.n	8007c6a <osThreadNew+0x72>
        return (NULL);
 8007c66:	2300      	movs	r3, #0
 8007c68:	e054      	b.n	8007d14 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	695b      	ldr	r3, [r3, #20]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d003      	beq.n	8007c7a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	695b      	ldr	r3, [r3, #20]
 8007c76:	089b      	lsrs	r3, r3, #2
 8007c78:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00e      	beq.n	8007ca0 <osThreadNew+0xa8>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	2b5b      	cmp	r3, #91	@ 0x5b
 8007c88:	d90a      	bls.n	8007ca0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d006      	beq.n	8007ca0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	695b      	ldr	r3, [r3, #20]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d002      	beq.n	8007ca0 <osThreadNew+0xa8>
        mem = 1;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	61bb      	str	r3, [r7, #24]
 8007c9e:	e010      	b.n	8007cc2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d10c      	bne.n	8007cc2 <osThreadNew+0xca>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d108      	bne.n	8007cc2 <osThreadNew+0xca>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d104      	bne.n	8007cc2 <osThreadNew+0xca>
          mem = 0;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	61bb      	str	r3, [r7, #24]
 8007cbc:	e001      	b.n	8007cc2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d110      	bne.n	8007cea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007cd0:	9202      	str	r2, [sp, #8]
 8007cd2:	9301      	str	r3, [sp, #4]
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	6a3a      	ldr	r2, [r7, #32]
 8007cdc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f000 fe1a 	bl	8008918 <xTaskCreateStatic>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	613b      	str	r3, [r7, #16]
 8007ce8:	e013      	b.n	8007d12 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d110      	bne.n	8007d12 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007cf0:	6a3b      	ldr	r3, [r7, #32]
 8007cf2:	b29a      	uxth	r2, r3
 8007cf4:	f107 0310 	add.w	r3, r7, #16
 8007cf8:	9301      	str	r3, [sp, #4]
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	9300      	str	r3, [sp, #0]
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f000 fe68 	bl	80089d8 <xTaskCreate>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d001      	beq.n	8007d12 <osThreadNew+0x11a>
            hTask = NULL;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007d12:	693b      	ldr	r3, [r7, #16]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3728      	adds	r7, #40	@ 0x28
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d24:	f3ef 8305 	mrs	r3, IPSR
 8007d28:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d2a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d003      	beq.n	8007d38 <osDelay+0x1c>
    stat = osErrorISR;
 8007d30:	f06f 0305 	mvn.w	r3, #5
 8007d34:	60fb      	str	r3, [r7, #12]
 8007d36:	e007      	b.n	8007d48 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d002      	beq.n	8007d48 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 ff8e 	bl	8008c64 <vTaskDelay>
    }
  }

  return (stat);
 8007d48:	68fb      	ldr	r3, [r7, #12]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
	...

08007d54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007d54:	b480      	push	{r7}
 8007d56:	b085      	sub	sp, #20
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	4a07      	ldr	r2, [pc, #28]	@ (8007d80 <vApplicationGetIdleTaskMemory+0x2c>)
 8007d64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	4a06      	ldr	r2, [pc, #24]	@ (8007d84 <vApplicationGetIdleTaskMemory+0x30>)
 8007d6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2280      	movs	r2, #128	@ 0x80
 8007d70:	601a      	str	r2, [r3, #0]
}
 8007d72:	bf00      	nop
 8007d74:	3714      	adds	r7, #20
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	200048e0 	.word	0x200048e0
 8007d84:	2000493c 	.word	0x2000493c

08007d88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007d88:	b480      	push	{r7}
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	4a07      	ldr	r2, [pc, #28]	@ (8007db4 <vApplicationGetTimerTaskMemory+0x2c>)
 8007d98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	4a06      	ldr	r2, [pc, #24]	@ (8007db8 <vApplicationGetTimerTaskMemory+0x30>)
 8007d9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007da6:	601a      	str	r2, [r3, #0]
}
 8007da8:	bf00      	nop
 8007daa:	3714      	adds	r7, #20
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr
 8007db4:	20004b3c 	.word	0x20004b3c
 8007db8:	20004b98 	.word	0x20004b98

08007dbc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f103 0208 	add.w	r2, r3, #8
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007dd4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f103 0208 	add.w	r2, r3, #8
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f103 0208 	add.w	r2, r3, #8
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e0a:	bf00      	nop
 8007e0c:	370c      	adds	r7, #12
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr

08007e16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e16:	b480      	push	{r7}
 8007e18:	b085      	sub	sp, #20
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
 8007e1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	689a      	ldr	r2, [r3, #8]
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	683a      	ldr	r2, [r7, #0]
 8007e3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	683a      	ldr	r2, [r7, #0]
 8007e40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	1c5a      	adds	r2, r3, #1
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	601a      	str	r2, [r3, #0]
}
 8007e52:	bf00      	nop
 8007e54:	3714      	adds	r7, #20
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr

08007e5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e5e:	b480      	push	{r7}
 8007e60:	b085      	sub	sp, #20
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
 8007e66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e74:	d103      	bne.n	8007e7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	60fb      	str	r3, [r7, #12]
 8007e7c:	e00c      	b.n	8007e98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	3308      	adds	r3, #8
 8007e82:	60fb      	str	r3, [r7, #12]
 8007e84:	e002      	b.n	8007e8c <vListInsert+0x2e>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	60fb      	str	r3, [r7, #12]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d2f6      	bcs.n	8007e86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	685a      	ldr	r2, [r3, #4]
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	683a      	ldr	r2, [r7, #0]
 8007ea6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	1c5a      	adds	r2, r3, #1
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	601a      	str	r2, [r3, #0]
}
 8007ec4:	bf00      	nop
 8007ec6:	3714      	adds	r7, #20
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	6892      	ldr	r2, [r2, #8]
 8007ee6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	6852      	ldr	r2, [r2, #4]
 8007ef0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d103      	bne.n	8007f04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	689a      	ldr	r2, [r3, #8]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	1e5a      	subs	r2, r3, #1
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3714      	adds	r7, #20
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10b      	bne.n	8007f50 <xQueueGenericReset+0x2c>
	__asm volatile
 8007f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f3c:	f383 8811 	msr	BASEPRI, r3
 8007f40:	f3bf 8f6f 	isb	sy
 8007f44:	f3bf 8f4f 	dsb	sy
 8007f48:	60bb      	str	r3, [r7, #8]
}
 8007f4a:	bf00      	nop
 8007f4c:	bf00      	nop
 8007f4e:	e7fd      	b.n	8007f4c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007f50:	f002 f8a2 	bl	800a098 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f5c:	68f9      	ldr	r1, [r7, #12]
 8007f5e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007f60:	fb01 f303 	mul.w	r3, r1, r3
 8007f64:	441a      	add	r2, r3
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f80:	3b01      	subs	r3, #1
 8007f82:	68f9      	ldr	r1, [r7, #12]
 8007f84:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007f86:	fb01 f303 	mul.w	r3, r1, r3
 8007f8a:	441a      	add	r2, r3
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	22ff      	movs	r2, #255	@ 0xff
 8007f94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	22ff      	movs	r2, #255	@ 0xff
 8007f9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d114      	bne.n	8007fd0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d01a      	beq.n	8007fe4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	3310      	adds	r3, #16
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f001 f91a 	bl	80091ec <xTaskRemoveFromEventList>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d012      	beq.n	8007fe4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8007ff4 <xQueueGenericReset+0xd0>)
 8007fc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fc4:	601a      	str	r2, [r3, #0]
 8007fc6:	f3bf 8f4f 	dsb	sy
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	e009      	b.n	8007fe4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	3310      	adds	r3, #16
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f7ff fef1 	bl	8007dbc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	3324      	adds	r3, #36	@ 0x24
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7ff feec 	bl	8007dbc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007fe4:	f002 f88a 	bl	800a0fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007fe8:	2301      	movs	r3, #1
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	e000ed04 	.word	0xe000ed04

08007ff8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b08e      	sub	sp, #56	@ 0x38
 8007ffc:	af02      	add	r7, sp, #8
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	607a      	str	r2, [r7, #4]
 8008004:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d10b      	bne.n	8008024 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800800c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008010:	f383 8811 	msr	BASEPRI, r3
 8008014:	f3bf 8f6f 	isb	sy
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800801e:	bf00      	nop
 8008020:	bf00      	nop
 8008022:	e7fd      	b.n	8008020 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d10b      	bne.n	8008042 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800802a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800802e:	f383 8811 	msr	BASEPRI, r3
 8008032:	f3bf 8f6f 	isb	sy
 8008036:	f3bf 8f4f 	dsb	sy
 800803a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800803c:	bf00      	nop
 800803e:	bf00      	nop
 8008040:	e7fd      	b.n	800803e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d002      	beq.n	800804e <xQueueGenericCreateStatic+0x56>
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d001      	beq.n	8008052 <xQueueGenericCreateStatic+0x5a>
 800804e:	2301      	movs	r3, #1
 8008050:	e000      	b.n	8008054 <xQueueGenericCreateStatic+0x5c>
 8008052:	2300      	movs	r3, #0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10b      	bne.n	8008070 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800805c:	f383 8811 	msr	BASEPRI, r3
 8008060:	f3bf 8f6f 	isb	sy
 8008064:	f3bf 8f4f 	dsb	sy
 8008068:	623b      	str	r3, [r7, #32]
}
 800806a:	bf00      	nop
 800806c:	bf00      	nop
 800806e:	e7fd      	b.n	800806c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d102      	bne.n	800807c <xQueueGenericCreateStatic+0x84>
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d101      	bne.n	8008080 <xQueueGenericCreateStatic+0x88>
 800807c:	2301      	movs	r3, #1
 800807e:	e000      	b.n	8008082 <xQueueGenericCreateStatic+0x8a>
 8008080:	2300      	movs	r3, #0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d10b      	bne.n	800809e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800808a:	f383 8811 	msr	BASEPRI, r3
 800808e:	f3bf 8f6f 	isb	sy
 8008092:	f3bf 8f4f 	dsb	sy
 8008096:	61fb      	str	r3, [r7, #28]
}
 8008098:	bf00      	nop
 800809a:	bf00      	nop
 800809c:	e7fd      	b.n	800809a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800809e:	2350      	movs	r3, #80	@ 0x50
 80080a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	2b50      	cmp	r3, #80	@ 0x50
 80080a6:	d00b      	beq.n	80080c0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80080a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ac:	f383 8811 	msr	BASEPRI, r3
 80080b0:	f3bf 8f6f 	isb	sy
 80080b4:	f3bf 8f4f 	dsb	sy
 80080b8:	61bb      	str	r3, [r7, #24]
}
 80080ba:	bf00      	nop
 80080bc:	bf00      	nop
 80080be:	e7fd      	b.n	80080bc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80080c0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80080c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00d      	beq.n	80080e8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80080cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80080d4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80080d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	4613      	mov	r3, r2
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	68b9      	ldr	r1, [r7, #8]
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f000 f805 	bl	80080f2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80080e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3730      	adds	r7, #48	@ 0x30
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b084      	sub	sp, #16
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	60f8      	str	r0, [r7, #12]
 80080fa:	60b9      	str	r1, [r7, #8]
 80080fc:	607a      	str	r2, [r7, #4]
 80080fe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d103      	bne.n	800810e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	69ba      	ldr	r2, [r7, #24]
 800810a:	601a      	str	r2, [r3, #0]
 800810c:	e002      	b.n	8008114 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008120:	2101      	movs	r1, #1
 8008122:	69b8      	ldr	r0, [r7, #24]
 8008124:	f7ff fefe 	bl	8007f24 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008128:	69bb      	ldr	r3, [r7, #24]
 800812a:	78fa      	ldrb	r2, [r7, #3]
 800812c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008130:	bf00      	nop
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b08e      	sub	sp, #56	@ 0x38
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
 8008144:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008146:	2300      	movs	r3, #0
 8008148:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800814e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008150:	2b00      	cmp	r3, #0
 8008152:	d10b      	bne.n	800816c <xQueueGenericSend+0x34>
	__asm volatile
 8008154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008158:	f383 8811 	msr	BASEPRI, r3
 800815c:	f3bf 8f6f 	isb	sy
 8008160:	f3bf 8f4f 	dsb	sy
 8008164:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008166:	bf00      	nop
 8008168:	bf00      	nop
 800816a:	e7fd      	b.n	8008168 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d103      	bne.n	800817a <xQueueGenericSend+0x42>
 8008172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008176:	2b00      	cmp	r3, #0
 8008178:	d101      	bne.n	800817e <xQueueGenericSend+0x46>
 800817a:	2301      	movs	r3, #1
 800817c:	e000      	b.n	8008180 <xQueueGenericSend+0x48>
 800817e:	2300      	movs	r3, #0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d10b      	bne.n	800819c <xQueueGenericSend+0x64>
	__asm volatile
 8008184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008188:	f383 8811 	msr	BASEPRI, r3
 800818c:	f3bf 8f6f 	isb	sy
 8008190:	f3bf 8f4f 	dsb	sy
 8008194:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008196:	bf00      	nop
 8008198:	bf00      	nop
 800819a:	e7fd      	b.n	8008198 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d103      	bne.n	80081aa <xQueueGenericSend+0x72>
 80081a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d101      	bne.n	80081ae <xQueueGenericSend+0x76>
 80081aa:	2301      	movs	r3, #1
 80081ac:	e000      	b.n	80081b0 <xQueueGenericSend+0x78>
 80081ae:	2300      	movs	r3, #0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d10b      	bne.n	80081cc <xQueueGenericSend+0x94>
	__asm volatile
 80081b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b8:	f383 8811 	msr	BASEPRI, r3
 80081bc:	f3bf 8f6f 	isb	sy
 80081c0:	f3bf 8f4f 	dsb	sy
 80081c4:	623b      	str	r3, [r7, #32]
}
 80081c6:	bf00      	nop
 80081c8:	bf00      	nop
 80081ca:	e7fd      	b.n	80081c8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081cc:	f001 f9f6 	bl	80095bc <xTaskGetSchedulerState>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d102      	bne.n	80081dc <xQueueGenericSend+0xa4>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d101      	bne.n	80081e0 <xQueueGenericSend+0xa8>
 80081dc:	2301      	movs	r3, #1
 80081de:	e000      	b.n	80081e2 <xQueueGenericSend+0xaa>
 80081e0:	2300      	movs	r3, #0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d10b      	bne.n	80081fe <xQueueGenericSend+0xc6>
	__asm volatile
 80081e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ea:	f383 8811 	msr	BASEPRI, r3
 80081ee:	f3bf 8f6f 	isb	sy
 80081f2:	f3bf 8f4f 	dsb	sy
 80081f6:	61fb      	str	r3, [r7, #28]
}
 80081f8:	bf00      	nop
 80081fa:	bf00      	nop
 80081fc:	e7fd      	b.n	80081fa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80081fe:	f001 ff4b 	bl	800a098 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008204:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800820a:	429a      	cmp	r2, r3
 800820c:	d302      	bcc.n	8008214 <xQueueGenericSend+0xdc>
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	2b02      	cmp	r3, #2
 8008212:	d129      	bne.n	8008268 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008214:	683a      	ldr	r2, [r7, #0]
 8008216:	68b9      	ldr	r1, [r7, #8]
 8008218:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800821a:	f000 fa0f 	bl	800863c <prvCopyDataToQueue>
 800821e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008224:	2b00      	cmp	r3, #0
 8008226:	d010      	beq.n	800824a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800822a:	3324      	adds	r3, #36	@ 0x24
 800822c:	4618      	mov	r0, r3
 800822e:	f000 ffdd 	bl	80091ec <xTaskRemoveFromEventList>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d013      	beq.n	8008260 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008238:	4b3f      	ldr	r3, [pc, #252]	@ (8008338 <xQueueGenericSend+0x200>)
 800823a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800823e:	601a      	str	r2, [r3, #0]
 8008240:	f3bf 8f4f 	dsb	sy
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	e00a      	b.n	8008260 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800824a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800824c:	2b00      	cmp	r3, #0
 800824e:	d007      	beq.n	8008260 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008250:	4b39      	ldr	r3, [pc, #228]	@ (8008338 <xQueueGenericSend+0x200>)
 8008252:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008256:	601a      	str	r2, [r3, #0]
 8008258:	f3bf 8f4f 	dsb	sy
 800825c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008260:	f001 ff4c 	bl	800a0fc <vPortExitCritical>
				return pdPASS;
 8008264:	2301      	movs	r3, #1
 8008266:	e063      	b.n	8008330 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d103      	bne.n	8008276 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800826e:	f001 ff45 	bl	800a0fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008272:	2300      	movs	r3, #0
 8008274:	e05c      	b.n	8008330 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008278:	2b00      	cmp	r3, #0
 800827a:	d106      	bne.n	800828a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800827c:	f107 0314 	add.w	r3, r7, #20
 8008280:	4618      	mov	r0, r3
 8008282:	f001 f83f 	bl	8009304 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008286:	2301      	movs	r3, #1
 8008288:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800828a:	f001 ff37 	bl	800a0fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800828e:	f000 fd87 	bl	8008da0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008292:	f001 ff01 	bl	800a098 <vPortEnterCritical>
 8008296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008298:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800829c:	b25b      	sxtb	r3, r3
 800829e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082a2:	d103      	bne.n	80082ac <xQueueGenericSend+0x174>
 80082a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80082ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082b2:	b25b      	sxtb	r3, r3
 80082b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082b8:	d103      	bne.n	80082c2 <xQueueGenericSend+0x18a>
 80082ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082bc:	2200      	movs	r2, #0
 80082be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80082c2:	f001 ff1b 	bl	800a0fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082c6:	1d3a      	adds	r2, r7, #4
 80082c8:	f107 0314 	add.w	r3, r7, #20
 80082cc:	4611      	mov	r1, r2
 80082ce:	4618      	mov	r0, r3
 80082d0:	f001 f82e 	bl	8009330 <xTaskCheckForTimeOut>
 80082d4:	4603      	mov	r3, r0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d124      	bne.n	8008324 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80082da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082dc:	f000 faa6 	bl	800882c <prvIsQueueFull>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d018      	beq.n	8008318 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80082e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e8:	3310      	adds	r3, #16
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	4611      	mov	r1, r2
 80082ee:	4618      	mov	r0, r3
 80082f0:	f000 ff2a 	bl	8009148 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80082f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082f6:	f000 fa31 	bl	800875c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80082fa:	f000 fd5f 	bl	8008dbc <xTaskResumeAll>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	f47f af7c 	bne.w	80081fe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008306:	4b0c      	ldr	r3, [pc, #48]	@ (8008338 <xQueueGenericSend+0x200>)
 8008308:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800830c:	601a      	str	r2, [r3, #0]
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	f3bf 8f6f 	isb	sy
 8008316:	e772      	b.n	80081fe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008318:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800831a:	f000 fa1f 	bl	800875c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800831e:	f000 fd4d 	bl	8008dbc <xTaskResumeAll>
 8008322:	e76c      	b.n	80081fe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008324:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008326:	f000 fa19 	bl	800875c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800832a:	f000 fd47 	bl	8008dbc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800832e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008330:	4618      	mov	r0, r3
 8008332:	3738      	adds	r7, #56	@ 0x38
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	e000ed04 	.word	0xe000ed04

0800833c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b090      	sub	sp, #64	@ 0x40
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	607a      	str	r2, [r7, #4]
 8008348:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800834e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008350:	2b00      	cmp	r3, #0
 8008352:	d10b      	bne.n	800836c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008358:	f383 8811 	msr	BASEPRI, r3
 800835c:	f3bf 8f6f 	isb	sy
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008366:	bf00      	nop
 8008368:	bf00      	nop
 800836a:	e7fd      	b.n	8008368 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d103      	bne.n	800837a <xQueueGenericSendFromISR+0x3e>
 8008372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008376:	2b00      	cmp	r3, #0
 8008378:	d101      	bne.n	800837e <xQueueGenericSendFromISR+0x42>
 800837a:	2301      	movs	r3, #1
 800837c:	e000      	b.n	8008380 <xQueueGenericSendFromISR+0x44>
 800837e:	2300      	movs	r3, #0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d10b      	bne.n	800839c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008388:	f383 8811 	msr	BASEPRI, r3
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008396:	bf00      	nop
 8008398:	bf00      	nop
 800839a:	e7fd      	b.n	8008398 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d103      	bne.n	80083aa <xQueueGenericSendFromISR+0x6e>
 80083a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d101      	bne.n	80083ae <xQueueGenericSendFromISR+0x72>
 80083aa:	2301      	movs	r3, #1
 80083ac:	e000      	b.n	80083b0 <xQueueGenericSendFromISR+0x74>
 80083ae:	2300      	movs	r3, #0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d10b      	bne.n	80083cc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80083b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b8:	f383 8811 	msr	BASEPRI, r3
 80083bc:	f3bf 8f6f 	isb	sy
 80083c0:	f3bf 8f4f 	dsb	sy
 80083c4:	623b      	str	r3, [r7, #32]
}
 80083c6:	bf00      	nop
 80083c8:	bf00      	nop
 80083ca:	e7fd      	b.n	80083c8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80083cc:	f001 ff44 	bl	800a258 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80083d0:	f3ef 8211 	mrs	r2, BASEPRI
 80083d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d8:	f383 8811 	msr	BASEPRI, r3
 80083dc:	f3bf 8f6f 	isb	sy
 80083e0:	f3bf 8f4f 	dsb	sy
 80083e4:	61fa      	str	r2, [r7, #28]
 80083e6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80083e8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80083ea:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d302      	bcc.n	80083fe <xQueueGenericSendFromISR+0xc2>
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	2b02      	cmp	r3, #2
 80083fc:	d12f      	bne.n	800845e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80083fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008400:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008404:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800840a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800840c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800840e:	683a      	ldr	r2, [r7, #0]
 8008410:	68b9      	ldr	r1, [r7, #8]
 8008412:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008414:	f000 f912 	bl	800863c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008418:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800841c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008420:	d112      	bne.n	8008448 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008426:	2b00      	cmp	r3, #0
 8008428:	d016      	beq.n	8008458 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800842a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800842c:	3324      	adds	r3, #36	@ 0x24
 800842e:	4618      	mov	r0, r3
 8008430:	f000 fedc 	bl	80091ec <xTaskRemoveFromEventList>
 8008434:	4603      	mov	r3, r0
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00e      	beq.n	8008458 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00b      	beq.n	8008458 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	601a      	str	r2, [r3, #0]
 8008446:	e007      	b.n	8008458 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008448:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800844c:	3301      	adds	r3, #1
 800844e:	b2db      	uxtb	r3, r3
 8008450:	b25a      	sxtb	r2, r3
 8008452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008454:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008458:	2301      	movs	r3, #1
 800845a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800845c:	e001      	b.n	8008462 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800845e:	2300      	movs	r3, #0
 8008460:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008464:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800846c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800846e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008470:	4618      	mov	r0, r3
 8008472:	3740      	adds	r7, #64	@ 0x40
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b08c      	sub	sp, #48	@ 0x30
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008484:	2300      	movs	r3, #0
 8008486:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800848c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800848e:	2b00      	cmp	r3, #0
 8008490:	d10b      	bne.n	80084aa <xQueueReceive+0x32>
	__asm volatile
 8008492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008496:	f383 8811 	msr	BASEPRI, r3
 800849a:	f3bf 8f6f 	isb	sy
 800849e:	f3bf 8f4f 	dsb	sy
 80084a2:	623b      	str	r3, [r7, #32]
}
 80084a4:	bf00      	nop
 80084a6:	bf00      	nop
 80084a8:	e7fd      	b.n	80084a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d103      	bne.n	80084b8 <xQueueReceive+0x40>
 80084b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d101      	bne.n	80084bc <xQueueReceive+0x44>
 80084b8:	2301      	movs	r3, #1
 80084ba:	e000      	b.n	80084be <xQueueReceive+0x46>
 80084bc:	2300      	movs	r3, #0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d10b      	bne.n	80084da <xQueueReceive+0x62>
	__asm volatile
 80084c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c6:	f383 8811 	msr	BASEPRI, r3
 80084ca:	f3bf 8f6f 	isb	sy
 80084ce:	f3bf 8f4f 	dsb	sy
 80084d2:	61fb      	str	r3, [r7, #28]
}
 80084d4:	bf00      	nop
 80084d6:	bf00      	nop
 80084d8:	e7fd      	b.n	80084d6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084da:	f001 f86f 	bl	80095bc <xTaskGetSchedulerState>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d102      	bne.n	80084ea <xQueueReceive+0x72>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d101      	bne.n	80084ee <xQueueReceive+0x76>
 80084ea:	2301      	movs	r3, #1
 80084ec:	e000      	b.n	80084f0 <xQueueReceive+0x78>
 80084ee:	2300      	movs	r3, #0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10b      	bne.n	800850c <xQueueReceive+0x94>
	__asm volatile
 80084f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f8:	f383 8811 	msr	BASEPRI, r3
 80084fc:	f3bf 8f6f 	isb	sy
 8008500:	f3bf 8f4f 	dsb	sy
 8008504:	61bb      	str	r3, [r7, #24]
}
 8008506:	bf00      	nop
 8008508:	bf00      	nop
 800850a:	e7fd      	b.n	8008508 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800850c:	f001 fdc4 	bl	800a098 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008514:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008518:	2b00      	cmp	r3, #0
 800851a:	d01f      	beq.n	800855c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800851c:	68b9      	ldr	r1, [r7, #8]
 800851e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008520:	f000 f8f6 	bl	8008710 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008526:	1e5a      	subs	r2, r3, #1
 8008528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800852a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800852c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00f      	beq.n	8008554 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008536:	3310      	adds	r3, #16
 8008538:	4618      	mov	r0, r3
 800853a:	f000 fe57 	bl	80091ec <xTaskRemoveFromEventList>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d007      	beq.n	8008554 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008544:	4b3c      	ldr	r3, [pc, #240]	@ (8008638 <xQueueReceive+0x1c0>)
 8008546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800854a:	601a      	str	r2, [r3, #0]
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008554:	f001 fdd2 	bl	800a0fc <vPortExitCritical>
				return pdPASS;
 8008558:	2301      	movs	r3, #1
 800855a:	e069      	b.n	8008630 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d103      	bne.n	800856a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008562:	f001 fdcb 	bl	800a0fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008566:	2300      	movs	r3, #0
 8008568:	e062      	b.n	8008630 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800856a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800856c:	2b00      	cmp	r3, #0
 800856e:	d106      	bne.n	800857e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008570:	f107 0310 	add.w	r3, r7, #16
 8008574:	4618      	mov	r0, r3
 8008576:	f000 fec5 	bl	8009304 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800857a:	2301      	movs	r3, #1
 800857c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800857e:	f001 fdbd 	bl	800a0fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008582:	f000 fc0d 	bl	8008da0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008586:	f001 fd87 	bl	800a098 <vPortEnterCritical>
 800858a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800858c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008590:	b25b      	sxtb	r3, r3
 8008592:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008596:	d103      	bne.n	80085a0 <xQueueReceive+0x128>
 8008598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800859a:	2200      	movs	r2, #0
 800859c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80085a6:	b25b      	sxtb	r3, r3
 80085a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80085ac:	d103      	bne.n	80085b6 <xQueueReceive+0x13e>
 80085ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b0:	2200      	movs	r2, #0
 80085b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80085b6:	f001 fda1 	bl	800a0fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085ba:	1d3a      	adds	r2, r7, #4
 80085bc:	f107 0310 	add.w	r3, r7, #16
 80085c0:	4611      	mov	r1, r2
 80085c2:	4618      	mov	r0, r3
 80085c4:	f000 feb4 	bl	8009330 <xTaskCheckForTimeOut>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d123      	bne.n	8008616 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085d0:	f000 f916 	bl	8008800 <prvIsQueueEmpty>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d017      	beq.n	800860a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80085da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085dc:	3324      	adds	r3, #36	@ 0x24
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	4611      	mov	r1, r2
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 fdb0 	bl	8009148 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80085e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085ea:	f000 f8b7 	bl	800875c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80085ee:	f000 fbe5 	bl	8008dbc <xTaskResumeAll>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d189      	bne.n	800850c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80085f8:	4b0f      	ldr	r3, [pc, #60]	@ (8008638 <xQueueReceive+0x1c0>)
 80085fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085fe:	601a      	str	r2, [r3, #0]
 8008600:	f3bf 8f4f 	dsb	sy
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	e780      	b.n	800850c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800860a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800860c:	f000 f8a6 	bl	800875c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008610:	f000 fbd4 	bl	8008dbc <xTaskResumeAll>
 8008614:	e77a      	b.n	800850c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008616:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008618:	f000 f8a0 	bl	800875c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800861c:	f000 fbce 	bl	8008dbc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008620:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008622:	f000 f8ed 	bl	8008800 <prvIsQueueEmpty>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	f43f af6f 	beq.w	800850c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800862e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008630:	4618      	mov	r0, r3
 8008632:	3730      	adds	r7, #48	@ 0x30
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	e000ed04 	.word	0xe000ed04

0800863c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b086      	sub	sp, #24
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008648:	2300      	movs	r3, #0
 800864a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008650:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008656:	2b00      	cmp	r3, #0
 8008658:	d10d      	bne.n	8008676 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d14d      	bne.n	80086fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	4618      	mov	r0, r3
 8008668:	f000 ffc6 	bl	80095f8 <xTaskPriorityDisinherit>
 800866c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2200      	movs	r2, #0
 8008672:	609a      	str	r2, [r3, #8]
 8008674:	e043      	b.n	80086fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d119      	bne.n	80086b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6858      	ldr	r0, [r3, #4]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008684:	461a      	mov	r2, r3
 8008686:	68b9      	ldr	r1, [r7, #8]
 8008688:	f00f f909 	bl	801789e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	685a      	ldr	r2, [r3, #4]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008694:	441a      	add	r2, r3
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	685a      	ldr	r2, [r3, #4]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d32b      	bcc.n	80086fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	605a      	str	r2, [r3, #4]
 80086ae:	e026      	b.n	80086fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	68d8      	ldr	r0, [r3, #12]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086b8:	461a      	mov	r2, r3
 80086ba:	68b9      	ldr	r1, [r7, #8]
 80086bc:	f00f f8ef 	bl	801789e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	68da      	ldr	r2, [r3, #12]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086c8:	425b      	negs	r3, r3
 80086ca:	441a      	add	r2, r3
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	68da      	ldr	r2, [r3, #12]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d207      	bcs.n	80086ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	689a      	ldr	r2, [r3, #8]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086e4:	425b      	negs	r3, r3
 80086e6:	441a      	add	r2, r3
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d105      	bne.n	80086fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d002      	beq.n	80086fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	3b01      	subs	r3, #1
 80086fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	1c5a      	adds	r2, r3, #1
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008706:	697b      	ldr	r3, [r7, #20]
}
 8008708:	4618      	mov	r0, r3
 800870a:	3718      	adds	r7, #24
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800871e:	2b00      	cmp	r3, #0
 8008720:	d018      	beq.n	8008754 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	68da      	ldr	r2, [r3, #12]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800872a:	441a      	add	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	68da      	ldr	r2, [r3, #12]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	429a      	cmp	r2, r3
 800873a:	d303      	bcc.n	8008744 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	68d9      	ldr	r1, [r3, #12]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800874c:	461a      	mov	r2, r3
 800874e:	6838      	ldr	r0, [r7, #0]
 8008750:	f00f f8a5 	bl	801789e <memcpy>
	}
}
 8008754:	bf00      	nop
 8008756:	3708      	adds	r7, #8
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008764:	f001 fc98 	bl	800a098 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800876e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008770:	e011      	b.n	8008796 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008776:	2b00      	cmp	r3, #0
 8008778:	d012      	beq.n	80087a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	3324      	adds	r3, #36	@ 0x24
 800877e:	4618      	mov	r0, r3
 8008780:	f000 fd34 	bl	80091ec <xTaskRemoveFromEventList>
 8008784:	4603      	mov	r3, r0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d001      	beq.n	800878e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800878a:	f000 fe35 	bl	80093f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800878e:	7bfb      	ldrb	r3, [r7, #15]
 8008790:	3b01      	subs	r3, #1
 8008792:	b2db      	uxtb	r3, r3
 8008794:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800879a:	2b00      	cmp	r3, #0
 800879c:	dce9      	bgt.n	8008772 <prvUnlockQueue+0x16>
 800879e:	e000      	b.n	80087a2 <prvUnlockQueue+0x46>
					break;
 80087a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	22ff      	movs	r2, #255	@ 0xff
 80087a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80087aa:	f001 fca7 	bl	800a0fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80087ae:	f001 fc73 	bl	800a098 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80087b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087ba:	e011      	b.n	80087e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d012      	beq.n	80087ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	3310      	adds	r3, #16
 80087c8:	4618      	mov	r0, r3
 80087ca:	f000 fd0f 	bl	80091ec <xTaskRemoveFromEventList>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d001      	beq.n	80087d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80087d4:	f000 fe10 	bl	80093f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80087d8:	7bbb      	ldrb	r3, [r7, #14]
 80087da:	3b01      	subs	r3, #1
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	dce9      	bgt.n	80087bc <prvUnlockQueue+0x60>
 80087e8:	e000      	b.n	80087ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80087ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	22ff      	movs	r2, #255	@ 0xff
 80087f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80087f4:	f001 fc82 	bl	800a0fc <vPortExitCritical>
}
 80087f8:	bf00      	nop
 80087fa:	3710      	adds	r7, #16
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008808:	f001 fc46 	bl	800a098 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008810:	2b00      	cmp	r3, #0
 8008812:	d102      	bne.n	800881a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008814:	2301      	movs	r3, #1
 8008816:	60fb      	str	r3, [r7, #12]
 8008818:	e001      	b.n	800881e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800881a:	2300      	movs	r3, #0
 800881c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800881e:	f001 fc6d 	bl	800a0fc <vPortExitCritical>

	return xReturn;
 8008822:	68fb      	ldr	r3, [r7, #12]
}
 8008824:	4618      	mov	r0, r3
 8008826:	3710      	adds	r7, #16
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008834:	f001 fc30 	bl	800a098 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008840:	429a      	cmp	r2, r3
 8008842:	d102      	bne.n	800884a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008844:	2301      	movs	r3, #1
 8008846:	60fb      	str	r3, [r7, #12]
 8008848:	e001      	b.n	800884e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800884a:	2300      	movs	r3, #0
 800884c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800884e:	f001 fc55 	bl	800a0fc <vPortExitCritical>

	return xReturn;
 8008852:	68fb      	ldr	r3, [r7, #12]
}
 8008854:	4618      	mov	r0, r3
 8008856:	3710      	adds	r7, #16
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008866:	2300      	movs	r3, #0
 8008868:	60fb      	str	r3, [r7, #12]
 800886a:	e014      	b.n	8008896 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800886c:	4a0f      	ldr	r2, [pc, #60]	@ (80088ac <vQueueAddToRegistry+0x50>)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d10b      	bne.n	8008890 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008878:	490c      	ldr	r1, [pc, #48]	@ (80088ac <vQueueAddToRegistry+0x50>)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	683a      	ldr	r2, [r7, #0]
 800887e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008882:	4a0a      	ldr	r2, [pc, #40]	@ (80088ac <vQueueAddToRegistry+0x50>)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	00db      	lsls	r3, r3, #3
 8008888:	4413      	add	r3, r2
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800888e:	e006      	b.n	800889e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	3301      	adds	r3, #1
 8008894:	60fb      	str	r3, [r7, #12]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2b07      	cmp	r3, #7
 800889a:	d9e7      	bls.n	800886c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800889c:	bf00      	nop
 800889e:	bf00      	nop
 80088a0:	3714      	adds	r7, #20
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr
 80088aa:	bf00      	nop
 80088ac:	20004f98 	.word	0x20004f98

080088b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80088c0:	f001 fbea 	bl	800a098 <vPortEnterCritical>
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80088ca:	b25b      	sxtb	r3, r3
 80088cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088d0:	d103      	bne.n	80088da <vQueueWaitForMessageRestricted+0x2a>
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088e0:	b25b      	sxtb	r3, r3
 80088e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088e6:	d103      	bne.n	80088f0 <vQueueWaitForMessageRestricted+0x40>
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088f0:	f001 fc04 	bl	800a0fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d106      	bne.n	800890a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	3324      	adds	r3, #36	@ 0x24
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	68b9      	ldr	r1, [r7, #8]
 8008904:	4618      	mov	r0, r3
 8008906:	f000 fc45 	bl	8009194 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800890a:	6978      	ldr	r0, [r7, #20]
 800890c:	f7ff ff26 	bl	800875c <prvUnlockQueue>
	}
 8008910:	bf00      	nop
 8008912:	3718      	adds	r7, #24
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008918:	b580      	push	{r7, lr}
 800891a:	b08e      	sub	sp, #56	@ 0x38
 800891c:	af04      	add	r7, sp, #16
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	607a      	str	r2, [r7, #4]
 8008924:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008928:	2b00      	cmp	r3, #0
 800892a:	d10b      	bne.n	8008944 <xTaskCreateStatic+0x2c>
	__asm volatile
 800892c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008930:	f383 8811 	msr	BASEPRI, r3
 8008934:	f3bf 8f6f 	isb	sy
 8008938:	f3bf 8f4f 	dsb	sy
 800893c:	623b      	str	r3, [r7, #32]
}
 800893e:	bf00      	nop
 8008940:	bf00      	nop
 8008942:	e7fd      	b.n	8008940 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008946:	2b00      	cmp	r3, #0
 8008948:	d10b      	bne.n	8008962 <xTaskCreateStatic+0x4a>
	__asm volatile
 800894a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800894e:	f383 8811 	msr	BASEPRI, r3
 8008952:	f3bf 8f6f 	isb	sy
 8008956:	f3bf 8f4f 	dsb	sy
 800895a:	61fb      	str	r3, [r7, #28]
}
 800895c:	bf00      	nop
 800895e:	bf00      	nop
 8008960:	e7fd      	b.n	800895e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008962:	235c      	movs	r3, #92	@ 0x5c
 8008964:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	2b5c      	cmp	r3, #92	@ 0x5c
 800896a:	d00b      	beq.n	8008984 <xTaskCreateStatic+0x6c>
	__asm volatile
 800896c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008970:	f383 8811 	msr	BASEPRI, r3
 8008974:	f3bf 8f6f 	isb	sy
 8008978:	f3bf 8f4f 	dsb	sy
 800897c:	61bb      	str	r3, [r7, #24]
}
 800897e:	bf00      	nop
 8008980:	bf00      	nop
 8008982:	e7fd      	b.n	8008980 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008984:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008988:	2b00      	cmp	r3, #0
 800898a:	d01e      	beq.n	80089ca <xTaskCreateStatic+0xb2>
 800898c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800898e:	2b00      	cmp	r3, #0
 8008990:	d01b      	beq.n	80089ca <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008994:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008998:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800899a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800899c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800899e:	2202      	movs	r2, #2
 80089a0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80089a4:	2300      	movs	r3, #0
 80089a6:	9303      	str	r3, [sp, #12]
 80089a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089aa:	9302      	str	r3, [sp, #8]
 80089ac:	f107 0314 	add.w	r3, r7, #20
 80089b0:	9301      	str	r3, [sp, #4]
 80089b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b4:	9300      	str	r3, [sp, #0]
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	68b9      	ldr	r1, [r7, #8]
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	f000 f850 	bl	8008a62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80089c4:	f000 f8de 	bl	8008b84 <prvAddNewTaskToReadyList>
 80089c8:	e001      	b.n	80089ce <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80089ca:	2300      	movs	r3, #0
 80089cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80089ce:	697b      	ldr	r3, [r7, #20]
	}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3728      	adds	r7, #40	@ 0x28
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b08c      	sub	sp, #48	@ 0x30
 80089dc:	af04      	add	r7, sp, #16
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	603b      	str	r3, [r7, #0]
 80089e4:	4613      	mov	r3, r2
 80089e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80089e8:	88fb      	ldrh	r3, [r7, #6]
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	4618      	mov	r0, r3
 80089ee:	f001 fc75 	bl	800a2dc <pvPortMalloc>
 80089f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d00e      	beq.n	8008a18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80089fa:	205c      	movs	r0, #92	@ 0x5c
 80089fc:	f001 fc6e 	bl	800a2dc <pvPortMalloc>
 8008a00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d003      	beq.n	8008a10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	697a      	ldr	r2, [r7, #20]
 8008a0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8008a0e:	e005      	b.n	8008a1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008a10:	6978      	ldr	r0, [r7, #20]
 8008a12:	f001 fd31 	bl	800a478 <vPortFree>
 8008a16:	e001      	b.n	8008a1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d017      	beq.n	8008a52 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a2a:	88fa      	ldrh	r2, [r7, #6]
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	9303      	str	r3, [sp, #12]
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	9302      	str	r3, [sp, #8]
 8008a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a36:	9301      	str	r3, [sp, #4]
 8008a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a3a:	9300      	str	r3, [sp, #0]
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	68b9      	ldr	r1, [r7, #8]
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f000 f80e 	bl	8008a62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a46:	69f8      	ldr	r0, [r7, #28]
 8008a48:	f000 f89c 	bl	8008b84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	61bb      	str	r3, [r7, #24]
 8008a50:	e002      	b.n	8008a58 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008a56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a58:	69bb      	ldr	r3, [r7, #24]
	}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3720      	adds	r7, #32
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b088      	sub	sp, #32
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	60f8      	str	r0, [r7, #12]
 8008a6a:	60b9      	str	r1, [r7, #8]
 8008a6c:	607a      	str	r2, [r7, #4]
 8008a6e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a72:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	461a      	mov	r2, r3
 8008a7a:	21a5      	movs	r1, #165	@ 0xa5
 8008a7c:	f00e fe46 	bl	801770c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	4413      	add	r3, r2
 8008a90:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	f023 0307 	bic.w	r3, r3, #7
 8008a98:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	f003 0307 	and.w	r3, r3, #7
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d00b      	beq.n	8008abc <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aa8:	f383 8811 	msr	BASEPRI, r3
 8008aac:	f3bf 8f6f 	isb	sy
 8008ab0:	f3bf 8f4f 	dsb	sy
 8008ab4:	617b      	str	r3, [r7, #20]
}
 8008ab6:	bf00      	nop
 8008ab8:	bf00      	nop
 8008aba:	e7fd      	b.n	8008ab8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d01f      	beq.n	8008b02 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	61fb      	str	r3, [r7, #28]
 8008ac6:	e012      	b.n	8008aee <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ac8:	68ba      	ldr	r2, [r7, #8]
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	4413      	add	r3, r2
 8008ace:	7819      	ldrb	r1, [r3, #0]
 8008ad0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	3334      	adds	r3, #52	@ 0x34
 8008ad8:	460a      	mov	r2, r1
 8008ada:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008adc:	68ba      	ldr	r2, [r7, #8]
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d006      	beq.n	8008af6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	3301      	adds	r3, #1
 8008aec:	61fb      	str	r3, [r7, #28]
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	2b0f      	cmp	r3, #15
 8008af2:	d9e9      	bls.n	8008ac8 <prvInitialiseNewTask+0x66>
 8008af4:	e000      	b.n	8008af8 <prvInitialiseNewTask+0x96>
			{
				break;
 8008af6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afa:	2200      	movs	r2, #0
 8008afc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008b00:	e003      	b.n	8008b0a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b04:	2200      	movs	r2, #0
 8008b06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b0c:	2b37      	cmp	r3, #55	@ 0x37
 8008b0e:	d901      	bls.n	8008b14 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008b10:	2337      	movs	r3, #55	@ 0x37
 8008b12:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b18:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b1e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b22:	2200      	movs	r2, #0
 8008b24:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b28:	3304      	adds	r3, #4
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7ff f966 	bl	8007dfc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b32:	3318      	adds	r3, #24
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7ff f961 	bl	8007dfc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b42:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b4e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b52:	2200      	movs	r2, #0
 8008b54:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b5e:	683a      	ldr	r2, [r7, #0]
 8008b60:	68f9      	ldr	r1, [r7, #12]
 8008b62:	69b8      	ldr	r0, [r7, #24]
 8008b64:	f001 f966 	bl	8009e34 <pxPortInitialiseStack>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b6c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d002      	beq.n	8008b7a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b7a:	bf00      	nop
 8008b7c:	3720      	adds	r7, #32
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
	...

08008b84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008b8c:	f001 fa84 	bl	800a098 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008b90:	4b2d      	ldr	r3, [pc, #180]	@ (8008c48 <prvAddNewTaskToReadyList+0xc4>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	3301      	adds	r3, #1
 8008b96:	4a2c      	ldr	r2, [pc, #176]	@ (8008c48 <prvAddNewTaskToReadyList+0xc4>)
 8008b98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008b9a:	4b2c      	ldr	r3, [pc, #176]	@ (8008c4c <prvAddNewTaskToReadyList+0xc8>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d109      	bne.n	8008bb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008ba2:	4a2a      	ldr	r2, [pc, #168]	@ (8008c4c <prvAddNewTaskToReadyList+0xc8>)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008ba8:	4b27      	ldr	r3, [pc, #156]	@ (8008c48 <prvAddNewTaskToReadyList+0xc4>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d110      	bne.n	8008bd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008bb0:	f000 fc46 	bl	8009440 <prvInitialiseTaskLists>
 8008bb4:	e00d      	b.n	8008bd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008bb6:	4b26      	ldr	r3, [pc, #152]	@ (8008c50 <prvAddNewTaskToReadyList+0xcc>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d109      	bne.n	8008bd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008bbe:	4b23      	ldr	r3, [pc, #140]	@ (8008c4c <prvAddNewTaskToReadyList+0xc8>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d802      	bhi.n	8008bd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008bcc:	4a1f      	ldr	r2, [pc, #124]	@ (8008c4c <prvAddNewTaskToReadyList+0xc8>)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008bd2:	4b20      	ldr	r3, [pc, #128]	@ (8008c54 <prvAddNewTaskToReadyList+0xd0>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	4a1e      	ldr	r2, [pc, #120]	@ (8008c54 <prvAddNewTaskToReadyList+0xd0>)
 8008bda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8008c54 <prvAddNewTaskToReadyList+0xd0>)
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008be8:	4b1b      	ldr	r3, [pc, #108]	@ (8008c58 <prvAddNewTaskToReadyList+0xd4>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d903      	bls.n	8008bf8 <prvAddNewTaskToReadyList+0x74>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf4:	4a18      	ldr	r2, [pc, #96]	@ (8008c58 <prvAddNewTaskToReadyList+0xd4>)
 8008bf6:	6013      	str	r3, [r2, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bfc:	4613      	mov	r3, r2
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	4413      	add	r3, r2
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	4a15      	ldr	r2, [pc, #84]	@ (8008c5c <prvAddNewTaskToReadyList+0xd8>)
 8008c06:	441a      	add	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	3304      	adds	r3, #4
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	4610      	mov	r0, r2
 8008c10:	f7ff f901 	bl	8007e16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008c14:	f001 fa72 	bl	800a0fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008c18:	4b0d      	ldr	r3, [pc, #52]	@ (8008c50 <prvAddNewTaskToReadyList+0xcc>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00e      	beq.n	8008c3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008c20:	4b0a      	ldr	r3, [pc, #40]	@ (8008c4c <prvAddNewTaskToReadyList+0xc8>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d207      	bcs.n	8008c3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8008c60 <prvAddNewTaskToReadyList+0xdc>)
 8008c30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c34:	601a      	str	r2, [r3, #0]
 8008c36:	f3bf 8f4f 	dsb	sy
 8008c3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c3e:	bf00      	nop
 8008c40:	3708      	adds	r7, #8
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	200054ac 	.word	0x200054ac
 8008c4c:	20004fd8 	.word	0x20004fd8
 8008c50:	200054b8 	.word	0x200054b8
 8008c54:	200054c8 	.word	0x200054c8
 8008c58:	200054b4 	.word	0x200054b4
 8008c5c:	20004fdc 	.word	0x20004fdc
 8008c60:	e000ed04 	.word	0xe000ed04

08008c64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d018      	beq.n	8008ca8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008c76:	4b14      	ldr	r3, [pc, #80]	@ (8008cc8 <vTaskDelay+0x64>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00b      	beq.n	8008c96 <vTaskDelay+0x32>
	__asm volatile
 8008c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c82:	f383 8811 	msr	BASEPRI, r3
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	60bb      	str	r3, [r7, #8]
}
 8008c90:	bf00      	nop
 8008c92:	bf00      	nop
 8008c94:	e7fd      	b.n	8008c92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008c96:	f000 f883 	bl	8008da0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 fd1b 	bl	80096d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008ca2:	f000 f88b 	bl	8008dbc <xTaskResumeAll>
 8008ca6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d107      	bne.n	8008cbe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008cae:	4b07      	ldr	r3, [pc, #28]	@ (8008ccc <vTaskDelay+0x68>)
 8008cb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cb4:	601a      	str	r2, [r3, #0]
 8008cb6:	f3bf 8f4f 	dsb	sy
 8008cba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008cbe:	bf00      	nop
 8008cc0:	3710      	adds	r7, #16
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	200054d4 	.word	0x200054d4
 8008ccc:	e000ed04 	.word	0xe000ed04

08008cd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b08a      	sub	sp, #40	@ 0x28
 8008cd4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008cde:	463a      	mov	r2, r7
 8008ce0:	1d39      	adds	r1, r7, #4
 8008ce2:	f107 0308 	add.w	r3, r7, #8
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7ff f834 	bl	8007d54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008cec:	6839      	ldr	r1, [r7, #0]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	9202      	str	r2, [sp, #8]
 8008cf4:	9301      	str	r3, [sp, #4]
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	9300      	str	r3, [sp, #0]
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	460a      	mov	r2, r1
 8008cfe:	4922      	ldr	r1, [pc, #136]	@ (8008d88 <vTaskStartScheduler+0xb8>)
 8008d00:	4822      	ldr	r0, [pc, #136]	@ (8008d8c <vTaskStartScheduler+0xbc>)
 8008d02:	f7ff fe09 	bl	8008918 <xTaskCreateStatic>
 8008d06:	4603      	mov	r3, r0
 8008d08:	4a21      	ldr	r2, [pc, #132]	@ (8008d90 <vTaskStartScheduler+0xc0>)
 8008d0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008d0c:	4b20      	ldr	r3, [pc, #128]	@ (8008d90 <vTaskStartScheduler+0xc0>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d002      	beq.n	8008d1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008d14:	2301      	movs	r3, #1
 8008d16:	617b      	str	r3, [r7, #20]
 8008d18:	e001      	b.n	8008d1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d102      	bne.n	8008d2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008d24:	f000 fd2c 	bl	8009780 <xTimerCreateTimerTask>
 8008d28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d116      	bne.n	8008d5e <vTaskStartScheduler+0x8e>
	__asm volatile
 8008d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d34:	f383 8811 	msr	BASEPRI, r3
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	f3bf 8f4f 	dsb	sy
 8008d40:	613b      	str	r3, [r7, #16]
}
 8008d42:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008d44:	4b13      	ldr	r3, [pc, #76]	@ (8008d94 <vTaskStartScheduler+0xc4>)
 8008d46:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d4a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008d4c:	4b12      	ldr	r3, [pc, #72]	@ (8008d98 <vTaskStartScheduler+0xc8>)
 8008d4e:	2201      	movs	r2, #1
 8008d50:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d52:	4b12      	ldr	r3, [pc, #72]	@ (8008d9c <vTaskStartScheduler+0xcc>)
 8008d54:	2200      	movs	r2, #0
 8008d56:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d58:	f001 f8fa 	bl	8009f50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d5c:	e00f      	b.n	8008d7e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d64:	d10b      	bne.n	8008d7e <vTaskStartScheduler+0xae>
	__asm volatile
 8008d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d6a:	f383 8811 	msr	BASEPRI, r3
 8008d6e:	f3bf 8f6f 	isb	sy
 8008d72:	f3bf 8f4f 	dsb	sy
 8008d76:	60fb      	str	r3, [r7, #12]
}
 8008d78:	bf00      	nop
 8008d7a:	bf00      	nop
 8008d7c:	e7fd      	b.n	8008d7a <vTaskStartScheduler+0xaa>
}
 8008d7e:	bf00      	nop
 8008d80:	3718      	adds	r7, #24
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	080186d4 	.word	0x080186d4
 8008d8c:	08009411 	.word	0x08009411
 8008d90:	200054d0 	.word	0x200054d0
 8008d94:	200054cc 	.word	0x200054cc
 8008d98:	200054b8 	.word	0x200054b8
 8008d9c:	200054b0 	.word	0x200054b0

08008da0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008da0:	b480      	push	{r7}
 8008da2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008da4:	4b04      	ldr	r3, [pc, #16]	@ (8008db8 <vTaskSuspendAll+0x18>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	3301      	adds	r3, #1
 8008daa:	4a03      	ldr	r2, [pc, #12]	@ (8008db8 <vTaskSuspendAll+0x18>)
 8008dac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008dae:	bf00      	nop
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr
 8008db8:	200054d4 	.word	0x200054d4

08008dbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008dca:	4b42      	ldr	r3, [pc, #264]	@ (8008ed4 <xTaskResumeAll+0x118>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d10b      	bne.n	8008dea <xTaskResumeAll+0x2e>
	__asm volatile
 8008dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dd6:	f383 8811 	msr	BASEPRI, r3
 8008dda:	f3bf 8f6f 	isb	sy
 8008dde:	f3bf 8f4f 	dsb	sy
 8008de2:	603b      	str	r3, [r7, #0]
}
 8008de4:	bf00      	nop
 8008de6:	bf00      	nop
 8008de8:	e7fd      	b.n	8008de6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008dea:	f001 f955 	bl	800a098 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008dee:	4b39      	ldr	r3, [pc, #228]	@ (8008ed4 <xTaskResumeAll+0x118>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	3b01      	subs	r3, #1
 8008df4:	4a37      	ldr	r2, [pc, #220]	@ (8008ed4 <xTaskResumeAll+0x118>)
 8008df6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008df8:	4b36      	ldr	r3, [pc, #216]	@ (8008ed4 <xTaskResumeAll+0x118>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d162      	bne.n	8008ec6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008e00:	4b35      	ldr	r3, [pc, #212]	@ (8008ed8 <xTaskResumeAll+0x11c>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d05e      	beq.n	8008ec6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e08:	e02f      	b.n	8008e6a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e0a:	4b34      	ldr	r3, [pc, #208]	@ (8008edc <xTaskResumeAll+0x120>)
 8008e0c:	68db      	ldr	r3, [r3, #12]
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	3318      	adds	r3, #24
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7ff f85a 	bl	8007ed0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	3304      	adds	r3, #4
 8008e20:	4618      	mov	r0, r3
 8008e22:	f7ff f855 	bl	8007ed0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e2a:	4b2d      	ldr	r3, [pc, #180]	@ (8008ee0 <xTaskResumeAll+0x124>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d903      	bls.n	8008e3a <xTaskResumeAll+0x7e>
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e36:	4a2a      	ldr	r2, [pc, #168]	@ (8008ee0 <xTaskResumeAll+0x124>)
 8008e38:	6013      	str	r3, [r2, #0]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e3e:	4613      	mov	r3, r2
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	4413      	add	r3, r2
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4a27      	ldr	r2, [pc, #156]	@ (8008ee4 <xTaskResumeAll+0x128>)
 8008e48:	441a      	add	r2, r3
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	3304      	adds	r3, #4
 8008e4e:	4619      	mov	r1, r3
 8008e50:	4610      	mov	r0, r2
 8008e52:	f7fe ffe0 	bl	8007e16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e5a:	4b23      	ldr	r3, [pc, #140]	@ (8008ee8 <xTaskResumeAll+0x12c>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d302      	bcc.n	8008e6a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008e64:	4b21      	ldr	r3, [pc, #132]	@ (8008eec <xTaskResumeAll+0x130>)
 8008e66:	2201      	movs	r2, #1
 8008e68:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8008edc <xTaskResumeAll+0x120>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d1cb      	bne.n	8008e0a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d001      	beq.n	8008e7c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008e78:	f000 fb80 	bl	800957c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008e7c:	4b1c      	ldr	r3, [pc, #112]	@ (8008ef0 <xTaskResumeAll+0x134>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d010      	beq.n	8008eaa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008e88:	f000 f846 	bl	8008f18 <xTaskIncrementTick>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d002      	beq.n	8008e98 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008e92:	4b16      	ldr	r3, [pc, #88]	@ (8008eec <xTaskResumeAll+0x130>)
 8008e94:	2201      	movs	r2, #1
 8008e96:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d1f1      	bne.n	8008e88 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008ea4:	4b12      	ldr	r3, [pc, #72]	@ (8008ef0 <xTaskResumeAll+0x134>)
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008eaa:	4b10      	ldr	r3, [pc, #64]	@ (8008eec <xTaskResumeAll+0x130>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d009      	beq.n	8008ec6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8008ef4 <xTaskResumeAll+0x138>)
 8008eb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ebc:	601a      	str	r2, [r3, #0]
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ec6:	f001 f919 	bl	800a0fc <vPortExitCritical>

	return xAlreadyYielded;
 8008eca:	68bb      	ldr	r3, [r7, #8]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3710      	adds	r7, #16
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	200054d4 	.word	0x200054d4
 8008ed8:	200054ac 	.word	0x200054ac
 8008edc:	2000546c 	.word	0x2000546c
 8008ee0:	200054b4 	.word	0x200054b4
 8008ee4:	20004fdc 	.word	0x20004fdc
 8008ee8:	20004fd8 	.word	0x20004fd8
 8008eec:	200054c0 	.word	0x200054c0
 8008ef0:	200054bc 	.word	0x200054bc
 8008ef4:	e000ed04 	.word	0xe000ed04

08008ef8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008efe:	4b05      	ldr	r3, [pc, #20]	@ (8008f14 <xTaskGetTickCount+0x1c>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008f04:	687b      	ldr	r3, [r7, #4]
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	370c      	adds	r7, #12
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	200054b0 	.word	0x200054b0

08008f18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b086      	sub	sp, #24
 8008f1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f22:	4b4f      	ldr	r3, [pc, #316]	@ (8009060 <xTaskIncrementTick+0x148>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	f040 8090 	bne.w	800904c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008f2c:	4b4d      	ldr	r3, [pc, #308]	@ (8009064 <xTaskIncrementTick+0x14c>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	3301      	adds	r3, #1
 8008f32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008f34:	4a4b      	ldr	r2, [pc, #300]	@ (8009064 <xTaskIncrementTick+0x14c>)
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d121      	bne.n	8008f84 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008f40:	4b49      	ldr	r3, [pc, #292]	@ (8009068 <xTaskIncrementTick+0x150>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00b      	beq.n	8008f62 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f4e:	f383 8811 	msr	BASEPRI, r3
 8008f52:	f3bf 8f6f 	isb	sy
 8008f56:	f3bf 8f4f 	dsb	sy
 8008f5a:	603b      	str	r3, [r7, #0]
}
 8008f5c:	bf00      	nop
 8008f5e:	bf00      	nop
 8008f60:	e7fd      	b.n	8008f5e <xTaskIncrementTick+0x46>
 8008f62:	4b41      	ldr	r3, [pc, #260]	@ (8009068 <xTaskIncrementTick+0x150>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	60fb      	str	r3, [r7, #12]
 8008f68:	4b40      	ldr	r3, [pc, #256]	@ (800906c <xTaskIncrementTick+0x154>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a3e      	ldr	r2, [pc, #248]	@ (8009068 <xTaskIncrementTick+0x150>)
 8008f6e:	6013      	str	r3, [r2, #0]
 8008f70:	4a3e      	ldr	r2, [pc, #248]	@ (800906c <xTaskIncrementTick+0x154>)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6013      	str	r3, [r2, #0]
 8008f76:	4b3e      	ldr	r3, [pc, #248]	@ (8009070 <xTaskIncrementTick+0x158>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	4a3c      	ldr	r2, [pc, #240]	@ (8009070 <xTaskIncrementTick+0x158>)
 8008f7e:	6013      	str	r3, [r2, #0]
 8008f80:	f000 fafc 	bl	800957c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f84:	4b3b      	ldr	r3, [pc, #236]	@ (8009074 <xTaskIncrementTick+0x15c>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	693a      	ldr	r2, [r7, #16]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d349      	bcc.n	8009022 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f8e:	4b36      	ldr	r3, [pc, #216]	@ (8009068 <xTaskIncrementTick+0x150>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d104      	bne.n	8008fa2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f98:	4b36      	ldr	r3, [pc, #216]	@ (8009074 <xTaskIncrementTick+0x15c>)
 8008f9a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f9e:	601a      	str	r2, [r3, #0]
					break;
 8008fa0:	e03f      	b.n	8009022 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fa2:	4b31      	ldr	r3, [pc, #196]	@ (8009068 <xTaskIncrementTick+0x150>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008fb2:	693a      	ldr	r2, [r7, #16]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d203      	bcs.n	8008fc2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008fba:	4a2e      	ldr	r2, [pc, #184]	@ (8009074 <xTaskIncrementTick+0x15c>)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008fc0:	e02f      	b.n	8009022 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	3304      	adds	r3, #4
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f7fe ff82 	bl	8007ed0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d004      	beq.n	8008fde <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	3318      	adds	r3, #24
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7fe ff79 	bl	8007ed0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fe2:	4b25      	ldr	r3, [pc, #148]	@ (8009078 <xTaskIncrementTick+0x160>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d903      	bls.n	8008ff2 <xTaskIncrementTick+0xda>
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fee:	4a22      	ldr	r2, [pc, #136]	@ (8009078 <xTaskIncrementTick+0x160>)
 8008ff0:	6013      	str	r3, [r2, #0]
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	4413      	add	r3, r2
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	4a1f      	ldr	r2, [pc, #124]	@ (800907c <xTaskIncrementTick+0x164>)
 8009000:	441a      	add	r2, r3
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	3304      	adds	r3, #4
 8009006:	4619      	mov	r1, r3
 8009008:	4610      	mov	r0, r2
 800900a:	f7fe ff04 	bl	8007e16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009012:	4b1b      	ldr	r3, [pc, #108]	@ (8009080 <xTaskIncrementTick+0x168>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009018:	429a      	cmp	r2, r3
 800901a:	d3b8      	bcc.n	8008f8e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800901c:	2301      	movs	r3, #1
 800901e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009020:	e7b5      	b.n	8008f8e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009022:	4b17      	ldr	r3, [pc, #92]	@ (8009080 <xTaskIncrementTick+0x168>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009028:	4914      	ldr	r1, [pc, #80]	@ (800907c <xTaskIncrementTick+0x164>)
 800902a:	4613      	mov	r3, r2
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	4413      	add	r3, r2
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	440b      	add	r3, r1
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2b01      	cmp	r3, #1
 8009038:	d901      	bls.n	800903e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800903a:	2301      	movs	r3, #1
 800903c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800903e:	4b11      	ldr	r3, [pc, #68]	@ (8009084 <xTaskIncrementTick+0x16c>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d007      	beq.n	8009056 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009046:	2301      	movs	r3, #1
 8009048:	617b      	str	r3, [r7, #20]
 800904a:	e004      	b.n	8009056 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800904c:	4b0e      	ldr	r3, [pc, #56]	@ (8009088 <xTaskIncrementTick+0x170>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	3301      	adds	r3, #1
 8009052:	4a0d      	ldr	r2, [pc, #52]	@ (8009088 <xTaskIncrementTick+0x170>)
 8009054:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009056:	697b      	ldr	r3, [r7, #20]
}
 8009058:	4618      	mov	r0, r3
 800905a:	3718      	adds	r7, #24
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}
 8009060:	200054d4 	.word	0x200054d4
 8009064:	200054b0 	.word	0x200054b0
 8009068:	20005464 	.word	0x20005464
 800906c:	20005468 	.word	0x20005468
 8009070:	200054c4 	.word	0x200054c4
 8009074:	200054cc 	.word	0x200054cc
 8009078:	200054b4 	.word	0x200054b4
 800907c:	20004fdc 	.word	0x20004fdc
 8009080:	20004fd8 	.word	0x20004fd8
 8009084:	200054c0 	.word	0x200054c0
 8009088:	200054bc 	.word	0x200054bc

0800908c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800908c:	b480      	push	{r7}
 800908e:	b085      	sub	sp, #20
 8009090:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009092:	4b28      	ldr	r3, [pc, #160]	@ (8009134 <vTaskSwitchContext+0xa8>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d003      	beq.n	80090a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800909a:	4b27      	ldr	r3, [pc, #156]	@ (8009138 <vTaskSwitchContext+0xac>)
 800909c:	2201      	movs	r2, #1
 800909e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80090a0:	e042      	b.n	8009128 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80090a2:	4b25      	ldr	r3, [pc, #148]	@ (8009138 <vTaskSwitchContext+0xac>)
 80090a4:	2200      	movs	r2, #0
 80090a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090a8:	4b24      	ldr	r3, [pc, #144]	@ (800913c <vTaskSwitchContext+0xb0>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	60fb      	str	r3, [r7, #12]
 80090ae:	e011      	b.n	80090d4 <vTaskSwitchContext+0x48>
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d10b      	bne.n	80090ce <vTaskSwitchContext+0x42>
	__asm volatile
 80090b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ba:	f383 8811 	msr	BASEPRI, r3
 80090be:	f3bf 8f6f 	isb	sy
 80090c2:	f3bf 8f4f 	dsb	sy
 80090c6:	607b      	str	r3, [r7, #4]
}
 80090c8:	bf00      	nop
 80090ca:	bf00      	nop
 80090cc:	e7fd      	b.n	80090ca <vTaskSwitchContext+0x3e>
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	3b01      	subs	r3, #1
 80090d2:	60fb      	str	r3, [r7, #12]
 80090d4:	491a      	ldr	r1, [pc, #104]	@ (8009140 <vTaskSwitchContext+0xb4>)
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	4613      	mov	r3, r2
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	4413      	add	r3, r2
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	440b      	add	r3, r1
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d0e3      	beq.n	80090b0 <vTaskSwitchContext+0x24>
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	4613      	mov	r3, r2
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	4413      	add	r3, r2
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	4a13      	ldr	r2, [pc, #76]	@ (8009140 <vTaskSwitchContext+0xb4>)
 80090f4:	4413      	add	r3, r2
 80090f6:	60bb      	str	r3, [r7, #8]
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	685a      	ldr	r2, [r3, #4]
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	605a      	str	r2, [r3, #4]
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	685a      	ldr	r2, [r3, #4]
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	3308      	adds	r3, #8
 800910a:	429a      	cmp	r2, r3
 800910c:	d104      	bne.n	8009118 <vTaskSwitchContext+0x8c>
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	685a      	ldr	r2, [r3, #4]
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	605a      	str	r2, [r3, #4]
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	4a09      	ldr	r2, [pc, #36]	@ (8009144 <vTaskSwitchContext+0xb8>)
 8009120:	6013      	str	r3, [r2, #0]
 8009122:	4a06      	ldr	r2, [pc, #24]	@ (800913c <vTaskSwitchContext+0xb0>)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6013      	str	r3, [r2, #0]
}
 8009128:	bf00      	nop
 800912a:	3714      	adds	r7, #20
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr
 8009134:	200054d4 	.word	0x200054d4
 8009138:	200054c0 	.word	0x200054c0
 800913c:	200054b4 	.word	0x200054b4
 8009140:	20004fdc 	.word	0x20004fdc
 8009144:	20004fd8 	.word	0x20004fd8

08009148 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d10b      	bne.n	8009170 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800915c:	f383 8811 	msr	BASEPRI, r3
 8009160:	f3bf 8f6f 	isb	sy
 8009164:	f3bf 8f4f 	dsb	sy
 8009168:	60fb      	str	r3, [r7, #12]
}
 800916a:	bf00      	nop
 800916c:	bf00      	nop
 800916e:	e7fd      	b.n	800916c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009170:	4b07      	ldr	r3, [pc, #28]	@ (8009190 <vTaskPlaceOnEventList+0x48>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	3318      	adds	r3, #24
 8009176:	4619      	mov	r1, r3
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f7fe fe70 	bl	8007e5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800917e:	2101      	movs	r1, #1
 8009180:	6838      	ldr	r0, [r7, #0]
 8009182:	f000 faa9 	bl	80096d8 <prvAddCurrentTaskToDelayedList>
}
 8009186:	bf00      	nop
 8009188:	3710      	adds	r7, #16
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	20004fd8 	.word	0x20004fd8

08009194 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009194:	b580      	push	{r7, lr}
 8009196:	b086      	sub	sp, #24
 8009198:	af00      	add	r7, sp, #0
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d10b      	bne.n	80091be <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80091a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091aa:	f383 8811 	msr	BASEPRI, r3
 80091ae:	f3bf 8f6f 	isb	sy
 80091b2:	f3bf 8f4f 	dsb	sy
 80091b6:	617b      	str	r3, [r7, #20]
}
 80091b8:	bf00      	nop
 80091ba:	bf00      	nop
 80091bc:	e7fd      	b.n	80091ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80091be:	4b0a      	ldr	r3, [pc, #40]	@ (80091e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	3318      	adds	r3, #24
 80091c4:	4619      	mov	r1, r3
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	f7fe fe25 	bl	8007e16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d002      	beq.n	80091d8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80091d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80091d6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80091d8:	6879      	ldr	r1, [r7, #4]
 80091da:	68b8      	ldr	r0, [r7, #8]
 80091dc:	f000 fa7c 	bl	80096d8 <prvAddCurrentTaskToDelayedList>
	}
 80091e0:	bf00      	nop
 80091e2:	3718      	adds	r7, #24
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}
 80091e8:	20004fd8 	.word	0x20004fd8

080091ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b086      	sub	sp, #24
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d10b      	bne.n	800921a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009206:	f383 8811 	msr	BASEPRI, r3
 800920a:	f3bf 8f6f 	isb	sy
 800920e:	f3bf 8f4f 	dsb	sy
 8009212:	60fb      	str	r3, [r7, #12]
}
 8009214:	bf00      	nop
 8009216:	bf00      	nop
 8009218:	e7fd      	b.n	8009216 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	3318      	adds	r3, #24
 800921e:	4618      	mov	r0, r3
 8009220:	f7fe fe56 	bl	8007ed0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009224:	4b1d      	ldr	r3, [pc, #116]	@ (800929c <xTaskRemoveFromEventList+0xb0>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d11d      	bne.n	8009268 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	3304      	adds	r3, #4
 8009230:	4618      	mov	r0, r3
 8009232:	f7fe fe4d 	bl	8007ed0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800923a:	4b19      	ldr	r3, [pc, #100]	@ (80092a0 <xTaskRemoveFromEventList+0xb4>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	429a      	cmp	r2, r3
 8009240:	d903      	bls.n	800924a <xTaskRemoveFromEventList+0x5e>
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009246:	4a16      	ldr	r2, [pc, #88]	@ (80092a0 <xTaskRemoveFromEventList+0xb4>)
 8009248:	6013      	str	r3, [r2, #0]
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800924e:	4613      	mov	r3, r2
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	4413      	add	r3, r2
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	4a13      	ldr	r2, [pc, #76]	@ (80092a4 <xTaskRemoveFromEventList+0xb8>)
 8009258:	441a      	add	r2, r3
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	3304      	adds	r3, #4
 800925e:	4619      	mov	r1, r3
 8009260:	4610      	mov	r0, r2
 8009262:	f7fe fdd8 	bl	8007e16 <vListInsertEnd>
 8009266:	e005      	b.n	8009274 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	3318      	adds	r3, #24
 800926c:	4619      	mov	r1, r3
 800926e:	480e      	ldr	r0, [pc, #56]	@ (80092a8 <xTaskRemoveFromEventList+0xbc>)
 8009270:	f7fe fdd1 	bl	8007e16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009278:	4b0c      	ldr	r3, [pc, #48]	@ (80092ac <xTaskRemoveFromEventList+0xc0>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800927e:	429a      	cmp	r2, r3
 8009280:	d905      	bls.n	800928e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009282:	2301      	movs	r3, #1
 8009284:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009286:	4b0a      	ldr	r3, [pc, #40]	@ (80092b0 <xTaskRemoveFromEventList+0xc4>)
 8009288:	2201      	movs	r2, #1
 800928a:	601a      	str	r2, [r3, #0]
 800928c:	e001      	b.n	8009292 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800928e:	2300      	movs	r3, #0
 8009290:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009292:	697b      	ldr	r3, [r7, #20]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3718      	adds	r7, #24
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}
 800929c:	200054d4 	.word	0x200054d4
 80092a0:	200054b4 	.word	0x200054b4
 80092a4:	20004fdc 	.word	0x20004fdc
 80092a8:	2000546c 	.word	0x2000546c
 80092ac:	20004fd8 	.word	0x20004fd8
 80092b0:	200054c0 	.word	0x200054c0

080092b4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d10b      	bne.n	80092da <vTaskSetTimeOutState+0x26>
	__asm volatile
 80092c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092c6:	f383 8811 	msr	BASEPRI, r3
 80092ca:	f3bf 8f6f 	isb	sy
 80092ce:	f3bf 8f4f 	dsb	sy
 80092d2:	60fb      	str	r3, [r7, #12]
}
 80092d4:	bf00      	nop
 80092d6:	bf00      	nop
 80092d8:	e7fd      	b.n	80092d6 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 80092da:	f000 fedd 	bl	800a098 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80092de:	4b07      	ldr	r3, [pc, #28]	@ (80092fc <vTaskSetTimeOutState+0x48>)
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80092e6:	4b06      	ldr	r3, [pc, #24]	@ (8009300 <vTaskSetTimeOutState+0x4c>)
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80092ee:	f000 ff05 	bl	800a0fc <vPortExitCritical>
}
 80092f2:	bf00      	nop
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	200054c4 	.word	0x200054c4
 8009300:	200054b0 	.word	0x200054b0

08009304 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800930c:	4b06      	ldr	r3, [pc, #24]	@ (8009328 <vTaskInternalSetTimeOutState+0x24>)
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009314:	4b05      	ldr	r3, [pc, #20]	@ (800932c <vTaskInternalSetTimeOutState+0x28>)
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	605a      	str	r2, [r3, #4]
}
 800931c:	bf00      	nop
 800931e:	370c      	adds	r7, #12
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr
 8009328:	200054c4 	.word	0x200054c4
 800932c:	200054b0 	.word	0x200054b0

08009330 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b088      	sub	sp, #32
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d10b      	bne.n	8009358 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009344:	f383 8811 	msr	BASEPRI, r3
 8009348:	f3bf 8f6f 	isb	sy
 800934c:	f3bf 8f4f 	dsb	sy
 8009350:	613b      	str	r3, [r7, #16]
}
 8009352:	bf00      	nop
 8009354:	bf00      	nop
 8009356:	e7fd      	b.n	8009354 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d10b      	bne.n	8009376 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800935e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009362:	f383 8811 	msr	BASEPRI, r3
 8009366:	f3bf 8f6f 	isb	sy
 800936a:	f3bf 8f4f 	dsb	sy
 800936e:	60fb      	str	r3, [r7, #12]
}
 8009370:	bf00      	nop
 8009372:	bf00      	nop
 8009374:	e7fd      	b.n	8009372 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009376:	f000 fe8f 	bl	800a098 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800937a:	4b1d      	ldr	r3, [pc, #116]	@ (80093f0 <xTaskCheckForTimeOut+0xc0>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	69ba      	ldr	r2, [r7, #24]
 8009386:	1ad3      	subs	r3, r2, r3
 8009388:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009392:	d102      	bne.n	800939a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009394:	2300      	movs	r3, #0
 8009396:	61fb      	str	r3, [r7, #28]
 8009398:	e023      	b.n	80093e2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	4b15      	ldr	r3, [pc, #84]	@ (80093f4 <xTaskCheckForTimeOut+0xc4>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d007      	beq.n	80093b6 <xTaskCheckForTimeOut+0x86>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	69ba      	ldr	r2, [r7, #24]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d302      	bcc.n	80093b6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80093b0:	2301      	movs	r3, #1
 80093b2:	61fb      	str	r3, [r7, #28]
 80093b4:	e015      	b.n	80093e2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	697a      	ldr	r2, [r7, #20]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d20b      	bcs.n	80093d8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	1ad2      	subs	r2, r2, r3
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f7ff ff99 	bl	8009304 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80093d2:	2300      	movs	r3, #0
 80093d4:	61fb      	str	r3, [r7, #28]
 80093d6:	e004      	b.n	80093e2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	2200      	movs	r2, #0
 80093dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80093de:	2301      	movs	r3, #1
 80093e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80093e2:	f000 fe8b 	bl	800a0fc <vPortExitCritical>

	return xReturn;
 80093e6:	69fb      	ldr	r3, [r7, #28]
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3720      	adds	r7, #32
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}
 80093f0:	200054b0 	.word	0x200054b0
 80093f4:	200054c4 	.word	0x200054c4

080093f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80093f8:	b480      	push	{r7}
 80093fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80093fc:	4b03      	ldr	r3, [pc, #12]	@ (800940c <vTaskMissedYield+0x14>)
 80093fe:	2201      	movs	r2, #1
 8009400:	601a      	str	r2, [r3, #0]
}
 8009402:	bf00      	nop
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr
 800940c:	200054c0 	.word	0x200054c0

08009410 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009418:	f000 f852 	bl	80094c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800941c:	4b06      	ldr	r3, [pc, #24]	@ (8009438 <prvIdleTask+0x28>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2b01      	cmp	r3, #1
 8009422:	d9f9      	bls.n	8009418 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009424:	4b05      	ldr	r3, [pc, #20]	@ (800943c <prvIdleTask+0x2c>)
 8009426:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800942a:	601a      	str	r2, [r3, #0]
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009434:	e7f0      	b.n	8009418 <prvIdleTask+0x8>
 8009436:	bf00      	nop
 8009438:	20004fdc 	.word	0x20004fdc
 800943c:	e000ed04 	.word	0xe000ed04

08009440 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009446:	2300      	movs	r3, #0
 8009448:	607b      	str	r3, [r7, #4]
 800944a:	e00c      	b.n	8009466 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	4613      	mov	r3, r2
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	4413      	add	r3, r2
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	4a12      	ldr	r2, [pc, #72]	@ (80094a0 <prvInitialiseTaskLists+0x60>)
 8009458:	4413      	add	r3, r2
 800945a:	4618      	mov	r0, r3
 800945c:	f7fe fcae 	bl	8007dbc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	3301      	adds	r3, #1
 8009464:	607b      	str	r3, [r7, #4]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2b37      	cmp	r3, #55	@ 0x37
 800946a:	d9ef      	bls.n	800944c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800946c:	480d      	ldr	r0, [pc, #52]	@ (80094a4 <prvInitialiseTaskLists+0x64>)
 800946e:	f7fe fca5 	bl	8007dbc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009472:	480d      	ldr	r0, [pc, #52]	@ (80094a8 <prvInitialiseTaskLists+0x68>)
 8009474:	f7fe fca2 	bl	8007dbc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009478:	480c      	ldr	r0, [pc, #48]	@ (80094ac <prvInitialiseTaskLists+0x6c>)
 800947a:	f7fe fc9f 	bl	8007dbc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800947e:	480c      	ldr	r0, [pc, #48]	@ (80094b0 <prvInitialiseTaskLists+0x70>)
 8009480:	f7fe fc9c 	bl	8007dbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009484:	480b      	ldr	r0, [pc, #44]	@ (80094b4 <prvInitialiseTaskLists+0x74>)
 8009486:	f7fe fc99 	bl	8007dbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800948a:	4b0b      	ldr	r3, [pc, #44]	@ (80094b8 <prvInitialiseTaskLists+0x78>)
 800948c:	4a05      	ldr	r2, [pc, #20]	@ (80094a4 <prvInitialiseTaskLists+0x64>)
 800948e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009490:	4b0a      	ldr	r3, [pc, #40]	@ (80094bc <prvInitialiseTaskLists+0x7c>)
 8009492:	4a05      	ldr	r2, [pc, #20]	@ (80094a8 <prvInitialiseTaskLists+0x68>)
 8009494:	601a      	str	r2, [r3, #0]
}
 8009496:	bf00      	nop
 8009498:	3708      	adds	r7, #8
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	20004fdc 	.word	0x20004fdc
 80094a4:	2000543c 	.word	0x2000543c
 80094a8:	20005450 	.word	0x20005450
 80094ac:	2000546c 	.word	0x2000546c
 80094b0:	20005480 	.word	0x20005480
 80094b4:	20005498 	.word	0x20005498
 80094b8:	20005464 	.word	0x20005464
 80094bc:	20005468 	.word	0x20005468

080094c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094c6:	e019      	b.n	80094fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80094c8:	f000 fde6 	bl	800a098 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094cc:	4b10      	ldr	r3, [pc, #64]	@ (8009510 <prvCheckTasksWaitingTermination+0x50>)
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	3304      	adds	r3, #4
 80094d8:	4618      	mov	r0, r3
 80094da:	f7fe fcf9 	bl	8007ed0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80094de:	4b0d      	ldr	r3, [pc, #52]	@ (8009514 <prvCheckTasksWaitingTermination+0x54>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	3b01      	subs	r3, #1
 80094e4:	4a0b      	ldr	r2, [pc, #44]	@ (8009514 <prvCheckTasksWaitingTermination+0x54>)
 80094e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80094e8:	4b0b      	ldr	r3, [pc, #44]	@ (8009518 <prvCheckTasksWaitingTermination+0x58>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	3b01      	subs	r3, #1
 80094ee:	4a0a      	ldr	r2, [pc, #40]	@ (8009518 <prvCheckTasksWaitingTermination+0x58>)
 80094f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80094f2:	f000 fe03 	bl	800a0fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 f810 	bl	800951c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094fc:	4b06      	ldr	r3, [pc, #24]	@ (8009518 <prvCheckTasksWaitingTermination+0x58>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d1e1      	bne.n	80094c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009504:	bf00      	nop
 8009506:	bf00      	nop
 8009508:	3708      	adds	r7, #8
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	20005480 	.word	0x20005480
 8009514:	200054ac 	.word	0x200054ac
 8009518:	20005494 	.word	0x20005494

0800951c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800952a:	2b00      	cmp	r3, #0
 800952c:	d108      	bne.n	8009540 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009532:	4618      	mov	r0, r3
 8009534:	f000 ffa0 	bl	800a478 <vPortFree>
				vPortFree( pxTCB );
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 ff9d 	bl	800a478 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800953e:	e019      	b.n	8009574 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009546:	2b01      	cmp	r3, #1
 8009548:	d103      	bne.n	8009552 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 ff94 	bl	800a478 <vPortFree>
	}
 8009550:	e010      	b.n	8009574 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009558:	2b02      	cmp	r3, #2
 800955a:	d00b      	beq.n	8009574 <prvDeleteTCB+0x58>
	__asm volatile
 800955c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009560:	f383 8811 	msr	BASEPRI, r3
 8009564:	f3bf 8f6f 	isb	sy
 8009568:	f3bf 8f4f 	dsb	sy
 800956c:	60fb      	str	r3, [r7, #12]
}
 800956e:	bf00      	nop
 8009570:	bf00      	nop
 8009572:	e7fd      	b.n	8009570 <prvDeleteTCB+0x54>
	}
 8009574:	bf00      	nop
 8009576:	3710      	adds	r7, #16
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009582:	4b0c      	ldr	r3, [pc, #48]	@ (80095b4 <prvResetNextTaskUnblockTime+0x38>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d104      	bne.n	8009596 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800958c:	4b0a      	ldr	r3, [pc, #40]	@ (80095b8 <prvResetNextTaskUnblockTime+0x3c>)
 800958e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009592:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009594:	e008      	b.n	80095a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009596:	4b07      	ldr	r3, [pc, #28]	@ (80095b4 <prvResetNextTaskUnblockTime+0x38>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	68db      	ldr	r3, [r3, #12]
 800959e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	4a04      	ldr	r2, [pc, #16]	@ (80095b8 <prvResetNextTaskUnblockTime+0x3c>)
 80095a6:	6013      	str	r3, [r2, #0]
}
 80095a8:	bf00      	nop
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr
 80095b4:	20005464 	.word	0x20005464
 80095b8:	200054cc 	.word	0x200054cc

080095bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80095c2:	4b0b      	ldr	r3, [pc, #44]	@ (80095f0 <xTaskGetSchedulerState+0x34>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d102      	bne.n	80095d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80095ca:	2301      	movs	r3, #1
 80095cc:	607b      	str	r3, [r7, #4]
 80095ce:	e008      	b.n	80095e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095d0:	4b08      	ldr	r3, [pc, #32]	@ (80095f4 <xTaskGetSchedulerState+0x38>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d102      	bne.n	80095de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80095d8:	2302      	movs	r3, #2
 80095da:	607b      	str	r3, [r7, #4]
 80095dc:	e001      	b.n	80095e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80095de:	2300      	movs	r3, #0
 80095e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80095e2:	687b      	ldr	r3, [r7, #4]
	}
 80095e4:	4618      	mov	r0, r3
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr
 80095f0:	200054b8 	.word	0x200054b8
 80095f4:	200054d4 	.word	0x200054d4

080095f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b086      	sub	sp, #24
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009604:	2300      	movs	r3, #0
 8009606:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d058      	beq.n	80096c0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800960e:	4b2f      	ldr	r3, [pc, #188]	@ (80096cc <xTaskPriorityDisinherit+0xd4>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	693a      	ldr	r2, [r7, #16]
 8009614:	429a      	cmp	r2, r3
 8009616:	d00b      	beq.n	8009630 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800961c:	f383 8811 	msr	BASEPRI, r3
 8009620:	f3bf 8f6f 	isb	sy
 8009624:	f3bf 8f4f 	dsb	sy
 8009628:	60fb      	str	r3, [r7, #12]
}
 800962a:	bf00      	nop
 800962c:	bf00      	nop
 800962e:	e7fd      	b.n	800962c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009634:	2b00      	cmp	r3, #0
 8009636:	d10b      	bne.n	8009650 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800963c:	f383 8811 	msr	BASEPRI, r3
 8009640:	f3bf 8f6f 	isb	sy
 8009644:	f3bf 8f4f 	dsb	sy
 8009648:	60bb      	str	r3, [r7, #8]
}
 800964a:	bf00      	nop
 800964c:	bf00      	nop
 800964e:	e7fd      	b.n	800964c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009654:	1e5a      	subs	r2, r3, #1
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009662:	429a      	cmp	r2, r3
 8009664:	d02c      	beq.n	80096c0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800966a:	2b00      	cmp	r3, #0
 800966c:	d128      	bne.n	80096c0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	3304      	adds	r3, #4
 8009672:	4618      	mov	r0, r3
 8009674:	f7fe fc2c 	bl	8007ed0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009684:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009690:	4b0f      	ldr	r3, [pc, #60]	@ (80096d0 <xTaskPriorityDisinherit+0xd8>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	429a      	cmp	r2, r3
 8009696:	d903      	bls.n	80096a0 <xTaskPriorityDisinherit+0xa8>
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800969c:	4a0c      	ldr	r2, [pc, #48]	@ (80096d0 <xTaskPriorityDisinherit+0xd8>)
 800969e:	6013      	str	r3, [r2, #0]
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096a4:	4613      	mov	r3, r2
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	4413      	add	r3, r2
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	4a09      	ldr	r2, [pc, #36]	@ (80096d4 <xTaskPriorityDisinherit+0xdc>)
 80096ae:	441a      	add	r2, r3
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	3304      	adds	r3, #4
 80096b4:	4619      	mov	r1, r3
 80096b6:	4610      	mov	r0, r2
 80096b8:	f7fe fbad 	bl	8007e16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80096bc:	2301      	movs	r3, #1
 80096be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80096c0:	697b      	ldr	r3, [r7, #20]
	}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3718      	adds	r7, #24
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	20004fd8 	.word	0x20004fd8
 80096d0:	200054b4 	.word	0x200054b4
 80096d4:	20004fdc 	.word	0x20004fdc

080096d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80096e2:	4b21      	ldr	r3, [pc, #132]	@ (8009768 <prvAddCurrentTaskToDelayedList+0x90>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096e8:	4b20      	ldr	r3, [pc, #128]	@ (800976c <prvAddCurrentTaskToDelayedList+0x94>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	3304      	adds	r3, #4
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7fe fbee 	bl	8007ed0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096fa:	d10a      	bne.n	8009712 <prvAddCurrentTaskToDelayedList+0x3a>
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d007      	beq.n	8009712 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009702:	4b1a      	ldr	r3, [pc, #104]	@ (800976c <prvAddCurrentTaskToDelayedList+0x94>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	3304      	adds	r3, #4
 8009708:	4619      	mov	r1, r3
 800970a:	4819      	ldr	r0, [pc, #100]	@ (8009770 <prvAddCurrentTaskToDelayedList+0x98>)
 800970c:	f7fe fb83 	bl	8007e16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009710:	e026      	b.n	8009760 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009712:	68fa      	ldr	r2, [r7, #12]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4413      	add	r3, r2
 8009718:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800971a:	4b14      	ldr	r3, [pc, #80]	@ (800976c <prvAddCurrentTaskToDelayedList+0x94>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009722:	68ba      	ldr	r2, [r7, #8]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	429a      	cmp	r2, r3
 8009728:	d209      	bcs.n	800973e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800972a:	4b12      	ldr	r3, [pc, #72]	@ (8009774 <prvAddCurrentTaskToDelayedList+0x9c>)
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	4b0f      	ldr	r3, [pc, #60]	@ (800976c <prvAddCurrentTaskToDelayedList+0x94>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	3304      	adds	r3, #4
 8009734:	4619      	mov	r1, r3
 8009736:	4610      	mov	r0, r2
 8009738:	f7fe fb91 	bl	8007e5e <vListInsert>
}
 800973c:	e010      	b.n	8009760 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800973e:	4b0e      	ldr	r3, [pc, #56]	@ (8009778 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	4b0a      	ldr	r3, [pc, #40]	@ (800976c <prvAddCurrentTaskToDelayedList+0x94>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	3304      	adds	r3, #4
 8009748:	4619      	mov	r1, r3
 800974a:	4610      	mov	r0, r2
 800974c:	f7fe fb87 	bl	8007e5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009750:	4b0a      	ldr	r3, [pc, #40]	@ (800977c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	68ba      	ldr	r2, [r7, #8]
 8009756:	429a      	cmp	r2, r3
 8009758:	d202      	bcs.n	8009760 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800975a:	4a08      	ldr	r2, [pc, #32]	@ (800977c <prvAddCurrentTaskToDelayedList+0xa4>)
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	6013      	str	r3, [r2, #0]
}
 8009760:	bf00      	nop
 8009762:	3710      	adds	r7, #16
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	200054b0 	.word	0x200054b0
 800976c:	20004fd8 	.word	0x20004fd8
 8009770:	20005498 	.word	0x20005498
 8009774:	20005468 	.word	0x20005468
 8009778:	20005464 	.word	0x20005464
 800977c:	200054cc 	.word	0x200054cc

08009780 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b08a      	sub	sp, #40	@ 0x28
 8009784:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009786:	2300      	movs	r3, #0
 8009788:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800978a:	f000 fb13 	bl	8009db4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800978e:	4b1d      	ldr	r3, [pc, #116]	@ (8009804 <xTimerCreateTimerTask+0x84>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d021      	beq.n	80097da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009796:	2300      	movs	r3, #0
 8009798:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800979a:	2300      	movs	r3, #0
 800979c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800979e:	1d3a      	adds	r2, r7, #4
 80097a0:	f107 0108 	add.w	r1, r7, #8
 80097a4:	f107 030c 	add.w	r3, r7, #12
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7fe faed 	bl	8007d88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80097ae:	6879      	ldr	r1, [r7, #4]
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	68fa      	ldr	r2, [r7, #12]
 80097b4:	9202      	str	r2, [sp, #8]
 80097b6:	9301      	str	r3, [sp, #4]
 80097b8:	2302      	movs	r3, #2
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	2300      	movs	r3, #0
 80097be:	460a      	mov	r2, r1
 80097c0:	4911      	ldr	r1, [pc, #68]	@ (8009808 <xTimerCreateTimerTask+0x88>)
 80097c2:	4812      	ldr	r0, [pc, #72]	@ (800980c <xTimerCreateTimerTask+0x8c>)
 80097c4:	f7ff f8a8 	bl	8008918 <xTaskCreateStatic>
 80097c8:	4603      	mov	r3, r0
 80097ca:	4a11      	ldr	r2, [pc, #68]	@ (8009810 <xTimerCreateTimerTask+0x90>)
 80097cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80097ce:	4b10      	ldr	r3, [pc, #64]	@ (8009810 <xTimerCreateTimerTask+0x90>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d001      	beq.n	80097da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80097d6:	2301      	movs	r3, #1
 80097d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d10b      	bne.n	80097f8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80097e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e4:	f383 8811 	msr	BASEPRI, r3
 80097e8:	f3bf 8f6f 	isb	sy
 80097ec:	f3bf 8f4f 	dsb	sy
 80097f0:	613b      	str	r3, [r7, #16]
}
 80097f2:	bf00      	nop
 80097f4:	bf00      	nop
 80097f6:	e7fd      	b.n	80097f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80097f8:	697b      	ldr	r3, [r7, #20]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3718      	adds	r7, #24
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	20005508 	.word	0x20005508
 8009808:	080186dc 	.word	0x080186dc
 800980c:	0800994d 	.word	0x0800994d
 8009810:	2000550c 	.word	0x2000550c

08009814 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b08a      	sub	sp, #40	@ 0x28
 8009818:	af00      	add	r7, sp, #0
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	60b9      	str	r1, [r7, #8]
 800981e:	607a      	str	r2, [r7, #4]
 8009820:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009822:	2300      	movs	r3, #0
 8009824:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d10b      	bne.n	8009844 <xTimerGenericCommand+0x30>
	__asm volatile
 800982c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009830:	f383 8811 	msr	BASEPRI, r3
 8009834:	f3bf 8f6f 	isb	sy
 8009838:	f3bf 8f4f 	dsb	sy
 800983c:	623b      	str	r3, [r7, #32]
}
 800983e:	bf00      	nop
 8009840:	bf00      	nop
 8009842:	e7fd      	b.n	8009840 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009844:	4b19      	ldr	r3, [pc, #100]	@ (80098ac <xTimerGenericCommand+0x98>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d02a      	beq.n	80098a2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	2b05      	cmp	r3, #5
 800985c:	dc18      	bgt.n	8009890 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800985e:	f7ff fead 	bl	80095bc <xTaskGetSchedulerState>
 8009862:	4603      	mov	r3, r0
 8009864:	2b02      	cmp	r3, #2
 8009866:	d109      	bne.n	800987c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009868:	4b10      	ldr	r3, [pc, #64]	@ (80098ac <xTimerGenericCommand+0x98>)
 800986a:	6818      	ldr	r0, [r3, #0]
 800986c:	f107 0110 	add.w	r1, r7, #16
 8009870:	2300      	movs	r3, #0
 8009872:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009874:	f7fe fc60 	bl	8008138 <xQueueGenericSend>
 8009878:	6278      	str	r0, [r7, #36]	@ 0x24
 800987a:	e012      	b.n	80098a2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800987c:	4b0b      	ldr	r3, [pc, #44]	@ (80098ac <xTimerGenericCommand+0x98>)
 800987e:	6818      	ldr	r0, [r3, #0]
 8009880:	f107 0110 	add.w	r1, r7, #16
 8009884:	2300      	movs	r3, #0
 8009886:	2200      	movs	r2, #0
 8009888:	f7fe fc56 	bl	8008138 <xQueueGenericSend>
 800988c:	6278      	str	r0, [r7, #36]	@ 0x24
 800988e:	e008      	b.n	80098a2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009890:	4b06      	ldr	r3, [pc, #24]	@ (80098ac <xTimerGenericCommand+0x98>)
 8009892:	6818      	ldr	r0, [r3, #0]
 8009894:	f107 0110 	add.w	r1, r7, #16
 8009898:	2300      	movs	r3, #0
 800989a:	683a      	ldr	r2, [r7, #0]
 800989c:	f7fe fd4e 	bl	800833c <xQueueGenericSendFromISR>
 80098a0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80098a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3728      	adds	r7, #40	@ 0x28
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	20005508 	.word	0x20005508

080098b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b088      	sub	sp, #32
 80098b4:	af02      	add	r7, sp, #8
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098ba:	4b23      	ldr	r3, [pc, #140]	@ (8009948 <prvProcessExpiredTimer+0x98>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	3304      	adds	r3, #4
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7fe fb01 	bl	8007ed0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098d4:	f003 0304 	and.w	r3, r3, #4
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d023      	beq.n	8009924 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	699a      	ldr	r2, [r3, #24]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	18d1      	adds	r1, r2, r3
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	683a      	ldr	r2, [r7, #0]
 80098e8:	6978      	ldr	r0, [r7, #20]
 80098ea:	f000 f8d5 	bl	8009a98 <prvInsertTimerInActiveList>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d020      	beq.n	8009936 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80098f4:	2300      	movs	r3, #0
 80098f6:	9300      	str	r3, [sp, #0]
 80098f8:	2300      	movs	r3, #0
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	2100      	movs	r1, #0
 80098fe:	6978      	ldr	r0, [r7, #20]
 8009900:	f7ff ff88 	bl	8009814 <xTimerGenericCommand>
 8009904:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d114      	bne.n	8009936 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800990c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009910:	f383 8811 	msr	BASEPRI, r3
 8009914:	f3bf 8f6f 	isb	sy
 8009918:	f3bf 8f4f 	dsb	sy
 800991c:	60fb      	str	r3, [r7, #12]
}
 800991e:	bf00      	nop
 8009920:	bf00      	nop
 8009922:	e7fd      	b.n	8009920 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800992a:	f023 0301 	bic.w	r3, r3, #1
 800992e:	b2da      	uxtb	r2, r3
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	6a1b      	ldr	r3, [r3, #32]
 800993a:	6978      	ldr	r0, [r7, #20]
 800993c:	4798      	blx	r3
}
 800993e:	bf00      	nop
 8009940:	3718      	adds	r7, #24
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	20005500 	.word	0x20005500

0800994c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009954:	f107 0308 	add.w	r3, r7, #8
 8009958:	4618      	mov	r0, r3
 800995a:	f000 f859 	bl	8009a10 <prvGetNextExpireTime>
 800995e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	4619      	mov	r1, r3
 8009964:	68f8      	ldr	r0, [r7, #12]
 8009966:	f000 f805 	bl	8009974 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800996a:	f000 f8d7 	bl	8009b1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800996e:	bf00      	nop
 8009970:	e7f0      	b.n	8009954 <prvTimerTask+0x8>
	...

08009974 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800997e:	f7ff fa0f 	bl	8008da0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009982:	f107 0308 	add.w	r3, r7, #8
 8009986:	4618      	mov	r0, r3
 8009988:	f000 f866 	bl	8009a58 <prvSampleTimeNow>
 800998c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d130      	bne.n	80099f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d10a      	bne.n	80099b0 <prvProcessTimerOrBlockTask+0x3c>
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d806      	bhi.n	80099b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80099a2:	f7ff fa0b 	bl	8008dbc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80099a6:	68f9      	ldr	r1, [r7, #12]
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f7ff ff81 	bl	80098b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80099ae:	e024      	b.n	80099fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d008      	beq.n	80099c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80099b6:	4b13      	ldr	r3, [pc, #76]	@ (8009a04 <prvProcessTimerOrBlockTask+0x90>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d101      	bne.n	80099c4 <prvProcessTimerOrBlockTask+0x50>
 80099c0:	2301      	movs	r3, #1
 80099c2:	e000      	b.n	80099c6 <prvProcessTimerOrBlockTask+0x52>
 80099c4:	2300      	movs	r3, #0
 80099c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80099c8:	4b0f      	ldr	r3, [pc, #60]	@ (8009a08 <prvProcessTimerOrBlockTask+0x94>)
 80099ca:	6818      	ldr	r0, [r3, #0]
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	1ad3      	subs	r3, r2, r3
 80099d2:	683a      	ldr	r2, [r7, #0]
 80099d4:	4619      	mov	r1, r3
 80099d6:	f7fe ff6b 	bl	80088b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80099da:	f7ff f9ef 	bl	8008dbc <xTaskResumeAll>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d10a      	bne.n	80099fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80099e4:	4b09      	ldr	r3, [pc, #36]	@ (8009a0c <prvProcessTimerOrBlockTask+0x98>)
 80099e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099ea:	601a      	str	r2, [r3, #0]
 80099ec:	f3bf 8f4f 	dsb	sy
 80099f0:	f3bf 8f6f 	isb	sy
}
 80099f4:	e001      	b.n	80099fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80099f6:	f7ff f9e1 	bl	8008dbc <xTaskResumeAll>
}
 80099fa:	bf00      	nop
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	20005504 	.word	0x20005504
 8009a08:	20005508 	.word	0x20005508
 8009a0c:	e000ed04 	.word	0xe000ed04

08009a10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009a10:	b480      	push	{r7}
 8009a12:	b085      	sub	sp, #20
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009a18:	4b0e      	ldr	r3, [pc, #56]	@ (8009a54 <prvGetNextExpireTime+0x44>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d101      	bne.n	8009a26 <prvGetNextExpireTime+0x16>
 8009a22:	2201      	movs	r2, #1
 8009a24:	e000      	b.n	8009a28 <prvGetNextExpireTime+0x18>
 8009a26:	2200      	movs	r2, #0
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d105      	bne.n	8009a40 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a34:	4b07      	ldr	r3, [pc, #28]	@ (8009a54 <prvGetNextExpireTime+0x44>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	60fb      	str	r3, [r7, #12]
 8009a3e:	e001      	b.n	8009a44 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009a40:	2300      	movs	r3, #0
 8009a42:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009a44:	68fb      	ldr	r3, [r7, #12]
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3714      	adds	r7, #20
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr
 8009a52:	bf00      	nop
 8009a54:	20005500 	.word	0x20005500

08009a58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009a60:	f7ff fa4a 	bl	8008ef8 <xTaskGetTickCount>
 8009a64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009a66:	4b0b      	ldr	r3, [pc, #44]	@ (8009a94 <prvSampleTimeNow+0x3c>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d205      	bcs.n	8009a7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009a70:	f000 f93a 	bl	8009ce8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2201      	movs	r2, #1
 8009a78:	601a      	str	r2, [r3, #0]
 8009a7a:	e002      	b.n	8009a82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009a82:	4a04      	ldr	r2, [pc, #16]	@ (8009a94 <prvSampleTimeNow+0x3c>)
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009a88:	68fb      	ldr	r3, [r7, #12]
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	20005510 	.word	0x20005510

08009a98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b086      	sub	sp, #24
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	607a      	str	r2, [r7, #4]
 8009aa4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	68ba      	ldr	r2, [r7, #8]
 8009aae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	68fa      	ldr	r2, [r7, #12]
 8009ab4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009ab6:	68ba      	ldr	r2, [r7, #8]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d812      	bhi.n	8009ae4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	1ad2      	subs	r2, r2, r3
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	699b      	ldr	r3, [r3, #24]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d302      	bcc.n	8009ad2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009acc:	2301      	movs	r3, #1
 8009ace:	617b      	str	r3, [r7, #20]
 8009ad0:	e01b      	b.n	8009b0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009ad2:	4b10      	ldr	r3, [pc, #64]	@ (8009b14 <prvInsertTimerInActiveList+0x7c>)
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	3304      	adds	r3, #4
 8009ada:	4619      	mov	r1, r3
 8009adc:	4610      	mov	r0, r2
 8009ade:	f7fe f9be 	bl	8007e5e <vListInsert>
 8009ae2:	e012      	b.n	8009b0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d206      	bcs.n	8009afa <prvInsertTimerInActiveList+0x62>
 8009aec:	68ba      	ldr	r2, [r7, #8]
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d302      	bcc.n	8009afa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009af4:	2301      	movs	r3, #1
 8009af6:	617b      	str	r3, [r7, #20]
 8009af8:	e007      	b.n	8009b0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009afa:	4b07      	ldr	r3, [pc, #28]	@ (8009b18 <prvInsertTimerInActiveList+0x80>)
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	3304      	adds	r3, #4
 8009b02:	4619      	mov	r1, r3
 8009b04:	4610      	mov	r0, r2
 8009b06:	f7fe f9aa 	bl	8007e5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009b0a:	697b      	ldr	r3, [r7, #20]
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3718      	adds	r7, #24
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	20005504 	.word	0x20005504
 8009b18:	20005500 	.word	0x20005500

08009b1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b08e      	sub	sp, #56	@ 0x38
 8009b20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b22:	e0ce      	b.n	8009cc2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	da19      	bge.n	8009b5e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009b2a:	1d3b      	adds	r3, r7, #4
 8009b2c:	3304      	adds	r3, #4
 8009b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d10b      	bne.n	8009b4e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b3a:	f383 8811 	msr	BASEPRI, r3
 8009b3e:	f3bf 8f6f 	isb	sy
 8009b42:	f3bf 8f4f 	dsb	sy
 8009b46:	61fb      	str	r3, [r7, #28]
}
 8009b48:	bf00      	nop
 8009b4a:	bf00      	nop
 8009b4c:	e7fd      	b.n	8009b4a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b54:	6850      	ldr	r0, [r2, #4]
 8009b56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b58:	6892      	ldr	r2, [r2, #8]
 8009b5a:	4611      	mov	r1, r2
 8009b5c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f2c0 80ae 	blt.w	8009cc2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b6c:	695b      	ldr	r3, [r3, #20]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d004      	beq.n	8009b7c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b74:	3304      	adds	r3, #4
 8009b76:	4618      	mov	r0, r3
 8009b78:	f7fe f9aa 	bl	8007ed0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b7c:	463b      	mov	r3, r7
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7ff ff6a 	bl	8009a58 <prvSampleTimeNow>
 8009b84:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2b09      	cmp	r3, #9
 8009b8a:	f200 8097 	bhi.w	8009cbc <prvProcessReceivedCommands+0x1a0>
 8009b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8009b94 <prvProcessReceivedCommands+0x78>)
 8009b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b94:	08009bbd 	.word	0x08009bbd
 8009b98:	08009bbd 	.word	0x08009bbd
 8009b9c:	08009bbd 	.word	0x08009bbd
 8009ba0:	08009c33 	.word	0x08009c33
 8009ba4:	08009c47 	.word	0x08009c47
 8009ba8:	08009c93 	.word	0x08009c93
 8009bac:	08009bbd 	.word	0x08009bbd
 8009bb0:	08009bbd 	.word	0x08009bbd
 8009bb4:	08009c33 	.word	0x08009c33
 8009bb8:	08009c47 	.word	0x08009c47
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bbe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bc2:	f043 0301 	orr.w	r3, r3, #1
 8009bc6:	b2da      	uxtb	r2, r3
 8009bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009bce:	68ba      	ldr	r2, [r7, #8]
 8009bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd2:	699b      	ldr	r3, [r3, #24]
 8009bd4:	18d1      	adds	r1, r2, r3
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bdc:	f7ff ff5c 	bl	8009a98 <prvInsertTimerInActiveList>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d06c      	beq.n	8009cc0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be8:	6a1b      	ldr	r3, [r3, #32]
 8009bea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bf4:	f003 0304 	and.w	r3, r3, #4
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d061      	beq.n	8009cc0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009bfc:	68ba      	ldr	r2, [r7, #8]
 8009bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c00:	699b      	ldr	r3, [r3, #24]
 8009c02:	441a      	add	r2, r3
 8009c04:	2300      	movs	r3, #0
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	2300      	movs	r3, #0
 8009c0a:	2100      	movs	r1, #0
 8009c0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c0e:	f7ff fe01 	bl	8009814 <xTimerGenericCommand>
 8009c12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009c14:	6a3b      	ldr	r3, [r7, #32]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d152      	bne.n	8009cc0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c1e:	f383 8811 	msr	BASEPRI, r3
 8009c22:	f3bf 8f6f 	isb	sy
 8009c26:	f3bf 8f4f 	dsb	sy
 8009c2a:	61bb      	str	r3, [r7, #24]
}
 8009c2c:	bf00      	nop
 8009c2e:	bf00      	nop
 8009c30:	e7fd      	b.n	8009c2e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c38:	f023 0301 	bic.w	r3, r3, #1
 8009c3c:	b2da      	uxtb	r2, r3
 8009c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c40:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009c44:	e03d      	b.n	8009cc2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c4c:	f043 0301 	orr.w	r3, r3, #1
 8009c50:	b2da      	uxtb	r2, r3
 8009c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c54:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009c58:	68ba      	ldr	r2, [r7, #8]
 8009c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c5c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c60:	699b      	ldr	r3, [r3, #24]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d10b      	bne.n	8009c7e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c6a:	f383 8811 	msr	BASEPRI, r3
 8009c6e:	f3bf 8f6f 	isb	sy
 8009c72:	f3bf 8f4f 	dsb	sy
 8009c76:	617b      	str	r3, [r7, #20]
}
 8009c78:	bf00      	nop
 8009c7a:	bf00      	nop
 8009c7c:	e7fd      	b.n	8009c7a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c80:	699a      	ldr	r2, [r3, #24]
 8009c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c84:	18d1      	adds	r1, r2, r3
 8009c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c8c:	f7ff ff04 	bl	8009a98 <prvInsertTimerInActiveList>
					break;
 8009c90:	e017      	b.n	8009cc2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c98:	f003 0302 	and.w	r3, r3, #2
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d103      	bne.n	8009ca8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009ca0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ca2:	f000 fbe9 	bl	800a478 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009ca6:	e00c      	b.n	8009cc2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009caa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009cae:	f023 0301 	bic.w	r3, r3, #1
 8009cb2:	b2da      	uxtb	r2, r3
 8009cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009cba:	e002      	b.n	8009cc2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009cbc:	bf00      	nop
 8009cbe:	e000      	b.n	8009cc2 <prvProcessReceivedCommands+0x1a6>
					break;
 8009cc0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009cc2:	4b08      	ldr	r3, [pc, #32]	@ (8009ce4 <prvProcessReceivedCommands+0x1c8>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	1d39      	adds	r1, r7, #4
 8009cc8:	2200      	movs	r2, #0
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f7fe fbd4 	bl	8008478 <xQueueReceive>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f47f af26 	bne.w	8009b24 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009cd8:	bf00      	nop
 8009cda:	bf00      	nop
 8009cdc:	3730      	adds	r7, #48	@ 0x30
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	20005508 	.word	0x20005508

08009ce8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b088      	sub	sp, #32
 8009cec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009cee:	e049      	b.n	8009d84 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009cf0:	4b2e      	ldr	r3, [pc, #184]	@ (8009dac <prvSwitchTimerLists+0xc4>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8009dac <prvSwitchTimerLists+0xc4>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	3304      	adds	r3, #4
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7fe f8e1 	bl	8007ed0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	6a1b      	ldr	r3, [r3, #32]
 8009d12:	68f8      	ldr	r0, [r7, #12]
 8009d14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d1c:	f003 0304 	and.w	r3, r3, #4
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d02f      	beq.n	8009d84 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	699b      	ldr	r3, [r3, #24]
 8009d28:	693a      	ldr	r2, [r7, #16]
 8009d2a:	4413      	add	r3, r2
 8009d2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009d2e:	68ba      	ldr	r2, [r7, #8]
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d90e      	bls.n	8009d54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	68ba      	ldr	r2, [r7, #8]
 8009d3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d42:	4b1a      	ldr	r3, [pc, #104]	@ (8009dac <prvSwitchTimerLists+0xc4>)
 8009d44:	681a      	ldr	r2, [r3, #0]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	3304      	adds	r3, #4
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	4610      	mov	r0, r2
 8009d4e:	f7fe f886 	bl	8007e5e <vListInsert>
 8009d52:	e017      	b.n	8009d84 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d54:	2300      	movs	r3, #0
 8009d56:	9300      	str	r3, [sp, #0]
 8009d58:	2300      	movs	r3, #0
 8009d5a:	693a      	ldr	r2, [r7, #16]
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	68f8      	ldr	r0, [r7, #12]
 8009d60:	f7ff fd58 	bl	8009814 <xTimerGenericCommand>
 8009d64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d10b      	bne.n	8009d84 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d70:	f383 8811 	msr	BASEPRI, r3
 8009d74:	f3bf 8f6f 	isb	sy
 8009d78:	f3bf 8f4f 	dsb	sy
 8009d7c:	603b      	str	r3, [r7, #0]
}
 8009d7e:	bf00      	nop
 8009d80:	bf00      	nop
 8009d82:	e7fd      	b.n	8009d80 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d84:	4b09      	ldr	r3, [pc, #36]	@ (8009dac <prvSwitchTimerLists+0xc4>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d1b0      	bne.n	8009cf0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009d8e:	4b07      	ldr	r3, [pc, #28]	@ (8009dac <prvSwitchTimerLists+0xc4>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009d94:	4b06      	ldr	r3, [pc, #24]	@ (8009db0 <prvSwitchTimerLists+0xc8>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a04      	ldr	r2, [pc, #16]	@ (8009dac <prvSwitchTimerLists+0xc4>)
 8009d9a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009d9c:	4a04      	ldr	r2, [pc, #16]	@ (8009db0 <prvSwitchTimerLists+0xc8>)
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	6013      	str	r3, [r2, #0]
}
 8009da2:	bf00      	nop
 8009da4:	3718      	adds	r7, #24
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop
 8009dac:	20005500 	.word	0x20005500
 8009db0:	20005504 	.word	0x20005504

08009db4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009dba:	f000 f96d 	bl	800a098 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009dbe:	4b15      	ldr	r3, [pc, #84]	@ (8009e14 <prvCheckForValidListAndQueue+0x60>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d120      	bne.n	8009e08 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009dc6:	4814      	ldr	r0, [pc, #80]	@ (8009e18 <prvCheckForValidListAndQueue+0x64>)
 8009dc8:	f7fd fff8 	bl	8007dbc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009dcc:	4813      	ldr	r0, [pc, #76]	@ (8009e1c <prvCheckForValidListAndQueue+0x68>)
 8009dce:	f7fd fff5 	bl	8007dbc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009dd2:	4b13      	ldr	r3, [pc, #76]	@ (8009e20 <prvCheckForValidListAndQueue+0x6c>)
 8009dd4:	4a10      	ldr	r2, [pc, #64]	@ (8009e18 <prvCheckForValidListAndQueue+0x64>)
 8009dd6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009dd8:	4b12      	ldr	r3, [pc, #72]	@ (8009e24 <prvCheckForValidListAndQueue+0x70>)
 8009dda:	4a10      	ldr	r2, [pc, #64]	@ (8009e1c <prvCheckForValidListAndQueue+0x68>)
 8009ddc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009dde:	2300      	movs	r3, #0
 8009de0:	9300      	str	r3, [sp, #0]
 8009de2:	4b11      	ldr	r3, [pc, #68]	@ (8009e28 <prvCheckForValidListAndQueue+0x74>)
 8009de4:	4a11      	ldr	r2, [pc, #68]	@ (8009e2c <prvCheckForValidListAndQueue+0x78>)
 8009de6:	2110      	movs	r1, #16
 8009de8:	200a      	movs	r0, #10
 8009dea:	f7fe f905 	bl	8007ff8 <xQueueGenericCreateStatic>
 8009dee:	4603      	mov	r3, r0
 8009df0:	4a08      	ldr	r2, [pc, #32]	@ (8009e14 <prvCheckForValidListAndQueue+0x60>)
 8009df2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009df4:	4b07      	ldr	r3, [pc, #28]	@ (8009e14 <prvCheckForValidListAndQueue+0x60>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d005      	beq.n	8009e08 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009dfc:	4b05      	ldr	r3, [pc, #20]	@ (8009e14 <prvCheckForValidListAndQueue+0x60>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	490b      	ldr	r1, [pc, #44]	@ (8009e30 <prvCheckForValidListAndQueue+0x7c>)
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7fe fd2a 	bl	800885c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e08:	f000 f978 	bl	800a0fc <vPortExitCritical>
}
 8009e0c:	bf00      	nop
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	20005508 	.word	0x20005508
 8009e18:	200054d8 	.word	0x200054d8
 8009e1c:	200054ec 	.word	0x200054ec
 8009e20:	20005500 	.word	0x20005500
 8009e24:	20005504 	.word	0x20005504
 8009e28:	200055b4 	.word	0x200055b4
 8009e2c:	20005514 	.word	0x20005514
 8009e30:	080186e4 	.word	0x080186e4

08009e34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009e34:	b480      	push	{r7}
 8009e36:	b085      	sub	sp, #20
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	3b04      	subs	r3, #4
 8009e44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009e4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	3b04      	subs	r3, #4
 8009e52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	f023 0201 	bic.w	r2, r3, #1
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	3b04      	subs	r3, #4
 8009e62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009e64:	4a0c      	ldr	r2, [pc, #48]	@ (8009e98 <pxPortInitialiseStack+0x64>)
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	3b14      	subs	r3, #20
 8009e6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	3b04      	subs	r3, #4
 8009e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f06f 0202 	mvn.w	r2, #2
 8009e82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	3b20      	subs	r3, #32
 8009e88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3714      	adds	r7, #20
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr
 8009e98:	08009e9d 	.word	0x08009e9d

08009e9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b085      	sub	sp, #20
 8009ea0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009ea6:	4b13      	ldr	r3, [pc, #76]	@ (8009ef4 <prvTaskExitError+0x58>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009eae:	d00b      	beq.n	8009ec8 <prvTaskExitError+0x2c>
	__asm volatile
 8009eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eb4:	f383 8811 	msr	BASEPRI, r3
 8009eb8:	f3bf 8f6f 	isb	sy
 8009ebc:	f3bf 8f4f 	dsb	sy
 8009ec0:	60fb      	str	r3, [r7, #12]
}
 8009ec2:	bf00      	nop
 8009ec4:	bf00      	nop
 8009ec6:	e7fd      	b.n	8009ec4 <prvTaskExitError+0x28>
	__asm volatile
 8009ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ecc:	f383 8811 	msr	BASEPRI, r3
 8009ed0:	f3bf 8f6f 	isb	sy
 8009ed4:	f3bf 8f4f 	dsb	sy
 8009ed8:	60bb      	str	r3, [r7, #8]
}
 8009eda:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009edc:	bf00      	nop
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d0fc      	beq.n	8009ede <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009ee4:	bf00      	nop
 8009ee6:	bf00      	nop
 8009ee8:	3714      	adds	r7, #20
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	20000010 	.word	0x20000010
	...

08009f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009f00:	4b07      	ldr	r3, [pc, #28]	@ (8009f20 <pxCurrentTCBConst2>)
 8009f02:	6819      	ldr	r1, [r3, #0]
 8009f04:	6808      	ldr	r0, [r1, #0]
 8009f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f0a:	f380 8809 	msr	PSP, r0
 8009f0e:	f3bf 8f6f 	isb	sy
 8009f12:	f04f 0000 	mov.w	r0, #0
 8009f16:	f380 8811 	msr	BASEPRI, r0
 8009f1a:	4770      	bx	lr
 8009f1c:	f3af 8000 	nop.w

08009f20 <pxCurrentTCBConst2>:
 8009f20:	20004fd8 	.word	0x20004fd8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009f24:	bf00      	nop
 8009f26:	bf00      	nop

08009f28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009f28:	4808      	ldr	r0, [pc, #32]	@ (8009f4c <prvPortStartFirstTask+0x24>)
 8009f2a:	6800      	ldr	r0, [r0, #0]
 8009f2c:	6800      	ldr	r0, [r0, #0]
 8009f2e:	f380 8808 	msr	MSP, r0
 8009f32:	f04f 0000 	mov.w	r0, #0
 8009f36:	f380 8814 	msr	CONTROL, r0
 8009f3a:	b662      	cpsie	i
 8009f3c:	b661      	cpsie	f
 8009f3e:	f3bf 8f4f 	dsb	sy
 8009f42:	f3bf 8f6f 	isb	sy
 8009f46:	df00      	svc	0
 8009f48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009f4a:	bf00      	nop
 8009f4c:	e000ed08 	.word	0xe000ed08

08009f50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b086      	sub	sp, #24
 8009f54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009f56:	4b47      	ldr	r3, [pc, #284]	@ (800a074 <xPortStartScheduler+0x124>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a47      	ldr	r2, [pc, #284]	@ (800a078 <xPortStartScheduler+0x128>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d10b      	bne.n	8009f78 <xPortStartScheduler+0x28>
	__asm volatile
 8009f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f64:	f383 8811 	msr	BASEPRI, r3
 8009f68:	f3bf 8f6f 	isb	sy
 8009f6c:	f3bf 8f4f 	dsb	sy
 8009f70:	613b      	str	r3, [r7, #16]
}
 8009f72:	bf00      	nop
 8009f74:	bf00      	nop
 8009f76:	e7fd      	b.n	8009f74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009f78:	4b3e      	ldr	r3, [pc, #248]	@ (800a074 <xPortStartScheduler+0x124>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4a3f      	ldr	r2, [pc, #252]	@ (800a07c <xPortStartScheduler+0x12c>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d10b      	bne.n	8009f9a <xPortStartScheduler+0x4a>
	__asm volatile
 8009f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f86:	f383 8811 	msr	BASEPRI, r3
 8009f8a:	f3bf 8f6f 	isb	sy
 8009f8e:	f3bf 8f4f 	dsb	sy
 8009f92:	60fb      	str	r3, [r7, #12]
}
 8009f94:	bf00      	nop
 8009f96:	bf00      	nop
 8009f98:	e7fd      	b.n	8009f96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009f9a:	4b39      	ldr	r3, [pc, #228]	@ (800a080 <xPortStartScheduler+0x130>)
 8009f9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	22ff      	movs	r2, #255	@ 0xff
 8009faa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	b2db      	uxtb	r3, r3
 8009fb2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009fb4:	78fb      	ldrb	r3, [r7, #3]
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009fbc:	b2da      	uxtb	r2, r3
 8009fbe:	4b31      	ldr	r3, [pc, #196]	@ (800a084 <xPortStartScheduler+0x134>)
 8009fc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009fc2:	4b31      	ldr	r3, [pc, #196]	@ (800a088 <xPortStartScheduler+0x138>)
 8009fc4:	2207      	movs	r2, #7
 8009fc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009fc8:	e009      	b.n	8009fde <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009fca:	4b2f      	ldr	r3, [pc, #188]	@ (800a088 <xPortStartScheduler+0x138>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	4a2d      	ldr	r2, [pc, #180]	@ (800a088 <xPortStartScheduler+0x138>)
 8009fd2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009fd4:	78fb      	ldrb	r3, [r7, #3]
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	005b      	lsls	r3, r3, #1
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009fde:	78fb      	ldrb	r3, [r7, #3]
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fe6:	2b80      	cmp	r3, #128	@ 0x80
 8009fe8:	d0ef      	beq.n	8009fca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009fea:	4b27      	ldr	r3, [pc, #156]	@ (800a088 <xPortStartScheduler+0x138>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f1c3 0307 	rsb	r3, r3, #7
 8009ff2:	2b04      	cmp	r3, #4
 8009ff4:	d00b      	beq.n	800a00e <xPortStartScheduler+0xbe>
	__asm volatile
 8009ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ffa:	f383 8811 	msr	BASEPRI, r3
 8009ffe:	f3bf 8f6f 	isb	sy
 800a002:	f3bf 8f4f 	dsb	sy
 800a006:	60bb      	str	r3, [r7, #8]
}
 800a008:	bf00      	nop
 800a00a:	bf00      	nop
 800a00c:	e7fd      	b.n	800a00a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a00e:	4b1e      	ldr	r3, [pc, #120]	@ (800a088 <xPortStartScheduler+0x138>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	021b      	lsls	r3, r3, #8
 800a014:	4a1c      	ldr	r2, [pc, #112]	@ (800a088 <xPortStartScheduler+0x138>)
 800a016:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a018:	4b1b      	ldr	r3, [pc, #108]	@ (800a088 <xPortStartScheduler+0x138>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a020:	4a19      	ldr	r2, [pc, #100]	@ (800a088 <xPortStartScheduler+0x138>)
 800a022:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	b2da      	uxtb	r2, r3
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a02c:	4b17      	ldr	r3, [pc, #92]	@ (800a08c <xPortStartScheduler+0x13c>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a16      	ldr	r2, [pc, #88]	@ (800a08c <xPortStartScheduler+0x13c>)
 800a032:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a036:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a038:	4b14      	ldr	r3, [pc, #80]	@ (800a08c <xPortStartScheduler+0x13c>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a13      	ldr	r2, [pc, #76]	@ (800a08c <xPortStartScheduler+0x13c>)
 800a03e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a042:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a044:	f000 f8da 	bl	800a1fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a048:	4b11      	ldr	r3, [pc, #68]	@ (800a090 <xPortStartScheduler+0x140>)
 800a04a:	2200      	movs	r2, #0
 800a04c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a04e:	f000 f8f9 	bl	800a244 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a052:	4b10      	ldr	r3, [pc, #64]	@ (800a094 <xPortStartScheduler+0x144>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4a0f      	ldr	r2, [pc, #60]	@ (800a094 <xPortStartScheduler+0x144>)
 800a058:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a05c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a05e:	f7ff ff63 	bl	8009f28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a062:	f7ff f813 	bl	800908c <vTaskSwitchContext>
	prvTaskExitError();
 800a066:	f7ff ff19 	bl	8009e9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a06a:	2300      	movs	r3, #0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3718      	adds	r7, #24
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}
 800a074:	e000ed00 	.word	0xe000ed00
 800a078:	410fc271 	.word	0x410fc271
 800a07c:	410fc270 	.word	0x410fc270
 800a080:	e000e400 	.word	0xe000e400
 800a084:	20005604 	.word	0x20005604
 800a088:	20005608 	.word	0x20005608
 800a08c:	e000ed20 	.word	0xe000ed20
 800a090:	20000010 	.word	0x20000010
 800a094:	e000ef34 	.word	0xe000ef34

0800a098 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
	__asm volatile
 800a09e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0a2:	f383 8811 	msr	BASEPRI, r3
 800a0a6:	f3bf 8f6f 	isb	sy
 800a0aa:	f3bf 8f4f 	dsb	sy
 800a0ae:	607b      	str	r3, [r7, #4]
}
 800a0b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a0b2:	4b10      	ldr	r3, [pc, #64]	@ (800a0f4 <vPortEnterCritical+0x5c>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	4a0e      	ldr	r2, [pc, #56]	@ (800a0f4 <vPortEnterCritical+0x5c>)
 800a0ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a0bc:	4b0d      	ldr	r3, [pc, #52]	@ (800a0f4 <vPortEnterCritical+0x5c>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d110      	bne.n	800a0e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a0c4:	4b0c      	ldr	r3, [pc, #48]	@ (800a0f8 <vPortEnterCritical+0x60>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d00b      	beq.n	800a0e6 <vPortEnterCritical+0x4e>
	__asm volatile
 800a0ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0d2:	f383 8811 	msr	BASEPRI, r3
 800a0d6:	f3bf 8f6f 	isb	sy
 800a0da:	f3bf 8f4f 	dsb	sy
 800a0de:	603b      	str	r3, [r7, #0]
}
 800a0e0:	bf00      	nop
 800a0e2:	bf00      	nop
 800a0e4:	e7fd      	b.n	800a0e2 <vPortEnterCritical+0x4a>
	}
}
 800a0e6:	bf00      	nop
 800a0e8:	370c      	adds	r7, #12
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr
 800a0f2:	bf00      	nop
 800a0f4:	20000010 	.word	0x20000010
 800a0f8:	e000ed04 	.word	0xe000ed04

0800a0fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a102:	4b12      	ldr	r3, [pc, #72]	@ (800a14c <vPortExitCritical+0x50>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d10b      	bne.n	800a122 <vPortExitCritical+0x26>
	__asm volatile
 800a10a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a10e:	f383 8811 	msr	BASEPRI, r3
 800a112:	f3bf 8f6f 	isb	sy
 800a116:	f3bf 8f4f 	dsb	sy
 800a11a:	607b      	str	r3, [r7, #4]
}
 800a11c:	bf00      	nop
 800a11e:	bf00      	nop
 800a120:	e7fd      	b.n	800a11e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a122:	4b0a      	ldr	r3, [pc, #40]	@ (800a14c <vPortExitCritical+0x50>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	3b01      	subs	r3, #1
 800a128:	4a08      	ldr	r2, [pc, #32]	@ (800a14c <vPortExitCritical+0x50>)
 800a12a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a12c:	4b07      	ldr	r3, [pc, #28]	@ (800a14c <vPortExitCritical+0x50>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d105      	bne.n	800a140 <vPortExitCritical+0x44>
 800a134:	2300      	movs	r3, #0
 800a136:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	f383 8811 	msr	BASEPRI, r3
}
 800a13e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a140:	bf00      	nop
 800a142:	370c      	adds	r7, #12
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr
 800a14c:	20000010 	.word	0x20000010

0800a150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a150:	f3ef 8009 	mrs	r0, PSP
 800a154:	f3bf 8f6f 	isb	sy
 800a158:	4b15      	ldr	r3, [pc, #84]	@ (800a1b0 <pxCurrentTCBConst>)
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	f01e 0f10 	tst.w	lr, #16
 800a160:	bf08      	it	eq
 800a162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a16a:	6010      	str	r0, [r2, #0]
 800a16c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a170:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a174:	f380 8811 	msr	BASEPRI, r0
 800a178:	f3bf 8f4f 	dsb	sy
 800a17c:	f3bf 8f6f 	isb	sy
 800a180:	f7fe ff84 	bl	800908c <vTaskSwitchContext>
 800a184:	f04f 0000 	mov.w	r0, #0
 800a188:	f380 8811 	msr	BASEPRI, r0
 800a18c:	bc09      	pop	{r0, r3}
 800a18e:	6819      	ldr	r1, [r3, #0]
 800a190:	6808      	ldr	r0, [r1, #0]
 800a192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a196:	f01e 0f10 	tst.w	lr, #16
 800a19a:	bf08      	it	eq
 800a19c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a1a0:	f380 8809 	msr	PSP, r0
 800a1a4:	f3bf 8f6f 	isb	sy
 800a1a8:	4770      	bx	lr
 800a1aa:	bf00      	nop
 800a1ac:	f3af 8000 	nop.w

0800a1b0 <pxCurrentTCBConst>:
 800a1b0:	20004fd8 	.word	0x20004fd8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a1b4:	bf00      	nop
 800a1b6:	bf00      	nop

0800a1b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a1be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1c2:	f383 8811 	msr	BASEPRI, r3
 800a1c6:	f3bf 8f6f 	isb	sy
 800a1ca:	f3bf 8f4f 	dsb	sy
 800a1ce:	607b      	str	r3, [r7, #4]
}
 800a1d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a1d2:	f7fe fea1 	bl	8008f18 <xTaskIncrementTick>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d003      	beq.n	800a1e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a1dc:	4b06      	ldr	r3, [pc, #24]	@ (800a1f8 <xPortSysTickHandler+0x40>)
 800a1de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1e2:	601a      	str	r2, [r3, #0]
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	f383 8811 	msr	BASEPRI, r3
}
 800a1ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a1f0:	bf00      	nop
 800a1f2:	3708      	adds	r7, #8
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}
 800a1f8:	e000ed04 	.word	0xe000ed04

0800a1fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a200:	4b0b      	ldr	r3, [pc, #44]	@ (800a230 <vPortSetupTimerInterrupt+0x34>)
 800a202:	2200      	movs	r2, #0
 800a204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a206:	4b0b      	ldr	r3, [pc, #44]	@ (800a234 <vPortSetupTimerInterrupt+0x38>)
 800a208:	2200      	movs	r2, #0
 800a20a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a20c:	4b0a      	ldr	r3, [pc, #40]	@ (800a238 <vPortSetupTimerInterrupt+0x3c>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a0a      	ldr	r2, [pc, #40]	@ (800a23c <vPortSetupTimerInterrupt+0x40>)
 800a212:	fba2 2303 	umull	r2, r3, r2, r3
 800a216:	099b      	lsrs	r3, r3, #6
 800a218:	4a09      	ldr	r2, [pc, #36]	@ (800a240 <vPortSetupTimerInterrupt+0x44>)
 800a21a:	3b01      	subs	r3, #1
 800a21c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a21e:	4b04      	ldr	r3, [pc, #16]	@ (800a230 <vPortSetupTimerInterrupt+0x34>)
 800a220:	2207      	movs	r2, #7
 800a222:	601a      	str	r2, [r3, #0]
}
 800a224:	bf00      	nop
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr
 800a22e:	bf00      	nop
 800a230:	e000e010 	.word	0xe000e010
 800a234:	e000e018 	.word	0xe000e018
 800a238:	20000004 	.word	0x20000004
 800a23c:	10624dd3 	.word	0x10624dd3
 800a240:	e000e014 	.word	0xe000e014

0800a244 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a244:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a254 <vPortEnableVFP+0x10>
 800a248:	6801      	ldr	r1, [r0, #0]
 800a24a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a24e:	6001      	str	r1, [r0, #0]
 800a250:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a252:	bf00      	nop
 800a254:	e000ed88 	.word	0xe000ed88

0800a258 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a258:	b480      	push	{r7}
 800a25a:	b085      	sub	sp, #20
 800a25c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a25e:	f3ef 8305 	mrs	r3, IPSR
 800a262:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2b0f      	cmp	r3, #15
 800a268:	d915      	bls.n	800a296 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a26a:	4a18      	ldr	r2, [pc, #96]	@ (800a2cc <vPortValidateInterruptPriority+0x74>)
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	4413      	add	r3, r2
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a274:	4b16      	ldr	r3, [pc, #88]	@ (800a2d0 <vPortValidateInterruptPriority+0x78>)
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	7afa      	ldrb	r2, [r7, #11]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d20b      	bcs.n	800a296 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a27e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a282:	f383 8811 	msr	BASEPRI, r3
 800a286:	f3bf 8f6f 	isb	sy
 800a28a:	f3bf 8f4f 	dsb	sy
 800a28e:	607b      	str	r3, [r7, #4]
}
 800a290:	bf00      	nop
 800a292:	bf00      	nop
 800a294:	e7fd      	b.n	800a292 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a296:	4b0f      	ldr	r3, [pc, #60]	@ (800a2d4 <vPortValidateInterruptPriority+0x7c>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a29e:	4b0e      	ldr	r3, [pc, #56]	@ (800a2d8 <vPortValidateInterruptPriority+0x80>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d90b      	bls.n	800a2be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a2a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2aa:	f383 8811 	msr	BASEPRI, r3
 800a2ae:	f3bf 8f6f 	isb	sy
 800a2b2:	f3bf 8f4f 	dsb	sy
 800a2b6:	603b      	str	r3, [r7, #0]
}
 800a2b8:	bf00      	nop
 800a2ba:	bf00      	nop
 800a2bc:	e7fd      	b.n	800a2ba <vPortValidateInterruptPriority+0x62>
	}
 800a2be:	bf00      	nop
 800a2c0:	3714      	adds	r7, #20
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr
 800a2ca:	bf00      	nop
 800a2cc:	e000e3f0 	.word	0xe000e3f0
 800a2d0:	20005604 	.word	0x20005604
 800a2d4:	e000ed0c 	.word	0xe000ed0c
 800a2d8:	20005608 	.word	0x20005608

0800a2dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b08a      	sub	sp, #40	@ 0x28
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a2e8:	f7fe fd5a 	bl	8008da0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a2ec:	4b5c      	ldr	r3, [pc, #368]	@ (800a460 <pvPortMalloc+0x184>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d101      	bne.n	800a2f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a2f4:	f000 f924 	bl	800a540 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a2f8:	4b5a      	ldr	r3, [pc, #360]	@ (800a464 <pvPortMalloc+0x188>)
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	4013      	ands	r3, r2
 800a300:	2b00      	cmp	r3, #0
 800a302:	f040 8095 	bne.w	800a430 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d01e      	beq.n	800a34a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a30c:	2208      	movs	r2, #8
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	4413      	add	r3, r2
 800a312:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f003 0307 	and.w	r3, r3, #7
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d015      	beq.n	800a34a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f023 0307 	bic.w	r3, r3, #7
 800a324:	3308      	adds	r3, #8
 800a326:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f003 0307 	and.w	r3, r3, #7
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d00b      	beq.n	800a34a <pvPortMalloc+0x6e>
	__asm volatile
 800a332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a336:	f383 8811 	msr	BASEPRI, r3
 800a33a:	f3bf 8f6f 	isb	sy
 800a33e:	f3bf 8f4f 	dsb	sy
 800a342:	617b      	str	r3, [r7, #20]
}
 800a344:	bf00      	nop
 800a346:	bf00      	nop
 800a348:	e7fd      	b.n	800a346 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d06f      	beq.n	800a430 <pvPortMalloc+0x154>
 800a350:	4b45      	ldr	r3, [pc, #276]	@ (800a468 <pvPortMalloc+0x18c>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	429a      	cmp	r2, r3
 800a358:	d86a      	bhi.n	800a430 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a35a:	4b44      	ldr	r3, [pc, #272]	@ (800a46c <pvPortMalloc+0x190>)
 800a35c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a35e:	4b43      	ldr	r3, [pc, #268]	@ (800a46c <pvPortMalloc+0x190>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a364:	e004      	b.n	800a370 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a368:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	429a      	cmp	r2, r3
 800a378:	d903      	bls.n	800a382 <pvPortMalloc+0xa6>
 800a37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d1f1      	bne.n	800a366 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a382:	4b37      	ldr	r3, [pc, #220]	@ (800a460 <pvPortMalloc+0x184>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a388:	429a      	cmp	r2, r3
 800a38a:	d051      	beq.n	800a430 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a38c:	6a3b      	ldr	r3, [r7, #32]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2208      	movs	r2, #8
 800a392:	4413      	add	r3, r2
 800a394:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	6a3b      	ldr	r3, [r7, #32]
 800a39c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a0:	685a      	ldr	r2, [r3, #4]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	1ad2      	subs	r2, r2, r3
 800a3a6:	2308      	movs	r3, #8
 800a3a8:	005b      	lsls	r3, r3, #1
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d920      	bls.n	800a3f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a3ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4413      	add	r3, r2
 800a3b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3b6:	69bb      	ldr	r3, [r7, #24]
 800a3b8:	f003 0307 	and.w	r3, r3, #7
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d00b      	beq.n	800a3d8 <pvPortMalloc+0xfc>
	__asm volatile
 800a3c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3c4:	f383 8811 	msr	BASEPRI, r3
 800a3c8:	f3bf 8f6f 	isb	sy
 800a3cc:	f3bf 8f4f 	dsb	sy
 800a3d0:	613b      	str	r3, [r7, #16]
}
 800a3d2:	bf00      	nop
 800a3d4:	bf00      	nop
 800a3d6:	e7fd      	b.n	800a3d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a3d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3da:	685a      	ldr	r2, [r3, #4]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	1ad2      	subs	r2, r2, r3
 800a3e0:	69bb      	ldr	r3, [r7, #24]
 800a3e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a3e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a3ea:	69b8      	ldr	r0, [r7, #24]
 800a3ec:	f000 f90a 	bl	800a604 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a3f0:	4b1d      	ldr	r3, [pc, #116]	@ (800a468 <pvPortMalloc+0x18c>)
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	1ad3      	subs	r3, r2, r3
 800a3fa:	4a1b      	ldr	r2, [pc, #108]	@ (800a468 <pvPortMalloc+0x18c>)
 800a3fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a3fe:	4b1a      	ldr	r3, [pc, #104]	@ (800a468 <pvPortMalloc+0x18c>)
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	4b1b      	ldr	r3, [pc, #108]	@ (800a470 <pvPortMalloc+0x194>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	429a      	cmp	r2, r3
 800a408:	d203      	bcs.n	800a412 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a40a:	4b17      	ldr	r3, [pc, #92]	@ (800a468 <pvPortMalloc+0x18c>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4a18      	ldr	r2, [pc, #96]	@ (800a470 <pvPortMalloc+0x194>)
 800a410:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a414:	685a      	ldr	r2, [r3, #4]
 800a416:	4b13      	ldr	r3, [pc, #76]	@ (800a464 <pvPortMalloc+0x188>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	431a      	orrs	r2, r3
 800a41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a41e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a422:	2200      	movs	r2, #0
 800a424:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a426:	4b13      	ldr	r3, [pc, #76]	@ (800a474 <pvPortMalloc+0x198>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	3301      	adds	r3, #1
 800a42c:	4a11      	ldr	r2, [pc, #68]	@ (800a474 <pvPortMalloc+0x198>)
 800a42e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a430:	f7fe fcc4 	bl	8008dbc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a434:	69fb      	ldr	r3, [r7, #28]
 800a436:	f003 0307 	and.w	r3, r3, #7
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d00b      	beq.n	800a456 <pvPortMalloc+0x17a>
	__asm volatile
 800a43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a442:	f383 8811 	msr	BASEPRI, r3
 800a446:	f3bf 8f6f 	isb	sy
 800a44a:	f3bf 8f4f 	dsb	sy
 800a44e:	60fb      	str	r3, [r7, #12]
}
 800a450:	bf00      	nop
 800a452:	bf00      	nop
 800a454:	e7fd      	b.n	800a452 <pvPortMalloc+0x176>
	return pvReturn;
 800a456:	69fb      	ldr	r3, [r7, #28]
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3728      	adds	r7, #40	@ 0x28
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	20006214 	.word	0x20006214
 800a464:	20006228 	.word	0x20006228
 800a468:	20006218 	.word	0x20006218
 800a46c:	2000620c 	.word	0x2000620c
 800a470:	2000621c 	.word	0x2000621c
 800a474:	20006220 	.word	0x20006220

0800a478 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b086      	sub	sp, #24
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d04f      	beq.n	800a52a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a48a:	2308      	movs	r3, #8
 800a48c:	425b      	negs	r3, r3
 800a48e:	697a      	ldr	r2, [r7, #20]
 800a490:	4413      	add	r3, r2
 800a492:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	685a      	ldr	r2, [r3, #4]
 800a49c:	4b25      	ldr	r3, [pc, #148]	@ (800a534 <vPortFree+0xbc>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4013      	ands	r3, r2
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d10b      	bne.n	800a4be <vPortFree+0x46>
	__asm volatile
 800a4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4aa:	f383 8811 	msr	BASEPRI, r3
 800a4ae:	f3bf 8f6f 	isb	sy
 800a4b2:	f3bf 8f4f 	dsb	sy
 800a4b6:	60fb      	str	r3, [r7, #12]
}
 800a4b8:	bf00      	nop
 800a4ba:	bf00      	nop
 800a4bc:	e7fd      	b.n	800a4ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d00b      	beq.n	800a4de <vPortFree+0x66>
	__asm volatile
 800a4c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ca:	f383 8811 	msr	BASEPRI, r3
 800a4ce:	f3bf 8f6f 	isb	sy
 800a4d2:	f3bf 8f4f 	dsb	sy
 800a4d6:	60bb      	str	r3, [r7, #8]
}
 800a4d8:	bf00      	nop
 800a4da:	bf00      	nop
 800a4dc:	e7fd      	b.n	800a4da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	685a      	ldr	r2, [r3, #4]
 800a4e2:	4b14      	ldr	r3, [pc, #80]	@ (800a534 <vPortFree+0xbc>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4013      	ands	r3, r2
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d01e      	beq.n	800a52a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d11a      	bne.n	800a52a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	685a      	ldr	r2, [r3, #4]
 800a4f8:	4b0e      	ldr	r3, [pc, #56]	@ (800a534 <vPortFree+0xbc>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	43db      	mvns	r3, r3
 800a4fe:	401a      	ands	r2, r3
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a504:	f7fe fc4c 	bl	8008da0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	685a      	ldr	r2, [r3, #4]
 800a50c:	4b0a      	ldr	r3, [pc, #40]	@ (800a538 <vPortFree+0xc0>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4413      	add	r3, r2
 800a512:	4a09      	ldr	r2, [pc, #36]	@ (800a538 <vPortFree+0xc0>)
 800a514:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a516:	6938      	ldr	r0, [r7, #16]
 800a518:	f000 f874 	bl	800a604 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a51c:	4b07      	ldr	r3, [pc, #28]	@ (800a53c <vPortFree+0xc4>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	3301      	adds	r3, #1
 800a522:	4a06      	ldr	r2, [pc, #24]	@ (800a53c <vPortFree+0xc4>)
 800a524:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a526:	f7fe fc49 	bl	8008dbc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a52a:	bf00      	nop
 800a52c:	3718      	adds	r7, #24
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	20006228 	.word	0x20006228
 800a538:	20006218 	.word	0x20006218
 800a53c:	20006224 	.word	0x20006224

0800a540 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a540:	b480      	push	{r7}
 800a542:	b085      	sub	sp, #20
 800a544:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a546:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a54a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a54c:	4b27      	ldr	r3, [pc, #156]	@ (800a5ec <prvHeapInit+0xac>)
 800a54e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f003 0307 	and.w	r3, r3, #7
 800a556:	2b00      	cmp	r3, #0
 800a558:	d00c      	beq.n	800a574 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	3307      	adds	r3, #7
 800a55e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f023 0307 	bic.w	r3, r3, #7
 800a566:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a568:	68ba      	ldr	r2, [r7, #8]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	1ad3      	subs	r3, r2, r3
 800a56e:	4a1f      	ldr	r2, [pc, #124]	@ (800a5ec <prvHeapInit+0xac>)
 800a570:	4413      	add	r3, r2
 800a572:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a578:	4a1d      	ldr	r2, [pc, #116]	@ (800a5f0 <prvHeapInit+0xb0>)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a57e:	4b1c      	ldr	r3, [pc, #112]	@ (800a5f0 <prvHeapInit+0xb0>)
 800a580:	2200      	movs	r2, #0
 800a582:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	68ba      	ldr	r2, [r7, #8]
 800a588:	4413      	add	r3, r2
 800a58a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a58c:	2208      	movs	r2, #8
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	1a9b      	subs	r3, r3, r2
 800a592:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f023 0307 	bic.w	r3, r3, #7
 800a59a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	4a15      	ldr	r2, [pc, #84]	@ (800a5f4 <prvHeapInit+0xb4>)
 800a5a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a5a2:	4b14      	ldr	r3, [pc, #80]	@ (800a5f4 <prvHeapInit+0xb4>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a5aa:	4b12      	ldr	r3, [pc, #72]	@ (800a5f4 <prvHeapInit+0xb4>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	68fa      	ldr	r2, [r7, #12]
 800a5ba:	1ad2      	subs	r2, r2, r3
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a5c0:	4b0c      	ldr	r3, [pc, #48]	@ (800a5f4 <prvHeapInit+0xb4>)
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	4a0a      	ldr	r2, [pc, #40]	@ (800a5f8 <prvHeapInit+0xb8>)
 800a5ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	4a09      	ldr	r2, [pc, #36]	@ (800a5fc <prvHeapInit+0xbc>)
 800a5d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a5d8:	4b09      	ldr	r3, [pc, #36]	@ (800a600 <prvHeapInit+0xc0>)
 800a5da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a5de:	601a      	str	r2, [r3, #0]
}
 800a5e0:	bf00      	nop
 800a5e2:	3714      	adds	r7, #20
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr
 800a5ec:	2000560c 	.word	0x2000560c
 800a5f0:	2000620c 	.word	0x2000620c
 800a5f4:	20006214 	.word	0x20006214
 800a5f8:	2000621c 	.word	0x2000621c
 800a5fc:	20006218 	.word	0x20006218
 800a600:	20006228 	.word	0x20006228

0800a604 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a604:	b480      	push	{r7}
 800a606:	b085      	sub	sp, #20
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a60c:	4b28      	ldr	r3, [pc, #160]	@ (800a6b0 <prvInsertBlockIntoFreeList+0xac>)
 800a60e:	60fb      	str	r3, [r7, #12]
 800a610:	e002      	b.n	800a618 <prvInsertBlockIntoFreeList+0x14>
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	60fb      	str	r3, [r7, #12]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	429a      	cmp	r2, r3
 800a620:	d8f7      	bhi.n	800a612 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	68ba      	ldr	r2, [r7, #8]
 800a62c:	4413      	add	r3, r2
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	429a      	cmp	r2, r3
 800a632:	d108      	bne.n	800a646 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	685a      	ldr	r2, [r3, #4]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	441a      	add	r2, r3
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	68ba      	ldr	r2, [r7, #8]
 800a650:	441a      	add	r2, r3
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	429a      	cmp	r2, r3
 800a658:	d118      	bne.n	800a68c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	4b15      	ldr	r3, [pc, #84]	@ (800a6b4 <prvInsertBlockIntoFreeList+0xb0>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	429a      	cmp	r2, r3
 800a664:	d00d      	beq.n	800a682 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	685a      	ldr	r2, [r3, #4]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	441a      	add	r2, r3
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	601a      	str	r2, [r3, #0]
 800a680:	e008      	b.n	800a694 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a682:	4b0c      	ldr	r3, [pc, #48]	@ (800a6b4 <prvInsertBlockIntoFreeList+0xb0>)
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	601a      	str	r2, [r3, #0]
 800a68a:	e003      	b.n	800a694 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a694:	68fa      	ldr	r2, [r7, #12]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	429a      	cmp	r2, r3
 800a69a:	d002      	beq.n	800a6a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6a2:	bf00      	nop
 800a6a4:	3714      	adds	r7, #20
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr
 800a6ae:	bf00      	nop
 800a6b0:	2000620c 	.word	0x2000620c
 800a6b4:	20006214 	.word	0x20006214

0800a6b8 <rosidl_typesupport_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead>:
 800a6b8:	4b04      	ldr	r3, [pc, #16]	@ (800a6cc <rosidl_typesupport_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead+0x14>)
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	b10a      	cbz	r2, 800a6c2 <rosidl_typesupport_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead+0xa>
 800a6be:	4803      	ldr	r0, [pc, #12]	@ (800a6cc <rosidl_typesupport_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead+0x14>)
 800a6c0:	4770      	bx	lr
 800a6c2:	4a03      	ldr	r2, [pc, #12]	@ (800a6d0 <rosidl_typesupport_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead+0x18>)
 800a6c4:	4801      	ldr	r0, [pc, #4]	@ (800a6cc <rosidl_typesupport_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead+0x14>)
 800a6c6:	6812      	ldr	r2, [r2, #0]
 800a6c8:	601a      	str	r2, [r3, #0]
 800a6ca:	4770      	bx	lr
 800a6cc:	2000001c 	.word	0x2000001c
 800a6d0:	200000e8 	.word	0x200000e8

0800a6d4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead>:
 800a6d4:	4a02      	ldr	r2, [pc, #8]	@ (800a6e0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead+0xc>)
 800a6d6:	4b03      	ldr	r3, [pc, #12]	@ (800a6e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead+0x10>)
 800a6d8:	6812      	ldr	r2, [r2, #0]
 800a6da:	601a      	str	r2, [r3, #0]
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop
 800a6e0:	200000e8 	.word	0x200000e8
 800a6e4:	2000001c 	.word	0x2000001c

0800a6e8 <amt212ev_interfaces__msg__AmtRead__rosidl_typesupport_introspection_c__AmtRead_init_function>:
 800a6e8:	f003 bde4 	b.w	800e2b4 <amt212ev_interfaces__msg__AmtRead__init>

0800a6ec <amt212ev_interfaces__msg__AmtRead__rosidl_typesupport_introspection_c__AmtRead_fini_function>:
 800a6ec:	f003 bde6 	b.w	800e2bc <amt212ev_interfaces__msg__AmtRead__fini>

0800a6f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead>:
 800a6f0:	4b04      	ldr	r3, [pc, #16]	@ (800a704 <rosidl_typesupport_introspection_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead+0x14>)
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	b10a      	cbz	r2, 800a6fa <rosidl_typesupport_introspection_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead+0xa>
 800a6f6:	4803      	ldr	r0, [pc, #12]	@ (800a704 <rosidl_typesupport_introspection_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead+0x14>)
 800a6f8:	4770      	bx	lr
 800a6fa:	4a03      	ldr	r2, [pc, #12]	@ (800a708 <rosidl_typesupport_introspection_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead+0x18>)
 800a6fc:	4801      	ldr	r0, [pc, #4]	@ (800a704 <rosidl_typesupport_introspection_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead+0x14>)
 800a6fe:	6812      	ldr	r2, [r2, #0]
 800a700:	601a      	str	r2, [r3, #0]
 800a702:	4770      	bx	lr
 800a704:	200000a0 	.word	0x200000a0
 800a708:	200000ec 	.word	0x200000ec

0800a70c <get_serialized_size_amt212ev_interfaces__msg__AmtRead>:
 800a70c:	b188      	cbz	r0, 800a732 <get_serialized_size_amt212ev_interfaces__msg__AmtRead+0x26>
 800a70e:	b538      	push	{r3, r4, r5, lr}
 800a710:	460d      	mov	r5, r1
 800a712:	4628      	mov	r0, r5
 800a714:	2108      	movs	r1, #8
 800a716:	f001 f9c5 	bl	800baa4 <ucdr_alignment>
 800a71a:	f105 0308 	add.w	r3, r5, #8
 800a71e:	181c      	adds	r4, r3, r0
 800a720:	2108      	movs	r1, #8
 800a722:	4620      	mov	r0, r4
 800a724:	f001 f9be 	bl	800baa4 <ucdr_alignment>
 800a728:	f1c5 0508 	rsb	r5, r5, #8
 800a72c:	4428      	add	r0, r5
 800a72e:	4420      	add	r0, r4
 800a730:	bd38      	pop	{r3, r4, r5, pc}
 800a732:	4770      	bx	lr

0800a734 <_AmtRead__cdr_deserialize>:
 800a734:	b538      	push	{r3, r4, r5, lr}
 800a736:	460c      	mov	r4, r1
 800a738:	b149      	cbz	r1, 800a74e <_AmtRead__cdr_deserialize+0x1a>
 800a73a:	4605      	mov	r5, r0
 800a73c:	f001 f894 	bl	800b868 <ucdr_deserialize_double>
 800a740:	f104 0108 	add.w	r1, r4, #8
 800a744:	4628      	mov	r0, r5
 800a746:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a74a:	f001 b88d 	b.w	800b868 <ucdr_deserialize_double>
 800a74e:	4608      	mov	r0, r1
 800a750:	bd38      	pop	{r3, r4, r5, pc}
 800a752:	bf00      	nop

0800a754 <_AmtRead__cdr_serialize>:
 800a754:	b170      	cbz	r0, 800a774 <_AmtRead__cdr_serialize+0x20>
 800a756:	b538      	push	{r3, r4, r5, lr}
 800a758:	ed90 0b00 	vldr	d0, [r0]
 800a75c:	460d      	mov	r5, r1
 800a75e:	4604      	mov	r4, r0
 800a760:	4608      	mov	r0, r1
 800a762:	f000 ffb1 	bl	800b6c8 <ucdr_serialize_double>
 800a766:	ed94 0b02 	vldr	d0, [r4, #8]
 800a76a:	4628      	mov	r0, r5
 800a76c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a770:	f000 bfaa 	b.w	800b6c8 <ucdr_serialize_double>
 800a774:	4770      	bx	lr
 800a776:	bf00      	nop

0800a778 <_AmtRead__get_serialized_size>:
 800a778:	b168      	cbz	r0, 800a796 <_AmtRead__get_serialized_size+0x1e>
 800a77a:	b510      	push	{r4, lr}
 800a77c:	2108      	movs	r1, #8
 800a77e:	2000      	movs	r0, #0
 800a780:	f001 f990 	bl	800baa4 <ucdr_alignment>
 800a784:	f100 0408 	add.w	r4, r0, #8
 800a788:	2108      	movs	r1, #8
 800a78a:	4620      	mov	r0, r4
 800a78c:	f001 f98a 	bl	800baa4 <ucdr_alignment>
 800a790:	3008      	adds	r0, #8
 800a792:	4420      	add	r0, r4
 800a794:	bd10      	pop	{r4, pc}
 800a796:	4770      	bx	lr

0800a798 <_AmtRead__max_serialized_size>:
 800a798:	b510      	push	{r4, lr}
 800a79a:	2108      	movs	r1, #8
 800a79c:	2000      	movs	r0, #0
 800a79e:	f001 f981 	bl	800baa4 <ucdr_alignment>
 800a7a2:	f100 0408 	add.w	r4, r0, #8
 800a7a6:	2108      	movs	r1, #8
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	f001 f97b 	bl	800baa4 <ucdr_alignment>
 800a7ae:	3008      	adds	r0, #8
 800a7b0:	4420      	add	r0, r4
 800a7b2:	bd10      	pop	{r4, pc}

0800a7b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead>:
 800a7b4:	4800      	ldr	r0, [pc, #0]	@ (800a7b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__amt212ev_interfaces__msg__AmtRead+0x4>)
 800a7b6:	4770      	bx	lr
 800a7b8:	200000ac 	.word	0x200000ac

0800a7bc <ucdr_serialize_bool>:
 800a7bc:	b538      	push	{r3, r4, r5, lr}
 800a7be:	460d      	mov	r5, r1
 800a7c0:	2101      	movs	r1, #1
 800a7c2:	4604      	mov	r4, r0
 800a7c4:	f001 f922 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800a7c8:	b148      	cbz	r0, 800a7de <ucdr_serialize_bool+0x22>
 800a7ca:	68a3      	ldr	r3, [r4, #8]
 800a7cc:	701d      	strb	r5, [r3, #0]
 800a7ce:	68a2      	ldr	r2, [r4, #8]
 800a7d0:	6923      	ldr	r3, [r4, #16]
 800a7d2:	2101      	movs	r1, #1
 800a7d4:	440a      	add	r2, r1
 800a7d6:	440b      	add	r3, r1
 800a7d8:	60a2      	str	r2, [r4, #8]
 800a7da:	6123      	str	r3, [r4, #16]
 800a7dc:	7561      	strb	r1, [r4, #21]
 800a7de:	7da0      	ldrb	r0, [r4, #22]
 800a7e0:	f080 0001 	eor.w	r0, r0, #1
 800a7e4:	bd38      	pop	{r3, r4, r5, pc}
 800a7e6:	bf00      	nop

0800a7e8 <ucdr_deserialize_bool>:
 800a7e8:	b538      	push	{r3, r4, r5, lr}
 800a7ea:	460d      	mov	r5, r1
 800a7ec:	2101      	movs	r1, #1
 800a7ee:	4604      	mov	r4, r0
 800a7f0:	f001 f90c 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800a7f4:	b160      	cbz	r0, 800a810 <ucdr_deserialize_bool+0x28>
 800a7f6:	68a2      	ldr	r2, [r4, #8]
 800a7f8:	6923      	ldr	r3, [r4, #16]
 800a7fa:	f812 1b01 	ldrb.w	r1, [r2], #1
 800a7fe:	3900      	subs	r1, #0
 800a800:	bf18      	it	ne
 800a802:	2101      	movne	r1, #1
 800a804:	7029      	strb	r1, [r5, #0]
 800a806:	3301      	adds	r3, #1
 800a808:	2101      	movs	r1, #1
 800a80a:	60a2      	str	r2, [r4, #8]
 800a80c:	6123      	str	r3, [r4, #16]
 800a80e:	7561      	strb	r1, [r4, #21]
 800a810:	7da0      	ldrb	r0, [r4, #22]
 800a812:	f080 0001 	eor.w	r0, r0, #1
 800a816:	bd38      	pop	{r3, r4, r5, pc}

0800a818 <ucdr_serialize_uint8_t>:
 800a818:	b538      	push	{r3, r4, r5, lr}
 800a81a:	460d      	mov	r5, r1
 800a81c:	2101      	movs	r1, #1
 800a81e:	4604      	mov	r4, r0
 800a820:	f001 f8f4 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800a824:	b148      	cbz	r0, 800a83a <ucdr_serialize_uint8_t+0x22>
 800a826:	68a3      	ldr	r3, [r4, #8]
 800a828:	701d      	strb	r5, [r3, #0]
 800a82a:	68a2      	ldr	r2, [r4, #8]
 800a82c:	6923      	ldr	r3, [r4, #16]
 800a82e:	2101      	movs	r1, #1
 800a830:	440a      	add	r2, r1
 800a832:	440b      	add	r3, r1
 800a834:	60a2      	str	r2, [r4, #8]
 800a836:	6123      	str	r3, [r4, #16]
 800a838:	7561      	strb	r1, [r4, #21]
 800a83a:	7da0      	ldrb	r0, [r4, #22]
 800a83c:	f080 0001 	eor.w	r0, r0, #1
 800a840:	bd38      	pop	{r3, r4, r5, pc}
 800a842:	bf00      	nop

0800a844 <ucdr_deserialize_uint8_t>:
 800a844:	b538      	push	{r3, r4, r5, lr}
 800a846:	460d      	mov	r5, r1
 800a848:	2101      	movs	r1, #1
 800a84a:	4604      	mov	r4, r0
 800a84c:	f001 f8de 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800a850:	b150      	cbz	r0, 800a868 <ucdr_deserialize_uint8_t+0x24>
 800a852:	68a3      	ldr	r3, [r4, #8]
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	702b      	strb	r3, [r5, #0]
 800a858:	68a2      	ldr	r2, [r4, #8]
 800a85a:	6923      	ldr	r3, [r4, #16]
 800a85c:	2101      	movs	r1, #1
 800a85e:	440a      	add	r2, r1
 800a860:	440b      	add	r3, r1
 800a862:	60a2      	str	r2, [r4, #8]
 800a864:	6123      	str	r3, [r4, #16]
 800a866:	7561      	strb	r1, [r4, #21]
 800a868:	7da0      	ldrb	r0, [r4, #22]
 800a86a:	f080 0001 	eor.w	r0, r0, #1
 800a86e:	bd38      	pop	{r3, r4, r5, pc}

0800a870 <ucdr_serialize_uint16_t>:
 800a870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a874:	b082      	sub	sp, #8
 800a876:	460b      	mov	r3, r1
 800a878:	2102      	movs	r1, #2
 800a87a:	4604      	mov	r4, r0
 800a87c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a880:	f001 f918 	bl	800bab4 <ucdr_buffer_alignment>
 800a884:	4601      	mov	r1, r0
 800a886:	4620      	mov	r0, r4
 800a888:	7d67      	ldrb	r7, [r4, #21]
 800a88a:	f001 f957 	bl	800bb3c <ucdr_advance_buffer>
 800a88e:	2102      	movs	r1, #2
 800a890:	4620      	mov	r0, r4
 800a892:	f001 f8af 	bl	800b9f4 <ucdr_check_buffer_available_for>
 800a896:	bb78      	cbnz	r0, 800a8f8 <ucdr_serialize_uint16_t+0x88>
 800a898:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a89c:	42ab      	cmp	r3, r5
 800a89e:	d926      	bls.n	800a8ee <ucdr_serialize_uint16_t+0x7e>
 800a8a0:	1b5e      	subs	r6, r3, r5
 800a8a2:	60a3      	str	r3, [r4, #8]
 800a8a4:	6923      	ldr	r3, [r4, #16]
 800a8a6:	f1c6 0802 	rsb	r8, r6, #2
 800a8aa:	4433      	add	r3, r6
 800a8ac:	6123      	str	r3, [r4, #16]
 800a8ae:	4641      	mov	r1, r8
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	f001 f8ab 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	d03b      	beq.n	800a932 <ucdr_serialize_uint16_t+0xc2>
 800a8ba:	7d23      	ldrb	r3, [r4, #20]
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d04a      	beq.n	800a956 <ucdr_serialize_uint16_t+0xe6>
 800a8c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a8c4:	702b      	strb	r3, [r5, #0]
 800a8c6:	2e00      	cmp	r6, #0
 800a8c8:	d040      	beq.n	800a94c <ucdr_serialize_uint16_t+0xdc>
 800a8ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a8ce:	706b      	strb	r3, [r5, #1]
 800a8d0:	6923      	ldr	r3, [r4, #16]
 800a8d2:	68a2      	ldr	r2, [r4, #8]
 800a8d4:	7da0      	ldrb	r0, [r4, #22]
 800a8d6:	3302      	adds	r3, #2
 800a8d8:	1b9e      	subs	r6, r3, r6
 800a8da:	4442      	add	r2, r8
 800a8dc:	2302      	movs	r3, #2
 800a8de:	f080 0001 	eor.w	r0, r0, #1
 800a8e2:	60a2      	str	r2, [r4, #8]
 800a8e4:	6126      	str	r6, [r4, #16]
 800a8e6:	7563      	strb	r3, [r4, #21]
 800a8e8:	b002      	add	sp, #8
 800a8ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8ee:	2102      	movs	r1, #2
 800a8f0:	4620      	mov	r0, r4
 800a8f2:	f001 f88b 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800a8f6:	b190      	cbz	r0, 800a91e <ucdr_serialize_uint16_t+0xae>
 800a8f8:	7d23      	ldrb	r3, [r4, #20]
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	68a3      	ldr	r3, [r4, #8]
 800a8fe:	d014      	beq.n	800a92a <ucdr_serialize_uint16_t+0xba>
 800a900:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a904:	701a      	strb	r2, [r3, #0]
 800a906:	68a3      	ldr	r3, [r4, #8]
 800a908:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a90c:	705a      	strb	r2, [r3, #1]
 800a90e:	68a2      	ldr	r2, [r4, #8]
 800a910:	6923      	ldr	r3, [r4, #16]
 800a912:	3202      	adds	r2, #2
 800a914:	3302      	adds	r3, #2
 800a916:	2102      	movs	r1, #2
 800a918:	60a2      	str	r2, [r4, #8]
 800a91a:	6123      	str	r3, [r4, #16]
 800a91c:	7561      	strb	r1, [r4, #21]
 800a91e:	7da0      	ldrb	r0, [r4, #22]
 800a920:	f080 0001 	eor.w	r0, r0, #1
 800a924:	b002      	add	sp, #8
 800a926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a92a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a92e:	801a      	strh	r2, [r3, #0]
 800a930:	e7ed      	b.n	800a90e <ucdr_serialize_uint16_t+0x9e>
 800a932:	68a2      	ldr	r2, [r4, #8]
 800a934:	6923      	ldr	r3, [r4, #16]
 800a936:	7da0      	ldrb	r0, [r4, #22]
 800a938:	7567      	strb	r7, [r4, #21]
 800a93a:	1b92      	subs	r2, r2, r6
 800a93c:	1b9b      	subs	r3, r3, r6
 800a93e:	f080 0001 	eor.w	r0, r0, #1
 800a942:	60a2      	str	r2, [r4, #8]
 800a944:	6123      	str	r3, [r4, #16]
 800a946:	b002      	add	sp, #8
 800a948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a94c:	68a3      	ldr	r3, [r4, #8]
 800a94e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a952:	701a      	strb	r2, [r3, #0]
 800a954:	e7bc      	b.n	800a8d0 <ucdr_serialize_uint16_t+0x60>
 800a956:	4628      	mov	r0, r5
 800a958:	f10d 0506 	add.w	r5, sp, #6
 800a95c:	4629      	mov	r1, r5
 800a95e:	4632      	mov	r2, r6
 800a960:	f00c ff9d 	bl	801789e <memcpy>
 800a964:	68a0      	ldr	r0, [r4, #8]
 800a966:	4642      	mov	r2, r8
 800a968:	19a9      	adds	r1, r5, r6
 800a96a:	f00c ff98 	bl	801789e <memcpy>
 800a96e:	e7af      	b.n	800a8d0 <ucdr_serialize_uint16_t+0x60>

0800a970 <ucdr_serialize_endian_uint16_t>:
 800a970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a974:	b083      	sub	sp, #12
 800a976:	460d      	mov	r5, r1
 800a978:	2102      	movs	r1, #2
 800a97a:	4604      	mov	r4, r0
 800a97c:	f8ad 2006 	strh.w	r2, [sp, #6]
 800a980:	f001 f898 	bl	800bab4 <ucdr_buffer_alignment>
 800a984:	4601      	mov	r1, r0
 800a986:	4620      	mov	r0, r4
 800a988:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a98c:	f001 f8d6 	bl	800bb3c <ucdr_advance_buffer>
 800a990:	2102      	movs	r1, #2
 800a992:	4620      	mov	r0, r4
 800a994:	f001 f82e 	bl	800b9f4 <ucdr_check_buffer_available_for>
 800a998:	bb70      	cbnz	r0, 800a9f8 <ucdr_serialize_endian_uint16_t+0x88>
 800a99a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a99e:	42be      	cmp	r6, r7
 800a9a0:	d925      	bls.n	800a9ee <ucdr_serialize_endian_uint16_t+0x7e>
 800a9a2:	6923      	ldr	r3, [r4, #16]
 800a9a4:	60a6      	str	r6, [r4, #8]
 800a9a6:	1bf6      	subs	r6, r6, r7
 800a9a8:	4433      	add	r3, r6
 800a9aa:	f1c6 0902 	rsb	r9, r6, #2
 800a9ae:	6123      	str	r3, [r4, #16]
 800a9b0:	4649      	mov	r1, r9
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	f001 f82a 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	d039      	beq.n	800aa30 <ucdr_serialize_endian_uint16_t+0xc0>
 800a9bc:	2d01      	cmp	r5, #1
 800a9be:	d04a      	beq.n	800aa56 <ucdr_serialize_endian_uint16_t+0xe6>
 800a9c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a9c4:	703b      	strb	r3, [r7, #0]
 800a9c6:	2e00      	cmp	r6, #0
 800a9c8:	d040      	beq.n	800aa4c <ucdr_serialize_endian_uint16_t+0xdc>
 800a9ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a9ce:	707b      	strb	r3, [r7, #1]
 800a9d0:	6923      	ldr	r3, [r4, #16]
 800a9d2:	68a2      	ldr	r2, [r4, #8]
 800a9d4:	7da0      	ldrb	r0, [r4, #22]
 800a9d6:	3302      	adds	r3, #2
 800a9d8:	444a      	add	r2, r9
 800a9da:	1b9b      	subs	r3, r3, r6
 800a9dc:	2102      	movs	r1, #2
 800a9de:	f080 0001 	eor.w	r0, r0, #1
 800a9e2:	60a2      	str	r2, [r4, #8]
 800a9e4:	6123      	str	r3, [r4, #16]
 800a9e6:	7561      	strb	r1, [r4, #21]
 800a9e8:	b003      	add	sp, #12
 800a9ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9ee:	2102      	movs	r1, #2
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	f001 f80b 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800a9f6:	b188      	cbz	r0, 800aa1c <ucdr_serialize_endian_uint16_t+0xac>
 800a9f8:	2d01      	cmp	r5, #1
 800a9fa:	68a3      	ldr	r3, [r4, #8]
 800a9fc:	d014      	beq.n	800aa28 <ucdr_serialize_endian_uint16_t+0xb8>
 800a9fe:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800aa02:	701a      	strb	r2, [r3, #0]
 800aa04:	68a3      	ldr	r3, [r4, #8]
 800aa06:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aa0a:	705a      	strb	r2, [r3, #1]
 800aa0c:	68a2      	ldr	r2, [r4, #8]
 800aa0e:	6923      	ldr	r3, [r4, #16]
 800aa10:	3202      	adds	r2, #2
 800aa12:	3302      	adds	r3, #2
 800aa14:	2102      	movs	r1, #2
 800aa16:	60a2      	str	r2, [r4, #8]
 800aa18:	6123      	str	r3, [r4, #16]
 800aa1a:	7561      	strb	r1, [r4, #21]
 800aa1c:	7da0      	ldrb	r0, [r4, #22]
 800aa1e:	f080 0001 	eor.w	r0, r0, #1
 800aa22:	b003      	add	sp, #12
 800aa24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa28:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800aa2c:	801a      	strh	r2, [r3, #0]
 800aa2e:	e7ed      	b.n	800aa0c <ucdr_serialize_endian_uint16_t+0x9c>
 800aa30:	68a2      	ldr	r2, [r4, #8]
 800aa32:	6923      	ldr	r3, [r4, #16]
 800aa34:	7da0      	ldrb	r0, [r4, #22]
 800aa36:	f884 8015 	strb.w	r8, [r4, #21]
 800aa3a:	1b92      	subs	r2, r2, r6
 800aa3c:	1b9b      	subs	r3, r3, r6
 800aa3e:	f080 0001 	eor.w	r0, r0, #1
 800aa42:	60a2      	str	r2, [r4, #8]
 800aa44:	6123      	str	r3, [r4, #16]
 800aa46:	b003      	add	sp, #12
 800aa48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa4c:	68a3      	ldr	r3, [r4, #8]
 800aa4e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aa52:	701a      	strb	r2, [r3, #0]
 800aa54:	e7bc      	b.n	800a9d0 <ucdr_serialize_endian_uint16_t+0x60>
 800aa56:	f10d 0506 	add.w	r5, sp, #6
 800aa5a:	4629      	mov	r1, r5
 800aa5c:	4632      	mov	r2, r6
 800aa5e:	4638      	mov	r0, r7
 800aa60:	f00c ff1d 	bl	801789e <memcpy>
 800aa64:	68a0      	ldr	r0, [r4, #8]
 800aa66:	464a      	mov	r2, r9
 800aa68:	19a9      	adds	r1, r5, r6
 800aa6a:	f00c ff18 	bl	801789e <memcpy>
 800aa6e:	e7af      	b.n	800a9d0 <ucdr_serialize_endian_uint16_t+0x60>

0800aa70 <ucdr_deserialize_uint16_t>:
 800aa70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa74:	460d      	mov	r5, r1
 800aa76:	2102      	movs	r1, #2
 800aa78:	4604      	mov	r4, r0
 800aa7a:	f001 f81b 	bl	800bab4 <ucdr_buffer_alignment>
 800aa7e:	4601      	mov	r1, r0
 800aa80:	4620      	mov	r0, r4
 800aa82:	f894 8015 	ldrb.w	r8, [r4, #21]
 800aa86:	f001 f859 	bl	800bb3c <ucdr_advance_buffer>
 800aa8a:	2102      	movs	r1, #2
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	f000 ffb1 	bl	800b9f4 <ucdr_check_buffer_available_for>
 800aa92:	bb60      	cbnz	r0, 800aaee <ucdr_deserialize_uint16_t+0x7e>
 800aa94:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800aa98:	42be      	cmp	r6, r7
 800aa9a:	d923      	bls.n	800aae4 <ucdr_deserialize_uint16_t+0x74>
 800aa9c:	6923      	ldr	r3, [r4, #16]
 800aa9e:	60a6      	str	r6, [r4, #8]
 800aaa0:	1bf6      	subs	r6, r6, r7
 800aaa2:	4433      	add	r3, r6
 800aaa4:	f1c6 0902 	rsb	r9, r6, #2
 800aaa8:	6123      	str	r3, [r4, #16]
 800aaaa:	4649      	mov	r1, r9
 800aaac:	4620      	mov	r0, r4
 800aaae:	f000 ffad 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800aab2:	2800      	cmp	r0, #0
 800aab4:	d034      	beq.n	800ab20 <ucdr_deserialize_uint16_t+0xb0>
 800aab6:	7d23      	ldrb	r3, [r4, #20]
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d042      	beq.n	800ab42 <ucdr_deserialize_uint16_t+0xd2>
 800aabc:	787b      	ldrb	r3, [r7, #1]
 800aabe:	702b      	strb	r3, [r5, #0]
 800aac0:	2e00      	cmp	r6, #0
 800aac2:	d03a      	beq.n	800ab3a <ucdr_deserialize_uint16_t+0xca>
 800aac4:	783b      	ldrb	r3, [r7, #0]
 800aac6:	706b      	strb	r3, [r5, #1]
 800aac8:	6923      	ldr	r3, [r4, #16]
 800aaca:	68a2      	ldr	r2, [r4, #8]
 800aacc:	7da0      	ldrb	r0, [r4, #22]
 800aace:	2102      	movs	r1, #2
 800aad0:	3302      	adds	r3, #2
 800aad2:	444a      	add	r2, r9
 800aad4:	1b9b      	subs	r3, r3, r6
 800aad6:	7561      	strb	r1, [r4, #21]
 800aad8:	60a2      	str	r2, [r4, #8]
 800aada:	6123      	str	r3, [r4, #16]
 800aadc:	f080 0001 	eor.w	r0, r0, #1
 800aae0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aae4:	2102      	movs	r1, #2
 800aae6:	4620      	mov	r0, r4
 800aae8:	f000 ff90 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800aaec:	b180      	cbz	r0, 800ab10 <ucdr_deserialize_uint16_t+0xa0>
 800aaee:	7d23      	ldrb	r3, [r4, #20]
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	68a3      	ldr	r3, [r4, #8]
 800aaf4:	d011      	beq.n	800ab1a <ucdr_deserialize_uint16_t+0xaa>
 800aaf6:	785b      	ldrb	r3, [r3, #1]
 800aaf8:	702b      	strb	r3, [r5, #0]
 800aafa:	68a3      	ldr	r3, [r4, #8]
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	706b      	strb	r3, [r5, #1]
 800ab00:	68a2      	ldr	r2, [r4, #8]
 800ab02:	6923      	ldr	r3, [r4, #16]
 800ab04:	3202      	adds	r2, #2
 800ab06:	3302      	adds	r3, #2
 800ab08:	2102      	movs	r1, #2
 800ab0a:	60a2      	str	r2, [r4, #8]
 800ab0c:	6123      	str	r3, [r4, #16]
 800ab0e:	7561      	strb	r1, [r4, #21]
 800ab10:	7da0      	ldrb	r0, [r4, #22]
 800ab12:	f080 0001 	eor.w	r0, r0, #1
 800ab16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab1a:	881b      	ldrh	r3, [r3, #0]
 800ab1c:	802b      	strh	r3, [r5, #0]
 800ab1e:	e7ef      	b.n	800ab00 <ucdr_deserialize_uint16_t+0x90>
 800ab20:	68a2      	ldr	r2, [r4, #8]
 800ab22:	6923      	ldr	r3, [r4, #16]
 800ab24:	7da0      	ldrb	r0, [r4, #22]
 800ab26:	f884 8015 	strb.w	r8, [r4, #21]
 800ab2a:	1b92      	subs	r2, r2, r6
 800ab2c:	1b9b      	subs	r3, r3, r6
 800ab2e:	60a2      	str	r2, [r4, #8]
 800ab30:	6123      	str	r3, [r4, #16]
 800ab32:	f080 0001 	eor.w	r0, r0, #1
 800ab36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab3a:	68a3      	ldr	r3, [r4, #8]
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	706b      	strb	r3, [r5, #1]
 800ab40:	e7c2      	b.n	800aac8 <ucdr_deserialize_uint16_t+0x58>
 800ab42:	4639      	mov	r1, r7
 800ab44:	4632      	mov	r2, r6
 800ab46:	4628      	mov	r0, r5
 800ab48:	f00c fea9 	bl	801789e <memcpy>
 800ab4c:	68a1      	ldr	r1, [r4, #8]
 800ab4e:	464a      	mov	r2, r9
 800ab50:	19a8      	adds	r0, r5, r6
 800ab52:	f00c fea4 	bl	801789e <memcpy>
 800ab56:	e7b7      	b.n	800aac8 <ucdr_deserialize_uint16_t+0x58>

0800ab58 <ucdr_deserialize_endian_uint16_t>:
 800ab58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab5c:	460e      	mov	r6, r1
 800ab5e:	2102      	movs	r1, #2
 800ab60:	4604      	mov	r4, r0
 800ab62:	4615      	mov	r5, r2
 800ab64:	f000 ffa6 	bl	800bab4 <ucdr_buffer_alignment>
 800ab68:	4601      	mov	r1, r0
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ab70:	f000 ffe4 	bl	800bb3c <ucdr_advance_buffer>
 800ab74:	2102      	movs	r1, #2
 800ab76:	4620      	mov	r0, r4
 800ab78:	f000 ff3c 	bl	800b9f4 <ucdr_check_buffer_available_for>
 800ab7c:	bb70      	cbnz	r0, 800abdc <ucdr_deserialize_endian_uint16_t+0x84>
 800ab7e:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800ab82:	4547      	cmp	r7, r8
 800ab84:	d925      	bls.n	800abd2 <ucdr_deserialize_endian_uint16_t+0x7a>
 800ab86:	6923      	ldr	r3, [r4, #16]
 800ab88:	60a7      	str	r7, [r4, #8]
 800ab8a:	eba7 0708 	sub.w	r7, r7, r8
 800ab8e:	443b      	add	r3, r7
 800ab90:	f1c7 0a02 	rsb	sl, r7, #2
 800ab94:	6123      	str	r3, [r4, #16]
 800ab96:	4651      	mov	r1, sl
 800ab98:	4620      	mov	r0, r4
 800ab9a:	f000 ff37 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	d034      	beq.n	800ac0c <ucdr_deserialize_endian_uint16_t+0xb4>
 800aba2:	2e01      	cmp	r6, #1
 800aba4:	d043      	beq.n	800ac2e <ucdr_deserialize_endian_uint16_t+0xd6>
 800aba6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800abaa:	702b      	strb	r3, [r5, #0]
 800abac:	2f00      	cmp	r7, #0
 800abae:	d03a      	beq.n	800ac26 <ucdr_deserialize_endian_uint16_t+0xce>
 800abb0:	f898 3000 	ldrb.w	r3, [r8]
 800abb4:	706b      	strb	r3, [r5, #1]
 800abb6:	6923      	ldr	r3, [r4, #16]
 800abb8:	68a2      	ldr	r2, [r4, #8]
 800abba:	7da0      	ldrb	r0, [r4, #22]
 800abbc:	2102      	movs	r1, #2
 800abbe:	3302      	adds	r3, #2
 800abc0:	4452      	add	r2, sl
 800abc2:	1bdb      	subs	r3, r3, r7
 800abc4:	7561      	strb	r1, [r4, #21]
 800abc6:	60a2      	str	r2, [r4, #8]
 800abc8:	6123      	str	r3, [r4, #16]
 800abca:	f080 0001 	eor.w	r0, r0, #1
 800abce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abd2:	2102      	movs	r1, #2
 800abd4:	4620      	mov	r0, r4
 800abd6:	f000 ff19 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800abda:	b178      	cbz	r0, 800abfc <ucdr_deserialize_endian_uint16_t+0xa4>
 800abdc:	2e01      	cmp	r6, #1
 800abde:	68a3      	ldr	r3, [r4, #8]
 800abe0:	d011      	beq.n	800ac06 <ucdr_deserialize_endian_uint16_t+0xae>
 800abe2:	785b      	ldrb	r3, [r3, #1]
 800abe4:	702b      	strb	r3, [r5, #0]
 800abe6:	68a3      	ldr	r3, [r4, #8]
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	706b      	strb	r3, [r5, #1]
 800abec:	68a2      	ldr	r2, [r4, #8]
 800abee:	6923      	ldr	r3, [r4, #16]
 800abf0:	3202      	adds	r2, #2
 800abf2:	3302      	adds	r3, #2
 800abf4:	2102      	movs	r1, #2
 800abf6:	60a2      	str	r2, [r4, #8]
 800abf8:	6123      	str	r3, [r4, #16]
 800abfa:	7561      	strb	r1, [r4, #21]
 800abfc:	7da0      	ldrb	r0, [r4, #22]
 800abfe:	f080 0001 	eor.w	r0, r0, #1
 800ac02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac06:	881b      	ldrh	r3, [r3, #0]
 800ac08:	802b      	strh	r3, [r5, #0]
 800ac0a:	e7ef      	b.n	800abec <ucdr_deserialize_endian_uint16_t+0x94>
 800ac0c:	68a2      	ldr	r2, [r4, #8]
 800ac0e:	6923      	ldr	r3, [r4, #16]
 800ac10:	7da0      	ldrb	r0, [r4, #22]
 800ac12:	f884 9015 	strb.w	r9, [r4, #21]
 800ac16:	1bd2      	subs	r2, r2, r7
 800ac18:	1bdb      	subs	r3, r3, r7
 800ac1a:	60a2      	str	r2, [r4, #8]
 800ac1c:	6123      	str	r3, [r4, #16]
 800ac1e:	f080 0001 	eor.w	r0, r0, #1
 800ac22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac26:	68a3      	ldr	r3, [r4, #8]
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	706b      	strb	r3, [r5, #1]
 800ac2c:	e7c3      	b.n	800abb6 <ucdr_deserialize_endian_uint16_t+0x5e>
 800ac2e:	4641      	mov	r1, r8
 800ac30:	463a      	mov	r2, r7
 800ac32:	4628      	mov	r0, r5
 800ac34:	f00c fe33 	bl	801789e <memcpy>
 800ac38:	68a1      	ldr	r1, [r4, #8]
 800ac3a:	4652      	mov	r2, sl
 800ac3c:	19e8      	adds	r0, r5, r7
 800ac3e:	f00c fe2e 	bl	801789e <memcpy>
 800ac42:	e7b8      	b.n	800abb6 <ucdr_deserialize_endian_uint16_t+0x5e>

0800ac44 <ucdr_serialize_uint32_t>:
 800ac44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac48:	b082      	sub	sp, #8
 800ac4a:	4604      	mov	r4, r0
 800ac4c:	9101      	str	r1, [sp, #4]
 800ac4e:	2104      	movs	r1, #4
 800ac50:	f000 ff30 	bl	800bab4 <ucdr_buffer_alignment>
 800ac54:	4601      	mov	r1, r0
 800ac56:	4620      	mov	r0, r4
 800ac58:	7d67      	ldrb	r7, [r4, #21]
 800ac5a:	f000 ff6f 	bl	800bb3c <ucdr_advance_buffer>
 800ac5e:	2104      	movs	r1, #4
 800ac60:	4620      	mov	r0, r4
 800ac62:	f000 fec7 	bl	800b9f4 <ucdr_check_buffer_available_for>
 800ac66:	2800      	cmp	r0, #0
 800ac68:	d139      	bne.n	800acde <ucdr_serialize_uint32_t+0x9a>
 800ac6a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ac6e:	42ab      	cmp	r3, r5
 800ac70:	d930      	bls.n	800acd4 <ucdr_serialize_uint32_t+0x90>
 800ac72:	1b5e      	subs	r6, r3, r5
 800ac74:	60a3      	str	r3, [r4, #8]
 800ac76:	6923      	ldr	r3, [r4, #16]
 800ac78:	f1c6 0804 	rsb	r8, r6, #4
 800ac7c:	4433      	add	r3, r6
 800ac7e:	6123      	str	r3, [r4, #16]
 800ac80:	4641      	mov	r1, r8
 800ac82:	4620      	mov	r0, r4
 800ac84:	f000 fec2 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	d04c      	beq.n	800ad26 <ucdr_serialize_uint32_t+0xe2>
 800ac8c:	7d23      	ldrb	r3, [r4, #20]
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d063      	beq.n	800ad5a <ucdr_serialize_uint32_t+0x116>
 800ac92:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ac96:	702b      	strb	r3, [r5, #0]
 800ac98:	2e00      	cmp	r6, #0
 800ac9a:	d051      	beq.n	800ad40 <ucdr_serialize_uint32_t+0xfc>
 800ac9c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800aca0:	706b      	strb	r3, [r5, #1]
 800aca2:	2e01      	cmp	r6, #1
 800aca4:	d050      	beq.n	800ad48 <ucdr_serialize_uint32_t+0x104>
 800aca6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800acaa:	70ab      	strb	r3, [r5, #2]
 800acac:	2e02      	cmp	r6, #2
 800acae:	d04f      	beq.n	800ad50 <ucdr_serialize_uint32_t+0x10c>
 800acb0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800acb4:	70eb      	strb	r3, [r5, #3]
 800acb6:	6923      	ldr	r3, [r4, #16]
 800acb8:	68a2      	ldr	r2, [r4, #8]
 800acba:	7da0      	ldrb	r0, [r4, #22]
 800acbc:	3304      	adds	r3, #4
 800acbe:	1b9e      	subs	r6, r3, r6
 800acc0:	4442      	add	r2, r8
 800acc2:	2304      	movs	r3, #4
 800acc4:	f080 0001 	eor.w	r0, r0, #1
 800acc8:	60a2      	str	r2, [r4, #8]
 800acca:	6126      	str	r6, [r4, #16]
 800accc:	7563      	strb	r3, [r4, #21]
 800acce:	b002      	add	sp, #8
 800acd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acd4:	2104      	movs	r1, #4
 800acd6:	4620      	mov	r0, r4
 800acd8:	f000 fe98 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800acdc:	b1d0      	cbz	r0, 800ad14 <ucdr_serialize_uint32_t+0xd0>
 800acde:	7d23      	ldrb	r3, [r4, #20]
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	68a3      	ldr	r3, [r4, #8]
 800ace4:	d01c      	beq.n	800ad20 <ucdr_serialize_uint32_t+0xdc>
 800ace6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800acea:	701a      	strb	r2, [r3, #0]
 800acec:	68a3      	ldr	r3, [r4, #8]
 800acee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800acf2:	705a      	strb	r2, [r3, #1]
 800acf4:	68a3      	ldr	r3, [r4, #8]
 800acf6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800acfa:	709a      	strb	r2, [r3, #2]
 800acfc:	68a3      	ldr	r3, [r4, #8]
 800acfe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ad02:	70da      	strb	r2, [r3, #3]
 800ad04:	68a2      	ldr	r2, [r4, #8]
 800ad06:	6923      	ldr	r3, [r4, #16]
 800ad08:	3204      	adds	r2, #4
 800ad0a:	3304      	adds	r3, #4
 800ad0c:	2104      	movs	r1, #4
 800ad0e:	60a2      	str	r2, [r4, #8]
 800ad10:	6123      	str	r3, [r4, #16]
 800ad12:	7561      	strb	r1, [r4, #21]
 800ad14:	7da0      	ldrb	r0, [r4, #22]
 800ad16:	f080 0001 	eor.w	r0, r0, #1
 800ad1a:	b002      	add	sp, #8
 800ad1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad20:	9a01      	ldr	r2, [sp, #4]
 800ad22:	601a      	str	r2, [r3, #0]
 800ad24:	e7ee      	b.n	800ad04 <ucdr_serialize_uint32_t+0xc0>
 800ad26:	68a2      	ldr	r2, [r4, #8]
 800ad28:	6923      	ldr	r3, [r4, #16]
 800ad2a:	7da0      	ldrb	r0, [r4, #22]
 800ad2c:	7567      	strb	r7, [r4, #21]
 800ad2e:	1b92      	subs	r2, r2, r6
 800ad30:	1b9b      	subs	r3, r3, r6
 800ad32:	f080 0001 	eor.w	r0, r0, #1
 800ad36:	60a2      	str	r2, [r4, #8]
 800ad38:	6123      	str	r3, [r4, #16]
 800ad3a:	b002      	add	sp, #8
 800ad3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad40:	68a3      	ldr	r3, [r4, #8]
 800ad42:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ad46:	701a      	strb	r2, [r3, #0]
 800ad48:	68a3      	ldr	r3, [r4, #8]
 800ad4a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ad4e:	701a      	strb	r2, [r3, #0]
 800ad50:	68a3      	ldr	r3, [r4, #8]
 800ad52:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ad56:	701a      	strb	r2, [r3, #0]
 800ad58:	e7ad      	b.n	800acb6 <ucdr_serialize_uint32_t+0x72>
 800ad5a:	4628      	mov	r0, r5
 800ad5c:	ad01      	add	r5, sp, #4
 800ad5e:	4629      	mov	r1, r5
 800ad60:	4632      	mov	r2, r6
 800ad62:	f00c fd9c 	bl	801789e <memcpy>
 800ad66:	68a0      	ldr	r0, [r4, #8]
 800ad68:	4642      	mov	r2, r8
 800ad6a:	19a9      	adds	r1, r5, r6
 800ad6c:	f00c fd97 	bl	801789e <memcpy>
 800ad70:	e7a1      	b.n	800acb6 <ucdr_serialize_uint32_t+0x72>
 800ad72:	bf00      	nop

0800ad74 <ucdr_serialize_endian_uint32_t>:
 800ad74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad78:	b083      	sub	sp, #12
 800ad7a:	460d      	mov	r5, r1
 800ad7c:	2104      	movs	r1, #4
 800ad7e:	4604      	mov	r4, r0
 800ad80:	9201      	str	r2, [sp, #4]
 800ad82:	f000 fe97 	bl	800bab4 <ucdr_buffer_alignment>
 800ad86:	4601      	mov	r1, r0
 800ad88:	4620      	mov	r0, r4
 800ad8a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ad8e:	f000 fed5 	bl	800bb3c <ucdr_advance_buffer>
 800ad92:	2104      	movs	r1, #4
 800ad94:	4620      	mov	r0, r4
 800ad96:	f000 fe2d 	bl	800b9f4 <ucdr_check_buffer_available_for>
 800ad9a:	2800      	cmp	r0, #0
 800ad9c:	d138      	bne.n	800ae10 <ucdr_serialize_endian_uint32_t+0x9c>
 800ad9e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ada2:	42b7      	cmp	r7, r6
 800ada4:	d92f      	bls.n	800ae06 <ucdr_serialize_endian_uint32_t+0x92>
 800ada6:	6923      	ldr	r3, [r4, #16]
 800ada8:	60a7      	str	r7, [r4, #8]
 800adaa:	1bbf      	subs	r7, r7, r6
 800adac:	443b      	add	r3, r7
 800adae:	f1c7 0904 	rsb	r9, r7, #4
 800adb2:	6123      	str	r3, [r4, #16]
 800adb4:	4649      	mov	r1, r9
 800adb6:	4620      	mov	r0, r4
 800adb8:	f000 fe28 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800adbc:	2800      	cmp	r0, #0
 800adbe:	d04a      	beq.n	800ae56 <ucdr_serialize_endian_uint32_t+0xe2>
 800adc0:	2d01      	cmp	r5, #1
 800adc2:	d063      	beq.n	800ae8c <ucdr_serialize_endian_uint32_t+0x118>
 800adc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800adc8:	7033      	strb	r3, [r6, #0]
 800adca:	2f00      	cmp	r7, #0
 800adcc:	d051      	beq.n	800ae72 <ucdr_serialize_endian_uint32_t+0xfe>
 800adce:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800add2:	7073      	strb	r3, [r6, #1]
 800add4:	2f01      	cmp	r7, #1
 800add6:	d050      	beq.n	800ae7a <ucdr_serialize_endian_uint32_t+0x106>
 800add8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800addc:	70b3      	strb	r3, [r6, #2]
 800adde:	2f02      	cmp	r7, #2
 800ade0:	d04f      	beq.n	800ae82 <ucdr_serialize_endian_uint32_t+0x10e>
 800ade2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ade6:	70f3      	strb	r3, [r6, #3]
 800ade8:	6923      	ldr	r3, [r4, #16]
 800adea:	68a2      	ldr	r2, [r4, #8]
 800adec:	7da0      	ldrb	r0, [r4, #22]
 800adee:	3304      	adds	r3, #4
 800adf0:	444a      	add	r2, r9
 800adf2:	1bdb      	subs	r3, r3, r7
 800adf4:	2104      	movs	r1, #4
 800adf6:	f080 0001 	eor.w	r0, r0, #1
 800adfa:	60a2      	str	r2, [r4, #8]
 800adfc:	6123      	str	r3, [r4, #16]
 800adfe:	7561      	strb	r1, [r4, #21]
 800ae00:	b003      	add	sp, #12
 800ae02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae06:	2104      	movs	r1, #4
 800ae08:	4620      	mov	r0, r4
 800ae0a:	f000 fdff 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800ae0e:	b1c8      	cbz	r0, 800ae44 <ucdr_serialize_endian_uint32_t+0xd0>
 800ae10:	2d01      	cmp	r5, #1
 800ae12:	68a3      	ldr	r3, [r4, #8]
 800ae14:	d01c      	beq.n	800ae50 <ucdr_serialize_endian_uint32_t+0xdc>
 800ae16:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ae1a:	701a      	strb	r2, [r3, #0]
 800ae1c:	68a3      	ldr	r3, [r4, #8]
 800ae1e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ae22:	705a      	strb	r2, [r3, #1]
 800ae24:	68a3      	ldr	r3, [r4, #8]
 800ae26:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ae2a:	709a      	strb	r2, [r3, #2]
 800ae2c:	68a3      	ldr	r3, [r4, #8]
 800ae2e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ae32:	70da      	strb	r2, [r3, #3]
 800ae34:	68a2      	ldr	r2, [r4, #8]
 800ae36:	6923      	ldr	r3, [r4, #16]
 800ae38:	3204      	adds	r2, #4
 800ae3a:	3304      	adds	r3, #4
 800ae3c:	2104      	movs	r1, #4
 800ae3e:	60a2      	str	r2, [r4, #8]
 800ae40:	6123      	str	r3, [r4, #16]
 800ae42:	7561      	strb	r1, [r4, #21]
 800ae44:	7da0      	ldrb	r0, [r4, #22]
 800ae46:	f080 0001 	eor.w	r0, r0, #1
 800ae4a:	b003      	add	sp, #12
 800ae4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae50:	9a01      	ldr	r2, [sp, #4]
 800ae52:	601a      	str	r2, [r3, #0]
 800ae54:	e7ee      	b.n	800ae34 <ucdr_serialize_endian_uint32_t+0xc0>
 800ae56:	68a2      	ldr	r2, [r4, #8]
 800ae58:	6923      	ldr	r3, [r4, #16]
 800ae5a:	7da0      	ldrb	r0, [r4, #22]
 800ae5c:	f884 8015 	strb.w	r8, [r4, #21]
 800ae60:	1bd2      	subs	r2, r2, r7
 800ae62:	1bdb      	subs	r3, r3, r7
 800ae64:	f080 0001 	eor.w	r0, r0, #1
 800ae68:	60a2      	str	r2, [r4, #8]
 800ae6a:	6123      	str	r3, [r4, #16]
 800ae6c:	b003      	add	sp, #12
 800ae6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae72:	68a3      	ldr	r3, [r4, #8]
 800ae74:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ae78:	701a      	strb	r2, [r3, #0]
 800ae7a:	68a3      	ldr	r3, [r4, #8]
 800ae7c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ae80:	701a      	strb	r2, [r3, #0]
 800ae82:	68a3      	ldr	r3, [r4, #8]
 800ae84:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ae88:	701a      	strb	r2, [r3, #0]
 800ae8a:	e7ad      	b.n	800ade8 <ucdr_serialize_endian_uint32_t+0x74>
 800ae8c:	ad01      	add	r5, sp, #4
 800ae8e:	4629      	mov	r1, r5
 800ae90:	463a      	mov	r2, r7
 800ae92:	4630      	mov	r0, r6
 800ae94:	f00c fd03 	bl	801789e <memcpy>
 800ae98:	68a0      	ldr	r0, [r4, #8]
 800ae9a:	464a      	mov	r2, r9
 800ae9c:	19e9      	adds	r1, r5, r7
 800ae9e:	f00c fcfe 	bl	801789e <memcpy>
 800aea2:	e7a1      	b.n	800ade8 <ucdr_serialize_endian_uint32_t+0x74>

0800aea4 <ucdr_deserialize_uint32_t>:
 800aea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aea8:	460d      	mov	r5, r1
 800aeaa:	2104      	movs	r1, #4
 800aeac:	4604      	mov	r4, r0
 800aeae:	f000 fe01 	bl	800bab4 <ucdr_buffer_alignment>
 800aeb2:	4601      	mov	r1, r0
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800aeba:	f000 fe3f 	bl	800bb3c <ucdr_advance_buffer>
 800aebe:	2104      	movs	r1, #4
 800aec0:	4620      	mov	r0, r4
 800aec2:	f000 fd97 	bl	800b9f4 <ucdr_check_buffer_available_for>
 800aec6:	2800      	cmp	r0, #0
 800aec8:	d138      	bne.n	800af3c <ucdr_deserialize_uint32_t+0x98>
 800aeca:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800aece:	42b7      	cmp	r7, r6
 800aed0:	d92f      	bls.n	800af32 <ucdr_deserialize_uint32_t+0x8e>
 800aed2:	6923      	ldr	r3, [r4, #16]
 800aed4:	60a7      	str	r7, [r4, #8]
 800aed6:	1bbf      	subs	r7, r7, r6
 800aed8:	443b      	add	r3, r7
 800aeda:	f1c7 0904 	rsb	r9, r7, #4
 800aede:	6123      	str	r3, [r4, #16]
 800aee0:	4649      	mov	r1, r9
 800aee2:	4620      	mov	r0, r4
 800aee4:	f000 fd92 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800aee8:	2800      	cmp	r0, #0
 800aeea:	d046      	beq.n	800af7a <ucdr_deserialize_uint32_t+0xd6>
 800aeec:	7d23      	ldrb	r3, [r4, #20]
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d05c      	beq.n	800afac <ucdr_deserialize_uint32_t+0x108>
 800aef2:	78f3      	ldrb	r3, [r6, #3]
 800aef4:	702b      	strb	r3, [r5, #0]
 800aef6:	2f00      	cmp	r7, #0
 800aef8:	d04c      	beq.n	800af94 <ucdr_deserialize_uint32_t+0xf0>
 800aefa:	78b3      	ldrb	r3, [r6, #2]
 800aefc:	706b      	strb	r3, [r5, #1]
 800aefe:	2f01      	cmp	r7, #1
 800af00:	f105 0302 	add.w	r3, r5, #2
 800af04:	d04a      	beq.n	800af9c <ucdr_deserialize_uint32_t+0xf8>
 800af06:	7873      	ldrb	r3, [r6, #1]
 800af08:	70ab      	strb	r3, [r5, #2]
 800af0a:	2f02      	cmp	r7, #2
 800af0c:	f105 0303 	add.w	r3, r5, #3
 800af10:	d048      	beq.n	800afa4 <ucdr_deserialize_uint32_t+0x100>
 800af12:	7833      	ldrb	r3, [r6, #0]
 800af14:	70eb      	strb	r3, [r5, #3]
 800af16:	6923      	ldr	r3, [r4, #16]
 800af18:	68a2      	ldr	r2, [r4, #8]
 800af1a:	7da0      	ldrb	r0, [r4, #22]
 800af1c:	2104      	movs	r1, #4
 800af1e:	3304      	adds	r3, #4
 800af20:	444a      	add	r2, r9
 800af22:	1bdb      	subs	r3, r3, r7
 800af24:	7561      	strb	r1, [r4, #21]
 800af26:	60a2      	str	r2, [r4, #8]
 800af28:	6123      	str	r3, [r4, #16]
 800af2a:	f080 0001 	eor.w	r0, r0, #1
 800af2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af32:	2104      	movs	r1, #4
 800af34:	4620      	mov	r0, r4
 800af36:	f000 fd69 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800af3a:	b1b0      	cbz	r0, 800af6a <ucdr_deserialize_uint32_t+0xc6>
 800af3c:	7d23      	ldrb	r3, [r4, #20]
 800af3e:	2b01      	cmp	r3, #1
 800af40:	68a3      	ldr	r3, [r4, #8]
 800af42:	d017      	beq.n	800af74 <ucdr_deserialize_uint32_t+0xd0>
 800af44:	78db      	ldrb	r3, [r3, #3]
 800af46:	702b      	strb	r3, [r5, #0]
 800af48:	68a3      	ldr	r3, [r4, #8]
 800af4a:	789b      	ldrb	r3, [r3, #2]
 800af4c:	706b      	strb	r3, [r5, #1]
 800af4e:	68a3      	ldr	r3, [r4, #8]
 800af50:	785b      	ldrb	r3, [r3, #1]
 800af52:	70ab      	strb	r3, [r5, #2]
 800af54:	68a3      	ldr	r3, [r4, #8]
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	70eb      	strb	r3, [r5, #3]
 800af5a:	68a2      	ldr	r2, [r4, #8]
 800af5c:	6923      	ldr	r3, [r4, #16]
 800af5e:	3204      	adds	r2, #4
 800af60:	3304      	adds	r3, #4
 800af62:	2104      	movs	r1, #4
 800af64:	60a2      	str	r2, [r4, #8]
 800af66:	6123      	str	r3, [r4, #16]
 800af68:	7561      	strb	r1, [r4, #21]
 800af6a:	7da0      	ldrb	r0, [r4, #22]
 800af6c:	f080 0001 	eor.w	r0, r0, #1
 800af70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	602b      	str	r3, [r5, #0]
 800af78:	e7ef      	b.n	800af5a <ucdr_deserialize_uint32_t+0xb6>
 800af7a:	68a2      	ldr	r2, [r4, #8]
 800af7c:	6923      	ldr	r3, [r4, #16]
 800af7e:	7da0      	ldrb	r0, [r4, #22]
 800af80:	f884 8015 	strb.w	r8, [r4, #21]
 800af84:	1bd2      	subs	r2, r2, r7
 800af86:	1bdb      	subs	r3, r3, r7
 800af88:	60a2      	str	r2, [r4, #8]
 800af8a:	6123      	str	r3, [r4, #16]
 800af8c:	f080 0001 	eor.w	r0, r0, #1
 800af90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af94:	68a3      	ldr	r3, [r4, #8]
 800af96:	789b      	ldrb	r3, [r3, #2]
 800af98:	706b      	strb	r3, [r5, #1]
 800af9a:	1cab      	adds	r3, r5, #2
 800af9c:	68a2      	ldr	r2, [r4, #8]
 800af9e:	7852      	ldrb	r2, [r2, #1]
 800afa0:	f803 2b01 	strb.w	r2, [r3], #1
 800afa4:	68a2      	ldr	r2, [r4, #8]
 800afa6:	7812      	ldrb	r2, [r2, #0]
 800afa8:	701a      	strb	r2, [r3, #0]
 800afaa:	e7b4      	b.n	800af16 <ucdr_deserialize_uint32_t+0x72>
 800afac:	4631      	mov	r1, r6
 800afae:	463a      	mov	r2, r7
 800afb0:	4628      	mov	r0, r5
 800afb2:	f00c fc74 	bl	801789e <memcpy>
 800afb6:	68a1      	ldr	r1, [r4, #8]
 800afb8:	464a      	mov	r2, r9
 800afba:	19e8      	adds	r0, r5, r7
 800afbc:	f00c fc6f 	bl	801789e <memcpy>
 800afc0:	e7a9      	b.n	800af16 <ucdr_deserialize_uint32_t+0x72>
 800afc2:	bf00      	nop

0800afc4 <ucdr_deserialize_endian_uint32_t>:
 800afc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afc8:	460e      	mov	r6, r1
 800afca:	2104      	movs	r1, #4
 800afcc:	4604      	mov	r4, r0
 800afce:	4615      	mov	r5, r2
 800afd0:	f000 fd70 	bl	800bab4 <ucdr_buffer_alignment>
 800afd4:	4601      	mov	r1, r0
 800afd6:	4620      	mov	r0, r4
 800afd8:	f894 9015 	ldrb.w	r9, [r4, #21]
 800afdc:	f000 fdae 	bl	800bb3c <ucdr_advance_buffer>
 800afe0:	2104      	movs	r1, #4
 800afe2:	4620      	mov	r0, r4
 800afe4:	f000 fd06 	bl	800b9f4 <ucdr_check_buffer_available_for>
 800afe8:	2800      	cmp	r0, #0
 800afea:	d13c      	bne.n	800b066 <ucdr_deserialize_endian_uint32_t+0xa2>
 800afec:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800aff0:	42bb      	cmp	r3, r7
 800aff2:	d933      	bls.n	800b05c <ucdr_deserialize_endian_uint32_t+0x98>
 800aff4:	eba3 0807 	sub.w	r8, r3, r7
 800aff8:	60a3      	str	r3, [r4, #8]
 800affa:	6923      	ldr	r3, [r4, #16]
 800affc:	f1c8 0a04 	rsb	sl, r8, #4
 800b000:	4443      	add	r3, r8
 800b002:	6123      	str	r3, [r4, #16]
 800b004:	4651      	mov	r1, sl
 800b006:	4620      	mov	r0, r4
 800b008:	f000 fd00 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800b00c:	2800      	cmp	r0, #0
 800b00e:	d048      	beq.n	800b0a2 <ucdr_deserialize_endian_uint32_t+0xde>
 800b010:	2e01      	cmp	r6, #1
 800b012:	d061      	beq.n	800b0d8 <ucdr_deserialize_endian_uint32_t+0x114>
 800b014:	78fb      	ldrb	r3, [r7, #3]
 800b016:	702b      	strb	r3, [r5, #0]
 800b018:	f1b8 0f00 	cmp.w	r8, #0
 800b01c:	d050      	beq.n	800b0c0 <ucdr_deserialize_endian_uint32_t+0xfc>
 800b01e:	78bb      	ldrb	r3, [r7, #2]
 800b020:	706b      	strb	r3, [r5, #1]
 800b022:	f1b8 0f01 	cmp.w	r8, #1
 800b026:	f105 0302 	add.w	r3, r5, #2
 800b02a:	d04d      	beq.n	800b0c8 <ucdr_deserialize_endian_uint32_t+0x104>
 800b02c:	787b      	ldrb	r3, [r7, #1]
 800b02e:	70ab      	strb	r3, [r5, #2]
 800b030:	f1b8 0f02 	cmp.w	r8, #2
 800b034:	f105 0303 	add.w	r3, r5, #3
 800b038:	d04a      	beq.n	800b0d0 <ucdr_deserialize_endian_uint32_t+0x10c>
 800b03a:	783b      	ldrb	r3, [r7, #0]
 800b03c:	70eb      	strb	r3, [r5, #3]
 800b03e:	6923      	ldr	r3, [r4, #16]
 800b040:	68a2      	ldr	r2, [r4, #8]
 800b042:	7da0      	ldrb	r0, [r4, #22]
 800b044:	2104      	movs	r1, #4
 800b046:	3304      	adds	r3, #4
 800b048:	4452      	add	r2, sl
 800b04a:	eba3 0308 	sub.w	r3, r3, r8
 800b04e:	7561      	strb	r1, [r4, #21]
 800b050:	60a2      	str	r2, [r4, #8]
 800b052:	6123      	str	r3, [r4, #16]
 800b054:	f080 0001 	eor.w	r0, r0, #1
 800b058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b05c:	2104      	movs	r1, #4
 800b05e:	4620      	mov	r0, r4
 800b060:	f000 fcd4 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800b064:	b1a8      	cbz	r0, 800b092 <ucdr_deserialize_endian_uint32_t+0xce>
 800b066:	2e01      	cmp	r6, #1
 800b068:	68a3      	ldr	r3, [r4, #8]
 800b06a:	d017      	beq.n	800b09c <ucdr_deserialize_endian_uint32_t+0xd8>
 800b06c:	78db      	ldrb	r3, [r3, #3]
 800b06e:	702b      	strb	r3, [r5, #0]
 800b070:	68a3      	ldr	r3, [r4, #8]
 800b072:	789b      	ldrb	r3, [r3, #2]
 800b074:	706b      	strb	r3, [r5, #1]
 800b076:	68a3      	ldr	r3, [r4, #8]
 800b078:	785b      	ldrb	r3, [r3, #1]
 800b07a:	70ab      	strb	r3, [r5, #2]
 800b07c:	68a3      	ldr	r3, [r4, #8]
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	70eb      	strb	r3, [r5, #3]
 800b082:	68a2      	ldr	r2, [r4, #8]
 800b084:	6923      	ldr	r3, [r4, #16]
 800b086:	3204      	adds	r2, #4
 800b088:	3304      	adds	r3, #4
 800b08a:	2104      	movs	r1, #4
 800b08c:	60a2      	str	r2, [r4, #8]
 800b08e:	6123      	str	r3, [r4, #16]
 800b090:	7561      	strb	r1, [r4, #21]
 800b092:	7da0      	ldrb	r0, [r4, #22]
 800b094:	f080 0001 	eor.w	r0, r0, #1
 800b098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	602b      	str	r3, [r5, #0]
 800b0a0:	e7ef      	b.n	800b082 <ucdr_deserialize_endian_uint32_t+0xbe>
 800b0a2:	68a2      	ldr	r2, [r4, #8]
 800b0a4:	6923      	ldr	r3, [r4, #16]
 800b0a6:	7da0      	ldrb	r0, [r4, #22]
 800b0a8:	f884 9015 	strb.w	r9, [r4, #21]
 800b0ac:	eba2 0208 	sub.w	r2, r2, r8
 800b0b0:	eba3 0308 	sub.w	r3, r3, r8
 800b0b4:	60a2      	str	r2, [r4, #8]
 800b0b6:	6123      	str	r3, [r4, #16]
 800b0b8:	f080 0001 	eor.w	r0, r0, #1
 800b0bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0c0:	68a3      	ldr	r3, [r4, #8]
 800b0c2:	789b      	ldrb	r3, [r3, #2]
 800b0c4:	706b      	strb	r3, [r5, #1]
 800b0c6:	1cab      	adds	r3, r5, #2
 800b0c8:	68a2      	ldr	r2, [r4, #8]
 800b0ca:	7852      	ldrb	r2, [r2, #1]
 800b0cc:	f803 2b01 	strb.w	r2, [r3], #1
 800b0d0:	68a2      	ldr	r2, [r4, #8]
 800b0d2:	7812      	ldrb	r2, [r2, #0]
 800b0d4:	701a      	strb	r2, [r3, #0]
 800b0d6:	e7b2      	b.n	800b03e <ucdr_deserialize_endian_uint32_t+0x7a>
 800b0d8:	4639      	mov	r1, r7
 800b0da:	4642      	mov	r2, r8
 800b0dc:	4628      	mov	r0, r5
 800b0de:	f00c fbde 	bl	801789e <memcpy>
 800b0e2:	68a1      	ldr	r1, [r4, #8]
 800b0e4:	4652      	mov	r2, sl
 800b0e6:	eb05 0008 	add.w	r0, r5, r8
 800b0ea:	f00c fbd8 	bl	801789e <memcpy>
 800b0ee:	e7a6      	b.n	800b03e <ucdr_deserialize_endian_uint32_t+0x7a>

0800b0f0 <ucdr_serialize_uint64_t>:
 800b0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0f4:	2108      	movs	r1, #8
 800b0f6:	b082      	sub	sp, #8
 800b0f8:	4604      	mov	r4, r0
 800b0fa:	e9cd 2300 	strd	r2, r3, [sp]
 800b0fe:	f000 fcd9 	bl	800bab4 <ucdr_buffer_alignment>
 800b102:	4601      	mov	r1, r0
 800b104:	4620      	mov	r0, r4
 800b106:	7d67      	ldrb	r7, [r4, #21]
 800b108:	f000 fd18 	bl	800bb3c <ucdr_advance_buffer>
 800b10c:	2108      	movs	r1, #8
 800b10e:	4620      	mov	r0, r4
 800b110:	f000 fc70 	bl	800b9f4 <ucdr_check_buffer_available_for>
 800b114:	2800      	cmp	r0, #0
 800b116:	d14e      	bne.n	800b1b6 <ucdr_serialize_uint64_t+0xc6>
 800b118:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b11c:	42ab      	cmp	r3, r5
 800b11e:	d945      	bls.n	800b1ac <ucdr_serialize_uint64_t+0xbc>
 800b120:	1b5e      	subs	r6, r3, r5
 800b122:	60a3      	str	r3, [r4, #8]
 800b124:	6923      	ldr	r3, [r4, #16]
 800b126:	f1c6 0808 	rsb	r8, r6, #8
 800b12a:	4433      	add	r3, r6
 800b12c:	6123      	str	r3, [r4, #16]
 800b12e:	4641      	mov	r1, r8
 800b130:	4620      	mov	r0, r4
 800b132:	f000 fc6b 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800b136:	2800      	cmp	r0, #0
 800b138:	d074      	beq.n	800b224 <ucdr_serialize_uint64_t+0x134>
 800b13a:	7d23      	ldrb	r3, [r4, #20]
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	f000 809b 	beq.w	800b278 <ucdr_serialize_uint64_t+0x188>
 800b142:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b146:	702b      	strb	r3, [r5, #0]
 800b148:	2e00      	cmp	r6, #0
 800b14a:	d078      	beq.n	800b23e <ucdr_serialize_uint64_t+0x14e>
 800b14c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b150:	706b      	strb	r3, [r5, #1]
 800b152:	2e01      	cmp	r6, #1
 800b154:	d077      	beq.n	800b246 <ucdr_serialize_uint64_t+0x156>
 800b156:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b15a:	70ab      	strb	r3, [r5, #2]
 800b15c:	2e02      	cmp	r6, #2
 800b15e:	d076      	beq.n	800b24e <ucdr_serialize_uint64_t+0x15e>
 800b160:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b164:	70eb      	strb	r3, [r5, #3]
 800b166:	2e03      	cmp	r6, #3
 800b168:	d075      	beq.n	800b256 <ucdr_serialize_uint64_t+0x166>
 800b16a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b16e:	712b      	strb	r3, [r5, #4]
 800b170:	2e04      	cmp	r6, #4
 800b172:	d074      	beq.n	800b25e <ucdr_serialize_uint64_t+0x16e>
 800b174:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b178:	716b      	strb	r3, [r5, #5]
 800b17a:	2e05      	cmp	r6, #5
 800b17c:	d073      	beq.n	800b266 <ucdr_serialize_uint64_t+0x176>
 800b17e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b182:	71ab      	strb	r3, [r5, #6]
 800b184:	2e06      	cmp	r6, #6
 800b186:	d072      	beq.n	800b26e <ucdr_serialize_uint64_t+0x17e>
 800b188:	f89d 3000 	ldrb.w	r3, [sp]
 800b18c:	71eb      	strb	r3, [r5, #7]
 800b18e:	6923      	ldr	r3, [r4, #16]
 800b190:	68a2      	ldr	r2, [r4, #8]
 800b192:	7da0      	ldrb	r0, [r4, #22]
 800b194:	3308      	adds	r3, #8
 800b196:	1b9e      	subs	r6, r3, r6
 800b198:	4442      	add	r2, r8
 800b19a:	2308      	movs	r3, #8
 800b19c:	f080 0001 	eor.w	r0, r0, #1
 800b1a0:	60a2      	str	r2, [r4, #8]
 800b1a2:	6126      	str	r6, [r4, #16]
 800b1a4:	7563      	strb	r3, [r4, #21]
 800b1a6:	b002      	add	sp, #8
 800b1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1ac:	2108      	movs	r1, #8
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	f000 fc2c 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800b1b4:	b350      	cbz	r0, 800b20c <ucdr_serialize_uint64_t+0x11c>
 800b1b6:	7d23      	ldrb	r3, [r4, #20]
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d02d      	beq.n	800b218 <ucdr_serialize_uint64_t+0x128>
 800b1bc:	68a3      	ldr	r3, [r4, #8]
 800b1be:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b1c2:	701a      	strb	r2, [r3, #0]
 800b1c4:	68a3      	ldr	r3, [r4, #8]
 800b1c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b1ca:	705a      	strb	r2, [r3, #1]
 800b1cc:	68a3      	ldr	r3, [r4, #8]
 800b1ce:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b1d2:	709a      	strb	r2, [r3, #2]
 800b1d4:	68a3      	ldr	r3, [r4, #8]
 800b1d6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b1da:	70da      	strb	r2, [r3, #3]
 800b1dc:	68a3      	ldr	r3, [r4, #8]
 800b1de:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b1e2:	711a      	strb	r2, [r3, #4]
 800b1e4:	68a3      	ldr	r3, [r4, #8]
 800b1e6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b1ea:	715a      	strb	r2, [r3, #5]
 800b1ec:	68a3      	ldr	r3, [r4, #8]
 800b1ee:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b1f2:	719a      	strb	r2, [r3, #6]
 800b1f4:	68a3      	ldr	r3, [r4, #8]
 800b1f6:	f89d 2000 	ldrb.w	r2, [sp]
 800b1fa:	71da      	strb	r2, [r3, #7]
 800b1fc:	68a2      	ldr	r2, [r4, #8]
 800b1fe:	6923      	ldr	r3, [r4, #16]
 800b200:	3208      	adds	r2, #8
 800b202:	3308      	adds	r3, #8
 800b204:	2108      	movs	r1, #8
 800b206:	60a2      	str	r2, [r4, #8]
 800b208:	6123      	str	r3, [r4, #16]
 800b20a:	7561      	strb	r1, [r4, #21]
 800b20c:	7da0      	ldrb	r0, [r4, #22]
 800b20e:	f080 0001 	eor.w	r0, r0, #1
 800b212:	b002      	add	sp, #8
 800b214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b218:	466b      	mov	r3, sp
 800b21a:	cb03      	ldmia	r3!, {r0, r1}
 800b21c:	68a3      	ldr	r3, [r4, #8]
 800b21e:	6018      	str	r0, [r3, #0]
 800b220:	6059      	str	r1, [r3, #4]
 800b222:	e7eb      	b.n	800b1fc <ucdr_serialize_uint64_t+0x10c>
 800b224:	68a2      	ldr	r2, [r4, #8]
 800b226:	6923      	ldr	r3, [r4, #16]
 800b228:	7da0      	ldrb	r0, [r4, #22]
 800b22a:	7567      	strb	r7, [r4, #21]
 800b22c:	1b92      	subs	r2, r2, r6
 800b22e:	1b9b      	subs	r3, r3, r6
 800b230:	f080 0001 	eor.w	r0, r0, #1
 800b234:	60a2      	str	r2, [r4, #8]
 800b236:	6123      	str	r3, [r4, #16]
 800b238:	b002      	add	sp, #8
 800b23a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b23e:	68a3      	ldr	r3, [r4, #8]
 800b240:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b244:	701a      	strb	r2, [r3, #0]
 800b246:	68a3      	ldr	r3, [r4, #8]
 800b248:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b24c:	701a      	strb	r2, [r3, #0]
 800b24e:	68a3      	ldr	r3, [r4, #8]
 800b250:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b254:	701a      	strb	r2, [r3, #0]
 800b256:	68a3      	ldr	r3, [r4, #8]
 800b258:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b25c:	701a      	strb	r2, [r3, #0]
 800b25e:	68a3      	ldr	r3, [r4, #8]
 800b260:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b264:	701a      	strb	r2, [r3, #0]
 800b266:	68a3      	ldr	r3, [r4, #8]
 800b268:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b26c:	701a      	strb	r2, [r3, #0]
 800b26e:	68a3      	ldr	r3, [r4, #8]
 800b270:	f89d 2000 	ldrb.w	r2, [sp]
 800b274:	701a      	strb	r2, [r3, #0]
 800b276:	e78a      	b.n	800b18e <ucdr_serialize_uint64_t+0x9e>
 800b278:	4628      	mov	r0, r5
 800b27a:	466d      	mov	r5, sp
 800b27c:	4629      	mov	r1, r5
 800b27e:	4632      	mov	r2, r6
 800b280:	f00c fb0d 	bl	801789e <memcpy>
 800b284:	68a0      	ldr	r0, [r4, #8]
 800b286:	4642      	mov	r2, r8
 800b288:	19a9      	adds	r1, r5, r6
 800b28a:	f00c fb08 	bl	801789e <memcpy>
 800b28e:	e77e      	b.n	800b18e <ucdr_serialize_uint64_t+0x9e>

0800b290 <ucdr_serialize_int16_t>:
 800b290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b294:	b082      	sub	sp, #8
 800b296:	460b      	mov	r3, r1
 800b298:	2102      	movs	r1, #2
 800b29a:	4604      	mov	r4, r0
 800b29c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b2a0:	f000 fc08 	bl	800bab4 <ucdr_buffer_alignment>
 800b2a4:	4601      	mov	r1, r0
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	7d67      	ldrb	r7, [r4, #21]
 800b2aa:	f000 fc47 	bl	800bb3c <ucdr_advance_buffer>
 800b2ae:	2102      	movs	r1, #2
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	f000 fb9f 	bl	800b9f4 <ucdr_check_buffer_available_for>
 800b2b6:	bb78      	cbnz	r0, 800b318 <ucdr_serialize_int16_t+0x88>
 800b2b8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b2bc:	42ab      	cmp	r3, r5
 800b2be:	d926      	bls.n	800b30e <ucdr_serialize_int16_t+0x7e>
 800b2c0:	1b5e      	subs	r6, r3, r5
 800b2c2:	60a3      	str	r3, [r4, #8]
 800b2c4:	6923      	ldr	r3, [r4, #16]
 800b2c6:	f1c6 0802 	rsb	r8, r6, #2
 800b2ca:	4433      	add	r3, r6
 800b2cc:	6123      	str	r3, [r4, #16]
 800b2ce:	4641      	mov	r1, r8
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	f000 fb9b 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800b2d6:	2800      	cmp	r0, #0
 800b2d8:	d03b      	beq.n	800b352 <ucdr_serialize_int16_t+0xc2>
 800b2da:	7d23      	ldrb	r3, [r4, #20]
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d04a      	beq.n	800b376 <ucdr_serialize_int16_t+0xe6>
 800b2e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b2e4:	702b      	strb	r3, [r5, #0]
 800b2e6:	2e00      	cmp	r6, #0
 800b2e8:	d040      	beq.n	800b36c <ucdr_serialize_int16_t+0xdc>
 800b2ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b2ee:	706b      	strb	r3, [r5, #1]
 800b2f0:	6923      	ldr	r3, [r4, #16]
 800b2f2:	68a2      	ldr	r2, [r4, #8]
 800b2f4:	7da0      	ldrb	r0, [r4, #22]
 800b2f6:	3302      	adds	r3, #2
 800b2f8:	1b9e      	subs	r6, r3, r6
 800b2fa:	4442      	add	r2, r8
 800b2fc:	2302      	movs	r3, #2
 800b2fe:	f080 0001 	eor.w	r0, r0, #1
 800b302:	60a2      	str	r2, [r4, #8]
 800b304:	6126      	str	r6, [r4, #16]
 800b306:	7563      	strb	r3, [r4, #21]
 800b308:	b002      	add	sp, #8
 800b30a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b30e:	2102      	movs	r1, #2
 800b310:	4620      	mov	r0, r4
 800b312:	f000 fb7b 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800b316:	b190      	cbz	r0, 800b33e <ucdr_serialize_int16_t+0xae>
 800b318:	7d23      	ldrb	r3, [r4, #20]
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	68a3      	ldr	r3, [r4, #8]
 800b31e:	d014      	beq.n	800b34a <ucdr_serialize_int16_t+0xba>
 800b320:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b324:	701a      	strb	r2, [r3, #0]
 800b326:	68a3      	ldr	r3, [r4, #8]
 800b328:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b32c:	705a      	strb	r2, [r3, #1]
 800b32e:	68a2      	ldr	r2, [r4, #8]
 800b330:	6923      	ldr	r3, [r4, #16]
 800b332:	3202      	adds	r2, #2
 800b334:	3302      	adds	r3, #2
 800b336:	2102      	movs	r1, #2
 800b338:	60a2      	str	r2, [r4, #8]
 800b33a:	6123      	str	r3, [r4, #16]
 800b33c:	7561      	strb	r1, [r4, #21]
 800b33e:	7da0      	ldrb	r0, [r4, #22]
 800b340:	f080 0001 	eor.w	r0, r0, #1
 800b344:	b002      	add	sp, #8
 800b346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b34a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b34e:	801a      	strh	r2, [r3, #0]
 800b350:	e7ed      	b.n	800b32e <ucdr_serialize_int16_t+0x9e>
 800b352:	68a2      	ldr	r2, [r4, #8]
 800b354:	6923      	ldr	r3, [r4, #16]
 800b356:	7da0      	ldrb	r0, [r4, #22]
 800b358:	7567      	strb	r7, [r4, #21]
 800b35a:	1b92      	subs	r2, r2, r6
 800b35c:	1b9b      	subs	r3, r3, r6
 800b35e:	f080 0001 	eor.w	r0, r0, #1
 800b362:	60a2      	str	r2, [r4, #8]
 800b364:	6123      	str	r3, [r4, #16]
 800b366:	b002      	add	sp, #8
 800b368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b36c:	68a3      	ldr	r3, [r4, #8]
 800b36e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b372:	701a      	strb	r2, [r3, #0]
 800b374:	e7bc      	b.n	800b2f0 <ucdr_serialize_int16_t+0x60>
 800b376:	4628      	mov	r0, r5
 800b378:	f10d 0506 	add.w	r5, sp, #6
 800b37c:	4629      	mov	r1, r5
 800b37e:	4632      	mov	r2, r6
 800b380:	f00c fa8d 	bl	801789e <memcpy>
 800b384:	68a0      	ldr	r0, [r4, #8]
 800b386:	4642      	mov	r2, r8
 800b388:	19a9      	adds	r1, r5, r6
 800b38a:	f00c fa88 	bl	801789e <memcpy>
 800b38e:	e7af      	b.n	800b2f0 <ucdr_serialize_int16_t+0x60>

0800b390 <ucdr_deserialize_int16_t>:
 800b390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b394:	460d      	mov	r5, r1
 800b396:	2102      	movs	r1, #2
 800b398:	4604      	mov	r4, r0
 800b39a:	f000 fb8b 	bl	800bab4 <ucdr_buffer_alignment>
 800b39e:	4601      	mov	r1, r0
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b3a6:	f000 fbc9 	bl	800bb3c <ucdr_advance_buffer>
 800b3aa:	2102      	movs	r1, #2
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	f000 fb21 	bl	800b9f4 <ucdr_check_buffer_available_for>
 800b3b2:	bb60      	cbnz	r0, 800b40e <ucdr_deserialize_int16_t+0x7e>
 800b3b4:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b3b8:	42be      	cmp	r6, r7
 800b3ba:	d923      	bls.n	800b404 <ucdr_deserialize_int16_t+0x74>
 800b3bc:	6923      	ldr	r3, [r4, #16]
 800b3be:	60a6      	str	r6, [r4, #8]
 800b3c0:	1bf6      	subs	r6, r6, r7
 800b3c2:	4433      	add	r3, r6
 800b3c4:	f1c6 0902 	rsb	r9, r6, #2
 800b3c8:	6123      	str	r3, [r4, #16]
 800b3ca:	4649      	mov	r1, r9
 800b3cc:	4620      	mov	r0, r4
 800b3ce:	f000 fb1d 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800b3d2:	2800      	cmp	r0, #0
 800b3d4:	d034      	beq.n	800b440 <ucdr_deserialize_int16_t+0xb0>
 800b3d6:	7d23      	ldrb	r3, [r4, #20]
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	d042      	beq.n	800b462 <ucdr_deserialize_int16_t+0xd2>
 800b3dc:	787b      	ldrb	r3, [r7, #1]
 800b3de:	702b      	strb	r3, [r5, #0]
 800b3e0:	2e00      	cmp	r6, #0
 800b3e2:	d03a      	beq.n	800b45a <ucdr_deserialize_int16_t+0xca>
 800b3e4:	783b      	ldrb	r3, [r7, #0]
 800b3e6:	706b      	strb	r3, [r5, #1]
 800b3e8:	6923      	ldr	r3, [r4, #16]
 800b3ea:	68a2      	ldr	r2, [r4, #8]
 800b3ec:	7da0      	ldrb	r0, [r4, #22]
 800b3ee:	2102      	movs	r1, #2
 800b3f0:	3302      	adds	r3, #2
 800b3f2:	444a      	add	r2, r9
 800b3f4:	1b9b      	subs	r3, r3, r6
 800b3f6:	7561      	strb	r1, [r4, #21]
 800b3f8:	60a2      	str	r2, [r4, #8]
 800b3fa:	6123      	str	r3, [r4, #16]
 800b3fc:	f080 0001 	eor.w	r0, r0, #1
 800b400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b404:	2102      	movs	r1, #2
 800b406:	4620      	mov	r0, r4
 800b408:	f000 fb00 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800b40c:	b180      	cbz	r0, 800b430 <ucdr_deserialize_int16_t+0xa0>
 800b40e:	7d23      	ldrb	r3, [r4, #20]
 800b410:	2b01      	cmp	r3, #1
 800b412:	68a3      	ldr	r3, [r4, #8]
 800b414:	d011      	beq.n	800b43a <ucdr_deserialize_int16_t+0xaa>
 800b416:	785b      	ldrb	r3, [r3, #1]
 800b418:	702b      	strb	r3, [r5, #0]
 800b41a:	68a3      	ldr	r3, [r4, #8]
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	706b      	strb	r3, [r5, #1]
 800b420:	68a2      	ldr	r2, [r4, #8]
 800b422:	6923      	ldr	r3, [r4, #16]
 800b424:	3202      	adds	r2, #2
 800b426:	3302      	adds	r3, #2
 800b428:	2102      	movs	r1, #2
 800b42a:	60a2      	str	r2, [r4, #8]
 800b42c:	6123      	str	r3, [r4, #16]
 800b42e:	7561      	strb	r1, [r4, #21]
 800b430:	7da0      	ldrb	r0, [r4, #22]
 800b432:	f080 0001 	eor.w	r0, r0, #1
 800b436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b43a:	881b      	ldrh	r3, [r3, #0]
 800b43c:	802b      	strh	r3, [r5, #0]
 800b43e:	e7ef      	b.n	800b420 <ucdr_deserialize_int16_t+0x90>
 800b440:	68a2      	ldr	r2, [r4, #8]
 800b442:	6923      	ldr	r3, [r4, #16]
 800b444:	7da0      	ldrb	r0, [r4, #22]
 800b446:	f884 8015 	strb.w	r8, [r4, #21]
 800b44a:	1b92      	subs	r2, r2, r6
 800b44c:	1b9b      	subs	r3, r3, r6
 800b44e:	60a2      	str	r2, [r4, #8]
 800b450:	6123      	str	r3, [r4, #16]
 800b452:	f080 0001 	eor.w	r0, r0, #1
 800b456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b45a:	68a3      	ldr	r3, [r4, #8]
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	706b      	strb	r3, [r5, #1]
 800b460:	e7c2      	b.n	800b3e8 <ucdr_deserialize_int16_t+0x58>
 800b462:	4639      	mov	r1, r7
 800b464:	4632      	mov	r2, r6
 800b466:	4628      	mov	r0, r5
 800b468:	f00c fa19 	bl	801789e <memcpy>
 800b46c:	68a1      	ldr	r1, [r4, #8]
 800b46e:	464a      	mov	r2, r9
 800b470:	19a8      	adds	r0, r5, r6
 800b472:	f00c fa14 	bl	801789e <memcpy>
 800b476:	e7b7      	b.n	800b3e8 <ucdr_deserialize_int16_t+0x58>

0800b478 <ucdr_serialize_int32_t>:
 800b478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b47c:	b082      	sub	sp, #8
 800b47e:	4604      	mov	r4, r0
 800b480:	9101      	str	r1, [sp, #4]
 800b482:	2104      	movs	r1, #4
 800b484:	f000 fb16 	bl	800bab4 <ucdr_buffer_alignment>
 800b488:	4601      	mov	r1, r0
 800b48a:	4620      	mov	r0, r4
 800b48c:	7d67      	ldrb	r7, [r4, #21]
 800b48e:	f000 fb55 	bl	800bb3c <ucdr_advance_buffer>
 800b492:	2104      	movs	r1, #4
 800b494:	4620      	mov	r0, r4
 800b496:	f000 faad 	bl	800b9f4 <ucdr_check_buffer_available_for>
 800b49a:	2800      	cmp	r0, #0
 800b49c:	d139      	bne.n	800b512 <ucdr_serialize_int32_t+0x9a>
 800b49e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b4a2:	42ab      	cmp	r3, r5
 800b4a4:	d930      	bls.n	800b508 <ucdr_serialize_int32_t+0x90>
 800b4a6:	1b5e      	subs	r6, r3, r5
 800b4a8:	60a3      	str	r3, [r4, #8]
 800b4aa:	6923      	ldr	r3, [r4, #16]
 800b4ac:	f1c6 0804 	rsb	r8, r6, #4
 800b4b0:	4433      	add	r3, r6
 800b4b2:	6123      	str	r3, [r4, #16]
 800b4b4:	4641      	mov	r1, r8
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	f000 faa8 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	d04c      	beq.n	800b55a <ucdr_serialize_int32_t+0xe2>
 800b4c0:	7d23      	ldrb	r3, [r4, #20]
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d063      	beq.n	800b58e <ucdr_serialize_int32_t+0x116>
 800b4c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b4ca:	702b      	strb	r3, [r5, #0]
 800b4cc:	2e00      	cmp	r6, #0
 800b4ce:	d051      	beq.n	800b574 <ucdr_serialize_int32_t+0xfc>
 800b4d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b4d4:	706b      	strb	r3, [r5, #1]
 800b4d6:	2e01      	cmp	r6, #1
 800b4d8:	d050      	beq.n	800b57c <ucdr_serialize_int32_t+0x104>
 800b4da:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b4de:	70ab      	strb	r3, [r5, #2]
 800b4e0:	2e02      	cmp	r6, #2
 800b4e2:	d04f      	beq.n	800b584 <ucdr_serialize_int32_t+0x10c>
 800b4e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b4e8:	70eb      	strb	r3, [r5, #3]
 800b4ea:	6923      	ldr	r3, [r4, #16]
 800b4ec:	68a2      	ldr	r2, [r4, #8]
 800b4ee:	7da0      	ldrb	r0, [r4, #22]
 800b4f0:	3304      	adds	r3, #4
 800b4f2:	1b9e      	subs	r6, r3, r6
 800b4f4:	4442      	add	r2, r8
 800b4f6:	2304      	movs	r3, #4
 800b4f8:	f080 0001 	eor.w	r0, r0, #1
 800b4fc:	60a2      	str	r2, [r4, #8]
 800b4fe:	6126      	str	r6, [r4, #16]
 800b500:	7563      	strb	r3, [r4, #21]
 800b502:	b002      	add	sp, #8
 800b504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b508:	2104      	movs	r1, #4
 800b50a:	4620      	mov	r0, r4
 800b50c:	f000 fa7e 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800b510:	b1d0      	cbz	r0, 800b548 <ucdr_serialize_int32_t+0xd0>
 800b512:	7d23      	ldrb	r3, [r4, #20]
 800b514:	2b01      	cmp	r3, #1
 800b516:	68a3      	ldr	r3, [r4, #8]
 800b518:	d01c      	beq.n	800b554 <ucdr_serialize_int32_t+0xdc>
 800b51a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b51e:	701a      	strb	r2, [r3, #0]
 800b520:	68a3      	ldr	r3, [r4, #8]
 800b522:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b526:	705a      	strb	r2, [r3, #1]
 800b528:	68a3      	ldr	r3, [r4, #8]
 800b52a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b52e:	709a      	strb	r2, [r3, #2]
 800b530:	68a3      	ldr	r3, [r4, #8]
 800b532:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b536:	70da      	strb	r2, [r3, #3]
 800b538:	68a2      	ldr	r2, [r4, #8]
 800b53a:	6923      	ldr	r3, [r4, #16]
 800b53c:	3204      	adds	r2, #4
 800b53e:	3304      	adds	r3, #4
 800b540:	2104      	movs	r1, #4
 800b542:	60a2      	str	r2, [r4, #8]
 800b544:	6123      	str	r3, [r4, #16]
 800b546:	7561      	strb	r1, [r4, #21]
 800b548:	7da0      	ldrb	r0, [r4, #22]
 800b54a:	f080 0001 	eor.w	r0, r0, #1
 800b54e:	b002      	add	sp, #8
 800b550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b554:	9a01      	ldr	r2, [sp, #4]
 800b556:	601a      	str	r2, [r3, #0]
 800b558:	e7ee      	b.n	800b538 <ucdr_serialize_int32_t+0xc0>
 800b55a:	68a2      	ldr	r2, [r4, #8]
 800b55c:	6923      	ldr	r3, [r4, #16]
 800b55e:	7da0      	ldrb	r0, [r4, #22]
 800b560:	7567      	strb	r7, [r4, #21]
 800b562:	1b92      	subs	r2, r2, r6
 800b564:	1b9b      	subs	r3, r3, r6
 800b566:	f080 0001 	eor.w	r0, r0, #1
 800b56a:	60a2      	str	r2, [r4, #8]
 800b56c:	6123      	str	r3, [r4, #16]
 800b56e:	b002      	add	sp, #8
 800b570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b574:	68a3      	ldr	r3, [r4, #8]
 800b576:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b57a:	701a      	strb	r2, [r3, #0]
 800b57c:	68a3      	ldr	r3, [r4, #8]
 800b57e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b582:	701a      	strb	r2, [r3, #0]
 800b584:	68a3      	ldr	r3, [r4, #8]
 800b586:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b58a:	701a      	strb	r2, [r3, #0]
 800b58c:	e7ad      	b.n	800b4ea <ucdr_serialize_int32_t+0x72>
 800b58e:	4628      	mov	r0, r5
 800b590:	ad01      	add	r5, sp, #4
 800b592:	4629      	mov	r1, r5
 800b594:	4632      	mov	r2, r6
 800b596:	f00c f982 	bl	801789e <memcpy>
 800b59a:	68a0      	ldr	r0, [r4, #8]
 800b59c:	4642      	mov	r2, r8
 800b59e:	19a9      	adds	r1, r5, r6
 800b5a0:	f00c f97d 	bl	801789e <memcpy>
 800b5a4:	e7a1      	b.n	800b4ea <ucdr_serialize_int32_t+0x72>
 800b5a6:	bf00      	nop

0800b5a8 <ucdr_deserialize_int32_t>:
 800b5a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5ac:	460d      	mov	r5, r1
 800b5ae:	2104      	movs	r1, #4
 800b5b0:	4604      	mov	r4, r0
 800b5b2:	f000 fa7f 	bl	800bab4 <ucdr_buffer_alignment>
 800b5b6:	4601      	mov	r1, r0
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b5be:	f000 fabd 	bl	800bb3c <ucdr_advance_buffer>
 800b5c2:	2104      	movs	r1, #4
 800b5c4:	4620      	mov	r0, r4
 800b5c6:	f000 fa15 	bl	800b9f4 <ucdr_check_buffer_available_for>
 800b5ca:	2800      	cmp	r0, #0
 800b5cc:	d138      	bne.n	800b640 <ucdr_deserialize_int32_t+0x98>
 800b5ce:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b5d2:	42b7      	cmp	r7, r6
 800b5d4:	d92f      	bls.n	800b636 <ucdr_deserialize_int32_t+0x8e>
 800b5d6:	6923      	ldr	r3, [r4, #16]
 800b5d8:	60a7      	str	r7, [r4, #8]
 800b5da:	1bbf      	subs	r7, r7, r6
 800b5dc:	443b      	add	r3, r7
 800b5de:	f1c7 0904 	rsb	r9, r7, #4
 800b5e2:	6123      	str	r3, [r4, #16]
 800b5e4:	4649      	mov	r1, r9
 800b5e6:	4620      	mov	r0, r4
 800b5e8:	f000 fa10 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800b5ec:	2800      	cmp	r0, #0
 800b5ee:	d046      	beq.n	800b67e <ucdr_deserialize_int32_t+0xd6>
 800b5f0:	7d23      	ldrb	r3, [r4, #20]
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d05c      	beq.n	800b6b0 <ucdr_deserialize_int32_t+0x108>
 800b5f6:	78f3      	ldrb	r3, [r6, #3]
 800b5f8:	702b      	strb	r3, [r5, #0]
 800b5fa:	2f00      	cmp	r7, #0
 800b5fc:	d04c      	beq.n	800b698 <ucdr_deserialize_int32_t+0xf0>
 800b5fe:	78b3      	ldrb	r3, [r6, #2]
 800b600:	706b      	strb	r3, [r5, #1]
 800b602:	2f01      	cmp	r7, #1
 800b604:	f105 0302 	add.w	r3, r5, #2
 800b608:	d04a      	beq.n	800b6a0 <ucdr_deserialize_int32_t+0xf8>
 800b60a:	7873      	ldrb	r3, [r6, #1]
 800b60c:	70ab      	strb	r3, [r5, #2]
 800b60e:	2f02      	cmp	r7, #2
 800b610:	f105 0303 	add.w	r3, r5, #3
 800b614:	d048      	beq.n	800b6a8 <ucdr_deserialize_int32_t+0x100>
 800b616:	7833      	ldrb	r3, [r6, #0]
 800b618:	70eb      	strb	r3, [r5, #3]
 800b61a:	6923      	ldr	r3, [r4, #16]
 800b61c:	68a2      	ldr	r2, [r4, #8]
 800b61e:	7da0      	ldrb	r0, [r4, #22]
 800b620:	2104      	movs	r1, #4
 800b622:	3304      	adds	r3, #4
 800b624:	444a      	add	r2, r9
 800b626:	1bdb      	subs	r3, r3, r7
 800b628:	7561      	strb	r1, [r4, #21]
 800b62a:	60a2      	str	r2, [r4, #8]
 800b62c:	6123      	str	r3, [r4, #16]
 800b62e:	f080 0001 	eor.w	r0, r0, #1
 800b632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b636:	2104      	movs	r1, #4
 800b638:	4620      	mov	r0, r4
 800b63a:	f000 f9e7 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800b63e:	b1b0      	cbz	r0, 800b66e <ucdr_deserialize_int32_t+0xc6>
 800b640:	7d23      	ldrb	r3, [r4, #20]
 800b642:	2b01      	cmp	r3, #1
 800b644:	68a3      	ldr	r3, [r4, #8]
 800b646:	d017      	beq.n	800b678 <ucdr_deserialize_int32_t+0xd0>
 800b648:	78db      	ldrb	r3, [r3, #3]
 800b64a:	702b      	strb	r3, [r5, #0]
 800b64c:	68a3      	ldr	r3, [r4, #8]
 800b64e:	789b      	ldrb	r3, [r3, #2]
 800b650:	706b      	strb	r3, [r5, #1]
 800b652:	68a3      	ldr	r3, [r4, #8]
 800b654:	785b      	ldrb	r3, [r3, #1]
 800b656:	70ab      	strb	r3, [r5, #2]
 800b658:	68a3      	ldr	r3, [r4, #8]
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	70eb      	strb	r3, [r5, #3]
 800b65e:	68a2      	ldr	r2, [r4, #8]
 800b660:	6923      	ldr	r3, [r4, #16]
 800b662:	3204      	adds	r2, #4
 800b664:	3304      	adds	r3, #4
 800b666:	2104      	movs	r1, #4
 800b668:	60a2      	str	r2, [r4, #8]
 800b66a:	6123      	str	r3, [r4, #16]
 800b66c:	7561      	strb	r1, [r4, #21]
 800b66e:	7da0      	ldrb	r0, [r4, #22]
 800b670:	f080 0001 	eor.w	r0, r0, #1
 800b674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	602b      	str	r3, [r5, #0]
 800b67c:	e7ef      	b.n	800b65e <ucdr_deserialize_int32_t+0xb6>
 800b67e:	68a2      	ldr	r2, [r4, #8]
 800b680:	6923      	ldr	r3, [r4, #16]
 800b682:	7da0      	ldrb	r0, [r4, #22]
 800b684:	f884 8015 	strb.w	r8, [r4, #21]
 800b688:	1bd2      	subs	r2, r2, r7
 800b68a:	1bdb      	subs	r3, r3, r7
 800b68c:	60a2      	str	r2, [r4, #8]
 800b68e:	6123      	str	r3, [r4, #16]
 800b690:	f080 0001 	eor.w	r0, r0, #1
 800b694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b698:	68a3      	ldr	r3, [r4, #8]
 800b69a:	789b      	ldrb	r3, [r3, #2]
 800b69c:	706b      	strb	r3, [r5, #1]
 800b69e:	1cab      	adds	r3, r5, #2
 800b6a0:	68a2      	ldr	r2, [r4, #8]
 800b6a2:	7852      	ldrb	r2, [r2, #1]
 800b6a4:	f803 2b01 	strb.w	r2, [r3], #1
 800b6a8:	68a2      	ldr	r2, [r4, #8]
 800b6aa:	7812      	ldrb	r2, [r2, #0]
 800b6ac:	701a      	strb	r2, [r3, #0]
 800b6ae:	e7b4      	b.n	800b61a <ucdr_deserialize_int32_t+0x72>
 800b6b0:	4631      	mov	r1, r6
 800b6b2:	463a      	mov	r2, r7
 800b6b4:	4628      	mov	r0, r5
 800b6b6:	f00c f8f2 	bl	801789e <memcpy>
 800b6ba:	68a1      	ldr	r1, [r4, #8]
 800b6bc:	464a      	mov	r2, r9
 800b6be:	19e8      	adds	r0, r5, r7
 800b6c0:	f00c f8ed 	bl	801789e <memcpy>
 800b6c4:	e7a9      	b.n	800b61a <ucdr_deserialize_int32_t+0x72>
 800b6c6:	bf00      	nop

0800b6c8 <ucdr_serialize_double>:
 800b6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6cc:	2108      	movs	r1, #8
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	4604      	mov	r4, r0
 800b6d2:	ed8d 0b00 	vstr	d0, [sp]
 800b6d6:	f000 f9ed 	bl	800bab4 <ucdr_buffer_alignment>
 800b6da:	4601      	mov	r1, r0
 800b6dc:	4620      	mov	r0, r4
 800b6de:	7d67      	ldrb	r7, [r4, #21]
 800b6e0:	f000 fa2c 	bl	800bb3c <ucdr_advance_buffer>
 800b6e4:	2108      	movs	r1, #8
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	f000 f984 	bl	800b9f4 <ucdr_check_buffer_available_for>
 800b6ec:	2800      	cmp	r0, #0
 800b6ee:	d14e      	bne.n	800b78e <ucdr_serialize_double+0xc6>
 800b6f0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b6f4:	42ab      	cmp	r3, r5
 800b6f6:	d945      	bls.n	800b784 <ucdr_serialize_double+0xbc>
 800b6f8:	1b5e      	subs	r6, r3, r5
 800b6fa:	60a3      	str	r3, [r4, #8]
 800b6fc:	6923      	ldr	r3, [r4, #16]
 800b6fe:	f1c6 0808 	rsb	r8, r6, #8
 800b702:	4433      	add	r3, r6
 800b704:	6123      	str	r3, [r4, #16]
 800b706:	4641      	mov	r1, r8
 800b708:	4620      	mov	r0, r4
 800b70a:	f000 f97f 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800b70e:	2800      	cmp	r0, #0
 800b710:	d074      	beq.n	800b7fc <ucdr_serialize_double+0x134>
 800b712:	7d23      	ldrb	r3, [r4, #20]
 800b714:	2b01      	cmp	r3, #1
 800b716:	f000 809b 	beq.w	800b850 <ucdr_serialize_double+0x188>
 800b71a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b71e:	702b      	strb	r3, [r5, #0]
 800b720:	2e00      	cmp	r6, #0
 800b722:	d078      	beq.n	800b816 <ucdr_serialize_double+0x14e>
 800b724:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b728:	706b      	strb	r3, [r5, #1]
 800b72a:	2e01      	cmp	r6, #1
 800b72c:	d077      	beq.n	800b81e <ucdr_serialize_double+0x156>
 800b72e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b732:	70ab      	strb	r3, [r5, #2]
 800b734:	2e02      	cmp	r6, #2
 800b736:	d076      	beq.n	800b826 <ucdr_serialize_double+0x15e>
 800b738:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b73c:	70eb      	strb	r3, [r5, #3]
 800b73e:	2e03      	cmp	r6, #3
 800b740:	d075      	beq.n	800b82e <ucdr_serialize_double+0x166>
 800b742:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b746:	712b      	strb	r3, [r5, #4]
 800b748:	2e04      	cmp	r6, #4
 800b74a:	d074      	beq.n	800b836 <ucdr_serialize_double+0x16e>
 800b74c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b750:	716b      	strb	r3, [r5, #5]
 800b752:	2e05      	cmp	r6, #5
 800b754:	d073      	beq.n	800b83e <ucdr_serialize_double+0x176>
 800b756:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b75a:	71ab      	strb	r3, [r5, #6]
 800b75c:	2e06      	cmp	r6, #6
 800b75e:	d072      	beq.n	800b846 <ucdr_serialize_double+0x17e>
 800b760:	f89d 3000 	ldrb.w	r3, [sp]
 800b764:	71eb      	strb	r3, [r5, #7]
 800b766:	6923      	ldr	r3, [r4, #16]
 800b768:	68a2      	ldr	r2, [r4, #8]
 800b76a:	7da0      	ldrb	r0, [r4, #22]
 800b76c:	3308      	adds	r3, #8
 800b76e:	1b9e      	subs	r6, r3, r6
 800b770:	4442      	add	r2, r8
 800b772:	2308      	movs	r3, #8
 800b774:	f080 0001 	eor.w	r0, r0, #1
 800b778:	60a2      	str	r2, [r4, #8]
 800b77a:	6126      	str	r6, [r4, #16]
 800b77c:	7563      	strb	r3, [r4, #21]
 800b77e:	b002      	add	sp, #8
 800b780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b784:	2108      	movs	r1, #8
 800b786:	4620      	mov	r0, r4
 800b788:	f000 f940 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800b78c:	b350      	cbz	r0, 800b7e4 <ucdr_serialize_double+0x11c>
 800b78e:	7d23      	ldrb	r3, [r4, #20]
 800b790:	2b01      	cmp	r3, #1
 800b792:	d02d      	beq.n	800b7f0 <ucdr_serialize_double+0x128>
 800b794:	68a3      	ldr	r3, [r4, #8]
 800b796:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b79a:	701a      	strb	r2, [r3, #0]
 800b79c:	68a3      	ldr	r3, [r4, #8]
 800b79e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b7a2:	705a      	strb	r2, [r3, #1]
 800b7a4:	68a3      	ldr	r3, [r4, #8]
 800b7a6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b7aa:	709a      	strb	r2, [r3, #2]
 800b7ac:	68a3      	ldr	r3, [r4, #8]
 800b7ae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b7b2:	70da      	strb	r2, [r3, #3]
 800b7b4:	68a3      	ldr	r3, [r4, #8]
 800b7b6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b7ba:	711a      	strb	r2, [r3, #4]
 800b7bc:	68a3      	ldr	r3, [r4, #8]
 800b7be:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b7c2:	715a      	strb	r2, [r3, #5]
 800b7c4:	68a3      	ldr	r3, [r4, #8]
 800b7c6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b7ca:	719a      	strb	r2, [r3, #6]
 800b7cc:	68a3      	ldr	r3, [r4, #8]
 800b7ce:	f89d 2000 	ldrb.w	r2, [sp]
 800b7d2:	71da      	strb	r2, [r3, #7]
 800b7d4:	68a2      	ldr	r2, [r4, #8]
 800b7d6:	6923      	ldr	r3, [r4, #16]
 800b7d8:	3208      	adds	r2, #8
 800b7da:	3308      	adds	r3, #8
 800b7dc:	2108      	movs	r1, #8
 800b7de:	60a2      	str	r2, [r4, #8]
 800b7e0:	6123      	str	r3, [r4, #16]
 800b7e2:	7561      	strb	r1, [r4, #21]
 800b7e4:	7da0      	ldrb	r0, [r4, #22]
 800b7e6:	f080 0001 	eor.w	r0, r0, #1
 800b7ea:	b002      	add	sp, #8
 800b7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7f0:	466b      	mov	r3, sp
 800b7f2:	cb03      	ldmia	r3!, {r0, r1}
 800b7f4:	68a3      	ldr	r3, [r4, #8]
 800b7f6:	6018      	str	r0, [r3, #0]
 800b7f8:	6059      	str	r1, [r3, #4]
 800b7fa:	e7eb      	b.n	800b7d4 <ucdr_serialize_double+0x10c>
 800b7fc:	68a2      	ldr	r2, [r4, #8]
 800b7fe:	6923      	ldr	r3, [r4, #16]
 800b800:	7da0      	ldrb	r0, [r4, #22]
 800b802:	7567      	strb	r7, [r4, #21]
 800b804:	1b92      	subs	r2, r2, r6
 800b806:	1b9b      	subs	r3, r3, r6
 800b808:	f080 0001 	eor.w	r0, r0, #1
 800b80c:	60a2      	str	r2, [r4, #8]
 800b80e:	6123      	str	r3, [r4, #16]
 800b810:	b002      	add	sp, #8
 800b812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b816:	68a3      	ldr	r3, [r4, #8]
 800b818:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b81c:	701a      	strb	r2, [r3, #0]
 800b81e:	68a3      	ldr	r3, [r4, #8]
 800b820:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b824:	701a      	strb	r2, [r3, #0]
 800b826:	68a3      	ldr	r3, [r4, #8]
 800b828:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b82c:	701a      	strb	r2, [r3, #0]
 800b82e:	68a3      	ldr	r3, [r4, #8]
 800b830:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b834:	701a      	strb	r2, [r3, #0]
 800b836:	68a3      	ldr	r3, [r4, #8]
 800b838:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b83c:	701a      	strb	r2, [r3, #0]
 800b83e:	68a3      	ldr	r3, [r4, #8]
 800b840:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b844:	701a      	strb	r2, [r3, #0]
 800b846:	68a3      	ldr	r3, [r4, #8]
 800b848:	f89d 2000 	ldrb.w	r2, [sp]
 800b84c:	701a      	strb	r2, [r3, #0]
 800b84e:	e78a      	b.n	800b766 <ucdr_serialize_double+0x9e>
 800b850:	4628      	mov	r0, r5
 800b852:	466d      	mov	r5, sp
 800b854:	4629      	mov	r1, r5
 800b856:	4632      	mov	r2, r6
 800b858:	f00c f821 	bl	801789e <memcpy>
 800b85c:	68a0      	ldr	r0, [r4, #8]
 800b85e:	4642      	mov	r2, r8
 800b860:	19a9      	adds	r1, r5, r6
 800b862:	f00c f81c 	bl	801789e <memcpy>
 800b866:	e77e      	b.n	800b766 <ucdr_serialize_double+0x9e>

0800b868 <ucdr_deserialize_double>:
 800b868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b86c:	460d      	mov	r5, r1
 800b86e:	2108      	movs	r1, #8
 800b870:	4604      	mov	r4, r0
 800b872:	f000 f91f 	bl	800bab4 <ucdr_buffer_alignment>
 800b876:	4601      	mov	r1, r0
 800b878:	4620      	mov	r0, r4
 800b87a:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b87e:	f000 f95d 	bl	800bb3c <ucdr_advance_buffer>
 800b882:	2108      	movs	r1, #8
 800b884:	4620      	mov	r0, r4
 800b886:	f000 f8b5 	bl	800b9f4 <ucdr_check_buffer_available_for>
 800b88a:	2800      	cmp	r0, #0
 800b88c:	d151      	bne.n	800b932 <ucdr_deserialize_double+0xca>
 800b88e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b892:	42be      	cmp	r6, r7
 800b894:	d948      	bls.n	800b928 <ucdr_deserialize_double+0xc0>
 800b896:	6923      	ldr	r3, [r4, #16]
 800b898:	60a6      	str	r6, [r4, #8]
 800b89a:	1bf6      	subs	r6, r6, r7
 800b89c:	4433      	add	r3, r6
 800b89e:	f1c6 0808 	rsb	r8, r6, #8
 800b8a2:	6123      	str	r3, [r4, #16]
 800b8a4:	4641      	mov	r1, r8
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	f000 f8b0 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800b8ac:	2800      	cmp	r0, #0
 800b8ae:	d06d      	beq.n	800b98c <ucdr_deserialize_double+0x124>
 800b8b0:	7d23      	ldrb	r3, [r4, #20]
 800b8b2:	2b01      	cmp	r3, #1
 800b8b4:	f000 8093 	beq.w	800b9de <ucdr_deserialize_double+0x176>
 800b8b8:	79fb      	ldrb	r3, [r7, #7]
 800b8ba:	702b      	strb	r3, [r5, #0]
 800b8bc:	2e00      	cmp	r6, #0
 800b8be:	d072      	beq.n	800b9a6 <ucdr_deserialize_double+0x13e>
 800b8c0:	79bb      	ldrb	r3, [r7, #6]
 800b8c2:	706b      	strb	r3, [r5, #1]
 800b8c4:	2e01      	cmp	r6, #1
 800b8c6:	f105 0302 	add.w	r3, r5, #2
 800b8ca:	d070      	beq.n	800b9ae <ucdr_deserialize_double+0x146>
 800b8cc:	797b      	ldrb	r3, [r7, #5]
 800b8ce:	70ab      	strb	r3, [r5, #2]
 800b8d0:	2e02      	cmp	r6, #2
 800b8d2:	f105 0303 	add.w	r3, r5, #3
 800b8d6:	d06e      	beq.n	800b9b6 <ucdr_deserialize_double+0x14e>
 800b8d8:	793b      	ldrb	r3, [r7, #4]
 800b8da:	70eb      	strb	r3, [r5, #3]
 800b8dc:	2e03      	cmp	r6, #3
 800b8de:	f105 0304 	add.w	r3, r5, #4
 800b8e2:	d06c      	beq.n	800b9be <ucdr_deserialize_double+0x156>
 800b8e4:	78fb      	ldrb	r3, [r7, #3]
 800b8e6:	712b      	strb	r3, [r5, #4]
 800b8e8:	2e04      	cmp	r6, #4
 800b8ea:	f105 0305 	add.w	r3, r5, #5
 800b8ee:	d06a      	beq.n	800b9c6 <ucdr_deserialize_double+0x15e>
 800b8f0:	78bb      	ldrb	r3, [r7, #2]
 800b8f2:	716b      	strb	r3, [r5, #5]
 800b8f4:	2e05      	cmp	r6, #5
 800b8f6:	f105 0306 	add.w	r3, r5, #6
 800b8fa:	d068      	beq.n	800b9ce <ucdr_deserialize_double+0x166>
 800b8fc:	787b      	ldrb	r3, [r7, #1]
 800b8fe:	71ab      	strb	r3, [r5, #6]
 800b900:	2e06      	cmp	r6, #6
 800b902:	f105 0307 	add.w	r3, r5, #7
 800b906:	d066      	beq.n	800b9d6 <ucdr_deserialize_double+0x16e>
 800b908:	783b      	ldrb	r3, [r7, #0]
 800b90a:	71eb      	strb	r3, [r5, #7]
 800b90c:	6923      	ldr	r3, [r4, #16]
 800b90e:	68a2      	ldr	r2, [r4, #8]
 800b910:	7da0      	ldrb	r0, [r4, #22]
 800b912:	3308      	adds	r3, #8
 800b914:	1b9e      	subs	r6, r3, r6
 800b916:	2308      	movs	r3, #8
 800b918:	4442      	add	r2, r8
 800b91a:	7563      	strb	r3, [r4, #21]
 800b91c:	60a2      	str	r2, [r4, #8]
 800b91e:	6126      	str	r6, [r4, #16]
 800b920:	f080 0001 	eor.w	r0, r0, #1
 800b924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b928:	2108      	movs	r1, #8
 800b92a:	4620      	mov	r0, r4
 800b92c:	f000 f86e 	bl	800ba0c <ucdr_check_final_buffer_behavior>
 800b930:	b310      	cbz	r0, 800b978 <ucdr_deserialize_double+0x110>
 800b932:	7d23      	ldrb	r3, [r4, #20]
 800b934:	2b01      	cmp	r3, #1
 800b936:	68a3      	ldr	r3, [r4, #8]
 800b938:	d023      	beq.n	800b982 <ucdr_deserialize_double+0x11a>
 800b93a:	79db      	ldrb	r3, [r3, #7]
 800b93c:	702b      	strb	r3, [r5, #0]
 800b93e:	68a3      	ldr	r3, [r4, #8]
 800b940:	799b      	ldrb	r3, [r3, #6]
 800b942:	706b      	strb	r3, [r5, #1]
 800b944:	68a3      	ldr	r3, [r4, #8]
 800b946:	795b      	ldrb	r3, [r3, #5]
 800b948:	70ab      	strb	r3, [r5, #2]
 800b94a:	68a3      	ldr	r3, [r4, #8]
 800b94c:	791b      	ldrb	r3, [r3, #4]
 800b94e:	70eb      	strb	r3, [r5, #3]
 800b950:	68a3      	ldr	r3, [r4, #8]
 800b952:	78db      	ldrb	r3, [r3, #3]
 800b954:	712b      	strb	r3, [r5, #4]
 800b956:	68a3      	ldr	r3, [r4, #8]
 800b958:	789b      	ldrb	r3, [r3, #2]
 800b95a:	716b      	strb	r3, [r5, #5]
 800b95c:	68a3      	ldr	r3, [r4, #8]
 800b95e:	785b      	ldrb	r3, [r3, #1]
 800b960:	71ab      	strb	r3, [r5, #6]
 800b962:	68a3      	ldr	r3, [r4, #8]
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	71eb      	strb	r3, [r5, #7]
 800b968:	68a2      	ldr	r2, [r4, #8]
 800b96a:	6923      	ldr	r3, [r4, #16]
 800b96c:	3208      	adds	r2, #8
 800b96e:	3308      	adds	r3, #8
 800b970:	2108      	movs	r1, #8
 800b972:	60a2      	str	r2, [r4, #8]
 800b974:	6123      	str	r3, [r4, #16]
 800b976:	7561      	strb	r1, [r4, #21]
 800b978:	7da0      	ldrb	r0, [r4, #22]
 800b97a:	f080 0001 	eor.w	r0, r0, #1
 800b97e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b982:	681a      	ldr	r2, [r3, #0]
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	606b      	str	r3, [r5, #4]
 800b988:	602a      	str	r2, [r5, #0]
 800b98a:	e7ed      	b.n	800b968 <ucdr_deserialize_double+0x100>
 800b98c:	68a2      	ldr	r2, [r4, #8]
 800b98e:	6923      	ldr	r3, [r4, #16]
 800b990:	7da0      	ldrb	r0, [r4, #22]
 800b992:	f884 9015 	strb.w	r9, [r4, #21]
 800b996:	1b92      	subs	r2, r2, r6
 800b998:	1b9b      	subs	r3, r3, r6
 800b99a:	60a2      	str	r2, [r4, #8]
 800b99c:	6123      	str	r3, [r4, #16]
 800b99e:	f080 0001 	eor.w	r0, r0, #1
 800b9a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9a6:	68a3      	ldr	r3, [r4, #8]
 800b9a8:	799b      	ldrb	r3, [r3, #6]
 800b9aa:	706b      	strb	r3, [r5, #1]
 800b9ac:	1cab      	adds	r3, r5, #2
 800b9ae:	68a2      	ldr	r2, [r4, #8]
 800b9b0:	7952      	ldrb	r2, [r2, #5]
 800b9b2:	f803 2b01 	strb.w	r2, [r3], #1
 800b9b6:	68a2      	ldr	r2, [r4, #8]
 800b9b8:	7912      	ldrb	r2, [r2, #4]
 800b9ba:	f803 2b01 	strb.w	r2, [r3], #1
 800b9be:	68a2      	ldr	r2, [r4, #8]
 800b9c0:	78d2      	ldrb	r2, [r2, #3]
 800b9c2:	f803 2b01 	strb.w	r2, [r3], #1
 800b9c6:	68a2      	ldr	r2, [r4, #8]
 800b9c8:	7892      	ldrb	r2, [r2, #2]
 800b9ca:	f803 2b01 	strb.w	r2, [r3], #1
 800b9ce:	68a2      	ldr	r2, [r4, #8]
 800b9d0:	7852      	ldrb	r2, [r2, #1]
 800b9d2:	f803 2b01 	strb.w	r2, [r3], #1
 800b9d6:	68a2      	ldr	r2, [r4, #8]
 800b9d8:	7812      	ldrb	r2, [r2, #0]
 800b9da:	701a      	strb	r2, [r3, #0]
 800b9dc:	e796      	b.n	800b90c <ucdr_deserialize_double+0xa4>
 800b9de:	4639      	mov	r1, r7
 800b9e0:	4632      	mov	r2, r6
 800b9e2:	4628      	mov	r0, r5
 800b9e4:	f00b ff5b 	bl	801789e <memcpy>
 800b9e8:	68a1      	ldr	r1, [r4, #8]
 800b9ea:	4642      	mov	r2, r8
 800b9ec:	19a8      	adds	r0, r5, r6
 800b9ee:	f00b ff56 	bl	801789e <memcpy>
 800b9f2:	e78b      	b.n	800b90c <ucdr_deserialize_double+0xa4>

0800b9f4 <ucdr_check_buffer_available_for>:
 800b9f4:	7d83      	ldrb	r3, [r0, #22]
 800b9f6:	b93b      	cbnz	r3, 800ba08 <ucdr_check_buffer_available_for+0x14>
 800b9f8:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800b9fc:	4419      	add	r1, r3
 800b9fe:	4288      	cmp	r0, r1
 800ba00:	bf34      	ite	cc
 800ba02:	2000      	movcc	r0, #0
 800ba04:	2001      	movcs	r0, #1
 800ba06:	4770      	bx	lr
 800ba08:	2000      	movs	r0, #0
 800ba0a:	4770      	bx	lr

0800ba0c <ucdr_check_final_buffer_behavior>:
 800ba0c:	7d83      	ldrb	r3, [r0, #22]
 800ba0e:	b943      	cbnz	r3, 800ba22 <ucdr_check_final_buffer_behavior+0x16>
 800ba10:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800ba14:	4291      	cmp	r1, r2
 800ba16:	b510      	push	{r4, lr}
 800ba18:	4604      	mov	r4, r0
 800ba1a:	d205      	bcs.n	800ba28 <ucdr_check_final_buffer_behavior+0x1c>
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	4618      	mov	r0, r3
 800ba20:	bd10      	pop	{r4, pc}
 800ba22:	2300      	movs	r3, #0
 800ba24:	4618      	mov	r0, r3
 800ba26:	4770      	bx	lr
 800ba28:	6982      	ldr	r2, [r0, #24]
 800ba2a:	b13a      	cbz	r2, 800ba3c <ucdr_check_final_buffer_behavior+0x30>
 800ba2c:	69c1      	ldr	r1, [r0, #28]
 800ba2e:	4790      	blx	r2
 800ba30:	f080 0301 	eor.w	r3, r0, #1
 800ba34:	b2db      	uxtb	r3, r3
 800ba36:	75a0      	strb	r0, [r4, #22]
 800ba38:	4618      	mov	r0, r3
 800ba3a:	bd10      	pop	{r4, pc}
 800ba3c:	2001      	movs	r0, #1
 800ba3e:	75a0      	strb	r0, [r4, #22]
 800ba40:	e7fa      	b.n	800ba38 <ucdr_check_final_buffer_behavior+0x2c>
 800ba42:	bf00      	nop

0800ba44 <ucdr_set_on_full_buffer_callback>:
 800ba44:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800ba48:	4770      	bx	lr
 800ba4a:	bf00      	nop

0800ba4c <ucdr_init_buffer_origin_offset_endian>:
 800ba4c:	b410      	push	{r4}
 800ba4e:	9c01      	ldr	r4, [sp, #4]
 800ba50:	6001      	str	r1, [r0, #0]
 800ba52:	440a      	add	r2, r1
 800ba54:	6042      	str	r2, [r0, #4]
 800ba56:	190a      	adds	r2, r1, r4
 800ba58:	441c      	add	r4, r3
 800ba5a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800ba5e:	6082      	str	r2, [r0, #8]
 800ba60:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800ba64:	7503      	strb	r3, [r0, #20]
 800ba66:	2200      	movs	r2, #0
 800ba68:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800ba6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba70:	7542      	strb	r2, [r0, #21]
 800ba72:	7582      	strb	r2, [r0, #22]
 800ba74:	4770      	bx	lr
 800ba76:	bf00      	nop

0800ba78 <ucdr_init_buffer_origin_offset>:
 800ba78:	b510      	push	{r4, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	9c04      	ldr	r4, [sp, #16]
 800ba7e:	9400      	str	r4, [sp, #0]
 800ba80:	2401      	movs	r4, #1
 800ba82:	9401      	str	r4, [sp, #4]
 800ba84:	f7ff ffe2 	bl	800ba4c <ucdr_init_buffer_origin_offset_endian>
 800ba88:	b002      	add	sp, #8
 800ba8a:	bd10      	pop	{r4, pc}

0800ba8c <ucdr_init_buffer_origin>:
 800ba8c:	b510      	push	{r4, lr}
 800ba8e:	b082      	sub	sp, #8
 800ba90:	2400      	movs	r4, #0
 800ba92:	9400      	str	r4, [sp, #0]
 800ba94:	f7ff fff0 	bl	800ba78 <ucdr_init_buffer_origin_offset>
 800ba98:	b002      	add	sp, #8
 800ba9a:	bd10      	pop	{r4, pc}

0800ba9c <ucdr_init_buffer>:
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	f7ff bff5 	b.w	800ba8c <ucdr_init_buffer_origin>
 800baa2:	bf00      	nop

0800baa4 <ucdr_alignment>:
 800baa4:	fbb0 f3f1 	udiv	r3, r0, r1
 800baa8:	fb03 0011 	mls	r0, r3, r1, r0
 800baac:	1a08      	subs	r0, r1, r0
 800baae:	3901      	subs	r1, #1
 800bab0:	4008      	ands	r0, r1
 800bab2:	4770      	bx	lr

0800bab4 <ucdr_buffer_alignment>:
 800bab4:	7d43      	ldrb	r3, [r0, #21]
 800bab6:	428b      	cmp	r3, r1
 800bab8:	d208      	bcs.n	800bacc <ucdr_buffer_alignment+0x18>
 800baba:	6900      	ldr	r0, [r0, #16]
 800babc:	fbb0 f3f1 	udiv	r3, r0, r1
 800bac0:	fb01 0013 	mls	r0, r1, r3, r0
 800bac4:	1a08      	subs	r0, r1, r0
 800bac6:	3901      	subs	r1, #1
 800bac8:	4008      	ands	r0, r1
 800baca:	4770      	bx	lr
 800bacc:	2000      	movs	r0, #0
 800bace:	4770      	bx	lr

0800bad0 <ucdr_align_to>:
 800bad0:	b538      	push	{r3, r4, r5, lr}
 800bad2:	4604      	mov	r4, r0
 800bad4:	460d      	mov	r5, r1
 800bad6:	f7ff ffed 	bl	800bab4 <ucdr_buffer_alignment>
 800bada:	68a3      	ldr	r3, [r4, #8]
 800badc:	6921      	ldr	r1, [r4, #16]
 800bade:	7565      	strb	r5, [r4, #21]
 800bae0:	181a      	adds	r2, r3, r0
 800bae2:	6863      	ldr	r3, [r4, #4]
 800bae4:	4293      	cmp	r3, r2
 800bae6:	4408      	add	r0, r1
 800bae8:	bf28      	it	cs
 800baea:	4613      	movcs	r3, r2
 800baec:	6120      	str	r0, [r4, #16]
 800baee:	60a3      	str	r3, [r4, #8]
 800baf0:	bd38      	pop	{r3, r4, r5, pc}
 800baf2:	bf00      	nop

0800baf4 <ucdr_buffer_length>:
 800baf4:	6882      	ldr	r2, [r0, #8]
 800baf6:	6800      	ldr	r0, [r0, #0]
 800baf8:	1a10      	subs	r0, r2, r0
 800bafa:	4770      	bx	lr

0800bafc <ucdr_buffer_remaining>:
 800bafc:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800bb00:	1a10      	subs	r0, r2, r0
 800bb02:	4770      	bx	lr

0800bb04 <ucdr_check_final_buffer_behavior_array>:
 800bb04:	b538      	push	{r3, r4, r5, lr}
 800bb06:	7d83      	ldrb	r3, [r0, #22]
 800bb08:	b963      	cbnz	r3, 800bb24 <ucdr_check_final_buffer_behavior_array+0x20>
 800bb0a:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	4604      	mov	r4, r0
 800bb12:	460d      	mov	r5, r1
 800bb14:	d308      	bcc.n	800bb28 <ucdr_check_final_buffer_behavior_array+0x24>
 800bb16:	b139      	cbz	r1, 800bb28 <ucdr_check_final_buffer_behavior_array+0x24>
 800bb18:	6983      	ldr	r3, [r0, #24]
 800bb1a:	b163      	cbz	r3, 800bb36 <ucdr_check_final_buffer_behavior_array+0x32>
 800bb1c:	69c1      	ldr	r1, [r0, #28]
 800bb1e:	4798      	blx	r3
 800bb20:	75a0      	strb	r0, [r4, #22]
 800bb22:	b108      	cbz	r0, 800bb28 <ucdr_check_final_buffer_behavior_array+0x24>
 800bb24:	2000      	movs	r0, #0
 800bb26:	bd38      	pop	{r3, r4, r5, pc}
 800bb28:	4620      	mov	r0, r4
 800bb2a:	f7ff ffe7 	bl	800bafc <ucdr_buffer_remaining>
 800bb2e:	42a8      	cmp	r0, r5
 800bb30:	bf28      	it	cs
 800bb32:	4628      	movcs	r0, r5
 800bb34:	bd38      	pop	{r3, r4, r5, pc}
 800bb36:	2301      	movs	r3, #1
 800bb38:	7583      	strb	r3, [r0, #22]
 800bb3a:	e7f3      	b.n	800bb24 <ucdr_check_final_buffer_behavior_array+0x20>

0800bb3c <ucdr_advance_buffer>:
 800bb3c:	b538      	push	{r3, r4, r5, lr}
 800bb3e:	4604      	mov	r4, r0
 800bb40:	460d      	mov	r5, r1
 800bb42:	f7ff ff57 	bl	800b9f4 <ucdr_check_buffer_available_for>
 800bb46:	b178      	cbz	r0, 800bb68 <ucdr_advance_buffer+0x2c>
 800bb48:	6923      	ldr	r3, [r4, #16]
 800bb4a:	68a2      	ldr	r2, [r4, #8]
 800bb4c:	442b      	add	r3, r5
 800bb4e:	6123      	str	r3, [r4, #16]
 800bb50:	2301      	movs	r3, #1
 800bb52:	442a      	add	r2, r5
 800bb54:	7563      	strb	r3, [r4, #21]
 800bb56:	60a2      	str	r2, [r4, #8]
 800bb58:	bd38      	pop	{r3, r4, r5, pc}
 800bb5a:	68a2      	ldr	r2, [r4, #8]
 800bb5c:	6923      	ldr	r3, [r4, #16]
 800bb5e:	4402      	add	r2, r0
 800bb60:	4403      	add	r3, r0
 800bb62:	1a2d      	subs	r5, r5, r0
 800bb64:	60a2      	str	r2, [r4, #8]
 800bb66:	6123      	str	r3, [r4, #16]
 800bb68:	4629      	mov	r1, r5
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	4620      	mov	r0, r4
 800bb6e:	f7ff ffc9 	bl	800bb04 <ucdr_check_final_buffer_behavior_array>
 800bb72:	2800      	cmp	r0, #0
 800bb74:	d1f1      	bne.n	800bb5a <ucdr_advance_buffer+0x1e>
 800bb76:	2301      	movs	r3, #1
 800bb78:	7563      	strb	r3, [r4, #21]
 800bb7a:	bd38      	pop	{r3, r4, r5, pc}

0800bb7c <rcl_get_zero_initialized_init_options>:
 800bb7c:	2000      	movs	r0, #0
 800bb7e:	4770      	bx	lr

0800bb80 <rcl_init_options_init>:
 800bb80:	b084      	sub	sp, #16
 800bb82:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb84:	b097      	sub	sp, #92	@ 0x5c
 800bb86:	ae1d      	add	r6, sp, #116	@ 0x74
 800bb88:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	d058      	beq.n	800bc42 <rcl_init_options_init+0xc2>
 800bb90:	6803      	ldr	r3, [r0, #0]
 800bb92:	4605      	mov	r5, r0
 800bb94:	b133      	cbz	r3, 800bba4 <rcl_init_options_init+0x24>
 800bb96:	2464      	movs	r4, #100	@ 0x64
 800bb98:	4620      	mov	r0, r4
 800bb9a:	b017      	add	sp, #92	@ 0x5c
 800bb9c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bba0:	b004      	add	sp, #16
 800bba2:	4770      	bx	lr
 800bba4:	4630      	mov	r0, r6
 800bba6:	f001 f931 	bl	800ce0c <rcutils_allocator_is_valid>
 800bbaa:	2800      	cmp	r0, #0
 800bbac:	d049      	beq.n	800bc42 <rcl_init_options_init+0xc2>
 800bbae:	46b4      	mov	ip, r6
 800bbb0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bbb4:	ac11      	add	r4, sp, #68	@ 0x44
 800bbb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bbb8:	f8dc 3000 	ldr.w	r3, [ip]
 800bbbc:	6023      	str	r3, [r4, #0]
 800bbbe:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800bbc0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bbc2:	2050      	movs	r0, #80	@ 0x50
 800bbc4:	4798      	blx	r3
 800bbc6:	4604      	mov	r4, r0
 800bbc8:	6028      	str	r0, [r5, #0]
 800bbca:	2800      	cmp	r0, #0
 800bbcc:	d03b      	beq.n	800bc46 <rcl_init_options_init+0xc6>
 800bbce:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800bbd2:	4686      	mov	lr, r0
 800bbd4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bbd8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bbdc:	f8dc 3000 	ldr.w	r3, [ip]
 800bbe0:	f8ce 3000 	str.w	r3, [lr]
 800bbe4:	a802      	add	r0, sp, #8
 800bbe6:	f001 f9a3 	bl	800cf30 <rmw_get_zero_initialized_init_options>
 800bbea:	f10d 0e08 	add.w	lr, sp, #8
 800bbee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bbf2:	f104 0c18 	add.w	ip, r4, #24
 800bbf6:	682f      	ldr	r7, [r5, #0]
 800bbf8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bbfc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bc00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bc04:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bc08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bc0c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800bc10:	ac20      	add	r4, sp, #128	@ 0x80
 800bc12:	e88c 0003 	stmia.w	ip, {r0, r1}
 800bc16:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bc1a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800bc1e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800bc22:	f107 0018 	add.w	r0, r7, #24
 800bc26:	f001 f9b1 	bl	800cf8c <rmw_init_options_init>
 800bc2a:	4604      	mov	r4, r0
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	d0b3      	beq.n	800bb98 <rcl_init_options_init+0x18>
 800bc30:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800bc32:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800bc34:	6828      	ldr	r0, [r5, #0]
 800bc36:	4798      	blx	r3
 800bc38:	4620      	mov	r0, r4
 800bc3a:	f005 ff6b 	bl	8011b14 <rcl_convert_rmw_ret_to_rcl_ret>
 800bc3e:	4604      	mov	r4, r0
 800bc40:	e7aa      	b.n	800bb98 <rcl_init_options_init+0x18>
 800bc42:	240b      	movs	r4, #11
 800bc44:	e7a8      	b.n	800bb98 <rcl_init_options_init+0x18>
 800bc46:	240a      	movs	r4, #10
 800bc48:	e7a6      	b.n	800bb98 <rcl_init_options_init+0x18>
 800bc4a:	bf00      	nop

0800bc4c <rcl_init_options_fini>:
 800bc4c:	b530      	push	{r4, r5, lr}
 800bc4e:	b087      	sub	sp, #28
 800bc50:	b1f0      	cbz	r0, 800bc90 <rcl_init_options_fini+0x44>
 800bc52:	6803      	ldr	r3, [r0, #0]
 800bc54:	4604      	mov	r4, r0
 800bc56:	b1db      	cbz	r3, 800bc90 <rcl_init_options_fini+0x44>
 800bc58:	469c      	mov	ip, r3
 800bc5a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bc5e:	f10d 0e04 	add.w	lr, sp, #4
 800bc62:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bc66:	f8dc 3000 	ldr.w	r3, [ip]
 800bc6a:	f8ce 3000 	str.w	r3, [lr]
 800bc6e:	a801      	add	r0, sp, #4
 800bc70:	f001 f8cc 	bl	800ce0c <rcutils_allocator_is_valid>
 800bc74:	b160      	cbz	r0, 800bc90 <rcl_init_options_fini+0x44>
 800bc76:	6820      	ldr	r0, [r4, #0]
 800bc78:	3018      	adds	r0, #24
 800bc7a:	f001 fa37 	bl	800d0ec <rmw_init_options_fini>
 800bc7e:	4605      	mov	r5, r0
 800bc80:	b950      	cbnz	r0, 800bc98 <rcl_init_options_fini+0x4c>
 800bc82:	6820      	ldr	r0, [r4, #0]
 800bc84:	9b02      	ldr	r3, [sp, #8]
 800bc86:	9905      	ldr	r1, [sp, #20]
 800bc88:	4798      	blx	r3
 800bc8a:	4628      	mov	r0, r5
 800bc8c:	b007      	add	sp, #28
 800bc8e:	bd30      	pop	{r4, r5, pc}
 800bc90:	250b      	movs	r5, #11
 800bc92:	4628      	mov	r0, r5
 800bc94:	b007      	add	sp, #28
 800bc96:	bd30      	pop	{r4, r5, pc}
 800bc98:	f005 ff3c 	bl	8011b14 <rcl_convert_rmw_ret_to_rcl_ret>
 800bc9c:	4605      	mov	r5, r0
 800bc9e:	e7f8      	b.n	800bc92 <rcl_init_options_fini+0x46>

0800bca0 <rcl_init_options_copy>:
 800bca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bca4:	b094      	sub	sp, #80	@ 0x50
 800bca6:	2800      	cmp	r0, #0
 800bca8:	d058      	beq.n	800bd5c <rcl_init_options_copy+0xbc>
 800bcaa:	4604      	mov	r4, r0
 800bcac:	6800      	ldr	r0, [r0, #0]
 800bcae:	2800      	cmp	r0, #0
 800bcb0:	d054      	beq.n	800bd5c <rcl_init_options_copy+0xbc>
 800bcb2:	460e      	mov	r6, r1
 800bcb4:	f001 f8aa 	bl	800ce0c <rcutils_allocator_is_valid>
 800bcb8:	2800      	cmp	r0, #0
 800bcba:	d04f      	beq.n	800bd5c <rcl_init_options_copy+0xbc>
 800bcbc:	2e00      	cmp	r6, #0
 800bcbe:	d04d      	beq.n	800bd5c <rcl_init_options_copy+0xbc>
 800bcc0:	6833      	ldr	r3, [r6, #0]
 800bcc2:	b123      	cbz	r3, 800bcce <rcl_init_options_copy+0x2e>
 800bcc4:	2464      	movs	r4, #100	@ 0x64
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	b014      	add	sp, #80	@ 0x50
 800bcca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcce:	6827      	ldr	r7, [r4, #0]
 800bcd0:	46bc      	mov	ip, r7
 800bcd2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bcd6:	ad0f      	add	r5, sp, #60	@ 0x3c
 800bcd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bcda:	f8dc 3000 	ldr.w	r3, [ip]
 800bcde:	f8d7 8000 	ldr.w	r8, [r7]
 800bce2:	602b      	str	r3, [r5, #0]
 800bce4:	4619      	mov	r1, r3
 800bce6:	2050      	movs	r0, #80	@ 0x50
 800bce8:	47c0      	blx	r8
 800bcea:	4605      	mov	r5, r0
 800bcec:	6030      	str	r0, [r6, #0]
 800bcee:	b3d0      	cbz	r0, 800bd66 <rcl_init_options_copy+0xc6>
 800bcf0:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800bcf4:	4686      	mov	lr, r0
 800bcf6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bcfa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bcfe:	f8dc 3000 	ldr.w	r3, [ip]
 800bd02:	f8ce 3000 	str.w	r3, [lr]
 800bd06:	4668      	mov	r0, sp
 800bd08:	f001 f912 	bl	800cf30 <rmw_get_zero_initialized_init_options>
 800bd0c:	46ee      	mov	lr, sp
 800bd0e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bd12:	f105 0c18 	add.w	ip, r5, #24
 800bd16:	6824      	ldr	r4, [r4, #0]
 800bd18:	6835      	ldr	r5, [r6, #0]
 800bd1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bd1e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bd22:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bd26:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bd2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bd2e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800bd32:	e88c 0003 	stmia.w	ip, {r0, r1}
 800bd36:	f104 0018 	add.w	r0, r4, #24
 800bd3a:	f105 0118 	add.w	r1, r5, #24
 800bd3e:	f001 f98d 	bl	800d05c <rmw_init_options_copy>
 800bd42:	4604      	mov	r4, r0
 800bd44:	2800      	cmp	r0, #0
 800bd46:	d0be      	beq.n	800bcc6 <rcl_init_options_copy+0x26>
 800bd48:	f001 f86e 	bl	800ce28 <rcutils_get_error_string>
 800bd4c:	f001 f884 	bl	800ce58 <rcutils_reset_error>
 800bd50:	4630      	mov	r0, r6
 800bd52:	f7ff ff7b 	bl	800bc4c <rcl_init_options_fini>
 800bd56:	b140      	cbz	r0, 800bd6a <rcl_init_options_copy+0xca>
 800bd58:	4604      	mov	r4, r0
 800bd5a:	e7b4      	b.n	800bcc6 <rcl_init_options_copy+0x26>
 800bd5c:	240b      	movs	r4, #11
 800bd5e:	4620      	mov	r0, r4
 800bd60:	b014      	add	sp, #80	@ 0x50
 800bd62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd66:	240a      	movs	r4, #10
 800bd68:	e7ad      	b.n	800bcc6 <rcl_init_options_copy+0x26>
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	b014      	add	sp, #80	@ 0x50
 800bd6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd72:	f005 becf 	b.w	8011b14 <rcl_convert_rmw_ret_to_rcl_ret>
 800bd76:	bf00      	nop

0800bd78 <rcl_init_options_set_domain_id>:
 800bd78:	b120      	cbz	r0, 800bd84 <rcl_init_options_set_domain_id+0xc>
 800bd7a:	6803      	ldr	r3, [r0, #0]
 800bd7c:	b113      	cbz	r3, 800bd84 <rcl_init_options_set_domain_id+0xc>
 800bd7e:	6259      	str	r1, [r3, #36]	@ 0x24
 800bd80:	2000      	movs	r0, #0
 800bd82:	4770      	bx	lr
 800bd84:	200b      	movs	r0, #11
 800bd86:	4770      	bx	lr

0800bd88 <rcl_get_zero_initialized_publisher>:
 800bd88:	4b01      	ldr	r3, [pc, #4]	@ (800bd90 <rcl_get_zero_initialized_publisher+0x8>)
 800bd8a:	6818      	ldr	r0, [r3, #0]
 800bd8c:	4770      	bx	lr
 800bd8e:	bf00      	nop
 800bd90:	08018928 	.word	0x08018928

0800bd94 <rcl_publisher_init>:
 800bd94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd98:	b088      	sub	sp, #32
 800bd9a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800bd9c:	2d00      	cmp	r5, #0
 800bd9e:	d069      	beq.n	800be74 <rcl_publisher_init+0xe0>
 800bda0:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800bda4:	4604      	mov	r4, r0
 800bda6:	4648      	mov	r0, r9
 800bda8:	460e      	mov	r6, r1
 800bdaa:	4690      	mov	r8, r2
 800bdac:	461f      	mov	r7, r3
 800bdae:	f001 f82d 	bl	800ce0c <rcutils_allocator_is_valid>
 800bdb2:	2800      	cmp	r0, #0
 800bdb4:	d05e      	beq.n	800be74 <rcl_publisher_init+0xe0>
 800bdb6:	2c00      	cmp	r4, #0
 800bdb8:	d05c      	beq.n	800be74 <rcl_publisher_init+0xe0>
 800bdba:	f8d4 a000 	ldr.w	sl, [r4]
 800bdbe:	f1ba 0f00 	cmp.w	sl, #0
 800bdc2:	d004      	beq.n	800bdce <rcl_publisher_init+0x3a>
 800bdc4:	2764      	movs	r7, #100	@ 0x64
 800bdc6:	4638      	mov	r0, r7
 800bdc8:	b008      	add	sp, #32
 800bdca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdce:	4630      	mov	r0, r6
 800bdd0:	f006 f99a 	bl	8012108 <rcl_node_is_valid>
 800bdd4:	2800      	cmp	r0, #0
 800bdd6:	d052      	beq.n	800be7e <rcl_publisher_init+0xea>
 800bdd8:	f1b8 0f00 	cmp.w	r8, #0
 800bddc:	d04a      	beq.n	800be74 <rcl_publisher_init+0xe0>
 800bdde:	2f00      	cmp	r7, #0
 800bde0:	d048      	beq.n	800be74 <rcl_publisher_init+0xe0>
 800bde2:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800bde6:	aa07      	add	r2, sp, #28
 800bde8:	9205      	str	r2, [sp, #20]
 800bdea:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800bdee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bdf2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800bdf6:	f8cd a01c 	str.w	sl, [sp, #28]
 800bdfa:	4639      	mov	r1, r7
 800bdfc:	e899 000c 	ldmia.w	r9, {r2, r3}
 800be00:	4630      	mov	r0, r6
 800be02:	f006 f9d5 	bl	80121b0 <rcl_node_resolve_name>
 800be06:	4607      	mov	r7, r0
 800be08:	2800      	cmp	r0, #0
 800be0a:	d14f      	bne.n	800beac <rcl_publisher_init+0x118>
 800be0c:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800be0e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800be10:	20c8      	movs	r0, #200	@ 0xc8
 800be12:	4798      	blx	r3
 800be14:	6020      	str	r0, [r4, #0]
 800be16:	2800      	cmp	r0, #0
 800be18:	d04e      	beq.n	800beb8 <rcl_publisher_init+0x124>
 800be1a:	4630      	mov	r0, r6
 800be1c:	f006 f996 	bl	801214c <rcl_node_get_rmw_handle>
 800be20:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800be24:	9300      	str	r3, [sp, #0]
 800be26:	9a07      	ldr	r2, [sp, #28]
 800be28:	6827      	ldr	r7, [r4, #0]
 800be2a:	462b      	mov	r3, r5
 800be2c:	4641      	mov	r1, r8
 800be2e:	f001 fc85 	bl	800d73c <rmw_create_publisher>
 800be32:	6823      	ldr	r3, [r4, #0]
 800be34:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800be38:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800be3c:	b370      	cbz	r0, 800be9c <rcl_publisher_init+0x108>
 800be3e:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800be42:	f001 fd59 	bl	800d8f8 <rmw_publisher_get_actual_qos>
 800be46:	6823      	ldr	r3, [r4, #0]
 800be48:	4607      	mov	r7, r0
 800be4a:	b9d0      	cbnz	r0, 800be82 <rcl_publisher_init+0xee>
 800be4c:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800be50:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800be54:	4629      	mov	r1, r5
 800be56:	2270      	movs	r2, #112	@ 0x70
 800be58:	4618      	mov	r0, r3
 800be5a:	f00b fd20 	bl	801789e <memcpy>
 800be5e:	6832      	ldr	r2, [r6, #0]
 800be60:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800be64:	9807      	ldr	r0, [sp, #28]
 800be66:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800be68:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800be6a:	4798      	blx	r3
 800be6c:	4638      	mov	r0, r7
 800be6e:	b008      	add	sp, #32
 800be70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be74:	270b      	movs	r7, #11
 800be76:	4638      	mov	r0, r7
 800be78:	b008      	add	sp, #32
 800be7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be7e:	27c8      	movs	r7, #200	@ 0xc8
 800be80:	e7a1      	b.n	800bdc6 <rcl_publisher_init+0x32>
 800be82:	b18b      	cbz	r3, 800bea8 <rcl_publisher_init+0x114>
 800be84:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800be88:	b142      	cbz	r2, 800be9c <rcl_publisher_init+0x108>
 800be8a:	4630      	mov	r0, r6
 800be8c:	f006 f95e 	bl	801214c <rcl_node_get_rmw_handle>
 800be90:	6823      	ldr	r3, [r4, #0]
 800be92:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800be96:	f001 fd3f 	bl	800d918 <rmw_destroy_publisher>
 800be9a:	6823      	ldr	r3, [r4, #0]
 800be9c:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800be9e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800bea0:	4618      	mov	r0, r3
 800bea2:	4790      	blx	r2
 800bea4:	2300      	movs	r3, #0
 800bea6:	6023      	str	r3, [r4, #0]
 800bea8:	2701      	movs	r7, #1
 800beaa:	e7db      	b.n	800be64 <rcl_publisher_init+0xd0>
 800beac:	2867      	cmp	r0, #103	@ 0x67
 800beae:	d0d9      	beq.n	800be64 <rcl_publisher_init+0xd0>
 800beb0:	2869      	cmp	r0, #105	@ 0x69
 800beb2:	d003      	beq.n	800bebc <rcl_publisher_init+0x128>
 800beb4:	280a      	cmp	r0, #10
 800beb6:	d1f7      	bne.n	800bea8 <rcl_publisher_init+0x114>
 800beb8:	270a      	movs	r7, #10
 800beba:	e7d3      	b.n	800be64 <rcl_publisher_init+0xd0>
 800bebc:	2767      	movs	r7, #103	@ 0x67
 800bebe:	e7d1      	b.n	800be64 <rcl_publisher_init+0xd0>

0800bec0 <rcl_publisher_get_default_options>:
 800bec0:	b570      	push	{r4, r5, r6, lr}
 800bec2:	4d14      	ldr	r5, [pc, #80]	@ (800bf14 <rcl_publisher_get_default_options+0x54>)
 800bec4:	4914      	ldr	r1, [pc, #80]	@ (800bf18 <rcl_publisher_get_default_options+0x58>)
 800bec6:	b088      	sub	sp, #32
 800bec8:	4604      	mov	r4, r0
 800beca:	2250      	movs	r2, #80	@ 0x50
 800becc:	4628      	mov	r0, r5
 800bece:	f00b fce6 	bl	801789e <memcpy>
 800bed2:	a802      	add	r0, sp, #8
 800bed4:	f000 ff8c 	bl	800cdf0 <rcutils_get_default_allocator>
 800bed8:	f10d 0c08 	add.w	ip, sp, #8
 800bedc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bee0:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800bee4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800bee8:	466e      	mov	r6, sp
 800beea:	f8dc 3000 	ldr.w	r3, [ip]
 800beee:	f8ce 3000 	str.w	r3, [lr]
 800bef2:	4630      	mov	r0, r6
 800bef4:	f001 f82c 	bl	800cf50 <rmw_get_default_publisher_options>
 800bef8:	e896 0003 	ldmia.w	r6, {r0, r1}
 800befc:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800bf00:	e883 0003 	stmia.w	r3, {r0, r1}
 800bf04:	2270      	movs	r2, #112	@ 0x70
 800bf06:	4629      	mov	r1, r5
 800bf08:	4620      	mov	r0, r4
 800bf0a:	f00b fcc8 	bl	801789e <memcpy>
 800bf0e:	4620      	mov	r0, r4
 800bf10:	b008      	add	sp, #32
 800bf12:	bd70      	pop	{r4, r5, r6, pc}
 800bf14:	20006230 	.word	0x20006230
 800bf18:	08018930 	.word	0x08018930

0800bf1c <rcl_publish>:
 800bf1c:	b1f8      	cbz	r0, 800bf5e <rcl_publish+0x42>
 800bf1e:	6803      	ldr	r3, [r0, #0]
 800bf20:	b570      	push	{r4, r5, r6, lr}
 800bf22:	4604      	mov	r4, r0
 800bf24:	b1b3      	cbz	r3, 800bf54 <rcl_publish+0x38>
 800bf26:	4616      	mov	r6, r2
 800bf28:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800bf2c:	b192      	cbz	r2, 800bf54 <rcl_publish+0x38>
 800bf2e:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800bf32:	460d      	mov	r5, r1
 800bf34:	f005 fe0c 	bl	8011b50 <rcl_context_is_valid>
 800bf38:	b160      	cbz	r0, 800bf54 <rcl_publish+0x38>
 800bf3a:	6823      	ldr	r3, [r4, #0]
 800bf3c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800bf40:	b140      	cbz	r0, 800bf54 <rcl_publish+0x38>
 800bf42:	b155      	cbz	r5, 800bf5a <rcl_publish+0x3e>
 800bf44:	4632      	mov	r2, r6
 800bf46:	4629      	mov	r1, r5
 800bf48:	f001 fb98 	bl	800d67c <rmw_publish>
 800bf4c:	3800      	subs	r0, #0
 800bf4e:	bf18      	it	ne
 800bf50:	2001      	movne	r0, #1
 800bf52:	bd70      	pop	{r4, r5, r6, pc}
 800bf54:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800bf58:	bd70      	pop	{r4, r5, r6, pc}
 800bf5a:	200b      	movs	r0, #11
 800bf5c:	bd70      	pop	{r4, r5, r6, pc}
 800bf5e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800bf62:	4770      	bx	lr

0800bf64 <rcl_publisher_is_valid>:
 800bf64:	b1a0      	cbz	r0, 800bf90 <rcl_publisher_is_valid+0x2c>
 800bf66:	6803      	ldr	r3, [r0, #0]
 800bf68:	b510      	push	{r4, lr}
 800bf6a:	4604      	mov	r4, r0
 800bf6c:	b173      	cbz	r3, 800bf8c <rcl_publisher_is_valid+0x28>
 800bf6e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800bf72:	b15a      	cbz	r2, 800bf8c <rcl_publisher_is_valid+0x28>
 800bf74:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800bf78:	f005 fdea 	bl	8011b50 <rcl_context_is_valid>
 800bf7c:	b130      	cbz	r0, 800bf8c <rcl_publisher_is_valid+0x28>
 800bf7e:	6823      	ldr	r3, [r4, #0]
 800bf80:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800bf84:	3800      	subs	r0, #0
 800bf86:	bf18      	it	ne
 800bf88:	2001      	movne	r0, #1
 800bf8a:	bd10      	pop	{r4, pc}
 800bf8c:	2000      	movs	r0, #0
 800bf8e:	bd10      	pop	{r4, pc}
 800bf90:	2000      	movs	r0, #0
 800bf92:	4770      	bx	lr

0800bf94 <rcl_publisher_is_valid_except_context>:
 800bf94:	b130      	cbz	r0, 800bfa4 <rcl_publisher_is_valid_except_context+0x10>
 800bf96:	6800      	ldr	r0, [r0, #0]
 800bf98:	b120      	cbz	r0, 800bfa4 <rcl_publisher_is_valid_except_context+0x10>
 800bf9a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800bf9e:	3800      	subs	r0, #0
 800bfa0:	bf18      	it	ne
 800bfa2:	2001      	movne	r0, #1
 800bfa4:	4770      	bx	lr
 800bfa6:	bf00      	nop

0800bfa8 <_rclc_check_for_new_data>:
 800bfa8:	2800      	cmp	r0, #0
 800bfaa:	d046      	beq.n	800c03a <_rclc_check_for_new_data+0x92>
 800bfac:	b510      	push	{r4, lr}
 800bfae:	7802      	ldrb	r2, [r0, #0]
 800bfb0:	b084      	sub	sp, #16
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	2a0a      	cmp	r2, #10
 800bfb6:	d842      	bhi.n	800c03e <_rclc_check_for_new_data+0x96>
 800bfb8:	e8df f002 	tbb	[pc, r2]
 800bfbc:	14181212 	.word	0x14181212
 800bfc0:	06060614 	.word	0x06060614
 800bfc4:	2e1a      	.short	0x2e1a
 800bfc6:	16          	.byte	0x16
 800bfc7:	00          	.byte	0x00
 800bfc8:	6a0a      	ldr	r2, [r1, #32]
 800bfca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800bfcc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800bfd0:	2000      	movs	r0, #0
 800bfd2:	1a12      	subs	r2, r2, r0
 800bfd4:	bf18      	it	ne
 800bfd6:	2201      	movne	r2, #1
 800bfd8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800bfdc:	b004      	add	sp, #16
 800bfde:	bd10      	pop	{r4, pc}
 800bfe0:	680a      	ldr	r2, [r1, #0]
 800bfe2:	e7f2      	b.n	800bfca <_rclc_check_for_new_data+0x22>
 800bfe4:	698a      	ldr	r2, [r1, #24]
 800bfe6:	e7f0      	b.n	800bfca <_rclc_check_for_new_data+0x22>
 800bfe8:	688a      	ldr	r2, [r1, #8]
 800bfea:	e7ee      	b.n	800bfca <_rclc_check_for_new_data+0x22>
 800bfec:	690a      	ldr	r2, [r1, #16]
 800bfee:	e7ec      	b.n	800bfca <_rclc_check_for_new_data+0x22>
 800bff0:	685c      	ldr	r4, [r3, #4]
 800bff2:	4608      	mov	r0, r1
 800bff4:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800bff8:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800bffc:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800c000:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800c004:	9300      	str	r3, [sp, #0]
 800c006:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800c00a:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800c00e:	f104 0110 	add.w	r1, r4, #16
 800c012:	f007 fec9 	bl	8013da8 <rcl_action_client_wait_set_get_entities_ready>
 800c016:	e7e1      	b.n	800bfdc <_rclc_check_for_new_data+0x34>
 800c018:	685c      	ldr	r4, [r3, #4]
 800c01a:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800c01e:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800c022:	e9cd 3200 	strd	r3, r2, [sp]
 800c026:	4608      	mov	r0, r1
 800c028:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800c02c:	f104 0220 	add.w	r2, r4, #32
 800c030:	f104 0110 	add.w	r1, r4, #16
 800c034:	f008 f8d0 	bl	80141d8 <rcl_action_server_wait_set_get_entities_ready>
 800c038:	e7d0      	b.n	800bfdc <_rclc_check_for_new_data+0x34>
 800c03a:	200b      	movs	r0, #11
 800c03c:	4770      	bx	lr
 800c03e:	2001      	movs	r0, #1
 800c040:	e7cc      	b.n	800bfdc <_rclc_check_for_new_data+0x34>
 800c042:	bf00      	nop

0800c044 <_rclc_take_new_data>:
 800c044:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c046:	b09b      	sub	sp, #108	@ 0x6c
 800c048:	2800      	cmp	r0, #0
 800c04a:	f000 8088 	beq.w	800c15e <_rclc_take_new_data+0x11a>
 800c04e:	7803      	ldrb	r3, [r0, #0]
 800c050:	4604      	mov	r4, r0
 800c052:	2b0a      	cmp	r3, #10
 800c054:	f200 8167 	bhi.w	800c326 <_rclc_take_new_data+0x2e2>
 800c058:	e8df f003 	tbb	[pc, r3]
 800c05c:	44152d2d 	.word	0x44152d2d
 800c060:	19191944 	.word	0x19191944
 800c064:	065a      	.short	0x065a
 800c066:	15          	.byte	0x15
 800c067:	00          	.byte	0x00
 800c068:	6840      	ldr	r0, [r0, #4]
 800c06a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	f040 80b2 	bne.w	800c1d8 <_rclc_take_new_data+0x194>
 800c074:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800c078:	2b00      	cmp	r3, #0
 800c07a:	f040 80e4 	bne.w	800c246 <_rclc_take_new_data+0x202>
 800c07e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c082:	2b00      	cmp	r3, #0
 800c084:	d16f      	bne.n	800c166 <_rclc_take_new_data+0x122>
 800c086:	2500      	movs	r5, #0
 800c088:	4628      	mov	r0, r5
 800c08a:	b01b      	add	sp, #108	@ 0x6c
 800c08c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c08e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c090:	6a0b      	ldr	r3, [r1, #32]
 800c092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d0f5      	beq.n	800c086 <_rclc_take_new_data+0x42>
 800c09a:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c09e:	f104 0110 	add.w	r1, r4, #16
 800c0a2:	f006 fa2f 	bl	8012504 <rcl_take_request>
 800c0a6:	4605      	mov	r5, r0
 800c0a8:	2800      	cmp	r0, #0
 800c0aa:	d0ec      	beq.n	800c086 <_rclc_take_new_data+0x42>
 800c0ac:	f240 2359 	movw	r3, #601	@ 0x259
 800c0b0:	4298      	cmp	r0, r3
 800c0b2:	d013      	beq.n	800c0dc <_rclc_take_new_data+0x98>
 800c0b4:	e029      	b.n	800c10a <_rclc_take_new_data+0xc6>
 800c0b6:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c0b8:	680b      	ldr	r3, [r1, #0]
 800c0ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d0e1      	beq.n	800c086 <_rclc_take_new_data+0x42>
 800c0c2:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	aa0a      	add	r2, sp, #40	@ 0x28
 800c0ca:	f006 fa7d 	bl	80125c8 <rcl_take>
 800c0ce:	4605      	mov	r5, r0
 800c0d0:	2800      	cmp	r0, #0
 800c0d2:	d0d9      	beq.n	800c088 <_rclc_take_new_data+0x44>
 800c0d4:	f240 1391 	movw	r3, #401	@ 0x191
 800c0d8:	4298      	cmp	r0, r3
 800c0da:	d116      	bne.n	800c10a <_rclc_take_new_data+0xc6>
 800c0dc:	2300      	movs	r3, #0
 800c0de:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800c0e2:	e7d1      	b.n	800c088 <_rclc_take_new_data+0x44>
 800c0e4:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c0e6:	698b      	ldr	r3, [r1, #24]
 800c0e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d0ca      	beq.n	800c086 <_rclc_take_new_data+0x42>
 800c0f0:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c0f4:	f104 0110 	add.w	r1, r4, #16
 800c0f8:	f005 fcba 	bl	8011a70 <rcl_take_response>
 800c0fc:	4605      	mov	r5, r0
 800c0fe:	2800      	cmp	r0, #0
 800c100:	d0c1      	beq.n	800c086 <_rclc_take_new_data+0x42>
 800c102:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800c106:	4298      	cmp	r0, r3
 800c108:	d0be      	beq.n	800c088 <_rclc_take_new_data+0x44>
 800c10a:	f000 fea5 	bl	800ce58 <rcutils_reset_error>
 800c10e:	e7bb      	b.n	800c088 <_rclc_take_new_data+0x44>
 800c110:	6840      	ldr	r0, [r0, #4]
 800c112:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c116:	2b00      	cmp	r3, #0
 800c118:	d17d      	bne.n	800c216 <_rclc_take_new_data+0x1d2>
 800c11a:	69c3      	ldr	r3, [r0, #28]
 800c11c:	b11b      	cbz	r3, 800c126 <_rclc_take_new_data+0xe2>
 800c11e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c122:	2b00      	cmp	r3, #0
 800c124:	d144      	bne.n	800c1b0 <_rclc_take_new_data+0x16c>
 800c126:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	f040 80ac 	bne.w	800c288 <_rclc_take_new_data+0x244>
 800c130:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c134:	2b00      	cmp	r3, #0
 800c136:	d0a6      	beq.n	800c086 <_rclc_take_new_data+0x42>
 800c138:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800c13a:	a90a      	add	r1, sp, #40	@ 0x28
 800c13c:	3010      	adds	r0, #16
 800c13e:	f007 fd0b 	bl	8013b58 <rcl_action_take_result_response>
 800c142:	4605      	mov	r5, r0
 800c144:	2800      	cmp	r0, #0
 800c146:	d1e0      	bne.n	800c10a <_rclc_take_new_data+0xc6>
 800c148:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c14c:	6860      	ldr	r0, [r4, #4]
 800c14e:	f008 f967 	bl	8014420 <rclc_action_find_handle_by_result_request_sequence_number>
 800c152:	2800      	cmp	r0, #0
 800c154:	d098      	beq.n	800c088 <_rclc_take_new_data+0x44>
 800c156:	2301      	movs	r3, #1
 800c158:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800c15c:	e794      	b.n	800c088 <_rclc_take_new_data+0x44>
 800c15e:	250b      	movs	r5, #11
 800c160:	4628      	mov	r0, r5
 800c162:	b01b      	add	sp, #108	@ 0x6c
 800c164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c166:	ae04      	add	r6, sp, #16
 800c168:	aa0a      	add	r2, sp, #40	@ 0x28
 800c16a:	3010      	adds	r0, #16
 800c16c:	4631      	mov	r1, r6
 800c16e:	f007 ff67 	bl	8014040 <rcl_action_take_cancel_request>
 800c172:	4605      	mov	r5, r0
 800c174:	2800      	cmp	r0, #0
 800c176:	d1c8      	bne.n	800c10a <_rclc_take_new_data+0xc6>
 800c178:	6860      	ldr	r0, [r4, #4]
 800c17a:	a90a      	add	r1, sp, #40	@ 0x28
 800c17c:	f008 f90e 	bl	801439c <rclc_action_find_goal_handle_by_uuid>
 800c180:	4607      	mov	r7, r0
 800c182:	2800      	cmp	r0, #0
 800c184:	f000 80bb 	beq.w	800c2fe <_rclc_take_new_data+0x2ba>
 800c188:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800c18c:	2101      	movs	r1, #1
 800c18e:	f008 f88f 	bl	80142b0 <rcl_action_transition_goal_state>
 800c192:	2803      	cmp	r0, #3
 800c194:	4684      	mov	ip, r0
 800c196:	f040 80a7 	bne.w	800c2e8 <_rclc_take_new_data+0x2a4>
 800c19a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c19c:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800c1a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c1a2:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c1a6:	e884 0003 	stmia.w	r4, {r0, r1}
 800c1aa:	f887 c008 	strb.w	ip, [r7, #8]
 800c1ae:	e76b      	b.n	800c088 <_rclc_take_new_data+0x44>
 800c1b0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c1b2:	3010      	adds	r0, #16
 800c1b4:	f007 fd50 	bl	8013c58 <rcl_action_take_feedback>
 800c1b8:	4605      	mov	r5, r0
 800c1ba:	2800      	cmp	r0, #0
 800c1bc:	d1a5      	bne.n	800c10a <_rclc_take_new_data+0xc6>
 800c1be:	6860      	ldr	r0, [r4, #4]
 800c1c0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c1c2:	f008 f8eb 	bl	801439c <rclc_action_find_goal_handle_by_uuid>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	2800      	cmp	r0, #0
 800c1ca:	f000 80a3 	beq.w	800c314 <_rclc_take_new_data+0x2d0>
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	6860      	ldr	r0, [r4, #4]
 800c1d2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800c1d6:	e7a6      	b.n	800c126 <_rclc_take_new_data+0xe2>
 800c1d8:	f008 f8ba 	bl	8014350 <rclc_action_take_goal_handle>
 800c1dc:	4606      	mov	r6, r0
 800c1de:	6860      	ldr	r0, [r4, #4]
 800c1e0:	2e00      	cmp	r6, #0
 800c1e2:	f43f af47 	beq.w	800c074 <_rclc_take_new_data+0x30>
 800c1e6:	6070      	str	r0, [r6, #4]
 800c1e8:	69f2      	ldr	r2, [r6, #28]
 800c1ea:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800c1ee:	3010      	adds	r0, #16
 800c1f0:	f007 fe6e 	bl	8013ed0 <rcl_action_take_goal_request>
 800c1f4:	4605      	mov	r5, r0
 800c1f6:	2800      	cmp	r0, #0
 800c1f8:	f040 808e 	bne.w	800c318 <_rclc_take_new_data+0x2d4>
 800c1fc:	69f7      	ldr	r7, [r6, #28]
 800c1fe:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c200:	7235      	strb	r5, [r6, #8]
 800c202:	f8c6 0009 	str.w	r0, [r6, #9]
 800c206:	f8c6 100d 	str.w	r1, [r6, #13]
 800c20a:	6860      	ldr	r0, [r4, #4]
 800c20c:	f8c6 2011 	str.w	r2, [r6, #17]
 800c210:	f8c6 3015 	str.w	r3, [r6, #21]
 800c214:	e72e      	b.n	800c074 <_rclc_take_new_data+0x30>
 800c216:	aa04      	add	r2, sp, #16
 800c218:	a90a      	add	r1, sp, #40	@ 0x28
 800c21a:	3010      	adds	r0, #16
 800c21c:	f007 fc24 	bl	8013a68 <rcl_action_take_goal_response>
 800c220:	4605      	mov	r5, r0
 800c222:	2800      	cmp	r0, #0
 800c224:	f47f af71 	bne.w	800c10a <_rclc_take_new_data+0xc6>
 800c228:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c22c:	6860      	ldr	r0, [r4, #4]
 800c22e:	f008 f8e5 	bl	80143fc <rclc_action_find_handle_by_goal_request_sequence_number>
 800c232:	b130      	cbz	r0, 800c242 <_rclc_take_new_data+0x1fe>
 800c234:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c238:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c23c:	2201      	movs	r2, #1
 800c23e:	f880 2020 	strb.w	r2, [r0, #32]
 800c242:	6860      	ldr	r0, [r4, #4]
 800c244:	e769      	b.n	800c11a <_rclc_take_new_data+0xd6>
 800c246:	aa04      	add	r2, sp, #16
 800c248:	3010      	adds	r0, #16
 800c24a:	a90a      	add	r1, sp, #40	@ 0x28
 800c24c:	f007 feb8 	bl	8013fc0 <rcl_action_take_result_request>
 800c250:	4605      	mov	r5, r0
 800c252:	2800      	cmp	r0, #0
 800c254:	f47f af59 	bne.w	800c10a <_rclc_take_new_data+0xc6>
 800c258:	6860      	ldr	r0, [r4, #4]
 800c25a:	a904      	add	r1, sp, #16
 800c25c:	f008 f89e 	bl	801439c <rclc_action_find_goal_handle_by_uuid>
 800c260:	4607      	mov	r7, r0
 800c262:	b160      	cbz	r0, 800c27e <_rclc_take_new_data+0x23a>
 800c264:	ad0a      	add	r5, sp, #40	@ 0x28
 800c266:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800c26a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c26c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c26e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c272:	f04f 0c02 	mov.w	ip, #2
 800c276:	e886 0003 	stmia.w	r6, {r0, r1}
 800c27a:	f887 c008 	strb.w	ip, [r7, #8]
 800c27e:	6860      	ldr	r0, [r4, #4]
 800c280:	2300      	movs	r3, #0
 800c282:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800c286:	e6fa      	b.n	800c07e <_rclc_take_new_data+0x3a>
 800c288:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800c28c:	a90a      	add	r1, sp, #40	@ 0x28
 800c28e:	3010      	adds	r0, #16
 800c290:	f007 fca2 	bl	8013bd8 <rcl_action_take_cancel_response>
 800c294:	4605      	mov	r5, r0
 800c296:	2800      	cmp	r0, #0
 800c298:	f47f af37 	bne.w	800c10a <_rclc_take_new_data+0xc6>
 800c29c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c2a0:	6860      	ldr	r0, [r4, #4]
 800c2a2:	f008 f8cf 	bl	8014444 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800c2a6:	4606      	mov	r6, r0
 800c2a8:	6860      	ldr	r0, [r4, #4]
 800c2aa:	2e00      	cmp	r6, #0
 800c2ac:	f43f af40 	beq.w	800c130 <_rclc_take_new_data+0xec>
 800c2b0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c2b2:	2701      	movs	r7, #1
 800c2b4:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	f43f af3a 	beq.w	800c130 <_rclc_take_new_data+0xec>
 800c2bc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800c2be:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800c2c2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c2c6:	f008 f869 	bl	801439c <rclc_action_find_goal_handle_by_uuid>
 800c2ca:	b138      	cbz	r0, 800c2dc <_rclc_take_new_data+0x298>
 800c2cc:	6860      	ldr	r0, [r4, #4]
 800c2ce:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c2d0:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800c2d4:	3501      	adds	r5, #1
 800c2d6:	42ab      	cmp	r3, r5
 800c2d8:	d8f0      	bhi.n	800c2bc <_rclc_take_new_data+0x278>
 800c2da:	e729      	b.n	800c130 <_rclc_take_new_data+0xec>
 800c2dc:	6860      	ldr	r0, [r4, #4]
 800c2de:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c2e0:	3501      	adds	r5, #1
 800c2e2:	42ab      	cmp	r3, r5
 800c2e4:	d8ea      	bhi.n	800c2bc <_rclc_take_new_data+0x278>
 800c2e6:	e723      	b.n	800c130 <_rclc_take_new_data+0xec>
 800c2e8:	ab06      	add	r3, sp, #24
 800c2ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c2ec:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c2f0:	2103      	movs	r1, #3
 800c2f2:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c2f6:	6860      	ldr	r0, [r4, #4]
 800c2f8:	f008 f91a 	bl	8014530 <rclc_action_server_goal_cancel_reject>
 800c2fc:	e6c4      	b.n	800c088 <_rclc_take_new_data+0x44>
 800c2fe:	ab06      	add	r3, sp, #24
 800c300:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c302:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c306:	2102      	movs	r1, #2
 800c308:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c30c:	6860      	ldr	r0, [r4, #4]
 800c30e:	f008 f90f 	bl	8014530 <rclc_action_server_goal_cancel_reject>
 800c312:	e6b9      	b.n	800c088 <_rclc_take_new_data+0x44>
 800c314:	6860      	ldr	r0, [r4, #4]
 800c316:	e706      	b.n	800c126 <_rclc_take_new_data+0xe2>
 800c318:	6860      	ldr	r0, [r4, #4]
 800c31a:	4631      	mov	r1, r6
 800c31c:	f008 f828 	bl	8014370 <rclc_action_remove_used_goal_handle>
 800c320:	f000 fd9a 	bl	800ce58 <rcutils_reset_error>
 800c324:	e6b0      	b.n	800c088 <_rclc_take_new_data+0x44>
 800c326:	2501      	movs	r5, #1
 800c328:	e6ae      	b.n	800c088 <_rclc_take_new_data+0x44>
 800c32a:	bf00      	nop

0800c32c <_rclc_execute.part.0>:
 800c32c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c32e:	7803      	ldrb	r3, [r0, #0]
 800c330:	b087      	sub	sp, #28
 800c332:	4604      	mov	r4, r0
 800c334:	2b0a      	cmp	r3, #10
 800c336:	f200 8136 	bhi.w	800c5a6 <_rclc_execute.part.0+0x27a>
 800c33a:	e8df f003 	tbb	[pc, r3]
 800c33e:	435e      	.short	0x435e
 800c340:	06a1664f 	.word	0x06a1664f
 800c344:	6c1e0606 	.word	0x6c1e0606
 800c348:	59          	.byte	0x59
 800c349:	00          	.byte	0x00
 800c34a:	2b06      	cmp	r3, #6
 800c34c:	f000 8122 	beq.w	800c594 <_rclc_execute.part.0+0x268>
 800c350:	2b07      	cmp	r3, #7
 800c352:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c354:	f040 8118 	bne.w	800c588 <_rclc_execute.part.0+0x25c>
 800c358:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800c35c:	6880      	ldr	r0, [r0, #8]
 800c35e:	4798      	blx	r3
 800c360:	f104 0110 	add.w	r1, r4, #16
 800c364:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800c366:	6860      	ldr	r0, [r4, #4]
 800c368:	f006 f90c 	bl	8012584 <rcl_send_response>
 800c36c:	2800      	cmp	r0, #0
 800c36e:	d033      	beq.n	800c3d8 <_rclc_execute.part.0+0xac>
 800c370:	9005      	str	r0, [sp, #20]
 800c372:	f000 fd71 	bl	800ce58 <rcutils_reset_error>
 800c376:	9805      	ldr	r0, [sp, #20]
 800c378:	e02e      	b.n	800c3d8 <_rclc_execute.part.0+0xac>
 800c37a:	6840      	ldr	r0, [r0, #4]
 800c37c:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c380:	2b00      	cmp	r3, #0
 800c382:	f000 8086 	beq.w	800c492 <_rclc_execute.part.0+0x166>
 800c386:	2600      	movs	r6, #0
 800c388:	2701      	movs	r7, #1
 800c38a:	e004      	b.n	800c396 <_rclc_execute.part.0+0x6a>
 800c38c:	f007 ffba 	bl	8014304 <rclc_action_send_result_request>
 800c390:	b998      	cbnz	r0, 800c3ba <_rclc_execute.part.0+0x8e>
 800c392:	722f      	strb	r7, [r5, #8]
 800c394:	6860      	ldr	r0, [r4, #4]
 800c396:	f008 f867 	bl	8014468 <rclc_action_find_first_handle_with_goal_response>
 800c39a:	4605      	mov	r5, r0
 800c39c:	2800      	cmp	r0, #0
 800c39e:	d077      	beq.n	800c490 <_rclc_execute.part.0+0x164>
 800c3a0:	6863      	ldr	r3, [r4, #4]
 800c3a2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c3a4:	699b      	ldr	r3, [r3, #24]
 800c3a6:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800c3aa:	f885 6020 	strb.w	r6, [r5, #32]
 800c3ae:	4798      	blx	r3
 800c3b0:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800c3b4:	4628      	mov	r0, r5
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d1e8      	bne.n	800c38c <_rclc_execute.part.0+0x60>
 800c3ba:	6860      	ldr	r0, [r4, #4]
 800c3bc:	4629      	mov	r1, r5
 800c3be:	f007 ffd7 	bl	8014370 <rclc_action_remove_used_goal_handle>
 800c3c2:	e7e7      	b.n	800c394 <_rclc_execute.part.0+0x68>
 800c3c4:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800c3c8:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800c3cc:	2d00      	cmp	r5, #0
 800c3ce:	f000 80c9 	beq.w	800c564 <_rclc_execute.part.0+0x238>
 800c3d2:	6880      	ldr	r0, [r0, #8]
 800c3d4:	4798      	blx	r3
 800c3d6:	2000      	movs	r0, #0
 800c3d8:	b007      	add	sp, #28
 800c3da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3dc:	6840      	ldr	r0, [r0, #4]
 800c3de:	f006 fc01 	bl	8012be4 <rcl_timer_call>
 800c3e2:	f240 3321 	movw	r3, #801	@ 0x321
 800c3e6:	4298      	cmp	r0, r3
 800c3e8:	d004      	beq.n	800c3f4 <_rclc_execute.part.0+0xc8>
 800c3ea:	2800      	cmp	r0, #0
 800c3ec:	d0f4      	beq.n	800c3d8 <_rclc_execute.part.0+0xac>
 800c3ee:	e7bf      	b.n	800c370 <_rclc_execute.part.0+0x44>
 800c3f0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c3f2:	4798      	blx	r3
 800c3f4:	2000      	movs	r0, #0
 800c3f6:	b007      	add	sp, #28
 800c3f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3fa:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800c3fe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c400:	b925      	cbnz	r5, 800c40c <_rclc_execute.part.0+0xe0>
 800c402:	4628      	mov	r0, r5
 800c404:	4798      	blx	r3
 800c406:	4628      	mov	r0, r5
 800c408:	e7e6      	b.n	800c3d8 <_rclc_execute.part.0+0xac>
 800c40a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c40c:	68a0      	ldr	r0, [r4, #8]
 800c40e:	4798      	blx	r3
 800c410:	2000      	movs	r0, #0
 800c412:	b007      	add	sp, #28
 800c414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c416:	6840      	ldr	r0, [r0, #4]
 800c418:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800c41c:	bb3b      	cbnz	r3, 800c46e <_rclc_execute.part.0+0x142>
 800c41e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d07b      	beq.n	800c51e <_rclc_execute.part.0+0x1f2>
 800c426:	f640 0634 	movw	r6, #2100	@ 0x834
 800c42a:	2701      	movs	r7, #1
 800c42c:	e007      	b.n	800c43e <_rclc_execute.part.0+0x112>
 800c42e:	4628      	mov	r0, r5
 800c430:	f008 f832 	bl	8014498 <rclc_action_server_response_goal_request>
 800c434:	6860      	ldr	r0, [r4, #4]
 800c436:	4629      	mov	r1, r5
 800c438:	f007 ff9a 	bl	8014370 <rclc_action_remove_used_goal_handle>
 800c43c:	6860      	ldr	r0, [r4, #4]
 800c43e:	2100      	movs	r1, #0
 800c440:	f007 ffc4 	bl	80143cc <rclc_action_find_first_handle_by_status>
 800c444:	4605      	mov	r5, r0
 800c446:	2800      	cmp	r0, #0
 800c448:	d066      	beq.n	800c518 <_rclc_execute.part.0+0x1ec>
 800c44a:	6863      	ldr	r3, [r4, #4]
 800c44c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c44e:	699b      	ldr	r3, [r3, #24]
 800c450:	4798      	blx	r3
 800c452:	42b0      	cmp	r0, r6
 800c454:	f04f 0100 	mov.w	r1, #0
 800c458:	d1e9      	bne.n	800c42e <_rclc_execute.part.0+0x102>
 800c45a:	2101      	movs	r1, #1
 800c45c:	4628      	mov	r0, r5
 800c45e:	f008 f81b 	bl	8014498 <rclc_action_server_response_goal_request>
 800c462:	722f      	strb	r7, [r5, #8]
 800c464:	e7ea      	b.n	800c43c <_rclc_execute.part.0+0x110>
 800c466:	6848      	ldr	r0, [r1, #4]
 800c468:	f007 ff82 	bl	8014370 <rclc_action_remove_used_goal_handle>
 800c46c:	6860      	ldr	r0, [r4, #4]
 800c46e:	f007 ffb9 	bl	80143e4 <rclc_action_find_first_terminated_handle>
 800c472:	4601      	mov	r1, r0
 800c474:	2800      	cmp	r0, #0
 800c476:	d1f6      	bne.n	800c466 <_rclc_execute.part.0+0x13a>
 800c478:	6860      	ldr	r0, [r4, #4]
 800c47a:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800c47e:	e7ce      	b.n	800c41e <_rclc_execute.part.0+0xf2>
 800c480:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c482:	6880      	ldr	r0, [r0, #8]
 800c484:	f104 0110 	add.w	r1, r4, #16
 800c488:	4798      	blx	r3
 800c48a:	2000      	movs	r0, #0
 800c48c:	b007      	add	sp, #28
 800c48e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c490:	6860      	ldr	r0, [r4, #4]
 800c492:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c496:	b18b      	cbz	r3, 800c4bc <_rclc_execute.part.0+0x190>
 800c498:	68c5      	ldr	r5, [r0, #12]
 800c49a:	b32d      	cbz	r5, 800c4e8 <_rclc_execute.part.0+0x1bc>
 800c49c:	2600      	movs	r6, #0
 800c49e:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800c4a2:	b143      	cbz	r3, 800c4b6 <_rclc_execute.part.0+0x18a>
 800c4a4:	69c3      	ldr	r3, [r0, #28]
 800c4a6:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800c4aa:	b123      	cbz	r3, 800c4b6 <_rclc_execute.part.0+0x18a>
 800c4ac:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c4ae:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c4b0:	4628      	mov	r0, r5
 800c4b2:	4798      	blx	r3
 800c4b4:	6860      	ldr	r0, [r4, #4]
 800c4b6:	682d      	ldr	r5, [r5, #0]
 800c4b8:	2d00      	cmp	r5, #0
 800c4ba:	d1f0      	bne.n	800c49e <_rclc_execute.part.0+0x172>
 800c4bc:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c4c0:	b193      	cbz	r3, 800c4e8 <_rclc_execute.part.0+0x1bc>
 800c4c2:	68c5      	ldr	r5, [r0, #12]
 800c4c4:	b185      	cbz	r5, 800c4e8 <_rclc_execute.part.0+0x1bc>
 800c4c6:	2600      	movs	r6, #0
 800c4c8:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800c4cc:	b14b      	cbz	r3, 800c4e2 <_rclc_execute.part.0+0x1b6>
 800c4ce:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c4d0:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800c4d4:	b12b      	cbz	r3, 800c4e2 <_rclc_execute.part.0+0x1b6>
 800c4d6:	4628      	mov	r0, r5
 800c4d8:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800c4dc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c4de:	4798      	blx	r3
 800c4e0:	6860      	ldr	r0, [r4, #4]
 800c4e2:	682d      	ldr	r5, [r5, #0]
 800c4e4:	2d00      	cmp	r5, #0
 800c4e6:	d1ef      	bne.n	800c4c8 <_rclc_execute.part.0+0x19c>
 800c4e8:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d081      	beq.n	800c3f4 <_rclc_execute.part.0+0xc8>
 800c4f0:	2700      	movs	r7, #0
 800c4f2:	e00b      	b.n	800c50c <_rclc_execute.part.0+0x1e0>
 800c4f4:	6863      	ldr	r3, [r4, #4]
 800c4f6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c4f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c4fa:	6a1e      	ldr	r6, [r3, #32]
 800c4fc:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800c500:	47b0      	blx	r6
 800c502:	6860      	ldr	r0, [r4, #4]
 800c504:	4629      	mov	r1, r5
 800c506:	f007 ff33 	bl	8014370 <rclc_action_remove_used_goal_handle>
 800c50a:	6860      	ldr	r0, [r4, #4]
 800c50c:	f007 ffb8 	bl	8014480 <rclc_action_find_first_handle_with_result_response>
 800c510:	4605      	mov	r5, r0
 800c512:	2800      	cmp	r0, #0
 800c514:	d1ee      	bne.n	800c4f4 <_rclc_execute.part.0+0x1c8>
 800c516:	e76d      	b.n	800c3f4 <_rclc_execute.part.0+0xc8>
 800c518:	6860      	ldr	r0, [r4, #4]
 800c51a:	f880 5020 	strb.w	r5, [r0, #32]
 800c51e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c522:	2b00      	cmp	r3, #0
 800c524:	f43f af66 	beq.w	800c3f4 <_rclc_execute.part.0+0xc8>
 800c528:	68c5      	ldr	r5, [r0, #12]
 800c52a:	b1b5      	cbz	r5, 800c55a <_rclc_execute.part.0+0x22e>
 800c52c:	2602      	movs	r6, #2
 800c52e:	e001      	b.n	800c534 <_rclc_execute.part.0+0x208>
 800c530:	682d      	ldr	r5, [r5, #0]
 800c532:	b195      	cbz	r5, 800c55a <_rclc_execute.part.0+0x22e>
 800c534:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800c538:	2b03      	cmp	r3, #3
 800c53a:	d1f9      	bne.n	800c530 <_rclc_execute.part.0+0x204>
 800c53c:	69c3      	ldr	r3, [r0, #28]
 800c53e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c540:	4628      	mov	r0, r5
 800c542:	4798      	blx	r3
 800c544:	4603      	mov	r3, r0
 800c546:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800c54a:	4628      	mov	r0, r5
 800c54c:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800c550:	b163      	cbz	r3, 800c56c <_rclc_execute.part.0+0x240>
 800c552:	f007 ffc1 	bl	80144d8 <rclc_action_server_goal_cancel_accept>
 800c556:	6860      	ldr	r0, [r4, #4]
 800c558:	e7ea      	b.n	800c530 <_rclc_execute.part.0+0x204>
 800c55a:	2300      	movs	r3, #0
 800c55c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c560:	4618      	mov	r0, r3
 800c562:	e739      	b.n	800c3d8 <_rclc_execute.part.0+0xac>
 800c564:	4628      	mov	r0, r5
 800c566:	4798      	blx	r3
 800c568:	4628      	mov	r0, r5
 800c56a:	e735      	b.n	800c3d8 <_rclc_execute.part.0+0xac>
 800c56c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800c56e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c572:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800c576:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c57a:	6860      	ldr	r0, [r4, #4]
 800c57c:	2101      	movs	r1, #1
 800c57e:	f007 ffd7 	bl	8014530 <rclc_action_server_goal_cancel_reject>
 800c582:	722e      	strb	r6, [r5, #8]
 800c584:	6860      	ldr	r0, [r4, #4]
 800c586:	e7d3      	b.n	800c530 <_rclc_execute.part.0+0x204>
 800c588:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c58a:	6880      	ldr	r0, [r0, #8]
 800c58c:	4798      	blx	r3
 800c58e:	f104 0110 	add.w	r1, r4, #16
 800c592:	e6e7      	b.n	800c364 <_rclc_execute.part.0+0x38>
 800c594:	f100 0110 	add.w	r1, r0, #16
 800c598:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c59a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800c59c:	6880      	ldr	r0, [r0, #8]
 800c59e:	9105      	str	r1, [sp, #20]
 800c5a0:	4798      	blx	r3
 800c5a2:	9905      	ldr	r1, [sp, #20]
 800c5a4:	e6de      	b.n	800c364 <_rclc_execute.part.0+0x38>
 800c5a6:	2001      	movs	r0, #1
 800c5a8:	e716      	b.n	800c3d8 <_rclc_execute.part.0+0xac>
 800c5aa:	bf00      	nop

0800c5ac <rclc_executor_trigger_any>:
 800c5ac:	2800      	cmp	r0, #0
 800c5ae:	d03f      	beq.n	800c630 <rclc_executor_trigger_any+0x84>
 800c5b0:	2900      	cmp	r1, #0
 800c5b2:	d03e      	beq.n	800c632 <rclc_executor_trigger_any+0x86>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	2800      	cmp	r0, #0
 800c5be:	d037      	beq.n	800c630 <rclc_executor_trigger_any+0x84>
 800c5c0:	b430      	push	{r4, r5}
 800c5c2:	f893 c000 	ldrb.w	ip, [r3]
 800c5c6:	f1bc 0f08 	cmp.w	ip, #8
 800c5ca:	d11e      	bne.n	800c60a <rclc_executor_trigger_any+0x5e>
 800c5cc:	685c      	ldr	r4, [r3, #4]
 800c5ce:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800c5d0:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800c5d4:	d105      	bne.n	800c5e2 <rclc_executor_trigger_any+0x36>
 800c5d6:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800c5da:	b910      	cbnz	r0, 800c5e2 <rclc_executor_trigger_any+0x36>
 800c5dc:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800c5e0:	b128      	cbz	r0, 800c5ee <rclc_executor_trigger_any+0x42>
 800c5e2:	bc30      	pop	{r4, r5}
 800c5e4:	4770      	bx	lr
 800c5e6:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800c5ea:	2800      	cmp	r0, #0
 800c5ec:	d1f9      	bne.n	800c5e2 <rclc_executor_trigger_any+0x36>
 800c5ee:	3201      	adds	r2, #1
 800c5f0:	4291      	cmp	r1, r2
 800c5f2:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c5f6:	d018      	beq.n	800c62a <rclc_executor_trigger_any+0x7e>
 800c5f8:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800c5fc:	2800      	cmp	r0, #0
 800c5fe:	d0f0      	beq.n	800c5e2 <rclc_executor_trigger_any+0x36>
 800c600:	f893 c000 	ldrb.w	ip, [r3]
 800c604:	f1bc 0f08 	cmp.w	ip, #8
 800c608:	d0e0      	beq.n	800c5cc <rclc_executor_trigger_any+0x20>
 800c60a:	f1bc 0f09 	cmp.w	ip, #9
 800c60e:	d1ea      	bne.n	800c5e6 <rclc_executor_trigger_any+0x3a>
 800c610:	685c      	ldr	r4, [r3, #4]
 800c612:	6a25      	ldr	r5, [r4, #32]
 800c614:	2d00      	cmp	r5, #0
 800c616:	d1e4      	bne.n	800c5e2 <rclc_executor_trigger_any+0x36>
 800c618:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800c61c:	2800      	cmp	r0, #0
 800c61e:	d1e0      	bne.n	800c5e2 <rclc_executor_trigger_any+0x36>
 800c620:	3201      	adds	r2, #1
 800c622:	4291      	cmp	r1, r2
 800c624:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c628:	d1e6      	bne.n	800c5f8 <rclc_executor_trigger_any+0x4c>
 800c62a:	2000      	movs	r0, #0
 800c62c:	bc30      	pop	{r4, r5}
 800c62e:	4770      	bx	lr
 800c630:	4770      	bx	lr
 800c632:	4608      	mov	r0, r1
 800c634:	4770      	bx	lr
 800c636:	bf00      	nop

0800c638 <rclc_executor_get_zero_initialized_executor>:
 800c638:	b510      	push	{r4, lr}
 800c63a:	4903      	ldr	r1, [pc, #12]	@ (800c648 <rclc_executor_get_zero_initialized_executor+0x10>)
 800c63c:	4604      	mov	r4, r0
 800c63e:	2288      	movs	r2, #136	@ 0x88
 800c640:	f00b f92d 	bl	801789e <memcpy>
 800c644:	4620      	mov	r0, r4
 800c646:	bd10      	pop	{r4, pc}
 800c648:	08018980 	.word	0x08018980
 800c64c:	00000000 	.word	0x00000000

0800c650 <rclc_executor_init>:
 800c650:	2800      	cmp	r0, #0
 800c652:	d05f      	beq.n	800c714 <rclc_executor_init+0xc4>
 800c654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c658:	460c      	mov	r4, r1
 800c65a:	b0b0      	sub	sp, #192	@ 0xc0
 800c65c:	2900      	cmp	r1, #0
 800c65e:	d051      	beq.n	800c704 <rclc_executor_init+0xb4>
 800c660:	4605      	mov	r5, r0
 800c662:	4618      	mov	r0, r3
 800c664:	4616      	mov	r6, r2
 800c666:	461f      	mov	r7, r3
 800c668:	f000 fbd0 	bl	800ce0c <rcutils_allocator_is_valid>
 800c66c:	2800      	cmp	r0, #0
 800c66e:	d049      	beq.n	800c704 <rclc_executor_init+0xb4>
 800c670:	2e00      	cmp	r6, #0
 800c672:	d047      	beq.n	800c704 <rclc_executor_init+0xb4>
 800c674:	492c      	ldr	r1, [pc, #176]	@ (800c728 <rclc_executor_init+0xd8>)
 800c676:	2288      	movs	r2, #136	@ 0x88
 800c678:	a80e      	add	r0, sp, #56	@ 0x38
 800c67a:	f00b f910 	bl	801789e <memcpy>
 800c67e:	a90e      	add	r1, sp, #56	@ 0x38
 800c680:	2288      	movs	r2, #136	@ 0x88
 800c682:	4628      	mov	r0, r5
 800c684:	f00b f90b 	bl	801789e <memcpy>
 800c688:	602c      	str	r4, [r5, #0]
 800c68a:	4668      	mov	r0, sp
 800c68c:	60ae      	str	r6, [r5, #8]
 800c68e:	466c      	mov	r4, sp
 800c690:	f006 fc1a 	bl	8012ec8 <rcl_get_zero_initialized_wait_set>
 800c694:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c696:	f105 0c14 	add.w	ip, r5, #20
 800c69a:	f8d7 8000 	ldr.w	r8, [r7]
 800c69e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c6a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c6a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c6a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c6aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c6ae:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800c720 <rclc_executor_init+0xd0>
 800c6b2:	6823      	ldr	r3, [r4, #0]
 800c6b4:	f8cc 3000 	str.w	r3, [ip]
 800c6b8:	6939      	ldr	r1, [r7, #16]
 800c6ba:	612f      	str	r7, [r5, #16]
 800c6bc:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800c6c0:	01b0      	lsls	r0, r6, #6
 800c6c2:	47c0      	blx	r8
 800c6c4:	6068      	str	r0, [r5, #4]
 800c6c6:	b338      	cbz	r0, 800c718 <rclc_executor_init+0xc8>
 800c6c8:	2400      	movs	r4, #0
 800c6ca:	e000      	b.n	800c6ce <rclc_executor_init+0x7e>
 800c6cc:	6868      	ldr	r0, [r5, #4]
 800c6ce:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800c6d2:	4631      	mov	r1, r6
 800c6d4:	3401      	adds	r4, #1
 800c6d6:	f000 fa6b 	bl	800cbb0 <rclc_executor_handle_init>
 800c6da:	42a6      	cmp	r6, r4
 800c6dc:	d1f6      	bne.n	800c6cc <rclc_executor_init+0x7c>
 800c6de:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800c6e2:	f000 fa59 	bl	800cb98 <rclc_executor_handle_counters_zero_init>
 800c6e6:	4a11      	ldr	r2, [pc, #68]	@ (800c72c <rclc_executor_init+0xdc>)
 800c6e8:	686b      	ldr	r3, [r5, #4]
 800c6ea:	2000      	movs	r0, #0
 800c6ec:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800c6f0:	b163      	cbz	r3, 800c70c <rclc_executor_init+0xbc>
 800c6f2:	692b      	ldr	r3, [r5, #16]
 800c6f4:	b153      	cbz	r3, 800c70c <rclc_executor_init+0xbc>
 800c6f6:	68ab      	ldr	r3, [r5, #8]
 800c6f8:	b143      	cbz	r3, 800c70c <rclc_executor_init+0xbc>
 800c6fa:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800c6fe:	b030      	add	sp, #192	@ 0xc0
 800c700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c704:	200b      	movs	r0, #11
 800c706:	b030      	add	sp, #192	@ 0xc0
 800c708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c70c:	4618      	mov	r0, r3
 800c70e:	b030      	add	sp, #192	@ 0xc0
 800c710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c714:	200b      	movs	r0, #11
 800c716:	4770      	bx	lr
 800c718:	200a      	movs	r0, #10
 800c71a:	e7f4      	b.n	800c706 <rclc_executor_init+0xb6>
 800c71c:	f3af 8000 	nop.w
 800c720:	3b9aca00 	.word	0x3b9aca00
 800c724:	00000000 	.word	0x00000000
 800c728:	08018980 	.word	0x08018980
 800c72c:	0800c5ad 	.word	0x0800c5ad

0800c730 <rclc_executor_add_timer>:
 800c730:	b300      	cbz	r0, 800c774 <rclc_executor_add_timer+0x44>
 800c732:	b1f9      	cbz	r1, 800c774 <rclc_executor_add_timer+0x44>
 800c734:	b538      	push	{r3, r4, r5, lr}
 800c736:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800c73a:	4293      	cmp	r3, r2
 800c73c:	4604      	mov	r4, r0
 800c73e:	d301      	bcc.n	800c744 <rclc_executor_add_timer+0x14>
 800c740:	2001      	movs	r0, #1
 800c742:	bd38      	pop	{r3, r4, r5, pc}
 800c744:	6840      	ldr	r0, [r0, #4]
 800c746:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800c74a:	019d      	lsls	r5, r3, #6
 800c74c:	6051      	str	r1, [r2, #4]
 800c74e:	2102      	movs	r1, #2
 800c750:	5341      	strh	r1, [r0, r5]
 800c752:	3301      	adds	r3, #1
 800c754:	2000      	movs	r0, #0
 800c756:	2101      	movs	r1, #1
 800c758:	f104 0514 	add.w	r5, r4, #20
 800c75c:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800c75e:	8711      	strh	r1, [r2, #56]	@ 0x38
 800c760:	4628      	mov	r0, r5
 800c762:	60e3      	str	r3, [r4, #12]
 800c764:	f006 fbc4 	bl	8012ef0 <rcl_wait_set_is_valid>
 800c768:	b930      	cbnz	r0, 800c778 <rclc_executor_add_timer+0x48>
 800c76a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800c76c:	3301      	adds	r3, #1
 800c76e:	2000      	movs	r0, #0
 800c770:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800c772:	bd38      	pop	{r3, r4, r5, pc}
 800c774:	200b      	movs	r0, #11
 800c776:	4770      	bx	lr
 800c778:	4628      	mov	r0, r5
 800c77a:	f006 fbbf 	bl	8012efc <rcl_wait_set_fini>
 800c77e:	2800      	cmp	r0, #0
 800c780:	d0f3      	beq.n	800c76a <rclc_executor_add_timer+0x3a>
 800c782:	bd38      	pop	{r3, r4, r5, pc}

0800c784 <rclc_executor_prepare>:
 800c784:	2800      	cmp	r0, #0
 800c786:	d044      	beq.n	800c812 <rclc_executor_prepare+0x8e>
 800c788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c78a:	f100 0514 	add.w	r5, r0, #20
 800c78e:	b09b      	sub	sp, #108	@ 0x6c
 800c790:	4604      	mov	r4, r0
 800c792:	4628      	mov	r0, r5
 800c794:	f006 fbac 	bl	8012ef0 <rcl_wait_set_is_valid>
 800c798:	b110      	cbz	r0, 800c7a0 <rclc_executor_prepare+0x1c>
 800c79a:	2000      	movs	r0, #0
 800c79c:	b01b      	add	sp, #108	@ 0x6c
 800c79e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7a0:	4628      	mov	r0, r5
 800c7a2:	f006 fbab 	bl	8012efc <rcl_wait_set_fini>
 800c7a6:	2800      	cmp	r0, #0
 800c7a8:	d130      	bne.n	800c80c <rclc_executor_prepare+0x88>
 800c7aa:	a80c      	add	r0, sp, #48	@ 0x30
 800c7ac:	f006 fb8c 	bl	8012ec8 <rcl_get_zero_initialized_wait_set>
 800c7b0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800c7b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c7b8:	46ae      	mov	lr, r5
 800c7ba:	6927      	ldr	r7, [r4, #16]
 800c7bc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c7c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c7c4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c7c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c7cc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c7d0:	f8dc 3000 	ldr.w	r3, [ip]
 800c7d4:	f8ce 3000 	str.w	r3, [lr]
 800c7d8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c7da:	ae04      	add	r6, sp, #16
 800c7dc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	6822      	ldr	r2, [r4, #0]
 800c7e2:	6033      	str	r3, [r6, #0]
 800c7e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c7e6:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800c7e8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800c7ec:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800c7f0:	e9cd 2100 	strd	r2, r1, [sp]
 800c7f4:	4628      	mov	r0, r5
 800c7f6:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800c7f8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c7fa:	f006 fe7d 	bl	80134f8 <rcl_wait_set_init>
 800c7fe:	2800      	cmp	r0, #0
 800c800:	d0cc      	beq.n	800c79c <rclc_executor_prepare+0x18>
 800c802:	900b      	str	r0, [sp, #44]	@ 0x2c
 800c804:	f000 fb28 	bl	800ce58 <rcutils_reset_error>
 800c808:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c80a:	e7c7      	b.n	800c79c <rclc_executor_prepare+0x18>
 800c80c:	f000 fb24 	bl	800ce58 <rcutils_reset_error>
 800c810:	e7cb      	b.n	800c7aa <rclc_executor_prepare+0x26>
 800c812:	200b      	movs	r0, #11
 800c814:	4770      	bx	lr
 800c816:	bf00      	nop

0800c818 <rclc_executor_spin_some.part.0>:
 800c818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c81c:	f100 0614 	add.w	r6, r0, #20
 800c820:	b083      	sub	sp, #12
 800c822:	4691      	mov	r9, r2
 800c824:	4698      	mov	r8, r3
 800c826:	4605      	mov	r5, r0
 800c828:	f7ff ffac 	bl	800c784 <rclc_executor_prepare>
 800c82c:	4630      	mov	r0, r6
 800c82e:	f006 fc31 	bl	8013094 <rcl_wait_set_clear>
 800c832:	4607      	mov	r7, r0
 800c834:	2800      	cmp	r0, #0
 800c836:	f040 80ed 	bne.w	800ca14 <rclc_executor_spin_some.part.0+0x1fc>
 800c83a:	68ab      	ldr	r3, [r5, #8]
 800c83c:	4604      	mov	r4, r0
 800c83e:	b303      	cbz	r3, 800c882 <rclc_executor_spin_some.part.0+0x6a>
 800c840:	6869      	ldr	r1, [r5, #4]
 800c842:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800c846:	01a2      	lsls	r2, r4, #6
 800c848:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800c84c:	b1cb      	cbz	r3, 800c882 <rclc_executor_spin_some.part.0+0x6a>
 800c84e:	5c8b      	ldrb	r3, [r1, r2]
 800c850:	2b0a      	cmp	r3, #10
 800c852:	f200 80d8 	bhi.w	800ca06 <rclc_executor_spin_some.part.0+0x1ee>
 800c856:	e8df f003 	tbb	[pc, r3]
 800c85a:	9c9c      	.short	0x9c9c
 800c85c:	068c8ca7 	.word	0x068c8ca7
 800c860:	bdc90606 	.word	0xbdc90606
 800c864:	b2          	.byte	0xb2
 800c865:	00          	.byte	0x00
 800c866:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c86a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c86e:	4630      	mov	r0, r6
 800c870:	f006 ff58 	bl	8013724 <rcl_wait_set_add_service>
 800c874:	2800      	cmp	r0, #0
 800c876:	f040 8086 	bne.w	800c986 <rclc_executor_spin_some.part.0+0x16e>
 800c87a:	68ab      	ldr	r3, [r5, #8]
 800c87c:	3401      	adds	r4, #1
 800c87e:	429c      	cmp	r4, r3
 800c880:	d3de      	bcc.n	800c840 <rclc_executor_spin_some.part.0+0x28>
 800c882:	4643      	mov	r3, r8
 800c884:	464a      	mov	r2, r9
 800c886:	4630      	mov	r0, r6
 800c888:	f006 ff7a 	bl	8013780 <rcl_wait>
 800c88c:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800c890:	2b00      	cmp	r3, #0
 800c892:	f000 80c7 	beq.w	800ca24 <rclc_executor_spin_some.part.0+0x20c>
 800c896:	2b01      	cmp	r3, #1
 800c898:	f040 80b5 	bne.w	800ca06 <rclc_executor_spin_some.part.0+0x1ee>
 800c89c:	68ab      	ldr	r3, [r5, #8]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	f000 8159 	beq.w	800cb56 <rclc_executor_spin_some.part.0+0x33e>
 800c8a4:	2400      	movs	r4, #0
 800c8a6:	46a0      	mov	r8, r4
 800c8a8:	f240 1991 	movw	r9, #401	@ 0x191
 800c8ac:	e00a      	b.n	800c8c4 <rclc_executor_spin_some.part.0+0xac>
 800c8ae:	f7ff fb7b 	bl	800bfa8 <_rclc_check_for_new_data>
 800c8b2:	4604      	mov	r4, r0
 800c8b4:	b110      	cbz	r0, 800c8bc <rclc_executor_spin_some.part.0+0xa4>
 800c8b6:	4548      	cmp	r0, r9
 800c8b8:	f040 80b2 	bne.w	800ca20 <rclc_executor_spin_some.part.0+0x208>
 800c8bc:	68ab      	ldr	r3, [r5, #8]
 800c8be:	4598      	cmp	r8, r3
 800c8c0:	f080 8126 	bcs.w	800cb10 <rclc_executor_spin_some.part.0+0x2f8>
 800c8c4:	686a      	ldr	r2, [r5, #4]
 800c8c6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800c8ca:	4631      	mov	r1, r6
 800c8cc:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800c8d0:	f108 0801 	add.w	r8, r8, #1
 800c8d4:	f1bc 0f00 	cmp.w	ip, #0
 800c8d8:	d1e9      	bne.n	800c8ae <rclc_executor_spin_some.part.0+0x96>
 800c8da:	4619      	mov	r1, r3
 800c8dc:	4610      	mov	r0, r2
 800c8de:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800c8e2:	4798      	blx	r3
 800c8e4:	2800      	cmp	r0, #0
 800c8e6:	f000 809b 	beq.w	800ca20 <rclc_executor_spin_some.part.0+0x208>
 800c8ea:	68ab      	ldr	r3, [r5, #8]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	f000 8097 	beq.w	800ca20 <rclc_executor_spin_some.part.0+0x208>
 800c8f2:	f04f 0800 	mov.w	r8, #0
 800c8f6:	f240 1991 	movw	r9, #401	@ 0x191
 800c8fa:	e009      	b.n	800c910 <rclc_executor_spin_some.part.0+0xf8>
 800c8fc:	f7ff fba2 	bl	800c044 <_rclc_take_new_data>
 800c900:	4604      	mov	r4, r0
 800c902:	b110      	cbz	r0, 800c90a <rclc_executor_spin_some.part.0+0xf2>
 800c904:	4548      	cmp	r0, r9
 800c906:	f040 808b 	bne.w	800ca20 <rclc_executor_spin_some.part.0+0x208>
 800c90a:	68ab      	ldr	r3, [r5, #8]
 800c90c:	4598      	cmp	r8, r3
 800c90e:	d209      	bcs.n	800c924 <rclc_executor_spin_some.part.0+0x10c>
 800c910:	6868      	ldr	r0, [r5, #4]
 800c912:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800c916:	4631      	mov	r1, r6
 800c918:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800c91c:	f108 0801 	add.w	r8, r8, #1
 800c920:	2a00      	cmp	r2, #0
 800c922:	d1eb      	bne.n	800c8fc <rclc_executor_spin_some.part.0+0xe4>
 800c924:	2600      	movs	r6, #0
 800c926:	b97b      	cbnz	r3, 800c948 <rclc_executor_spin_some.part.0+0x130>
 800c928:	e07a      	b.n	800ca20 <rclc_executor_spin_some.part.0+0x208>
 800c92a:	f812 200c 	ldrb.w	r2, [r2, ip]
 800c92e:	2a08      	cmp	r2, #8
 800c930:	f000 80fd 	beq.w	800cb2e <rclc_executor_spin_some.part.0+0x316>
 800c934:	2a09      	cmp	r2, #9
 800c936:	f000 80ef 	beq.w	800cb18 <rclc_executor_spin_some.part.0+0x300>
 800c93a:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800c93e:	b98a      	cbnz	r2, 800c964 <rclc_executor_spin_some.part.0+0x14c>
 800c940:	3601      	adds	r6, #1
 800c942:	429e      	cmp	r6, r3
 800c944:	d262      	bcs.n	800ca0c <rclc_executor_spin_some.part.0+0x1f4>
 800c946:	2400      	movs	r4, #0
 800c948:	686a      	ldr	r2, [r5, #4]
 800c94a:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800c94e:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800c952:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800c956:	2900      	cmp	r1, #0
 800c958:	d062      	beq.n	800ca20 <rclc_executor_spin_some.part.0+0x208>
 800c95a:	7841      	ldrb	r1, [r0, #1]
 800c95c:	2900      	cmp	r1, #0
 800c95e:	d0e4      	beq.n	800c92a <rclc_executor_spin_some.part.0+0x112>
 800c960:	2901      	cmp	r1, #1
 800c962:	d1ed      	bne.n	800c940 <rclc_executor_spin_some.part.0+0x128>
 800c964:	f7ff fce2 	bl	800c32c <_rclc_execute.part.0>
 800c968:	2800      	cmp	r0, #0
 800c96a:	f040 80b6 	bne.w	800cada <rclc_executor_spin_some.part.0+0x2c2>
 800c96e:	68ab      	ldr	r3, [r5, #8]
 800c970:	e7e6      	b.n	800c940 <rclc_executor_spin_some.part.0+0x128>
 800c972:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c976:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c97a:	4630      	mov	r0, r6
 800c97c:	f006 fea6 	bl	80136cc <rcl_wait_set_add_client>
 800c980:	2800      	cmp	r0, #0
 800c982:	f43f af7a 	beq.w	800c87a <rclc_executor_spin_some.part.0+0x62>
 800c986:	9001      	str	r0, [sp, #4]
 800c988:	f000 fa66 	bl	800ce58 <rcutils_reset_error>
 800c98c:	9801      	ldr	r0, [sp, #4]
 800c98e:	4607      	mov	r7, r0
 800c990:	e03c      	b.n	800ca0c <rclc_executor_spin_some.part.0+0x1f4>
 800c992:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c996:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c99a:	4630      	mov	r0, r6
 800c99c:	f006 fb4e 	bl	801303c <rcl_wait_set_add_subscription>
 800c9a0:	2800      	cmp	r0, #0
 800c9a2:	f43f af6a 	beq.w	800c87a <rclc_executor_spin_some.part.0+0x62>
 800c9a6:	e7ee      	b.n	800c986 <rclc_executor_spin_some.part.0+0x16e>
 800c9a8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c9ac:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c9b0:	4630      	mov	r0, r6
 800c9b2:	f006 fe5b 	bl	801366c <rcl_wait_set_add_timer>
 800c9b6:	2800      	cmp	r0, #0
 800c9b8:	f43f af5f 	beq.w	800c87a <rclc_executor_spin_some.part.0+0x62>
 800c9bc:	e7e3      	b.n	800c986 <rclc_executor_spin_some.part.0+0x16e>
 800c9be:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c9c2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c9c6:	4630      	mov	r0, r6
 800c9c8:	f006 fe24 	bl	8013614 <rcl_wait_set_add_guard_condition>
 800c9cc:	2800      	cmp	r0, #0
 800c9ce:	f43f af54 	beq.w	800c87a <rclc_executor_spin_some.part.0+0x62>
 800c9d2:	e7d8      	b.n	800c986 <rclc_executor_spin_some.part.0+0x16e>
 800c9d4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c9d8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c9dc:	3110      	adds	r1, #16
 800c9de:	4630      	mov	r0, r6
 800c9e0:	f007 fba6 	bl	8014130 <rcl_action_wait_set_add_action_server>
 800c9e4:	2800      	cmp	r0, #0
 800c9e6:	f43f af48 	beq.w	800c87a <rclc_executor_spin_some.part.0+0x62>
 800c9ea:	e7cc      	b.n	800c986 <rclc_executor_spin_some.part.0+0x16e>
 800c9ec:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c9f0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800c9f4:	3110      	adds	r1, #16
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	4630      	mov	r0, r6
 800c9fa:	f007 f971 	bl	8013ce0 <rcl_action_wait_set_add_action_client>
 800c9fe:	2800      	cmp	r0, #0
 800ca00:	f43f af3b 	beq.w	800c87a <rclc_executor_spin_some.part.0+0x62>
 800ca04:	e7bf      	b.n	800c986 <rclc_executor_spin_some.part.0+0x16e>
 800ca06:	f000 fa27 	bl	800ce58 <rcutils_reset_error>
 800ca0a:	2701      	movs	r7, #1
 800ca0c:	4638      	mov	r0, r7
 800ca0e:	b003      	add	sp, #12
 800ca10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca14:	f000 fa20 	bl	800ce58 <rcutils_reset_error>
 800ca18:	4638      	mov	r0, r7
 800ca1a:	b003      	add	sp, #12
 800ca1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca20:	4627      	mov	r7, r4
 800ca22:	e7f3      	b.n	800ca0c <rclc_executor_spin_some.part.0+0x1f4>
 800ca24:	68ab      	ldr	r3, [r5, #8]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	f000 8092 	beq.w	800cb50 <rclc_executor_spin_some.part.0+0x338>
 800ca2c:	2400      	movs	r4, #0
 800ca2e:	46a0      	mov	r8, r4
 800ca30:	f240 1991 	movw	r9, #401	@ 0x191
 800ca34:	e008      	b.n	800ca48 <rclc_executor_spin_some.part.0+0x230>
 800ca36:	f7ff fab7 	bl	800bfa8 <_rclc_check_for_new_data>
 800ca3a:	4604      	mov	r4, r0
 800ca3c:	b108      	cbz	r0, 800ca42 <rclc_executor_spin_some.part.0+0x22a>
 800ca3e:	4548      	cmp	r0, r9
 800ca40:	d1ee      	bne.n	800ca20 <rclc_executor_spin_some.part.0+0x208>
 800ca42:	68ab      	ldr	r3, [r5, #8]
 800ca44:	4598      	cmp	r8, r3
 800ca46:	d265      	bcs.n	800cb14 <rclc_executor_spin_some.part.0+0x2fc>
 800ca48:	686a      	ldr	r2, [r5, #4]
 800ca4a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800ca4e:	4631      	mov	r1, r6
 800ca50:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800ca54:	f108 0801 	add.w	r8, r8, #1
 800ca58:	f1bc 0f00 	cmp.w	ip, #0
 800ca5c:	d1eb      	bne.n	800ca36 <rclc_executor_spin_some.part.0+0x21e>
 800ca5e:	4619      	mov	r1, r3
 800ca60:	4610      	mov	r0, r2
 800ca62:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800ca66:	4798      	blx	r3
 800ca68:	2800      	cmp	r0, #0
 800ca6a:	d0d9      	beq.n	800ca20 <rclc_executor_spin_some.part.0+0x208>
 800ca6c:	68ab      	ldr	r3, [r5, #8]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d0d6      	beq.n	800ca20 <rclc_executor_spin_some.part.0+0x208>
 800ca72:	f04f 0800 	mov.w	r8, #0
 800ca76:	f240 1991 	movw	r9, #401	@ 0x191
 800ca7a:	f240 2a59 	movw	sl, #601	@ 0x259
 800ca7e:	e00e      	b.n	800ca9e <rclc_executor_spin_some.part.0+0x286>
 800ca80:	f813 300b 	ldrb.w	r3, [r3, fp]
 800ca84:	2b08      	cmp	r3, #8
 800ca86:	d033      	beq.n	800caf0 <rclc_executor_spin_some.part.0+0x2d8>
 800ca88:	2b09      	cmp	r3, #9
 800ca8a:	d028      	beq.n	800cade <rclc_executor_spin_some.part.0+0x2c6>
 800ca8c:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800ca90:	b9fb      	cbnz	r3, 800cad2 <rclc_executor_spin_some.part.0+0x2ba>
 800ca92:	68ab      	ldr	r3, [r5, #8]
 800ca94:	f108 0801 	add.w	r8, r8, #1
 800ca98:	4598      	cmp	r8, r3
 800ca9a:	d2b7      	bcs.n	800ca0c <rclc_executor_spin_some.part.0+0x1f4>
 800ca9c:	2400      	movs	r4, #0
 800ca9e:	6868      	ldr	r0, [r5, #4]
 800caa0:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800caa4:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800caa8:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800caac:	2b00      	cmp	r3, #0
 800caae:	d0b7      	beq.n	800ca20 <rclc_executor_spin_some.part.0+0x208>
 800cab0:	4631      	mov	r1, r6
 800cab2:	f7ff fac7 	bl	800c044 <_rclc_take_new_data>
 800cab6:	b118      	cbz	r0, 800cac0 <rclc_executor_spin_some.part.0+0x2a8>
 800cab8:	4548      	cmp	r0, r9
 800caba:	d001      	beq.n	800cac0 <rclc_executor_spin_some.part.0+0x2a8>
 800cabc:	4550      	cmp	r0, sl
 800cabe:	d10c      	bne.n	800cada <rclc_executor_spin_some.part.0+0x2c2>
 800cac0:	686b      	ldr	r3, [r5, #4]
 800cac2:	eb13 000b 	adds.w	r0, r3, fp
 800cac6:	d021      	beq.n	800cb0c <rclc_executor_spin_some.part.0+0x2f4>
 800cac8:	7842      	ldrb	r2, [r0, #1]
 800caca:	2a00      	cmp	r2, #0
 800cacc:	d0d8      	beq.n	800ca80 <rclc_executor_spin_some.part.0+0x268>
 800cace:	2a01      	cmp	r2, #1
 800cad0:	d1df      	bne.n	800ca92 <rclc_executor_spin_some.part.0+0x27a>
 800cad2:	f7ff fc2b 	bl	800c32c <_rclc_execute.part.0>
 800cad6:	2800      	cmp	r0, #0
 800cad8:	d0db      	beq.n	800ca92 <rclc_executor_spin_some.part.0+0x27a>
 800cada:	4607      	mov	r7, r0
 800cadc:	e796      	b.n	800ca0c <rclc_executor_spin_some.part.0+0x1f4>
 800cade:	6843      	ldr	r3, [r0, #4]
 800cae0:	6a1a      	ldr	r2, [r3, #32]
 800cae2:	2a00      	cmp	r2, #0
 800cae4:	d1f5      	bne.n	800cad2 <rclc_executor_spin_some.part.0+0x2ba>
 800cae6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800caea:	2b00      	cmp	r3, #0
 800caec:	d0d1      	beq.n	800ca92 <rclc_executor_spin_some.part.0+0x27a>
 800caee:	e7f0      	b.n	800cad2 <rclc_executor_spin_some.part.0+0x2ba>
 800caf0:	6843      	ldr	r3, [r0, #4]
 800caf2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800caf4:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800caf8:	d1eb      	bne.n	800cad2 <rclc_executor_spin_some.part.0+0x2ba>
 800cafa:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800cafe:	2a00      	cmp	r2, #0
 800cb00:	d1e7      	bne.n	800cad2 <rclc_executor_spin_some.part.0+0x2ba>
 800cb02:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d0c3      	beq.n	800ca92 <rclc_executor_spin_some.part.0+0x27a>
 800cb0a:	e7e2      	b.n	800cad2 <rclc_executor_spin_some.part.0+0x2ba>
 800cb0c:	270b      	movs	r7, #11
 800cb0e:	e77d      	b.n	800ca0c <rclc_executor_spin_some.part.0+0x1f4>
 800cb10:	686a      	ldr	r2, [r5, #4]
 800cb12:	e6e2      	b.n	800c8da <rclc_executor_spin_some.part.0+0xc2>
 800cb14:	686a      	ldr	r2, [r5, #4]
 800cb16:	e7a2      	b.n	800ca5e <rclc_executor_spin_some.part.0+0x246>
 800cb18:	6842      	ldr	r2, [r0, #4]
 800cb1a:	6a11      	ldr	r1, [r2, #32]
 800cb1c:	2900      	cmp	r1, #0
 800cb1e:	f47f af21 	bne.w	800c964 <rclc_executor_spin_some.part.0+0x14c>
 800cb22:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800cb26:	2a00      	cmp	r2, #0
 800cb28:	f43f af0a 	beq.w	800c940 <rclc_executor_spin_some.part.0+0x128>
 800cb2c:	e71a      	b.n	800c964 <rclc_executor_spin_some.part.0+0x14c>
 800cb2e:	6842      	ldr	r2, [r0, #4]
 800cb30:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800cb32:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800cb36:	f47f af15 	bne.w	800c964 <rclc_executor_spin_some.part.0+0x14c>
 800cb3a:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800cb3e:	2900      	cmp	r1, #0
 800cb40:	f47f af10 	bne.w	800c964 <rclc_executor_spin_some.part.0+0x14c>
 800cb44:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800cb48:	2a00      	cmp	r2, #0
 800cb4a:	f43f aef9 	beq.w	800c940 <rclc_executor_spin_some.part.0+0x128>
 800cb4e:	e709      	b.n	800c964 <rclc_executor_spin_some.part.0+0x14c>
 800cb50:	686a      	ldr	r2, [r5, #4]
 800cb52:	461c      	mov	r4, r3
 800cb54:	e783      	b.n	800ca5e <rclc_executor_spin_some.part.0+0x246>
 800cb56:	686a      	ldr	r2, [r5, #4]
 800cb58:	461c      	mov	r4, r3
 800cb5a:	e6be      	b.n	800c8da <rclc_executor_spin_some.part.0+0xc2>

0800cb5c <rclc_executor_spin>:
 800cb5c:	b1d0      	cbz	r0, 800cb94 <rclc_executor_spin+0x38>
 800cb5e:	b510      	push	{r4, lr}
 800cb60:	4604      	mov	r4, r0
 800cb62:	b082      	sub	sp, #8
 800cb64:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800cb68:	6820      	ldr	r0, [r4, #0]
 800cb6a:	e9cd 2300 	strd	r2, r3, [sp]
 800cb6e:	f004 ffef 	bl	8011b50 <rcl_context_is_valid>
 800cb72:	4601      	mov	r1, r0
 800cb74:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb78:	4620      	mov	r0, r4
 800cb7a:	b131      	cbz	r1, 800cb8a <rclc_executor_spin+0x2e>
 800cb7c:	f7ff fe4c 	bl	800c818 <rclc_executor_spin_some.part.0>
 800cb80:	f030 0302 	bics.w	r3, r0, #2
 800cb84:	d0ee      	beq.n	800cb64 <rclc_executor_spin+0x8>
 800cb86:	b002      	add	sp, #8
 800cb88:	bd10      	pop	{r4, pc}
 800cb8a:	f000 f965 	bl	800ce58 <rcutils_reset_error>
 800cb8e:	2001      	movs	r0, #1
 800cb90:	b002      	add	sp, #8
 800cb92:	bd10      	pop	{r4, pc}
 800cb94:	200b      	movs	r0, #11
 800cb96:	4770      	bx	lr

0800cb98 <rclc_executor_handle_counters_zero_init>:
 800cb98:	b130      	cbz	r0, 800cba8 <rclc_executor_handle_counters_zero_init+0x10>
 800cb9a:	b508      	push	{r3, lr}
 800cb9c:	2220      	movs	r2, #32
 800cb9e:	2100      	movs	r1, #0
 800cba0:	f00a fdb4 	bl	801770c <memset>
 800cba4:	2000      	movs	r0, #0
 800cba6:	bd08      	pop	{r3, pc}
 800cba8:	200b      	movs	r0, #11
 800cbaa:	4770      	bx	lr
 800cbac:	0000      	movs	r0, r0
	...

0800cbb0 <rclc_executor_handle_init>:
 800cbb0:	b168      	cbz	r0, 800cbce <rclc_executor_handle_init+0x1e>
 800cbb2:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800cbd8 <rclc_executor_handle_init+0x28>
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	220b      	movs	r2, #11
 800cbba:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800cbbe:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800cbc2:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800cbc6:	8002      	strh	r2, [r0, #0]
 800cbc8:	8703      	strh	r3, [r0, #56]	@ 0x38
 800cbca:	4618      	mov	r0, r3
 800cbcc:	4770      	bx	lr
 800cbce:	200b      	movs	r0, #11
 800cbd0:	4770      	bx	lr
 800cbd2:	bf00      	nop
 800cbd4:	f3af 8000 	nop.w
	...

0800cbe0 <rclc_support_init_with_options>:
 800cbe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cbe4:	b083      	sub	sp, #12
 800cbe6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cbe8:	b340      	cbz	r0, 800cc3c <rclc_support_init_with_options+0x5c>
 800cbea:	461d      	mov	r5, r3
 800cbec:	b333      	cbz	r3, 800cc3c <rclc_support_init_with_options+0x5c>
 800cbee:	b32e      	cbz	r6, 800cc3c <rclc_support_init_with_options+0x5c>
 800cbf0:	46e9      	mov	r9, sp
 800cbf2:	4604      	mov	r4, r0
 800cbf4:	4648      	mov	r0, r9
 800cbf6:	460f      	mov	r7, r1
 800cbf8:	4690      	mov	r8, r2
 800cbfa:	f004 ff9f 	bl	8011b3c <rcl_get_zero_initialized_context>
 800cbfe:	e899 0003 	ldmia.w	r9, {r0, r1}
 800cc02:	462a      	mov	r2, r5
 800cc04:	e884 0003 	stmia.w	r4, {r0, r1}
 800cc08:	4623      	mov	r3, r4
 800cc0a:	4641      	mov	r1, r8
 800cc0c:	4638      	mov	r0, r7
 800cc0e:	f005 f805 	bl	8011c1c <rcl_init>
 800cc12:	4605      	mov	r5, r0
 800cc14:	b960      	cbnz	r0, 800cc30 <rclc_support_init_with_options+0x50>
 800cc16:	60a6      	str	r6, [r4, #8]
 800cc18:	4632      	mov	r2, r6
 800cc1a:	f104 010c 	add.w	r1, r4, #12
 800cc1e:	2003      	movs	r0, #3
 800cc20:	f005 fd52 	bl	80126c8 <rcl_clock_init>
 800cc24:	4605      	mov	r5, r0
 800cc26:	b918      	cbnz	r0, 800cc30 <rclc_support_init_with_options+0x50>
 800cc28:	4628      	mov	r0, r5
 800cc2a:	b003      	add	sp, #12
 800cc2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc30:	f000 f912 	bl	800ce58 <rcutils_reset_error>
 800cc34:	4628      	mov	r0, r5
 800cc36:	b003      	add	sp, #12
 800cc38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc3c:	250b      	movs	r5, #11
 800cc3e:	4628      	mov	r0, r5
 800cc40:	b003      	add	sp, #12
 800cc42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc46:	bf00      	nop

0800cc48 <rclc_node_init_default>:
 800cc48:	b3b8      	cbz	r0, 800ccba <rclc_node_init_default+0x72>
 800cc4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc4e:	460d      	mov	r5, r1
 800cc50:	b0a1      	sub	sp, #132	@ 0x84
 800cc52:	b329      	cbz	r1, 800cca0 <rclc_node_init_default+0x58>
 800cc54:	4616      	mov	r6, r2
 800cc56:	b31a      	cbz	r2, 800cca0 <rclc_node_init_default+0x58>
 800cc58:	461f      	mov	r7, r3
 800cc5a:	b30b      	cbz	r3, 800cca0 <rclc_node_init_default+0x58>
 800cc5c:	f10d 0810 	add.w	r8, sp, #16
 800cc60:	4604      	mov	r4, r0
 800cc62:	4640      	mov	r0, r8
 800cc64:	f005 f900 	bl	8011e68 <rcl_get_zero_initialized_node>
 800cc68:	e898 0003 	ldmia.w	r8, {r0, r1}
 800cc6c:	f10d 0918 	add.w	r9, sp, #24
 800cc70:	e884 0003 	stmia.w	r4, {r0, r1}
 800cc74:	4648      	mov	r0, r9
 800cc76:	f005 fa6f 	bl	8012158 <rcl_node_get_default_options>
 800cc7a:	4640      	mov	r0, r8
 800cc7c:	f005 f8f4 	bl	8011e68 <rcl_get_zero_initialized_node>
 800cc80:	f8cd 9000 	str.w	r9, [sp]
 800cc84:	e898 0003 	ldmia.w	r8, {r0, r1}
 800cc88:	463b      	mov	r3, r7
 800cc8a:	e884 0003 	stmia.w	r4, {r0, r1}
 800cc8e:	4632      	mov	r2, r6
 800cc90:	4629      	mov	r1, r5
 800cc92:	4620      	mov	r0, r4
 800cc94:	f005 f8f2 	bl	8011e7c <rcl_node_init>
 800cc98:	b930      	cbnz	r0, 800cca8 <rclc_node_init_default+0x60>
 800cc9a:	b021      	add	sp, #132	@ 0x84
 800cc9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cca0:	200b      	movs	r0, #11
 800cca2:	b021      	add	sp, #132	@ 0x84
 800cca4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cca8:	9003      	str	r0, [sp, #12]
 800ccaa:	f000 f8d5 	bl	800ce58 <rcutils_reset_error>
 800ccae:	f000 f8d3 	bl	800ce58 <rcutils_reset_error>
 800ccb2:	9803      	ldr	r0, [sp, #12]
 800ccb4:	b021      	add	sp, #132	@ 0x84
 800ccb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccba:	200b      	movs	r0, #11
 800ccbc:	4770      	bx	lr
 800ccbe:	bf00      	nop

0800ccc0 <rclc_publisher_init_default>:
 800ccc0:	b368      	cbz	r0, 800cd1e <rclc_publisher_init_default+0x5e>
 800ccc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccc6:	460d      	mov	r5, r1
 800ccc8:	b0a0      	sub	sp, #128	@ 0x80
 800ccca:	b321      	cbz	r1, 800cd16 <rclc_publisher_init_default+0x56>
 800cccc:	4616      	mov	r6, r2
 800ccce:	b312      	cbz	r2, 800cd16 <rclc_publisher_init_default+0x56>
 800ccd0:	461f      	mov	r7, r3
 800ccd2:	b303      	cbz	r3, 800cd16 <rclc_publisher_init_default+0x56>
 800ccd4:	4604      	mov	r4, r0
 800ccd6:	f7ff f857 	bl	800bd88 <rcl_get_zero_initialized_publisher>
 800ccda:	f10d 0810 	add.w	r8, sp, #16
 800ccde:	6020      	str	r0, [r4, #0]
 800cce0:	4640      	mov	r0, r8
 800cce2:	f7ff f8ed 	bl	800bec0 <rcl_publisher_get_default_options>
 800cce6:	490f      	ldr	r1, [pc, #60]	@ (800cd24 <rclc_publisher_init_default+0x64>)
 800cce8:	2250      	movs	r2, #80	@ 0x50
 800ccea:	4640      	mov	r0, r8
 800ccec:	f00a fdd7 	bl	801789e <memcpy>
 800ccf0:	f8cd 8000 	str.w	r8, [sp]
 800ccf4:	463b      	mov	r3, r7
 800ccf6:	4632      	mov	r2, r6
 800ccf8:	4629      	mov	r1, r5
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	f7ff f84a 	bl	800bd94 <rcl_publisher_init>
 800cd00:	b910      	cbnz	r0, 800cd08 <rclc_publisher_init_default+0x48>
 800cd02:	b020      	add	sp, #128	@ 0x80
 800cd04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd08:	9003      	str	r0, [sp, #12]
 800cd0a:	f000 f8a5 	bl	800ce58 <rcutils_reset_error>
 800cd0e:	9803      	ldr	r0, [sp, #12]
 800cd10:	b020      	add	sp, #128	@ 0x80
 800cd12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd16:	200b      	movs	r0, #11
 800cd18:	b020      	add	sp, #128	@ 0x80
 800cd1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd1e:	200b      	movs	r0, #11
 800cd20:	4770      	bx	lr
 800cd22:	bf00      	nop
 800cd24:	08018a08 	.word	0x08018a08

0800cd28 <rclc_timer_init_default>:
 800cd28:	b360      	cbz	r0, 800cd84 <rclc_timer_init_default+0x5c>
 800cd2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd2e:	460e      	mov	r6, r1
 800cd30:	b08a      	sub	sp, #40	@ 0x28
 800cd32:	b319      	cbz	r1, 800cd7c <rclc_timer_init_default+0x54>
 800cd34:	4690      	mov	r8, r2
 800cd36:	461f      	mov	r7, r3
 800cd38:	4605      	mov	r5, r0
 800cd3a:	f005 fea3 	bl	8012a84 <rcl_get_zero_initialized_timer>
 800cd3e:	68b4      	ldr	r4, [r6, #8]
 800cd40:	6028      	str	r0, [r5, #0]
 800cd42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cd44:	f10d 0c0c 	add.w	ip, sp, #12
 800cd48:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cd4c:	6823      	ldr	r3, [r4, #0]
 800cd4e:	f8cc 3000 	str.w	r3, [ip]
 800cd52:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cd54:	9302      	str	r3, [sp, #8]
 800cd56:	e9cd 8700 	strd	r8, r7, [sp]
 800cd5a:	4628      	mov	r0, r5
 800cd5c:	4632      	mov	r2, r6
 800cd5e:	f106 010c 	add.w	r1, r6, #12
 800cd62:	f005 fe95 	bl	8012a90 <rcl_timer_init>
 800cd66:	b910      	cbnz	r0, 800cd6e <rclc_timer_init_default+0x46>
 800cd68:	b00a      	add	sp, #40	@ 0x28
 800cd6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd6e:	9009      	str	r0, [sp, #36]	@ 0x24
 800cd70:	f000 f872 	bl	800ce58 <rcutils_reset_error>
 800cd74:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cd76:	b00a      	add	sp, #40	@ 0x28
 800cd78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd7c:	200b      	movs	r0, #11
 800cd7e:	b00a      	add	sp, #40	@ 0x28
 800cd80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd84:	200b      	movs	r0, #11
 800cd86:	4770      	bx	lr

0800cd88 <__default_zero_allocate>:
 800cd88:	f00a b8d6 	b.w	8016f38 <calloc>

0800cd8c <__default_reallocate>:
 800cd8c:	f00a ba62 	b.w	8017254 <realloc>

0800cd90 <__default_deallocate>:
 800cd90:	f00a b93e 	b.w	8017010 <free>

0800cd94 <__default_allocate>:
 800cd94:	f00a b934 	b.w	8017000 <malloc>

0800cd98 <rcutils_get_zero_initialized_allocator>:
 800cd98:	b510      	push	{r4, lr}
 800cd9a:	4c05      	ldr	r4, [pc, #20]	@ (800cdb0 <rcutils_get_zero_initialized_allocator+0x18>)
 800cd9c:	4686      	mov	lr, r0
 800cd9e:	4684      	mov	ip, r0
 800cda0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cda2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cda6:	6823      	ldr	r3, [r4, #0]
 800cda8:	f8cc 3000 	str.w	r3, [ip]
 800cdac:	4670      	mov	r0, lr
 800cdae:	bd10      	pop	{r4, pc}
 800cdb0:	08018a58 	.word	0x08018a58

0800cdb4 <rcutils_set_default_allocator>:
 800cdb4:	b1a8      	cbz	r0, 800cde2 <rcutils_set_default_allocator+0x2e>
 800cdb6:	6802      	ldr	r2, [r0, #0]
 800cdb8:	b1a2      	cbz	r2, 800cde4 <rcutils_set_default_allocator+0x30>
 800cdba:	6841      	ldr	r1, [r0, #4]
 800cdbc:	b1a1      	cbz	r1, 800cde8 <rcutils_set_default_allocator+0x34>
 800cdbe:	b410      	push	{r4}
 800cdc0:	68c4      	ldr	r4, [r0, #12]
 800cdc2:	b164      	cbz	r4, 800cdde <rcutils_set_default_allocator+0x2a>
 800cdc4:	6880      	ldr	r0, [r0, #8]
 800cdc6:	b138      	cbz	r0, 800cdd8 <rcutils_set_default_allocator+0x24>
 800cdc8:	4b08      	ldr	r3, [pc, #32]	@ (800cdec <rcutils_set_default_allocator+0x38>)
 800cdca:	601a      	str	r2, [r3, #0]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800cdd2:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800cdd6:	2001      	movs	r0, #1
 800cdd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cddc:	4770      	bx	lr
 800cdde:	4620      	mov	r0, r4
 800cde0:	e7fa      	b.n	800cdd8 <rcutils_set_default_allocator+0x24>
 800cde2:	4770      	bx	lr
 800cde4:	4610      	mov	r0, r2
 800cde6:	4770      	bx	lr
 800cde8:	4608      	mov	r0, r1
 800cdea:	4770      	bx	lr
 800cdec:	200000d4 	.word	0x200000d4

0800cdf0 <rcutils_get_default_allocator>:
 800cdf0:	b510      	push	{r4, lr}
 800cdf2:	4c05      	ldr	r4, [pc, #20]	@ (800ce08 <rcutils_get_default_allocator+0x18>)
 800cdf4:	4686      	mov	lr, r0
 800cdf6:	4684      	mov	ip, r0
 800cdf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cdfa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cdfe:	6823      	ldr	r3, [r4, #0]
 800ce00:	f8cc 3000 	str.w	r3, [ip]
 800ce04:	4670      	mov	r0, lr
 800ce06:	bd10      	pop	{r4, pc}
 800ce08:	200000d4 	.word	0x200000d4

0800ce0c <rcutils_allocator_is_valid>:
 800ce0c:	b158      	cbz	r0, 800ce26 <rcutils_allocator_is_valid+0x1a>
 800ce0e:	6803      	ldr	r3, [r0, #0]
 800ce10:	b143      	cbz	r3, 800ce24 <rcutils_allocator_is_valid+0x18>
 800ce12:	6843      	ldr	r3, [r0, #4]
 800ce14:	b133      	cbz	r3, 800ce24 <rcutils_allocator_is_valid+0x18>
 800ce16:	68c3      	ldr	r3, [r0, #12]
 800ce18:	b123      	cbz	r3, 800ce24 <rcutils_allocator_is_valid+0x18>
 800ce1a:	6880      	ldr	r0, [r0, #8]
 800ce1c:	3800      	subs	r0, #0
 800ce1e:	bf18      	it	ne
 800ce20:	2001      	movne	r0, #1
 800ce22:	4770      	bx	lr
 800ce24:	4618      	mov	r0, r3
 800ce26:	4770      	bx	lr

0800ce28 <rcutils_get_error_string>:
 800ce28:	4b06      	ldr	r3, [pc, #24]	@ (800ce44 <rcutils_get_error_string+0x1c>)
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	b13b      	cbz	r3, 800ce3e <rcutils_get_error_string+0x16>
 800ce2e:	4b06      	ldr	r3, [pc, #24]	@ (800ce48 <rcutils_get_error_string+0x20>)
 800ce30:	781a      	ldrb	r2, [r3, #0]
 800ce32:	b90a      	cbnz	r2, 800ce38 <rcutils_get_error_string+0x10>
 800ce34:	2201      	movs	r2, #1
 800ce36:	701a      	strb	r2, [r3, #0]
 800ce38:	4b04      	ldr	r3, [pc, #16]	@ (800ce4c <rcutils_get_error_string+0x24>)
 800ce3a:	7818      	ldrb	r0, [r3, #0]
 800ce3c:	4770      	bx	lr
 800ce3e:	4b04      	ldr	r3, [pc, #16]	@ (800ce50 <rcutils_get_error_string+0x28>)
 800ce40:	7818      	ldrb	r0, [r3, #0]
 800ce42:	4770      	bx	lr
 800ce44:	200062a0 	.word	0x200062a0
 800ce48:	200062b9 	.word	0x200062b9
 800ce4c:	200062b8 	.word	0x200062b8
 800ce50:	08018a6c 	.word	0x08018a6c
 800ce54:	00000000 	.word	0x00000000

0800ce58 <rcutils_reset_error>:
 800ce58:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800ce78 <rcutils_reset_error+0x20>
 800ce5c:	4a08      	ldr	r2, [pc, #32]	@ (800ce80 <rcutils_reset_error+0x28>)
 800ce5e:	4809      	ldr	r0, [pc, #36]	@ (800ce84 <rcutils_reset_error+0x2c>)
 800ce60:	4909      	ldr	r1, [pc, #36]	@ (800ce88 <rcutils_reset_error+0x30>)
 800ce62:	2300      	movs	r3, #0
 800ce64:	8013      	strh	r3, [r2, #0]
 800ce66:	ed82 7b02 	vstr	d7, [r2, #8]
 800ce6a:	4a08      	ldr	r2, [pc, #32]	@ (800ce8c <rcutils_reset_error+0x34>)
 800ce6c:	7003      	strb	r3, [r0, #0]
 800ce6e:	700b      	strb	r3, [r1, #0]
 800ce70:	7013      	strb	r3, [r2, #0]
 800ce72:	4770      	bx	lr
 800ce74:	f3af 8000 	nop.w
	...
 800ce80:	200062a8 	.word	0x200062a8
 800ce84:	200062b9 	.word	0x200062b9
 800ce88:	200062b8 	.word	0x200062b8
 800ce8c:	200062a0 	.word	0x200062a0

0800ce90 <rcutils_system_time_now>:
 800ce90:	b308      	cbz	r0, 800ced6 <rcutils_system_time_now+0x46>
 800ce92:	b570      	push	{r4, r5, r6, lr}
 800ce94:	b084      	sub	sp, #16
 800ce96:	4604      	mov	r4, r0
 800ce98:	4669      	mov	r1, sp
 800ce9a:	2001      	movs	r0, #1
 800ce9c:	f7f5 f848 	bl	8001f30 <clock_gettime>
 800cea0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800cea4:	2d00      	cmp	r5, #0
 800cea6:	db13      	blt.n	800ced0 <rcutils_system_time_now+0x40>
 800cea8:	9902      	ldr	r1, [sp, #8]
 800ceaa:	2900      	cmp	r1, #0
 800ceac:	db0d      	blt.n	800ceca <rcutils_system_time_now+0x3a>
 800ceae:	4e0b      	ldr	r6, [pc, #44]	@ (800cedc <rcutils_system_time_now+0x4c>)
 800ceb0:	fba3 3206 	umull	r3, r2, r3, r6
 800ceb4:	185b      	adds	r3, r3, r1
 800ceb6:	fb06 2205 	mla	r2, r6, r5, r2
 800ceba:	f04f 0000 	mov.w	r0, #0
 800cebe:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800cec2:	e9c4 3200 	strd	r3, r2, [r4]
 800cec6:	b004      	add	sp, #16
 800cec8:	bd70      	pop	{r4, r5, r6, pc}
 800ceca:	ea53 0205 	orrs.w	r2, r3, r5
 800cece:	d1ee      	bne.n	800ceae <rcutils_system_time_now+0x1e>
 800ced0:	2002      	movs	r0, #2
 800ced2:	b004      	add	sp, #16
 800ced4:	bd70      	pop	{r4, r5, r6, pc}
 800ced6:	200b      	movs	r0, #11
 800ced8:	4770      	bx	lr
 800ceda:	bf00      	nop
 800cedc:	3b9aca00 	.word	0x3b9aca00

0800cee0 <rcutils_steady_time_now>:
 800cee0:	b308      	cbz	r0, 800cf26 <rcutils_steady_time_now+0x46>
 800cee2:	b570      	push	{r4, r5, r6, lr}
 800cee4:	b084      	sub	sp, #16
 800cee6:	4604      	mov	r4, r0
 800cee8:	4669      	mov	r1, sp
 800ceea:	2000      	movs	r0, #0
 800ceec:	f7f5 f820 	bl	8001f30 <clock_gettime>
 800cef0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800cef4:	2d00      	cmp	r5, #0
 800cef6:	db13      	blt.n	800cf20 <rcutils_steady_time_now+0x40>
 800cef8:	9902      	ldr	r1, [sp, #8]
 800cefa:	2900      	cmp	r1, #0
 800cefc:	db0d      	blt.n	800cf1a <rcutils_steady_time_now+0x3a>
 800cefe:	4e0b      	ldr	r6, [pc, #44]	@ (800cf2c <rcutils_steady_time_now+0x4c>)
 800cf00:	fba3 3206 	umull	r3, r2, r3, r6
 800cf04:	185b      	adds	r3, r3, r1
 800cf06:	fb06 2205 	mla	r2, r6, r5, r2
 800cf0a:	f04f 0000 	mov.w	r0, #0
 800cf0e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800cf12:	e9c4 3200 	strd	r3, r2, [r4]
 800cf16:	b004      	add	sp, #16
 800cf18:	bd70      	pop	{r4, r5, r6, pc}
 800cf1a:	ea53 0205 	orrs.w	r2, r3, r5
 800cf1e:	d1ee      	bne.n	800cefe <rcutils_steady_time_now+0x1e>
 800cf20:	2002      	movs	r0, #2
 800cf22:	b004      	add	sp, #16
 800cf24:	bd70      	pop	{r4, r5, r6, pc}
 800cf26:	200b      	movs	r0, #11
 800cf28:	4770      	bx	lr
 800cf2a:	bf00      	nop
 800cf2c:	3b9aca00 	.word	0x3b9aca00

0800cf30 <rmw_get_zero_initialized_init_options>:
 800cf30:	b510      	push	{r4, lr}
 800cf32:	2238      	movs	r2, #56	@ 0x38
 800cf34:	4604      	mov	r4, r0
 800cf36:	2100      	movs	r1, #0
 800cf38:	f00a fbe8 	bl	801770c <memset>
 800cf3c:	f104 0010 	add.w	r0, r4, #16
 800cf40:	f000 f80a 	bl	800cf58 <rmw_get_default_security_options>
 800cf44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cf48:	60e3      	str	r3, [r4, #12]
 800cf4a:	4620      	mov	r0, r4
 800cf4c:	bd10      	pop	{r4, pc}
 800cf4e:	bf00      	nop

0800cf50 <rmw_get_default_publisher_options>:
 800cf50:	2200      	movs	r2, #0
 800cf52:	6002      	str	r2, [r0, #0]
 800cf54:	7102      	strb	r2, [r0, #4]
 800cf56:	4770      	bx	lr

0800cf58 <rmw_get_default_security_options>:
 800cf58:	2200      	movs	r2, #0
 800cf5a:	7002      	strb	r2, [r0, #0]
 800cf5c:	6042      	str	r2, [r0, #4]
 800cf5e:	4770      	bx	lr

0800cf60 <rmw_uros_set_custom_transport>:
 800cf60:	b470      	push	{r4, r5, r6}
 800cf62:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800cf66:	b162      	cbz	r2, 800cf82 <rmw_uros_set_custom_transport+0x22>
 800cf68:	b15b      	cbz	r3, 800cf82 <rmw_uros_set_custom_transport+0x22>
 800cf6a:	b155      	cbz	r5, 800cf82 <rmw_uros_set_custom_transport+0x22>
 800cf6c:	b14e      	cbz	r6, 800cf82 <rmw_uros_set_custom_transport+0x22>
 800cf6e:	4c06      	ldr	r4, [pc, #24]	@ (800cf88 <rmw_uros_set_custom_transport+0x28>)
 800cf70:	7020      	strb	r0, [r4, #0]
 800cf72:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800cf76:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800cf7a:	6166      	str	r6, [r4, #20]
 800cf7c:	2000      	movs	r0, #0
 800cf7e:	bc70      	pop	{r4, r5, r6}
 800cf80:	4770      	bx	lr
 800cf82:	200b      	movs	r0, #11
 800cf84:	bc70      	pop	{r4, r5, r6}
 800cf86:	4770      	bx	lr
 800cf88:	200062bc 	.word	0x200062bc

0800cf8c <rmw_init_options_init>:
 800cf8c:	b084      	sub	sp, #16
 800cf8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf90:	b083      	sub	sp, #12
 800cf92:	ad09      	add	r5, sp, #36	@ 0x24
 800cf94:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800cf98:	b130      	cbz	r0, 800cfa8 <rmw_init_options_init+0x1c>
 800cf9a:	4604      	mov	r4, r0
 800cf9c:	4628      	mov	r0, r5
 800cf9e:	f7ff ff35 	bl	800ce0c <rcutils_allocator_is_valid>
 800cfa2:	b108      	cbz	r0, 800cfa8 <rmw_init_options_init+0x1c>
 800cfa4:	68a6      	ldr	r6, [r4, #8]
 800cfa6:	b12e      	cbz	r6, 800cfb4 <rmw_init_options_init+0x28>
 800cfa8:	200b      	movs	r0, #11
 800cfaa:	b003      	add	sp, #12
 800cfac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cfb0:	b004      	add	sp, #16
 800cfb2:	4770      	bx	lr
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	e9c4 2300 	strd	r2, r3, [r4]
 800cfbc:	4b22      	ldr	r3, [pc, #136]	@ (800d048 <rmw_init_options_init+0xbc>)
 800cfbe:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800d058 <rmw_init_options_init+0xcc>
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	60a3      	str	r3, [r4, #8]
 800cfc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cfc8:	f104 0c20 	add.w	ip, r4, #32
 800cfcc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cfd0:	466f      	mov	r7, sp
 800cfd2:	682b      	ldr	r3, [r5, #0]
 800cfd4:	f8cc 3000 	str.w	r3, [ip]
 800cfd8:	4638      	mov	r0, r7
 800cfda:	f8c4 e01c 	str.w	lr, [r4, #28]
 800cfde:	60e6      	str	r6, [r4, #12]
 800cfe0:	f7ff ffba 	bl	800cf58 <rmw_get_default_security_options>
 800cfe4:	e897 0003 	ldmia.w	r7, {r0, r1}
 800cfe8:	f104 0310 	add.w	r3, r4, #16
 800cfec:	e883 0003 	stmia.w	r3, {r0, r1}
 800cff0:	2203      	movs	r2, #3
 800cff2:	4816      	ldr	r0, [pc, #88]	@ (800d04c <rmw_init_options_init+0xc0>)
 800cff4:	4916      	ldr	r1, [pc, #88]	@ (800d050 <rmw_init_options_init+0xc4>)
 800cff6:	7626      	strb	r6, [r4, #24]
 800cff8:	f000 febc 	bl	800dd74 <rmw_uxrce_init_init_options_impl_memory>
 800cffc:	4813      	ldr	r0, [pc, #76]	@ (800d04c <rmw_init_options_init+0xc0>)
 800cffe:	f008 f8cb 	bl	8015198 <get_memory>
 800d002:	b1f0      	cbz	r0, 800d042 <rmw_init_options_init+0xb6>
 800d004:	4a13      	ldr	r2, [pc, #76]	@ (800d054 <rmw_init_options_init+0xc8>)
 800d006:	6883      	ldr	r3, [r0, #8]
 800d008:	6851      	ldr	r1, [r2, #4]
 800d00a:	7810      	ldrb	r0, [r2, #0]
 800d00c:	6363      	str	r3, [r4, #52]	@ 0x34
 800d00e:	7418      	strb	r0, [r3, #16]
 800d010:	6159      	str	r1, [r3, #20]
 800d012:	68d1      	ldr	r1, [r2, #12]
 800d014:	61d9      	str	r1, [r3, #28]
 800d016:	6911      	ldr	r1, [r2, #16]
 800d018:	6219      	str	r1, [r3, #32]
 800d01a:	6951      	ldr	r1, [r2, #20]
 800d01c:	6892      	ldr	r2, [r2, #8]
 800d01e:	619a      	str	r2, [r3, #24]
 800d020:	6259      	str	r1, [r3, #36]	@ 0x24
 800d022:	f003 fb9f 	bl	8010764 <uxr_nanos>
 800d026:	f00a f8a9 	bl	801717c <srand>
 800d02a:	f00a f8d5 	bl	80171d8 <rand>
 800d02e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d030:	6298      	str	r0, [r3, #40]	@ 0x28
 800d032:	2800      	cmp	r0, #0
 800d034:	d0f9      	beq.n	800d02a <rmw_init_options_init+0x9e>
 800d036:	2000      	movs	r0, #0
 800d038:	b003      	add	sp, #12
 800d03a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d03e:	b004      	add	sp, #16
 800d040:	4770      	bx	lr
 800d042:	2001      	movs	r0, #1
 800d044:	e7b1      	b.n	800cfaa <rmw_init_options_init+0x1e>
 800d046:	bf00      	nop
 800d048:	08019218 	.word	0x08019218
 800d04c:	2000abd4 	.word	0x2000abd4
 800d050:	20006470 	.word	0x20006470
 800d054:	200062bc 	.word	0x200062bc
 800d058:	08018a70 	.word	0x08018a70

0800d05c <rmw_init_options_copy>:
 800d05c:	b570      	push	{r4, r5, r6, lr}
 800d05e:	b158      	cbz	r0, 800d078 <rmw_init_options_copy+0x1c>
 800d060:	460d      	mov	r5, r1
 800d062:	b149      	cbz	r1, 800d078 <rmw_init_options_copy+0x1c>
 800d064:	4604      	mov	r4, r0
 800d066:	6880      	ldr	r0, [r0, #8]
 800d068:	b120      	cbz	r0, 800d074 <rmw_init_options_copy+0x18>
 800d06a:	4b1e      	ldr	r3, [pc, #120]	@ (800d0e4 <rmw_init_options_copy+0x88>)
 800d06c:	6819      	ldr	r1, [r3, #0]
 800d06e:	f7f3 f8d7 	bl	8000220 <strcmp>
 800d072:	bb90      	cbnz	r0, 800d0da <rmw_init_options_copy+0x7e>
 800d074:	68ab      	ldr	r3, [r5, #8]
 800d076:	b113      	cbz	r3, 800d07e <rmw_init_options_copy+0x22>
 800d078:	250b      	movs	r5, #11
 800d07a:	4628      	mov	r0, r5
 800d07c:	bd70      	pop	{r4, r5, r6, pc}
 800d07e:	4623      	mov	r3, r4
 800d080:	462a      	mov	r2, r5
 800d082:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800d086:	f8d3 c000 	ldr.w	ip, [r3]
 800d08a:	6858      	ldr	r0, [r3, #4]
 800d08c:	6899      	ldr	r1, [r3, #8]
 800d08e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800d092:	f8c2 e00c 	str.w	lr, [r2, #12]
 800d096:	3310      	adds	r3, #16
 800d098:	42b3      	cmp	r3, r6
 800d09a:	f8c2 c000 	str.w	ip, [r2]
 800d09e:	6050      	str	r0, [r2, #4]
 800d0a0:	6091      	str	r1, [r2, #8]
 800d0a2:	f102 0210 	add.w	r2, r2, #16
 800d0a6:	d1ee      	bne.n	800d086 <rmw_init_options_copy+0x2a>
 800d0a8:	6819      	ldr	r1, [r3, #0]
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	480e      	ldr	r0, [pc, #56]	@ (800d0e8 <rmw_init_options_copy+0x8c>)
 800d0ae:	6053      	str	r3, [r2, #4]
 800d0b0:	6011      	str	r1, [r2, #0]
 800d0b2:	f008 f871 	bl	8015198 <get_memory>
 800d0b6:	b198      	cbz	r0, 800d0e0 <rmw_init_options_copy+0x84>
 800d0b8:	6883      	ldr	r3, [r0, #8]
 800d0ba:	636b      	str	r3, [r5, #52]	@ 0x34
 800d0bc:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d0be:	f102 0c10 	add.w	ip, r2, #16
 800d0c2:	f103 0410 	add.w	r4, r3, #16
 800d0c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d0ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d0cc:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800d0d0:	2500      	movs	r5, #0
 800d0d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d0d6:	4628      	mov	r0, r5
 800d0d8:	bd70      	pop	{r4, r5, r6, pc}
 800d0da:	250c      	movs	r5, #12
 800d0dc:	4628      	mov	r0, r5
 800d0de:	bd70      	pop	{r4, r5, r6, pc}
 800d0e0:	2501      	movs	r5, #1
 800d0e2:	e7ca      	b.n	800d07a <rmw_init_options_copy+0x1e>
 800d0e4:	08019218 	.word	0x08019218
 800d0e8:	2000abd4 	.word	0x2000abd4

0800d0ec <rmw_init_options_fini>:
 800d0ec:	2800      	cmp	r0, #0
 800d0ee:	d03d      	beq.n	800d16c <rmw_init_options_fini+0x80>
 800d0f0:	b510      	push	{r4, lr}
 800d0f2:	4604      	mov	r4, r0
 800d0f4:	b08e      	sub	sp, #56	@ 0x38
 800d0f6:	3020      	adds	r0, #32
 800d0f8:	f7ff fe88 	bl	800ce0c <rcutils_allocator_is_valid>
 800d0fc:	b360      	cbz	r0, 800d158 <rmw_init_options_fini+0x6c>
 800d0fe:	68a0      	ldr	r0, [r4, #8]
 800d100:	b120      	cbz	r0, 800d10c <rmw_init_options_fini+0x20>
 800d102:	4b1c      	ldr	r3, [pc, #112]	@ (800d174 <rmw_init_options_fini+0x88>)
 800d104:	6819      	ldr	r1, [r3, #0]
 800d106:	f7f3 f88b 	bl	8000220 <strcmp>
 800d10a:	bb68      	cbnz	r0, 800d168 <rmw_init_options_fini+0x7c>
 800d10c:	4b1a      	ldr	r3, [pc, #104]	@ (800d178 <rmw_init_options_fini+0x8c>)
 800d10e:	6819      	ldr	r1, [r3, #0]
 800d110:	b331      	cbz	r1, 800d160 <rmw_init_options_fini+0x74>
 800d112:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d114:	e001      	b.n	800d11a <rmw_init_options_fini+0x2e>
 800d116:	6849      	ldr	r1, [r1, #4]
 800d118:	b311      	cbz	r1, 800d160 <rmw_init_options_fini+0x74>
 800d11a:	688b      	ldr	r3, [r1, #8]
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d1fa      	bne.n	800d116 <rmw_init_options_fini+0x2a>
 800d120:	4815      	ldr	r0, [pc, #84]	@ (800d178 <rmw_init_options_fini+0x8c>)
 800d122:	f008 f849 	bl	80151b8 <put_memory>
 800d126:	4668      	mov	r0, sp
 800d128:	f7ff ff02 	bl	800cf30 <rmw_get_zero_initialized_init_options>
 800d12c:	46ee      	mov	lr, sp
 800d12e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d132:	46a4      	mov	ip, r4
 800d134:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d138:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d13c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d140:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d144:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d148:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d14c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d150:	2300      	movs	r3, #0
 800d152:	4618      	mov	r0, r3
 800d154:	b00e      	add	sp, #56	@ 0x38
 800d156:	bd10      	pop	{r4, pc}
 800d158:	230b      	movs	r3, #11
 800d15a:	4618      	mov	r0, r3
 800d15c:	b00e      	add	sp, #56	@ 0x38
 800d15e:	bd10      	pop	{r4, pc}
 800d160:	2301      	movs	r3, #1
 800d162:	4618      	mov	r0, r3
 800d164:	b00e      	add	sp, #56	@ 0x38
 800d166:	bd10      	pop	{r4, pc}
 800d168:	230c      	movs	r3, #12
 800d16a:	e7f2      	b.n	800d152 <rmw_init_options_fini+0x66>
 800d16c:	230b      	movs	r3, #11
 800d16e:	4618      	mov	r0, r3
 800d170:	4770      	bx	lr
 800d172:	bf00      	nop
 800d174:	08019218 	.word	0x08019218
 800d178:	2000abd4 	.word	0x2000abd4

0800d17c <rmw_init>:
 800d17c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d180:	b083      	sub	sp, #12
 800d182:	2800      	cmp	r0, #0
 800d184:	f000 80d3 	beq.w	800d32e <rmw_init+0x1b2>
 800d188:	460e      	mov	r6, r1
 800d18a:	2900      	cmp	r1, #0
 800d18c:	f000 80cf 	beq.w	800d32e <rmw_init+0x1b2>
 800d190:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d192:	4605      	mov	r5, r0
 800d194:	2b00      	cmp	r3, #0
 800d196:	f000 80ca 	beq.w	800d32e <rmw_init+0x1b2>
 800d19a:	4b78      	ldr	r3, [pc, #480]	@ (800d37c <rmw_init+0x200>)
 800d19c:	6880      	ldr	r0, [r0, #8]
 800d19e:	681f      	ldr	r7, [r3, #0]
 800d1a0:	b128      	cbz	r0, 800d1ae <rmw_init+0x32>
 800d1a2:	4639      	mov	r1, r7
 800d1a4:	f7f3 f83c 	bl	8000220 <strcmp>
 800d1a8:	2800      	cmp	r0, #0
 800d1aa:	f040 80ca 	bne.w	800d342 <rmw_init+0x1c6>
 800d1ae:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d1b2:	4c73      	ldr	r4, [pc, #460]	@ (800d380 <rmw_init+0x204>)
 800d1b4:	4973      	ldr	r1, [pc, #460]	@ (800d384 <rmw_init+0x208>)
 800d1b6:	4874      	ldr	r0, [pc, #464]	@ (800d388 <rmw_init+0x20c>)
 800d1b8:	60b7      	str	r7, [r6, #8]
 800d1ba:	e9c6 2300 	strd	r2, r3, [r6]
 800d1be:	68eb      	ldr	r3, [r5, #12]
 800d1c0:	64b3      	str	r3, [r6, #72]	@ 0x48
 800d1c2:	2201      	movs	r2, #1
 800d1c4:	f000 fd76 	bl	800dcb4 <rmw_uxrce_init_session_memory>
 800d1c8:	4620      	mov	r0, r4
 800d1ca:	4970      	ldr	r1, [pc, #448]	@ (800d38c <rmw_init+0x210>)
 800d1cc:	2204      	movs	r2, #4
 800d1ce:	f000 fdb1 	bl	800dd34 <rmw_uxrce_init_static_input_buffer_memory>
 800d1d2:	f04f 0800 	mov.w	r8, #0
 800d1d6:	486c      	ldr	r0, [pc, #432]	@ (800d388 <rmw_init+0x20c>)
 800d1d8:	f884 800d 	strb.w	r8, [r4, #13]
 800d1dc:	f007 ffdc 	bl	8015198 <get_memory>
 800d1e0:	2800      	cmp	r0, #0
 800d1e2:	f000 80a9 	beq.w	800d338 <rmw_init+0x1bc>
 800d1e6:	6884      	ldr	r4, [r0, #8]
 800d1e8:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800d1ea:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800d1ec:	f890 c010 	ldrb.w	ip, [r0, #16]
 800d1f0:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800d1f4:	9101      	str	r1, [sp, #4]
 800d1f6:	6a00      	ldr	r0, [r0, #32]
 800d1f8:	9000      	str	r0, [sp, #0]
 800d1fa:	f104 0910 	add.w	r9, r4, #16
 800d1fe:	4661      	mov	r1, ip
 800d200:	4648      	mov	r0, r9
 800d202:	f001 fa33 	bl	800e66c <uxr_set_custom_transport_callbacks>
 800d206:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800d20a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d20e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800d212:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800d216:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800d21a:	495d      	ldr	r1, [pc, #372]	@ (800d390 <rmw_init+0x214>)
 800d21c:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800d220:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800d224:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800d228:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800d22c:	4859      	ldr	r0, [pc, #356]	@ (800d394 <rmw_init+0x218>)
 800d22e:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800d232:	2201      	movs	r2, #1
 800d234:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800d236:	f000 fd1d 	bl	800dc74 <rmw_uxrce_init_node_memory>
 800d23a:	4957      	ldr	r1, [pc, #348]	@ (800d398 <rmw_init+0x21c>)
 800d23c:	4857      	ldr	r0, [pc, #348]	@ (800d39c <rmw_init+0x220>)
 800d23e:	2205      	movs	r2, #5
 800d240:	f000 fcf8 	bl	800dc34 <rmw_uxrce_init_subscription_memory>
 800d244:	4956      	ldr	r1, [pc, #344]	@ (800d3a0 <rmw_init+0x224>)
 800d246:	4857      	ldr	r0, [pc, #348]	@ (800d3a4 <rmw_init+0x228>)
 800d248:	220a      	movs	r2, #10
 800d24a:	f000 fcd3 	bl	800dbf4 <rmw_uxrce_init_publisher_memory>
 800d24e:	4956      	ldr	r1, [pc, #344]	@ (800d3a8 <rmw_init+0x22c>)
 800d250:	4856      	ldr	r0, [pc, #344]	@ (800d3ac <rmw_init+0x230>)
 800d252:	2201      	movs	r2, #1
 800d254:	f000 fc8e 	bl	800db74 <rmw_uxrce_init_service_memory>
 800d258:	4955      	ldr	r1, [pc, #340]	@ (800d3b0 <rmw_init+0x234>)
 800d25a:	4856      	ldr	r0, [pc, #344]	@ (800d3b4 <rmw_init+0x238>)
 800d25c:	2201      	movs	r2, #1
 800d25e:	f000 fca9 	bl	800dbb4 <rmw_uxrce_init_client_memory>
 800d262:	4955      	ldr	r1, [pc, #340]	@ (800d3b8 <rmw_init+0x23c>)
 800d264:	4855      	ldr	r0, [pc, #340]	@ (800d3bc <rmw_init+0x240>)
 800d266:	220f      	movs	r2, #15
 800d268:	f000 fd44 	bl	800dcf4 <rmw_uxrce_init_topic_memory>
 800d26c:	4954      	ldr	r1, [pc, #336]	@ (800d3c0 <rmw_init+0x244>)
 800d26e:	4855      	ldr	r0, [pc, #340]	@ (800d3c4 <rmw_init+0x248>)
 800d270:	2203      	movs	r2, #3
 800d272:	f000 fd7f 	bl	800dd74 <rmw_uxrce_init_init_options_impl_memory>
 800d276:	4954      	ldr	r1, [pc, #336]	@ (800d3c8 <rmw_init+0x24c>)
 800d278:	4854      	ldr	r0, [pc, #336]	@ (800d3cc <rmw_init+0x250>)
 800d27a:	2204      	movs	r2, #4
 800d27c:	f000 fd9a 	bl	800ddb4 <rmw_uxrce_init_wait_set_memory>
 800d280:	4953      	ldr	r1, [pc, #332]	@ (800d3d0 <rmw_init+0x254>)
 800d282:	4854      	ldr	r0, [pc, #336]	@ (800d3d4 <rmw_init+0x258>)
 800d284:	2204      	movs	r2, #4
 800d286:	f000 fdb5 	bl	800ddf4 <rmw_uxrce_init_guard_condition_memory>
 800d28a:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800d28c:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800d28e:	4642      	mov	r2, r8
 800d290:	f000 fc38 	bl	800db04 <rmw_uxrce_transport_init>
 800d294:	4607      	mov	r7, r0
 800d296:	2800      	cmp	r0, #0
 800d298:	d158      	bne.n	800d34c <rmw_init+0x1d0>
 800d29a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800d29c:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800d2a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d2a2:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800d2a6:	4628      	mov	r0, r5
 800d2a8:	f001 fbda 	bl	800ea60 <uxr_init_session>
 800d2ac:	494a      	ldr	r1, [pc, #296]	@ (800d3d8 <rmw_init+0x25c>)
 800d2ae:	4622      	mov	r2, r4
 800d2b0:	4628      	mov	r0, r5
 800d2b2:	f001 fbf9 	bl	800eaa8 <uxr_set_topic_callback>
 800d2b6:	4949      	ldr	r1, [pc, #292]	@ (800d3dc <rmw_init+0x260>)
 800d2b8:	463a      	mov	r2, r7
 800d2ba:	4628      	mov	r0, r5
 800d2bc:	f001 fbf0 	bl	800eaa0 <uxr_set_status_callback>
 800d2c0:	4947      	ldr	r1, [pc, #284]	@ (800d3e0 <rmw_init+0x264>)
 800d2c2:	463a      	mov	r2, r7
 800d2c4:	4628      	mov	r0, r5
 800d2c6:	f001 fbf3 	bl	800eab0 <uxr_set_request_callback>
 800d2ca:	4946      	ldr	r1, [pc, #280]	@ (800d3e4 <rmw_init+0x268>)
 800d2cc:	463a      	mov	r2, r7
 800d2ce:	4628      	mov	r0, r5
 800d2d0:	f001 fbf2 	bl	800eab8 <uxr_set_reply_callback>
 800d2d4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d2d8:	2304      	movs	r3, #4
 800d2da:	0092      	lsls	r2, r2, #2
 800d2dc:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800d2e0:	4628      	mov	r0, r5
 800d2e2:	f001 fc27 	bl	800eb34 <uxr_create_input_reliable_stream>
 800d2e6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d2ea:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800d2ee:	0092      	lsls	r2, r2, #2
 800d2f0:	2304      	movs	r3, #4
 800d2f2:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800d2f6:	4628      	mov	r0, r5
 800d2f8:	f001 fbf4 	bl	800eae4 <uxr_create_output_reliable_stream>
 800d2fc:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800d300:	4628      	mov	r0, r5
 800d302:	f001 fc11 	bl	800eb28 <uxr_create_input_best_effort_stream>
 800d306:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800d30a:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800d30e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d312:	3114      	adds	r1, #20
 800d314:	4628      	mov	r0, r5
 800d316:	f001 fbd3 	bl	800eac0 <uxr_create_output_best_effort_stream>
 800d31a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800d31e:	4628      	mov	r0, r5
 800d320:	f002 f9b2 	bl	800f688 <uxr_create_session>
 800d324:	b1f8      	cbz	r0, 800d366 <rmw_init+0x1ea>
 800d326:	4638      	mov	r0, r7
 800d328:	b003      	add	sp, #12
 800d32a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d32e:	270b      	movs	r7, #11
 800d330:	4638      	mov	r0, r7
 800d332:	b003      	add	sp, #12
 800d334:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d338:	2701      	movs	r7, #1
 800d33a:	4638      	mov	r0, r7
 800d33c:	b003      	add	sp, #12
 800d33e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d342:	270c      	movs	r7, #12
 800d344:	4638      	mov	r0, r7
 800d346:	b003      	add	sp, #12
 800d348:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d34c:	4648      	mov	r0, r9
 800d34e:	f001 f9cf 	bl	800e6f0 <uxr_close_custom_transport>
 800d352:	480d      	ldr	r0, [pc, #52]	@ (800d388 <rmw_init+0x20c>)
 800d354:	4621      	mov	r1, r4
 800d356:	f007 ff2f 	bl	80151b8 <put_memory>
 800d35a:	4638      	mov	r0, r7
 800d35c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800d360:	b003      	add	sp, #12
 800d362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d366:	4648      	mov	r0, r9
 800d368:	f001 f9c2 	bl	800e6f0 <uxr_close_custom_transport>
 800d36c:	4806      	ldr	r0, [pc, #24]	@ (800d388 <rmw_init+0x20c>)
 800d36e:	4621      	mov	r1, r4
 800d370:	f007 ff22 	bl	80151b8 <put_memory>
 800d374:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800d376:	2701      	movs	r7, #1
 800d378:	e7d5      	b.n	800d326 <rmw_init+0x1aa>
 800d37a:	bf00      	nop
 800d37c:	08019218 	.word	0x08019218
 800d380:	2000ac24 	.word	0x2000ac24
 800d384:	20006ed0 	.word	0x20006ed0
 800d388:	2000ac14 	.word	0x2000ac14
 800d38c:	20008478 	.word	0x20008478
 800d390:	200064f4 	.word	0x200064f4
 800d394:	2000abe4 	.word	0x2000abe4
 800d398:	2000a578 	.word	0x2000a578
 800d39c:	2000ac34 	.word	0x2000ac34
 800d3a0:	20006598 	.word	0x20006598
 800d3a4:	2000abf4 	.word	0x2000abf4
 800d3a8:	20006e08 	.word	0x20006e08
 800d3ac:	2000ac04 	.word	0x2000ac04
 800d3b0:	20006328 	.word	0x20006328
 800d3b4:	20006314 	.word	0x20006314
 800d3b8:	2000a9b0 	.word	0x2000a9b0
 800d3bc:	2000ac44 	.word	0x2000ac44
 800d3c0:	20006470 	.word	0x20006470
 800d3c4:	2000abd4 	.word	0x2000abd4
 800d3c8:	2000ab54 	.word	0x2000ab54
 800d3cc:	2000ac54 	.word	0x2000ac54
 800d3d0:	200063f0 	.word	0x200063f0
 800d3d4:	2000abc4 	.word	0x2000abc4
 800d3d8:	08014fd1 	.word	0x08014fd1
 800d3dc:	08014fc9 	.word	0x08014fc9
 800d3e0:	08015069 	.word	0x08015069
 800d3e4:	08015105 	.word	0x08015105

0800d3e8 <rmw_context_fini>:
 800d3e8:	4b17      	ldr	r3, [pc, #92]	@ (800d448 <rmw_context_fini+0x60>)
 800d3ea:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800d3ec:	b570      	push	{r4, r5, r6, lr}
 800d3ee:	681c      	ldr	r4, [r3, #0]
 800d3f0:	4605      	mov	r5, r0
 800d3f2:	b334      	cbz	r4, 800d442 <rmw_context_fini+0x5a>
 800d3f4:	2600      	movs	r6, #0
 800d3f6:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800d3fa:	6902      	ldr	r2, [r0, #16]
 800d3fc:	428a      	cmp	r2, r1
 800d3fe:	d018      	beq.n	800d432 <rmw_context_fini+0x4a>
 800d400:	2c00      	cmp	r4, #0
 800d402:	d1f8      	bne.n	800d3f6 <rmw_context_fini+0xe>
 800d404:	b189      	cbz	r1, 800d42a <rmw_context_fini+0x42>
 800d406:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800d40a:	789b      	ldrb	r3, [r3, #2]
 800d40c:	2b01      	cmp	r3, #1
 800d40e:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800d412:	bf14      	ite	ne
 800d414:	210a      	movne	r1, #10
 800d416:	2100      	moveq	r1, #0
 800d418:	f002 f90e 	bl	800f638 <uxr_delete_session_retries>
 800d41c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800d41e:	f000 fd09 	bl	800de34 <rmw_uxrce_fini_session_memory>
 800d422:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800d424:	3010      	adds	r0, #16
 800d426:	f001 f963 	bl	800e6f0 <uxr_close_custom_transport>
 800d42a:	2300      	movs	r3, #0
 800d42c:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800d42e:	4630      	mov	r0, r6
 800d430:	bd70      	pop	{r4, r5, r6, pc}
 800d432:	3018      	adds	r0, #24
 800d434:	f000 f89c 	bl	800d570 <rmw_destroy_node>
 800d438:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d43a:	4606      	mov	r6, r0
 800d43c:	2c00      	cmp	r4, #0
 800d43e:	d1da      	bne.n	800d3f6 <rmw_context_fini+0xe>
 800d440:	e7e0      	b.n	800d404 <rmw_context_fini+0x1c>
 800d442:	4626      	mov	r6, r4
 800d444:	e7de      	b.n	800d404 <rmw_context_fini+0x1c>
 800d446:	bf00      	nop
 800d448:	2000abe4 	.word	0x2000abe4

0800d44c <create_node>:
 800d44c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d450:	b083      	sub	sp, #12
 800d452:	2b00      	cmp	r3, #0
 800d454:	d05f      	beq.n	800d516 <create_node+0xca>
 800d456:	4606      	mov	r6, r0
 800d458:	4835      	ldr	r0, [pc, #212]	@ (800d530 <create_node+0xe4>)
 800d45a:	460f      	mov	r7, r1
 800d45c:	4690      	mov	r8, r2
 800d45e:	461d      	mov	r5, r3
 800d460:	f007 fe9a 	bl	8015198 <get_memory>
 800d464:	2800      	cmp	r0, #0
 800d466:	d056      	beq.n	800d516 <create_node+0xca>
 800d468:	6884      	ldr	r4, [r0, #8]
 800d46a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800d46c:	6123      	str	r3, [r4, #16]
 800d46e:	f007 fefb 	bl	8015268 <rmw_get_implementation_identifier>
 800d472:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800d476:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800d47a:	f8c4 9020 	str.w	r9, [r4, #32]
 800d47e:	4630      	mov	r0, r6
 800d480:	f7f2 fed8 	bl	8000234 <strlen>
 800d484:	1c42      	adds	r2, r0, #1
 800d486:	2a3c      	cmp	r2, #60	@ 0x3c
 800d488:	f104 0518 	add.w	r5, r4, #24
 800d48c:	d840      	bhi.n	800d510 <create_node+0xc4>
 800d48e:	4648      	mov	r0, r9
 800d490:	4631      	mov	r1, r6
 800d492:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800d496:	f00a fa02 	bl	801789e <memcpy>
 800d49a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800d49e:	4638      	mov	r0, r7
 800d4a0:	f7f2 fec8 	bl	8000234 <strlen>
 800d4a4:	1c42      	adds	r2, r0, #1
 800d4a6:	2a3c      	cmp	r2, #60	@ 0x3c
 800d4a8:	d832      	bhi.n	800d510 <create_node+0xc4>
 800d4aa:	4639      	mov	r1, r7
 800d4ac:	4648      	mov	r0, r9
 800d4ae:	f00a f9f6 	bl	801789e <memcpy>
 800d4b2:	6923      	ldr	r3, [r4, #16]
 800d4b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d4b8:	2101      	movs	r1, #1
 800d4ba:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800d4be:	1842      	adds	r2, r0, r1
 800d4c0:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800d4c4:	f001 f918 	bl	800e6f8 <uxr_object_id>
 800d4c8:	6160      	str	r0, [r4, #20]
 800d4ca:	783b      	ldrb	r3, [r7, #0]
 800d4cc:	2b2f      	cmp	r3, #47	@ 0x2f
 800d4ce:	d127      	bne.n	800d520 <create_node+0xd4>
 800d4d0:	787b      	ldrb	r3, [r7, #1]
 800d4d2:	bb2b      	cbnz	r3, 800d520 <create_node+0xd4>
 800d4d4:	4a17      	ldr	r2, [pc, #92]	@ (800d534 <create_node+0xe8>)
 800d4d6:	4818      	ldr	r0, [pc, #96]	@ (800d538 <create_node+0xec>)
 800d4d8:	4633      	mov	r3, r6
 800d4da:	213c      	movs	r1, #60	@ 0x3c
 800d4dc:	f00a f83c 	bl	8017558 <sniprintf>
 800d4e0:	6920      	ldr	r0, [r4, #16]
 800d4e2:	4915      	ldr	r1, [pc, #84]	@ (800d538 <create_node+0xec>)
 800d4e4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800d4e8:	9100      	str	r1, [sp, #0]
 800d4ea:	2106      	movs	r1, #6
 800d4ec:	9101      	str	r1, [sp, #4]
 800d4ee:	6811      	ldr	r1, [r2, #0]
 800d4f0:	6962      	ldr	r2, [r4, #20]
 800d4f2:	fa1f f388 	uxth.w	r3, r8
 800d4f6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d4fa:	f000 ff2d 	bl	800e358 <uxr_buffer_create_participant_bin>
 800d4fe:	4602      	mov	r2, r0
 800d500:	6920      	ldr	r0, [r4, #16]
 800d502:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800d506:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800d50a:	f000 fe0b 	bl	800e124 <run_xrce_session>
 800d50e:	b918      	cbnz	r0, 800d518 <create_node+0xcc>
 800d510:	4628      	mov	r0, r5
 800d512:	f000 fc95 	bl	800de40 <rmw_uxrce_fini_node_memory>
 800d516:	2500      	movs	r5, #0
 800d518:	4628      	mov	r0, r5
 800d51a:	b003      	add	sp, #12
 800d51c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d520:	4a06      	ldr	r2, [pc, #24]	@ (800d53c <create_node+0xf0>)
 800d522:	9600      	str	r6, [sp, #0]
 800d524:	463b      	mov	r3, r7
 800d526:	213c      	movs	r1, #60	@ 0x3c
 800d528:	4803      	ldr	r0, [pc, #12]	@ (800d538 <create_node+0xec>)
 800d52a:	f00a f815 	bl	8017558 <sniprintf>
 800d52e:	e7d7      	b.n	800d4e0 <create_node+0x94>
 800d530:	2000abe4 	.word	0x2000abe4
 800d534:	08018a8c 	.word	0x08018a8c
 800d538:	200062d8 	.word	0x200062d8
 800d53c:	08018a74 	.word	0x08018a74

0800d540 <rmw_create_node>:
 800d540:	b199      	cbz	r1, 800d56a <rmw_create_node+0x2a>
 800d542:	780b      	ldrb	r3, [r1, #0]
 800d544:	468c      	mov	ip, r1
 800d546:	b183      	cbz	r3, 800d56a <rmw_create_node+0x2a>
 800d548:	b410      	push	{r4}
 800d54a:	4614      	mov	r4, r2
 800d54c:	b14a      	cbz	r2, 800d562 <rmw_create_node+0x22>
 800d54e:	7813      	ldrb	r3, [r2, #0]
 800d550:	b13b      	cbz	r3, 800d562 <rmw_create_node+0x22>
 800d552:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800d554:	4603      	mov	r3, r0
 800d556:	4621      	mov	r1, r4
 800d558:	4660      	mov	r0, ip
 800d55a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d55e:	f7ff bf75 	b.w	800d44c <create_node>
 800d562:	2000      	movs	r0, #0
 800d564:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d568:	4770      	bx	lr
 800d56a:	2000      	movs	r0, #0
 800d56c:	4770      	bx	lr
 800d56e:	bf00      	nop

0800d570 <rmw_destroy_node>:
 800d570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d572:	b328      	cbz	r0, 800d5c0 <rmw_destroy_node+0x50>
 800d574:	4607      	mov	r7, r0
 800d576:	6800      	ldr	r0, [r0, #0]
 800d578:	b120      	cbz	r0, 800d584 <rmw_destroy_node+0x14>
 800d57a:	4b36      	ldr	r3, [pc, #216]	@ (800d654 <rmw_destroy_node+0xe4>)
 800d57c:	6819      	ldr	r1, [r3, #0]
 800d57e:	f7f2 fe4f 	bl	8000220 <strcmp>
 800d582:	b9e8      	cbnz	r0, 800d5c0 <rmw_destroy_node+0x50>
 800d584:	687d      	ldr	r5, [r7, #4]
 800d586:	b1dd      	cbz	r5, 800d5c0 <rmw_destroy_node+0x50>
 800d588:	4b33      	ldr	r3, [pc, #204]	@ (800d658 <rmw_destroy_node+0xe8>)
 800d58a:	681c      	ldr	r4, [r3, #0]
 800d58c:	2c00      	cmp	r4, #0
 800d58e:	d05f      	beq.n	800d650 <rmw_destroy_node+0xe0>
 800d590:	2600      	movs	r6, #0
 800d592:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800d596:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800d59a:	429d      	cmp	r5, r3
 800d59c:	d013      	beq.n	800d5c6 <rmw_destroy_node+0x56>
 800d59e:	2c00      	cmp	r4, #0
 800d5a0:	d1f7      	bne.n	800d592 <rmw_destroy_node+0x22>
 800d5a2:	4b2e      	ldr	r3, [pc, #184]	@ (800d65c <rmw_destroy_node+0xec>)
 800d5a4:	681c      	ldr	r4, [r3, #0]
 800d5a6:	b1c4      	cbz	r4, 800d5da <rmw_destroy_node+0x6a>
 800d5a8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800d5ac:	6a0b      	ldr	r3, [r1, #32]
 800d5ae:	429d      	cmp	r5, r3
 800d5b0:	d1f9      	bne.n	800d5a6 <rmw_destroy_node+0x36>
 800d5b2:	317c      	adds	r1, #124	@ 0x7c
 800d5b4:	4638      	mov	r0, r7
 800d5b6:	f000 fa45 	bl	800da44 <rmw_destroy_subscription>
 800d5ba:	2801      	cmp	r0, #1
 800d5bc:	4606      	mov	r6, r0
 800d5be:	d1f2      	bne.n	800d5a6 <rmw_destroy_node+0x36>
 800d5c0:	2601      	movs	r6, #1
 800d5c2:	4630      	mov	r0, r6
 800d5c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5c6:	3184      	adds	r1, #132	@ 0x84
 800d5c8:	4638      	mov	r0, r7
 800d5ca:	f000 f9a5 	bl	800d918 <rmw_destroy_publisher>
 800d5ce:	2801      	cmp	r0, #1
 800d5d0:	4606      	mov	r6, r0
 800d5d2:	d0f5      	beq.n	800d5c0 <rmw_destroy_node+0x50>
 800d5d4:	2c00      	cmp	r4, #0
 800d5d6:	d1dc      	bne.n	800d592 <rmw_destroy_node+0x22>
 800d5d8:	e7e3      	b.n	800d5a2 <rmw_destroy_node+0x32>
 800d5da:	4b21      	ldr	r3, [pc, #132]	@ (800d660 <rmw_destroy_node+0xf0>)
 800d5dc:	681c      	ldr	r4, [r3, #0]
 800d5de:	b16c      	cbz	r4, 800d5fc <rmw_destroy_node+0x8c>
 800d5e0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800d5e4:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800d5e6:	429d      	cmp	r5, r3
 800d5e8:	d1f9      	bne.n	800d5de <rmw_destroy_node+0x6e>
 800d5ea:	317c      	adds	r1, #124	@ 0x7c
 800d5ec:	4638      	mov	r0, r7
 800d5ee:	f000 f9e5 	bl	800d9bc <rmw_destroy_service>
 800d5f2:	2801      	cmp	r0, #1
 800d5f4:	4606      	mov	r6, r0
 800d5f6:	d0e3      	beq.n	800d5c0 <rmw_destroy_node+0x50>
 800d5f8:	2c00      	cmp	r4, #0
 800d5fa:	d1f1      	bne.n	800d5e0 <rmw_destroy_node+0x70>
 800d5fc:	4b19      	ldr	r3, [pc, #100]	@ (800d664 <rmw_destroy_node+0xf4>)
 800d5fe:	681c      	ldr	r4, [r3, #0]
 800d600:	b16c      	cbz	r4, 800d61e <rmw_destroy_node+0xae>
 800d602:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800d606:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800d608:	429d      	cmp	r5, r3
 800d60a:	d1f9      	bne.n	800d600 <rmw_destroy_node+0x90>
 800d60c:	317c      	adds	r1, #124	@ 0x7c
 800d60e:	4638      	mov	r0, r7
 800d610:	f007 fde6 	bl	80151e0 <rmw_destroy_client>
 800d614:	2801      	cmp	r0, #1
 800d616:	4606      	mov	r6, r0
 800d618:	d0d2      	beq.n	800d5c0 <rmw_destroy_node+0x50>
 800d61a:	2c00      	cmp	r4, #0
 800d61c:	d1f1      	bne.n	800d602 <rmw_destroy_node+0x92>
 800d61e:	6928      	ldr	r0, [r5, #16]
 800d620:	696a      	ldr	r2, [r5, #20]
 800d622:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d626:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d62a:	6819      	ldr	r1, [r3, #0]
 800d62c:	f000 fe48 	bl	800e2c0 <uxr_buffer_delete_entity>
 800d630:	4602      	mov	r2, r0
 800d632:	6928      	ldr	r0, [r5, #16]
 800d634:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800d638:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800d63c:	f000 fd72 	bl	800e124 <run_xrce_session>
 800d640:	2800      	cmp	r0, #0
 800d642:	bf08      	it	eq
 800d644:	2602      	moveq	r6, #2
 800d646:	4638      	mov	r0, r7
 800d648:	f000 fbfa 	bl	800de40 <rmw_uxrce_fini_node_memory>
 800d64c:	4630      	mov	r0, r6
 800d64e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d650:	4626      	mov	r6, r4
 800d652:	e7a6      	b.n	800d5a2 <rmw_destroy_node+0x32>
 800d654:	08019218 	.word	0x08019218
 800d658:	2000abf4 	.word	0x2000abf4
 800d65c:	2000ac34 	.word	0x2000ac34
 800d660:	2000ac04 	.word	0x2000ac04
 800d664:	20006314 	.word	0x20006314

0800d668 <rmw_node_get_graph_guard_condition>:
 800d668:	6843      	ldr	r3, [r0, #4]
 800d66a:	6918      	ldr	r0, [r3, #16]
 800d66c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800d670:	4770      	bx	lr
 800d672:	bf00      	nop

0800d674 <flush_session>:
 800d674:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800d676:	f001 be43 	b.w	800f300 <uxr_run_session_until_confirm_delivery>
 800d67a:	bf00      	nop

0800d67c <rmw_publish>:
 800d67c:	2800      	cmp	r0, #0
 800d67e:	d053      	beq.n	800d728 <rmw_publish+0xac>
 800d680:	b570      	push	{r4, r5, r6, lr}
 800d682:	460d      	mov	r5, r1
 800d684:	b08e      	sub	sp, #56	@ 0x38
 800d686:	2900      	cmp	r1, #0
 800d688:	d04b      	beq.n	800d722 <rmw_publish+0xa6>
 800d68a:	4604      	mov	r4, r0
 800d68c:	6800      	ldr	r0, [r0, #0]
 800d68e:	f000 fdc9 	bl	800e224 <is_uxrce_rmw_identifier_valid>
 800d692:	2800      	cmp	r0, #0
 800d694:	d045      	beq.n	800d722 <rmw_publish+0xa6>
 800d696:	6866      	ldr	r6, [r4, #4]
 800d698:	2e00      	cmp	r6, #0
 800d69a:	d042      	beq.n	800d722 <rmw_publish+0xa6>
 800d69c:	69b4      	ldr	r4, [r6, #24]
 800d69e:	4628      	mov	r0, r5
 800d6a0:	6923      	ldr	r3, [r4, #16]
 800d6a2:	4798      	blx	r3
 800d6a4:	69f3      	ldr	r3, [r6, #28]
 800d6a6:	9005      	str	r0, [sp, #20]
 800d6a8:	b113      	cbz	r3, 800d6b0 <rmw_publish+0x34>
 800d6aa:	a805      	add	r0, sp, #20
 800d6ac:	4798      	blx	r3
 800d6ae:	9805      	ldr	r0, [sp, #20]
 800d6b0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800d6b4:	691b      	ldr	r3, [r3, #16]
 800d6b6:	9000      	str	r0, [sp, #0]
 800d6b8:	6972      	ldr	r2, [r6, #20]
 800d6ba:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800d6bc:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800d6c0:	ab06      	add	r3, sp, #24
 800d6c2:	f003 f8ef 	bl	80108a4 <uxr_prepare_output_stream>
 800d6c6:	b1d8      	cbz	r0, 800d700 <rmw_publish+0x84>
 800d6c8:	68a3      	ldr	r3, [r4, #8]
 800d6ca:	a906      	add	r1, sp, #24
 800d6cc:	4628      	mov	r0, r5
 800d6ce:	4798      	blx	r3
 800d6d0:	6a33      	ldr	r3, [r6, #32]
 800d6d2:	4604      	mov	r4, r0
 800d6d4:	b10b      	cbz	r3, 800d6da <rmw_publish+0x5e>
 800d6d6:	a806      	add	r0, sp, #24
 800d6d8:	4798      	blx	r3
 800d6da:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800d6de:	2b01      	cmp	r3, #1
 800d6e0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800d6e4:	d022      	beq.n	800d72c <rmw_publish+0xb0>
 800d6e6:	6918      	ldr	r0, [r3, #16]
 800d6e8:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800d6ea:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d6ee:	f001 fe07 	bl	800f300 <uxr_run_session_until_confirm_delivery>
 800d6f2:	4020      	ands	r0, r4
 800d6f4:	b2c4      	uxtb	r4, r0
 800d6f6:	f084 0001 	eor.w	r0, r4, #1
 800d6fa:	b2c0      	uxtb	r0, r0
 800d6fc:	b00e      	add	sp, #56	@ 0x38
 800d6fe:	bd70      	pop	{r4, r5, r6, pc}
 800d700:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800d704:	6918      	ldr	r0, [r3, #16]
 800d706:	9b05      	ldr	r3, [sp, #20]
 800d708:	9300      	str	r3, [sp, #0]
 800d70a:	4b0b      	ldr	r3, [pc, #44]	@ (800d738 <rmw_publish+0xbc>)
 800d70c:	9301      	str	r3, [sp, #4]
 800d70e:	9602      	str	r6, [sp, #8]
 800d710:	6972      	ldr	r2, [r6, #20]
 800d712:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800d714:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d718:	ab06      	add	r3, sp, #24
 800d71a:	f003 f8f3 	bl	8010904 <uxr_prepare_output_stream_fragmented>
 800d71e:	2800      	cmp	r0, #0
 800d720:	d1d2      	bne.n	800d6c8 <rmw_publish+0x4c>
 800d722:	2001      	movs	r0, #1
 800d724:	b00e      	add	sp, #56	@ 0x38
 800d726:	bd70      	pop	{r4, r5, r6, pc}
 800d728:	2001      	movs	r0, #1
 800d72a:	4770      	bx	lr
 800d72c:	6918      	ldr	r0, [r3, #16]
 800d72e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d732:	f001 fa25 	bl	800eb80 <uxr_flash_output_streams>
 800d736:	e7de      	b.n	800d6f6 <rmw_publish+0x7a>
 800d738:	0800d675 	.word	0x0800d675

0800d73c <rmw_create_publisher>:
 800d73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d740:	b087      	sub	sp, #28
 800d742:	2800      	cmp	r0, #0
 800d744:	f000 80cc 	beq.w	800d8e0 <rmw_create_publisher+0x1a4>
 800d748:	460e      	mov	r6, r1
 800d74a:	2900      	cmp	r1, #0
 800d74c:	f000 80c8 	beq.w	800d8e0 <rmw_create_publisher+0x1a4>
 800d750:	4604      	mov	r4, r0
 800d752:	6800      	ldr	r0, [r0, #0]
 800d754:	4615      	mov	r5, r2
 800d756:	4698      	mov	r8, r3
 800d758:	f000 fd64 	bl	800e224 <is_uxrce_rmw_identifier_valid>
 800d75c:	2800      	cmp	r0, #0
 800d75e:	f000 80bf 	beq.w	800d8e0 <rmw_create_publisher+0x1a4>
 800d762:	2d00      	cmp	r5, #0
 800d764:	f000 80bc 	beq.w	800d8e0 <rmw_create_publisher+0x1a4>
 800d768:	782b      	ldrb	r3, [r5, #0]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	f000 80b8 	beq.w	800d8e0 <rmw_create_publisher+0x1a4>
 800d770:	f1b8 0f00 	cmp.w	r8, #0
 800d774:	f000 80b4 	beq.w	800d8e0 <rmw_create_publisher+0x1a4>
 800d778:	485c      	ldr	r0, [pc, #368]	@ (800d8ec <rmw_create_publisher+0x1b0>)
 800d77a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800d77e:	f007 fd0b 	bl	8015198 <get_memory>
 800d782:	2800      	cmp	r0, #0
 800d784:	f000 80ac 	beq.w	800d8e0 <rmw_create_publisher+0x1a4>
 800d788:	6884      	ldr	r4, [r0, #8]
 800d78a:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800d78e:	f007 fd6b 	bl	8015268 <rmw_get_implementation_identifier>
 800d792:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800d796:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800d79a:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800d79e:	4628      	mov	r0, r5
 800d7a0:	f7f2 fd48 	bl	8000234 <strlen>
 800d7a4:	3001      	adds	r0, #1
 800d7a6:	283c      	cmp	r0, #60	@ 0x3c
 800d7a8:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800d7ac:	f200 8091 	bhi.w	800d8d2 <rmw_create_publisher+0x196>
 800d7b0:	4a4f      	ldr	r2, [pc, #316]	@ (800d8f0 <rmw_create_publisher+0x1b4>)
 800d7b2:	462b      	mov	r3, r5
 800d7b4:	213c      	movs	r1, #60	@ 0x3c
 800d7b6:	4650      	mov	r0, sl
 800d7b8:	f009 fece 	bl	8017558 <sniprintf>
 800d7bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d7c0:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800d7c2:	4641      	mov	r1, r8
 800d7c4:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800d7c8:	2250      	movs	r2, #80	@ 0x50
 800d7ca:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800d7ce:	f00a f866 	bl	801789e <memcpy>
 800d7d2:	f898 3008 	ldrb.w	r3, [r8, #8]
 800d7d6:	4947      	ldr	r1, [pc, #284]	@ (800d8f4 <rmw_create_publisher+0x1b8>)
 800d7d8:	2b02      	cmp	r3, #2
 800d7da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d7de:	bf0c      	ite	eq
 800d7e0:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800d7e4:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800d7e8:	67a3      	str	r3, [r4, #120]	@ 0x78
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800d7f0:	4630      	mov	r0, r6
 800d7f2:	f000 fd25 	bl	800e240 <get_message_typesupport_handle>
 800d7f6:	2800      	cmp	r0, #0
 800d7f8:	d06b      	beq.n	800d8d2 <rmw_create_publisher+0x196>
 800d7fa:	6842      	ldr	r2, [r0, #4]
 800d7fc:	61a2      	str	r2, [r4, #24]
 800d7fe:	2a00      	cmp	r2, #0
 800d800:	d067      	beq.n	800d8d2 <rmw_create_publisher+0x196>
 800d802:	4629      	mov	r1, r5
 800d804:	4643      	mov	r3, r8
 800d806:	4648      	mov	r0, r9
 800d808:	f007 fd34 	bl	8015274 <create_topic>
 800d80c:	6260      	str	r0, [r4, #36]	@ 0x24
 800d80e:	2800      	cmp	r0, #0
 800d810:	d063      	beq.n	800d8da <rmw_create_publisher+0x19e>
 800d812:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d816:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d81a:	2103      	movs	r1, #3
 800d81c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800d820:	1c42      	adds	r2, r0, #1
 800d822:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800d826:	f000 ff67 	bl	800e6f8 <uxr_object_id>
 800d82a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800d82e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d832:	6120      	str	r0, [r4, #16]
 800d834:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800d838:	6910      	ldr	r0, [r2, #16]
 800d83a:	2506      	movs	r5, #6
 800d83c:	9500      	str	r5, [sp, #0]
 800d83e:	6819      	ldr	r1, [r3, #0]
 800d840:	6922      	ldr	r2, [r4, #16]
 800d842:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800d846:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d84a:	f000 fded 	bl	800e428 <uxr_buffer_create_publisher_bin>
 800d84e:	4602      	mov	r2, r0
 800d850:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d854:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800d858:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800d85c:	f000 fc62 	bl	800e124 <run_xrce_session>
 800d860:	b3b8      	cbz	r0, 800d8d2 <rmw_create_publisher+0x196>
 800d862:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d866:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d86a:	2105      	movs	r1, #5
 800d86c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800d870:	1c42      	adds	r2, r0, #1
 800d872:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800d876:	f000 ff3f 	bl	800e6f8 <uxr_object_id>
 800d87a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800d87e:	6160      	str	r0, [r4, #20]
 800d880:	691e      	ldr	r6, [r3, #16]
 800d882:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d886:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800d88a:	f10d 0a10 	add.w	sl, sp, #16
 800d88e:	4641      	mov	r1, r8
 800d890:	4650      	mov	r0, sl
 800d892:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800d896:	f000 fc61 	bl	800e15c <convert_qos_profile>
 800d89a:	9503      	str	r5, [sp, #12]
 800d89c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800d8a0:	9001      	str	r0, [sp, #4]
 800d8a2:	f8ad 1008 	strh.w	r1, [sp, #8]
 800d8a6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d8aa:	9300      	str	r3, [sp, #0]
 800d8ac:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800d8b0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800d8b4:	f8d8 1000 	ldr.w	r1, [r8]
 800d8b8:	4630      	mov	r0, r6
 800d8ba:	f000 fde5 	bl	800e488 <uxr_buffer_create_datawriter_bin>
 800d8be:	4602      	mov	r2, r0
 800d8c0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d8c4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800d8c8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800d8cc:	f000 fc2a 	bl	800e124 <run_xrce_session>
 800d8d0:	b938      	cbnz	r0, 800d8e2 <rmw_create_publisher+0x1a6>
 800d8d2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800d8d4:	b108      	cbz	r0, 800d8da <rmw_create_publisher+0x19e>
 800d8d6:	f000 fb23 	bl	800df20 <rmw_uxrce_fini_topic_memory>
 800d8da:	4638      	mov	r0, r7
 800d8dc:	f000 fac8 	bl	800de70 <rmw_uxrce_fini_publisher_memory>
 800d8e0:	2700      	movs	r7, #0
 800d8e2:	4638      	mov	r0, r7
 800d8e4:	b007      	add	sp, #28
 800d8e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ea:	bf00      	nop
 800d8ec:	2000abf4 	.word	0x2000abf4
 800d8f0:	08018a8c 	.word	0x08018a8c
 800d8f4:	08018874 	.word	0x08018874

0800d8f8 <rmw_publisher_get_actual_qos>:
 800d8f8:	b150      	cbz	r0, 800d910 <rmw_publisher_get_actual_qos+0x18>
 800d8fa:	b508      	push	{r3, lr}
 800d8fc:	460b      	mov	r3, r1
 800d8fe:	b149      	cbz	r1, 800d914 <rmw_publisher_get_actual_qos+0x1c>
 800d900:	6841      	ldr	r1, [r0, #4]
 800d902:	2250      	movs	r2, #80	@ 0x50
 800d904:	3128      	adds	r1, #40	@ 0x28
 800d906:	4618      	mov	r0, r3
 800d908:	f009 ffc9 	bl	801789e <memcpy>
 800d90c:	2000      	movs	r0, #0
 800d90e:	bd08      	pop	{r3, pc}
 800d910:	200b      	movs	r0, #11
 800d912:	4770      	bx	lr
 800d914:	200b      	movs	r0, #11
 800d916:	bd08      	pop	{r3, pc}

0800d918 <rmw_destroy_publisher>:
 800d918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d91a:	b128      	cbz	r0, 800d928 <rmw_destroy_publisher+0x10>
 800d91c:	4604      	mov	r4, r0
 800d91e:	6800      	ldr	r0, [r0, #0]
 800d920:	460d      	mov	r5, r1
 800d922:	f000 fc7f 	bl	800e224 <is_uxrce_rmw_identifier_valid>
 800d926:	b910      	cbnz	r0, 800d92e <rmw_destroy_publisher+0x16>
 800d928:	2401      	movs	r4, #1
 800d92a:	4620      	mov	r0, r4
 800d92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d92e:	6863      	ldr	r3, [r4, #4]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d0f9      	beq.n	800d928 <rmw_destroy_publisher+0x10>
 800d934:	2d00      	cmp	r5, #0
 800d936:	d0f7      	beq.n	800d928 <rmw_destroy_publisher+0x10>
 800d938:	6828      	ldr	r0, [r5, #0]
 800d93a:	f000 fc73 	bl	800e224 <is_uxrce_rmw_identifier_valid>
 800d93e:	2800      	cmp	r0, #0
 800d940:	d0f2      	beq.n	800d928 <rmw_destroy_publisher+0x10>
 800d942:	686c      	ldr	r4, [r5, #4]
 800d944:	2c00      	cmp	r4, #0
 800d946:	d0ef      	beq.n	800d928 <rmw_destroy_publisher+0x10>
 800d948:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800d94a:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800d94e:	f007 fce1 	bl	8015314 <destroy_topic>
 800d952:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800d956:	6962      	ldr	r2, [r4, #20]
 800d958:	6918      	ldr	r0, [r3, #16]
 800d95a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d95e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d962:	6819      	ldr	r1, [r3, #0]
 800d964:	f000 fcac 	bl	800e2c0 <uxr_buffer_delete_entity>
 800d968:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800d96c:	6922      	ldr	r2, [r4, #16]
 800d96e:	691b      	ldr	r3, [r3, #16]
 800d970:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800d974:	4604      	mov	r4, r0
 800d976:	6809      	ldr	r1, [r1, #0]
 800d978:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800d97c:	f000 fca0 	bl	800e2c0 <uxr_buffer_delete_entity>
 800d980:	693e      	ldr	r6, [r7, #16]
 800d982:	4622      	mov	r2, r4
 800d984:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800d988:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800d98c:	4604      	mov	r4, r0
 800d98e:	4630      	mov	r0, r6
 800d990:	f000 fbc8 	bl	800e124 <run_xrce_session>
 800d994:	693e      	ldr	r6, [r7, #16]
 800d996:	4622      	mov	r2, r4
 800d998:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800d99c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800d9a0:	4604      	mov	r4, r0
 800d9a2:	4630      	mov	r0, r6
 800d9a4:	f000 fbbe 	bl	800e124 <run_xrce_session>
 800d9a8:	b12c      	cbz	r4, 800d9b6 <rmw_destroy_publisher+0x9e>
 800d9aa:	b120      	cbz	r0, 800d9b6 <rmw_destroy_publisher+0x9e>
 800d9ac:	2400      	movs	r4, #0
 800d9ae:	4628      	mov	r0, r5
 800d9b0:	f000 fa5e 	bl	800de70 <rmw_uxrce_fini_publisher_memory>
 800d9b4:	e7b9      	b.n	800d92a <rmw_destroy_publisher+0x12>
 800d9b6:	2402      	movs	r4, #2
 800d9b8:	e7f9      	b.n	800d9ae <rmw_destroy_publisher+0x96>
 800d9ba:	bf00      	nop

0800d9bc <rmw_destroy_service>:
 800d9bc:	b570      	push	{r4, r5, r6, lr}
 800d9be:	b128      	cbz	r0, 800d9cc <rmw_destroy_service+0x10>
 800d9c0:	4604      	mov	r4, r0
 800d9c2:	6800      	ldr	r0, [r0, #0]
 800d9c4:	460d      	mov	r5, r1
 800d9c6:	f000 fc2d 	bl	800e224 <is_uxrce_rmw_identifier_valid>
 800d9ca:	b910      	cbnz	r0, 800d9d2 <rmw_destroy_service+0x16>
 800d9cc:	2401      	movs	r4, #1
 800d9ce:	4620      	mov	r0, r4
 800d9d0:	bd70      	pop	{r4, r5, r6, pc}
 800d9d2:	6863      	ldr	r3, [r4, #4]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d0f9      	beq.n	800d9cc <rmw_destroy_service+0x10>
 800d9d8:	2d00      	cmp	r5, #0
 800d9da:	d0f7      	beq.n	800d9cc <rmw_destroy_service+0x10>
 800d9dc:	6828      	ldr	r0, [r5, #0]
 800d9de:	f000 fc21 	bl	800e224 <is_uxrce_rmw_identifier_valid>
 800d9e2:	2800      	cmp	r0, #0
 800d9e4:	d0f2      	beq.n	800d9cc <rmw_destroy_service+0x10>
 800d9e6:	686e      	ldr	r6, [r5, #4]
 800d9e8:	2e00      	cmp	r6, #0
 800d9ea:	d0ef      	beq.n	800d9cc <rmw_destroy_service+0x10>
 800d9ec:	6864      	ldr	r4, [r4, #4]
 800d9ee:	6932      	ldr	r2, [r6, #16]
 800d9f0:	6920      	ldr	r0, [r4, #16]
 800d9f2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d9f6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d9fa:	6819      	ldr	r1, [r3, #0]
 800d9fc:	f000 feac 	bl	800e758 <uxr_buffer_cancel_data>
 800da00:	4602      	mov	r2, r0
 800da02:	6920      	ldr	r0, [r4, #16]
 800da04:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800da08:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800da0c:	f000 fb8a 	bl	800e124 <run_xrce_session>
 800da10:	6920      	ldr	r0, [r4, #16]
 800da12:	6932      	ldr	r2, [r6, #16]
 800da14:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800da18:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800da1c:	6819      	ldr	r1, [r3, #0]
 800da1e:	f000 fc4f 	bl	800e2c0 <uxr_buffer_delete_entity>
 800da22:	4602      	mov	r2, r0
 800da24:	6920      	ldr	r0, [r4, #16]
 800da26:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800da2a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800da2e:	f000 fb79 	bl	800e124 <run_xrce_session>
 800da32:	2800      	cmp	r0, #0
 800da34:	4628      	mov	r0, r5
 800da36:	bf14      	ite	ne
 800da38:	2400      	movne	r4, #0
 800da3a:	2402      	moveq	r4, #2
 800da3c:	f000 fa44 	bl	800dec8 <rmw_uxrce_fini_service_memory>
 800da40:	e7c5      	b.n	800d9ce <rmw_destroy_service+0x12>
 800da42:	bf00      	nop

0800da44 <rmw_destroy_subscription>:
 800da44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da46:	b128      	cbz	r0, 800da54 <rmw_destroy_subscription+0x10>
 800da48:	4604      	mov	r4, r0
 800da4a:	6800      	ldr	r0, [r0, #0]
 800da4c:	460d      	mov	r5, r1
 800da4e:	f000 fbe9 	bl	800e224 <is_uxrce_rmw_identifier_valid>
 800da52:	b910      	cbnz	r0, 800da5a <rmw_destroy_subscription+0x16>
 800da54:	2401      	movs	r4, #1
 800da56:	4620      	mov	r0, r4
 800da58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da5a:	6863      	ldr	r3, [r4, #4]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d0f9      	beq.n	800da54 <rmw_destroy_subscription+0x10>
 800da60:	2d00      	cmp	r5, #0
 800da62:	d0f7      	beq.n	800da54 <rmw_destroy_subscription+0x10>
 800da64:	6828      	ldr	r0, [r5, #0]
 800da66:	f000 fbdd 	bl	800e224 <is_uxrce_rmw_identifier_valid>
 800da6a:	2800      	cmp	r0, #0
 800da6c:	d0f2      	beq.n	800da54 <rmw_destroy_subscription+0x10>
 800da6e:	686c      	ldr	r4, [r5, #4]
 800da70:	2c00      	cmp	r4, #0
 800da72:	d0ef      	beq.n	800da54 <rmw_destroy_subscription+0x10>
 800da74:	6a26      	ldr	r6, [r4, #32]
 800da76:	6962      	ldr	r2, [r4, #20]
 800da78:	6930      	ldr	r0, [r6, #16]
 800da7a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800da7e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800da82:	6819      	ldr	r1, [r3, #0]
 800da84:	f000 fe68 	bl	800e758 <uxr_buffer_cancel_data>
 800da88:	4602      	mov	r2, r0
 800da8a:	6930      	ldr	r0, [r6, #16]
 800da8c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800da90:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800da94:	f000 fb46 	bl	800e124 <run_xrce_session>
 800da98:	69e0      	ldr	r0, [r4, #28]
 800da9a:	f007 fc3b 	bl	8015314 <destroy_topic>
 800da9e:	6a23      	ldr	r3, [r4, #32]
 800daa0:	6962      	ldr	r2, [r4, #20]
 800daa2:	6918      	ldr	r0, [r3, #16]
 800daa4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800daa8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800daac:	6819      	ldr	r1, [r3, #0]
 800daae:	f000 fc07 	bl	800e2c0 <uxr_buffer_delete_entity>
 800dab2:	6a23      	ldr	r3, [r4, #32]
 800dab4:	6922      	ldr	r2, [r4, #16]
 800dab6:	691b      	ldr	r3, [r3, #16]
 800dab8:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800dabc:	4604      	mov	r4, r0
 800dabe:	6809      	ldr	r1, [r1, #0]
 800dac0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800dac4:	f000 fbfc 	bl	800e2c0 <uxr_buffer_delete_entity>
 800dac8:	6937      	ldr	r7, [r6, #16]
 800daca:	4622      	mov	r2, r4
 800dacc:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800dad0:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800dad4:	4604      	mov	r4, r0
 800dad6:	4638      	mov	r0, r7
 800dad8:	f000 fb24 	bl	800e124 <run_xrce_session>
 800dadc:	6936      	ldr	r6, [r6, #16]
 800dade:	4622      	mov	r2, r4
 800dae0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800dae4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800dae8:	4604      	mov	r4, r0
 800daea:	4630      	mov	r0, r6
 800daec:	f000 fb1a 	bl	800e124 <run_xrce_session>
 800daf0:	b12c      	cbz	r4, 800dafe <rmw_destroy_subscription+0xba>
 800daf2:	b120      	cbz	r0, 800dafe <rmw_destroy_subscription+0xba>
 800daf4:	2400      	movs	r4, #0
 800daf6:	4628      	mov	r0, r5
 800daf8:	f000 f9d0 	bl	800de9c <rmw_uxrce_fini_subscription_memory>
 800dafc:	e7ab      	b.n	800da56 <rmw_destroy_subscription+0x12>
 800dafe:	2402      	movs	r4, #2
 800db00:	e7f9      	b.n	800daf6 <rmw_destroy_subscription+0xb2>
 800db02:	bf00      	nop

0800db04 <rmw_uxrce_transport_init>:
 800db04:	b508      	push	{r3, lr}
 800db06:	b108      	cbz	r0, 800db0c <rmw_uxrce_transport_init+0x8>
 800db08:	f100 0210 	add.w	r2, r0, #16
 800db0c:	b139      	cbz	r1, 800db1e <rmw_uxrce_transport_init+0x1a>
 800db0e:	6949      	ldr	r1, [r1, #20]
 800db10:	4610      	mov	r0, r2
 800db12:	f000 fdb9 	bl	800e688 <uxr_init_custom_transport>
 800db16:	f080 0001 	eor.w	r0, r0, #1
 800db1a:	b2c0      	uxtb	r0, r0
 800db1c:	bd08      	pop	{r3, pc}
 800db1e:	4b04      	ldr	r3, [pc, #16]	@ (800db30 <rmw_uxrce_transport_init+0x2c>)
 800db20:	4610      	mov	r0, r2
 800db22:	6859      	ldr	r1, [r3, #4]
 800db24:	f000 fdb0 	bl	800e688 <uxr_init_custom_transport>
 800db28:	f080 0001 	eor.w	r0, r0, #1
 800db2c:	b2c0      	uxtb	r0, r0
 800db2e:	bd08      	pop	{r3, pc}
 800db30:	200062bc 	.word	0x200062bc

0800db34 <rmw_uros_epoch_nanos>:
 800db34:	4b05      	ldr	r3, [pc, #20]	@ (800db4c <rmw_uros_epoch_nanos+0x18>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	b123      	cbz	r3, 800db44 <rmw_uros_epoch_nanos+0x10>
 800db3a:	6898      	ldr	r0, [r3, #8]
 800db3c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800db40:	f001 b814 	b.w	800eb6c <uxr_epoch_nanos>
 800db44:	2000      	movs	r0, #0
 800db46:	2100      	movs	r1, #0
 800db48:	4770      	bx	lr
 800db4a:	bf00      	nop
 800db4c:	2000ac14 	.word	0x2000ac14

0800db50 <rmw_uros_sync_session>:
 800db50:	b508      	push	{r3, lr}
 800db52:	4b07      	ldr	r3, [pc, #28]	@ (800db70 <rmw_uros_sync_session+0x20>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	b14b      	cbz	r3, 800db6c <rmw_uros_sync_session+0x1c>
 800db58:	4601      	mov	r1, r0
 800db5a:	6898      	ldr	r0, [r3, #8]
 800db5c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800db60:	f001 fc46 	bl	800f3f0 <uxr_sync_session>
 800db64:	f080 0001 	eor.w	r0, r0, #1
 800db68:	b2c0      	uxtb	r0, r0
 800db6a:	bd08      	pop	{r3, pc}
 800db6c:	2001      	movs	r0, #1
 800db6e:	bd08      	pop	{r3, pc}
 800db70:	2000ac14 	.word	0x2000ac14

0800db74 <rmw_uxrce_init_service_memory>:
 800db74:	b1e2      	cbz	r2, 800dbb0 <rmw_uxrce_init_service_memory+0x3c>
 800db76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db7a:	7b05      	ldrb	r5, [r0, #12]
 800db7c:	4606      	mov	r6, r0
 800db7e:	b9ad      	cbnz	r5, 800dbac <rmw_uxrce_init_service_memory+0x38>
 800db80:	23c8      	movs	r3, #200	@ 0xc8
 800db82:	e9c0 5500 	strd	r5, r5, [r0]
 800db86:	6083      	str	r3, [r0, #8]
 800db88:	f240 1301 	movw	r3, #257	@ 0x101
 800db8c:	4617      	mov	r7, r2
 800db8e:	8183      	strh	r3, [r0, #12]
 800db90:	460c      	mov	r4, r1
 800db92:	46a8      	mov	r8, r5
 800db94:	4621      	mov	r1, r4
 800db96:	4630      	mov	r0, r6
 800db98:	3501      	adds	r5, #1
 800db9a:	f007 fb0d 	bl	80151b8 <put_memory>
 800db9e:	42af      	cmp	r7, r5
 800dba0:	60a4      	str	r4, [r4, #8]
 800dba2:	f884 800c 	strb.w	r8, [r4, #12]
 800dba6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800dbaa:	d1f3      	bne.n	800db94 <rmw_uxrce_init_service_memory+0x20>
 800dbac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbb0:	4770      	bx	lr
 800dbb2:	bf00      	nop

0800dbb4 <rmw_uxrce_init_client_memory>:
 800dbb4:	b1e2      	cbz	r2, 800dbf0 <rmw_uxrce_init_client_memory+0x3c>
 800dbb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbba:	7b05      	ldrb	r5, [r0, #12]
 800dbbc:	4606      	mov	r6, r0
 800dbbe:	b9ad      	cbnz	r5, 800dbec <rmw_uxrce_init_client_memory+0x38>
 800dbc0:	23c8      	movs	r3, #200	@ 0xc8
 800dbc2:	e9c0 5500 	strd	r5, r5, [r0]
 800dbc6:	6083      	str	r3, [r0, #8]
 800dbc8:	f240 1301 	movw	r3, #257	@ 0x101
 800dbcc:	4617      	mov	r7, r2
 800dbce:	8183      	strh	r3, [r0, #12]
 800dbd0:	460c      	mov	r4, r1
 800dbd2:	46a8      	mov	r8, r5
 800dbd4:	4621      	mov	r1, r4
 800dbd6:	4630      	mov	r0, r6
 800dbd8:	3501      	adds	r5, #1
 800dbda:	f007 faed 	bl	80151b8 <put_memory>
 800dbde:	42af      	cmp	r7, r5
 800dbe0:	60a4      	str	r4, [r4, #8]
 800dbe2:	f884 800c 	strb.w	r8, [r4, #12]
 800dbe6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800dbea:	d1f3      	bne.n	800dbd4 <rmw_uxrce_init_client_memory+0x20>
 800dbec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbf0:	4770      	bx	lr
 800dbf2:	bf00      	nop

0800dbf4 <rmw_uxrce_init_publisher_memory>:
 800dbf4:	b1e2      	cbz	r2, 800dc30 <rmw_uxrce_init_publisher_memory+0x3c>
 800dbf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbfa:	7b05      	ldrb	r5, [r0, #12]
 800dbfc:	4606      	mov	r6, r0
 800dbfe:	b9ad      	cbnz	r5, 800dc2c <rmw_uxrce_init_publisher_memory+0x38>
 800dc00:	23d8      	movs	r3, #216	@ 0xd8
 800dc02:	e9c0 5500 	strd	r5, r5, [r0]
 800dc06:	6083      	str	r3, [r0, #8]
 800dc08:	f240 1301 	movw	r3, #257	@ 0x101
 800dc0c:	4617      	mov	r7, r2
 800dc0e:	8183      	strh	r3, [r0, #12]
 800dc10:	460c      	mov	r4, r1
 800dc12:	46a8      	mov	r8, r5
 800dc14:	4621      	mov	r1, r4
 800dc16:	4630      	mov	r0, r6
 800dc18:	3501      	adds	r5, #1
 800dc1a:	f007 facd 	bl	80151b8 <put_memory>
 800dc1e:	42af      	cmp	r7, r5
 800dc20:	60a4      	str	r4, [r4, #8]
 800dc22:	f884 800c 	strb.w	r8, [r4, #12]
 800dc26:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800dc2a:	d1f3      	bne.n	800dc14 <rmw_uxrce_init_publisher_memory+0x20>
 800dc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc30:	4770      	bx	lr
 800dc32:	bf00      	nop

0800dc34 <rmw_uxrce_init_subscription_memory>:
 800dc34:	b1e2      	cbz	r2, 800dc70 <rmw_uxrce_init_subscription_memory+0x3c>
 800dc36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc3a:	7b05      	ldrb	r5, [r0, #12]
 800dc3c:	4606      	mov	r6, r0
 800dc3e:	b9ad      	cbnz	r5, 800dc6c <rmw_uxrce_init_subscription_memory+0x38>
 800dc40:	23d8      	movs	r3, #216	@ 0xd8
 800dc42:	e9c0 5500 	strd	r5, r5, [r0]
 800dc46:	6083      	str	r3, [r0, #8]
 800dc48:	f240 1301 	movw	r3, #257	@ 0x101
 800dc4c:	4617      	mov	r7, r2
 800dc4e:	8183      	strh	r3, [r0, #12]
 800dc50:	460c      	mov	r4, r1
 800dc52:	46a8      	mov	r8, r5
 800dc54:	4621      	mov	r1, r4
 800dc56:	4630      	mov	r0, r6
 800dc58:	3501      	adds	r5, #1
 800dc5a:	f007 faad 	bl	80151b8 <put_memory>
 800dc5e:	42af      	cmp	r7, r5
 800dc60:	60a4      	str	r4, [r4, #8]
 800dc62:	f884 800c 	strb.w	r8, [r4, #12]
 800dc66:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800dc6a:	d1f3      	bne.n	800dc54 <rmw_uxrce_init_subscription_memory+0x20>
 800dc6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc70:	4770      	bx	lr
 800dc72:	bf00      	nop

0800dc74 <rmw_uxrce_init_node_memory>:
 800dc74:	b1e2      	cbz	r2, 800dcb0 <rmw_uxrce_init_node_memory+0x3c>
 800dc76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc7a:	7b05      	ldrb	r5, [r0, #12]
 800dc7c:	4606      	mov	r6, r0
 800dc7e:	b9ad      	cbnz	r5, 800dcac <rmw_uxrce_init_node_memory+0x38>
 800dc80:	23a4      	movs	r3, #164	@ 0xa4
 800dc82:	e9c0 5500 	strd	r5, r5, [r0]
 800dc86:	6083      	str	r3, [r0, #8]
 800dc88:	f240 1301 	movw	r3, #257	@ 0x101
 800dc8c:	4617      	mov	r7, r2
 800dc8e:	8183      	strh	r3, [r0, #12]
 800dc90:	460c      	mov	r4, r1
 800dc92:	46a8      	mov	r8, r5
 800dc94:	4621      	mov	r1, r4
 800dc96:	4630      	mov	r0, r6
 800dc98:	3501      	adds	r5, #1
 800dc9a:	f007 fa8d 	bl	80151b8 <put_memory>
 800dc9e:	42af      	cmp	r7, r5
 800dca0:	60a4      	str	r4, [r4, #8]
 800dca2:	f884 800c 	strb.w	r8, [r4, #12]
 800dca6:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800dcaa:	d1f3      	bne.n	800dc94 <rmw_uxrce_init_node_memory+0x20>
 800dcac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcb0:	4770      	bx	lr
 800dcb2:	bf00      	nop

0800dcb4 <rmw_uxrce_init_session_memory>:
 800dcb4:	b1ea      	cbz	r2, 800dcf2 <rmw_uxrce_init_session_memory+0x3e>
 800dcb6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcba:	7b05      	ldrb	r5, [r0, #12]
 800dcbc:	4606      	mov	r6, r0
 800dcbe:	b9b5      	cbnz	r5, 800dcee <rmw_uxrce_init_session_memory+0x3a>
 800dcc0:	e9c0 5500 	strd	r5, r5, [r0]
 800dcc4:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800dcc8:	f240 1301 	movw	r3, #257	@ 0x101
 800dccc:	4617      	mov	r7, r2
 800dcce:	f8c0 8008 	str.w	r8, [r0, #8]
 800dcd2:	460c      	mov	r4, r1
 800dcd4:	8183      	strh	r3, [r0, #12]
 800dcd6:	46a9      	mov	r9, r5
 800dcd8:	4621      	mov	r1, r4
 800dcda:	4630      	mov	r0, r6
 800dcdc:	3501      	adds	r5, #1
 800dcde:	f007 fa6b 	bl	80151b8 <put_memory>
 800dce2:	42af      	cmp	r7, r5
 800dce4:	60a4      	str	r4, [r4, #8]
 800dce6:	f884 900c 	strb.w	r9, [r4, #12]
 800dcea:	4444      	add	r4, r8
 800dcec:	d1f4      	bne.n	800dcd8 <rmw_uxrce_init_session_memory+0x24>
 800dcee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcf2:	4770      	bx	lr

0800dcf4 <rmw_uxrce_init_topic_memory>:
 800dcf4:	b1e2      	cbz	r2, 800dd30 <rmw_uxrce_init_topic_memory+0x3c>
 800dcf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcfa:	7b05      	ldrb	r5, [r0, #12]
 800dcfc:	4606      	mov	r6, r0
 800dcfe:	b9ad      	cbnz	r5, 800dd2c <rmw_uxrce_init_topic_memory+0x38>
 800dd00:	231c      	movs	r3, #28
 800dd02:	e9c0 5500 	strd	r5, r5, [r0]
 800dd06:	6083      	str	r3, [r0, #8]
 800dd08:	f240 1301 	movw	r3, #257	@ 0x101
 800dd0c:	4617      	mov	r7, r2
 800dd0e:	8183      	strh	r3, [r0, #12]
 800dd10:	460c      	mov	r4, r1
 800dd12:	46a8      	mov	r8, r5
 800dd14:	4621      	mov	r1, r4
 800dd16:	4630      	mov	r0, r6
 800dd18:	3501      	adds	r5, #1
 800dd1a:	f007 fa4d 	bl	80151b8 <put_memory>
 800dd1e:	42af      	cmp	r7, r5
 800dd20:	60a4      	str	r4, [r4, #8]
 800dd22:	f884 800c 	strb.w	r8, [r4, #12]
 800dd26:	f104 041c 	add.w	r4, r4, #28
 800dd2a:	d1f3      	bne.n	800dd14 <rmw_uxrce_init_topic_memory+0x20>
 800dd2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd30:	4770      	bx	lr
 800dd32:	bf00      	nop

0800dd34 <rmw_uxrce_init_static_input_buffer_memory>:
 800dd34:	b1ea      	cbz	r2, 800dd72 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800dd36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd3a:	7b05      	ldrb	r5, [r0, #12]
 800dd3c:	4606      	mov	r6, r0
 800dd3e:	b9b5      	cbnz	r5, 800dd6e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800dd40:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800dd44:	e9c0 5500 	strd	r5, r5, [r0]
 800dd48:	6083      	str	r3, [r0, #8]
 800dd4a:	f240 1301 	movw	r3, #257	@ 0x101
 800dd4e:	4617      	mov	r7, r2
 800dd50:	8183      	strh	r3, [r0, #12]
 800dd52:	460c      	mov	r4, r1
 800dd54:	46a8      	mov	r8, r5
 800dd56:	4621      	mov	r1, r4
 800dd58:	4630      	mov	r0, r6
 800dd5a:	3501      	adds	r5, #1
 800dd5c:	f007 fa2c 	bl	80151b8 <put_memory>
 800dd60:	42af      	cmp	r7, r5
 800dd62:	60a4      	str	r4, [r4, #8]
 800dd64:	f884 800c 	strb.w	r8, [r4, #12]
 800dd68:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800dd6c:	d1f3      	bne.n	800dd56 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800dd6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd72:	4770      	bx	lr

0800dd74 <rmw_uxrce_init_init_options_impl_memory>:
 800dd74:	b1e2      	cbz	r2, 800ddb0 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800dd76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd7a:	7b05      	ldrb	r5, [r0, #12]
 800dd7c:	4606      	mov	r6, r0
 800dd7e:	b9ad      	cbnz	r5, 800ddac <rmw_uxrce_init_init_options_impl_memory+0x38>
 800dd80:	232c      	movs	r3, #44	@ 0x2c
 800dd82:	e9c0 5500 	strd	r5, r5, [r0]
 800dd86:	6083      	str	r3, [r0, #8]
 800dd88:	f240 1301 	movw	r3, #257	@ 0x101
 800dd8c:	4617      	mov	r7, r2
 800dd8e:	8183      	strh	r3, [r0, #12]
 800dd90:	460c      	mov	r4, r1
 800dd92:	46a8      	mov	r8, r5
 800dd94:	4621      	mov	r1, r4
 800dd96:	4630      	mov	r0, r6
 800dd98:	3501      	adds	r5, #1
 800dd9a:	f007 fa0d 	bl	80151b8 <put_memory>
 800dd9e:	42af      	cmp	r7, r5
 800dda0:	60a4      	str	r4, [r4, #8]
 800dda2:	f884 800c 	strb.w	r8, [r4, #12]
 800dda6:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800ddaa:	d1f3      	bne.n	800dd94 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800ddac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddb0:	4770      	bx	lr
 800ddb2:	bf00      	nop

0800ddb4 <rmw_uxrce_init_wait_set_memory>:
 800ddb4:	b1e2      	cbz	r2, 800ddf0 <rmw_uxrce_init_wait_set_memory+0x3c>
 800ddb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddba:	7b05      	ldrb	r5, [r0, #12]
 800ddbc:	4606      	mov	r6, r0
 800ddbe:	b9ad      	cbnz	r5, 800ddec <rmw_uxrce_init_wait_set_memory+0x38>
 800ddc0:	231c      	movs	r3, #28
 800ddc2:	e9c0 5500 	strd	r5, r5, [r0]
 800ddc6:	6083      	str	r3, [r0, #8]
 800ddc8:	f240 1301 	movw	r3, #257	@ 0x101
 800ddcc:	4617      	mov	r7, r2
 800ddce:	8183      	strh	r3, [r0, #12]
 800ddd0:	460c      	mov	r4, r1
 800ddd2:	46a8      	mov	r8, r5
 800ddd4:	4621      	mov	r1, r4
 800ddd6:	4630      	mov	r0, r6
 800ddd8:	3501      	adds	r5, #1
 800ddda:	f007 f9ed 	bl	80151b8 <put_memory>
 800ddde:	42af      	cmp	r7, r5
 800dde0:	60a4      	str	r4, [r4, #8]
 800dde2:	f884 800c 	strb.w	r8, [r4, #12]
 800dde6:	f104 041c 	add.w	r4, r4, #28
 800ddea:	d1f3      	bne.n	800ddd4 <rmw_uxrce_init_wait_set_memory+0x20>
 800ddec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddf0:	4770      	bx	lr
 800ddf2:	bf00      	nop

0800ddf4 <rmw_uxrce_init_guard_condition_memory>:
 800ddf4:	b1e2      	cbz	r2, 800de30 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800ddf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddfa:	7b05      	ldrb	r5, [r0, #12]
 800ddfc:	4606      	mov	r6, r0
 800ddfe:	b9ad      	cbnz	r5, 800de2c <rmw_uxrce_init_guard_condition_memory+0x38>
 800de00:	2320      	movs	r3, #32
 800de02:	e9c0 5500 	strd	r5, r5, [r0]
 800de06:	6083      	str	r3, [r0, #8]
 800de08:	f240 1301 	movw	r3, #257	@ 0x101
 800de0c:	4617      	mov	r7, r2
 800de0e:	8183      	strh	r3, [r0, #12]
 800de10:	460c      	mov	r4, r1
 800de12:	46a8      	mov	r8, r5
 800de14:	4621      	mov	r1, r4
 800de16:	4630      	mov	r0, r6
 800de18:	3501      	adds	r5, #1
 800de1a:	f007 f9cd 	bl	80151b8 <put_memory>
 800de1e:	42af      	cmp	r7, r5
 800de20:	60a4      	str	r4, [r4, #8]
 800de22:	f884 800c 	strb.w	r8, [r4, #12]
 800de26:	f104 0420 	add.w	r4, r4, #32
 800de2a:	d1f3      	bne.n	800de14 <rmw_uxrce_init_guard_condition_memory+0x20>
 800de2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de30:	4770      	bx	lr
 800de32:	bf00      	nop

0800de34 <rmw_uxrce_fini_session_memory>:
 800de34:	4601      	mov	r1, r0
 800de36:	4801      	ldr	r0, [pc, #4]	@ (800de3c <rmw_uxrce_fini_session_memory+0x8>)
 800de38:	f007 b9be 	b.w	80151b8 <put_memory>
 800de3c:	2000ac14 	.word	0x2000ac14

0800de40 <rmw_uxrce_fini_node_memory>:
 800de40:	b538      	push	{r3, r4, r5, lr}
 800de42:	4604      	mov	r4, r0
 800de44:	6800      	ldr	r0, [r0, #0]
 800de46:	b128      	cbz	r0, 800de54 <rmw_uxrce_fini_node_memory+0x14>
 800de48:	4b07      	ldr	r3, [pc, #28]	@ (800de68 <rmw_uxrce_fini_node_memory+0x28>)
 800de4a:	6819      	ldr	r1, [r3, #0]
 800de4c:	f7f2 f9e8 	bl	8000220 <strcmp>
 800de50:	b940      	cbnz	r0, 800de64 <rmw_uxrce_fini_node_memory+0x24>
 800de52:	6020      	str	r0, [r4, #0]
 800de54:	6861      	ldr	r1, [r4, #4]
 800de56:	b129      	cbz	r1, 800de64 <rmw_uxrce_fini_node_memory+0x24>
 800de58:	2500      	movs	r5, #0
 800de5a:	4804      	ldr	r0, [pc, #16]	@ (800de6c <rmw_uxrce_fini_node_memory+0x2c>)
 800de5c:	610d      	str	r5, [r1, #16]
 800de5e:	f007 f9ab 	bl	80151b8 <put_memory>
 800de62:	6065      	str	r5, [r4, #4]
 800de64:	bd38      	pop	{r3, r4, r5, pc}
 800de66:	bf00      	nop
 800de68:	08019218 	.word	0x08019218
 800de6c:	2000abe4 	.word	0x2000abe4

0800de70 <rmw_uxrce_fini_publisher_memory>:
 800de70:	b510      	push	{r4, lr}
 800de72:	4604      	mov	r4, r0
 800de74:	6800      	ldr	r0, [r0, #0]
 800de76:	b128      	cbz	r0, 800de84 <rmw_uxrce_fini_publisher_memory+0x14>
 800de78:	4b06      	ldr	r3, [pc, #24]	@ (800de94 <rmw_uxrce_fini_publisher_memory+0x24>)
 800de7a:	6819      	ldr	r1, [r3, #0]
 800de7c:	f7f2 f9d0 	bl	8000220 <strcmp>
 800de80:	b938      	cbnz	r0, 800de92 <rmw_uxrce_fini_publisher_memory+0x22>
 800de82:	6020      	str	r0, [r4, #0]
 800de84:	6861      	ldr	r1, [r4, #4]
 800de86:	b121      	cbz	r1, 800de92 <rmw_uxrce_fini_publisher_memory+0x22>
 800de88:	4803      	ldr	r0, [pc, #12]	@ (800de98 <rmw_uxrce_fini_publisher_memory+0x28>)
 800de8a:	f007 f995 	bl	80151b8 <put_memory>
 800de8e:	2300      	movs	r3, #0
 800de90:	6063      	str	r3, [r4, #4]
 800de92:	bd10      	pop	{r4, pc}
 800de94:	08019218 	.word	0x08019218
 800de98:	2000abf4 	.word	0x2000abf4

0800de9c <rmw_uxrce_fini_subscription_memory>:
 800de9c:	b510      	push	{r4, lr}
 800de9e:	4604      	mov	r4, r0
 800dea0:	6800      	ldr	r0, [r0, #0]
 800dea2:	b128      	cbz	r0, 800deb0 <rmw_uxrce_fini_subscription_memory+0x14>
 800dea4:	4b06      	ldr	r3, [pc, #24]	@ (800dec0 <rmw_uxrce_fini_subscription_memory+0x24>)
 800dea6:	6819      	ldr	r1, [r3, #0]
 800dea8:	f7f2 f9ba 	bl	8000220 <strcmp>
 800deac:	b938      	cbnz	r0, 800debe <rmw_uxrce_fini_subscription_memory+0x22>
 800deae:	6020      	str	r0, [r4, #0]
 800deb0:	6861      	ldr	r1, [r4, #4]
 800deb2:	b121      	cbz	r1, 800debe <rmw_uxrce_fini_subscription_memory+0x22>
 800deb4:	4803      	ldr	r0, [pc, #12]	@ (800dec4 <rmw_uxrce_fini_subscription_memory+0x28>)
 800deb6:	f007 f97f 	bl	80151b8 <put_memory>
 800deba:	2300      	movs	r3, #0
 800debc:	6063      	str	r3, [r4, #4]
 800debe:	bd10      	pop	{r4, pc}
 800dec0:	08019218 	.word	0x08019218
 800dec4:	2000ac34 	.word	0x2000ac34

0800dec8 <rmw_uxrce_fini_service_memory>:
 800dec8:	b510      	push	{r4, lr}
 800deca:	4604      	mov	r4, r0
 800decc:	6800      	ldr	r0, [r0, #0]
 800dece:	b128      	cbz	r0, 800dedc <rmw_uxrce_fini_service_memory+0x14>
 800ded0:	4b06      	ldr	r3, [pc, #24]	@ (800deec <rmw_uxrce_fini_service_memory+0x24>)
 800ded2:	6819      	ldr	r1, [r3, #0]
 800ded4:	f7f2 f9a4 	bl	8000220 <strcmp>
 800ded8:	b938      	cbnz	r0, 800deea <rmw_uxrce_fini_service_memory+0x22>
 800deda:	6020      	str	r0, [r4, #0]
 800dedc:	6861      	ldr	r1, [r4, #4]
 800dede:	b121      	cbz	r1, 800deea <rmw_uxrce_fini_service_memory+0x22>
 800dee0:	4803      	ldr	r0, [pc, #12]	@ (800def0 <rmw_uxrce_fini_service_memory+0x28>)
 800dee2:	f007 f969 	bl	80151b8 <put_memory>
 800dee6:	2300      	movs	r3, #0
 800dee8:	6063      	str	r3, [r4, #4]
 800deea:	bd10      	pop	{r4, pc}
 800deec:	08019218 	.word	0x08019218
 800def0:	2000ac04 	.word	0x2000ac04

0800def4 <rmw_uxrce_fini_client_memory>:
 800def4:	b510      	push	{r4, lr}
 800def6:	4604      	mov	r4, r0
 800def8:	6800      	ldr	r0, [r0, #0]
 800defa:	b128      	cbz	r0, 800df08 <rmw_uxrce_fini_client_memory+0x14>
 800defc:	4b06      	ldr	r3, [pc, #24]	@ (800df18 <rmw_uxrce_fini_client_memory+0x24>)
 800defe:	6819      	ldr	r1, [r3, #0]
 800df00:	f7f2 f98e 	bl	8000220 <strcmp>
 800df04:	b938      	cbnz	r0, 800df16 <rmw_uxrce_fini_client_memory+0x22>
 800df06:	6020      	str	r0, [r4, #0]
 800df08:	6861      	ldr	r1, [r4, #4]
 800df0a:	b121      	cbz	r1, 800df16 <rmw_uxrce_fini_client_memory+0x22>
 800df0c:	4803      	ldr	r0, [pc, #12]	@ (800df1c <rmw_uxrce_fini_client_memory+0x28>)
 800df0e:	f007 f953 	bl	80151b8 <put_memory>
 800df12:	2300      	movs	r3, #0
 800df14:	6063      	str	r3, [r4, #4]
 800df16:	bd10      	pop	{r4, pc}
 800df18:	08019218 	.word	0x08019218
 800df1c:	20006314 	.word	0x20006314

0800df20 <rmw_uxrce_fini_topic_memory>:
 800df20:	b510      	push	{r4, lr}
 800df22:	4604      	mov	r4, r0
 800df24:	4621      	mov	r1, r4
 800df26:	4803      	ldr	r0, [pc, #12]	@ (800df34 <rmw_uxrce_fini_topic_memory+0x14>)
 800df28:	f007 f946 	bl	80151b8 <put_memory>
 800df2c:	2300      	movs	r3, #0
 800df2e:	61a3      	str	r3, [r4, #24]
 800df30:	bd10      	pop	{r4, pc}
 800df32:	bf00      	nop
 800df34:	2000ac44 	.word	0x2000ac44

0800df38 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800df38:	b082      	sub	sp, #8
 800df3a:	b530      	push	{r4, r5, lr}
 800df3c:	4925      	ldr	r1, [pc, #148]	@ (800dfd4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800df3e:	680d      	ldr	r5, [r1, #0]
 800df40:	ac03      	add	r4, sp, #12
 800df42:	e884 000c 	stmia.w	r4, {r2, r3}
 800df46:	461c      	mov	r4, r3
 800df48:	2d00      	cmp	r5, #0
 800df4a:	d041      	beq.n	800dfd0 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800df4c:	462b      	mov	r3, r5
 800df4e:	2100      	movs	r1, #0
 800df50:	689a      	ldr	r2, [r3, #8]
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800df58:	4290      	cmp	r0, r2
 800df5a:	bf08      	it	eq
 800df5c:	3101      	addeq	r1, #1
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d1f6      	bne.n	800df50 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800df62:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800df66:	2b02      	cmp	r3, #2
 800df68:	d029      	beq.n	800dfbe <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800df6a:	d907      	bls.n	800df7c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800df6c:	2b03      	cmp	r3, #3
 800df6e:	d005      	beq.n	800df7c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800df70:	2100      	movs	r1, #0
 800df72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800df76:	4608      	mov	r0, r1
 800df78:	b002      	add	sp, #8
 800df7a:	4770      	bx	lr
 800df7c:	b314      	cbz	r4, 800dfc4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800df7e:	428c      	cmp	r4, r1
 800df80:	d820      	bhi.n	800dfc4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800df82:	2d00      	cmp	r5, #0
 800df84:	d0f4      	beq.n	800df70 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800df86:	2100      	movs	r1, #0
 800df88:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800df8c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800df90:	e002      	b.n	800df98 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800df92:	686d      	ldr	r5, [r5, #4]
 800df94:	2d00      	cmp	r5, #0
 800df96:	d0ec      	beq.n	800df72 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800df98:	68ab      	ldr	r3, [r5, #8]
 800df9a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800df9e:	4290      	cmp	r0, r2
 800dfa0:	d1f7      	bne.n	800df92 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800dfa2:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800dfa6:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800dfaa:	4562      	cmp	r2, ip
 800dfac:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800dfb0:	eb73 0e04 	sbcs.w	lr, r3, r4
 800dfb4:	daed      	bge.n	800df92 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800dfb6:	4694      	mov	ip, r2
 800dfb8:	461c      	mov	r4, r3
 800dfba:	4629      	mov	r1, r5
 800dfbc:	e7e9      	b.n	800df92 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800dfbe:	b10c      	cbz	r4, 800dfc4 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800dfc0:	428c      	cmp	r4, r1
 800dfc2:	d9d5      	bls.n	800df70 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800dfc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dfc8:	4802      	ldr	r0, [pc, #8]	@ (800dfd4 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800dfca:	b002      	add	sp, #8
 800dfcc:	f007 b8e4 	b.w	8015198 <get_memory>
 800dfd0:	4629      	mov	r1, r5
 800dfd2:	e7c6      	b.n	800df62 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800dfd4:	2000ac24 	.word	0x2000ac24

0800dfd8 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800dfd8:	4b11      	ldr	r3, [pc, #68]	@ (800e020 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	b530      	push	{r4, r5, lr}
 800dfde:	b1e3      	cbz	r3, 800e01a <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800dfe0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800dfe4:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800dfe8:	2400      	movs	r4, #0
 800dfea:	e001      	b.n	800dff0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800dfec:	685b      	ldr	r3, [r3, #4]
 800dfee:	b193      	cbz	r3, 800e016 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800dff0:	689a      	ldr	r2, [r3, #8]
 800dff2:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800dff6:	4288      	cmp	r0, r1
 800dff8:	d1f8      	bne.n	800dfec <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800dffa:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800dffe:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800e002:	4571      	cmp	r1, lr
 800e004:	eb72 050c 	sbcs.w	r5, r2, ip
 800e008:	daf0      	bge.n	800dfec <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800e00a:	461c      	mov	r4, r3
 800e00c:	685b      	ldr	r3, [r3, #4]
 800e00e:	468e      	mov	lr, r1
 800e010:	4694      	mov	ip, r2
 800e012:	2b00      	cmp	r3, #0
 800e014:	d1ec      	bne.n	800dff0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800e016:	4620      	mov	r0, r4
 800e018:	bd30      	pop	{r4, r5, pc}
 800e01a:	461c      	mov	r4, r3
 800e01c:	4620      	mov	r0, r4
 800e01e:	bd30      	pop	{r4, r5, pc}
 800e020:	2000ac24 	.word	0x2000ac24
 800e024:	00000000 	.word	0x00000000

0800e028 <rmw_uxrce_clean_expired_static_input_buffer>:
 800e028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e02c:	4b3c      	ldr	r3, [pc, #240]	@ (800e120 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e02e:	ed2d 8b06 	vpush	{d8-d10}
 800e032:	681f      	ldr	r7, [r3, #0]
 800e034:	b08d      	sub	sp, #52	@ 0x34
 800e036:	f7ff fd7d 	bl	800db34 <rmw_uros_epoch_nanos>
 800e03a:	2f00      	cmp	r7, #0
 800e03c:	d05d      	beq.n	800e0fa <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800e03e:	46b8      	mov	r8, r7
 800e040:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800e108 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800e044:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e048:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800e04c:	2b04      	cmp	r3, #4
 800e04e:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800e110 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800e052:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800e118 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800e056:	4681      	mov	r9, r0
 800e058:	468a      	mov	sl, r1
 800e05a:	ac04      	add	r4, sp, #16
 800e05c:	d03f      	beq.n	800e0de <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800e05e:	2b05      	cmp	r3, #5
 800e060:	d044      	beq.n	800e0ec <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800e062:	2b03      	cmp	r3, #3
 800e064:	d03b      	beq.n	800e0de <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800e066:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e06a:	ed8d ab06 	vstr	d10, [sp, #24]
 800e06e:	ed8d 8b08 	vstr	d8, [sp, #32]
 800e072:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800e076:	ab08      	add	r3, sp, #32
 800e078:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e07a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e07e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e082:	f006 fdd5 	bl	8014c30 <rmw_time_equal>
 800e086:	b118      	cbz	r0, 800e090 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800e088:	ed8d 9b04 	vstr	d9, [sp, #16]
 800e08c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e090:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e094:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800e098:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800e09c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800e0a0:	f006 fe1a 	bl	8014cd8 <rmw_time_total_nsec>
 800e0a4:	1830      	adds	r0, r6, r0
 800e0a6:	eb47 0101 	adc.w	r1, r7, r1
 800e0aa:	4548      	cmp	r0, r9
 800e0ac:	eb71 030a 	sbcs.w	r3, r1, sl
 800e0b0:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800e0b4:	db05      	blt.n	800e0c2 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800e0b6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800e0ba:	4591      	cmp	r9, r2
 800e0bc:	eb7a 0303 	sbcs.w	r3, sl, r3
 800e0c0:	da03      	bge.n	800e0ca <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800e0c2:	4817      	ldr	r0, [pc, #92]	@ (800e120 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e0c4:	4641      	mov	r1, r8
 800e0c6:	f007 f877 	bl	80151b8 <put_memory>
 800e0ca:	f1bb 0f00 	cmp.w	fp, #0
 800e0ce:	d014      	beq.n	800e0fa <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800e0d0:	46d8      	mov	r8, fp
 800e0d2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e0d6:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800e0da:	2b04      	cmp	r3, #4
 800e0dc:	d1bf      	bne.n	800e05e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800e0de:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800e0e2:	3340      	adds	r3, #64	@ 0x40
 800e0e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e0e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e0ea:	e7c0      	b.n	800e06e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800e0ec:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800e0f0:	3348      	adds	r3, #72	@ 0x48
 800e0f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e0f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e0f8:	e7b9      	b.n	800e06e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800e0fa:	b00d      	add	sp, #52	@ 0x34
 800e0fc:	ecbd 8b06 	vpop	{d8-d10}
 800e100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e104:	f3af 8000 	nop.w
	...
 800e110:	00000001 	.word	0x00000001
 800e114:	00000000 	.word	0x00000000
 800e118:	0000001e 	.word	0x0000001e
 800e11c:	00000000 	.word	0x00000000
 800e120:	2000ac24 	.word	0x2000ac24

0800e124 <run_xrce_session>:
 800e124:	b510      	push	{r4, lr}
 800e126:	788c      	ldrb	r4, [r1, #2]
 800e128:	b086      	sub	sp, #24
 800e12a:	2c01      	cmp	r4, #1
 800e12c:	f8ad 200e 	strh.w	r2, [sp, #14]
 800e130:	d00c      	beq.n	800e14c <run_xrce_session+0x28>
 800e132:	4619      	mov	r1, r3
 800e134:	2301      	movs	r3, #1
 800e136:	9300      	str	r3, [sp, #0]
 800e138:	f10d 020e 	add.w	r2, sp, #14
 800e13c:	f10d 0317 	add.w	r3, sp, #23
 800e140:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e144:	f001 f902 	bl	800f34c <uxr_run_session_until_all_status>
 800e148:	b006      	add	sp, #24
 800e14a:	bd10      	pop	{r4, pc}
 800e14c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e150:	f000 fd16 	bl	800eb80 <uxr_flash_output_streams>
 800e154:	4620      	mov	r0, r4
 800e156:	b006      	add	sp, #24
 800e158:	bd10      	pop	{r4, pc}
 800e15a:	bf00      	nop

0800e15c <convert_qos_profile>:
 800e15c:	7a4a      	ldrb	r2, [r1, #9]
 800e15e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800e162:	2a02      	cmp	r2, #2
 800e164:	bf18      	it	ne
 800e166:	2200      	movne	r2, #0
 800e168:	7002      	strb	r2, [r0, #0]
 800e16a:	780a      	ldrb	r2, [r1, #0]
 800e16c:	8889      	ldrh	r1, [r1, #4]
 800e16e:	8081      	strh	r1, [r0, #4]
 800e170:	f1ac 0c02 	sub.w	ip, ip, #2
 800e174:	f1a2 0202 	sub.w	r2, r2, #2
 800e178:	fabc fc8c 	clz	ip, ip
 800e17c:	fab2 f282 	clz	r2, r2
 800e180:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800e184:	0952      	lsrs	r2, r2, #5
 800e186:	f880 c001 	strb.w	ip, [r0, #1]
 800e18a:	7082      	strb	r2, [r0, #2]
 800e18c:	4770      	bx	lr
 800e18e:	bf00      	nop

0800e190 <generate_type_name>:
 800e190:	b530      	push	{r4, r5, lr}
 800e192:	2300      	movs	r3, #0
 800e194:	700b      	strb	r3, [r1, #0]
 800e196:	6803      	ldr	r3, [r0, #0]
 800e198:	b087      	sub	sp, #28
 800e19a:	4614      	mov	r4, r2
 800e19c:	b1d3      	cbz	r3, 800e1d4 <generate_type_name+0x44>
 800e19e:	4a0f      	ldr	r2, [pc, #60]	@ (800e1dc <generate_type_name+0x4c>)
 800e1a0:	4615      	mov	r5, r2
 800e1a2:	9203      	str	r2, [sp, #12]
 800e1a4:	9500      	str	r5, [sp, #0]
 800e1a6:	6842      	ldr	r2, [r0, #4]
 800e1a8:	480d      	ldr	r0, [pc, #52]	@ (800e1e0 <generate_type_name+0x50>)
 800e1aa:	9001      	str	r0, [sp, #4]
 800e1ac:	4608      	mov	r0, r1
 800e1ae:	490d      	ldr	r1, [pc, #52]	@ (800e1e4 <generate_type_name+0x54>)
 800e1b0:	9204      	str	r2, [sp, #16]
 800e1b2:	9105      	str	r1, [sp, #20]
 800e1b4:	9102      	str	r1, [sp, #8]
 800e1b6:	4a0c      	ldr	r2, [pc, #48]	@ (800e1e8 <generate_type_name+0x58>)
 800e1b8:	4621      	mov	r1, r4
 800e1ba:	f009 f9cd 	bl	8017558 <sniprintf>
 800e1be:	2800      	cmp	r0, #0
 800e1c0:	db05      	blt.n	800e1ce <generate_type_name+0x3e>
 800e1c2:	4284      	cmp	r4, r0
 800e1c4:	bfd4      	ite	le
 800e1c6:	2000      	movle	r0, #0
 800e1c8:	2001      	movgt	r0, #1
 800e1ca:	b007      	add	sp, #28
 800e1cc:	bd30      	pop	{r4, r5, pc}
 800e1ce:	2000      	movs	r0, #0
 800e1d0:	b007      	add	sp, #28
 800e1d2:	bd30      	pop	{r4, r5, pc}
 800e1d4:	4b05      	ldr	r3, [pc, #20]	@ (800e1ec <generate_type_name+0x5c>)
 800e1d6:	4a01      	ldr	r2, [pc, #4]	@ (800e1dc <generate_type_name+0x4c>)
 800e1d8:	461d      	mov	r5, r3
 800e1da:	e7e2      	b.n	800e1a2 <generate_type_name+0x12>
 800e1dc:	08018a7c 	.word	0x08018a7c
 800e1e0:	08018a94 	.word	0x08018a94
 800e1e4:	08018a90 	.word	0x08018a90
 800e1e8:	08018a80 	.word	0x08018a80
 800e1ec:	08018ff0 	.word	0x08018ff0

0800e1f0 <generate_topic_name>:
 800e1f0:	b510      	push	{r4, lr}
 800e1f2:	b082      	sub	sp, #8
 800e1f4:	4614      	mov	r4, r2
 800e1f6:	9000      	str	r0, [sp, #0]
 800e1f8:	4b08      	ldr	r3, [pc, #32]	@ (800e21c <generate_topic_name+0x2c>)
 800e1fa:	4a09      	ldr	r2, [pc, #36]	@ (800e220 <generate_topic_name+0x30>)
 800e1fc:	4608      	mov	r0, r1
 800e1fe:	4621      	mov	r1, r4
 800e200:	f009 f9aa 	bl	8017558 <sniprintf>
 800e204:	2800      	cmp	r0, #0
 800e206:	db05      	blt.n	800e214 <generate_topic_name+0x24>
 800e208:	4284      	cmp	r4, r0
 800e20a:	bfd4      	ite	le
 800e20c:	2000      	movle	r0, #0
 800e20e:	2001      	movgt	r0, #1
 800e210:	b002      	add	sp, #8
 800e212:	bd10      	pop	{r4, pc}
 800e214:	2000      	movs	r0, #0
 800e216:	b002      	add	sp, #8
 800e218:	bd10      	pop	{r4, pc}
 800e21a:	bf00      	nop
 800e21c:	08018aa0 	.word	0x08018aa0
 800e220:	08018a98 	.word	0x08018a98

0800e224 <is_uxrce_rmw_identifier_valid>:
 800e224:	b510      	push	{r4, lr}
 800e226:	4604      	mov	r4, r0
 800e228:	b140      	cbz	r0, 800e23c <is_uxrce_rmw_identifier_valid+0x18>
 800e22a:	f007 f81d 	bl	8015268 <rmw_get_implementation_identifier>
 800e22e:	4601      	mov	r1, r0
 800e230:	4620      	mov	r0, r4
 800e232:	f7f1 fff5 	bl	8000220 <strcmp>
 800e236:	fab0 f080 	clz	r0, r0
 800e23a:	0940      	lsrs	r0, r0, #5
 800e23c:	bd10      	pop	{r4, pc}
 800e23e:	bf00      	nop

0800e240 <get_message_typesupport_handle>:
 800e240:	6883      	ldr	r3, [r0, #8]
 800e242:	4718      	bx	r3

0800e244 <get_message_typesupport_handle_function>:
 800e244:	b510      	push	{r4, lr}
 800e246:	4604      	mov	r4, r0
 800e248:	6800      	ldr	r0, [r0, #0]
 800e24a:	f7f1 ffe9 	bl	8000220 <strcmp>
 800e24e:	2800      	cmp	r0, #0
 800e250:	bf0c      	ite	eq
 800e252:	4620      	moveq	r0, r4
 800e254:	2000      	movne	r0, #0
 800e256:	bd10      	pop	{r4, pc}

0800e258 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800e258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e25c:	6805      	ldr	r5, [r0, #0]
 800e25e:	4604      	mov	r4, r0
 800e260:	4628      	mov	r0, r5
 800e262:	460e      	mov	r6, r1
 800e264:	f7f1 ffdc 	bl	8000220 <strcmp>
 800e268:	b1c8      	cbz	r0, 800e29e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800e26a:	4b11      	ldr	r3, [pc, #68]	@ (800e2b0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	429d      	cmp	r5, r3
 800e270:	d112      	bne.n	800e298 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800e272:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800e276:	f8d8 4000 	ldr.w	r4, [r8]
 800e27a:	b16c      	cbz	r4, 800e298 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800e27c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e280:	2700      	movs	r7, #0
 800e282:	3d04      	subs	r5, #4
 800e284:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800e288:	4631      	mov	r1, r6
 800e28a:	f7f1 ffc9 	bl	8000220 <strcmp>
 800e28e:	00bb      	lsls	r3, r7, #2
 800e290:	b140      	cbz	r0, 800e2a4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800e292:	3701      	adds	r7, #1
 800e294:	42bc      	cmp	r4, r7
 800e296:	d1f5      	bne.n	800e284 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800e298:	2000      	movs	r0, #0
 800e29a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e29e:	4620      	mov	r0, r4
 800e2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2a4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e2a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ac:	58d3      	ldr	r3, [r2, r3]
 800e2ae:	4718      	bx	r3
 800e2b0:	200000e8 	.word	0x200000e8

0800e2b4 <amt212ev_interfaces__msg__AmtRead__init>:
 800e2b4:	3800      	subs	r0, #0
 800e2b6:	bf18      	it	ne
 800e2b8:	2001      	movne	r0, #1
 800e2ba:	4770      	bx	lr

0800e2bc <amt212ev_interfaces__msg__AmtRead__fini>:
 800e2bc:	4770      	bx	lr
 800e2be:	bf00      	nop

0800e2c0 <uxr_buffer_delete_entity>:
 800e2c0:	b510      	push	{r4, lr}
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	b08e      	sub	sp, #56	@ 0x38
 800e2c6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e2ca:	2303      	movs	r3, #3
 800e2cc:	9300      	str	r3, [sp, #0]
 800e2ce:	2204      	movs	r2, #4
 800e2d0:	ab06      	add	r3, sp, #24
 800e2d2:	4604      	mov	r4, r0
 800e2d4:	9103      	str	r1, [sp, #12]
 800e2d6:	f001 fab5 	bl	800f844 <uxr_prepare_stream_to_write_submessage>
 800e2da:	b918      	cbnz	r0, 800e2e4 <uxr_buffer_delete_entity+0x24>
 800e2dc:	4604      	mov	r4, r0
 800e2de:	4620      	mov	r0, r4
 800e2e0:	b00e      	add	sp, #56	@ 0x38
 800e2e2:	bd10      	pop	{r4, pc}
 800e2e4:	9902      	ldr	r1, [sp, #8]
 800e2e6:	aa05      	add	r2, sp, #20
 800e2e8:	4620      	mov	r0, r4
 800e2ea:	f001 fbe1 	bl	800fab0 <uxr_init_base_object_request>
 800e2ee:	a905      	add	r1, sp, #20
 800e2f0:	4604      	mov	r4, r0
 800e2f2:	a806      	add	r0, sp, #24
 800e2f4:	f003 f9d8 	bl	80116a8 <uxr_serialize_DELETE_Payload>
 800e2f8:	4620      	mov	r0, r4
 800e2fa:	b00e      	add	sp, #56	@ 0x38
 800e2fc:	bd10      	pop	{r4, pc}
 800e2fe:	bf00      	nop

0800e300 <uxr_common_create_entity>:
 800e300:	b510      	push	{r4, lr}
 800e302:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800e306:	b08c      	sub	sp, #48	@ 0x30
 800e308:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e30c:	f1bc 0f01 	cmp.w	ip, #1
 800e310:	bf0c      	ite	eq
 800e312:	f003 0201 	andeq.w	r2, r3, #1
 800e316:	2200      	movne	r2, #0
 800e318:	330e      	adds	r3, #14
 800e31a:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800e31e:	9101      	str	r1, [sp, #4]
 800e320:	441a      	add	r2, r3
 800e322:	2301      	movs	r3, #1
 800e324:	9300      	str	r3, [sp, #0]
 800e326:	9903      	ldr	r1, [sp, #12]
 800e328:	ab04      	add	r3, sp, #16
 800e32a:	b292      	uxth	r2, r2
 800e32c:	4604      	mov	r4, r0
 800e32e:	f001 fa89 	bl	800f844 <uxr_prepare_stream_to_write_submessage>
 800e332:	b918      	cbnz	r0, 800e33c <uxr_common_create_entity+0x3c>
 800e334:	4604      	mov	r4, r0
 800e336:	4620      	mov	r0, r4
 800e338:	b00c      	add	sp, #48	@ 0x30
 800e33a:	bd10      	pop	{r4, pc}
 800e33c:	9902      	ldr	r1, [sp, #8]
 800e33e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e340:	4620      	mov	r0, r4
 800e342:	f001 fbb5 	bl	800fab0 <uxr_init_base_object_request>
 800e346:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e348:	4604      	mov	r4, r0
 800e34a:	a804      	add	r0, sp, #16
 800e34c:	f003 f908 	bl	8011560 <uxr_serialize_CREATE_Payload>
 800e350:	4620      	mov	r0, r4
 800e352:	b00c      	add	sp, #48	@ 0x30
 800e354:	bd10      	pop	{r4, pc}
 800e356:	bf00      	nop

0800e358 <uxr_buffer_create_participant_bin>:
 800e358:	b570      	push	{r4, r5, r6, lr}
 800e35a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800e35e:	ac11      	add	r4, sp, #68	@ 0x44
 800e360:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800e364:	2303      	movs	r3, #3
 800e366:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e36a:	7223      	strb	r3, [r4, #8]
 800e36c:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800e36e:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800e372:	2201      	movs	r2, #1
 800e374:	2100      	movs	r1, #0
 800e376:	4605      	mov	r5, r0
 800e378:	7122      	strb	r2, [r4, #4]
 800e37a:	f88d 1014 	strb.w	r1, [sp, #20]
 800e37e:	b1cb      	cbz	r3, 800e3b4 <uxr_buffer_create_participant_bin+0x5c>
 800e380:	f88d 201c 	strb.w	r2, [sp, #28]
 800e384:	9308      	str	r3, [sp, #32]
 800e386:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e38a:	a915      	add	r1, sp, #84	@ 0x54
 800e38c:	a809      	add	r0, sp, #36	@ 0x24
 800e38e:	f7fd fb85 	bl	800ba9c <ucdr_init_buffer>
 800e392:	a905      	add	r1, sp, #20
 800e394:	a809      	add	r0, sp, #36	@ 0x24
 800e396:	f002 fdb1 	bl	8010efc <uxr_serialize_OBJK_DomainParticipant_Binary>
 800e39a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e39c:	9600      	str	r6, [sp, #0]
 800e39e:	9401      	str	r4, [sp, #4]
 800e3a0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e3a4:	60e3      	str	r3, [r4, #12]
 800e3a6:	4628      	mov	r0, r5
 800e3a8:	b29b      	uxth	r3, r3
 800e3aa:	f7ff ffa9 	bl	800e300 <uxr_common_create_entity>
 800e3ae:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800e3b2:	bd70      	pop	{r4, r5, r6, pc}
 800e3b4:	f88d 301c 	strb.w	r3, [sp, #28]
 800e3b8:	e7e5      	b.n	800e386 <uxr_buffer_create_participant_bin+0x2e>
 800e3ba:	bf00      	nop

0800e3bc <uxr_buffer_create_topic_bin>:
 800e3bc:	b570      	push	{r4, r5, r6, lr}
 800e3be:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800e3c2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e3c6:	9105      	str	r1, [sp, #20]
 800e3c8:	4605      	mov	r5, r0
 800e3ca:	a997      	add	r1, sp, #604	@ 0x25c
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	2302      	movs	r3, #2
 800e3d0:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800e3d4:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800e3d8:	f000 f9b0 	bl	800e73c <uxr_object_id_to_raw>
 800e3dc:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800e3de:	9306      	str	r3, [sp, #24]
 800e3e0:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800e3e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e3e4:	2303      	movs	r3, #3
 800e3e6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e3f0:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800e3f4:	a917      	add	r1, sp, #92	@ 0x5c
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	a80b      	add	r0, sp, #44	@ 0x2c
 800e3fa:	f88d 301c 	strb.w	r3, [sp, #28]
 800e3fe:	f7fd fb4d 	bl	800ba9c <ucdr_init_buffer>
 800e402:	a906      	add	r1, sp, #24
 800e404:	a80b      	add	r0, sp, #44	@ 0x2c
 800e406:	f002 fd9b 	bl	8010f40 <uxr_serialize_OBJK_Topic_Binary>
 800e40a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e40c:	9316      	str	r3, [sp, #88]	@ 0x58
 800e40e:	ac13      	add	r4, sp, #76	@ 0x4c
 800e410:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e414:	9600      	str	r6, [sp, #0]
 800e416:	9401      	str	r4, [sp, #4]
 800e418:	b29b      	uxth	r3, r3
 800e41a:	4628      	mov	r0, r5
 800e41c:	f7ff ff70 	bl	800e300 <uxr_common_create_entity>
 800e420:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800e424:	bd70      	pop	{r4, r5, r6, pc}
 800e426:	bf00      	nop

0800e428 <uxr_buffer_create_publisher_bin>:
 800e428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e42a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800e42e:	4605      	mov	r5, r0
 800e430:	9105      	str	r1, [sp, #20]
 800e432:	4618      	mov	r0, r3
 800e434:	2603      	movs	r6, #3
 800e436:	a992      	add	r1, sp, #584	@ 0x248
 800e438:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e43c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800e440:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800e444:	f000 f97a 	bl	800e73c <uxr_object_id_to_raw>
 800e448:	2300      	movs	r3, #0
 800e44a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e44e:	a912      	add	r1, sp, #72	@ 0x48
 800e450:	a806      	add	r0, sp, #24
 800e452:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800e456:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800e45a:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800e45e:	f7fd fb1d 	bl	800ba9c <ucdr_init_buffer>
 800e462:	a993      	add	r1, sp, #588	@ 0x24c
 800e464:	a806      	add	r0, sp, #24
 800e466:	f002 fe1f 	bl	80110a8 <uxr_serialize_OBJK_Publisher_Binary>
 800e46a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e46c:	9311      	str	r3, [sp, #68]	@ 0x44
 800e46e:	ac0e      	add	r4, sp, #56	@ 0x38
 800e470:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e474:	9700      	str	r7, [sp, #0]
 800e476:	9401      	str	r4, [sp, #4]
 800e478:	b29b      	uxth	r3, r3
 800e47a:	4628      	mov	r0, r5
 800e47c:	f7ff ff40 	bl	800e300 <uxr_common_create_entity>
 800e480:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800e484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e486:	bf00      	nop

0800e488 <uxr_buffer_create_datawriter_bin>:
 800e488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e48c:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800e490:	ac1d      	add	r4, sp, #116	@ 0x74
 800e492:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e496:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800e49a:	9105      	str	r1, [sp, #20]
 800e49c:	4606      	mov	r6, r0
 800e49e:	a9a1      	add	r1, sp, #644	@ 0x284
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	2305      	movs	r3, #5
 800e4a4:	7123      	strb	r3, [r4, #4]
 800e4a6:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800e4aa:	2703      	movs	r7, #3
 800e4ac:	f000 f946 	bl	800e73c <uxr_object_id_to_raw>
 800e4b0:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800e4b2:	7227      	strb	r7, [r4, #8]
 800e4b4:	a90e      	add	r1, sp, #56	@ 0x38
 800e4b6:	f000 f941 	bl	800e73c <uxr_object_id_to_raw>
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800e4c0:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800e4c4:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800e4c8:	3d00      	subs	r5, #0
 800e4ca:	bf18      	it	ne
 800e4cc:	2501      	movne	r5, #1
 800e4ce:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800e4d2:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800e4d6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800e4da:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e4de:	2301      	movs	r3, #1
 800e4e0:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800e4e4:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800e4e8:	bb8a      	cbnz	r2, 800e54e <uxr_buffer_create_datawriter_bin+0xc6>
 800e4ea:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e4ee:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800e4f2:	f04f 0c13 	mov.w	ip, #19
 800e4f6:	250b      	movs	r5, #11
 800e4f8:	2221      	movs	r2, #33	@ 0x21
 800e4fa:	2111      	movs	r1, #17
 800e4fc:	2009      	movs	r0, #9
 800e4fe:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800e502:	b923      	cbnz	r3, 800e50e <uxr_buffer_create_datawriter_bin+0x86>
 800e504:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800e508:	4672      	mov	r2, lr
 800e50a:	4661      	mov	r1, ip
 800e50c:	4628      	mov	r0, r5
 800e50e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800e512:	2b01      	cmp	r3, #1
 800e514:	d025      	beq.n	800e562 <uxr_buffer_create_datawriter_bin+0xda>
 800e516:	2b03      	cmp	r3, #3
 800e518:	d029      	beq.n	800e56e <uxr_buffer_create_datawriter_bin+0xe6>
 800e51a:	b32b      	cbz	r3, 800e568 <uxr_buffer_create_datawriter_bin+0xe0>
 800e51c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e520:	a921      	add	r1, sp, #132	@ 0x84
 800e522:	a806      	add	r0, sp, #24
 800e524:	f7fd faba 	bl	800ba9c <ucdr_init_buffer>
 800e528:	a90e      	add	r1, sp, #56	@ 0x38
 800e52a:	a806      	add	r0, sp, #24
 800e52c:	f002 fe32 	bl	8011194 <uxr_serialize_OBJK_DataWriter_Binary>
 800e530:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e532:	f8cd 8000 	str.w	r8, [sp]
 800e536:	9401      	str	r4, [sp, #4]
 800e538:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e53c:	60e3      	str	r3, [r4, #12]
 800e53e:	4630      	mov	r0, r6
 800e540:	b29b      	uxth	r3, r3
 800e542:	f7ff fedd 	bl	800e300 <uxr_common_create_entity>
 800e546:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800e54a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e54e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800e552:	f04f 0c12 	mov.w	ip, #18
 800e556:	250a      	movs	r5, #10
 800e558:	2220      	movs	r2, #32
 800e55a:	2110      	movs	r1, #16
 800e55c:	2008      	movs	r0, #8
 800e55e:	2702      	movs	r7, #2
 800e560:	e7cd      	b.n	800e4fe <uxr_buffer_create_datawriter_bin+0x76>
 800e562:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800e566:	e7d9      	b.n	800e51c <uxr_buffer_create_datawriter_bin+0x94>
 800e568:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800e56c:	e7d6      	b.n	800e51c <uxr_buffer_create_datawriter_bin+0x94>
 800e56e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800e572:	e7d3      	b.n	800e51c <uxr_buffer_create_datawriter_bin+0x94>

0800e574 <get_custom_error>:
 800e574:	4b01      	ldr	r3, [pc, #4]	@ (800e57c <get_custom_error+0x8>)
 800e576:	7818      	ldrb	r0, [r3, #0]
 800e578:	4770      	bx	lr
 800e57a:	bf00      	nop
 800e57c:	2000ac64 	.word	0x2000ac64

0800e580 <recv_custom_msg>:
 800e580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e584:	4693      	mov	fp, r2
 800e586:	b089      	sub	sp, #36	@ 0x24
 800e588:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800e58c:	9305      	str	r3, [sp, #20]
 800e58e:	468a      	mov	sl, r1
 800e590:	2100      	movs	r1, #0
 800e592:	4604      	mov	r4, r0
 800e594:	f88d 101e 	strb.w	r1, [sp, #30]
 800e598:	b322      	cbz	r2, 800e5e4 <recv_custom_msg+0x64>
 800e59a:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800e59e:	f10d 081f 	add.w	r8, sp, #31
 800e5a2:	af05      	add	r7, sp, #20
 800e5a4:	f10d 061e 	add.w	r6, sp, #30
 800e5a8:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800e5ac:	e002      	b.n	800e5b4 <recv_custom_msg+0x34>
 800e5ae:	9b05      	ldr	r3, [sp, #20]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	dd0f      	ble.n	800e5d4 <recv_custom_msg+0x54>
 800e5b4:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800e5b8:	4623      	mov	r3, r4
 800e5ba:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800e5be:	e9cd 5600 	strd	r5, r6, [sp]
 800e5c2:	4622      	mov	r2, r4
 800e5c4:	4648      	mov	r0, r9
 800e5c6:	f001 fca1 	bl	800ff0c <uxr_read_framed_msg>
 800e5ca:	2800      	cmp	r0, #0
 800e5cc:	d0ef      	beq.n	800e5ae <recv_custom_msg+0x2e>
 800e5ce:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e5d2:	b1b3      	cbz	r3, 800e602 <recv_custom_msg+0x82>
 800e5d4:	4b0f      	ldr	r3, [pc, #60]	@ (800e614 <recv_custom_msg+0x94>)
 800e5d6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800e5da:	701a      	strb	r2, [r3, #0]
 800e5dc:	2000      	movs	r0, #0
 800e5de:	b009      	add	sp, #36	@ 0x24
 800e5e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5e4:	f10d 021f 	add.w	r2, sp, #31
 800e5e8:	9200      	str	r2, [sp, #0]
 800e5ea:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800e5ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e5f2:	4601      	mov	r1, r0
 800e5f4:	47a8      	blx	r5
 800e5f6:	2800      	cmp	r0, #0
 800e5f8:	d0ec      	beq.n	800e5d4 <recv_custom_msg+0x54>
 800e5fa:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d1e8      	bne.n	800e5d4 <recv_custom_msg+0x54>
 800e602:	f8cb 0000 	str.w	r0, [fp]
 800e606:	2001      	movs	r0, #1
 800e608:	f8ca 4000 	str.w	r4, [sl]
 800e60c:	b009      	add	sp, #36	@ 0x24
 800e60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e612:	bf00      	nop
 800e614:	2000ac64 	.word	0x2000ac64

0800e618 <send_custom_msg>:
 800e618:	b530      	push	{r4, r5, lr}
 800e61a:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800e61e:	b087      	sub	sp, #28
 800e620:	4615      	mov	r5, r2
 800e622:	b974      	cbnz	r4, 800e642 <send_custom_msg+0x2a>
 800e624:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800e628:	f10d 0317 	add.w	r3, sp, #23
 800e62c:	47a0      	blx	r4
 800e62e:	b108      	cbz	r0, 800e634 <send_custom_msg+0x1c>
 800e630:	42a8      	cmp	r0, r5
 800e632:	d015      	beq.n	800e660 <send_custom_msg+0x48>
 800e634:	4b0c      	ldr	r3, [pc, #48]	@ (800e668 <send_custom_msg+0x50>)
 800e636:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800e63a:	701a      	strb	r2, [r3, #0]
 800e63c:	2000      	movs	r0, #0
 800e63e:	b007      	add	sp, #28
 800e640:	bd30      	pop	{r4, r5, pc}
 800e642:	460b      	mov	r3, r1
 800e644:	2200      	movs	r2, #0
 800e646:	f10d 0117 	add.w	r1, sp, #23
 800e64a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800e64e:	4602      	mov	r2, r0
 800e650:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800e654:	9500      	str	r5, [sp, #0]
 800e656:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800e65a:	f001 fa5f 	bl	800fb1c <uxr_write_framed_msg>
 800e65e:	e7e6      	b.n	800e62e <send_custom_msg+0x16>
 800e660:	2001      	movs	r0, #1
 800e662:	b007      	add	sp, #28
 800e664:	bd30      	pop	{r4, r5, pc}
 800e666:	bf00      	nop
 800e668:	2000ac64 	.word	0x2000ac64

0800e66c <uxr_set_custom_transport_callbacks>:
 800e66c:	b410      	push	{r4}
 800e66e:	9c01      	ldr	r4, [sp, #4]
 800e670:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800e674:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800e678:	9b02      	ldr	r3, [sp, #8]
 800e67a:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800e67e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e682:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800e686:	4770      	bx	lr

0800e688 <uxr_init_custom_transport>:
 800e688:	b538      	push	{r3, r4, r5, lr}
 800e68a:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800e68e:	b303      	cbz	r3, 800e6d2 <uxr_init_custom_transport+0x4a>
 800e690:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800e694:	4604      	mov	r4, r0
 800e696:	b1e2      	cbz	r2, 800e6d2 <uxr_init_custom_transport+0x4a>
 800e698:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800e69c:	b1ca      	cbz	r2, 800e6d2 <uxr_init_custom_transport+0x4a>
 800e69e:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800e6a2:	b1b2      	cbz	r2, 800e6d2 <uxr_init_custom_transport+0x4a>
 800e6a4:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800e6a8:	4798      	blx	r3
 800e6aa:	4605      	mov	r5, r0
 800e6ac:	b188      	cbz	r0, 800e6d2 <uxr_init_custom_transport+0x4a>
 800e6ae:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800e6b2:	b98b      	cbnz	r3, 800e6d8 <uxr_init_custom_transport+0x50>
 800e6b4:	490b      	ldr	r1, [pc, #44]	@ (800e6e4 <uxr_init_custom_transport+0x5c>)
 800e6b6:	4b0c      	ldr	r3, [pc, #48]	@ (800e6e8 <uxr_init_custom_transport+0x60>)
 800e6b8:	4a0c      	ldr	r2, [pc, #48]	@ (800e6ec <uxr_init_custom_transport+0x64>)
 800e6ba:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800e6be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e6c2:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800e6c6:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800e6ca:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800e6ce:	4628      	mov	r0, r5
 800e6d0:	bd38      	pop	{r3, r4, r5, pc}
 800e6d2:	2500      	movs	r5, #0
 800e6d4:	4628      	mov	r0, r5
 800e6d6:	bd38      	pop	{r3, r4, r5, pc}
 800e6d8:	2100      	movs	r1, #0
 800e6da:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800e6de:	f001 fa17 	bl	800fb10 <uxr_init_framing_io>
 800e6e2:	e7e7      	b.n	800e6b4 <uxr_init_custom_transport+0x2c>
 800e6e4:	0800e619 	.word	0x0800e619
 800e6e8:	0800e581 	.word	0x0800e581
 800e6ec:	0800e575 	.word	0x0800e575

0800e6f0 <uxr_close_custom_transport>:
 800e6f0:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800e6f4:	4718      	bx	r3
 800e6f6:	bf00      	nop

0800e6f8 <uxr_object_id>:
 800e6f8:	b082      	sub	sp, #8
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	f88d 1006 	strb.w	r1, [sp, #6]
 800e700:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e704:	f360 030f 	bfi	r3, r0, #0, #16
 800e708:	f362 431f 	bfi	r3, r2, #16, #16
 800e70c:	4618      	mov	r0, r3
 800e70e:	b002      	add	sp, #8
 800e710:	4770      	bx	lr
 800e712:	bf00      	nop

0800e714 <uxr_object_id_from_raw>:
 800e714:	7843      	ldrb	r3, [r0, #1]
 800e716:	7801      	ldrb	r1, [r0, #0]
 800e718:	b082      	sub	sp, #8
 800e71a:	f003 020f 	and.w	r2, r3, #15
 800e71e:	f88d 2006 	strb.w	r2, [sp, #6]
 800e722:	091b      	lsrs	r3, r3, #4
 800e724:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e728:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800e72c:	2000      	movs	r0, #0
 800e72e:	f363 000f 	bfi	r0, r3, #0, #16
 800e732:	f362 401f 	bfi	r0, r2, #16, #16
 800e736:	b002      	add	sp, #8
 800e738:	4770      	bx	lr
 800e73a:	bf00      	nop

0800e73c <uxr_object_id_to_raw>:
 800e73c:	4602      	mov	r2, r0
 800e73e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800e742:	b082      	sub	sp, #8
 800e744:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800e748:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800e74c:	f881 c000 	strb.w	ip, [r1]
 800e750:	7048      	strb	r0, [r1, #1]
 800e752:	b002      	add	sp, #8
 800e754:	4770      	bx	lr
 800e756:	bf00      	nop

0800e758 <uxr_buffer_cancel_data>:
 800e758:	b510      	push	{r4, lr}
 800e75a:	b094      	sub	sp, #80	@ 0x50
 800e75c:	2300      	movs	r3, #0
 800e75e:	9202      	str	r2, [sp, #8]
 800e760:	9205      	str	r2, [sp, #20]
 800e762:	9301      	str	r3, [sp, #4]
 800e764:	2201      	movs	r2, #1
 800e766:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e76a:	f88d 301e 	strb.w	r3, [sp, #30]
 800e76e:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800e772:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800e776:	2308      	movs	r3, #8
 800e778:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800e77c:	9300      	str	r3, [sp, #0]
 800e77e:	2210      	movs	r2, #16
 800e780:	ab0c      	add	r3, sp, #48	@ 0x30
 800e782:	4604      	mov	r4, r0
 800e784:	9103      	str	r1, [sp, #12]
 800e786:	f001 f85d 	bl	800f844 <uxr_prepare_stream_to_write_submessage>
 800e78a:	b918      	cbnz	r0, 800e794 <uxr_buffer_cancel_data+0x3c>
 800e78c:	4604      	mov	r4, r0
 800e78e:	4620      	mov	r0, r4
 800e790:	b014      	add	sp, #80	@ 0x50
 800e792:	bd10      	pop	{r4, pc}
 800e794:	9905      	ldr	r1, [sp, #20]
 800e796:	aa06      	add	r2, sp, #24
 800e798:	4620      	mov	r0, r4
 800e79a:	f001 f989 	bl	800fab0 <uxr_init_base_object_request>
 800e79e:	a906      	add	r1, sp, #24
 800e7a0:	4604      	mov	r4, r0
 800e7a2:	a80c      	add	r0, sp, #48	@ 0x30
 800e7a4:	f003 f82a 	bl	80117fc <uxr_serialize_READ_DATA_Payload>
 800e7a8:	4620      	mov	r0, r4
 800e7aa:	b014      	add	sp, #80	@ 0x50
 800e7ac:	bd10      	pop	{r4, pc}
 800e7ae:	bf00      	nop

0800e7b0 <read_submessage_format>:
 800e7b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e7b4:	b095      	sub	sp, #84	@ 0x54
 800e7b6:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800e7ba:	b113      	cbz	r3, 800e7c2 <read_submessage_format+0x12>
 800e7bc:	b015      	add	sp, #84	@ 0x54
 800e7be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7c2:	460c      	mov	r4, r1
 800e7c4:	4615      	mov	r5, r2
 800e7c6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800e7ca:	4607      	mov	r7, r0
 800e7cc:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800e7ce:	9004      	str	r0, [sp, #16]
 800e7d0:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800e7d2:	9005      	str	r0, [sp, #20]
 800e7d4:	1a52      	subs	r2, r2, r1
 800e7d6:	a80c      	add	r0, sp, #48	@ 0x30
 800e7d8:	4699      	mov	r9, r3
 800e7da:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800e7de:	f7fd f95d 	bl	800ba9c <ucdr_init_buffer>
 800e7e2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e7e6:	a80c      	add	r0, sp, #48	@ 0x30
 800e7e8:	f7fd f92c 	bl	800ba44 <ucdr_set_on_full_buffer_callback>
 800e7ec:	69e2      	ldr	r2, [r4, #28]
 800e7ee:	b19a      	cbz	r2, 800e818 <read_submessage_format+0x68>
 800e7f0:	f1b8 0f07 	cmp.w	r8, #7
 800e7f4:	f882 9014 	strb.w	r9, [r2, #20]
 800e7f8:	d040      	beq.n	800e87c <read_submessage_format+0xcc>
 800e7fa:	f1b8 0f08 	cmp.w	r8, #8
 800e7fe:	d02e      	beq.n	800e85e <read_submessage_format+0xae>
 800e800:	f1b8 0f06 	cmp.w	r8, #6
 800e804:	d011      	beq.n	800e82a <read_submessage_format+0x7a>
 800e806:	2301      	movs	r3, #1
 800e808:	7513      	strb	r3, [r2, #20]
 800e80a:	4629      	mov	r1, r5
 800e80c:	4620      	mov	r0, r4
 800e80e:	f7fd f995 	bl	800bb3c <ucdr_advance_buffer>
 800e812:	b015      	add	sp, #84	@ 0x54
 800e814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e818:	f1b8 0f07 	cmp.w	r8, #7
 800e81c:	d02e      	beq.n	800e87c <read_submessage_format+0xcc>
 800e81e:	f1b8 0f08 	cmp.w	r8, #8
 800e822:	d01c      	beq.n	800e85e <read_submessage_format+0xae>
 800e824:	f1b8 0f06 	cmp.w	r8, #6
 800e828:	d1ef      	bne.n	800e80a <read_submessage_format+0x5a>
 800e82a:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800e82e:	f1b8 0f00 	cmp.w	r8, #0
 800e832:	d011      	beq.n	800e858 <read_submessage_format+0xa8>
 800e834:	ab0c      	add	r3, sp, #48	@ 0x30
 800e836:	e9cd 3500 	strd	r3, r5, [sp]
 800e83a:	2306      	movs	r3, #6
 800e83c:	f88d 3016 	strb.w	r3, [sp, #22]
 800e840:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e844:	9302      	str	r3, [sp, #8]
 800e846:	4632      	mov	r2, r6
 800e848:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800e84c:	4638      	mov	r0, r7
 800e84e:	47c0      	blx	r8
 800e850:	2301      	movs	r3, #1
 800e852:	69e2      	ldr	r2, [r4, #28]
 800e854:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800e858:	2a00      	cmp	r2, #0
 800e85a:	d1d4      	bne.n	800e806 <read_submessage_format+0x56>
 800e85c:	e7d5      	b.n	800e80a <read_submessage_format+0x5a>
 800e85e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e862:	2b00      	cmp	r3, #0
 800e864:	d0f8      	beq.n	800e858 <read_submessage_format+0xa8>
 800e866:	a906      	add	r1, sp, #24
 800e868:	a80c      	add	r0, sp, #48	@ 0x30
 800e86a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800e86e:	f003 f899 	bl	80119a4 <uxr_deserialize_SampleIdentity>
 800e872:	b9a0      	cbnz	r0, 800e89e <read_submessage_format+0xee>
 800e874:	69e2      	ldr	r2, [r4, #28]
 800e876:	2a00      	cmp	r2, #0
 800e878:	d1c5      	bne.n	800e806 <read_submessage_format+0x56>
 800e87a:	e7c6      	b.n	800e80a <read_submessage_format+0x5a>
 800e87c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e880:	b13b      	cbz	r3, 800e892 <read_submessage_format+0xe2>
 800e882:	a906      	add	r1, sp, #24
 800e884:	a80c      	add	r0, sp, #48	@ 0x30
 800e886:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800e88a:	f002 fd51 	bl	8011330 <uxr_deserialize_BaseObjectRequest>
 800e88e:	bb60      	cbnz	r0, 800e8ea <read_submessage_format+0x13a>
 800e890:	69e2      	ldr	r2, [r4, #28]
 800e892:	68a3      	ldr	r3, [r4, #8]
 800e894:	442b      	add	r3, r5
 800e896:	60a3      	str	r3, [r4, #8]
 800e898:	2a00      	cmp	r2, #0
 800e89a:	d1b4      	bne.n	800e806 <read_submessage_format+0x56>
 800e89c:	e7b5      	b.n	800e80a <read_submessage_format+0x5a>
 800e89e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800e8a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e8a4:	1a52      	subs	r2, r2, r1
 800e8a6:	eba8 0803 	sub.w	r8, r8, r3
 800e8aa:	a80c      	add	r0, sp, #48	@ 0x30
 800e8ac:	f7fd f8f6 	bl	800ba9c <ucdr_init_buffer>
 800e8b0:	44a8      	add	r8, r5
 800e8b2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e8b6:	a80c      	add	r0, sp, #48	@ 0x30
 800e8b8:	f7fd f8c4 	bl	800ba44 <ucdr_set_on_full_buffer_callback>
 800e8bc:	fa1f f888 	uxth.w	r8, r8
 800e8c0:	ab0c      	add	r3, sp, #48	@ 0x30
 800e8c2:	9300      	str	r3, [sp, #0]
 800e8c4:	f8cd 8004 	str.w	r8, [sp, #4]
 800e8c8:	2108      	movs	r1, #8
 800e8ca:	f88d 1016 	strb.w	r1, [sp, #22]
 800e8ce:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800e8d2:	9102      	str	r1, [sp, #8]
 800e8d4:	ab06      	add	r3, sp, #24
 800e8d6:	4632      	mov	r2, r6
 800e8d8:	9905      	ldr	r1, [sp, #20]
 800e8da:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800e8de:	4638      	mov	r0, r7
 800e8e0:	47b0      	blx	r6
 800e8e2:	2301      	movs	r3, #1
 800e8e4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800e8e8:	e7c4      	b.n	800e874 <read_submessage_format+0xc4>
 800e8ea:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800e8ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e8f0:	1a52      	subs	r2, r2, r1
 800e8f2:	a80c      	add	r0, sp, #48	@ 0x30
 800e8f4:	eba8 0803 	sub.w	r8, r8, r3
 800e8f8:	f7fd f8d0 	bl	800ba9c <ucdr_init_buffer>
 800e8fc:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e900:	a80c      	add	r0, sp, #48	@ 0x30
 800e902:	f7fd f89f 	bl	800ba44 <ucdr_set_on_full_buffer_callback>
 800e906:	ab0c      	add	r3, sp, #48	@ 0x30
 800e908:	9300      	str	r3, [sp, #0]
 800e90a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800e90e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e912:	44a8      	add	r8, r5
 800e914:	fa1f f888 	uxth.w	r8, r8
 800e918:	f8cd 8004 	str.w	r8, [sp, #4]
 800e91c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800e920:	2107      	movs	r1, #7
 800e922:	f88d 1016 	strb.w	r1, [sp, #22]
 800e926:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800e92a:	9102      	str	r1, [sp, #8]
 800e92c:	4632      	mov	r2, r6
 800e92e:	b29b      	uxth	r3, r3
 800e930:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800e934:	9905      	ldr	r1, [sp, #20]
 800e936:	4638      	mov	r0, r7
 800e938:	47b0      	blx	r6
 800e93a:	2301      	movs	r3, #1
 800e93c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800e940:	e7a6      	b.n	800e890 <read_submessage_format+0xe0>
 800e942:	bf00      	nop

0800e944 <on_get_fragmentation_info>:
 800e944:	b500      	push	{lr}
 800e946:	b08b      	sub	sp, #44	@ 0x2c
 800e948:	4601      	mov	r1, r0
 800e94a:	2204      	movs	r2, #4
 800e94c:	a802      	add	r0, sp, #8
 800e94e:	f7fd f8a5 	bl	800ba9c <ucdr_init_buffer>
 800e952:	f10d 0305 	add.w	r3, sp, #5
 800e956:	f10d 0206 	add.w	r2, sp, #6
 800e95a:	a901      	add	r1, sp, #4
 800e95c:	a802      	add	r0, sp, #8
 800e95e:	f001 febb 	bl	80106d8 <uxr_read_submessage_header>
 800e962:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e966:	2b0d      	cmp	r3, #13
 800e968:	d003      	beq.n	800e972 <on_get_fragmentation_info+0x2e>
 800e96a:	2000      	movs	r0, #0
 800e96c:	b00b      	add	sp, #44	@ 0x2c
 800e96e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e972:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e976:	f013 0f02 	tst.w	r3, #2
 800e97a:	bf14      	ite	ne
 800e97c:	2002      	movne	r0, #2
 800e97e:	2001      	moveq	r0, #1
 800e980:	b00b      	add	sp, #44	@ 0x2c
 800e982:	f85d fb04 	ldr.w	pc, [sp], #4
 800e986:	bf00      	nop

0800e988 <read_submessage_get_info>:
 800e988:	b570      	push	{r4, r5, r6, lr}
 800e98a:	2500      	movs	r5, #0
 800e98c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800e990:	4604      	mov	r4, r0
 800e992:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800e996:	460e      	mov	r6, r1
 800e998:	a810      	add	r0, sp, #64	@ 0x40
 800e99a:	4629      	mov	r1, r5
 800e99c:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800e9a0:	f008 feb4 	bl	801770c <memset>
 800e9a4:	a903      	add	r1, sp, #12
 800e9a6:	4630      	mov	r0, r6
 800e9a8:	f002 fe6a 	bl	8011680 <uxr_deserialize_GET_INFO_Payload>
 800e9ac:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800e9b0:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e9b4:	4620      	mov	r0, r4
 800e9b6:	f001 f873 	bl	800faa0 <uxr_session_header_offset>
 800e9ba:	462b      	mov	r3, r5
 800e9bc:	9000      	str	r0, [sp, #0]
 800e9be:	220c      	movs	r2, #12
 800e9c0:	a905      	add	r1, sp, #20
 800e9c2:	a808      	add	r0, sp, #32
 800e9c4:	f7fd f858 	bl	800ba78 <ucdr_init_buffer_origin_offset>
 800e9c8:	a910      	add	r1, sp, #64	@ 0x40
 800e9ca:	a808      	add	r0, sp, #32
 800e9cc:	f002 feca 	bl	8011764 <uxr_serialize_INFO_Payload>
 800e9d0:	9b08      	ldr	r3, [sp, #32]
 800e9d2:	462a      	mov	r2, r5
 800e9d4:	4629      	mov	r1, r5
 800e9d6:	4620      	mov	r0, r4
 800e9d8:	f001 f80c 	bl	800f9f4 <uxr_stamp_session_header>
 800e9dc:	a808      	add	r0, sp, #32
 800e9de:	f7fd f889 	bl	800baf4 <ucdr_buffer_length>
 800e9e2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e9e4:	4602      	mov	r2, r0
 800e9e6:	a905      	add	r1, sp, #20
 800e9e8:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e9ec:	47a0      	blx	r4
 800e9ee:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800e9f2:	bd70      	pop	{r4, r5, r6, pc}

0800e9f4 <write_submessage_acknack.isra.0>:
 800e9f4:	b570      	push	{r4, r5, r6, lr}
 800e9f6:	b092      	sub	sp, #72	@ 0x48
 800e9f8:	4605      	mov	r5, r0
 800e9fa:	460e      	mov	r6, r1
 800e9fc:	4614      	mov	r4, r2
 800e9fe:	f001 f84f 	bl	800faa0 <uxr_session_header_offset>
 800ea02:	a905      	add	r1, sp, #20
 800ea04:	9000      	str	r0, [sp, #0]
 800ea06:	2300      	movs	r3, #0
 800ea08:	a80a      	add	r0, sp, #40	@ 0x28
 800ea0a:	2211      	movs	r2, #17
 800ea0c:	f7fd f834 	bl	800ba78 <ucdr_init_buffer_origin_offset>
 800ea10:	2218      	movs	r2, #24
 800ea12:	fb02 5404 	mla	r4, r2, r4, r5
 800ea16:	2300      	movs	r3, #0
 800ea18:	2205      	movs	r2, #5
 800ea1a:	3450      	adds	r4, #80	@ 0x50
 800ea1c:	210a      	movs	r1, #10
 800ea1e:	a80a      	add	r0, sp, #40	@ 0x28
 800ea20:	f001 fe40 	bl	80106a4 <uxr_buffer_submessage_header>
 800ea24:	a903      	add	r1, sp, #12
 800ea26:	4620      	mov	r0, r4
 800ea28:	f007 fb10 	bl	801604c <uxr_compute_acknack>
 800ea2c:	ba40      	rev16	r0, r0
 800ea2e:	f8ad 000e 	strh.w	r0, [sp, #14]
 800ea32:	a903      	add	r1, sp, #12
 800ea34:	a80a      	add	r0, sp, #40	@ 0x28
 800ea36:	f88d 6010 	strb.w	r6, [sp, #16]
 800ea3a:	f002 ff03 	bl	8011844 <uxr_serialize_ACKNACK_Payload>
 800ea3e:	2200      	movs	r2, #0
 800ea40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea42:	4611      	mov	r1, r2
 800ea44:	4628      	mov	r0, r5
 800ea46:	f000 ffd5 	bl	800f9f4 <uxr_stamp_session_header>
 800ea4a:	a80a      	add	r0, sp, #40	@ 0x28
 800ea4c:	f7fd f852 	bl	800baf4 <ucdr_buffer_length>
 800ea50:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800ea52:	4602      	mov	r2, r0
 800ea54:	a905      	add	r1, sp, #20
 800ea56:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ea5a:	47a0      	blx	r4
 800ea5c:	b012      	add	sp, #72	@ 0x48
 800ea5e:	bd70      	pop	{r4, r5, r6, pc}

0800ea60 <uxr_init_session>:
 800ea60:	b510      	push	{r4, lr}
 800ea62:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800ea98 <uxr_init_session+0x38>
 800ea66:	2300      	movs	r3, #0
 800ea68:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800ea6c:	4604      	mov	r4, r0
 800ea6e:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800ea72:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800ea76:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800ea7a:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800ea7e:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800ea82:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800ea86:	2181      	movs	r1, #129	@ 0x81
 800ea88:	f000 ff20 	bl	800f8cc <uxr_init_session_info>
 800ea8c:	f104 0008 	add.w	r0, r4, #8
 800ea90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea94:	f001 bd22 	b.w	80104dc <uxr_init_stream_storage>
	...

0800eaa0 <uxr_set_status_callback>:
 800eaa0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800eaa4:	4770      	bx	lr
 800eaa6:	bf00      	nop

0800eaa8 <uxr_set_topic_callback>:
 800eaa8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800eaac:	4770      	bx	lr
 800eaae:	bf00      	nop

0800eab0 <uxr_set_request_callback>:
 800eab0:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800eab4:	4770      	bx	lr
 800eab6:	bf00      	nop

0800eab8 <uxr_set_reply_callback>:
 800eab8:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800eabc:	4770      	bx	lr
 800eabe:	bf00      	nop

0800eac0 <uxr_create_output_best_effort_stream>:
 800eac0:	b510      	push	{r4, lr}
 800eac2:	b084      	sub	sp, #16
 800eac4:	e9cd 2100 	strd	r2, r1, [sp]
 800eac8:	4604      	mov	r4, r0
 800eaca:	f000 ffe9 	bl	800faa0 <uxr_session_header_offset>
 800eace:	e9dd 2100 	ldrd	r2, r1, [sp]
 800ead2:	4603      	mov	r3, r0
 800ead4:	f104 0008 	add.w	r0, r4, #8
 800ead8:	b004      	add	sp, #16
 800eada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eade:	f001 bd47 	b.w	8010570 <uxr_add_output_best_effort_buffer>
 800eae2:	bf00      	nop

0800eae4 <uxr_create_output_reliable_stream>:
 800eae4:	b510      	push	{r4, lr}
 800eae6:	b088      	sub	sp, #32
 800eae8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800eaec:	4604      	mov	r4, r0
 800eaee:	9303      	str	r3, [sp, #12]
 800eaf0:	f000 ffd6 	bl	800faa0 <uxr_session_header_offset>
 800eaf4:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800eaf8:	9000      	str	r0, [sp, #0]
 800eafa:	9905      	ldr	r1, [sp, #20]
 800eafc:	f104 0008 	add.w	r0, r4, #8
 800eb00:	f001 fd4a 	bl	8010598 <uxr_add_output_reliable_buffer>
 800eb04:	2200      	movs	r2, #0
 800eb06:	b2c3      	uxtb	r3, r0
 800eb08:	f363 0207 	bfi	r2, r3, #0, #8
 800eb0c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800eb10:	f363 220f 	bfi	r2, r3, #8, #8
 800eb14:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800eb18:	f363 4217 	bfi	r2, r3, #16, #8
 800eb1c:	0e03      	lsrs	r3, r0, #24
 800eb1e:	f363 621f 	bfi	r2, r3, #24, #8
 800eb22:	4610      	mov	r0, r2
 800eb24:	b008      	add	sp, #32
 800eb26:	bd10      	pop	{r4, pc}

0800eb28 <uxr_create_input_best_effort_stream>:
 800eb28:	b082      	sub	sp, #8
 800eb2a:	3008      	adds	r0, #8
 800eb2c:	b002      	add	sp, #8
 800eb2e:	f001 bd4d 	b.w	80105cc <uxr_add_input_best_effort_buffer>
 800eb32:	bf00      	nop

0800eb34 <uxr_create_input_reliable_stream>:
 800eb34:	b510      	push	{r4, lr}
 800eb36:	b084      	sub	sp, #16
 800eb38:	4c0b      	ldr	r4, [pc, #44]	@ (800eb68 <uxr_create_input_reliable_stream+0x34>)
 800eb3a:	9400      	str	r4, [sp, #0]
 800eb3c:	3008      	adds	r0, #8
 800eb3e:	f001 fd5b 	bl	80105f8 <uxr_add_input_reliable_buffer>
 800eb42:	2200      	movs	r2, #0
 800eb44:	b2c3      	uxtb	r3, r0
 800eb46:	f363 0207 	bfi	r2, r3, #0, #8
 800eb4a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800eb4e:	f363 220f 	bfi	r2, r3, #8, #8
 800eb52:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800eb56:	f363 4217 	bfi	r2, r3, #16, #8
 800eb5a:	0e03      	lsrs	r3, r0, #24
 800eb5c:	f363 621f 	bfi	r2, r3, #24, #8
 800eb60:	4610      	mov	r0, r2
 800eb62:	b004      	add	sp, #16
 800eb64:	bd10      	pop	{r4, pc}
 800eb66:	bf00      	nop
 800eb68:	0800e945 	.word	0x0800e945

0800eb6c <uxr_epoch_nanos>:
 800eb6c:	b510      	push	{r4, lr}
 800eb6e:	4604      	mov	r4, r0
 800eb70:	f001 fdf8 	bl	8010764 <uxr_nanos>
 800eb74:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800eb78:	1ac0      	subs	r0, r0, r3
 800eb7a:	eb61 0102 	sbc.w	r1, r1, r2
 800eb7e:	bd10      	pop	{r4, pc}

0800eb80 <uxr_flash_output_streams>:
 800eb80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb84:	7e03      	ldrb	r3, [r0, #24]
 800eb86:	b084      	sub	sp, #16
 800eb88:	4604      	mov	r4, r0
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d035      	beq.n	800ebfa <uxr_flash_output_streams+0x7a>
 800eb8e:	f04f 0900 	mov.w	r9, #0
 800eb92:	4648      	mov	r0, r9
 800eb94:	f10d 0802 	add.w	r8, sp, #2
 800eb98:	af03      	add	r7, sp, #12
 800eb9a:	ae02      	add	r6, sp, #8
 800eb9c:	e006      	b.n	800ebac <uxr_flash_output_streams+0x2c>
 800eb9e:	7e23      	ldrb	r3, [r4, #24]
 800eba0:	f109 0901 	add.w	r9, r9, #1
 800eba4:	fa5f f089 	uxtb.w	r0, r9
 800eba8:	4283      	cmp	r3, r0
 800ebaa:	d926      	bls.n	800ebfa <uxr_flash_output_streams+0x7a>
 800ebac:	2201      	movs	r2, #1
 800ebae:	4611      	mov	r1, r2
 800ebb0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800ebb4:	f001 fc3e 	bl	8010434 <uxr_stream_id>
 800ebb8:	3508      	adds	r5, #8
 800ebba:	4684      	mov	ip, r0
 800ebbc:	4643      	mov	r3, r8
 800ebbe:	463a      	mov	r2, r7
 800ebc0:	4631      	mov	r1, r6
 800ebc2:	4628      	mov	r0, r5
 800ebc4:	f8cd c004 	str.w	ip, [sp, #4]
 800ebc8:	f007 fac6 	bl	8016158 <uxr_prepare_best_effort_buffer_to_send>
 800ebcc:	2800      	cmp	r0, #0
 800ebce:	d0e6      	beq.n	800eb9e <uxr_flash_output_streams+0x1e>
 800ebd0:	9b02      	ldr	r3, [sp, #8]
 800ebd2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ebd6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ebda:	4620      	mov	r0, r4
 800ebdc:	f000 ff0a 	bl	800f9f4 <uxr_stamp_session_header>
 800ebe0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ebe2:	9a03      	ldr	r2, [sp, #12]
 800ebe4:	685d      	ldr	r5, [r3, #4]
 800ebe6:	6818      	ldr	r0, [r3, #0]
 800ebe8:	9902      	ldr	r1, [sp, #8]
 800ebea:	47a8      	blx	r5
 800ebec:	f109 0901 	add.w	r9, r9, #1
 800ebf0:	7e23      	ldrb	r3, [r4, #24]
 800ebf2:	fa5f f089 	uxtb.w	r0, r9
 800ebf6:	4283      	cmp	r3, r0
 800ebf8:	d8d8      	bhi.n	800ebac <uxr_flash_output_streams+0x2c>
 800ebfa:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ebfe:	b38b      	cbz	r3, 800ec64 <uxr_flash_output_streams+0xe4>
 800ec00:	f04f 0900 	mov.w	r9, #0
 800ec04:	f10d 0802 	add.w	r8, sp, #2
 800ec08:	af03      	add	r7, sp, #12
 800ec0a:	ae02      	add	r6, sp, #8
 800ec0c:	4648      	mov	r0, r9
 800ec0e:	2201      	movs	r2, #1
 800ec10:	2102      	movs	r1, #2
 800ec12:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800ec16:	f001 fc0d 	bl	8010434 <uxr_stream_id>
 800ec1a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800ec1e:	3520      	adds	r5, #32
 800ec20:	9001      	str	r0, [sp, #4]
 800ec22:	e00d      	b.n	800ec40 <uxr_flash_output_streams+0xc0>
 800ec24:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ec28:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ec2c:	9b02      	ldr	r3, [sp, #8]
 800ec2e:	f000 fee1 	bl	800f9f4 <uxr_stamp_session_header>
 800ec32:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ec34:	9a03      	ldr	r2, [sp, #12]
 800ec36:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800ec3a:	9902      	ldr	r1, [sp, #8]
 800ec3c:	6818      	ldr	r0, [r3, #0]
 800ec3e:	47d0      	blx	sl
 800ec40:	4643      	mov	r3, r8
 800ec42:	463a      	mov	r2, r7
 800ec44:	4631      	mov	r1, r6
 800ec46:	4628      	mov	r0, r5
 800ec48:	f007 fca4 	bl	8016594 <uxr_prepare_next_reliable_buffer_to_send>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	4620      	mov	r0, r4
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d1e7      	bne.n	800ec24 <uxr_flash_output_streams+0xa4>
 800ec54:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ec58:	f109 0901 	add.w	r9, r9, #1
 800ec5c:	fa5f f089 	uxtb.w	r0, r9
 800ec60:	4283      	cmp	r3, r0
 800ec62:	d8d4      	bhi.n	800ec0e <uxr_flash_output_streams+0x8e>
 800ec64:	b004      	add	sp, #16
 800ec66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec6a:	bf00      	nop

0800ec6c <read_submessage_info>:
 800ec6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec70:	460d      	mov	r5, r1
 800ec72:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800ec76:	4669      	mov	r1, sp
 800ec78:	4607      	mov	r7, r0
 800ec7a:	4628      	mov	r0, r5
 800ec7c:	f002 fc0e 	bl	801149c <uxr_deserialize_BaseObjectReply>
 800ec80:	a902      	add	r1, sp, #8
 800ec82:	4604      	mov	r4, r0
 800ec84:	4628      	mov	r0, r5
 800ec86:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800ec8a:	f7fb fdad 	bl	800a7e8 <ucdr_deserialize_bool>
 800ec8e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800ec92:	4004      	ands	r4, r0
 800ec94:	b2e4      	uxtb	r4, r4
 800ec96:	b95b      	cbnz	r3, 800ecb0 <read_submessage_info+0x44>
 800ec98:	a987      	add	r1, sp, #540	@ 0x21c
 800ec9a:	4628      	mov	r0, r5
 800ec9c:	f7fb fda4 	bl	800a7e8 <ucdr_deserialize_bool>
 800eca0:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800eca4:	4606      	mov	r6, r0
 800eca6:	b94b      	cbnz	r3, 800ecbc <read_submessage_info+0x50>
 800eca8:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800ecac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecb0:	a903      	add	r1, sp, #12
 800ecb2:	4628      	mov	r0, r5
 800ecb4:	f002 fa9a 	bl	80111ec <uxr_deserialize_ObjectVariant>
 800ecb8:	4004      	ands	r4, r0
 800ecba:	e7ed      	b.n	800ec98 <read_submessage_info+0x2c>
 800ecbc:	a988      	add	r1, sp, #544	@ 0x220
 800ecbe:	4628      	mov	r0, r5
 800ecc0:	f7fb fdc0 	bl	800a844 <ucdr_deserialize_uint8_t>
 800ecc4:	4234      	tst	r4, r6
 800ecc6:	d0ef      	beq.n	800eca8 <read_submessage_info+0x3c>
 800ecc8:	2800      	cmp	r0, #0
 800ecca:	d0ed      	beq.n	800eca8 <read_submessage_info+0x3c>
 800eccc:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800ecd0:	2b0d      	cmp	r3, #13
 800ecd2:	d1e9      	bne.n	800eca8 <read_submessage_info+0x3c>
 800ecd4:	a98a      	add	r1, sp, #552	@ 0x228
 800ecd6:	4628      	mov	r0, r5
 800ecd8:	f7fc fb5a 	bl	800b390 <ucdr_deserialize_int16_t>
 800ecdc:	b140      	cbz	r0, 800ecf0 <read_submessage_info+0x84>
 800ecde:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	dd07      	ble.n	800ecf6 <read_submessage_info+0x8a>
 800ece6:	f1b8 0f00 	cmp.w	r8, #0
 800ecea:	bf14      	ite	ne
 800ecec:	2001      	movne	r0, #1
 800ecee:	2002      	moveq	r0, #2
 800ecf0:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800ecf4:	e7d8      	b.n	800eca8 <read_submessage_info+0x3c>
 800ecf6:	2000      	movs	r0, #0
 800ecf8:	e7fa      	b.n	800ecf0 <read_submessage_info+0x84>
 800ecfa:	bf00      	nop

0800ecfc <read_submessage_list>:
 800ecfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed00:	b097      	sub	sp, #92	@ 0x5c
 800ed02:	4ec1      	ldr	r6, [pc, #772]	@ (800f008 <read_submessage_list+0x30c>)
 800ed04:	9209      	str	r2, [sp, #36]	@ 0x24
 800ed06:	4604      	mov	r4, r0
 800ed08:	460d      	mov	r5, r1
 800ed0a:	f04f 0801 	mov.w	r8, #1
 800ed0e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800ed12:	aa0c      	add	r2, sp, #48	@ 0x30
 800ed14:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800ed18:	4628      	mov	r0, r5
 800ed1a:	f001 fcdd 	bl	80106d8 <uxr_read_submessage_header>
 800ed1e:	2800      	cmp	r0, #0
 800ed20:	f000 813e 	beq.w	800efa0 <read_submessage_list+0x2a4>
 800ed24:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800ed28:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800ed2c:	3b02      	subs	r3, #2
 800ed2e:	2b0d      	cmp	r3, #13
 800ed30:	d8ed      	bhi.n	800ed0e <read_submessage_list+0x12>
 800ed32:	a101      	add	r1, pc, #4	@ (adr r1, 800ed38 <read_submessage_list+0x3c>)
 800ed34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ed38:	0800ef97 	.word	0x0800ef97
 800ed3c:	0800ed0f 	.word	0x0800ed0f
 800ed40:	0800ef87 	.word	0x0800ef87
 800ed44:	0800ef25 	.word	0x0800ef25
 800ed48:	0800ef1b 	.word	0x0800ef1b
 800ed4c:	0800ed0f 	.word	0x0800ed0f
 800ed50:	0800ed0f 	.word	0x0800ed0f
 800ed54:	0800ee7b 	.word	0x0800ee7b
 800ed58:	0800ee0b 	.word	0x0800ee0b
 800ed5c:	0800edcb 	.word	0x0800edcb
 800ed60:	0800ed0f 	.word	0x0800ed0f
 800ed64:	0800ed0f 	.word	0x0800ed0f
 800ed68:	0800ed0f 	.word	0x0800ed0f
 800ed6c:	0800ed71 	.word	0x0800ed71
 800ed70:	a910      	add	r1, sp, #64	@ 0x40
 800ed72:	4628      	mov	r0, r5
 800ed74:	f002 fdc4 	bl	8011900 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800ed78:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800ed7c:	f1b9 0f00 	cmp.w	r9, #0
 800ed80:	f000 8116 	beq.w	800efb0 <read_submessage_list+0x2b4>
 800ed84:	f001 fcee 	bl	8010764 <uxr_nanos>
 800ed88:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800ed8a:	4602      	mov	r2, r0
 800ed8c:	460b      	mov	r3, r1
 800ed8e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800ed90:	2100      	movs	r1, #0
 800ed92:	468c      	mov	ip, r1
 800ed94:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800ed98:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800ed9c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ed9e:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800eda0:	468c      	mov	ip, r1
 800eda2:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800eda6:	46e2      	mov	sl, ip
 800eda8:	46bc      	mov	ip, r7
 800edaa:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800edae:	fbc0 7106 	smlal	r7, r1, r0, r6
 800edb2:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800edb6:	e9cd 7100 	strd	r7, r1, [sp]
 800edba:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800edbe:	9106      	str	r1, [sp, #24]
 800edc0:	4620      	mov	r0, r4
 800edc2:	47c8      	blx	r9
 800edc4:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800edc8:	e7a1      	b.n	800ed0e <read_submessage_list+0x12>
 800edca:	a910      	add	r1, sp, #64	@ 0x40
 800edcc:	4628      	mov	r0, r5
 800edce:	f002 fd77 	bl	80118c0 <uxr_deserialize_HEARTBEAT_Payload>
 800edd2:	2100      	movs	r1, #0
 800edd4:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800edd8:	f001 fb56 	bl	8010488 <uxr_stream_id_from_raw>
 800eddc:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800ede0:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ede2:	4639      	mov	r1, r7
 800ede4:	f104 0008 	add.w	r0, r4, #8
 800ede8:	f001 fc3c 	bl	8010664 <uxr_get_input_reliable_stream>
 800edec:	2800      	cmp	r0, #0
 800edee:	d08e      	beq.n	800ed0e <read_submessage_list+0x12>
 800edf0:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800edf4:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800edf8:	f007 f91c 	bl	8016034 <uxr_process_heartbeat>
 800edfc:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800ee00:	463a      	mov	r2, r7
 800ee02:	4620      	mov	r0, r4
 800ee04:	f7ff fdf6 	bl	800e9f4 <write_submessage_acknack.isra.0>
 800ee08:	e781      	b.n	800ed0e <read_submessage_list+0x12>
 800ee0a:	a910      	add	r1, sp, #64	@ 0x40
 800ee0c:	4628      	mov	r0, r5
 800ee0e:	f002 fd2f 	bl	8011870 <uxr_deserialize_ACKNACK_Payload>
 800ee12:	2100      	movs	r1, #0
 800ee14:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800ee18:	f001 fb36 	bl	8010488 <uxr_stream_id_from_raw>
 800ee1c:	900d      	str	r0, [sp, #52]	@ 0x34
 800ee1e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800ee22:	f104 0008 	add.w	r0, r4, #8
 800ee26:	f001 fc09 	bl	801063c <uxr_get_output_reliable_stream>
 800ee2a:	4607      	mov	r7, r0
 800ee2c:	2800      	cmp	r0, #0
 800ee2e:	f43f af6e 	beq.w	800ed0e <read_submessage_list+0x12>
 800ee32:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800ee36:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800ee3a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800ee3e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800ee42:	b289      	uxth	r1, r1
 800ee44:	f007 fc50 	bl	80166e8 <uxr_process_acknack>
 800ee48:	4638      	mov	r0, r7
 800ee4a:	f007 fc0d 	bl	8016668 <uxr_begin_output_nack_buffer_it>
 800ee4e:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800ee52:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800ee56:	e006      	b.n	800ee66 <read_submessage_list+0x16a>
 800ee58:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ee5a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ee5c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800ee60:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ee62:	6818      	ldr	r0, [r3, #0]
 800ee64:	47c8      	blx	r9
 800ee66:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800ee6a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800ee6c:	4651      	mov	r1, sl
 800ee6e:	4638      	mov	r0, r7
 800ee70:	f007 fbfc 	bl	801666c <uxr_next_reliable_nack_buffer_to_send>
 800ee74:	2800      	cmp	r0, #0
 800ee76:	d1ef      	bne.n	800ee58 <read_submessage_list+0x15c>
 800ee78:	e749      	b.n	800ed0e <read_submessage_list+0x12>
 800ee7a:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800ee7e:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800ee82:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800ee86:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800ee8a:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800ee8e:	4651      	mov	r1, sl
 800ee90:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800ee94:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800ee98:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800ee9c:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800eea0:	4628      	mov	r0, r5
 800eea2:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800eea6:	f002 fa43 	bl	8011330 <uxr_deserialize_BaseObjectRequest>
 800eeaa:	4650      	mov	r0, sl
 800eeac:	a90f      	add	r1, sp, #60	@ 0x3c
 800eeae:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800eeb2:	f000 fe1b 	bl	800faec <uxr_parse_base_object_request>
 800eeb6:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800eeba:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800eebc:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800eec0:	9110      	str	r1, [sp, #64]	@ 0x40
 800eec2:	3f04      	subs	r7, #4
 800eec4:	f009 090e 	and.w	r9, r9, #14
 800eec8:	b2bf      	uxth	r7, r7
 800eeca:	f1bb 0f00 	cmp.w	fp, #0
 800eece:	d006      	beq.n	800eede <read_submessage_list+0x1e2>
 800eed0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800eed4:	9300      	str	r3, [sp, #0]
 800eed6:	4652      	mov	r2, sl
 800eed8:	2300      	movs	r3, #0
 800eeda:	4620      	mov	r0, r4
 800eedc:	47d8      	blx	fp
 800eede:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800eee0:	b16a      	cbz	r2, 800eefe <read_submessage_list+0x202>
 800eee2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800eee4:	2100      	movs	r1, #0
 800eee6:	3802      	subs	r0, #2
 800eee8:	e002      	b.n	800eef0 <read_submessage_list+0x1f4>
 800eeea:	3101      	adds	r1, #1
 800eeec:	4291      	cmp	r1, r2
 800eeee:	d006      	beq.n	800eefe <read_submessage_list+0x202>
 800eef0:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800eef4:	4553      	cmp	r3, sl
 800eef6:	d1f8      	bne.n	800eeea <read_submessage_list+0x1ee>
 800eef8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800eefa:	2200      	movs	r2, #0
 800eefc:	545a      	strb	r2, [r3, r1]
 800eefe:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800ef02:	9102      	str	r1, [sp, #8]
 800ef04:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ef06:	9101      	str	r1, [sp, #4]
 800ef08:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800ef0a:	9100      	str	r1, [sp, #0]
 800ef0c:	464b      	mov	r3, r9
 800ef0e:	463a      	mov	r2, r7
 800ef10:	4629      	mov	r1, r5
 800ef12:	4620      	mov	r0, r4
 800ef14:	f7ff fc4c 	bl	800e7b0 <read_submessage_format>
 800ef18:	e6f9      	b.n	800ed0e <read_submessage_list+0x12>
 800ef1a:	4629      	mov	r1, r5
 800ef1c:	4620      	mov	r0, r4
 800ef1e:	f7ff fea5 	bl	800ec6c <read_submessage_info>
 800ef22:	e6f4      	b.n	800ed0e <read_submessage_list+0x12>
 800ef24:	2a00      	cmp	r2, #0
 800ef26:	d03e      	beq.n	800efa6 <read_submessage_list+0x2aa>
 800ef28:	a910      	add	r1, sp, #64	@ 0x40
 800ef2a:	4628      	mov	r0, r5
 800ef2c:	f002 fbfc 	bl	8011728 <uxr_deserialize_STATUS_Payload>
 800ef30:	a90e      	add	r1, sp, #56	@ 0x38
 800ef32:	aa0d      	add	r2, sp, #52	@ 0x34
 800ef34:	a810      	add	r0, sp, #64	@ 0x40
 800ef36:	f000 fdd9 	bl	800faec <uxr_parse_base_object_request>
 800ef3a:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800ef3e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ef40:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800ef44:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800ef48:	910f      	str	r1, [sp, #60]	@ 0x3c
 800ef4a:	f1ba 0f00 	cmp.w	sl, #0
 800ef4e:	d006      	beq.n	800ef5e <read_submessage_list+0x262>
 800ef50:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800ef54:	9300      	str	r3, [sp, #0]
 800ef56:	463a      	mov	r2, r7
 800ef58:	464b      	mov	r3, r9
 800ef5a:	4620      	mov	r0, r4
 800ef5c:	47d0      	blx	sl
 800ef5e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800ef60:	2a00      	cmp	r2, #0
 800ef62:	f43f aed4 	beq.w	800ed0e <read_submessage_list+0x12>
 800ef66:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800ef68:	2100      	movs	r1, #0
 800ef6a:	3802      	subs	r0, #2
 800ef6c:	e003      	b.n	800ef76 <read_submessage_list+0x27a>
 800ef6e:	3101      	adds	r1, #1
 800ef70:	4291      	cmp	r1, r2
 800ef72:	f43f aecc 	beq.w	800ed0e <read_submessage_list+0x12>
 800ef76:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800ef7a:	42bb      	cmp	r3, r7
 800ef7c:	d1f7      	bne.n	800ef6e <read_submessage_list+0x272>
 800ef7e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800ef80:	f803 9001 	strb.w	r9, [r3, r1]
 800ef84:	e6c3      	b.n	800ed0e <read_submessage_list+0x12>
 800ef86:	2a00      	cmp	r2, #0
 800ef88:	f47f aec1 	bne.w	800ed0e <read_submessage_list+0x12>
 800ef8c:	4629      	mov	r1, r5
 800ef8e:	4620      	mov	r0, r4
 800ef90:	f000 fcf2 	bl	800f978 <uxr_read_create_session_status>
 800ef94:	e6bb      	b.n	800ed0e <read_submessage_list+0x12>
 800ef96:	4629      	mov	r1, r5
 800ef98:	4620      	mov	r0, r4
 800ef9a:	f7ff fcf5 	bl	800e988 <read_submessage_get_info>
 800ef9e:	e6b6      	b.n	800ed0e <read_submessage_list+0x12>
 800efa0:	b017      	add	sp, #92	@ 0x5c
 800efa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efa6:	4629      	mov	r1, r5
 800efa8:	4620      	mov	r0, r4
 800efaa:	f000 fcf1 	bl	800f990 <uxr_read_delete_session_status>
 800efae:	e6ae      	b.n	800ed0e <read_submessage_list+0x12>
 800efb0:	f001 fbd8 	bl	8010764 <uxr_nanos>
 800efb4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800efb6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800efb8:	464f      	mov	r7, r9
 800efba:	fbc3 2706 	smlal	r2, r7, r3, r6
 800efbe:	1812      	adds	r2, r2, r0
 800efc0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800efc2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800efc4:	eb47 0101 	adc.w	r1, r7, r1
 800efc8:	464f      	mov	r7, r9
 800efca:	fbc3 0706 	smlal	r0, r7, r3, r6
 800efce:	463b      	mov	r3, r7
 800efd0:	4684      	mov	ip, r0
 800efd2:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800efd6:	fbc7 0906 	smlal	r0, r9, r7, r6
 800efda:	eb1c 0c00 	adds.w	ip, ip, r0
 800efde:	464f      	mov	r7, r9
 800efe0:	eb43 0307 	adc.w	r3, r3, r7
 800efe4:	ebb2 0c0c 	subs.w	ip, r2, ip
 800efe8:	eb61 0303 	sbc.w	r3, r1, r3
 800efec:	0fda      	lsrs	r2, r3, #31
 800efee:	eb12 020c 	adds.w	r2, r2, ip
 800eff2:	f143 0300 	adc.w	r3, r3, #0
 800eff6:	0852      	lsrs	r2, r2, #1
 800eff8:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800effc:	105b      	asrs	r3, r3, #1
 800effe:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800f002:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800f006:	e6dd      	b.n	800edc4 <read_submessage_list+0xc8>
 800f008:	3b9aca00 	.word	0x3b9aca00

0800f00c <listen_message_reliably>:
 800f00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f010:	1e0b      	subs	r3, r1, #0
 800f012:	b09d      	sub	sp, #116	@ 0x74
 800f014:	bfb8      	it	lt
 800f016:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800f01a:	4680      	mov	r8, r0
 800f01c:	9305      	str	r3, [sp, #20]
 800f01e:	f001 fb87 	bl	8010730 <uxr_millis>
 800f022:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800f026:	4681      	mov	r9, r0
 800f028:	2a00      	cmp	r2, #0
 800f02a:	f000 80a1 	beq.w	800f170 <listen_message_reliably+0x164>
 800f02e:	2600      	movs	r6, #0
 800f030:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f034:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800f038:	9303      	str	r3, [sp, #12]
 800f03a:	4630      	mov	r0, r6
 800f03c:	460f      	mov	r7, r1
 800f03e:	e00f      	b.n	800f060 <listen_message_reliably+0x54>
 800f040:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f044:	9903      	ldr	r1, [sp, #12]
 800f046:	455a      	cmp	r2, fp
 800f048:	f106 0601 	add.w	r6, r6, #1
 800f04c:	eb73 0101 	sbcs.w	r1, r3, r1
 800f050:	b2f0      	uxtb	r0, r6
 800f052:	da01      	bge.n	800f058 <listen_message_reliably+0x4c>
 800f054:	4693      	mov	fp, r2
 800f056:	9303      	str	r3, [sp, #12]
 800f058:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800f05c:	4283      	cmp	r3, r0
 800f05e:	d960      	bls.n	800f122 <listen_message_reliably+0x116>
 800f060:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800f064:	2102      	movs	r1, #2
 800f066:	2201      	movs	r2, #1
 800f068:	f001 f9e4 	bl	8010434 <uxr_stream_id>
 800f06c:	00e4      	lsls	r4, r4, #3
 800f06e:	f104 0520 	add.w	r5, r4, #32
 800f072:	4445      	add	r5, r8
 800f074:	4601      	mov	r1, r0
 800f076:	463b      	mov	r3, r7
 800f078:	464a      	mov	r2, r9
 800f07a:	4628      	mov	r0, r5
 800f07c:	9109      	str	r1, [sp, #36]	@ 0x24
 800f07e:	f007 fac9 	bl	8016614 <uxr_update_output_stream_heartbeat_timestamp>
 800f082:	eb08 0304 	add.w	r3, r8, r4
 800f086:	2800      	cmp	r0, #0
 800f088:	d0da      	beq.n	800f040 <listen_message_reliably+0x34>
 800f08a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800f08e:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800f092:	9304      	str	r3, [sp, #16]
 800f094:	4640      	mov	r0, r8
 800f096:	f000 fd03 	bl	800faa0 <uxr_session_header_offset>
 800f09a:	3501      	adds	r5, #1
 800f09c:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800f0a0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800f0a4:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	2211      	movs	r2, #17
 800f0ac:	9000      	str	r0, [sp, #0]
 800f0ae:	a90c      	add	r1, sp, #48	@ 0x30
 800f0b0:	4650      	mov	r0, sl
 800f0b2:	f7fc fce1 	bl	800ba78 <ucdr_init_buffer_origin_offset>
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	2205      	movs	r2, #5
 800f0ba:	210b      	movs	r1, #11
 800f0bc:	4650      	mov	r0, sl
 800f0be:	f001 faf1 	bl	80106a4 <uxr_buffer_submessage_header>
 800f0c2:	8968      	ldrh	r0, [r5, #10]
 800f0c4:	2101      	movs	r1, #1
 800f0c6:	f007 fb67 	bl	8016798 <uxr_seq_num_add>
 800f0ca:	892b      	ldrh	r3, [r5, #8]
 800f0cc:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800f0d0:	4602      	mov	r2, r0
 800f0d2:	9b04      	ldr	r3, [sp, #16]
 800f0d4:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800f0d8:	a90a      	add	r1, sp, #40	@ 0x28
 800f0da:	4650      	mov	r0, sl
 800f0dc:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800f0e0:	f002 fbda 	bl	8011898 <uxr_serialize_HEARTBEAT_Payload>
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	4611      	mov	r1, r2
 800f0e8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f0ea:	4640      	mov	r0, r8
 800f0ec:	f000 fc82 	bl	800f9f4 <uxr_stamp_session_header>
 800f0f0:	4650      	mov	r0, sl
 800f0f2:	f7fc fcff 	bl	800baf4 <ucdr_buffer_length>
 800f0f6:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800f0fa:	4602      	mov	r2, r0
 800f0fc:	a90c      	add	r1, sp, #48	@ 0x30
 800f0fe:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f102:	4444      	add	r4, r8
 800f104:	47a8      	blx	r5
 800f106:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800f10a:	9903      	ldr	r1, [sp, #12]
 800f10c:	455a      	cmp	r2, fp
 800f10e:	f106 0601 	add.w	r6, r6, #1
 800f112:	eb73 0101 	sbcs.w	r1, r3, r1
 800f116:	b2f0      	uxtb	r0, r6
 800f118:	db9c      	blt.n	800f054 <listen_message_reliably+0x48>
 800f11a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800f11e:	4283      	cmp	r3, r0
 800f120:	d89e      	bhi.n	800f060 <listen_message_reliably+0x54>
 800f122:	9a03      	ldr	r2, [sp, #12]
 800f124:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f128:	429a      	cmp	r2, r3
 800f12a:	bf08      	it	eq
 800f12c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800f130:	d01e      	beq.n	800f170 <listen_message_reliably+0x164>
 800f132:	ebab 0309 	sub.w	r3, fp, r9
 800f136:	9905      	ldr	r1, [sp, #20]
 800f138:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	bf08      	it	eq
 800f140:	2301      	moveq	r3, #1
 800f142:	4299      	cmp	r1, r3
 800f144:	bfa8      	it	ge
 800f146:	4619      	movge	r1, r3
 800f148:	6894      	ldr	r4, [r2, #8]
 800f14a:	6810      	ldr	r0, [r2, #0]
 800f14c:	4689      	mov	r9, r1
 800f14e:	460b      	mov	r3, r1
 800f150:	aa08      	add	r2, sp, #32
 800f152:	a907      	add	r1, sp, #28
 800f154:	47a0      	blx	r4
 800f156:	b968      	cbnz	r0, 800f174 <listen_message_reliably+0x168>
 800f158:	9b05      	ldr	r3, [sp, #20]
 800f15a:	eba3 0309 	sub.w	r3, r3, r9
 800f15e:	2b00      	cmp	r3, #0
 800f160:	9305      	str	r3, [sp, #20]
 800f162:	f73f af5c 	bgt.w	800f01e <listen_message_reliably+0x12>
 800f166:	4604      	mov	r4, r0
 800f168:	4620      	mov	r0, r4
 800f16a:	b01d      	add	sp, #116	@ 0x74
 800f16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f170:	9b05      	ldr	r3, [sp, #20]
 800f172:	e7e0      	b.n	800f136 <listen_message_reliably+0x12a>
 800f174:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800f178:	4604      	mov	r4, r0
 800f17a:	a80c      	add	r0, sp, #48	@ 0x30
 800f17c:	f7fc fc8e 	bl	800ba9c <ucdr_init_buffer>
 800f180:	2500      	movs	r5, #0
 800f182:	f10d 031a 	add.w	r3, sp, #26
 800f186:	aa06      	add	r2, sp, #24
 800f188:	a90c      	add	r1, sp, #48	@ 0x30
 800f18a:	4640      	mov	r0, r8
 800f18c:	f88d 5018 	strb.w	r5, [sp, #24]
 800f190:	f000 fc44 	bl	800fa1c <uxr_read_session_header>
 800f194:	b918      	cbnz	r0, 800f19e <listen_message_reliably+0x192>
 800f196:	4620      	mov	r0, r4
 800f198:	b01d      	add	sp, #116	@ 0x74
 800f19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f19e:	4629      	mov	r1, r5
 800f1a0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f1a4:	f001 f970 	bl	8010488 <uxr_stream_id_from_raw>
 800f1a8:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800f1ac:	2d01      	cmp	r5, #1
 800f1ae:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800f1b2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800f1b6:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800f1ba:	d04b      	beq.n	800f254 <listen_message_reliably+0x248>
 800f1bc:	2d02      	cmp	r5, #2
 800f1be:	d00f      	beq.n	800f1e0 <listen_message_reliably+0x1d4>
 800f1c0:	2d00      	cmp	r5, #0
 800f1c2:	d1e8      	bne.n	800f196 <listen_message_reliably+0x18a>
 800f1c4:	4629      	mov	r1, r5
 800f1c6:	4628      	mov	r0, r5
 800f1c8:	f001 f95e 	bl	8010488 <uxr_stream_id_from_raw>
 800f1cc:	a90c      	add	r1, sp, #48	@ 0x30
 800f1ce:	4602      	mov	r2, r0
 800f1d0:	4640      	mov	r0, r8
 800f1d2:	920a      	str	r2, [sp, #40]	@ 0x28
 800f1d4:	f7ff fd92 	bl	800ecfc <read_submessage_list>
 800f1d8:	4620      	mov	r0, r4
 800f1da:	b01d      	add	sp, #116	@ 0x74
 800f1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1e0:	4631      	mov	r1, r6
 800f1e2:	f108 0008 	add.w	r0, r8, #8
 800f1e6:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800f1ea:	f001 fa3b 	bl	8010664 <uxr_get_input_reliable_stream>
 800f1ee:	4607      	mov	r7, r0
 800f1f0:	b338      	cbz	r0, 800f242 <listen_message_reliably+0x236>
 800f1f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f1f4:	9203      	str	r2, [sp, #12]
 800f1f6:	a80c      	add	r0, sp, #48	@ 0x30
 800f1f8:	f7fc fc80 	bl	800bafc <ucdr_buffer_remaining>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	f10d 0019 	add.w	r0, sp, #25
 800f202:	9000      	str	r0, [sp, #0]
 800f204:	9a03      	ldr	r2, [sp, #12]
 800f206:	4651      	mov	r1, sl
 800f208:	4638      	mov	r0, r7
 800f20a:	f006 fe19 	bl	8015e40 <uxr_receive_reliable_message>
 800f20e:	b1c0      	cbz	r0, 800f242 <listen_message_reliably+0x236>
 800f210:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f214:	b393      	cbz	r3, 800f27c <listen_message_reliably+0x270>
 800f216:	ad14      	add	r5, sp, #80	@ 0x50
 800f218:	f04f 0a02 	mov.w	sl, #2
 800f21c:	e00a      	b.n	800f234 <listen_message_reliably+0x228>
 800f21e:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800f222:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800f226:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800f22a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f22c:	4629      	mov	r1, r5
 800f22e:	4640      	mov	r0, r8
 800f230:	f7ff fd64 	bl	800ecfc <read_submessage_list>
 800f234:	2204      	movs	r2, #4
 800f236:	4629      	mov	r1, r5
 800f238:	4638      	mov	r0, r7
 800f23a:	f006 fe81 	bl	8015f40 <uxr_next_input_reliable_buffer_available>
 800f23e:	2800      	cmp	r0, #0
 800f240:	d1ed      	bne.n	800f21e <listen_message_reliably+0x212>
 800f242:	4640      	mov	r0, r8
 800f244:	4632      	mov	r2, r6
 800f246:	4649      	mov	r1, r9
 800f248:	f7ff fbd4 	bl	800e9f4 <write_submessage_acknack.isra.0>
 800f24c:	4620      	mov	r0, r4
 800f24e:	b01d      	add	sp, #116	@ 0x74
 800f250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f254:	4631      	mov	r1, r6
 800f256:	f108 0008 	add.w	r0, r8, #8
 800f25a:	f001 f9f9 	bl	8010650 <uxr_get_input_best_effort_stream>
 800f25e:	2800      	cmp	r0, #0
 800f260:	d099      	beq.n	800f196 <listen_message_reliably+0x18a>
 800f262:	4651      	mov	r1, sl
 800f264:	f006 fd58 	bl	8015d18 <uxr_receive_best_effort_message>
 800f268:	2800      	cmp	r0, #0
 800f26a:	d094      	beq.n	800f196 <listen_message_reliably+0x18a>
 800f26c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800f270:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f272:	a90c      	add	r1, sp, #48	@ 0x30
 800f274:	4640      	mov	r0, r8
 800f276:	f7ff fd41 	bl	800ecfc <read_submessage_list>
 800f27a:	e78c      	b.n	800f196 <listen_message_reliably+0x18a>
 800f27c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800f280:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f282:	a90c      	add	r1, sp, #48	@ 0x30
 800f284:	4640      	mov	r0, r8
 800f286:	f7ff fd39 	bl	800ecfc <read_submessage_list>
 800f28a:	e7c4      	b.n	800f216 <listen_message_reliably+0x20a>

0800f28c <uxr_run_session_timeout>:
 800f28c:	b570      	push	{r4, r5, r6, lr}
 800f28e:	4604      	mov	r4, r0
 800f290:	460d      	mov	r5, r1
 800f292:	f001 fa4d 	bl	8010730 <uxr_millis>
 800f296:	4606      	mov	r6, r0
 800f298:	4620      	mov	r0, r4
 800f29a:	f7ff fc71 	bl	800eb80 <uxr_flash_output_streams>
 800f29e:	4629      	mov	r1, r5
 800f2a0:	4620      	mov	r0, r4
 800f2a2:	f7ff feb3 	bl	800f00c <listen_message_reliably>
 800f2a6:	f001 fa43 	bl	8010730 <uxr_millis>
 800f2aa:	1b83      	subs	r3, r0, r6
 800f2ac:	1ae9      	subs	r1, r5, r3
 800f2ae:	2900      	cmp	r1, #0
 800f2b0:	dcf6      	bgt.n	800f2a0 <uxr_run_session_timeout+0x14>
 800f2b2:	f104 0008 	add.w	r0, r4, #8
 800f2b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f2ba:	f001 b9dd 	b.w	8010678 <uxr_output_streams_confirmed>
 800f2be:	bf00      	nop

0800f2c0 <uxr_run_session_until_data>:
 800f2c0:	b570      	push	{r4, r5, r6, lr}
 800f2c2:	4604      	mov	r4, r0
 800f2c4:	460d      	mov	r5, r1
 800f2c6:	f001 fa33 	bl	8010730 <uxr_millis>
 800f2ca:	4606      	mov	r6, r0
 800f2cc:	4620      	mov	r0, r4
 800f2ce:	f7ff fc57 	bl	800eb80 <uxr_flash_output_streams>
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800f2d8:	4629      	mov	r1, r5
 800f2da:	e005      	b.n	800f2e8 <uxr_run_session_until_data+0x28>
 800f2dc:	f001 fa28 	bl	8010730 <uxr_millis>
 800f2e0:	1b83      	subs	r3, r0, r6
 800f2e2:	1ae9      	subs	r1, r5, r3
 800f2e4:	2900      	cmp	r1, #0
 800f2e6:	dd07      	ble.n	800f2f8 <uxr_run_session_until_data+0x38>
 800f2e8:	4620      	mov	r0, r4
 800f2ea:	f7ff fe8f 	bl	800f00c <listen_message_reliably>
 800f2ee:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800f2f2:	2800      	cmp	r0, #0
 800f2f4:	d0f2      	beq.n	800f2dc <uxr_run_session_until_data+0x1c>
 800f2f6:	bd70      	pop	{r4, r5, r6, pc}
 800f2f8:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800f2fc:	bd70      	pop	{r4, r5, r6, pc}
 800f2fe:	bf00      	nop

0800f300 <uxr_run_session_until_confirm_delivery>:
 800f300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f304:	4606      	mov	r6, r0
 800f306:	460d      	mov	r5, r1
 800f308:	f001 fa12 	bl	8010730 <uxr_millis>
 800f30c:	4607      	mov	r7, r0
 800f30e:	4630      	mov	r0, r6
 800f310:	f7ff fc36 	bl	800eb80 <uxr_flash_output_streams>
 800f314:	2d00      	cmp	r5, #0
 800f316:	f106 0808 	add.w	r8, r6, #8
 800f31a:	bfa8      	it	ge
 800f31c:	462c      	movge	r4, r5
 800f31e:	da07      	bge.n	800f330 <uxr_run_session_until_confirm_delivery+0x30>
 800f320:	e00e      	b.n	800f340 <uxr_run_session_until_confirm_delivery+0x40>
 800f322:	f7ff fe73 	bl	800f00c <listen_message_reliably>
 800f326:	f001 fa03 	bl	8010730 <uxr_millis>
 800f32a:	1bc3      	subs	r3, r0, r7
 800f32c:	1aec      	subs	r4, r5, r3
 800f32e:	d407      	bmi.n	800f340 <uxr_run_session_until_confirm_delivery+0x40>
 800f330:	4640      	mov	r0, r8
 800f332:	f001 f9a1 	bl	8010678 <uxr_output_streams_confirmed>
 800f336:	4603      	mov	r3, r0
 800f338:	4621      	mov	r1, r4
 800f33a:	4630      	mov	r0, r6
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d0f0      	beq.n	800f322 <uxr_run_session_until_confirm_delivery+0x22>
 800f340:	4640      	mov	r0, r8
 800f342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f346:	f001 b997 	b.w	8010678 <uxr_output_streams_confirmed>
 800f34a:	bf00      	nop

0800f34c <uxr_run_session_until_all_status>:
 800f34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f350:	9c08      	ldr	r4, [sp, #32]
 800f352:	4606      	mov	r6, r0
 800f354:	460f      	mov	r7, r1
 800f356:	4691      	mov	r9, r2
 800f358:	461d      	mov	r5, r3
 800f35a:	f7ff fc11 	bl	800eb80 <uxr_flash_output_streams>
 800f35e:	b124      	cbz	r4, 800f36a <uxr_run_session_until_all_status+0x1e>
 800f360:	4622      	mov	r2, r4
 800f362:	21ff      	movs	r1, #255	@ 0xff
 800f364:	4628      	mov	r0, r5
 800f366:	f008 f9d1 	bl	801770c <memset>
 800f36a:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800f36e:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800f370:	f001 f9de 	bl	8010730 <uxr_millis>
 800f374:	3d01      	subs	r5, #1
 800f376:	f1a9 0902 	sub.w	r9, r9, #2
 800f37a:	4680      	mov	r8, r0
 800f37c:	4639      	mov	r1, r7
 800f37e:	4630      	mov	r0, r6
 800f380:	f7ff fe44 	bl	800f00c <listen_message_reliably>
 800f384:	f001 f9d4 	bl	8010730 <uxr_millis>
 800f388:	eba0 0008 	sub.w	r0, r0, r8
 800f38c:	1a39      	subs	r1, r7, r0
 800f38e:	b344      	cbz	r4, 800f3e2 <uxr_run_session_until_all_status+0x96>
 800f390:	4628      	mov	r0, r5
 800f392:	46ac      	mov	ip, r5
 800f394:	2301      	movs	r3, #1
 800f396:	e002      	b.n	800f39e <uxr_run_session_until_all_status+0x52>
 800f398:	42a3      	cmp	r3, r4
 800f39a:	d20d      	bcs.n	800f3b8 <uxr_run_session_until_all_status+0x6c>
 800f39c:	3301      	adds	r3, #1
 800f39e:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800f3a2:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800f3a6:	d1f7      	bne.n	800f398 <uxr_run_session_until_all_status+0x4c>
 800f3a8:	42a3      	cmp	r3, r4
 800f3aa:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800f3ae:	d213      	bcs.n	800f3d8 <uxr_run_session_until_all_status+0x8c>
 800f3b0:	2a00      	cmp	r2, #0
 800f3b2:	d0f3      	beq.n	800f39c <uxr_run_session_until_all_status+0x50>
 800f3b4:	2900      	cmp	r1, #0
 800f3b6:	dce2      	bgt.n	800f37e <uxr_run_session_until_all_status+0x32>
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800f3bc:	442c      	add	r4, r5
 800f3be:	e001      	b.n	800f3c4 <uxr_run_session_until_all_status+0x78>
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	d812      	bhi.n	800f3ea <uxr_run_session_until_all_status+0x9e>
 800f3c4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800f3c8:	4284      	cmp	r4, r0
 800f3ca:	d1f9      	bne.n	800f3c0 <uxr_run_session_until_all_status+0x74>
 800f3cc:	2b01      	cmp	r3, #1
 800f3ce:	bf8c      	ite	hi
 800f3d0:	2000      	movhi	r0, #0
 800f3d2:	2001      	movls	r0, #1
 800f3d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3d8:	2900      	cmp	r1, #0
 800f3da:	dded      	ble.n	800f3b8 <uxr_run_session_until_all_status+0x6c>
 800f3dc:	2a00      	cmp	r2, #0
 800f3de:	d1ce      	bne.n	800f37e <uxr_run_session_until_all_status+0x32>
 800f3e0:	e7ea      	b.n	800f3b8 <uxr_run_session_until_all_status+0x6c>
 800f3e2:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800f3e4:	2001      	movs	r0, #1
 800f3e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3ea:	2000      	movs	r0, #0
 800f3ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f3f0 <uxr_sync_session>:
 800f3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3f2:	b093      	sub	sp, #76	@ 0x4c
 800f3f4:	4604      	mov	r4, r0
 800f3f6:	460d      	mov	r5, r1
 800f3f8:	f000 fb52 	bl	800faa0 <uxr_session_header_offset>
 800f3fc:	2214      	movs	r2, #20
 800f3fe:	eb0d 0102 	add.w	r1, sp, r2
 800f402:	9000      	str	r0, [sp, #0]
 800f404:	2300      	movs	r3, #0
 800f406:	a80a      	add	r0, sp, #40	@ 0x28
 800f408:	f7fc fb36 	bl	800ba78 <ucdr_init_buffer_origin_offset>
 800f40c:	2300      	movs	r3, #0
 800f40e:	2208      	movs	r2, #8
 800f410:	210e      	movs	r1, #14
 800f412:	a80a      	add	r0, sp, #40	@ 0x28
 800f414:	f001 f946 	bl	80106a4 <uxr_buffer_submessage_header>
 800f418:	f001 f9a4 	bl	8010764 <uxr_nanos>
 800f41c:	a31c      	add	r3, pc, #112	@ (adr r3, 800f490 <uxr_sync_session+0xa0>)
 800f41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f422:	460e      	mov	r6, r1
 800f424:	4607      	mov	r7, r0
 800f426:	f7f1 fb81 	bl	8000b2c <__aeabi_ldivmod>
 800f42a:	4631      	mov	r1, r6
 800f42c:	9003      	str	r0, [sp, #12]
 800f42e:	a318      	add	r3, pc, #96	@ (adr r3, 800f490 <uxr_sync_session+0xa0>)
 800f430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f434:	4638      	mov	r0, r7
 800f436:	f7f1 fb79 	bl	8000b2c <__aeabi_ldivmod>
 800f43a:	a903      	add	r1, sp, #12
 800f43c:	a80a      	add	r0, sp, #40	@ 0x28
 800f43e:	9204      	str	r2, [sp, #16]
 800f440:	f002 fa50 	bl	80118e4 <uxr_serialize_TIMESTAMP_Payload>
 800f444:	2200      	movs	r2, #0
 800f446:	4611      	mov	r1, r2
 800f448:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f44a:	4620      	mov	r0, r4
 800f44c:	f000 fad2 	bl	800f9f4 <uxr_stamp_session_header>
 800f450:	a80a      	add	r0, sp, #40	@ 0x28
 800f452:	f7fc fb4f 	bl	800baf4 <ucdr_buffer_length>
 800f456:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f458:	4602      	mov	r2, r0
 800f45a:	a905      	add	r1, sp, #20
 800f45c:	e9d3 0600 	ldrd	r0, r6, [r3]
 800f460:	47b0      	blx	r6
 800f462:	f001 f965 	bl	8010730 <uxr_millis>
 800f466:	2300      	movs	r3, #0
 800f468:	4606      	mov	r6, r0
 800f46a:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 800f46e:	4629      	mov	r1, r5
 800f470:	e000      	b.n	800f474 <uxr_sync_session+0x84>
 800f472:	b950      	cbnz	r0, 800f48a <uxr_sync_session+0x9a>
 800f474:	4620      	mov	r0, r4
 800f476:	f7ff fdc9 	bl	800f00c <listen_message_reliably>
 800f47a:	f001 f959 	bl	8010730 <uxr_millis>
 800f47e:	1b83      	subs	r3, r0, r6
 800f480:	1ae9      	subs	r1, r5, r3
 800f482:	2900      	cmp	r1, #0
 800f484:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 800f488:	dcf3      	bgt.n	800f472 <uxr_sync_session+0x82>
 800f48a:	b013      	add	sp, #76	@ 0x4c
 800f48c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f48e:	bf00      	nop
 800f490:	3b9aca00 	.word	0x3b9aca00
 800f494:	00000000 	.word	0x00000000

0800f498 <wait_session_status>:
 800f498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f49c:	4604      	mov	r4, r0
 800f49e:	b09d      	sub	sp, #116	@ 0x74
 800f4a0:	20ff      	movs	r0, #255	@ 0xff
 800f4a2:	7160      	strb	r0, [r4, #5]
 800f4a4:	9303      	str	r3, [sp, #12]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	f000 80b6 	beq.w	800f618 <wait_session_status+0x180>
 800f4ac:	468a      	mov	sl, r1
 800f4ae:	4691      	mov	r9, r2
 800f4b0:	f04f 0b00 	mov.w	fp, #0
 800f4b4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f4b6:	464a      	mov	r2, r9
 800f4b8:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f4bc:	4651      	mov	r1, sl
 800f4be:	47a8      	blx	r5
 800f4c0:	f001 f936 	bl	8010730 <uxr_millis>
 800f4c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f4c8:	4605      	mov	r5, r0
 800f4ca:	e009      	b.n	800f4e0 <wait_session_status+0x48>
 800f4cc:	f001 f930 	bl	8010730 <uxr_millis>
 800f4d0:	1b40      	subs	r0, r0, r5
 800f4d2:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	dd40      	ble.n	800f55c <wait_session_status+0xc4>
 800f4da:	7960      	ldrb	r0, [r4, #5]
 800f4dc:	28ff      	cmp	r0, #255	@ 0xff
 800f4de:	d145      	bne.n	800f56c <wait_session_status+0xd4>
 800f4e0:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800f4e2:	a908      	add	r1, sp, #32
 800f4e4:	6896      	ldr	r6, [r2, #8]
 800f4e6:	6810      	ldr	r0, [r2, #0]
 800f4e8:	aa09      	add	r2, sp, #36	@ 0x24
 800f4ea:	47b0      	blx	r6
 800f4ec:	2800      	cmp	r0, #0
 800f4ee:	d0ed      	beq.n	800f4cc <wait_session_status+0x34>
 800f4f0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800f4f4:	a80c      	add	r0, sp, #48	@ 0x30
 800f4f6:	f7fc fad1 	bl	800ba9c <ucdr_init_buffer>
 800f4fa:	2600      	movs	r6, #0
 800f4fc:	f10d 031e 	add.w	r3, sp, #30
 800f500:	aa07      	add	r2, sp, #28
 800f502:	a90c      	add	r1, sp, #48	@ 0x30
 800f504:	4620      	mov	r0, r4
 800f506:	f88d 601c 	strb.w	r6, [sp, #28]
 800f50a:	f000 fa87 	bl	800fa1c <uxr_read_session_header>
 800f50e:	2800      	cmp	r0, #0
 800f510:	d0dc      	beq.n	800f4cc <wait_session_status+0x34>
 800f512:	4631      	mov	r1, r6
 800f514:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800f518:	f000 ffb6 	bl	8010488 <uxr_stream_id_from_raw>
 800f51c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800f520:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800f524:	9302      	str	r3, [sp, #8]
 800f526:	2f01      	cmp	r7, #1
 800f528:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800f52c:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800f530:	d05c      	beq.n	800f5ec <wait_session_status+0x154>
 800f532:	2f02      	cmp	r7, #2
 800f534:	d020      	beq.n	800f578 <wait_session_status+0xe0>
 800f536:	2f00      	cmp	r7, #0
 800f538:	d1c8      	bne.n	800f4cc <wait_session_status+0x34>
 800f53a:	4639      	mov	r1, r7
 800f53c:	4638      	mov	r0, r7
 800f53e:	f000 ffa3 	bl	8010488 <uxr_stream_id_from_raw>
 800f542:	a90c      	add	r1, sp, #48	@ 0x30
 800f544:	4602      	mov	r2, r0
 800f546:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f548:	4620      	mov	r0, r4
 800f54a:	f7ff fbd7 	bl	800ecfc <read_submessage_list>
 800f54e:	f001 f8ef 	bl	8010730 <uxr_millis>
 800f552:	1b40      	subs	r0, r0, r5
 800f554:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800f558:	2b00      	cmp	r3, #0
 800f55a:	dcbe      	bgt.n	800f4da <wait_session_status+0x42>
 800f55c:	9b03      	ldr	r3, [sp, #12]
 800f55e:	7960      	ldrb	r0, [r4, #5]
 800f560:	f10b 0b01 	add.w	fp, fp, #1
 800f564:	455b      	cmp	r3, fp
 800f566:	d001      	beq.n	800f56c <wait_session_status+0xd4>
 800f568:	28ff      	cmp	r0, #255	@ 0xff
 800f56a:	d0a3      	beq.n	800f4b4 <wait_session_status+0x1c>
 800f56c:	38ff      	subs	r0, #255	@ 0xff
 800f56e:	bf18      	it	ne
 800f570:	2001      	movne	r0, #1
 800f572:	b01d      	add	sp, #116	@ 0x74
 800f574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f578:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800f57c:	9304      	str	r3, [sp, #16]
 800f57e:	4631      	mov	r1, r6
 800f580:	f104 0008 	add.w	r0, r4, #8
 800f584:	f001 f86e 	bl	8010664 <uxr_get_input_reliable_stream>
 800f588:	4680      	mov	r8, r0
 800f58a:	b348      	cbz	r0, 800f5e0 <wait_session_status+0x148>
 800f58c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f58e:	9205      	str	r2, [sp, #20]
 800f590:	a80c      	add	r0, sp, #48	@ 0x30
 800f592:	f7fc fab3 	bl	800bafc <ucdr_buffer_remaining>
 800f596:	4603      	mov	r3, r0
 800f598:	f10d 001d 	add.w	r0, sp, #29
 800f59c:	9000      	str	r0, [sp, #0]
 800f59e:	9a05      	ldr	r2, [sp, #20]
 800f5a0:	9902      	ldr	r1, [sp, #8]
 800f5a2:	4640      	mov	r0, r8
 800f5a4:	f006 fc4c 	bl	8015e40 <uxr_receive_reliable_message>
 800f5a8:	b1d0      	cbz	r0, 800f5e0 <wait_session_status+0x148>
 800f5aa:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d03a      	beq.n	800f628 <wait_session_status+0x190>
 800f5b2:	9f04      	ldr	r7, [sp, #16]
 800f5b4:	e00a      	b.n	800f5cc <wait_session_status+0x134>
 800f5b6:	f04f 0302 	mov.w	r3, #2
 800f5ba:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800f5be:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800f5c2:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800f5c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f5c8:	f7ff fb98 	bl	800ecfc <read_submessage_list>
 800f5cc:	a914      	add	r1, sp, #80	@ 0x50
 800f5ce:	2204      	movs	r2, #4
 800f5d0:	4640      	mov	r0, r8
 800f5d2:	f006 fcb5 	bl	8015f40 <uxr_next_input_reliable_buffer_available>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	a914      	add	r1, sp, #80	@ 0x50
 800f5da:	4620      	mov	r0, r4
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d1ea      	bne.n	800f5b6 <wait_session_status+0x11e>
 800f5e0:	9904      	ldr	r1, [sp, #16]
 800f5e2:	4632      	mov	r2, r6
 800f5e4:	4620      	mov	r0, r4
 800f5e6:	f7ff fa05 	bl	800e9f4 <write_submessage_acknack.isra.0>
 800f5ea:	e76f      	b.n	800f4cc <wait_session_status+0x34>
 800f5ec:	4631      	mov	r1, r6
 800f5ee:	f104 0008 	add.w	r0, r4, #8
 800f5f2:	f001 f82d 	bl	8010650 <uxr_get_input_best_effort_stream>
 800f5f6:	2800      	cmp	r0, #0
 800f5f8:	f43f af68 	beq.w	800f4cc <wait_session_status+0x34>
 800f5fc:	9902      	ldr	r1, [sp, #8]
 800f5fe:	f006 fb8b 	bl	8015d18 <uxr_receive_best_effort_message>
 800f602:	2800      	cmp	r0, #0
 800f604:	f43f af62 	beq.w	800f4cc <wait_session_status+0x34>
 800f608:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800f60c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f60e:	a90c      	add	r1, sp, #48	@ 0x30
 800f610:	4620      	mov	r0, r4
 800f612:	f7ff fb73 	bl	800ecfc <read_submessage_list>
 800f616:	e759      	b.n	800f4cc <wait_session_status+0x34>
 800f618:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f61a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f61e:	47a0      	blx	r4
 800f620:	2001      	movs	r0, #1
 800f622:	b01d      	add	sp, #116	@ 0x74
 800f624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f628:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800f62c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f62e:	a90c      	add	r1, sp, #48	@ 0x30
 800f630:	4620      	mov	r0, r4
 800f632:	f7ff fb63 	bl	800ecfc <read_submessage_list>
 800f636:	e7bc      	b.n	800f5b2 <wait_session_status+0x11a>

0800f638 <uxr_delete_session_retries>:
 800f638:	b530      	push	{r4, r5, lr}
 800f63a:	b08f      	sub	sp, #60	@ 0x3c
 800f63c:	4604      	mov	r4, r0
 800f63e:	460d      	mov	r5, r1
 800f640:	f000 fa2e 	bl	800faa0 <uxr_session_header_offset>
 800f644:	2300      	movs	r3, #0
 800f646:	2210      	movs	r2, #16
 800f648:	9000      	str	r0, [sp, #0]
 800f64a:	a902      	add	r1, sp, #8
 800f64c:	a806      	add	r0, sp, #24
 800f64e:	f7fc fa13 	bl	800ba78 <ucdr_init_buffer_origin_offset>
 800f652:	a906      	add	r1, sp, #24
 800f654:	4620      	mov	r0, r4
 800f656:	f000 f973 	bl	800f940 <uxr_buffer_delete_session>
 800f65a:	2200      	movs	r2, #0
 800f65c:	4611      	mov	r1, r2
 800f65e:	9b06      	ldr	r3, [sp, #24]
 800f660:	4620      	mov	r0, r4
 800f662:	f000 f9c7 	bl	800f9f4 <uxr_stamp_session_header>
 800f666:	a806      	add	r0, sp, #24
 800f668:	f7fc fa44 	bl	800baf4 <ucdr_buffer_length>
 800f66c:	462b      	mov	r3, r5
 800f66e:	4602      	mov	r2, r0
 800f670:	a902      	add	r1, sp, #8
 800f672:	4620      	mov	r0, r4
 800f674:	f7ff ff10 	bl	800f498 <wait_session_status>
 800f678:	b118      	cbz	r0, 800f682 <uxr_delete_session_retries+0x4a>
 800f67a:	7960      	ldrb	r0, [r4, #5]
 800f67c:	fab0 f080 	clz	r0, r0
 800f680:	0940      	lsrs	r0, r0, #5
 800f682:	b00f      	add	sp, #60	@ 0x3c
 800f684:	bd30      	pop	{r4, r5, pc}
 800f686:	bf00      	nop

0800f688 <uxr_create_session>:
 800f688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f68c:	f100 0b08 	add.w	fp, r0, #8
 800f690:	b0ab      	sub	sp, #172	@ 0xac
 800f692:	4604      	mov	r4, r0
 800f694:	4658      	mov	r0, fp
 800f696:	f000 ff2b 	bl	80104f0 <uxr_reset_stream_storage>
 800f69a:	4620      	mov	r0, r4
 800f69c:	f000 fa00 	bl	800faa0 <uxr_session_header_offset>
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	9000      	str	r0, [sp, #0]
 800f6a4:	221c      	movs	r2, #28
 800f6a6:	a90b      	add	r1, sp, #44	@ 0x2c
 800f6a8:	a812      	add	r0, sp, #72	@ 0x48
 800f6aa:	f7fc f9e5 	bl	800ba78 <ucdr_init_buffer_origin_offset>
 800f6ae:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f6b0:	8a1a      	ldrh	r2, [r3, #16]
 800f6b2:	3a04      	subs	r2, #4
 800f6b4:	b292      	uxth	r2, r2
 800f6b6:	a912      	add	r1, sp, #72	@ 0x48
 800f6b8:	4620      	mov	r0, r4
 800f6ba:	f000 f917 	bl	800f8ec <uxr_buffer_create_session>
 800f6be:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f6c0:	4620      	mov	r0, r4
 800f6c2:	f000 f983 	bl	800f9cc <uxr_stamp_create_session_header>
 800f6c6:	a812      	add	r0, sp, #72	@ 0x48
 800f6c8:	f7fc fa14 	bl	800baf4 <ucdr_buffer_length>
 800f6cc:	23ff      	movs	r3, #255	@ 0xff
 800f6ce:	7163      	strb	r3, [r4, #5]
 800f6d0:	230a      	movs	r3, #10
 800f6d2:	46da      	mov	sl, fp
 800f6d4:	9303      	str	r3, [sp, #12]
 800f6d6:	4683      	mov	fp, r0
 800f6d8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f6da:	465a      	mov	r2, fp
 800f6dc:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f6e0:	a90b      	add	r1, sp, #44	@ 0x2c
 800f6e2:	47a8      	blx	r5
 800f6e4:	f001 f824 	bl	8010730 <uxr_millis>
 800f6e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f6ec:	4605      	mov	r5, r0
 800f6ee:	e009      	b.n	800f704 <uxr_create_session+0x7c>
 800f6f0:	f001 f81e 	bl	8010730 <uxr_millis>
 800f6f4:	1b40      	subs	r0, r0, r5
 800f6f6:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	7962      	ldrb	r2, [r4, #5]
 800f6fe:	dd38      	ble.n	800f772 <uxr_create_session+0xea>
 800f700:	2aff      	cmp	r2, #255	@ 0xff
 800f702:	d13c      	bne.n	800f77e <uxr_create_session+0xf6>
 800f704:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800f706:	a907      	add	r1, sp, #28
 800f708:	6896      	ldr	r6, [r2, #8]
 800f70a:	6810      	ldr	r0, [r2, #0]
 800f70c:	aa08      	add	r2, sp, #32
 800f70e:	47b0      	blx	r6
 800f710:	2800      	cmp	r0, #0
 800f712:	d0ed      	beq.n	800f6f0 <uxr_create_session+0x68>
 800f714:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800f718:	a81a      	add	r0, sp, #104	@ 0x68
 800f71a:	f7fc f9bf 	bl	800ba9c <ucdr_init_buffer>
 800f71e:	2600      	movs	r6, #0
 800f720:	f10d 031a 	add.w	r3, sp, #26
 800f724:	aa06      	add	r2, sp, #24
 800f726:	a91a      	add	r1, sp, #104	@ 0x68
 800f728:	4620      	mov	r0, r4
 800f72a:	f88d 6018 	strb.w	r6, [sp, #24]
 800f72e:	f000 f975 	bl	800fa1c <uxr_read_session_header>
 800f732:	2800      	cmp	r0, #0
 800f734:	d0dc      	beq.n	800f6f0 <uxr_create_session+0x68>
 800f736:	4631      	mov	r1, r6
 800f738:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f73c:	f000 fea4 	bl	8010488 <uxr_stream_id_from_raw>
 800f740:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800f744:	2e01      	cmp	r6, #1
 800f746:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800f74a:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800f74e:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800f752:	d053      	beq.n	800f7fc <uxr_create_session+0x174>
 800f754:	2e02      	cmp	r6, #2
 800f756:	d018      	beq.n	800f78a <uxr_create_session+0x102>
 800f758:	2e00      	cmp	r6, #0
 800f75a:	d1c9      	bne.n	800f6f0 <uxr_create_session+0x68>
 800f75c:	4631      	mov	r1, r6
 800f75e:	4630      	mov	r0, r6
 800f760:	f000 fe92 	bl	8010488 <uxr_stream_id_from_raw>
 800f764:	a91a      	add	r1, sp, #104	@ 0x68
 800f766:	4602      	mov	r2, r0
 800f768:	900a      	str	r0, [sp, #40]	@ 0x28
 800f76a:	4620      	mov	r0, r4
 800f76c:	f7ff fac6 	bl	800ecfc <read_submessage_list>
 800f770:	e7be      	b.n	800f6f0 <uxr_create_session+0x68>
 800f772:	9b03      	ldr	r3, [sp, #12]
 800f774:	3b01      	subs	r3, #1
 800f776:	9303      	str	r3, [sp, #12]
 800f778:	d001      	beq.n	800f77e <uxr_create_session+0xf6>
 800f77a:	2aff      	cmp	r2, #255	@ 0xff
 800f77c:	d0ac      	beq.n	800f6d8 <uxr_create_session+0x50>
 800f77e:	2a00      	cmp	r2, #0
 800f780:	d051      	beq.n	800f826 <uxr_create_session+0x19e>
 800f782:	2000      	movs	r0, #0
 800f784:	b02b      	add	sp, #172	@ 0xac
 800f786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f78a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800f78e:	9304      	str	r3, [sp, #16]
 800f790:	4639      	mov	r1, r7
 800f792:	4650      	mov	r0, sl
 800f794:	f000 ff66 	bl	8010664 <uxr_get_input_reliable_stream>
 800f798:	4680      	mov	r8, r0
 800f79a:	b348      	cbz	r0, 800f7f0 <uxr_create_session+0x168>
 800f79c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f79e:	9205      	str	r2, [sp, #20]
 800f7a0:	a81a      	add	r0, sp, #104	@ 0x68
 800f7a2:	f7fc f9ab 	bl	800bafc <ucdr_buffer_remaining>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	f10d 0019 	add.w	r0, sp, #25
 800f7ac:	9000      	str	r0, [sp, #0]
 800f7ae:	9a05      	ldr	r2, [sp, #20]
 800f7b0:	4649      	mov	r1, r9
 800f7b2:	4640      	mov	r0, r8
 800f7b4:	f006 fb44 	bl	8015e40 <uxr_receive_reliable_message>
 800f7b8:	b1d0      	cbz	r0, 800f7f0 <uxr_create_session+0x168>
 800f7ba:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d038      	beq.n	800f834 <uxr_create_session+0x1ac>
 800f7c2:	9e04      	ldr	r6, [sp, #16]
 800f7c4:	e00a      	b.n	800f7dc <uxr_create_session+0x154>
 800f7c6:	f04f 0302 	mov.w	r3, #2
 800f7ca:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800f7ce:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800f7d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f7d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f7d8:	f7ff fa90 	bl	800ecfc <read_submessage_list>
 800f7dc:	a922      	add	r1, sp, #136	@ 0x88
 800f7de:	2204      	movs	r2, #4
 800f7e0:	4640      	mov	r0, r8
 800f7e2:	f006 fbad 	bl	8015f40 <uxr_next_input_reliable_buffer_available>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	a922      	add	r1, sp, #136	@ 0x88
 800f7ea:	4620      	mov	r0, r4
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d1ea      	bne.n	800f7c6 <uxr_create_session+0x13e>
 800f7f0:	9904      	ldr	r1, [sp, #16]
 800f7f2:	463a      	mov	r2, r7
 800f7f4:	4620      	mov	r0, r4
 800f7f6:	f7ff f8fd 	bl	800e9f4 <write_submessage_acknack.isra.0>
 800f7fa:	e779      	b.n	800f6f0 <uxr_create_session+0x68>
 800f7fc:	4639      	mov	r1, r7
 800f7fe:	4650      	mov	r0, sl
 800f800:	f000 ff26 	bl	8010650 <uxr_get_input_best_effort_stream>
 800f804:	2800      	cmp	r0, #0
 800f806:	f43f af73 	beq.w	800f6f0 <uxr_create_session+0x68>
 800f80a:	4649      	mov	r1, r9
 800f80c:	f006 fa84 	bl	8015d18 <uxr_receive_best_effort_message>
 800f810:	2800      	cmp	r0, #0
 800f812:	f43f af6d 	beq.w	800f6f0 <uxr_create_session+0x68>
 800f816:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800f81a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f81c:	a91a      	add	r1, sp, #104	@ 0x68
 800f81e:	4620      	mov	r0, r4
 800f820:	f7ff fa6c 	bl	800ecfc <read_submessage_list>
 800f824:	e764      	b.n	800f6f0 <uxr_create_session+0x68>
 800f826:	4650      	mov	r0, sl
 800f828:	f000 fe62 	bl	80104f0 <uxr_reset_stream_storage>
 800f82c:	2001      	movs	r0, #1
 800f82e:	b02b      	add	sp, #172	@ 0xac
 800f830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f834:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800f838:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f83a:	a91a      	add	r1, sp, #104	@ 0x68
 800f83c:	4620      	mov	r0, r4
 800f83e:	f7ff fa5d 	bl	800ecfc <read_submessage_list>
 800f842:	e7be      	b.n	800f7c2 <uxr_create_session+0x13a>

0800f844 <uxr_prepare_stream_to_write_submessage>:
 800f844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f848:	b082      	sub	sp, #8
 800f84a:	4682      	mov	sl, r0
 800f84c:	4610      	mov	r0, r2
 800f84e:	4615      	mov	r5, r2
 800f850:	461e      	mov	r6, r3
 800f852:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800f856:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800f85a:	9101      	str	r1, [sp, #4]
 800f85c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800f860:	f000 ff60 	bl	8010724 <uxr_submessage_padding>
 800f864:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f868:	f105 0904 	add.w	r9, r5, #4
 800f86c:	2b01      	cmp	r3, #1
 800f86e:	4481      	add	r9, r0
 800f870:	d01d      	beq.n	800f8ae <uxr_prepare_stream_to_write_submessage+0x6a>
 800f872:	2b02      	cmp	r3, #2
 800f874:	d116      	bne.n	800f8a4 <uxr_prepare_stream_to_write_submessage+0x60>
 800f876:	4621      	mov	r1, r4
 800f878:	f10a 0008 	add.w	r0, sl, #8
 800f87c:	f000 fede 	bl	801063c <uxr_get_output_reliable_stream>
 800f880:	4604      	mov	r4, r0
 800f882:	b158      	cbz	r0, 800f89c <uxr_prepare_stream_to_write_submessage+0x58>
 800f884:	4649      	mov	r1, r9
 800f886:	4632      	mov	r2, r6
 800f888:	f006 fd16 	bl	80162b8 <uxr_prepare_reliable_buffer_to_write>
 800f88c:	4604      	mov	r4, r0
 800f88e:	b12c      	cbz	r4, 800f89c <uxr_prepare_stream_to_write_submessage+0x58>
 800f890:	4643      	mov	r3, r8
 800f892:	b2aa      	uxth	r2, r5
 800f894:	4639      	mov	r1, r7
 800f896:	4630      	mov	r0, r6
 800f898:	f000 ff04 	bl	80106a4 <uxr_buffer_submessage_header>
 800f89c:	4620      	mov	r0, r4
 800f89e:	b002      	add	sp, #8
 800f8a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8a4:	2400      	movs	r4, #0
 800f8a6:	4620      	mov	r0, r4
 800f8a8:	b002      	add	sp, #8
 800f8aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8ae:	4621      	mov	r1, r4
 800f8b0:	f10a 0008 	add.w	r0, sl, #8
 800f8b4:	f000 feba 	bl	801062c <uxr_get_output_best_effort_stream>
 800f8b8:	4604      	mov	r4, r0
 800f8ba:	2800      	cmp	r0, #0
 800f8bc:	d0ee      	beq.n	800f89c <uxr_prepare_stream_to_write_submessage+0x58>
 800f8be:	4649      	mov	r1, r9
 800f8c0:	4632      	mov	r2, r6
 800f8c2:	f006 fc29 	bl	8016118 <uxr_prepare_best_effort_buffer_to_write>
 800f8c6:	4604      	mov	r4, r0
 800f8c8:	e7e1      	b.n	800f88e <uxr_prepare_stream_to_write_submessage+0x4a>
 800f8ca:	bf00      	nop

0800f8cc <uxr_init_session_info>:
 800f8cc:	0e13      	lsrs	r3, r2, #24
 800f8ce:	7043      	strb	r3, [r0, #1]
 800f8d0:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800f8d4:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800f8d8:	7001      	strb	r1, [r0, #0]
 800f8da:	70c3      	strb	r3, [r0, #3]
 800f8dc:	2109      	movs	r1, #9
 800f8de:	23ff      	movs	r3, #255	@ 0xff
 800f8e0:	f880 c002 	strb.w	ip, [r0, #2]
 800f8e4:	7102      	strb	r2, [r0, #4]
 800f8e6:	80c1      	strh	r1, [r0, #6]
 800f8e8:	7143      	strb	r3, [r0, #5]
 800f8ea:	4770      	bx	lr

0800f8ec <uxr_buffer_create_session>:
 800f8ec:	b530      	push	{r4, r5, lr}
 800f8ee:	b089      	sub	sp, #36	@ 0x24
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	4d12      	ldr	r5, [pc, #72]	@ (800f93c <uxr_buffer_create_session+0x50>)
 800f8f4:	9307      	str	r3, [sp, #28]
 800f8f6:	f8ad 201c 	strh.w	r2, [sp, #28]
 800f8fa:	2201      	movs	r2, #1
 800f8fc:	9301      	str	r3, [sp, #4]
 800f8fe:	80c2      	strh	r2, [r0, #6]
 800f900:	f88d 2004 	strb.w	r2, [sp, #4]
 800f904:	682a      	ldr	r2, [r5, #0]
 800f906:	9200      	str	r2, [sp, #0]
 800f908:	88aa      	ldrh	r2, [r5, #4]
 800f90a:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f90e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800f912:	9202      	str	r2, [sp, #8]
 800f914:	460c      	mov	r4, r1
 800f916:	7802      	ldrb	r2, [r0, #0]
 800f918:	9303      	str	r3, [sp, #12]
 800f91a:	4619      	mov	r1, r3
 800f91c:	f88d 200c 	strb.w	r2, [sp, #12]
 800f920:	4620      	mov	r0, r4
 800f922:	2210      	movs	r2, #16
 800f924:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800f928:	9306      	str	r3, [sp, #24]
 800f92a:	f000 febb 	bl	80106a4 <uxr_buffer_submessage_header>
 800f92e:	4669      	mov	r1, sp
 800f930:	4620      	mov	r0, r4
 800f932:	f001 fe13 	bl	801155c <uxr_serialize_CREATE_CLIENT_Payload>
 800f936:	b009      	add	sp, #36	@ 0x24
 800f938:	bd30      	pop	{r4, r5, pc}
 800f93a:	bf00      	nop
 800f93c:	080186ec 	.word	0x080186ec

0800f940 <uxr_buffer_delete_session>:
 800f940:	b510      	push	{r4, lr}
 800f942:	4b0c      	ldr	r3, [pc, #48]	@ (800f974 <uxr_buffer_delete_session+0x34>)
 800f944:	b082      	sub	sp, #8
 800f946:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800f94a:	f8ad c006 	strh.w	ip, [sp, #6]
 800f94e:	460c      	mov	r4, r1
 800f950:	2202      	movs	r2, #2
 800f952:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f956:	80c2      	strh	r2, [r0, #6]
 800f958:	f8ad 3004 	strh.w	r3, [sp, #4]
 800f95c:	2204      	movs	r2, #4
 800f95e:	2300      	movs	r3, #0
 800f960:	2103      	movs	r1, #3
 800f962:	4620      	mov	r0, r4
 800f964:	f000 fe9e 	bl	80106a4 <uxr_buffer_submessage_header>
 800f968:	a901      	add	r1, sp, #4
 800f96a:	4620      	mov	r0, r4
 800f96c:	f001 fe9c 	bl	80116a8 <uxr_serialize_DELETE_Payload>
 800f970:	b002      	add	sp, #8
 800f972:	bd10      	pop	{r4, pc}
 800f974:	080186ec 	.word	0x080186ec

0800f978 <uxr_read_create_session_status>:
 800f978:	b510      	push	{r4, lr}
 800f97a:	b088      	sub	sp, #32
 800f97c:	4604      	mov	r4, r0
 800f97e:	4608      	mov	r0, r1
 800f980:	a901      	add	r1, sp, #4
 800f982:	f001 fea1 	bl	80116c8 <uxr_deserialize_STATUS_AGENT_Payload>
 800f986:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f98a:	7163      	strb	r3, [r4, #5]
 800f98c:	b008      	add	sp, #32
 800f98e:	bd10      	pop	{r4, pc}

0800f990 <uxr_read_delete_session_status>:
 800f990:	b510      	push	{r4, lr}
 800f992:	4604      	mov	r4, r0
 800f994:	b084      	sub	sp, #16
 800f996:	4608      	mov	r0, r1
 800f998:	a902      	add	r1, sp, #8
 800f99a:	f001 fec5 	bl	8011728 <uxr_deserialize_STATUS_Payload>
 800f99e:	88e3      	ldrh	r3, [r4, #6]
 800f9a0:	2b02      	cmp	r3, #2
 800f9a2:	d001      	beq.n	800f9a8 <uxr_read_delete_session_status+0x18>
 800f9a4:	b004      	add	sp, #16
 800f9a6:	bd10      	pop	{r4, pc}
 800f9a8:	f10d 000a 	add.w	r0, sp, #10
 800f9ac:	f7fe feb2 	bl	800e714 <uxr_object_id_from_raw>
 800f9b0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800f9b4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800f9b8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f9bc:	b29b      	uxth	r3, r3
 800f9be:	2b02      	cmp	r3, #2
 800f9c0:	bf04      	itt	eq
 800f9c2:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800f9c6:	7163      	strbeq	r3, [r4, #5]
 800f9c8:	b004      	add	sp, #16
 800f9ca:	bd10      	pop	{r4, pc}

0800f9cc <uxr_stamp_create_session_header>:
 800f9cc:	b510      	push	{r4, lr}
 800f9ce:	2208      	movs	r2, #8
 800f9d0:	b08a      	sub	sp, #40	@ 0x28
 800f9d2:	4604      	mov	r4, r0
 800f9d4:	eb0d 0002 	add.w	r0, sp, r2
 800f9d8:	f7fc f860 	bl	800ba9c <ucdr_init_buffer>
 800f9dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9e0:	9400      	str	r4, [sp, #0]
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	461a      	mov	r2, r3
 800f9e6:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800f9ea:	a802      	add	r0, sp, #8
 800f9ec:	f001 f854 	bl	8010a98 <uxr_serialize_message_header>
 800f9f0:	b00a      	add	sp, #40	@ 0x28
 800f9f2:	bd10      	pop	{r4, pc}

0800f9f4 <uxr_stamp_session_header>:
 800f9f4:	b530      	push	{r4, r5, lr}
 800f9f6:	b08d      	sub	sp, #52	@ 0x34
 800f9f8:	4604      	mov	r4, r0
 800f9fa:	460d      	mov	r5, r1
 800f9fc:	9203      	str	r2, [sp, #12]
 800f9fe:	4619      	mov	r1, r3
 800fa00:	a804      	add	r0, sp, #16
 800fa02:	2208      	movs	r2, #8
 800fa04:	f7fc f84a 	bl	800ba9c <ucdr_init_buffer>
 800fa08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa0c:	9b03      	ldr	r3, [sp, #12]
 800fa0e:	9400      	str	r4, [sp, #0]
 800fa10:	462a      	mov	r2, r5
 800fa12:	a804      	add	r0, sp, #16
 800fa14:	f001 f840 	bl	8010a98 <uxr_serialize_message_header>
 800fa18:	b00d      	add	sp, #52	@ 0x34
 800fa1a:	bd30      	pop	{r4, r5, pc}

0800fa1c <uxr_read_session_header>:
 800fa1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa20:	4607      	mov	r7, r0
 800fa22:	b084      	sub	sp, #16
 800fa24:	4608      	mov	r0, r1
 800fa26:	460c      	mov	r4, r1
 800fa28:	4615      	mov	r5, r2
 800fa2a:	461e      	mov	r6, r3
 800fa2c:	f7fc f866 	bl	800bafc <ucdr_buffer_remaining>
 800fa30:	2808      	cmp	r0, #8
 800fa32:	d803      	bhi.n	800fa3c <uxr_read_session_header+0x20>
 800fa34:	2000      	movs	r0, #0
 800fa36:	b004      	add	sp, #16
 800fa38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa3c:	f10d 080c 	add.w	r8, sp, #12
 800fa40:	4633      	mov	r3, r6
 800fa42:	462a      	mov	r2, r5
 800fa44:	f8cd 8000 	str.w	r8, [sp]
 800fa48:	4620      	mov	r0, r4
 800fa4a:	f10d 010b 	add.w	r1, sp, #11
 800fa4e:	f001 f841 	bl	8010ad4 <uxr_deserialize_message_header>
 800fa52:	783a      	ldrb	r2, [r7, #0]
 800fa54:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800fa58:	4293      	cmp	r3, r2
 800fa5a:	d1eb      	bne.n	800fa34 <uxr_read_session_header+0x18>
 800fa5c:	061b      	lsls	r3, r3, #24
 800fa5e:	d41c      	bmi.n	800fa9a <uxr_read_session_header+0x7e>
 800fa60:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800fa64:	787b      	ldrb	r3, [r7, #1]
 800fa66:	429a      	cmp	r2, r3
 800fa68:	d003      	beq.n	800fa72 <uxr_read_session_header+0x56>
 800fa6a:	2001      	movs	r0, #1
 800fa6c:	f080 0001 	eor.w	r0, r0, #1
 800fa70:	e7e1      	b.n	800fa36 <uxr_read_session_header+0x1a>
 800fa72:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800fa76:	78bb      	ldrb	r3, [r7, #2]
 800fa78:	429a      	cmp	r2, r3
 800fa7a:	f107 0102 	add.w	r1, r7, #2
 800fa7e:	d1f4      	bne.n	800fa6a <uxr_read_session_header+0x4e>
 800fa80:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800fa84:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fa88:	429a      	cmp	r2, r3
 800fa8a:	d1ee      	bne.n	800fa6a <uxr_read_session_header+0x4e>
 800fa8c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800fa90:	784b      	ldrb	r3, [r1, #1]
 800fa92:	429a      	cmp	r2, r3
 800fa94:	d1e9      	bne.n	800fa6a <uxr_read_session_header+0x4e>
 800fa96:	2000      	movs	r0, #0
 800fa98:	e7e8      	b.n	800fa6c <uxr_read_session_header+0x50>
 800fa9a:	2001      	movs	r0, #1
 800fa9c:	e7cb      	b.n	800fa36 <uxr_read_session_header+0x1a>
 800fa9e:	bf00      	nop

0800faa0 <uxr_session_header_offset>:
 800faa0:	f990 3000 	ldrsb.w	r3, [r0]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	bfac      	ite	ge
 800faa8:	2008      	movge	r0, #8
 800faaa:	2004      	movlt	r0, #4
 800faac:	4770      	bx	lr
 800faae:	bf00      	nop

0800fab0 <uxr_init_base_object_request>:
 800fab0:	b510      	push	{r4, lr}
 800fab2:	88c3      	ldrh	r3, [r0, #6]
 800fab4:	b082      	sub	sp, #8
 800fab6:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800faba:	9101      	str	r1, [sp, #4]
 800fabc:	f1a3 010a 	sub.w	r1, r3, #10
 800fac0:	b289      	uxth	r1, r1
 800fac2:	42a1      	cmp	r1, r4
 800fac4:	d80e      	bhi.n	800fae4 <uxr_init_base_object_request+0x34>
 800fac6:	3301      	adds	r3, #1
 800fac8:	b29c      	uxth	r4, r3
 800faca:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800face:	b2db      	uxtb	r3, r3
 800fad0:	80c4      	strh	r4, [r0, #6]
 800fad2:	9801      	ldr	r0, [sp, #4]
 800fad4:	7011      	strb	r1, [r2, #0]
 800fad6:	7053      	strb	r3, [r2, #1]
 800fad8:	1c91      	adds	r1, r2, #2
 800fada:	f7fe fe2f 	bl	800e73c <uxr_object_id_to_raw>
 800fade:	4620      	mov	r0, r4
 800fae0:	b002      	add	sp, #8
 800fae2:	bd10      	pop	{r4, pc}
 800fae4:	230a      	movs	r3, #10
 800fae6:	2100      	movs	r1, #0
 800fae8:	461c      	mov	r4, r3
 800faea:	e7f1      	b.n	800fad0 <uxr_init_base_object_request+0x20>

0800faec <uxr_parse_base_object_request>:
 800faec:	b570      	push	{r4, r5, r6, lr}
 800faee:	4604      	mov	r4, r0
 800faf0:	3002      	adds	r0, #2
 800faf2:	460d      	mov	r5, r1
 800faf4:	4616      	mov	r6, r2
 800faf6:	f7fe fe0d 	bl	800e714 <uxr_object_id_from_raw>
 800fafa:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800fafe:	8028      	strh	r0, [r5, #0]
 800fb00:	806b      	strh	r3, [r5, #2]
 800fb02:	7822      	ldrb	r2, [r4, #0]
 800fb04:	7863      	ldrb	r3, [r4, #1]
 800fb06:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800fb0a:	8033      	strh	r3, [r6, #0]
 800fb0c:	bd70      	pop	{r4, r5, r6, pc}
 800fb0e:	bf00      	nop

0800fb10 <uxr_init_framing_io>:
 800fb10:	2300      	movs	r3, #0
 800fb12:	7041      	strb	r1, [r0, #1]
 800fb14:	7003      	strb	r3, [r0, #0]
 800fb16:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800fb18:	4770      	bx	lr
 800fb1a:	bf00      	nop

0800fb1c <uxr_write_framed_msg>:
 800fb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb20:	4617      	mov	r7, r2
 800fb22:	7842      	ldrb	r2, [r0, #1]
 800fb24:	b083      	sub	sp, #12
 800fb26:	460e      	mov	r6, r1
 800fb28:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 800fb2c:	469a      	mov	sl, r3
 800fb2e:	2901      	cmp	r1, #1
 800fb30:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 800fb34:	4604      	mov	r4, r0
 800fb36:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 800fb3a:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800fb3e:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 800fb42:	f240 8137 	bls.w	800fdb4 <uxr_write_framed_msg+0x298>
 800fb46:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800fb4a:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 800fb4e:	2901      	cmp	r1, #1
 800fb50:	f04f 0202 	mov.w	r2, #2
 800fb54:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fb58:	f240 808f 	bls.w	800fc7a <uxr_write_framed_msg+0x15e>
 800fb5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fb5e:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 800fb62:	b2dd      	uxtb	r5, r3
 800fb64:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800fb68:	2203      	movs	r2, #3
 800fb6a:	2901      	cmp	r1, #1
 800fb6c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fb70:	f240 809a 	bls.w	800fca8 <uxr_write_framed_msg+0x18c>
 800fb74:	18a1      	adds	r1, r4, r2
 800fb76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fb78:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800fb7c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800fb80:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800fb84:	3201      	adds	r2, #1
 800fb86:	2801      	cmp	r0, #1
 800fb88:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fb8c:	f240 80a0 	bls.w	800fcd0 <uxr_write_framed_msg+0x1b4>
 800fb90:	18a0      	adds	r0, r4, r2
 800fb92:	3201      	adds	r2, #1
 800fb94:	b2d2      	uxtb	r2, r2
 800fb96:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800fb9a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	f000 80a9 	beq.w	800fcf6 <uxr_write_framed_msg+0x1da>
 800fba4:	f04f 0900 	mov.w	r9, #0
 800fba8:	46c8      	mov	r8, r9
 800fbaa:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800fbae:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800fbb2:	2901      	cmp	r1, #1
 800fbb4:	f240 80c3 	bls.w	800fd3e <uxr_write_framed_msg+0x222>
 800fbb8:	2a29      	cmp	r2, #41	@ 0x29
 800fbba:	f200 809f 	bhi.w	800fcfc <uxr_write_framed_msg+0x1e0>
 800fbbe:	18a1      	adds	r1, r4, r2
 800fbc0:	3201      	adds	r2, #1
 800fbc2:	b2d2      	uxtb	r2, r2
 800fbc4:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800fbc8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fbcc:	ea89 0303 	eor.w	r3, r9, r3
 800fbd0:	498c      	ldr	r1, [pc, #560]	@ (800fe04 <uxr_write_framed_msg+0x2e8>)
 800fbd2:	b2db      	uxtb	r3, r3
 800fbd4:	f108 0801 	add.w	r8, r8, #1
 800fbd8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fbdc:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 800fbe0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fbe2:	4543      	cmp	r3, r8
 800fbe4:	d8e1      	bhi.n	800fbaa <uxr_write_framed_msg+0x8e>
 800fbe6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800fbea:	fa5f f889 	uxtb.w	r8, r9
 800fbee:	9301      	str	r3, [sp, #4]
 800fbf0:	f04f 0900 	mov.w	r9, #0
 800fbf4:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 800fbf8:	fa5f f18a 	uxtb.w	r1, sl
 800fbfc:	2901      	cmp	r1, #1
 800fbfe:	d921      	bls.n	800fc44 <uxr_write_framed_msg+0x128>
 800fc00:	2a29      	cmp	r2, #41	@ 0x29
 800fc02:	f240 80af 	bls.w	800fd64 <uxr_write_framed_msg+0x248>
 800fc06:	2500      	movs	r5, #0
 800fc08:	e000      	b.n	800fc0c <uxr_write_framed_msg+0xf0>
 800fc0a:	b160      	cbz	r0, 800fc26 <uxr_write_framed_msg+0x10a>
 800fc0c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800fc10:	1b52      	subs	r2, r2, r5
 800fc12:	465b      	mov	r3, fp
 800fc14:	4421      	add	r1, r4
 800fc16:	4638      	mov	r0, r7
 800fc18:	47b0      	blx	r6
 800fc1a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800fc1e:	4405      	add	r5, r0
 800fc20:	4295      	cmp	r5, r2
 800fc22:	d3f2      	bcc.n	800fc0a <uxr_write_framed_msg+0xee>
 800fc24:	d003      	beq.n	800fc2e <uxr_write_framed_msg+0x112>
 800fc26:	2000      	movs	r0, #0
 800fc28:	b003      	add	sp, #12
 800fc2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc2e:	fa5f f18a 	uxtb.w	r1, sl
 800fc32:	f04f 0300 	mov.w	r3, #0
 800fc36:	2901      	cmp	r1, #1
 800fc38:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800fc3c:	f04f 0200 	mov.w	r2, #0
 800fc40:	f200 8090 	bhi.w	800fd64 <uxr_write_framed_msg+0x248>
 800fc44:	1c51      	adds	r1, r2, #1
 800fc46:	b2c9      	uxtb	r1, r1
 800fc48:	2929      	cmp	r1, #41	@ 0x29
 800fc4a:	d8dc      	bhi.n	800fc06 <uxr_write_framed_msg+0xea>
 800fc4c:	18a5      	adds	r5, r4, r2
 800fc4e:	4421      	add	r1, r4
 800fc50:	3202      	adds	r2, #2
 800fc52:	f088 0820 	eor.w	r8, r8, #32
 800fc56:	4648      	mov	r0, r9
 800fc58:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 800fc5c:	b2d2      	uxtb	r2, r2
 800fc5e:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800fc62:	f04f 0901 	mov.w	r9, #1
 800fc66:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800fc6a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fc6e:	2800      	cmp	r0, #0
 800fc70:	f040 8085 	bne.w	800fd7e <uxr_write_framed_msg+0x262>
 800fc74:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fc78:	e7bc      	b.n	800fbf4 <uxr_write_framed_msg+0xd8>
 800fc7a:	4611      	mov	r1, r2
 800fc7c:	f04f 0c03 	mov.w	ip, #3
 800fc80:	2204      	movs	r2, #4
 800fc82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fc84:	4421      	add	r1, r4
 800fc86:	b2dd      	uxtb	r5, r3
 800fc88:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 800fc8c:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 800fc90:	44a4      	add	ip, r4
 800fc92:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800fc96:	f080 0020 	eor.w	r0, r0, #32
 800fc9a:	2901      	cmp	r1, #1
 800fc9c:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 800fca0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fca4:	f63f af66 	bhi.w	800fb74 <uxr_write_framed_msg+0x58>
 800fca8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fcaa:	18a0      	adds	r0, r4, r2
 800fcac:	f085 0520 	eor.w	r5, r5, #32
 800fcb0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800fcb4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800fcb8:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800fcbc:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 800fcc0:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800fcc4:	3202      	adds	r2, #2
 800fcc6:	2801      	cmp	r0, #1
 800fcc8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fccc:	f63f af60 	bhi.w	800fb90 <uxr_write_framed_msg+0x74>
 800fcd0:	1c50      	adds	r0, r2, #1
 800fcd2:	18a5      	adds	r5, r4, r2
 800fcd4:	fa54 f080 	uxtab	r0, r4, r0
 800fcd8:	3202      	adds	r2, #2
 800fcda:	f081 0120 	eor.w	r1, r1, #32
 800fcde:	b2d2      	uxtb	r2, r2
 800fce0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800fce4:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 800fce8:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800fcec:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	f47f af57 	bne.w	800fba4 <uxr_write_framed_msg+0x88>
 800fcf6:	9301      	str	r3, [sp, #4]
 800fcf8:	4698      	mov	r8, r3
 800fcfa:	e779      	b.n	800fbf0 <uxr_write_framed_msg+0xd4>
 800fcfc:	2500      	movs	r5, #0
 800fcfe:	e001      	b.n	800fd04 <uxr_write_framed_msg+0x1e8>
 800fd00:	2800      	cmp	r0, #0
 800fd02:	d090      	beq.n	800fc26 <uxr_write_framed_msg+0x10a>
 800fd04:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800fd08:	1b52      	subs	r2, r2, r5
 800fd0a:	465b      	mov	r3, fp
 800fd0c:	4421      	add	r1, r4
 800fd0e:	4638      	mov	r0, r7
 800fd10:	47b0      	blx	r6
 800fd12:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800fd16:	4405      	add	r5, r0
 800fd18:	4295      	cmp	r5, r2
 800fd1a:	d3f1      	bcc.n	800fd00 <uxr_write_framed_msg+0x1e4>
 800fd1c:	d183      	bne.n	800fc26 <uxr_write_framed_msg+0x10a>
 800fd1e:	f04f 0300 	mov.w	r3, #0
 800fd22:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800fd26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd28:	4543      	cmp	r3, r8
 800fd2a:	d964      	bls.n	800fdf6 <uxr_write_framed_msg+0x2da>
 800fd2c:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800fd30:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800fd34:	2901      	cmp	r1, #1
 800fd36:	f04f 0200 	mov.w	r2, #0
 800fd3a:	f63f af3d 	bhi.w	800fbb8 <uxr_write_framed_msg+0x9c>
 800fd3e:	1c51      	adds	r1, r2, #1
 800fd40:	b2c9      	uxtb	r1, r1
 800fd42:	2929      	cmp	r1, #41	@ 0x29
 800fd44:	d8da      	bhi.n	800fcfc <uxr_write_framed_msg+0x1e0>
 800fd46:	18a0      	adds	r0, r4, r2
 800fd48:	4421      	add	r1, r4
 800fd4a:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 800fd4e:	3202      	adds	r2, #2
 800fd50:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 800fd54:	b2d2      	uxtb	r2, r2
 800fd56:	f083 0020 	eor.w	r0, r3, #32
 800fd5a:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800fd5e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fd62:	e733      	b.n	800fbcc <uxr_write_framed_msg+0xb0>
 800fd64:	18a1      	adds	r1, r4, r2
 800fd66:	3201      	adds	r2, #1
 800fd68:	4648      	mov	r0, r9
 800fd6a:	b2d2      	uxtb	r2, r2
 800fd6c:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800fd70:	f04f 0901 	mov.w	r9, #1
 800fd74:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fd78:	2800      	cmp	r0, #0
 800fd7a:	f43f af7b 	beq.w	800fc74 <uxr_write_framed_msg+0x158>
 800fd7e:	2500      	movs	r5, #0
 800fd80:	e002      	b.n	800fd88 <uxr_write_framed_msg+0x26c>
 800fd82:	2800      	cmp	r0, #0
 800fd84:	f43f af4f 	beq.w	800fc26 <uxr_write_framed_msg+0x10a>
 800fd88:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800fd8c:	1b52      	subs	r2, r2, r5
 800fd8e:	465b      	mov	r3, fp
 800fd90:	4421      	add	r1, r4
 800fd92:	4638      	mov	r0, r7
 800fd94:	47b0      	blx	r6
 800fd96:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800fd9a:	4405      	add	r5, r0
 800fd9c:	4295      	cmp	r5, r2
 800fd9e:	d3f0      	bcc.n	800fd82 <uxr_write_framed_msg+0x266>
 800fda0:	f47f af41 	bne.w	800fc26 <uxr_write_framed_msg+0x10a>
 800fda4:	2300      	movs	r3, #0
 800fda6:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800fdaa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fdac:	b298      	uxth	r0, r3
 800fdae:	b003      	add	sp, #12
 800fdb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdb4:	217d      	movs	r1, #125	@ 0x7d
 800fdb6:	f082 0220 	eor.w	r2, r2, #32
 800fdba:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 800fdbe:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800fdc2:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 800fdc6:	2901      	cmp	r1, #1
 800fdc8:	f04f 0203 	mov.w	r2, #3
 800fdcc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fdd0:	d804      	bhi.n	800fddc <uxr_write_framed_msg+0x2c0>
 800fdd2:	4611      	mov	r1, r2
 800fdd4:	f04f 0c04 	mov.w	ip, #4
 800fdd8:	2205      	movs	r2, #5
 800fdda:	e752      	b.n	800fc82 <uxr_write_framed_msg+0x166>
 800fddc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fdde:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 800fde2:	b2dd      	uxtb	r5, r3
 800fde4:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800fde8:	2204      	movs	r2, #4
 800fdea:	2901      	cmp	r1, #1
 800fdec:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fdf0:	f63f aec0 	bhi.w	800fb74 <uxr_write_framed_msg+0x58>
 800fdf4:	e758      	b.n	800fca8 <uxr_write_framed_msg+0x18c>
 800fdf6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800fdfa:	fa5f f889 	uxtb.w	r8, r9
 800fdfe:	9301      	str	r3, [sp, #4]
 800fe00:	2200      	movs	r2, #0
 800fe02:	e6f5      	b.n	800fbf0 <uxr_write_framed_msg+0xd4>
 800fe04:	08018abc 	.word	0x08018abc

0800fe08 <uxr_framing_read_transport>:
 800fe08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe0c:	4604      	mov	r4, r0
 800fe0e:	b083      	sub	sp, #12
 800fe10:	461f      	mov	r7, r3
 800fe12:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800fe16:	4689      	mov	r9, r1
 800fe18:	4692      	mov	sl, r2
 800fe1a:	f000 fc89 	bl	8010730 <uxr_millis>
 800fe1e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800fe22:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800fe26:	42b3      	cmp	r3, r6
 800fe28:	4680      	mov	r8, r0
 800fe2a:	d061      	beq.n	800fef0 <uxr_framing_read_transport+0xe8>
 800fe2c:	d81c      	bhi.n	800fe68 <uxr_framing_read_transport+0x60>
 800fe2e:	1e75      	subs	r5, r6, #1
 800fe30:	1aed      	subs	r5, r5, r3
 800fe32:	b2ed      	uxtb	r5, r5
 800fe34:	2600      	movs	r6, #0
 800fe36:	455d      	cmp	r5, fp
 800fe38:	d81f      	bhi.n	800fe7a <uxr_framing_read_transport+0x72>
 800fe3a:	19ab      	adds	r3, r5, r6
 800fe3c:	455b      	cmp	r3, fp
 800fe3e:	bf84      	itt	hi
 800fe40:	ebab 0605 	subhi.w	r6, fp, r5
 800fe44:	b2f6      	uxtbhi	r6, r6
 800fe46:	b9ed      	cbnz	r5, 800fe84 <uxr_framing_read_transport+0x7c>
 800fe48:	f04f 0b00 	mov.w	fp, #0
 800fe4c:	f000 fc70 	bl	8010730 <uxr_millis>
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	eba0 0808 	sub.w	r8, r0, r8
 800fe56:	eba3 0308 	sub.w	r3, r3, r8
 800fe5a:	4658      	mov	r0, fp
 800fe5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fe60:	603b      	str	r3, [r7, #0]
 800fe62:	b003      	add	sp, #12
 800fe64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe68:	2e00      	cmp	r6, #0
 800fe6a:	d049      	beq.n	800ff00 <uxr_framing_read_transport+0xf8>
 800fe6c:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 800fe70:	b2ed      	uxtb	r5, r5
 800fe72:	3e01      	subs	r6, #1
 800fe74:	455d      	cmp	r5, fp
 800fe76:	b2f6      	uxtb	r6, r6
 800fe78:	d9df      	bls.n	800fe3a <uxr_framing_read_transport+0x32>
 800fe7a:	fa5f f58b 	uxtb.w	r5, fp
 800fe7e:	2600      	movs	r6, #0
 800fe80:	2d00      	cmp	r5, #0
 800fe82:	d0e1      	beq.n	800fe48 <uxr_framing_read_transport+0x40>
 800fe84:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800fe88:	3102      	adds	r1, #2
 800fe8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fe8c:	9300      	str	r3, [sp, #0]
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	4421      	add	r1, r4
 800fe92:	462a      	mov	r2, r5
 800fe94:	4650      	mov	r0, sl
 800fe96:	47c8      	blx	r9
 800fe98:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800fe9c:	4a1a      	ldr	r2, [pc, #104]	@ (800ff08 <uxr_framing_read_transport+0x100>)
 800fe9e:	4403      	add	r3, r0
 800fea0:	0859      	lsrs	r1, r3, #1
 800fea2:	fba2 2101 	umull	r2, r1, r2, r1
 800fea6:	0889      	lsrs	r1, r1, #2
 800fea8:	222a      	movs	r2, #42	@ 0x2a
 800feaa:	fb02 3111 	mls	r1, r2, r1, r3
 800feae:	4683      	mov	fp, r0
 800feb0:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800feb4:	2800      	cmp	r0, #0
 800feb6:	d0c7      	beq.n	800fe48 <uxr_framing_read_transport+0x40>
 800feb8:	42a8      	cmp	r0, r5
 800feba:	d1c7      	bne.n	800fe4c <uxr_framing_read_transport+0x44>
 800febc:	2e00      	cmp	r6, #0
 800febe:	d0c5      	beq.n	800fe4c <uxr_framing_read_transport+0x44>
 800fec0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fec2:	9300      	str	r3, [sp, #0]
 800fec4:	3102      	adds	r1, #2
 800fec6:	4632      	mov	r2, r6
 800fec8:	4421      	add	r1, r4
 800feca:	2300      	movs	r3, #0
 800fecc:	4650      	mov	r0, sl
 800fece:	47c8      	blx	r9
 800fed0:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800fed4:	4a0c      	ldr	r2, [pc, #48]	@ (800ff08 <uxr_framing_read_transport+0x100>)
 800fed6:	180b      	adds	r3, r1, r0
 800fed8:	0859      	lsrs	r1, r3, #1
 800feda:	fba2 1201 	umull	r1, r2, r2, r1
 800fede:	0892      	lsrs	r2, r2, #2
 800fee0:	212a      	movs	r1, #42	@ 0x2a
 800fee2:	fb01 3312 	mls	r3, r1, r2, r3
 800fee6:	eb00 0b05 	add.w	fp, r0, r5
 800feea:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800feee:	e7ad      	b.n	800fe4c <uxr_framing_read_transport+0x44>
 800fef0:	2600      	movs	r6, #0
 800fef2:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800fef6:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800fef8:	d9bf      	bls.n	800fe7a <uxr_framing_read_transport+0x72>
 800fefa:	2102      	movs	r1, #2
 800fefc:	2529      	movs	r5, #41	@ 0x29
 800fefe:	e7c4      	b.n	800fe8a <uxr_framing_read_transport+0x82>
 800ff00:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 800ff04:	b2ed      	uxtb	r5, r5
 800ff06:	e796      	b.n	800fe36 <uxr_framing_read_transport+0x2e>
 800ff08:	30c30c31 	.word	0x30c30c31

0800ff0c <uxr_read_framed_msg>:
 800ff0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff10:	461e      	mov	r6, r3
 800ff12:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 800ff16:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800ff1a:	429d      	cmp	r5, r3
 800ff1c:	b083      	sub	sp, #12
 800ff1e:	4604      	mov	r4, r0
 800ff20:	4688      	mov	r8, r1
 800ff22:	4691      	mov	r9, r2
 800ff24:	f000 8188 	beq.w	8010238 <uxr_read_framed_msg+0x32c>
 800ff28:	7823      	ldrb	r3, [r4, #0]
 800ff2a:	4dc1      	ldr	r5, [pc, #772]	@ (8010230 <uxr_read_framed_msg+0x324>)
 800ff2c:	4fc1      	ldr	r7, [pc, #772]	@ (8010234 <uxr_read_framed_msg+0x328>)
 800ff2e:	2b07      	cmp	r3, #7
 800ff30:	d8fd      	bhi.n	800ff2e <uxr_read_framed_msg+0x22>
 800ff32:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ff36:	0115      	.short	0x0115
 800ff38:	00d600f6 	.word	0x00d600f6
 800ff3c:	009000b9 	.word	0x009000b9
 800ff40:	0030004d 	.word	0x0030004d
 800ff44:	0008      	.short	0x0008
 800ff46:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800ff4a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800ff4e:	4299      	cmp	r1, r3
 800ff50:	f000 814a 	beq.w	80101e8 <uxr_read_framed_msg+0x2dc>
 800ff54:	18e2      	adds	r2, r4, r3
 800ff56:	7892      	ldrb	r2, [r2, #2]
 800ff58:	2a7d      	cmp	r2, #125	@ 0x7d
 800ff5a:	f000 8199 	beq.w	8010290 <uxr_read_framed_msg+0x384>
 800ff5e:	3301      	adds	r3, #1
 800ff60:	0858      	lsrs	r0, r3, #1
 800ff62:	fba5 1000 	umull	r1, r0, r5, r0
 800ff66:	0880      	lsrs	r0, r0, #2
 800ff68:	212a      	movs	r1, #42	@ 0x2a
 800ff6a:	fb01 3310 	mls	r3, r1, r0, r3
 800ff6e:	2a7e      	cmp	r2, #126	@ 0x7e
 800ff70:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ff74:	f000 8252 	beq.w	801041c <uxr_read_framed_msg+0x510>
 800ff78:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800ff7a:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 800ff7c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ff80:	b29b      	uxth	r3, r3
 800ff82:	2200      	movs	r2, #0
 800ff84:	4299      	cmp	r1, r3
 800ff86:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800ff88:	7022      	strb	r2, [r4, #0]
 800ff8a:	f000 8179 	beq.w	8010280 <uxr_read_framed_msg+0x374>
 800ff8e:	2000      	movs	r0, #0
 800ff90:	b003      	add	sp, #12
 800ff92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff96:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800ff9a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800ff9e:	4299      	cmp	r1, r3
 800ffa0:	f000 8131 	beq.w	8010206 <uxr_read_framed_msg+0x2fa>
 800ffa4:	18e2      	adds	r2, r4, r3
 800ffa6:	7890      	ldrb	r0, [r2, #2]
 800ffa8:	287d      	cmp	r0, #125	@ 0x7d
 800ffaa:	f000 8190 	beq.w	80102ce <uxr_read_framed_msg+0x3c2>
 800ffae:	3301      	adds	r3, #1
 800ffb0:	085a      	lsrs	r2, r3, #1
 800ffb2:	fba5 1202 	umull	r1, r2, r5, r2
 800ffb6:	0892      	lsrs	r2, r2, #2
 800ffb8:	212a      	movs	r1, #42	@ 0x2a
 800ffba:	fb01 3312 	mls	r3, r1, r2, r3
 800ffbe:	287e      	cmp	r0, #126	@ 0x7e
 800ffc0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ffc4:	f000 821a 	beq.w	80103fc <uxr_read_framed_msg+0x4f0>
 800ffc8:	2307      	movs	r3, #7
 800ffca:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800ffcc:	7023      	strb	r3, [r4, #0]
 800ffce:	e7ae      	b.n	800ff2e <uxr_read_framed_msg+0x22>
 800ffd0:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800ffd2:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800ffd6:	459e      	cmp	lr, r3
 800ffd8:	d938      	bls.n	801004c <uxr_read_framed_msg+0x140>
 800ffda:	ee07 8a90 	vmov	s15, r8
 800ffde:	212a      	movs	r1, #42	@ 0x2a
 800ffe0:	e020      	b.n	8010024 <uxr_read_framed_msg+0x118>
 800ffe2:	f89b c002 	ldrb.w	ip, [fp, #2]
 800ffe6:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 800ffea:	f000 80d4 	beq.w	8010196 <uxr_read_framed_msg+0x28a>
 800ffee:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800fff2:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800fff6:	f000 8219 	beq.w	801042c <uxr_read_framed_msg+0x520>
 800fffa:	f806 c003 	strb.w	ip, [r6, r3]
 800fffe:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8010002:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8010004:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8010008:	ea8a 000c 	eor.w	r0, sl, ip
 801000c:	b2c0      	uxtb	r0, r0
 801000e:	3301      	adds	r3, #1
 8010010:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8010014:	b29b      	uxth	r3, r3
 8010016:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 801001a:	4573      	cmp	r3, lr
 801001c:	8663      	strh	r3, [r4, #50]	@ 0x32
 801001e:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8010020:	f080 8120 	bcs.w	8010264 <uxr_read_framed_msg+0x358>
 8010024:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8010028:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801002c:	f100 0c01 	add.w	ip, r0, #1
 8010030:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8010034:	fba5 8202 	umull	r8, r2, r5, r2
 8010038:	0892      	lsrs	r2, r2, #2
 801003a:	4582      	cmp	sl, r0
 801003c:	eb04 0b00 	add.w	fp, r4, r0
 8010040:	fb01 c212 	mls	r2, r1, r2, ip
 8010044:	d1cd      	bne.n	800ffe2 <uxr_read_framed_msg+0xd6>
 8010046:	ee17 8a90 	vmov	r8, s15
 801004a:	459e      	cmp	lr, r3
 801004c:	f040 8111 	bne.w	8010272 <uxr_read_framed_msg+0x366>
 8010050:	2306      	movs	r3, #6
 8010052:	7023      	strb	r3, [r4, #0]
 8010054:	e76b      	b.n	800ff2e <uxr_read_framed_msg+0x22>
 8010056:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801005a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801005e:	4298      	cmp	r0, r3
 8010060:	f000 80c2 	beq.w	80101e8 <uxr_read_framed_msg+0x2dc>
 8010064:	18e2      	adds	r2, r4, r3
 8010066:	7891      	ldrb	r1, [r2, #2]
 8010068:	297d      	cmp	r1, #125	@ 0x7d
 801006a:	f000 814c 	beq.w	8010306 <uxr_read_framed_msg+0x3fa>
 801006e:	3301      	adds	r3, #1
 8010070:	085a      	lsrs	r2, r3, #1
 8010072:	fba5 0202 	umull	r0, r2, r5, r2
 8010076:	0892      	lsrs	r2, r2, #2
 8010078:	202a      	movs	r0, #42	@ 0x2a
 801007a:	fb00 3312 	mls	r3, r0, r2, r3
 801007e:	297e      	cmp	r1, #126	@ 0x7e
 8010080:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010084:	f000 81ca 	beq.w	801041c <uxr_read_framed_msg+0x510>
 8010088:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801008a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801008e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010090:	b29b      	uxth	r3, r3
 8010092:	2000      	movs	r0, #0
 8010094:	428b      	cmp	r3, r1
 8010096:	8623      	strh	r3, [r4, #48]	@ 0x30
 8010098:	8660      	strh	r0, [r4, #50]	@ 0x32
 801009a:	86e0      	strh	r0, [r4, #54]	@ 0x36
 801009c:	f240 80df 	bls.w	801025e <uxr_read_framed_msg+0x352>
 80100a0:	7020      	strb	r0, [r4, #0]
 80100a2:	b003      	add	sp, #12
 80100a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100a8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80100ac:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80100b0:	4299      	cmp	r1, r3
 80100b2:	f000 80a8 	beq.w	8010206 <uxr_read_framed_msg+0x2fa>
 80100b6:	18e2      	adds	r2, r4, r3
 80100b8:	7890      	ldrb	r0, [r2, #2]
 80100ba:	287d      	cmp	r0, #125	@ 0x7d
 80100bc:	f000 8164 	beq.w	8010388 <uxr_read_framed_msg+0x47c>
 80100c0:	3301      	adds	r3, #1
 80100c2:	085a      	lsrs	r2, r3, #1
 80100c4:	fba5 1202 	umull	r1, r2, r5, r2
 80100c8:	0892      	lsrs	r2, r2, #2
 80100ca:	212a      	movs	r1, #42	@ 0x2a
 80100cc:	fb01 3312 	mls	r3, r1, r2, r3
 80100d0:	287e      	cmp	r0, #126	@ 0x7e
 80100d2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80100d6:	f000 8191 	beq.w	80103fc <uxr_read_framed_msg+0x4f0>
 80100da:	2304      	movs	r3, #4
 80100dc:	8620      	strh	r0, [r4, #48]	@ 0x30
 80100de:	7023      	strb	r3, [r4, #0]
 80100e0:	e725      	b.n	800ff2e <uxr_read_framed_msg+0x22>
 80100e2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80100e6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80100ea:	4290      	cmp	r0, r2
 80100ec:	f000 80b3 	beq.w	8010256 <uxr_read_framed_msg+0x34a>
 80100f0:	18a3      	adds	r3, r4, r2
 80100f2:	7899      	ldrb	r1, [r3, #2]
 80100f4:	297d      	cmp	r1, #125	@ 0x7d
 80100f6:	f000 8164 	beq.w	80103c2 <uxr_read_framed_msg+0x4b6>
 80100fa:	3201      	adds	r2, #1
 80100fc:	0850      	lsrs	r0, r2, #1
 80100fe:	fba5 3000 	umull	r3, r0, r5, r0
 8010102:	0880      	lsrs	r0, r0, #2
 8010104:	232a      	movs	r3, #42	@ 0x2a
 8010106:	fb03 2210 	mls	r2, r3, r0, r2
 801010a:	297e      	cmp	r1, #126	@ 0x7e
 801010c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8010110:	f000 8188 	beq.w	8010424 <uxr_read_framed_msg+0x518>
 8010114:	7863      	ldrb	r3, [r4, #1]
 8010116:	428b      	cmp	r3, r1
 8010118:	bf0c      	ite	eq
 801011a:	2303      	moveq	r3, #3
 801011c:	2300      	movne	r3, #0
 801011e:	7023      	strb	r3, [r4, #0]
 8010120:	e705      	b.n	800ff2e <uxr_read_framed_msg+0x22>
 8010122:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010126:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801012a:	2200      	movs	r2, #0
 801012c:	4299      	cmp	r1, r3
 801012e:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8010132:	d06c      	beq.n	801020e <uxr_read_framed_msg+0x302>
 8010134:	18e2      	adds	r2, r4, r3
 8010136:	7890      	ldrb	r0, [r2, #2]
 8010138:	287d      	cmp	r0, #125	@ 0x7d
 801013a:	f000 8101 	beq.w	8010340 <uxr_read_framed_msg+0x434>
 801013e:	3301      	adds	r3, #1
 8010140:	085a      	lsrs	r2, r3, #1
 8010142:	fba5 1202 	umull	r1, r2, r5, r2
 8010146:	0892      	lsrs	r2, r2, #2
 8010148:	212a      	movs	r1, #42	@ 0x2a
 801014a:	fb01 3312 	mls	r3, r1, r2, r3
 801014e:	287e      	cmp	r0, #126	@ 0x7e
 8010150:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8010154:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010158:	d059      	beq.n	801020e <uxr_read_framed_msg+0x302>
 801015a:	2302      	movs	r3, #2
 801015c:	7023      	strb	r3, [r4, #0]
 801015e:	e6e6      	b.n	800ff2e <uxr_read_framed_msg+0x22>
 8010160:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8010164:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8010168:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 801016c:	1c51      	adds	r1, r2, #1
 801016e:	084b      	lsrs	r3, r1, #1
 8010170:	fba5 c303 	umull	ip, r3, r5, r3
 8010174:	089b      	lsrs	r3, r3, #2
 8010176:	fb0e 1313 	mls	r3, lr, r3, r1
 801017a:	4592      	cmp	sl, r2
 801017c:	eb04 0002 	add.w	r0, r4, r2
 8010180:	b2da      	uxtb	r2, r3
 8010182:	f43f af04 	beq.w	800ff8e <uxr_read_framed_msg+0x82>
 8010186:	7883      	ldrb	r3, [r0, #2]
 8010188:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801018c:	2b7e      	cmp	r3, #126	@ 0x7e
 801018e:	d1ed      	bne.n	801016c <uxr_read_framed_msg+0x260>
 8010190:	2301      	movs	r3, #1
 8010192:	7023      	strb	r3, [r4, #0]
 8010194:	e6cb      	b.n	800ff2e <uxr_read_framed_msg+0x22>
 8010196:	f100 0c01 	add.w	ip, r0, #1
 801019a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801019e:	fba5 8202 	umull	r8, r2, r5, r2
 80101a2:	0892      	lsrs	r2, r2, #2
 80101a4:	fb01 c212 	mls	r2, r1, r2, ip
 80101a8:	eb04 0c02 	add.w	ip, r4, r2
 80101ac:	b2d2      	uxtb	r2, r2
 80101ae:	4592      	cmp	sl, r2
 80101b0:	f100 0002 	add.w	r0, r0, #2
 80101b4:	f43f af47 	beq.w	8010046 <uxr_read_framed_msg+0x13a>
 80101b8:	0842      	lsrs	r2, r0, #1
 80101ba:	f89c a002 	ldrb.w	sl, [ip, #2]
 80101be:	fba5 8202 	umull	r8, r2, r5, r2
 80101c2:	0892      	lsrs	r2, r2, #2
 80101c4:	fb01 0012 	mls	r0, r1, r2, r0
 80101c8:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 80101cc:	f08a 0c20 	eor.w	ip, sl, #32
 80101d0:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 80101d4:	f47f af11 	bne.w	800fffa <uxr_read_framed_msg+0xee>
 80101d8:	459e      	cmp	lr, r3
 80101da:	ee17 8a90 	vmov	r8, s15
 80101de:	f43f af37 	beq.w	8010050 <uxr_read_framed_msg+0x144>
 80101e2:	2301      	movs	r3, #1
 80101e4:	7023      	strb	r3, [r4, #0]
 80101e6:	e6a2      	b.n	800ff2e <uxr_read_framed_msg+0x22>
 80101e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80101ea:	9300      	str	r3, [sp, #0]
 80101ec:	2301      	movs	r3, #1
 80101ee:	9301      	str	r3, [sp, #4]
 80101f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80101f2:	464a      	mov	r2, r9
 80101f4:	4641      	mov	r1, r8
 80101f6:	4620      	mov	r0, r4
 80101f8:	f7ff fe06 	bl	800fe08 <uxr_framing_read_transport>
 80101fc:	2800      	cmp	r0, #0
 80101fe:	f43f aec6 	beq.w	800ff8e <uxr_read_framed_msg+0x82>
 8010202:	7823      	ldrb	r3, [r4, #0]
 8010204:	e693      	b.n	800ff2e <uxr_read_framed_msg+0x22>
 8010206:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010208:	9300      	str	r3, [sp, #0]
 801020a:	2302      	movs	r3, #2
 801020c:	e7ef      	b.n	80101ee <uxr_read_framed_msg+0x2e2>
 801020e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010210:	9300      	str	r3, [sp, #0]
 8010212:	2304      	movs	r3, #4
 8010214:	9301      	str	r3, [sp, #4]
 8010216:	464a      	mov	r2, r9
 8010218:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801021a:	4641      	mov	r1, r8
 801021c:	4620      	mov	r0, r4
 801021e:	f7ff fdf3 	bl	800fe08 <uxr_framing_read_transport>
 8010222:	2800      	cmp	r0, #0
 8010224:	d1ed      	bne.n	8010202 <uxr_read_framed_msg+0x2f6>
 8010226:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801022a:	2b7e      	cmp	r3, #126	@ 0x7e
 801022c:	d0e9      	beq.n	8010202 <uxr_read_framed_msg+0x2f6>
 801022e:	e6ae      	b.n	800ff8e <uxr_read_framed_msg+0x82>
 8010230:	30c30c31 	.word	0x30c30c31
 8010234:	08018abc 	.word	0x08018abc
 8010238:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801023a:	9300      	str	r3, [sp, #0]
 801023c:	2305      	movs	r3, #5
 801023e:	9301      	str	r3, [sp, #4]
 8010240:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010242:	f7ff fde1 	bl	800fe08 <uxr_framing_read_transport>
 8010246:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801024a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801024e:	429a      	cmp	r2, r3
 8010250:	f43f ae9d 	beq.w	800ff8e <uxr_read_framed_msg+0x82>
 8010254:	e668      	b.n	800ff28 <uxr_read_framed_msg+0x1c>
 8010256:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010258:	9300      	str	r3, [sp, #0]
 801025a:	2303      	movs	r3, #3
 801025c:	e7c7      	b.n	80101ee <uxr_read_framed_msg+0x2e2>
 801025e:	2305      	movs	r3, #5
 8010260:	7023      	strb	r3, [r4, #0]
 8010262:	e664      	b.n	800ff2e <uxr_read_framed_msg+0x22>
 8010264:	ee17 8a90 	vmov	r8, s15
 8010268:	f43f aef2 	beq.w	8010050 <uxr_read_framed_msg+0x144>
 801026c:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8010270:	d08e      	beq.n	8010190 <uxr_read_framed_msg+0x284>
 8010272:	ebae 0303 	sub.w	r3, lr, r3
 8010276:	3302      	adds	r3, #2
 8010278:	9301      	str	r3, [sp, #4]
 801027a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801027c:	9300      	str	r3, [sp, #0]
 801027e:	e7b7      	b.n	80101f0 <uxr_read_framed_msg+0x2e4>
 8010280:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010282:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8010286:	7013      	strb	r3, [r2, #0]
 8010288:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801028a:	b003      	add	sp, #12
 801028c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010290:	f103 0c01 	add.w	ip, r3, #1
 8010294:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8010298:	fba5 0202 	umull	r0, r2, r5, r2
 801029c:	0892      	lsrs	r2, r2, #2
 801029e:	202a      	movs	r0, #42	@ 0x2a
 80102a0:	fb00 c212 	mls	r2, r0, r2, ip
 80102a4:	fa5f fc82 	uxtb.w	ip, r2
 80102a8:	4561      	cmp	r1, ip
 80102aa:	d09d      	beq.n	80101e8 <uxr_read_framed_msg+0x2dc>
 80102ac:	3302      	adds	r3, #2
 80102ae:	4422      	add	r2, r4
 80102b0:	0859      	lsrs	r1, r3, #1
 80102b2:	7892      	ldrb	r2, [r2, #2]
 80102b4:	fba5 c101 	umull	ip, r1, r5, r1
 80102b8:	0889      	lsrs	r1, r1, #2
 80102ba:	fb00 3311 	mls	r3, r0, r1, r3
 80102be:	2a7e      	cmp	r2, #126	@ 0x7e
 80102c0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80102c4:	f000 80aa 	beq.w	801041c <uxr_read_framed_msg+0x510>
 80102c8:	f082 0220 	eor.w	r2, r2, #32
 80102cc:	e654      	b.n	800ff78 <uxr_read_framed_msg+0x6c>
 80102ce:	1c58      	adds	r0, r3, #1
 80102d0:	0842      	lsrs	r2, r0, #1
 80102d2:	fba5 c202 	umull	ip, r2, r5, r2
 80102d6:	0892      	lsrs	r2, r2, #2
 80102d8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80102dc:	fb0c 0212 	mls	r2, ip, r2, r0
 80102e0:	b2d0      	uxtb	r0, r2
 80102e2:	4281      	cmp	r1, r0
 80102e4:	d08f      	beq.n	8010206 <uxr_read_framed_msg+0x2fa>
 80102e6:	4422      	add	r2, r4
 80102e8:	3302      	adds	r3, #2
 80102ea:	7890      	ldrb	r0, [r2, #2]
 80102ec:	085a      	lsrs	r2, r3, #1
 80102ee:	fba5 1202 	umull	r1, r2, r5, r2
 80102f2:	0892      	lsrs	r2, r2, #2
 80102f4:	fb0c 3312 	mls	r3, ip, r2, r3
 80102f8:	287e      	cmp	r0, #126	@ 0x7e
 80102fa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80102fe:	d07d      	beq.n	80103fc <uxr_read_framed_msg+0x4f0>
 8010300:	f080 0020 	eor.w	r0, r0, #32
 8010304:	e660      	b.n	800ffc8 <uxr_read_framed_msg+0xbc>
 8010306:	1c59      	adds	r1, r3, #1
 8010308:	084a      	lsrs	r2, r1, #1
 801030a:	fba5 c202 	umull	ip, r2, r5, r2
 801030e:	0892      	lsrs	r2, r2, #2
 8010310:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8010314:	fb0c 1212 	mls	r2, ip, r2, r1
 8010318:	b2d1      	uxtb	r1, r2
 801031a:	4288      	cmp	r0, r1
 801031c:	f43f af64 	beq.w	80101e8 <uxr_read_framed_msg+0x2dc>
 8010320:	4422      	add	r2, r4
 8010322:	3302      	adds	r3, #2
 8010324:	7891      	ldrb	r1, [r2, #2]
 8010326:	085a      	lsrs	r2, r3, #1
 8010328:	fba5 0202 	umull	r0, r2, r5, r2
 801032c:	0892      	lsrs	r2, r2, #2
 801032e:	fb0c 3312 	mls	r3, ip, r2, r3
 8010332:	297e      	cmp	r1, #126	@ 0x7e
 8010334:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010338:	d070      	beq.n	801041c <uxr_read_framed_msg+0x510>
 801033a:	f081 0120 	eor.w	r1, r1, #32
 801033e:	e6a3      	b.n	8010088 <uxr_read_framed_msg+0x17c>
 8010340:	f103 0c01 	add.w	ip, r3, #1
 8010344:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8010348:	fba5 0202 	umull	r0, r2, r5, r2
 801034c:	0892      	lsrs	r2, r2, #2
 801034e:	202a      	movs	r0, #42	@ 0x2a
 8010350:	fb00 c212 	mls	r2, r0, r2, ip
 8010354:	fa5f fc82 	uxtb.w	ip, r2
 8010358:	4561      	cmp	r1, ip
 801035a:	f43f af58 	beq.w	801020e <uxr_read_framed_msg+0x302>
 801035e:	4422      	add	r2, r4
 8010360:	3302      	adds	r3, #2
 8010362:	7891      	ldrb	r1, [r2, #2]
 8010364:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8010368:	085a      	lsrs	r2, r3, #1
 801036a:	fba5 c202 	umull	ip, r2, r5, r2
 801036e:	0892      	lsrs	r2, r2, #2
 8010370:	fb00 3312 	mls	r3, r0, r2, r3
 8010374:	297e      	cmp	r1, #126	@ 0x7e
 8010376:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801037a:	f43f af48 	beq.w	801020e <uxr_read_framed_msg+0x302>
 801037e:	f081 0120 	eor.w	r1, r1, #32
 8010382:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8010386:	e6e8      	b.n	801015a <uxr_read_framed_msg+0x24e>
 8010388:	1c58      	adds	r0, r3, #1
 801038a:	0842      	lsrs	r2, r0, #1
 801038c:	fba5 c202 	umull	ip, r2, r5, r2
 8010390:	0892      	lsrs	r2, r2, #2
 8010392:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8010396:	fb0c 0212 	mls	r2, ip, r2, r0
 801039a:	b2d0      	uxtb	r0, r2
 801039c:	4281      	cmp	r1, r0
 801039e:	f43f af32 	beq.w	8010206 <uxr_read_framed_msg+0x2fa>
 80103a2:	4422      	add	r2, r4
 80103a4:	3302      	adds	r3, #2
 80103a6:	7890      	ldrb	r0, [r2, #2]
 80103a8:	085a      	lsrs	r2, r3, #1
 80103aa:	fba5 1202 	umull	r1, r2, r5, r2
 80103ae:	0892      	lsrs	r2, r2, #2
 80103b0:	fb0c 3312 	mls	r3, ip, r2, r3
 80103b4:	287e      	cmp	r0, #126	@ 0x7e
 80103b6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80103ba:	d01f      	beq.n	80103fc <uxr_read_framed_msg+0x4f0>
 80103bc:	f080 0020 	eor.w	r0, r0, #32
 80103c0:	e68b      	b.n	80100da <uxr_read_framed_msg+0x1ce>
 80103c2:	1c51      	adds	r1, r2, #1
 80103c4:	084b      	lsrs	r3, r1, #1
 80103c6:	fba5 c303 	umull	ip, r3, r5, r3
 80103ca:	089b      	lsrs	r3, r3, #2
 80103cc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80103d0:	fb0c 1313 	mls	r3, ip, r3, r1
 80103d4:	b2d9      	uxtb	r1, r3
 80103d6:	4288      	cmp	r0, r1
 80103d8:	f43f af3d 	beq.w	8010256 <uxr_read_framed_msg+0x34a>
 80103dc:	3202      	adds	r2, #2
 80103de:	4423      	add	r3, r4
 80103e0:	0850      	lsrs	r0, r2, #1
 80103e2:	789b      	ldrb	r3, [r3, #2]
 80103e4:	fba5 1000 	umull	r1, r0, r5, r0
 80103e8:	0880      	lsrs	r0, r0, #2
 80103ea:	fb0c 2210 	mls	r2, ip, r0, r2
 80103ee:	2b7e      	cmp	r3, #126	@ 0x7e
 80103f0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80103f4:	d016      	beq.n	8010424 <uxr_read_framed_msg+0x518>
 80103f6:	f083 0120 	eor.w	r1, r3, #32
 80103fa:	e68b      	b.n	8010114 <uxr_read_framed_msg+0x208>
 80103fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80103fe:	9300      	str	r3, [sp, #0]
 8010400:	2302      	movs	r3, #2
 8010402:	9301      	str	r3, [sp, #4]
 8010404:	464a      	mov	r2, r9
 8010406:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010408:	4641      	mov	r1, r8
 801040a:	4620      	mov	r0, r4
 801040c:	f7ff fcfc 	bl	800fe08 <uxr_framing_read_transport>
 8010410:	2800      	cmp	r0, #0
 8010412:	f47f aef6 	bne.w	8010202 <uxr_read_framed_msg+0x2f6>
 8010416:	2301      	movs	r3, #1
 8010418:	7023      	strb	r3, [r4, #0]
 801041a:	e588      	b.n	800ff2e <uxr_read_framed_msg+0x22>
 801041c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801041e:	9300      	str	r3, [sp, #0]
 8010420:	2301      	movs	r3, #1
 8010422:	e7ee      	b.n	8010402 <uxr_read_framed_msg+0x4f6>
 8010424:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010426:	9300      	str	r3, [sp, #0]
 8010428:	2303      	movs	r3, #3
 801042a:	e7ea      	b.n	8010402 <uxr_read_framed_msg+0x4f6>
 801042c:	ee17 8a90 	vmov	r8, s15
 8010430:	e6ae      	b.n	8010190 <uxr_read_framed_msg+0x284>
 8010432:	bf00      	nop

08010434 <uxr_stream_id>:
 8010434:	2901      	cmp	r1, #1
 8010436:	b082      	sub	sp, #8
 8010438:	d01d      	beq.n	8010476 <uxr_stream_id+0x42>
 801043a:	2902      	cmp	r1, #2
 801043c:	f04f 0c00 	mov.w	ip, #0
 8010440:	d01e      	beq.n	8010480 <uxr_stream_id+0x4c>
 8010442:	2300      	movs	r3, #0
 8010444:	f36c 0307 	bfi	r3, ip, #0, #8
 8010448:	f360 230f 	bfi	r3, r0, #8, #8
 801044c:	f361 4317 	bfi	r3, r1, #16, #8
 8010450:	f362 631f 	bfi	r3, r2, #24, #8
 8010454:	b2da      	uxtb	r2, r3
 8010456:	2000      	movs	r0, #0
 8010458:	f362 0007 	bfi	r0, r2, #0, #8
 801045c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010460:	f362 200f 	bfi	r0, r2, #8, #8
 8010464:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010468:	f362 4017 	bfi	r0, r2, #16, #8
 801046c:	0e1b      	lsrs	r3, r3, #24
 801046e:	f363 601f 	bfi	r0, r3, #24, #8
 8010472:	b002      	add	sp, #8
 8010474:	4770      	bx	lr
 8010476:	f100 0c01 	add.w	ip, r0, #1
 801047a:	fa5f fc8c 	uxtb.w	ip, ip
 801047e:	e7e0      	b.n	8010442 <uxr_stream_id+0xe>
 8010480:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8010484:	e7dd      	b.n	8010442 <uxr_stream_id+0xe>
 8010486:	bf00      	nop

08010488 <uxr_stream_id_from_raw>:
 8010488:	b082      	sub	sp, #8
 801048a:	b130      	cbz	r0, 801049a <uxr_stream_id_from_raw+0x12>
 801048c:	0603      	lsls	r3, r0, #24
 801048e:	d420      	bmi.n	80104d2 <uxr_stream_id_from_raw+0x4a>
 8010490:	1e42      	subs	r2, r0, #1
 8010492:	b2d2      	uxtb	r2, r2
 8010494:	f04f 0c01 	mov.w	ip, #1
 8010498:	e001      	b.n	801049e <uxr_stream_id_from_raw+0x16>
 801049a:	4684      	mov	ip, r0
 801049c:	4602      	mov	r2, r0
 801049e:	2300      	movs	r3, #0
 80104a0:	f360 0307 	bfi	r3, r0, #0, #8
 80104a4:	f362 230f 	bfi	r3, r2, #8, #8
 80104a8:	f36c 4317 	bfi	r3, ip, #16, #8
 80104ac:	f361 631f 	bfi	r3, r1, #24, #8
 80104b0:	b2da      	uxtb	r2, r3
 80104b2:	2000      	movs	r0, #0
 80104b4:	f362 0007 	bfi	r0, r2, #0, #8
 80104b8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80104bc:	f362 200f 	bfi	r0, r2, #8, #8
 80104c0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80104c4:	f362 4017 	bfi	r0, r2, #16, #8
 80104c8:	0e1b      	lsrs	r3, r3, #24
 80104ca:	f363 601f 	bfi	r0, r3, #24, #8
 80104ce:	b002      	add	sp, #8
 80104d0:	4770      	bx	lr
 80104d2:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 80104d6:	f04f 0c02 	mov.w	ip, #2
 80104da:	e7e0      	b.n	801049e <uxr_stream_id_from_raw+0x16>

080104dc <uxr_init_stream_storage>:
 80104dc:	2300      	movs	r3, #0
 80104de:	7403      	strb	r3, [r0, #16]
 80104e0:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 80104e4:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 80104e8:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 80104ec:	4770      	bx	lr
 80104ee:	bf00      	nop

080104f0 <uxr_reset_stream_storage>:
 80104f0:	b570      	push	{r4, r5, r6, lr}
 80104f2:	7c03      	ldrb	r3, [r0, #16]
 80104f4:	4604      	mov	r4, r0
 80104f6:	b153      	cbz	r3, 801050e <uxr_reset_stream_storage+0x1e>
 80104f8:	4606      	mov	r6, r0
 80104fa:	2500      	movs	r5, #0
 80104fc:	4630      	mov	r0, r6
 80104fe:	f005 fe05 	bl	801610c <uxr_reset_output_best_effort_stream>
 8010502:	7c23      	ldrb	r3, [r4, #16]
 8010504:	3501      	adds	r5, #1
 8010506:	42ab      	cmp	r3, r5
 8010508:	f106 0610 	add.w	r6, r6, #16
 801050c:	d8f6      	bhi.n	80104fc <uxr_reset_stream_storage+0xc>
 801050e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010512:	b163      	cbz	r3, 801052e <uxr_reset_stream_storage+0x3e>
 8010514:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010518:	2500      	movs	r5, #0
 801051a:	4630      	mov	r0, r6
 801051c:	f005 fbf8 	bl	8015d10 <uxr_reset_input_best_effort_stream>
 8010520:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010524:	3501      	adds	r5, #1
 8010526:	42ab      	cmp	r3, r5
 8010528:	f106 0602 	add.w	r6, r6, #2
 801052c:	d8f5      	bhi.n	801051a <uxr_reset_stream_storage+0x2a>
 801052e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8010532:	b163      	cbz	r3, 801054e <uxr_reset_stream_storage+0x5e>
 8010534:	f104 0618 	add.w	r6, r4, #24
 8010538:	2500      	movs	r5, #0
 801053a:	4630      	mov	r0, r6
 801053c:	f005 fe92 	bl	8016264 <uxr_reset_output_reliable_stream>
 8010540:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8010544:	3501      	adds	r5, #1
 8010546:	42ab      	cmp	r3, r5
 8010548:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 801054c:	d8f5      	bhi.n	801053a <uxr_reset_stream_storage+0x4a>
 801054e:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8010552:	b163      	cbz	r3, 801056e <uxr_reset_stream_storage+0x7e>
 8010554:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8010558:	2500      	movs	r5, #0
 801055a:	4630      	mov	r0, r6
 801055c:	f005 fc4c 	bl	8015df8 <uxr_reset_input_reliable_stream>
 8010560:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8010564:	3501      	adds	r5, #1
 8010566:	42ab      	cmp	r3, r5
 8010568:	f106 0618 	add.w	r6, r6, #24
 801056c:	d8f5      	bhi.n	801055a <uxr_reset_stream_storage+0x6a>
 801056e:	bd70      	pop	{r4, r5, r6, pc}

08010570 <uxr_add_output_best_effort_buffer>:
 8010570:	b510      	push	{r4, lr}
 8010572:	7c04      	ldrb	r4, [r0, #16]
 8010574:	f104 0c01 	add.w	ip, r4, #1
 8010578:	b082      	sub	sp, #8
 801057a:	f880 c010 	strb.w	ip, [r0, #16]
 801057e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8010582:	f005 fdb9 	bl	80160f8 <uxr_init_output_best_effort_stream>
 8010586:	2201      	movs	r2, #1
 8010588:	4611      	mov	r1, r2
 801058a:	4620      	mov	r0, r4
 801058c:	b002      	add	sp, #8
 801058e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010592:	f7ff bf4f 	b.w	8010434 <uxr_stream_id>
 8010596:	bf00      	nop

08010598 <uxr_add_output_reliable_buffer>:
 8010598:	b510      	push	{r4, lr}
 801059a:	b084      	sub	sp, #16
 801059c:	4684      	mov	ip, r0
 801059e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80105a2:	9000      	str	r0, [sp, #0]
 80105a4:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 80105a8:	2028      	movs	r0, #40	@ 0x28
 80105aa:	fb00 c004 	mla	r0, r0, r4, ip
 80105ae:	f104 0e01 	add.w	lr, r4, #1
 80105b2:	3018      	adds	r0, #24
 80105b4:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 80105b8:	f005 fe1c 	bl	80161f4 <uxr_init_output_reliable_stream>
 80105bc:	2201      	movs	r2, #1
 80105be:	2102      	movs	r1, #2
 80105c0:	4620      	mov	r0, r4
 80105c2:	b004      	add	sp, #16
 80105c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105c8:	f7ff bf34 	b.w	8010434 <uxr_stream_id>

080105cc <uxr_add_input_best_effort_buffer>:
 80105cc:	b510      	push	{r4, lr}
 80105ce:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 80105d2:	4603      	mov	r3, r0
 80105d4:	1c62      	adds	r2, r4, #1
 80105d6:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 80105da:	b082      	sub	sp, #8
 80105dc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80105e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80105e4:	f005 fb90 	bl	8015d08 <uxr_init_input_best_effort_stream>
 80105e8:	2200      	movs	r2, #0
 80105ea:	2101      	movs	r1, #1
 80105ec:	4620      	mov	r0, r4
 80105ee:	b002      	add	sp, #8
 80105f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105f4:	f7ff bf1e 	b.w	8010434 <uxr_stream_id>

080105f8 <uxr_add_input_reliable_buffer>:
 80105f8:	b510      	push	{r4, lr}
 80105fa:	b084      	sub	sp, #16
 80105fc:	4684      	mov	ip, r0
 80105fe:	9806      	ldr	r0, [sp, #24]
 8010600:	9000      	str	r0, [sp, #0]
 8010602:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8010606:	2018      	movs	r0, #24
 8010608:	fb00 c004 	mla	r0, r0, r4, ip
 801060c:	f104 0e01 	add.w	lr, r4, #1
 8010610:	3048      	adds	r0, #72	@ 0x48
 8010612:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8010616:	f005 fbc3 	bl	8015da0 <uxr_init_input_reliable_stream>
 801061a:	2200      	movs	r2, #0
 801061c:	2102      	movs	r1, #2
 801061e:	4620      	mov	r0, r4
 8010620:	b004      	add	sp, #16
 8010622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010626:	f7ff bf05 	b.w	8010434 <uxr_stream_id>
 801062a:	bf00      	nop

0801062c <uxr_get_output_best_effort_stream>:
 801062c:	7c03      	ldrb	r3, [r0, #16]
 801062e:	428b      	cmp	r3, r1
 8010630:	bf8c      	ite	hi
 8010632:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8010636:	2000      	movls	r0, #0
 8010638:	4770      	bx	lr
 801063a:	bf00      	nop

0801063c <uxr_get_output_reliable_stream>:
 801063c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010640:	428b      	cmp	r3, r1
 8010642:	bf83      	ittte	hi
 8010644:	2328      	movhi	r3, #40	@ 0x28
 8010646:	fb03 0001 	mlahi	r0, r3, r1, r0
 801064a:	3018      	addhi	r0, #24
 801064c:	2000      	movls	r0, #0
 801064e:	4770      	bx	lr

08010650 <uxr_get_input_best_effort_stream>:
 8010650:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8010654:	428b      	cmp	r3, r1
 8010656:	bf86      	itte	hi
 8010658:	3121      	addhi	r1, #33	@ 0x21
 801065a:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 801065e:	2000      	movls	r0, #0
 8010660:	4770      	bx	lr
 8010662:	bf00      	nop

08010664 <uxr_get_input_reliable_stream>:
 8010664:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8010668:	428b      	cmp	r3, r1
 801066a:	bf83      	ittte	hi
 801066c:	2318      	movhi	r3, #24
 801066e:	fb03 0001 	mlahi	r0, r3, r1, r0
 8010672:	3048      	addhi	r0, #72	@ 0x48
 8010674:	2000      	movls	r0, #0
 8010676:	4770      	bx	lr

08010678 <uxr_output_streams_confirmed>:
 8010678:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801067c:	b183      	cbz	r3, 80106a0 <uxr_output_streams_confirmed+0x28>
 801067e:	b570      	push	{r4, r5, r6, lr}
 8010680:	4606      	mov	r6, r0
 8010682:	f100 0518 	add.w	r5, r0, #24
 8010686:	2400      	movs	r4, #0
 8010688:	e001      	b.n	801068e <uxr_output_streams_confirmed+0x16>
 801068a:	3528      	adds	r5, #40	@ 0x28
 801068c:	b138      	cbz	r0, 801069e <uxr_output_streams_confirmed+0x26>
 801068e:	4628      	mov	r0, r5
 8010690:	f006 f858 	bl	8016744 <uxr_is_output_up_to_date>
 8010694:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8010698:	3401      	adds	r4, #1
 801069a:	42a3      	cmp	r3, r4
 801069c:	d8f5      	bhi.n	801068a <uxr_output_streams_confirmed+0x12>
 801069e:	bd70      	pop	{r4, r5, r6, pc}
 80106a0:	2001      	movs	r0, #1
 80106a2:	4770      	bx	lr

080106a4 <uxr_buffer_submessage_header>:
 80106a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106a6:	4604      	mov	r4, r0
 80106a8:	460e      	mov	r6, r1
 80106aa:	2104      	movs	r1, #4
 80106ac:	4615      	mov	r5, r2
 80106ae:	461f      	mov	r7, r3
 80106b0:	f7fb fa0e 	bl	800bad0 <ucdr_align_to>
 80106b4:	2301      	movs	r3, #1
 80106b6:	ea47 0203 	orr.w	r2, r7, r3
 80106ba:	4631      	mov	r1, r6
 80106bc:	7523      	strb	r3, [r4, #20]
 80106be:	4620      	mov	r0, r4
 80106c0:	462b      	mov	r3, r5
 80106c2:	f000 fa27 	bl	8010b14 <uxr_serialize_submessage_header>
 80106c6:	4620      	mov	r0, r4
 80106c8:	f7fb fa18 	bl	800bafc <ucdr_buffer_remaining>
 80106cc:	42a8      	cmp	r0, r5
 80106ce:	bf34      	ite	cc
 80106d0:	2000      	movcc	r0, #0
 80106d2:	2001      	movcs	r0, #1
 80106d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106d6:	bf00      	nop

080106d8 <uxr_read_submessage_header>:
 80106d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106dc:	4604      	mov	r4, r0
 80106de:	460d      	mov	r5, r1
 80106e0:	2104      	movs	r1, #4
 80106e2:	4616      	mov	r6, r2
 80106e4:	4698      	mov	r8, r3
 80106e6:	f7fb f9f3 	bl	800bad0 <ucdr_align_to>
 80106ea:	4620      	mov	r0, r4
 80106ec:	f7fb fa06 	bl	800bafc <ucdr_buffer_remaining>
 80106f0:	2803      	cmp	r0, #3
 80106f2:	bf8c      	ite	hi
 80106f4:	2701      	movhi	r7, #1
 80106f6:	2700      	movls	r7, #0
 80106f8:	d802      	bhi.n	8010700 <uxr_read_submessage_header+0x28>
 80106fa:	4638      	mov	r0, r7
 80106fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010700:	4633      	mov	r3, r6
 8010702:	4642      	mov	r2, r8
 8010704:	4620      	mov	r0, r4
 8010706:	4629      	mov	r1, r5
 8010708:	f000 fa18 	bl	8010b3c <uxr_deserialize_submessage_header>
 801070c:	f898 3000 	ldrb.w	r3, [r8]
 8010710:	f003 0201 	and.w	r2, r3, #1
 8010714:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8010718:	f888 3000 	strb.w	r3, [r8]
 801071c:	7522      	strb	r2, [r4, #20]
 801071e:	4638      	mov	r0, r7
 8010720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010724 <uxr_submessage_padding>:
 8010724:	f010 0003 	ands.w	r0, r0, #3
 8010728:	bf18      	it	ne
 801072a:	f1c0 0004 	rsbne	r0, r0, #4
 801072e:	4770      	bx	lr

08010730 <uxr_millis>:
 8010730:	b510      	push	{r4, lr}
 8010732:	b084      	sub	sp, #16
 8010734:	4669      	mov	r1, sp
 8010736:	2001      	movs	r0, #1
 8010738:	f7f1 fbfa 	bl	8001f30 <clock_gettime>
 801073c:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8010740:	4906      	ldr	r1, [pc, #24]	@ (801075c <uxr_millis+0x2c>)
 8010742:	fba0 0301 	umull	r0, r3, r0, r1
 8010746:	1900      	adds	r0, r0, r4
 8010748:	fb01 3102 	mla	r1, r1, r2, r3
 801074c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8010750:	4a03      	ldr	r2, [pc, #12]	@ (8010760 <uxr_millis+0x30>)
 8010752:	2300      	movs	r3, #0
 8010754:	f7f0 f9ea 	bl	8000b2c <__aeabi_ldivmod>
 8010758:	b004      	add	sp, #16
 801075a:	bd10      	pop	{r4, pc}
 801075c:	3b9aca00 	.word	0x3b9aca00
 8010760:	000f4240 	.word	0x000f4240

08010764 <uxr_nanos>:
 8010764:	b510      	push	{r4, lr}
 8010766:	b084      	sub	sp, #16
 8010768:	4669      	mov	r1, sp
 801076a:	2001      	movs	r0, #1
 801076c:	f7f1 fbe0 	bl	8001f30 <clock_gettime>
 8010770:	4a06      	ldr	r2, [pc, #24]	@ (801078c <uxr_nanos+0x28>)
 8010772:	9800      	ldr	r0, [sp, #0]
 8010774:	9902      	ldr	r1, [sp, #8]
 8010776:	9c01      	ldr	r4, [sp, #4]
 8010778:	fba0 0302 	umull	r0, r3, r0, r2
 801077c:	1840      	adds	r0, r0, r1
 801077e:	fb02 3304 	mla	r3, r2, r4, r3
 8010782:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8010786:	b004      	add	sp, #16
 8010788:	bd10      	pop	{r4, pc}
 801078a:	bf00      	nop
 801078c:	3b9aca00 	.word	0x3b9aca00

08010790 <on_full_output_buffer_fragmented>:
 8010790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010794:	460c      	mov	r4, r1
 8010796:	b08a      	sub	sp, #40	@ 0x28
 8010798:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 801079c:	4606      	mov	r6, r0
 801079e:	f104 0008 	add.w	r0, r4, #8
 80107a2:	f7ff ff4b 	bl	801063c <uxr_get_output_reliable_stream>
 80107a6:	4605      	mov	r5, r0
 80107a8:	f005 ffd6 	bl	8016758 <get_available_free_slots>
 80107ac:	b968      	cbnz	r0, 80107ca <on_full_output_buffer_fragmented+0x3a>
 80107ae:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 80107b2:	4620      	mov	r0, r4
 80107b4:	4798      	blx	r3
 80107b6:	b918      	cbnz	r0, 80107c0 <on_full_output_buffer_fragmented+0x30>
 80107b8:	2001      	movs	r0, #1
 80107ba:	b00a      	add	sp, #40	@ 0x28
 80107bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107c0:	4628      	mov	r0, r5
 80107c2:	f005 ffc9 	bl	8016758 <get_available_free_slots>
 80107c6:	2800      	cmp	r0, #0
 80107c8:	d0f6      	beq.n	80107b8 <on_full_output_buffer_fragmented+0x28>
 80107ca:	8929      	ldrh	r1, [r5, #8]
 80107cc:	89eb      	ldrh	r3, [r5, #14]
 80107ce:	7b28      	ldrb	r0, [r5, #12]
 80107d0:	686a      	ldr	r2, [r5, #4]
 80107d2:	fbb2 f8f1 	udiv	r8, r2, r1
 80107d6:	fbb3 f2f1 	udiv	r2, r3, r1
 80107da:	fb01 3112 	mls	r1, r1, r2, r3
 80107de:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 80107e2:	b289      	uxth	r1, r1
 80107e4:	fb08 f101 	mul.w	r1, r8, r1
 80107e8:	30fc      	adds	r0, #252	@ 0xfc
 80107ea:	f1a8 0804 	sub.w	r8, r8, #4
 80107ee:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 80107f2:	4440      	add	r0, r8
 80107f4:	b287      	uxth	r7, r0
 80107f6:	1bdb      	subs	r3, r3, r7
 80107f8:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 80107fc:	682b      	ldr	r3, [r5, #0]
 80107fe:	3104      	adds	r1, #4
 8010800:	4419      	add	r1, r3
 8010802:	4642      	mov	r2, r8
 8010804:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010808:	9300      	str	r3, [sp, #0]
 801080a:	a802      	add	r0, sp, #8
 801080c:	2300      	movs	r3, #0
 801080e:	f7fb f933 	bl	800ba78 <ucdr_init_buffer_origin_offset>
 8010812:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8010816:	f102 0308 	add.w	r3, r2, #8
 801081a:	4543      	cmp	r3, r8
 801081c:	d928      	bls.n	8010870 <on_full_output_buffer_fragmented+0xe0>
 801081e:	463a      	mov	r2, r7
 8010820:	2300      	movs	r3, #0
 8010822:	210d      	movs	r1, #13
 8010824:	a802      	add	r0, sp, #8
 8010826:	f7ff ff3d 	bl	80106a4 <uxr_buffer_submessage_header>
 801082a:	8929      	ldrh	r1, [r5, #8]
 801082c:	89eb      	ldrh	r3, [r5, #14]
 801082e:	fbb3 f2f1 	udiv	r2, r3, r1
 8010832:	fb01 3312 	mls	r3, r1, r2, r3
 8010836:	b29b      	uxth	r3, r3
 8010838:	686a      	ldr	r2, [r5, #4]
 801083a:	fbb2 f2f1 	udiv	r2, r2, r1
 801083e:	fb02 f303 	mul.w	r3, r2, r3
 8010842:	682a      	ldr	r2, [r5, #0]
 8010844:	f842 8003 	str.w	r8, [r2, r3]
 8010848:	89e8      	ldrh	r0, [r5, #14]
 801084a:	2101      	movs	r1, #1
 801084c:	f005 ffa4 	bl	8016798 <uxr_seq_num_add>
 8010850:	9904      	ldr	r1, [sp, #16]
 8010852:	9a03      	ldr	r2, [sp, #12]
 8010854:	81e8      	strh	r0, [r5, #14]
 8010856:	1a52      	subs	r2, r2, r1
 8010858:	4630      	mov	r0, r6
 801085a:	f7fb f91f 	bl	800ba9c <ucdr_init_buffer>
 801085e:	4630      	mov	r0, r6
 8010860:	490f      	ldr	r1, [pc, #60]	@ (80108a0 <on_full_output_buffer_fragmented+0x110>)
 8010862:	4622      	mov	r2, r4
 8010864:	f7fb f8ee 	bl	800ba44 <ucdr_set_on_full_buffer_callback>
 8010868:	2000      	movs	r0, #0
 801086a:	b00a      	add	sp, #40	@ 0x28
 801086c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010870:	b292      	uxth	r2, r2
 8010872:	2302      	movs	r3, #2
 8010874:	210d      	movs	r1, #13
 8010876:	a802      	add	r0, sp, #8
 8010878:	f7ff ff14 	bl	80106a4 <uxr_buffer_submessage_header>
 801087c:	8928      	ldrh	r0, [r5, #8]
 801087e:	89eb      	ldrh	r3, [r5, #14]
 8010880:	fbb3 f1f0 	udiv	r1, r3, r0
 8010884:	fb00 3311 	mls	r3, r0, r1, r3
 8010888:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801088c:	6869      	ldr	r1, [r5, #4]
 801088e:	fbb1 f1f0 	udiv	r1, r1, r0
 8010892:	b29b      	uxth	r3, r3
 8010894:	fb01 f303 	mul.w	r3, r1, r3
 8010898:	6829      	ldr	r1, [r5, #0]
 801089a:	3208      	adds	r2, #8
 801089c:	50ca      	str	r2, [r1, r3]
 801089e:	e7d3      	b.n	8010848 <on_full_output_buffer_fragmented+0xb8>
 80108a0:	08010791 	.word	0x08010791

080108a4 <uxr_prepare_output_stream>:
 80108a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108a6:	b087      	sub	sp, #28
 80108a8:	2707      	movs	r7, #7
 80108aa:	9202      	str	r2, [sp, #8]
 80108ac:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80108ae:	9103      	str	r1, [sp, #12]
 80108b0:	2500      	movs	r5, #0
 80108b2:	3204      	adds	r2, #4
 80108b4:	e9cd 7500 	strd	r7, r5, [sp]
 80108b8:	461c      	mov	r4, r3
 80108ba:	4606      	mov	r6, r0
 80108bc:	f7fe ffc2 	bl	800f844 <uxr_prepare_stream_to_write_submessage>
 80108c0:	f080 0201 	eor.w	r2, r0, #1
 80108c4:	b2d2      	uxtb	r2, r2
 80108c6:	75a2      	strb	r2, [r4, #22]
 80108c8:	b112      	cbz	r2, 80108d0 <uxr_prepare_output_stream+0x2c>
 80108ca:	4628      	mov	r0, r5
 80108cc:	b007      	add	sp, #28
 80108ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108d0:	aa05      	add	r2, sp, #20
 80108d2:	9902      	ldr	r1, [sp, #8]
 80108d4:	4630      	mov	r0, r6
 80108d6:	f7ff f8eb 	bl	800fab0 <uxr_init_base_object_request>
 80108da:	a905      	add	r1, sp, #20
 80108dc:	4605      	mov	r5, r0
 80108de:	4620      	mov	r0, r4
 80108e0:	f000 ffa0 	bl	8011824 <uxr_serialize_WRITE_DATA_Payload_Data>
 80108e4:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80108e8:	69a6      	ldr	r6, [r4, #24]
 80108ea:	69e7      	ldr	r7, [r4, #28]
 80108ec:	1a52      	subs	r2, r2, r1
 80108ee:	4620      	mov	r0, r4
 80108f0:	f7fb f8d4 	bl	800ba9c <ucdr_init_buffer>
 80108f4:	4620      	mov	r0, r4
 80108f6:	463a      	mov	r2, r7
 80108f8:	4631      	mov	r1, r6
 80108fa:	f7fb f8a3 	bl	800ba44 <ucdr_set_on_full_buffer_callback>
 80108fe:	4628      	mov	r0, r5
 8010900:	b007      	add	sp, #28
 8010902:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010904 <uxr_prepare_output_stream_fragmented>:
 8010904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010908:	b091      	sub	sp, #68	@ 0x44
 801090a:	4605      	mov	r5, r0
 801090c:	9105      	str	r1, [sp, #20]
 801090e:	3008      	adds	r0, #8
 8010910:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8010914:	461e      	mov	r6, r3
 8010916:	9204      	str	r2, [sp, #16]
 8010918:	f7ff fe90 	bl	801063c <uxr_get_output_reliable_stream>
 801091c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8010920:	2b01      	cmp	r3, #1
 8010922:	f000 8091 	beq.w	8010a48 <uxr_prepare_output_stream_fragmented+0x144>
 8010926:	4604      	mov	r4, r0
 8010928:	2800      	cmp	r0, #0
 801092a:	f000 808d 	beq.w	8010a48 <uxr_prepare_output_stream_fragmented+0x144>
 801092e:	f005 ff13 	bl	8016758 <get_available_free_slots>
 8010932:	2800      	cmp	r0, #0
 8010934:	f000 8083 	beq.w	8010a3e <uxr_prepare_output_stream_fragmented+0x13a>
 8010938:	8922      	ldrh	r2, [r4, #8]
 801093a:	89e7      	ldrh	r7, [r4, #14]
 801093c:	fbb7 f9f2 	udiv	r9, r7, r2
 8010940:	fb02 7919 	mls	r9, r2, r9, r7
 8010944:	fa1f f989 	uxth.w	r9, r9
 8010948:	6863      	ldr	r3, [r4, #4]
 801094a:	fbb3 f2f2 	udiv	r2, r3, r2
 801094e:	6823      	ldr	r3, [r4, #0]
 8010950:	9203      	str	r2, [sp, #12]
 8010952:	fb02 f909 	mul.w	r9, r2, r9
 8010956:	f109 0904 	add.w	r9, r9, #4
 801095a:	4499      	add	r9, r3
 801095c:	7b23      	ldrb	r3, [r4, #12]
 801095e:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8010962:	4543      	cmp	r3, r8
 8010964:	f1a2 0b04 	sub.w	fp, r2, #4
 8010968:	d37a      	bcc.n	8010a60 <uxr_prepare_output_stream_fragmented+0x15c>
 801096a:	f1ab 0a04 	sub.w	sl, fp, #4
 801096e:	ebaa 0a03 	sub.w	sl, sl, r3
 8010972:	465a      	mov	r2, fp
 8010974:	2300      	movs	r3, #0
 8010976:	4649      	mov	r1, r9
 8010978:	a808      	add	r0, sp, #32
 801097a:	f8cd 8000 	str.w	r8, [sp]
 801097e:	f7fb f87b 	bl	800ba78 <ucdr_init_buffer_origin_offset>
 8010982:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010984:	fa1f fa8a 	uxth.w	sl, sl
 8010988:	4652      	mov	r2, sl
 801098a:	f103 0a08 	add.w	sl, r3, #8
 801098e:	45da      	cmp	sl, fp
 8010990:	bf34      	ite	cc
 8010992:	2302      	movcc	r3, #2
 8010994:	2300      	movcs	r3, #0
 8010996:	210d      	movs	r1, #13
 8010998:	a808      	add	r0, sp, #32
 801099a:	f7ff fe83 	bl	80106a4 <uxr_buffer_submessage_header>
 801099e:	8921      	ldrh	r1, [r4, #8]
 80109a0:	fbb7 f2f1 	udiv	r2, r7, r1
 80109a4:	fb01 7212 	mls	r2, r1, r2, r7
 80109a8:	b292      	uxth	r2, r2
 80109aa:	6863      	ldr	r3, [r4, #4]
 80109ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80109b0:	fb02 f303 	mul.w	r3, r2, r3
 80109b4:	6822      	ldr	r2, [r4, #0]
 80109b6:	4638      	mov	r0, r7
 80109b8:	f842 b003 	str.w	fp, [r2, r3]
 80109bc:	2101      	movs	r1, #1
 80109be:	f005 feeb 	bl	8016798 <uxr_seq_num_add>
 80109c2:	9b03      	ldr	r3, [sp, #12]
 80109c4:	f108 0104 	add.w	r1, r8, #4
 80109c8:	f1a3 0208 	sub.w	r2, r3, #8
 80109cc:	eba2 0208 	sub.w	r2, r2, r8
 80109d0:	4449      	add	r1, r9
 80109d2:	4607      	mov	r7, r0
 80109d4:	4630      	mov	r0, r6
 80109d6:	f7fb f861 	bl	800ba9c <ucdr_init_buffer>
 80109da:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80109dc:	81e7      	strh	r7, [r4, #14]
 80109de:	1d1a      	adds	r2, r3, #4
 80109e0:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80109e4:	bf28      	it	cs
 80109e6:	2200      	movcs	r2, #0
 80109e8:	2300      	movs	r3, #0
 80109ea:	b292      	uxth	r2, r2
 80109ec:	2107      	movs	r1, #7
 80109ee:	4630      	mov	r0, r6
 80109f0:	f7ff fe58 	bl	80106a4 <uxr_buffer_submessage_header>
 80109f4:	9904      	ldr	r1, [sp, #16]
 80109f6:	aa07      	add	r2, sp, #28
 80109f8:	4628      	mov	r0, r5
 80109fa:	f7ff f859 	bl	800fab0 <uxr_init_base_object_request>
 80109fe:	4604      	mov	r4, r0
 8010a00:	b318      	cbz	r0, 8010a4a <uxr_prepare_output_stream_fragmented+0x146>
 8010a02:	a907      	add	r1, sp, #28
 8010a04:	4630      	mov	r0, r6
 8010a06:	f000 ff0d 	bl	8011824 <uxr_serialize_WRITE_DATA_Payload_Data>
 8010a0a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8010a0e:	4630      	mov	r0, r6
 8010a10:	1a52      	subs	r2, r2, r1
 8010a12:	f7fb f843 	bl	800ba9c <ucdr_init_buffer>
 8010a16:	9b05      	ldr	r3, [sp, #20]
 8010a18:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8010a1c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010a1e:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8010a22:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8010a24:	491b      	ldr	r1, [pc, #108]	@ (8010a94 <uxr_prepare_output_stream_fragmented+0x190>)
 8010a26:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8010a2a:	4630      	mov	r0, r6
 8010a2c:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8010a30:	462a      	mov	r2, r5
 8010a32:	f7fb f807 	bl	800ba44 <ucdr_set_on_full_buffer_callback>
 8010a36:	4620      	mov	r0, r4
 8010a38:	b011      	add	sp, #68	@ 0x44
 8010a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a3e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8010a40:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010a42:	4628      	mov	r0, r5
 8010a44:	4798      	blx	r3
 8010a46:	b920      	cbnz	r0, 8010a52 <uxr_prepare_output_stream_fragmented+0x14e>
 8010a48:	2400      	movs	r4, #0
 8010a4a:	4620      	mov	r0, r4
 8010a4c:	b011      	add	sp, #68	@ 0x44
 8010a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a52:	4620      	mov	r0, r4
 8010a54:	f005 fe80 	bl	8016758 <get_available_free_slots>
 8010a58:	2800      	cmp	r0, #0
 8010a5a:	f47f af6d 	bne.w	8010938 <uxr_prepare_output_stream_fragmented+0x34>
 8010a5e:	e7f3      	b.n	8010a48 <uxr_prepare_output_stream_fragmented+0x144>
 8010a60:	4638      	mov	r0, r7
 8010a62:	2101      	movs	r1, #1
 8010a64:	f005 fe98 	bl	8016798 <uxr_seq_num_add>
 8010a68:	8921      	ldrh	r1, [r4, #8]
 8010a6a:	fbb0 f2f1 	udiv	r2, r0, r1
 8010a6e:	fb01 0912 	mls	r9, r1, r2, r0
 8010a72:	fa1f f289 	uxth.w	r2, r9
 8010a76:	6863      	ldr	r3, [r4, #4]
 8010a78:	fbb3 f9f1 	udiv	r9, r3, r1
 8010a7c:	6823      	ldr	r3, [r4, #0]
 8010a7e:	fb02 f909 	mul.w	r9, r2, r9
 8010a82:	f109 0904 	add.w	r9, r9, #4
 8010a86:	4499      	add	r9, r3
 8010a88:	4607      	mov	r7, r0
 8010a8a:	7b23      	ldrb	r3, [r4, #12]
 8010a8c:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8010a90:	e76b      	b.n	801096a <uxr_prepare_output_stream_fragmented+0x66>
 8010a92:	bf00      	nop
 8010a94:	08010791 	.word	0x08010791

08010a98 <uxr_serialize_message_header>:
 8010a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a9a:	b083      	sub	sp, #12
 8010a9c:	4616      	mov	r6, r2
 8010a9e:	4604      	mov	r4, r0
 8010aa0:	9301      	str	r3, [sp, #4]
 8010aa2:	460d      	mov	r5, r1
 8010aa4:	9f08      	ldr	r7, [sp, #32]
 8010aa6:	f7f9 feb7 	bl	800a818 <ucdr_serialize_uint8_t>
 8010aaa:	4631      	mov	r1, r6
 8010aac:	4620      	mov	r0, r4
 8010aae:	f7f9 feb3 	bl	800a818 <ucdr_serialize_uint8_t>
 8010ab2:	9a01      	ldr	r2, [sp, #4]
 8010ab4:	2101      	movs	r1, #1
 8010ab6:	4620      	mov	r0, r4
 8010ab8:	f7f9 ff5a 	bl	800a970 <ucdr_serialize_endian_uint16_t>
 8010abc:	062b      	lsls	r3, r5, #24
 8010abe:	d501      	bpl.n	8010ac4 <uxr_serialize_message_header+0x2c>
 8010ac0:	b003      	add	sp, #12
 8010ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ac4:	2204      	movs	r2, #4
 8010ac6:	4639      	mov	r1, r7
 8010ac8:	4620      	mov	r0, r4
 8010aca:	b003      	add	sp, #12
 8010acc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010ad0:	f004 bfe2 	b.w	8015a98 <ucdr_serialize_array_uint8_t>

08010ad4 <uxr_deserialize_message_header>:
 8010ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ad6:	b083      	sub	sp, #12
 8010ad8:	4616      	mov	r6, r2
 8010ada:	4604      	mov	r4, r0
 8010adc:	9301      	str	r3, [sp, #4]
 8010ade:	460d      	mov	r5, r1
 8010ae0:	9f08      	ldr	r7, [sp, #32]
 8010ae2:	f7f9 feaf 	bl	800a844 <ucdr_deserialize_uint8_t>
 8010ae6:	4631      	mov	r1, r6
 8010ae8:	4620      	mov	r0, r4
 8010aea:	f7f9 feab 	bl	800a844 <ucdr_deserialize_uint8_t>
 8010aee:	9a01      	ldr	r2, [sp, #4]
 8010af0:	2101      	movs	r1, #1
 8010af2:	4620      	mov	r0, r4
 8010af4:	f7fa f830 	bl	800ab58 <ucdr_deserialize_endian_uint16_t>
 8010af8:	f995 3000 	ldrsb.w	r3, [r5]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	da01      	bge.n	8010b04 <uxr_deserialize_message_header+0x30>
 8010b00:	b003      	add	sp, #12
 8010b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b04:	2204      	movs	r2, #4
 8010b06:	4639      	mov	r1, r7
 8010b08:	4620      	mov	r0, r4
 8010b0a:	b003      	add	sp, #12
 8010b0c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010b10:	f005 b826 	b.w	8015b60 <ucdr_deserialize_array_uint8_t>

08010b14 <uxr_serialize_submessage_header>:
 8010b14:	b530      	push	{r4, r5, lr}
 8010b16:	b083      	sub	sp, #12
 8010b18:	4615      	mov	r5, r2
 8010b1a:	4604      	mov	r4, r0
 8010b1c:	9301      	str	r3, [sp, #4]
 8010b1e:	f7f9 fe7b 	bl	800a818 <ucdr_serialize_uint8_t>
 8010b22:	4629      	mov	r1, r5
 8010b24:	4620      	mov	r0, r4
 8010b26:	f7f9 fe77 	bl	800a818 <ucdr_serialize_uint8_t>
 8010b2a:	9a01      	ldr	r2, [sp, #4]
 8010b2c:	2101      	movs	r1, #1
 8010b2e:	4620      	mov	r0, r4
 8010b30:	b003      	add	sp, #12
 8010b32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b36:	f7f9 bf1b 	b.w	800a970 <ucdr_serialize_endian_uint16_t>
 8010b3a:	bf00      	nop

08010b3c <uxr_deserialize_submessage_header>:
 8010b3c:	b530      	push	{r4, r5, lr}
 8010b3e:	b083      	sub	sp, #12
 8010b40:	4615      	mov	r5, r2
 8010b42:	4604      	mov	r4, r0
 8010b44:	9301      	str	r3, [sp, #4]
 8010b46:	f7f9 fe7d 	bl	800a844 <ucdr_deserialize_uint8_t>
 8010b4a:	4629      	mov	r1, r5
 8010b4c:	4620      	mov	r0, r4
 8010b4e:	f7f9 fe79 	bl	800a844 <ucdr_deserialize_uint8_t>
 8010b52:	9a01      	ldr	r2, [sp, #4]
 8010b54:	2101      	movs	r1, #1
 8010b56:	4620      	mov	r0, r4
 8010b58:	b003      	add	sp, #12
 8010b5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b5e:	f7f9 bffb 	b.w	800ab58 <ucdr_deserialize_endian_uint16_t>
 8010b62:	bf00      	nop

08010b64 <uxr_serialize_CLIENT_Representation>:
 8010b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b68:	2204      	movs	r2, #4
 8010b6a:	460e      	mov	r6, r1
 8010b6c:	4605      	mov	r5, r0
 8010b6e:	f004 ff93 	bl	8015a98 <ucdr_serialize_array_uint8_t>
 8010b72:	2202      	movs	r2, #2
 8010b74:	4607      	mov	r7, r0
 8010b76:	1d31      	adds	r1, r6, #4
 8010b78:	4628      	mov	r0, r5
 8010b7a:	f004 ff8d 	bl	8015a98 <ucdr_serialize_array_uint8_t>
 8010b7e:	4038      	ands	r0, r7
 8010b80:	2202      	movs	r2, #2
 8010b82:	1db1      	adds	r1, r6, #6
 8010b84:	b2c7      	uxtb	r7, r0
 8010b86:	4628      	mov	r0, r5
 8010b88:	f004 ff86 	bl	8015a98 <ucdr_serialize_array_uint8_t>
 8010b8c:	2204      	movs	r2, #4
 8010b8e:	4007      	ands	r7, r0
 8010b90:	f106 0108 	add.w	r1, r6, #8
 8010b94:	4628      	mov	r0, r5
 8010b96:	f004 ff7f 	bl	8015a98 <ucdr_serialize_array_uint8_t>
 8010b9a:	7b31      	ldrb	r1, [r6, #12]
 8010b9c:	4007      	ands	r7, r0
 8010b9e:	4628      	mov	r0, r5
 8010ba0:	f7f9 fe3a 	bl	800a818 <ucdr_serialize_uint8_t>
 8010ba4:	7b71      	ldrb	r1, [r6, #13]
 8010ba6:	4007      	ands	r7, r0
 8010ba8:	4628      	mov	r0, r5
 8010baa:	f7f9 fe07 	bl	800a7bc <ucdr_serialize_bool>
 8010bae:	7b73      	ldrb	r3, [r6, #13]
 8010bb0:	ea07 0800 	and.w	r8, r7, r0
 8010bb4:	b93b      	cbnz	r3, 8010bc6 <uxr_serialize_CLIENT_Representation+0x62>
 8010bb6:	8bb1      	ldrh	r1, [r6, #28]
 8010bb8:	4628      	mov	r0, r5
 8010bba:	f7f9 fe59 	bl	800a870 <ucdr_serialize_uint16_t>
 8010bbe:	ea08 0000 	and.w	r0, r8, r0
 8010bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bc6:	6931      	ldr	r1, [r6, #16]
 8010bc8:	4628      	mov	r0, r5
 8010bca:	f7fa f83b 	bl	800ac44 <ucdr_serialize_uint32_t>
 8010bce:	6933      	ldr	r3, [r6, #16]
 8010bd0:	b1e3      	cbz	r3, 8010c0c <uxr_serialize_CLIENT_Representation+0xa8>
 8010bd2:	b1c0      	cbz	r0, 8010c06 <uxr_serialize_CLIENT_Representation+0xa2>
 8010bd4:	4637      	mov	r7, r6
 8010bd6:	f04f 0900 	mov.w	r9, #0
 8010bda:	e001      	b.n	8010be0 <uxr_serialize_CLIENT_Representation+0x7c>
 8010bdc:	3708      	adds	r7, #8
 8010bde:	b194      	cbz	r4, 8010c06 <uxr_serialize_CLIENT_Representation+0xa2>
 8010be0:	6979      	ldr	r1, [r7, #20]
 8010be2:	4628      	mov	r0, r5
 8010be4:	f005 f878 	bl	8015cd8 <ucdr_serialize_string>
 8010be8:	69b9      	ldr	r1, [r7, #24]
 8010bea:	4604      	mov	r4, r0
 8010bec:	4628      	mov	r0, r5
 8010bee:	f005 f873 	bl	8015cd8 <ucdr_serialize_string>
 8010bf2:	6933      	ldr	r3, [r6, #16]
 8010bf4:	f109 0901 	add.w	r9, r9, #1
 8010bf8:	4004      	ands	r4, r0
 8010bfa:	4599      	cmp	r9, r3
 8010bfc:	b2e4      	uxtb	r4, r4
 8010bfe:	d3ed      	bcc.n	8010bdc <uxr_serialize_CLIENT_Representation+0x78>
 8010c00:	ea08 0804 	and.w	r8, r8, r4
 8010c04:	e7d7      	b.n	8010bb6 <uxr_serialize_CLIENT_Representation+0x52>
 8010c06:	f04f 0800 	mov.w	r8, #0
 8010c0a:	e7d4      	b.n	8010bb6 <uxr_serialize_CLIENT_Representation+0x52>
 8010c0c:	ea08 0800 	and.w	r8, r8, r0
 8010c10:	e7d1      	b.n	8010bb6 <uxr_serialize_CLIENT_Representation+0x52>
 8010c12:	bf00      	nop

08010c14 <uxr_deserialize_CLIENT_Representation>:
 8010c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c18:	2204      	movs	r2, #4
 8010c1a:	460c      	mov	r4, r1
 8010c1c:	4605      	mov	r5, r0
 8010c1e:	f004 ff9f 	bl	8015b60 <ucdr_deserialize_array_uint8_t>
 8010c22:	2202      	movs	r2, #2
 8010c24:	4607      	mov	r7, r0
 8010c26:	1d21      	adds	r1, r4, #4
 8010c28:	4628      	mov	r0, r5
 8010c2a:	f004 ff99 	bl	8015b60 <ucdr_deserialize_array_uint8_t>
 8010c2e:	4038      	ands	r0, r7
 8010c30:	2202      	movs	r2, #2
 8010c32:	1da1      	adds	r1, r4, #6
 8010c34:	b2c6      	uxtb	r6, r0
 8010c36:	4628      	mov	r0, r5
 8010c38:	f004 ff92 	bl	8015b60 <ucdr_deserialize_array_uint8_t>
 8010c3c:	2204      	movs	r2, #4
 8010c3e:	4006      	ands	r6, r0
 8010c40:	f104 0108 	add.w	r1, r4, #8
 8010c44:	4628      	mov	r0, r5
 8010c46:	f004 ff8b 	bl	8015b60 <ucdr_deserialize_array_uint8_t>
 8010c4a:	f104 010c 	add.w	r1, r4, #12
 8010c4e:	4006      	ands	r6, r0
 8010c50:	4628      	mov	r0, r5
 8010c52:	f7f9 fdf7 	bl	800a844 <ucdr_deserialize_uint8_t>
 8010c56:	f104 010d 	add.w	r1, r4, #13
 8010c5a:	ea06 0700 	and.w	r7, r6, r0
 8010c5e:	4628      	mov	r0, r5
 8010c60:	f7f9 fdc2 	bl	800a7e8 <ucdr_deserialize_bool>
 8010c64:	7b63      	ldrb	r3, [r4, #13]
 8010c66:	4007      	ands	r7, r0
 8010c68:	b93b      	cbnz	r3, 8010c7a <uxr_deserialize_CLIENT_Representation+0x66>
 8010c6a:	f104 011c 	add.w	r1, r4, #28
 8010c6e:	4628      	mov	r0, r5
 8010c70:	f7f9 fefe 	bl	800aa70 <ucdr_deserialize_uint16_t>
 8010c74:	4038      	ands	r0, r7
 8010c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c7a:	f104 0110 	add.w	r1, r4, #16
 8010c7e:	4628      	mov	r0, r5
 8010c80:	f7fa f910 	bl	800aea4 <ucdr_deserialize_uint32_t>
 8010c84:	6923      	ldr	r3, [r4, #16]
 8010c86:	2b01      	cmp	r3, #1
 8010c88:	d903      	bls.n	8010c92 <uxr_deserialize_CLIENT_Representation+0x7e>
 8010c8a:	2301      	movs	r3, #1
 8010c8c:	75ab      	strb	r3, [r5, #22]
 8010c8e:	2700      	movs	r7, #0
 8010c90:	e7eb      	b.n	8010c6a <uxr_deserialize_CLIENT_Representation+0x56>
 8010c92:	b30b      	cbz	r3, 8010cd8 <uxr_deserialize_CLIENT_Representation+0xc4>
 8010c94:	2800      	cmp	r0, #0
 8010c96:	d0fa      	beq.n	8010c8e <uxr_deserialize_CLIENT_Representation+0x7a>
 8010c98:	46a0      	mov	r8, r4
 8010c9a:	f04f 0900 	mov.w	r9, #0
 8010c9e:	e001      	b.n	8010ca4 <uxr_deserialize_CLIENT_Representation+0x90>
 8010ca0:	2e00      	cmp	r6, #0
 8010ca2:	d0f4      	beq.n	8010c8e <uxr_deserialize_CLIENT_Representation+0x7a>
 8010ca4:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8010ca8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010cac:	4628      	mov	r0, r5
 8010cae:	f005 f823 	bl	8015cf8 <ucdr_deserialize_string>
 8010cb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010cb6:	4606      	mov	r6, r0
 8010cb8:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8010cbc:	4628      	mov	r0, r5
 8010cbe:	f005 f81b 	bl	8015cf8 <ucdr_deserialize_string>
 8010cc2:	6923      	ldr	r3, [r4, #16]
 8010cc4:	f109 0901 	add.w	r9, r9, #1
 8010cc8:	4006      	ands	r6, r0
 8010cca:	4599      	cmp	r9, r3
 8010ccc:	f108 0808 	add.w	r8, r8, #8
 8010cd0:	b2f6      	uxtb	r6, r6
 8010cd2:	d3e5      	bcc.n	8010ca0 <uxr_deserialize_CLIENT_Representation+0x8c>
 8010cd4:	4037      	ands	r7, r6
 8010cd6:	e7c8      	b.n	8010c6a <uxr_deserialize_CLIENT_Representation+0x56>
 8010cd8:	4007      	ands	r7, r0
 8010cda:	e7c6      	b.n	8010c6a <uxr_deserialize_CLIENT_Representation+0x56>

08010cdc <uxr_serialize_AGENT_Representation>:
 8010cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ce0:	2204      	movs	r2, #4
 8010ce2:	460f      	mov	r7, r1
 8010ce4:	4605      	mov	r5, r0
 8010ce6:	f004 fed7 	bl	8015a98 <ucdr_serialize_array_uint8_t>
 8010cea:	2202      	movs	r2, #2
 8010cec:	4604      	mov	r4, r0
 8010cee:	1d39      	adds	r1, r7, #4
 8010cf0:	4628      	mov	r0, r5
 8010cf2:	f004 fed1 	bl	8015a98 <ucdr_serialize_array_uint8_t>
 8010cf6:	4020      	ands	r0, r4
 8010cf8:	2202      	movs	r2, #2
 8010cfa:	1db9      	adds	r1, r7, #6
 8010cfc:	b2c4      	uxtb	r4, r0
 8010cfe:	4628      	mov	r0, r5
 8010d00:	f004 feca 	bl	8015a98 <ucdr_serialize_array_uint8_t>
 8010d04:	7a39      	ldrb	r1, [r7, #8]
 8010d06:	4004      	ands	r4, r0
 8010d08:	4628      	mov	r0, r5
 8010d0a:	f7f9 fd57 	bl	800a7bc <ucdr_serialize_bool>
 8010d0e:	7a3b      	ldrb	r3, [r7, #8]
 8010d10:	ea00 0804 	and.w	r8, r0, r4
 8010d14:	b913      	cbnz	r3, 8010d1c <uxr_serialize_AGENT_Representation+0x40>
 8010d16:	4640      	mov	r0, r8
 8010d18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d1c:	68f9      	ldr	r1, [r7, #12]
 8010d1e:	4628      	mov	r0, r5
 8010d20:	f7f9 ff90 	bl	800ac44 <ucdr_serialize_uint32_t>
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	b303      	cbz	r3, 8010d6a <uxr_serialize_AGENT_Representation+0x8e>
 8010d28:	b1d0      	cbz	r0, 8010d60 <uxr_serialize_AGENT_Representation+0x84>
 8010d2a:	463e      	mov	r6, r7
 8010d2c:	f04f 0900 	mov.w	r9, #0
 8010d30:	e001      	b.n	8010d36 <uxr_serialize_AGENT_Representation+0x5a>
 8010d32:	3608      	adds	r6, #8
 8010d34:	b1a4      	cbz	r4, 8010d60 <uxr_serialize_AGENT_Representation+0x84>
 8010d36:	6931      	ldr	r1, [r6, #16]
 8010d38:	4628      	mov	r0, r5
 8010d3a:	f004 ffcd 	bl	8015cd8 <ucdr_serialize_string>
 8010d3e:	6971      	ldr	r1, [r6, #20]
 8010d40:	4604      	mov	r4, r0
 8010d42:	4628      	mov	r0, r5
 8010d44:	f004 ffc8 	bl	8015cd8 <ucdr_serialize_string>
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	f109 0901 	add.w	r9, r9, #1
 8010d4e:	4004      	ands	r4, r0
 8010d50:	4599      	cmp	r9, r3
 8010d52:	b2e4      	uxtb	r4, r4
 8010d54:	d3ed      	bcc.n	8010d32 <uxr_serialize_AGENT_Representation+0x56>
 8010d56:	ea08 0804 	and.w	r8, r8, r4
 8010d5a:	4640      	mov	r0, r8
 8010d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d60:	f04f 0800 	mov.w	r8, #0
 8010d64:	4640      	mov	r0, r8
 8010d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d6a:	ea08 0800 	and.w	r8, r8, r0
 8010d6e:	e7d2      	b.n	8010d16 <uxr_serialize_AGENT_Representation+0x3a>

08010d70 <uxr_serialize_DATAWRITER_Representation>:
 8010d70:	b570      	push	{r4, r5, r6, lr}
 8010d72:	460d      	mov	r5, r1
 8010d74:	7809      	ldrb	r1, [r1, #0]
 8010d76:	4606      	mov	r6, r0
 8010d78:	f7f9 fd4e 	bl	800a818 <ucdr_serialize_uint8_t>
 8010d7c:	4604      	mov	r4, r0
 8010d7e:	b130      	cbz	r0, 8010d8e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010d80:	782b      	ldrb	r3, [r5, #0]
 8010d82:	2b02      	cmp	r3, #2
 8010d84:	d00c      	beq.n	8010da0 <uxr_serialize_DATAWRITER_Representation+0x30>
 8010d86:	2b03      	cmp	r3, #3
 8010d88:	d010      	beq.n	8010dac <uxr_serialize_DATAWRITER_Representation+0x3c>
 8010d8a:	2b01      	cmp	r3, #1
 8010d8c:	d008      	beq.n	8010da0 <uxr_serialize_DATAWRITER_Representation+0x30>
 8010d8e:	2202      	movs	r2, #2
 8010d90:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8010d94:	4630      	mov	r0, r6
 8010d96:	f004 fe7f 	bl	8015a98 <ucdr_serialize_array_uint8_t>
 8010d9a:	4020      	ands	r0, r4
 8010d9c:	b2c0      	uxtb	r0, r0
 8010d9e:	bd70      	pop	{r4, r5, r6, pc}
 8010da0:	6869      	ldr	r1, [r5, #4]
 8010da2:	4630      	mov	r0, r6
 8010da4:	f004 ff98 	bl	8015cd8 <ucdr_serialize_string>
 8010da8:	4604      	mov	r4, r0
 8010daa:	e7f0      	b.n	8010d8e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010dac:	4629      	mov	r1, r5
 8010dae:	4630      	mov	r0, r6
 8010db0:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8010db4:	3104      	adds	r1, #4
 8010db6:	f004 ff63 	bl	8015c80 <ucdr_serialize_sequence_uint8_t>
 8010dba:	4604      	mov	r4, r0
 8010dbc:	e7e7      	b.n	8010d8e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010dbe:	bf00      	nop

08010dc0 <uxr_serialize_ObjectVariant.part.0>:
 8010dc0:	b570      	push	{r4, r5, r6, lr}
 8010dc2:	780b      	ldrb	r3, [r1, #0]
 8010dc4:	3b01      	subs	r3, #1
 8010dc6:	460c      	mov	r4, r1
 8010dc8:	4605      	mov	r5, r0
 8010dca:	2b0d      	cmp	r3, #13
 8010dcc:	d854      	bhi.n	8010e78 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8010dce:	e8df f003 	tbb	[pc, r3]
 8010dd2:	0730      	.short	0x0730
 8010dd4:	07071b1b 	.word	0x07071b1b
 8010dd8:	0c530707 	.word	0x0c530707
 8010ddc:	494e0c0c 	.word	0x494e0c0c
 8010de0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010de4:	3104      	adds	r1, #4
 8010de6:	f7ff bfc3 	b.w	8010d70 <uxr_serialize_DATAWRITER_Representation>
 8010dea:	7909      	ldrb	r1, [r1, #4]
 8010dec:	f7f9 fd14 	bl	800a818 <ucdr_serialize_uint8_t>
 8010df0:	b1e8      	cbz	r0, 8010e2e <uxr_serialize_ObjectVariant.part.0+0x6e>
 8010df2:	7923      	ldrb	r3, [r4, #4]
 8010df4:	2b01      	cmp	r3, #1
 8010df6:	d001      	beq.n	8010dfc <uxr_serialize_ObjectVariant.part.0+0x3c>
 8010df8:	2b02      	cmp	r3, #2
 8010dfa:	d13d      	bne.n	8010e78 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8010dfc:	68a1      	ldr	r1, [r4, #8]
 8010dfe:	4628      	mov	r0, r5
 8010e00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010e04:	f004 bf68 	b.w	8015cd8 <ucdr_serialize_string>
 8010e08:	7909      	ldrb	r1, [r1, #4]
 8010e0a:	f7f9 fd05 	bl	800a818 <ucdr_serialize_uint8_t>
 8010e0e:	4606      	mov	r6, r0
 8010e10:	b120      	cbz	r0, 8010e1c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010e12:	7923      	ldrb	r3, [r4, #4]
 8010e14:	2b02      	cmp	r3, #2
 8010e16:	d039      	beq.n	8010e8c <uxr_serialize_ObjectVariant.part.0+0xcc>
 8010e18:	2b03      	cmp	r3, #3
 8010e1a:	d02f      	beq.n	8010e7c <uxr_serialize_ObjectVariant.part.0+0xbc>
 8010e1c:	2202      	movs	r2, #2
 8010e1e:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8010e22:	4628      	mov	r0, r5
 8010e24:	f004 fe38 	bl	8015a98 <ucdr_serialize_array_uint8_t>
 8010e28:	4030      	ands	r0, r6
 8010e2a:	b2c0      	uxtb	r0, r0
 8010e2c:	bd70      	pop	{r4, r5, r6, pc}
 8010e2e:	2000      	movs	r0, #0
 8010e30:	bd70      	pop	{r4, r5, r6, pc}
 8010e32:	7909      	ldrb	r1, [r1, #4]
 8010e34:	f7f9 fcf0 	bl	800a818 <ucdr_serialize_uint8_t>
 8010e38:	4606      	mov	r6, r0
 8010e3a:	b158      	cbz	r0, 8010e54 <uxr_serialize_ObjectVariant.part.0+0x94>
 8010e3c:	7923      	ldrb	r3, [r4, #4]
 8010e3e:	2b02      	cmp	r3, #2
 8010e40:	d003      	beq.n	8010e4a <uxr_serialize_ObjectVariant.part.0+0x8a>
 8010e42:	2b03      	cmp	r3, #3
 8010e44:	d028      	beq.n	8010e98 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8010e46:	2b01      	cmp	r3, #1
 8010e48:	d104      	bne.n	8010e54 <uxr_serialize_ObjectVariant.part.0+0x94>
 8010e4a:	68a1      	ldr	r1, [r4, #8]
 8010e4c:	4628      	mov	r0, r5
 8010e4e:	f004 ff43 	bl	8015cd8 <ucdr_serialize_string>
 8010e52:	4606      	mov	r6, r0
 8010e54:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8010e58:	4628      	mov	r0, r5
 8010e5a:	f7fa fa19 	bl	800b290 <ucdr_serialize_int16_t>
 8010e5e:	4030      	ands	r0, r6
 8010e60:	b2c0      	uxtb	r0, r0
 8010e62:	bd70      	pop	{r4, r5, r6, pc}
 8010e64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010e68:	3104      	adds	r1, #4
 8010e6a:	f7ff be7b 	b.w	8010b64 <uxr_serialize_CLIENT_Representation>
 8010e6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010e72:	3104      	adds	r1, #4
 8010e74:	f7ff bf32 	b.w	8010cdc <uxr_serialize_AGENT_Representation>
 8010e78:	2001      	movs	r0, #1
 8010e7a:	bd70      	pop	{r4, r5, r6, pc}
 8010e7c:	68a2      	ldr	r2, [r4, #8]
 8010e7e:	f104 010c 	add.w	r1, r4, #12
 8010e82:	4628      	mov	r0, r5
 8010e84:	f004 fefc 	bl	8015c80 <ucdr_serialize_sequence_uint8_t>
 8010e88:	4606      	mov	r6, r0
 8010e8a:	e7c7      	b.n	8010e1c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010e8c:	68a1      	ldr	r1, [r4, #8]
 8010e8e:	4628      	mov	r0, r5
 8010e90:	f004 ff22 	bl	8015cd8 <ucdr_serialize_string>
 8010e94:	4606      	mov	r6, r0
 8010e96:	e7c1      	b.n	8010e1c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010e98:	68a2      	ldr	r2, [r4, #8]
 8010e9a:	f104 010c 	add.w	r1, r4, #12
 8010e9e:	4628      	mov	r0, r5
 8010ea0:	f004 feee 	bl	8015c80 <ucdr_serialize_sequence_uint8_t>
 8010ea4:	4606      	mov	r6, r0
 8010ea6:	e7d5      	b.n	8010e54 <uxr_serialize_ObjectVariant.part.0+0x94>

08010ea8 <uxr_deserialize_DATAWRITER_Representation>:
 8010ea8:	b570      	push	{r4, r5, r6, lr}
 8010eaa:	4606      	mov	r6, r0
 8010eac:	460d      	mov	r5, r1
 8010eae:	f7f9 fcc9 	bl	800a844 <ucdr_deserialize_uint8_t>
 8010eb2:	4604      	mov	r4, r0
 8010eb4:	b130      	cbz	r0, 8010ec4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8010eb6:	782b      	ldrb	r3, [r5, #0]
 8010eb8:	2b02      	cmp	r3, #2
 8010eba:	d00c      	beq.n	8010ed6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8010ebc:	2b03      	cmp	r3, #3
 8010ebe:	d012      	beq.n	8010ee6 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8010ec0:	2b01      	cmp	r3, #1
 8010ec2:	d008      	beq.n	8010ed6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8010ec4:	2202      	movs	r2, #2
 8010ec6:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8010eca:	4630      	mov	r0, r6
 8010ecc:	f004 fe48 	bl	8015b60 <ucdr_deserialize_array_uint8_t>
 8010ed0:	4020      	ands	r0, r4
 8010ed2:	b2c0      	uxtb	r0, r0
 8010ed4:	bd70      	pop	{r4, r5, r6, pc}
 8010ed6:	6869      	ldr	r1, [r5, #4]
 8010ed8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010edc:	4630      	mov	r0, r6
 8010ede:	f004 ff0b 	bl	8015cf8 <ucdr_deserialize_string>
 8010ee2:	4604      	mov	r4, r0
 8010ee4:	e7ee      	b.n	8010ec4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8010ee6:	1d2b      	adds	r3, r5, #4
 8010ee8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010eec:	f105 0108 	add.w	r1, r5, #8
 8010ef0:	4630      	mov	r0, r6
 8010ef2:	f004 fed7 	bl	8015ca4 <ucdr_deserialize_sequence_uint8_t>
 8010ef6:	4604      	mov	r4, r0
 8010ef8:	e7e4      	b.n	8010ec4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8010efa:	bf00      	nop

08010efc <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8010efc:	b570      	push	{r4, r5, r6, lr}
 8010efe:	460d      	mov	r5, r1
 8010f00:	7809      	ldrb	r1, [r1, #0]
 8010f02:	4606      	mov	r6, r0
 8010f04:	f7f9 fc5a 	bl	800a7bc <ucdr_serialize_bool>
 8010f08:	782b      	ldrb	r3, [r5, #0]
 8010f0a:	4604      	mov	r4, r0
 8010f0c:	b94b      	cbnz	r3, 8010f22 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8010f0e:	7a29      	ldrb	r1, [r5, #8]
 8010f10:	4630      	mov	r0, r6
 8010f12:	f7f9 fc53 	bl	800a7bc <ucdr_serialize_bool>
 8010f16:	7a2b      	ldrb	r3, [r5, #8]
 8010f18:	4004      	ands	r4, r0
 8010f1a:	b2e4      	uxtb	r4, r4
 8010f1c:	b943      	cbnz	r3, 8010f30 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8010f1e:	4620      	mov	r0, r4
 8010f20:	bd70      	pop	{r4, r5, r6, pc}
 8010f22:	6869      	ldr	r1, [r5, #4]
 8010f24:	4630      	mov	r0, r6
 8010f26:	f004 fed7 	bl	8015cd8 <ucdr_serialize_string>
 8010f2a:	4004      	ands	r4, r0
 8010f2c:	b2e4      	uxtb	r4, r4
 8010f2e:	e7ee      	b.n	8010f0e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8010f30:	68e9      	ldr	r1, [r5, #12]
 8010f32:	4630      	mov	r0, r6
 8010f34:	f004 fed0 	bl	8015cd8 <ucdr_serialize_string>
 8010f38:	4004      	ands	r4, r0
 8010f3a:	4620      	mov	r0, r4
 8010f3c:	bd70      	pop	{r4, r5, r6, pc}
 8010f3e:	bf00      	nop

08010f40 <uxr_serialize_OBJK_Topic_Binary>:
 8010f40:	b570      	push	{r4, r5, r6, lr}
 8010f42:	460d      	mov	r5, r1
 8010f44:	6809      	ldr	r1, [r1, #0]
 8010f46:	4606      	mov	r6, r0
 8010f48:	f004 fec6 	bl	8015cd8 <ucdr_serialize_string>
 8010f4c:	7929      	ldrb	r1, [r5, #4]
 8010f4e:	4604      	mov	r4, r0
 8010f50:	4630      	mov	r0, r6
 8010f52:	f7f9 fc33 	bl	800a7bc <ucdr_serialize_bool>
 8010f56:	792b      	ldrb	r3, [r5, #4]
 8010f58:	4004      	ands	r4, r0
 8010f5a:	b2e4      	uxtb	r4, r4
 8010f5c:	b943      	cbnz	r3, 8010f70 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8010f5e:	7b29      	ldrb	r1, [r5, #12]
 8010f60:	4630      	mov	r0, r6
 8010f62:	f7f9 fc2b 	bl	800a7bc <ucdr_serialize_bool>
 8010f66:	7b2b      	ldrb	r3, [r5, #12]
 8010f68:	4004      	ands	r4, r0
 8010f6a:	b93b      	cbnz	r3, 8010f7c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8010f6c:	4620      	mov	r0, r4
 8010f6e:	bd70      	pop	{r4, r5, r6, pc}
 8010f70:	68a9      	ldr	r1, [r5, #8]
 8010f72:	4630      	mov	r0, r6
 8010f74:	f004 feb0 	bl	8015cd8 <ucdr_serialize_string>
 8010f78:	4004      	ands	r4, r0
 8010f7a:	e7f0      	b.n	8010f5e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8010f7c:	6929      	ldr	r1, [r5, #16]
 8010f7e:	4630      	mov	r0, r6
 8010f80:	f004 feaa 	bl	8015cd8 <ucdr_serialize_string>
 8010f84:	4004      	ands	r4, r0
 8010f86:	b2e4      	uxtb	r4, r4
 8010f88:	4620      	mov	r0, r4
 8010f8a:	bd70      	pop	{r4, r5, r6, pc}

08010f8c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8010f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f90:	460c      	mov	r4, r1
 8010f92:	7809      	ldrb	r1, [r1, #0]
 8010f94:	4606      	mov	r6, r0
 8010f96:	f7f9 fc11 	bl	800a7bc <ucdr_serialize_bool>
 8010f9a:	7823      	ldrb	r3, [r4, #0]
 8010f9c:	4605      	mov	r5, r0
 8010f9e:	b96b      	cbnz	r3, 8010fbc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8010fa0:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8010fa4:	4630      	mov	r0, r6
 8010fa6:	f7f9 fc09 	bl	800a7bc <ucdr_serialize_bool>
 8010faa:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8010fae:	4005      	ands	r5, r0
 8010fb0:	b2ed      	uxtb	r5, r5
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d169      	bne.n	801108a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8010fb6:	4628      	mov	r0, r5
 8010fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fbc:	6861      	ldr	r1, [r4, #4]
 8010fbe:	4630      	mov	r0, r6
 8010fc0:	f7f9 fe40 	bl	800ac44 <ucdr_serialize_uint32_t>
 8010fc4:	6863      	ldr	r3, [r4, #4]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d06b      	beq.n	80110a2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8010fca:	2800      	cmp	r0, #0
 8010fcc:	d067      	beq.n	801109e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010fce:	68a1      	ldr	r1, [r4, #8]
 8010fd0:	4630      	mov	r0, r6
 8010fd2:	f004 fe81 	bl	8015cd8 <ucdr_serialize_string>
 8010fd6:	6863      	ldr	r3, [r4, #4]
 8010fd8:	2b01      	cmp	r3, #1
 8010fda:	d953      	bls.n	8011084 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010fdc:	2800      	cmp	r0, #0
 8010fde:	d05e      	beq.n	801109e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010fe0:	68e1      	ldr	r1, [r4, #12]
 8010fe2:	4630      	mov	r0, r6
 8010fe4:	f004 fe78 	bl	8015cd8 <ucdr_serialize_string>
 8010fe8:	6863      	ldr	r3, [r4, #4]
 8010fea:	2b02      	cmp	r3, #2
 8010fec:	d94a      	bls.n	8011084 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010fee:	2800      	cmp	r0, #0
 8010ff0:	d055      	beq.n	801109e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010ff2:	6921      	ldr	r1, [r4, #16]
 8010ff4:	4630      	mov	r0, r6
 8010ff6:	f004 fe6f 	bl	8015cd8 <ucdr_serialize_string>
 8010ffa:	6863      	ldr	r3, [r4, #4]
 8010ffc:	2b03      	cmp	r3, #3
 8010ffe:	d941      	bls.n	8011084 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011000:	2800      	cmp	r0, #0
 8011002:	d04c      	beq.n	801109e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011004:	6961      	ldr	r1, [r4, #20]
 8011006:	4630      	mov	r0, r6
 8011008:	f004 fe66 	bl	8015cd8 <ucdr_serialize_string>
 801100c:	6863      	ldr	r3, [r4, #4]
 801100e:	2b04      	cmp	r3, #4
 8011010:	d938      	bls.n	8011084 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011012:	2800      	cmp	r0, #0
 8011014:	d043      	beq.n	801109e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011016:	69a1      	ldr	r1, [r4, #24]
 8011018:	4630      	mov	r0, r6
 801101a:	f004 fe5d 	bl	8015cd8 <ucdr_serialize_string>
 801101e:	6863      	ldr	r3, [r4, #4]
 8011020:	2b05      	cmp	r3, #5
 8011022:	d92f      	bls.n	8011084 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011024:	2800      	cmp	r0, #0
 8011026:	d03a      	beq.n	801109e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011028:	69e1      	ldr	r1, [r4, #28]
 801102a:	4630      	mov	r0, r6
 801102c:	f004 fe54 	bl	8015cd8 <ucdr_serialize_string>
 8011030:	6863      	ldr	r3, [r4, #4]
 8011032:	2b06      	cmp	r3, #6
 8011034:	d926      	bls.n	8011084 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011036:	b390      	cbz	r0, 801109e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011038:	6a21      	ldr	r1, [r4, #32]
 801103a:	4630      	mov	r0, r6
 801103c:	f004 fe4c 	bl	8015cd8 <ucdr_serialize_string>
 8011040:	6863      	ldr	r3, [r4, #4]
 8011042:	2b07      	cmp	r3, #7
 8011044:	d91e      	bls.n	8011084 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011046:	b350      	cbz	r0, 801109e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011048:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801104a:	4630      	mov	r0, r6
 801104c:	f004 fe44 	bl	8015cd8 <ucdr_serialize_string>
 8011050:	6863      	ldr	r3, [r4, #4]
 8011052:	2b08      	cmp	r3, #8
 8011054:	d916      	bls.n	8011084 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011056:	b310      	cbz	r0, 801109e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011058:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801105a:	4630      	mov	r0, r6
 801105c:	f004 fe3c 	bl	8015cd8 <ucdr_serialize_string>
 8011060:	6863      	ldr	r3, [r4, #4]
 8011062:	2b09      	cmp	r3, #9
 8011064:	d90e      	bls.n	8011084 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011066:	b1d0      	cbz	r0, 801109e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011068:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 801106c:	2709      	movs	r7, #9
 801106e:	e000      	b.n	8011072 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8011070:	b1a8      	cbz	r0, 801109e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011072:	f858 1b04 	ldr.w	r1, [r8], #4
 8011076:	4630      	mov	r0, r6
 8011078:	f004 fe2e 	bl	8015cd8 <ucdr_serialize_string>
 801107c:	6862      	ldr	r2, [r4, #4]
 801107e:	3701      	adds	r7, #1
 8011080:	4297      	cmp	r7, r2
 8011082:	d3f5      	bcc.n	8011070 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8011084:	4005      	ands	r5, r0
 8011086:	b2ed      	uxtb	r5, r5
 8011088:	e78a      	b.n	8010fa0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801108a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801108c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8011090:	4630      	mov	r0, r6
 8011092:	f004 fdf5 	bl	8015c80 <ucdr_serialize_sequence_uint8_t>
 8011096:	4005      	ands	r5, r0
 8011098:	4628      	mov	r0, r5
 801109a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801109e:	2500      	movs	r5, #0
 80110a0:	e77e      	b.n	8010fa0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80110a2:	4028      	ands	r0, r5
 80110a4:	b2c5      	uxtb	r5, r0
 80110a6:	e77b      	b.n	8010fa0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

080110a8 <uxr_serialize_OBJK_Publisher_Binary>:
 80110a8:	b570      	push	{r4, r5, r6, lr}
 80110aa:	460d      	mov	r5, r1
 80110ac:	7809      	ldrb	r1, [r1, #0]
 80110ae:	4606      	mov	r6, r0
 80110b0:	f7f9 fb84 	bl	800a7bc <ucdr_serialize_bool>
 80110b4:	782b      	ldrb	r3, [r5, #0]
 80110b6:	4604      	mov	r4, r0
 80110b8:	b94b      	cbnz	r3, 80110ce <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80110ba:	7a29      	ldrb	r1, [r5, #8]
 80110bc:	4630      	mov	r0, r6
 80110be:	f7f9 fb7d 	bl	800a7bc <ucdr_serialize_bool>
 80110c2:	7a2b      	ldrb	r3, [r5, #8]
 80110c4:	4004      	ands	r4, r0
 80110c6:	b2e4      	uxtb	r4, r4
 80110c8:	b943      	cbnz	r3, 80110dc <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80110ca:	4620      	mov	r0, r4
 80110cc:	bd70      	pop	{r4, r5, r6, pc}
 80110ce:	6869      	ldr	r1, [r5, #4]
 80110d0:	4630      	mov	r0, r6
 80110d2:	f004 fe01 	bl	8015cd8 <ucdr_serialize_string>
 80110d6:	4004      	ands	r4, r0
 80110d8:	b2e4      	uxtb	r4, r4
 80110da:	e7ee      	b.n	80110ba <uxr_serialize_OBJK_Publisher_Binary+0x12>
 80110dc:	f105 010c 	add.w	r1, r5, #12
 80110e0:	4630      	mov	r0, r6
 80110e2:	f7ff ff53 	bl	8010f8c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 80110e6:	4004      	ands	r4, r0
 80110e8:	4620      	mov	r0, r4
 80110ea:	bd70      	pop	{r4, r5, r6, pc}

080110ec <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80110ec:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80110f0:	4688      	mov	r8, r1
 80110f2:	8809      	ldrh	r1, [r1, #0]
 80110f4:	4681      	mov	r9, r0
 80110f6:	f7f9 fbbb 	bl	800a870 <ucdr_serialize_uint16_t>
 80110fa:	f898 1002 	ldrb.w	r1, [r8, #2]
 80110fe:	4606      	mov	r6, r0
 8011100:	4648      	mov	r0, r9
 8011102:	f7f9 fb5b 	bl	800a7bc <ucdr_serialize_bool>
 8011106:	f898 3002 	ldrb.w	r3, [r8, #2]
 801110a:	4006      	ands	r6, r0
 801110c:	b2f5      	uxtb	r5, r6
 801110e:	b9eb      	cbnz	r3, 801114c <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8011110:	f898 1006 	ldrb.w	r1, [r8, #6]
 8011114:	4648      	mov	r0, r9
 8011116:	f7f9 fb51 	bl	800a7bc <ucdr_serialize_bool>
 801111a:	f898 3006 	ldrb.w	r3, [r8, #6]
 801111e:	4005      	ands	r5, r0
 8011120:	bb7b      	cbnz	r3, 8011182 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8011122:	f898 100c 	ldrb.w	r1, [r8, #12]
 8011126:	4648      	mov	r0, r9
 8011128:	f7f9 fb48 	bl	800a7bc <ucdr_serialize_bool>
 801112c:	f898 300c 	ldrb.w	r3, [r8, #12]
 8011130:	4005      	ands	r5, r0
 8011132:	b9f3      	cbnz	r3, 8011172 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8011134:	f898 1014 	ldrb.w	r1, [r8, #20]
 8011138:	4648      	mov	r0, r9
 801113a:	f7f9 fb3f 	bl	800a7bc <ucdr_serialize_bool>
 801113e:	f898 3014 	ldrb.w	r3, [r8, #20]
 8011142:	4005      	ands	r5, r0
 8011144:	b94b      	cbnz	r3, 801115a <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8011146:	4628      	mov	r0, r5
 8011148:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801114c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8011150:	4648      	mov	r0, r9
 8011152:	f7f9 fb8d 	bl	800a870 <ucdr_serialize_uint16_t>
 8011156:	4005      	ands	r5, r0
 8011158:	e7da      	b.n	8011110 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801115a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801115e:	f108 011c 	add.w	r1, r8, #28
 8011162:	4648      	mov	r0, r9
 8011164:	f004 fd8c 	bl	8015c80 <ucdr_serialize_sequence_uint8_t>
 8011168:	4028      	ands	r0, r5
 801116a:	b2c5      	uxtb	r5, r0
 801116c:	4628      	mov	r0, r5
 801116e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8011172:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011176:	4648      	mov	r0, r9
 8011178:	f7f9 fd64 	bl	800ac44 <ucdr_serialize_uint32_t>
 801117c:	4028      	ands	r0, r5
 801117e:	b2c5      	uxtb	r5, r0
 8011180:	e7d8      	b.n	8011134 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8011182:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8011186:	4648      	mov	r0, r9
 8011188:	f7f9 fd5c 	bl	800ac44 <ucdr_serialize_uint32_t>
 801118c:	4028      	ands	r0, r5
 801118e:	b2c5      	uxtb	r5, r0
 8011190:	e7c7      	b.n	8011122 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8011192:	bf00      	nop

08011194 <uxr_serialize_OBJK_DataWriter_Binary>:
 8011194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011196:	2202      	movs	r2, #2
 8011198:	460d      	mov	r5, r1
 801119a:	4606      	mov	r6, r0
 801119c:	f004 fc7c 	bl	8015a98 <ucdr_serialize_array_uint8_t>
 80111a0:	78a9      	ldrb	r1, [r5, #2]
 80111a2:	4604      	mov	r4, r0
 80111a4:	4630      	mov	r0, r6
 80111a6:	f7f9 fb09 	bl	800a7bc <ucdr_serialize_bool>
 80111aa:	78ab      	ldrb	r3, [r5, #2]
 80111ac:	4004      	ands	r4, r0
 80111ae:	b2e4      	uxtb	r4, r4
 80111b0:	b90b      	cbnz	r3, 80111b6 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80111b2:	4620      	mov	r0, r4
 80111b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111b6:	f105 0108 	add.w	r1, r5, #8
 80111ba:	4630      	mov	r0, r6
 80111bc:	f7ff ff96 	bl	80110ec <uxr_serialize_OBJK_Endpoint_QosBinary>
 80111c0:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 80111c4:	4607      	mov	r7, r0
 80111c6:	4630      	mov	r0, r6
 80111c8:	f7f9 faf8 	bl	800a7bc <ucdr_serialize_bool>
 80111cc:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 80111d0:	4038      	ands	r0, r7
 80111d2:	b2c7      	uxtb	r7, r0
 80111d4:	b913      	cbnz	r3, 80111dc <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80111d6:	403c      	ands	r4, r7
 80111d8:	4620      	mov	r0, r4
 80111da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111dc:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 80111e0:	4630      	mov	r0, r6
 80111e2:	f7f9 ff85 	bl	800b0f0 <ucdr_serialize_uint64_t>
 80111e6:	4007      	ands	r7, r0
 80111e8:	e7f5      	b.n	80111d6 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80111ea:	bf00      	nop

080111ec <uxr_deserialize_ObjectVariant>:
 80111ec:	b570      	push	{r4, r5, r6, lr}
 80111ee:	4605      	mov	r5, r0
 80111f0:	460e      	mov	r6, r1
 80111f2:	f7f9 fb27 	bl	800a844 <ucdr_deserialize_uint8_t>
 80111f6:	b168      	cbz	r0, 8011214 <uxr_deserialize_ObjectVariant+0x28>
 80111f8:	7833      	ldrb	r3, [r6, #0]
 80111fa:	3b01      	subs	r3, #1
 80111fc:	4604      	mov	r4, r0
 80111fe:	2b0d      	cmp	r3, #13
 8011200:	d809      	bhi.n	8011216 <uxr_deserialize_ObjectVariant+0x2a>
 8011202:	e8df f003 	tbb	[pc, r3]
 8011206:	0a41      	.short	0x0a41
 8011208:	0a0a2323 	.word	0x0a0a2323
 801120c:	10080a0a 	.word	0x10080a0a
 8011210:	565c1010 	.word	0x565c1010
 8011214:	2400      	movs	r4, #0
 8011216:	4620      	mov	r0, r4
 8011218:	bd70      	pop	{r4, r5, r6, pc}
 801121a:	1d31      	adds	r1, r6, #4
 801121c:	4628      	mov	r0, r5
 801121e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011222:	f7ff be41 	b.w	8010ea8 <uxr_deserialize_DATAWRITER_Representation>
 8011226:	1d31      	adds	r1, r6, #4
 8011228:	4628      	mov	r0, r5
 801122a:	f7f9 fb0b 	bl	800a844 <ucdr_deserialize_uint8_t>
 801122e:	2800      	cmp	r0, #0
 8011230:	d0f0      	beq.n	8011214 <uxr_deserialize_ObjectVariant+0x28>
 8011232:	7933      	ldrb	r3, [r6, #4]
 8011234:	2b01      	cmp	r3, #1
 8011236:	d001      	beq.n	801123c <uxr_deserialize_ObjectVariant+0x50>
 8011238:	2b02      	cmp	r3, #2
 801123a:	d1ec      	bne.n	8011216 <uxr_deserialize_ObjectVariant+0x2a>
 801123c:	68b1      	ldr	r1, [r6, #8]
 801123e:	4628      	mov	r0, r5
 8011240:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011244:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011248:	f004 bd56 	b.w	8015cf8 <ucdr_deserialize_string>
 801124c:	1d31      	adds	r1, r6, #4
 801124e:	4628      	mov	r0, r5
 8011250:	f7f9 faf8 	bl	800a844 <ucdr_deserialize_uint8_t>
 8011254:	4604      	mov	r4, r0
 8011256:	b170      	cbz	r0, 8011276 <uxr_deserialize_ObjectVariant+0x8a>
 8011258:	7933      	ldrb	r3, [r6, #4]
 801125a:	2b02      	cmp	r3, #2
 801125c:	d04c      	beq.n	80112f8 <uxr_deserialize_ObjectVariant+0x10c>
 801125e:	2b03      	cmp	r3, #3
 8011260:	d109      	bne.n	8011276 <uxr_deserialize_ObjectVariant+0x8a>
 8011262:	f106 0308 	add.w	r3, r6, #8
 8011266:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801126a:	f106 010c 	add.w	r1, r6, #12
 801126e:	4628      	mov	r0, r5
 8011270:	f004 fd18 	bl	8015ca4 <ucdr_deserialize_sequence_uint8_t>
 8011274:	4604      	mov	r4, r0
 8011276:	2202      	movs	r2, #2
 8011278:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801127c:	4628      	mov	r0, r5
 801127e:	f004 fc6f 	bl	8015b60 <ucdr_deserialize_array_uint8_t>
 8011282:	4020      	ands	r0, r4
 8011284:	b2c4      	uxtb	r4, r0
 8011286:	e7c6      	b.n	8011216 <uxr_deserialize_ObjectVariant+0x2a>
 8011288:	1d31      	adds	r1, r6, #4
 801128a:	4628      	mov	r0, r5
 801128c:	f7f9 fada 	bl	800a844 <ucdr_deserialize_uint8_t>
 8011290:	4604      	mov	r4, r0
 8011292:	b130      	cbz	r0, 80112a2 <uxr_deserialize_ObjectVariant+0xb6>
 8011294:	7933      	ldrb	r3, [r6, #4]
 8011296:	2b02      	cmp	r3, #2
 8011298:	d036      	beq.n	8011308 <uxr_deserialize_ObjectVariant+0x11c>
 801129a:	2b03      	cmp	r3, #3
 801129c:	d03c      	beq.n	8011318 <uxr_deserialize_ObjectVariant+0x12c>
 801129e:	2b01      	cmp	r3, #1
 80112a0:	d032      	beq.n	8011308 <uxr_deserialize_ObjectVariant+0x11c>
 80112a2:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80112a6:	4628      	mov	r0, r5
 80112a8:	f7fa f872 	bl	800b390 <ucdr_deserialize_int16_t>
 80112ac:	4020      	ands	r0, r4
 80112ae:	b2c4      	uxtb	r4, r0
 80112b0:	e7b1      	b.n	8011216 <uxr_deserialize_ObjectVariant+0x2a>
 80112b2:	1d31      	adds	r1, r6, #4
 80112b4:	4628      	mov	r0, r5
 80112b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80112ba:	f7ff bcab 	b.w	8010c14 <uxr_deserialize_CLIENT_Representation>
 80112be:	2204      	movs	r2, #4
 80112c0:	18b1      	adds	r1, r6, r2
 80112c2:	4628      	mov	r0, r5
 80112c4:	f004 fc4c 	bl	8015b60 <ucdr_deserialize_array_uint8_t>
 80112c8:	2202      	movs	r2, #2
 80112ca:	f106 0108 	add.w	r1, r6, #8
 80112ce:	4604      	mov	r4, r0
 80112d0:	4628      	mov	r0, r5
 80112d2:	f004 fc45 	bl	8015b60 <ucdr_deserialize_array_uint8_t>
 80112d6:	2202      	movs	r2, #2
 80112d8:	4004      	ands	r4, r0
 80112da:	f106 010a 	add.w	r1, r6, #10
 80112de:	4628      	mov	r0, r5
 80112e0:	f004 fc3e 	bl	8015b60 <ucdr_deserialize_array_uint8_t>
 80112e4:	b2e4      	uxtb	r4, r4
 80112e6:	4603      	mov	r3, r0
 80112e8:	f106 010c 	add.w	r1, r6, #12
 80112ec:	4628      	mov	r0, r5
 80112ee:	401c      	ands	r4, r3
 80112f0:	f7f9 fa7a 	bl	800a7e8 <ucdr_deserialize_bool>
 80112f4:	4004      	ands	r4, r0
 80112f6:	e78e      	b.n	8011216 <uxr_deserialize_ObjectVariant+0x2a>
 80112f8:	68b1      	ldr	r1, [r6, #8]
 80112fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80112fe:	4628      	mov	r0, r5
 8011300:	f004 fcfa 	bl	8015cf8 <ucdr_deserialize_string>
 8011304:	4604      	mov	r4, r0
 8011306:	e7b6      	b.n	8011276 <uxr_deserialize_ObjectVariant+0x8a>
 8011308:	68b1      	ldr	r1, [r6, #8]
 801130a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801130e:	4628      	mov	r0, r5
 8011310:	f004 fcf2 	bl	8015cf8 <ucdr_deserialize_string>
 8011314:	4604      	mov	r4, r0
 8011316:	e7c4      	b.n	80112a2 <uxr_deserialize_ObjectVariant+0xb6>
 8011318:	f106 0308 	add.w	r3, r6, #8
 801131c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011320:	f106 010c 	add.w	r1, r6, #12
 8011324:	4628      	mov	r0, r5
 8011326:	f004 fcbd 	bl	8015ca4 <ucdr_deserialize_sequence_uint8_t>
 801132a:	4604      	mov	r4, r0
 801132c:	e7b9      	b.n	80112a2 <uxr_deserialize_ObjectVariant+0xb6>
 801132e:	bf00      	nop

08011330 <uxr_deserialize_BaseObjectRequest>:
 8011330:	b570      	push	{r4, r5, r6, lr}
 8011332:	2202      	movs	r2, #2
 8011334:	4605      	mov	r5, r0
 8011336:	460e      	mov	r6, r1
 8011338:	f004 fc12 	bl	8015b60 <ucdr_deserialize_array_uint8_t>
 801133c:	2202      	movs	r2, #2
 801133e:	4604      	mov	r4, r0
 8011340:	18b1      	adds	r1, r6, r2
 8011342:	4628      	mov	r0, r5
 8011344:	f004 fc0c 	bl	8015b60 <ucdr_deserialize_array_uint8_t>
 8011348:	4020      	ands	r0, r4
 801134a:	b2c0      	uxtb	r0, r0
 801134c:	bd70      	pop	{r4, r5, r6, pc}
 801134e:	bf00      	nop

08011350 <uxr_serialize_ActivityInfoVariant>:
 8011350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011354:	460d      	mov	r5, r1
 8011356:	7809      	ldrb	r1, [r1, #0]
 8011358:	4607      	mov	r7, r0
 801135a:	f7f9 fa5d 	bl	800a818 <ucdr_serialize_uint8_t>
 801135e:	4681      	mov	r9, r0
 8011360:	b138      	cbz	r0, 8011372 <uxr_serialize_ActivityInfoVariant+0x22>
 8011362:	782b      	ldrb	r3, [r5, #0]
 8011364:	2b06      	cmp	r3, #6
 8011366:	f000 8082 	beq.w	801146e <uxr_serialize_ActivityInfoVariant+0x11e>
 801136a:	2b0d      	cmp	r3, #13
 801136c:	d016      	beq.n	801139c <uxr_serialize_ActivityInfoVariant+0x4c>
 801136e:	2b05      	cmp	r3, #5
 8011370:	d002      	beq.n	8011378 <uxr_serialize_ActivityInfoVariant+0x28>
 8011372:	4648      	mov	r0, r9
 8011374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011378:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801137c:	4638      	mov	r0, r7
 801137e:	f7f9 ff87 	bl	800b290 <ucdr_serialize_int16_t>
 8011382:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8011386:	4681      	mov	r9, r0
 8011388:	4638      	mov	r0, r7
 801138a:	f7f9 feb1 	bl	800b0f0 <ucdr_serialize_uint64_t>
 801138e:	ea09 0000 	and.w	r0, r9, r0
 8011392:	fa5f f980 	uxtb.w	r9, r0
 8011396:	4648      	mov	r0, r9
 8011398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801139c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80113a0:	4638      	mov	r0, r7
 80113a2:	f7f9 ff75 	bl	800b290 <ucdr_serialize_int16_t>
 80113a6:	68e9      	ldr	r1, [r5, #12]
 80113a8:	4681      	mov	r9, r0
 80113aa:	4638      	mov	r0, r7
 80113ac:	f7f9 fc4a 	bl	800ac44 <ucdr_serialize_uint32_t>
 80113b0:	68eb      	ldr	r3, [r5, #12]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d0eb      	beq.n	801138e <uxr_serialize_ActivityInfoVariant+0x3e>
 80113b6:	b320      	cbz	r0, 8011402 <uxr_serialize_ActivityInfoVariant+0xb2>
 80113b8:	f105 080c 	add.w	r8, r5, #12
 80113bc:	2600      	movs	r6, #0
 80113be:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 80113c2:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 80113c6:	f89a 1010 	ldrb.w	r1, [sl, #16]
 80113ca:	4638      	mov	r0, r7
 80113cc:	f7f9 fa24 	bl	800a818 <ucdr_serialize_uint8_t>
 80113d0:	2800      	cmp	r0, #0
 80113d2:	d053      	beq.n	801147c <uxr_serialize_ActivityInfoVariant+0x12c>
 80113d4:	f89a 3010 	ldrb.w	r3, [sl, #16]
 80113d8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80113dc:	0074      	lsls	r4, r6, #1
 80113de:	00c9      	lsls	r1, r1, #3
 80113e0:	2b03      	cmp	r3, #3
 80113e2:	d854      	bhi.n	801148e <uxr_serialize_ActivityInfoVariant+0x13e>
 80113e4:	e8df f003 	tbb	[pc, r3]
 80113e8:	02102132 	.word	0x02102132
 80113ec:	4441      	add	r1, r8
 80113ee:	4638      	mov	r0, r7
 80113f0:	6889      	ldr	r1, [r1, #8]
 80113f2:	f004 fc71 	bl	8015cd8 <ucdr_serialize_string>
 80113f6:	68ea      	ldr	r2, [r5, #12]
 80113f8:	3601      	adds	r6, #1
 80113fa:	4296      	cmp	r6, r2
 80113fc:	d242      	bcs.n	8011484 <uxr_serialize_ActivityInfoVariant+0x134>
 80113fe:	2800      	cmp	r0, #0
 8011400:	d1dd      	bne.n	80113be <uxr_serialize_ActivityInfoVariant+0x6e>
 8011402:	f04f 0900 	mov.w	r9, #0
 8011406:	e7b4      	b.n	8011372 <uxr_serialize_ActivityInfoVariant+0x22>
 8011408:	3108      	adds	r1, #8
 801140a:	4441      	add	r1, r8
 801140c:	2210      	movs	r2, #16
 801140e:	4638      	mov	r0, r7
 8011410:	f004 fb42 	bl	8015a98 <ucdr_serialize_array_uint8_t>
 8011414:	4434      	add	r4, r6
 8011416:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801141a:	4604      	mov	r4, r0
 801141c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801141e:	4638      	mov	r0, r7
 8011420:	f7f9 fc10 	bl	800ac44 <ucdr_serialize_uint32_t>
 8011424:	4020      	ands	r0, r4
 8011426:	b2c0      	uxtb	r0, r0
 8011428:	e7e5      	b.n	80113f6 <uxr_serialize_ActivityInfoVariant+0xa6>
 801142a:	3108      	adds	r1, #8
 801142c:	4441      	add	r1, r8
 801142e:	2204      	movs	r2, #4
 8011430:	4638      	mov	r0, r7
 8011432:	f004 fb31 	bl	8015a98 <ucdr_serialize_array_uint8_t>
 8011436:	4434      	add	r4, r6
 8011438:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801143c:	4604      	mov	r4, r0
 801143e:	8b19      	ldrh	r1, [r3, #24]
 8011440:	4638      	mov	r0, r7
 8011442:	f7f9 fa15 	bl	800a870 <ucdr_serialize_uint16_t>
 8011446:	4020      	ands	r0, r4
 8011448:	b2c0      	uxtb	r0, r0
 801144a:	e7d4      	b.n	80113f6 <uxr_serialize_ActivityInfoVariant+0xa6>
 801144c:	3108      	adds	r1, #8
 801144e:	4441      	add	r1, r8
 8011450:	2202      	movs	r2, #2
 8011452:	4638      	mov	r0, r7
 8011454:	f004 fb20 	bl	8015a98 <ucdr_serialize_array_uint8_t>
 8011458:	4434      	add	r4, r6
 801145a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801145e:	4604      	mov	r4, r0
 8011460:	7d99      	ldrb	r1, [r3, #22]
 8011462:	4638      	mov	r0, r7
 8011464:	f7f9 f9d8 	bl	800a818 <ucdr_serialize_uint8_t>
 8011468:	4020      	ands	r0, r4
 801146a:	b2c0      	uxtb	r0, r0
 801146c:	e7c3      	b.n	80113f6 <uxr_serialize_ActivityInfoVariant+0xa6>
 801146e:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011472:	4638      	mov	r0, r7
 8011474:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011478:	f7f9 bf0a 	b.w	800b290 <ucdr_serialize_int16_t>
 801147c:	68ea      	ldr	r2, [r5, #12]
 801147e:	3601      	adds	r6, #1
 8011480:	42b2      	cmp	r2, r6
 8011482:	d8be      	bhi.n	8011402 <uxr_serialize_ActivityInfoVariant+0xb2>
 8011484:	ea09 0900 	and.w	r9, r9, r0
 8011488:	fa5f f989 	uxtb.w	r9, r9
 801148c:	e771      	b.n	8011372 <uxr_serialize_ActivityInfoVariant+0x22>
 801148e:	68eb      	ldr	r3, [r5, #12]
 8011490:	3601      	adds	r6, #1
 8011492:	429e      	cmp	r6, r3
 8011494:	f10a 0a18 	add.w	sl, sl, #24
 8011498:	d395      	bcc.n	80113c6 <uxr_serialize_ActivityInfoVariant+0x76>
 801149a:	e76a      	b.n	8011372 <uxr_serialize_ActivityInfoVariant+0x22>

0801149c <uxr_deserialize_BaseObjectReply>:
 801149c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114a0:	2202      	movs	r2, #2
 80114a2:	4606      	mov	r6, r0
 80114a4:	460f      	mov	r7, r1
 80114a6:	f004 fb5b 	bl	8015b60 <ucdr_deserialize_array_uint8_t>
 80114aa:	2202      	movs	r2, #2
 80114ac:	18b9      	adds	r1, r7, r2
 80114ae:	4605      	mov	r5, r0
 80114b0:	4630      	mov	r0, r6
 80114b2:	f004 fb55 	bl	8015b60 <ucdr_deserialize_array_uint8_t>
 80114b6:	1d39      	adds	r1, r7, #4
 80114b8:	4680      	mov	r8, r0
 80114ba:	4630      	mov	r0, r6
 80114bc:	f7f9 f9c2 	bl	800a844 <ucdr_deserialize_uint8_t>
 80114c0:	1d79      	adds	r1, r7, #5
 80114c2:	4604      	mov	r4, r0
 80114c4:	4630      	mov	r0, r6
 80114c6:	f7f9 f9bd 	bl	800a844 <ucdr_deserialize_uint8_t>
 80114ca:	ea05 0508 	and.w	r5, r5, r8
 80114ce:	402c      	ands	r4, r5
 80114d0:	4020      	ands	r0, r4
 80114d2:	b2c0      	uxtb	r0, r0
 80114d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080114d8 <uxr_serialize_ReadSpecification>:
 80114d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114dc:	460e      	mov	r6, r1
 80114de:	7809      	ldrb	r1, [r1, #0]
 80114e0:	4607      	mov	r7, r0
 80114e2:	f7f9 f999 	bl	800a818 <ucdr_serialize_uint8_t>
 80114e6:	7871      	ldrb	r1, [r6, #1]
 80114e8:	4604      	mov	r4, r0
 80114ea:	4638      	mov	r0, r7
 80114ec:	f7f9 f994 	bl	800a818 <ucdr_serialize_uint8_t>
 80114f0:	78b1      	ldrb	r1, [r6, #2]
 80114f2:	4004      	ands	r4, r0
 80114f4:	4638      	mov	r0, r7
 80114f6:	f7f9 f961 	bl	800a7bc <ucdr_serialize_bool>
 80114fa:	78b3      	ldrb	r3, [r6, #2]
 80114fc:	b2e4      	uxtb	r4, r4
 80114fe:	4004      	ands	r4, r0
 8011500:	b94b      	cbnz	r3, 8011516 <uxr_serialize_ReadSpecification+0x3e>
 8011502:	7a31      	ldrb	r1, [r6, #8]
 8011504:	4638      	mov	r0, r7
 8011506:	f7f9 f959 	bl	800a7bc <ucdr_serialize_bool>
 801150a:	7a33      	ldrb	r3, [r6, #8]
 801150c:	4004      	ands	r4, r0
 801150e:	b943      	cbnz	r3, 8011522 <uxr_serialize_ReadSpecification+0x4a>
 8011510:	4620      	mov	r0, r4
 8011512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011516:	6871      	ldr	r1, [r6, #4]
 8011518:	4638      	mov	r0, r7
 801151a:	f004 fbdd 	bl	8015cd8 <ucdr_serialize_string>
 801151e:	4004      	ands	r4, r0
 8011520:	e7ef      	b.n	8011502 <uxr_serialize_ReadSpecification+0x2a>
 8011522:	8971      	ldrh	r1, [r6, #10]
 8011524:	4638      	mov	r0, r7
 8011526:	f7f9 f9a3 	bl	800a870 <ucdr_serialize_uint16_t>
 801152a:	89b1      	ldrh	r1, [r6, #12]
 801152c:	4605      	mov	r5, r0
 801152e:	4638      	mov	r0, r7
 8011530:	f7f9 f99e 	bl	800a870 <ucdr_serialize_uint16_t>
 8011534:	89f1      	ldrh	r1, [r6, #14]
 8011536:	4005      	ands	r5, r0
 8011538:	4638      	mov	r0, r7
 801153a:	f7f9 f999 	bl	800a870 <ucdr_serialize_uint16_t>
 801153e:	8a31      	ldrh	r1, [r6, #16]
 8011540:	4680      	mov	r8, r0
 8011542:	4638      	mov	r0, r7
 8011544:	f7f9 f994 	bl	800a870 <ucdr_serialize_uint16_t>
 8011548:	b2ed      	uxtb	r5, r5
 801154a:	4025      	ands	r5, r4
 801154c:	ea08 0505 	and.w	r5, r8, r5
 8011550:	ea00 0405 	and.w	r4, r0, r5
 8011554:	4620      	mov	r0, r4
 8011556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801155a:	bf00      	nop

0801155c <uxr_serialize_CREATE_CLIENT_Payload>:
 801155c:	f7ff bb02 	b.w	8010b64 <uxr_serialize_CLIENT_Representation>

08011560 <uxr_serialize_CREATE_Payload>:
 8011560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011562:	2202      	movs	r2, #2
 8011564:	4607      	mov	r7, r0
 8011566:	460e      	mov	r6, r1
 8011568:	f004 fa96 	bl	8015a98 <ucdr_serialize_array_uint8_t>
 801156c:	2202      	movs	r2, #2
 801156e:	18b1      	adds	r1, r6, r2
 8011570:	4605      	mov	r5, r0
 8011572:	4638      	mov	r0, r7
 8011574:	f004 fa90 	bl	8015a98 <ucdr_serialize_array_uint8_t>
 8011578:	7931      	ldrb	r1, [r6, #4]
 801157a:	4604      	mov	r4, r0
 801157c:	4638      	mov	r0, r7
 801157e:	f7f9 f94b 	bl	800a818 <ucdr_serialize_uint8_t>
 8011582:	b170      	cbz	r0, 80115a2 <uxr_serialize_CREATE_Payload+0x42>
 8011584:	7933      	ldrb	r3, [r6, #4]
 8011586:	402c      	ands	r4, r5
 8011588:	3b01      	subs	r3, #1
 801158a:	b2e4      	uxtb	r4, r4
 801158c:	2b0d      	cmp	r3, #13
 801158e:	d809      	bhi.n	80115a4 <uxr_serialize_CREATE_Payload+0x44>
 8011590:	e8df f003 	tbb	[pc, r3]
 8011594:	23230a4c 	.word	0x23230a4c
 8011598:	0a0a0a0a 	.word	0x0a0a0a0a
 801159c:	12121208 	.word	0x12121208
 80115a0:	3e45      	.short	0x3e45
 80115a2:	2400      	movs	r4, #0
 80115a4:	4620      	mov	r0, r4
 80115a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80115a8:	f106 0108 	add.w	r1, r6, #8
 80115ac:	4638      	mov	r0, r7
 80115ae:	f7ff fbdf 	bl	8010d70 <uxr_serialize_DATAWRITER_Representation>
 80115b2:	4004      	ands	r4, r0
 80115b4:	4620      	mov	r0, r4
 80115b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80115b8:	7a31      	ldrb	r1, [r6, #8]
 80115ba:	4638      	mov	r0, r7
 80115bc:	f7f9 f92c 	bl	800a818 <ucdr_serialize_uint8_t>
 80115c0:	2800      	cmp	r0, #0
 80115c2:	d0ee      	beq.n	80115a2 <uxr_serialize_CREATE_Payload+0x42>
 80115c4:	7a33      	ldrb	r3, [r6, #8]
 80115c6:	2b01      	cmp	r3, #1
 80115c8:	d001      	beq.n	80115ce <uxr_serialize_CREATE_Payload+0x6e>
 80115ca:	2b02      	cmp	r3, #2
 80115cc:	d1ea      	bne.n	80115a4 <uxr_serialize_CREATE_Payload+0x44>
 80115ce:	68f1      	ldr	r1, [r6, #12]
 80115d0:	4638      	mov	r0, r7
 80115d2:	f004 fb81 	bl	8015cd8 <ucdr_serialize_string>
 80115d6:	4004      	ands	r4, r0
 80115d8:	e7e4      	b.n	80115a4 <uxr_serialize_CREATE_Payload+0x44>
 80115da:	7a31      	ldrb	r1, [r6, #8]
 80115dc:	4638      	mov	r0, r7
 80115de:	f7f9 f91b 	bl	800a818 <ucdr_serialize_uint8_t>
 80115e2:	4605      	mov	r5, r0
 80115e4:	b158      	cbz	r0, 80115fe <uxr_serialize_CREATE_Payload+0x9e>
 80115e6:	7a33      	ldrb	r3, [r6, #8]
 80115e8:	2b02      	cmp	r3, #2
 80115ea:	d034      	beq.n	8011656 <uxr_serialize_CREATE_Payload+0xf6>
 80115ec:	2b03      	cmp	r3, #3
 80115ee:	d106      	bne.n	80115fe <uxr_serialize_CREATE_Payload+0x9e>
 80115f0:	68f2      	ldr	r2, [r6, #12]
 80115f2:	f106 0110 	add.w	r1, r6, #16
 80115f6:	4638      	mov	r0, r7
 80115f8:	f004 fb42 	bl	8015c80 <ucdr_serialize_sequence_uint8_t>
 80115fc:	4605      	mov	r5, r0
 80115fe:	2202      	movs	r2, #2
 8011600:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8011604:	4638      	mov	r0, r7
 8011606:	f004 fa47 	bl	8015a98 <ucdr_serialize_array_uint8_t>
 801160a:	4028      	ands	r0, r5
 801160c:	4004      	ands	r4, r0
 801160e:	e7c9      	b.n	80115a4 <uxr_serialize_CREATE_Payload+0x44>
 8011610:	f106 0108 	add.w	r1, r6, #8
 8011614:	4638      	mov	r0, r7
 8011616:	f7ff faa5 	bl	8010b64 <uxr_serialize_CLIENT_Representation>
 801161a:	4004      	ands	r4, r0
 801161c:	e7c2      	b.n	80115a4 <uxr_serialize_CREATE_Payload+0x44>
 801161e:	f106 0108 	add.w	r1, r6, #8
 8011622:	4638      	mov	r0, r7
 8011624:	f7ff fb5a 	bl	8010cdc <uxr_serialize_AGENT_Representation>
 8011628:	4004      	ands	r4, r0
 801162a:	e7bb      	b.n	80115a4 <uxr_serialize_CREATE_Payload+0x44>
 801162c:	7a31      	ldrb	r1, [r6, #8]
 801162e:	4638      	mov	r0, r7
 8011630:	f7f9 f8f2 	bl	800a818 <ucdr_serialize_uint8_t>
 8011634:	4605      	mov	r5, r0
 8011636:	b130      	cbz	r0, 8011646 <uxr_serialize_CREATE_Payload+0xe6>
 8011638:	7a33      	ldrb	r3, [r6, #8]
 801163a:	2b02      	cmp	r3, #2
 801163c:	d011      	beq.n	8011662 <uxr_serialize_CREATE_Payload+0x102>
 801163e:	2b03      	cmp	r3, #3
 8011640:	d015      	beq.n	801166e <uxr_serialize_CREATE_Payload+0x10e>
 8011642:	2b01      	cmp	r3, #1
 8011644:	d00d      	beq.n	8011662 <uxr_serialize_CREATE_Payload+0x102>
 8011646:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 801164a:	4638      	mov	r0, r7
 801164c:	f7f9 fe20 	bl	800b290 <ucdr_serialize_int16_t>
 8011650:	4028      	ands	r0, r5
 8011652:	4004      	ands	r4, r0
 8011654:	e7a6      	b.n	80115a4 <uxr_serialize_CREATE_Payload+0x44>
 8011656:	68f1      	ldr	r1, [r6, #12]
 8011658:	4638      	mov	r0, r7
 801165a:	f004 fb3d 	bl	8015cd8 <ucdr_serialize_string>
 801165e:	4605      	mov	r5, r0
 8011660:	e7cd      	b.n	80115fe <uxr_serialize_CREATE_Payload+0x9e>
 8011662:	68f1      	ldr	r1, [r6, #12]
 8011664:	4638      	mov	r0, r7
 8011666:	f004 fb37 	bl	8015cd8 <ucdr_serialize_string>
 801166a:	4605      	mov	r5, r0
 801166c:	e7eb      	b.n	8011646 <uxr_serialize_CREATE_Payload+0xe6>
 801166e:	68f2      	ldr	r2, [r6, #12]
 8011670:	f106 0110 	add.w	r1, r6, #16
 8011674:	4638      	mov	r0, r7
 8011676:	f004 fb03 	bl	8015c80 <ucdr_serialize_sequence_uint8_t>
 801167a:	4605      	mov	r5, r0
 801167c:	e7e3      	b.n	8011646 <uxr_serialize_CREATE_Payload+0xe6>
 801167e:	bf00      	nop

08011680 <uxr_deserialize_GET_INFO_Payload>:
 8011680:	b570      	push	{r4, r5, r6, lr}
 8011682:	2202      	movs	r2, #2
 8011684:	4605      	mov	r5, r0
 8011686:	460e      	mov	r6, r1
 8011688:	f004 fa6a 	bl	8015b60 <ucdr_deserialize_array_uint8_t>
 801168c:	2202      	movs	r2, #2
 801168e:	18b1      	adds	r1, r6, r2
 8011690:	4604      	mov	r4, r0
 8011692:	4628      	mov	r0, r5
 8011694:	f004 fa64 	bl	8015b60 <ucdr_deserialize_array_uint8_t>
 8011698:	1d31      	adds	r1, r6, #4
 801169a:	4004      	ands	r4, r0
 801169c:	4628      	mov	r0, r5
 801169e:	f7f9 fc01 	bl	800aea4 <ucdr_deserialize_uint32_t>
 80116a2:	b2e4      	uxtb	r4, r4
 80116a4:	4020      	ands	r0, r4
 80116a6:	bd70      	pop	{r4, r5, r6, pc}

080116a8 <uxr_serialize_DELETE_Payload>:
 80116a8:	b570      	push	{r4, r5, r6, lr}
 80116aa:	2202      	movs	r2, #2
 80116ac:	4605      	mov	r5, r0
 80116ae:	460e      	mov	r6, r1
 80116b0:	f004 f9f2 	bl	8015a98 <ucdr_serialize_array_uint8_t>
 80116b4:	2202      	movs	r2, #2
 80116b6:	4604      	mov	r4, r0
 80116b8:	18b1      	adds	r1, r6, r2
 80116ba:	4628      	mov	r0, r5
 80116bc:	f004 f9ec 	bl	8015a98 <ucdr_serialize_array_uint8_t>
 80116c0:	4020      	ands	r0, r4
 80116c2:	b2c0      	uxtb	r0, r0
 80116c4:	bd70      	pop	{r4, r5, r6, pc}
 80116c6:	bf00      	nop

080116c8 <uxr_deserialize_STATUS_AGENT_Payload>:
 80116c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116cc:	4605      	mov	r5, r0
 80116ce:	460e      	mov	r6, r1
 80116d0:	f7f9 f8b8 	bl	800a844 <ucdr_deserialize_uint8_t>
 80116d4:	1c71      	adds	r1, r6, #1
 80116d6:	4604      	mov	r4, r0
 80116d8:	4628      	mov	r0, r5
 80116da:	f7f9 f8b3 	bl	800a844 <ucdr_deserialize_uint8_t>
 80116de:	2204      	movs	r2, #4
 80116e0:	18b1      	adds	r1, r6, r2
 80116e2:	4680      	mov	r8, r0
 80116e4:	4628      	mov	r0, r5
 80116e6:	f004 fa3b 	bl	8015b60 <ucdr_deserialize_array_uint8_t>
 80116ea:	f106 0108 	add.w	r1, r6, #8
 80116ee:	4607      	mov	r7, r0
 80116f0:	2202      	movs	r2, #2
 80116f2:	4628      	mov	r0, r5
 80116f4:	f004 fa34 	bl	8015b60 <ucdr_deserialize_array_uint8_t>
 80116f8:	ea04 0308 	and.w	r3, r4, r8
 80116fc:	b2db      	uxtb	r3, r3
 80116fe:	ea03 0407 	and.w	r4, r3, r7
 8011702:	2202      	movs	r2, #2
 8011704:	4607      	mov	r7, r0
 8011706:	f106 010a 	add.w	r1, r6, #10
 801170a:	4628      	mov	r0, r5
 801170c:	f004 fa28 	bl	8015b60 <ucdr_deserialize_array_uint8_t>
 8011710:	f106 010c 	add.w	r1, r6, #12
 8011714:	4603      	mov	r3, r0
 8011716:	4628      	mov	r0, r5
 8011718:	461d      	mov	r5, r3
 801171a:	f7f9 f865 	bl	800a7e8 <ucdr_deserialize_bool>
 801171e:	403c      	ands	r4, r7
 8011720:	4025      	ands	r5, r4
 8011722:	4028      	ands	r0, r5
 8011724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011728 <uxr_deserialize_STATUS_Payload>:
 8011728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801172c:	2202      	movs	r2, #2
 801172e:	4606      	mov	r6, r0
 8011730:	460f      	mov	r7, r1
 8011732:	f004 fa15 	bl	8015b60 <ucdr_deserialize_array_uint8_t>
 8011736:	2202      	movs	r2, #2
 8011738:	18b9      	adds	r1, r7, r2
 801173a:	4605      	mov	r5, r0
 801173c:	4630      	mov	r0, r6
 801173e:	f004 fa0f 	bl	8015b60 <ucdr_deserialize_array_uint8_t>
 8011742:	1d39      	adds	r1, r7, #4
 8011744:	4680      	mov	r8, r0
 8011746:	4630      	mov	r0, r6
 8011748:	f7f9 f87c 	bl	800a844 <ucdr_deserialize_uint8_t>
 801174c:	1d79      	adds	r1, r7, #5
 801174e:	4604      	mov	r4, r0
 8011750:	4630      	mov	r0, r6
 8011752:	f7f9 f877 	bl	800a844 <ucdr_deserialize_uint8_t>
 8011756:	ea05 0508 	and.w	r5, r5, r8
 801175a:	402c      	ands	r4, r5
 801175c:	4020      	ands	r0, r4
 801175e:	b2c0      	uxtb	r0, r0
 8011760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011764 <uxr_serialize_INFO_Payload>:
 8011764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011768:	2202      	movs	r2, #2
 801176a:	460c      	mov	r4, r1
 801176c:	4605      	mov	r5, r0
 801176e:	f004 f993 	bl	8015a98 <ucdr_serialize_array_uint8_t>
 8011772:	2202      	movs	r2, #2
 8011774:	18a1      	adds	r1, r4, r2
 8011776:	4680      	mov	r8, r0
 8011778:	4628      	mov	r0, r5
 801177a:	f004 f98d 	bl	8015a98 <ucdr_serialize_array_uint8_t>
 801177e:	7921      	ldrb	r1, [r4, #4]
 8011780:	4607      	mov	r7, r0
 8011782:	4628      	mov	r0, r5
 8011784:	f7f9 f848 	bl	800a818 <ucdr_serialize_uint8_t>
 8011788:	7961      	ldrb	r1, [r4, #5]
 801178a:	4606      	mov	r6, r0
 801178c:	4628      	mov	r0, r5
 801178e:	f7f9 f843 	bl	800a818 <ucdr_serialize_uint8_t>
 8011792:	ea08 0807 	and.w	r8, r8, r7
 8011796:	ea06 0608 	and.w	r6, r6, r8
 801179a:	4006      	ands	r6, r0
 801179c:	7a21      	ldrb	r1, [r4, #8]
 801179e:	4628      	mov	r0, r5
 80117a0:	f7f9 f80c 	bl	800a7bc <ucdr_serialize_bool>
 80117a4:	7a23      	ldrb	r3, [r4, #8]
 80117a6:	b2f7      	uxtb	r7, r6
 80117a8:	4606      	mov	r6, r0
 80117aa:	b96b      	cbnz	r3, 80117c8 <uxr_serialize_INFO_Payload+0x64>
 80117ac:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 80117b0:	4628      	mov	r0, r5
 80117b2:	f7f9 f803 	bl	800a7bc <ucdr_serialize_bool>
 80117b6:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 80117ba:	4030      	ands	r0, r6
 80117bc:	b2c6      	uxtb	r6, r0
 80117be:	b983      	cbnz	r3, 80117e2 <uxr_serialize_INFO_Payload+0x7e>
 80117c0:	ea06 0007 	and.w	r0, r6, r7
 80117c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117c8:	7b21      	ldrb	r1, [r4, #12]
 80117ca:	4628      	mov	r0, r5
 80117cc:	f7f9 f824 	bl	800a818 <ucdr_serialize_uint8_t>
 80117d0:	b188      	cbz	r0, 80117f6 <uxr_serialize_INFO_Payload+0x92>
 80117d2:	f104 010c 	add.w	r1, r4, #12
 80117d6:	4628      	mov	r0, r5
 80117d8:	f7ff faf2 	bl	8010dc0 <uxr_serialize_ObjectVariant.part.0>
 80117dc:	4030      	ands	r0, r6
 80117de:	b2c6      	uxtb	r6, r0
 80117e0:	e7e4      	b.n	80117ac <uxr_serialize_INFO_Payload+0x48>
 80117e2:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 80117e6:	4628      	mov	r0, r5
 80117e8:	f7ff fdb2 	bl	8011350 <uxr_serialize_ActivityInfoVariant>
 80117ec:	4006      	ands	r6, r0
 80117ee:	ea06 0007 	and.w	r0, r6, r7
 80117f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117f6:	4606      	mov	r6, r0
 80117f8:	e7d8      	b.n	80117ac <uxr_serialize_INFO_Payload+0x48>
 80117fa:	bf00      	nop

080117fc <uxr_serialize_READ_DATA_Payload>:
 80117fc:	b570      	push	{r4, r5, r6, lr}
 80117fe:	2202      	movs	r2, #2
 8011800:	4605      	mov	r5, r0
 8011802:	460e      	mov	r6, r1
 8011804:	f004 f948 	bl	8015a98 <ucdr_serialize_array_uint8_t>
 8011808:	2202      	movs	r2, #2
 801180a:	18b1      	adds	r1, r6, r2
 801180c:	4604      	mov	r4, r0
 801180e:	4628      	mov	r0, r5
 8011810:	f004 f942 	bl	8015a98 <ucdr_serialize_array_uint8_t>
 8011814:	1d31      	adds	r1, r6, #4
 8011816:	4004      	ands	r4, r0
 8011818:	4628      	mov	r0, r5
 801181a:	f7ff fe5d 	bl	80114d8 <uxr_serialize_ReadSpecification>
 801181e:	b2e4      	uxtb	r4, r4
 8011820:	4020      	ands	r0, r4
 8011822:	bd70      	pop	{r4, r5, r6, pc}

08011824 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8011824:	b570      	push	{r4, r5, r6, lr}
 8011826:	2202      	movs	r2, #2
 8011828:	4605      	mov	r5, r0
 801182a:	460e      	mov	r6, r1
 801182c:	f004 f934 	bl	8015a98 <ucdr_serialize_array_uint8_t>
 8011830:	2202      	movs	r2, #2
 8011832:	4604      	mov	r4, r0
 8011834:	18b1      	adds	r1, r6, r2
 8011836:	4628      	mov	r0, r5
 8011838:	f004 f92e 	bl	8015a98 <ucdr_serialize_array_uint8_t>
 801183c:	4020      	ands	r0, r4
 801183e:	b2c0      	uxtb	r0, r0
 8011840:	bd70      	pop	{r4, r5, r6, pc}
 8011842:	bf00      	nop

08011844 <uxr_serialize_ACKNACK_Payload>:
 8011844:	b570      	push	{r4, r5, r6, lr}
 8011846:	460c      	mov	r4, r1
 8011848:	460e      	mov	r6, r1
 801184a:	f834 1b02 	ldrh.w	r1, [r4], #2
 801184e:	4605      	mov	r5, r0
 8011850:	f7f9 f80e 	bl	800a870 <ucdr_serialize_uint16_t>
 8011854:	2202      	movs	r2, #2
 8011856:	4621      	mov	r1, r4
 8011858:	4604      	mov	r4, r0
 801185a:	4628      	mov	r0, r5
 801185c:	f004 f91c 	bl	8015a98 <ucdr_serialize_array_uint8_t>
 8011860:	7931      	ldrb	r1, [r6, #4]
 8011862:	4004      	ands	r4, r0
 8011864:	4628      	mov	r0, r5
 8011866:	f7f8 ffd7 	bl	800a818 <ucdr_serialize_uint8_t>
 801186a:	b2e4      	uxtb	r4, r4
 801186c:	4020      	ands	r0, r4
 801186e:	bd70      	pop	{r4, r5, r6, pc}

08011870 <uxr_deserialize_ACKNACK_Payload>:
 8011870:	b570      	push	{r4, r5, r6, lr}
 8011872:	4605      	mov	r5, r0
 8011874:	460e      	mov	r6, r1
 8011876:	f7f9 f8fb 	bl	800aa70 <ucdr_deserialize_uint16_t>
 801187a:	2202      	movs	r2, #2
 801187c:	18b1      	adds	r1, r6, r2
 801187e:	4604      	mov	r4, r0
 8011880:	4628      	mov	r0, r5
 8011882:	f004 f96d 	bl	8015b60 <ucdr_deserialize_array_uint8_t>
 8011886:	1d31      	adds	r1, r6, #4
 8011888:	4004      	ands	r4, r0
 801188a:	4628      	mov	r0, r5
 801188c:	f7f8 ffda 	bl	800a844 <ucdr_deserialize_uint8_t>
 8011890:	b2e4      	uxtb	r4, r4
 8011892:	4020      	ands	r0, r4
 8011894:	bd70      	pop	{r4, r5, r6, pc}
 8011896:	bf00      	nop

08011898 <uxr_serialize_HEARTBEAT_Payload>:
 8011898:	b570      	push	{r4, r5, r6, lr}
 801189a:	460d      	mov	r5, r1
 801189c:	8809      	ldrh	r1, [r1, #0]
 801189e:	4606      	mov	r6, r0
 80118a0:	f7f8 ffe6 	bl	800a870 <ucdr_serialize_uint16_t>
 80118a4:	8869      	ldrh	r1, [r5, #2]
 80118a6:	4604      	mov	r4, r0
 80118a8:	4630      	mov	r0, r6
 80118aa:	f7f8 ffe1 	bl	800a870 <ucdr_serialize_uint16_t>
 80118ae:	7929      	ldrb	r1, [r5, #4]
 80118b0:	4004      	ands	r4, r0
 80118b2:	4630      	mov	r0, r6
 80118b4:	f7f8 ffb0 	bl	800a818 <ucdr_serialize_uint8_t>
 80118b8:	b2e4      	uxtb	r4, r4
 80118ba:	4020      	ands	r0, r4
 80118bc:	bd70      	pop	{r4, r5, r6, pc}
 80118be:	bf00      	nop

080118c0 <uxr_deserialize_HEARTBEAT_Payload>:
 80118c0:	b570      	push	{r4, r5, r6, lr}
 80118c2:	4605      	mov	r5, r0
 80118c4:	460e      	mov	r6, r1
 80118c6:	f7f9 f8d3 	bl	800aa70 <ucdr_deserialize_uint16_t>
 80118ca:	1cb1      	adds	r1, r6, #2
 80118cc:	4604      	mov	r4, r0
 80118ce:	4628      	mov	r0, r5
 80118d0:	f7f9 f8ce 	bl	800aa70 <ucdr_deserialize_uint16_t>
 80118d4:	1d31      	adds	r1, r6, #4
 80118d6:	4004      	ands	r4, r0
 80118d8:	4628      	mov	r0, r5
 80118da:	f7f8 ffb3 	bl	800a844 <ucdr_deserialize_uint8_t>
 80118de:	b2e4      	uxtb	r4, r4
 80118e0:	4020      	ands	r0, r4
 80118e2:	bd70      	pop	{r4, r5, r6, pc}

080118e4 <uxr_serialize_TIMESTAMP_Payload>:
 80118e4:	b570      	push	{r4, r5, r6, lr}
 80118e6:	460d      	mov	r5, r1
 80118e8:	6809      	ldr	r1, [r1, #0]
 80118ea:	4606      	mov	r6, r0
 80118ec:	f7f9 fdc4 	bl	800b478 <ucdr_serialize_int32_t>
 80118f0:	6869      	ldr	r1, [r5, #4]
 80118f2:	4604      	mov	r4, r0
 80118f4:	4630      	mov	r0, r6
 80118f6:	f7f9 f9a5 	bl	800ac44 <ucdr_serialize_uint32_t>
 80118fa:	4020      	ands	r0, r4
 80118fc:	b2c0      	uxtb	r0, r0
 80118fe:	bd70      	pop	{r4, r5, r6, pc}

08011900 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8011900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011904:	4605      	mov	r5, r0
 8011906:	460e      	mov	r6, r1
 8011908:	f7f9 fe4e 	bl	800b5a8 <ucdr_deserialize_int32_t>
 801190c:	1d31      	adds	r1, r6, #4
 801190e:	4607      	mov	r7, r0
 8011910:	4628      	mov	r0, r5
 8011912:	f7f9 fac7 	bl	800aea4 <ucdr_deserialize_uint32_t>
 8011916:	f106 0108 	add.w	r1, r6, #8
 801191a:	4680      	mov	r8, r0
 801191c:	4628      	mov	r0, r5
 801191e:	f7f9 fe43 	bl	800b5a8 <ucdr_deserialize_int32_t>
 8011922:	f106 010c 	add.w	r1, r6, #12
 8011926:	4604      	mov	r4, r0
 8011928:	4628      	mov	r0, r5
 801192a:	f7f9 fabb 	bl	800aea4 <ucdr_deserialize_uint32_t>
 801192e:	ea07 0708 	and.w	r7, r7, r8
 8011932:	403c      	ands	r4, r7
 8011934:	f106 0110 	add.w	r1, r6, #16
 8011938:	4004      	ands	r4, r0
 801193a:	4628      	mov	r0, r5
 801193c:	f7f9 fe34 	bl	800b5a8 <ucdr_deserialize_int32_t>
 8011940:	f106 0114 	add.w	r1, r6, #20
 8011944:	4607      	mov	r7, r0
 8011946:	4628      	mov	r0, r5
 8011948:	f7f9 faac 	bl	800aea4 <ucdr_deserialize_uint32_t>
 801194c:	b2e4      	uxtb	r4, r4
 801194e:	403c      	ands	r4, r7
 8011950:	4020      	ands	r0, r4
 8011952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011956:	bf00      	nop

08011958 <uxr_serialize_SampleIdentity>:
 8011958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801195c:	220c      	movs	r2, #12
 801195e:	4604      	mov	r4, r0
 8011960:	460d      	mov	r5, r1
 8011962:	f004 f899 	bl	8015a98 <ucdr_serialize_array_uint8_t>
 8011966:	2203      	movs	r2, #3
 8011968:	f105 010c 	add.w	r1, r5, #12
 801196c:	4607      	mov	r7, r0
 801196e:	4620      	mov	r0, r4
 8011970:	f004 f892 	bl	8015a98 <ucdr_serialize_array_uint8_t>
 8011974:	7be9      	ldrb	r1, [r5, #15]
 8011976:	4680      	mov	r8, r0
 8011978:	4620      	mov	r0, r4
 801197a:	f7f8 ff4d 	bl	800a818 <ucdr_serialize_uint8_t>
 801197e:	6929      	ldr	r1, [r5, #16]
 8011980:	4606      	mov	r6, r0
 8011982:	4620      	mov	r0, r4
 8011984:	f7f9 fd78 	bl	800b478 <ucdr_serialize_int32_t>
 8011988:	6969      	ldr	r1, [r5, #20]
 801198a:	4603      	mov	r3, r0
 801198c:	4620      	mov	r0, r4
 801198e:	ea07 0708 	and.w	r7, r7, r8
 8011992:	461c      	mov	r4, r3
 8011994:	f7f9 f956 	bl	800ac44 <ucdr_serialize_uint32_t>
 8011998:	403e      	ands	r6, r7
 801199a:	4034      	ands	r4, r6
 801199c:	4020      	ands	r0, r4
 801199e:	b2c0      	uxtb	r0, r0
 80119a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080119a4 <uxr_deserialize_SampleIdentity>:
 80119a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119a8:	220c      	movs	r2, #12
 80119aa:	4604      	mov	r4, r0
 80119ac:	460d      	mov	r5, r1
 80119ae:	f004 f8d7 	bl	8015b60 <ucdr_deserialize_array_uint8_t>
 80119b2:	2203      	movs	r2, #3
 80119b4:	f105 010c 	add.w	r1, r5, #12
 80119b8:	4607      	mov	r7, r0
 80119ba:	4620      	mov	r0, r4
 80119bc:	f004 f8d0 	bl	8015b60 <ucdr_deserialize_array_uint8_t>
 80119c0:	f105 010f 	add.w	r1, r5, #15
 80119c4:	4680      	mov	r8, r0
 80119c6:	4620      	mov	r0, r4
 80119c8:	f7f8 ff3c 	bl	800a844 <ucdr_deserialize_uint8_t>
 80119cc:	f105 0110 	add.w	r1, r5, #16
 80119d0:	4606      	mov	r6, r0
 80119d2:	4620      	mov	r0, r4
 80119d4:	f7f9 fde8 	bl	800b5a8 <ucdr_deserialize_int32_t>
 80119d8:	f105 0114 	add.w	r1, r5, #20
 80119dc:	4603      	mov	r3, r0
 80119de:	4620      	mov	r0, r4
 80119e0:	ea07 0708 	and.w	r7, r7, r8
 80119e4:	461c      	mov	r4, r3
 80119e6:	f7f9 fa5d 	bl	800aea4 <ucdr_deserialize_uint32_t>
 80119ea:	403e      	ands	r6, r7
 80119ec:	4034      	ands	r4, r6
 80119ee:	4020      	ands	r0, r4
 80119f0:	b2c0      	uxtb	r0, r0
 80119f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119f6:	bf00      	nop

080119f8 <rcl_client_get_rmw_handle>:
 80119f8:	b118      	cbz	r0, 8011a02 <rcl_client_get_rmw_handle+0xa>
 80119fa:	6800      	ldr	r0, [r0, #0]
 80119fc:	b108      	cbz	r0, 8011a02 <rcl_client_get_rmw_handle+0xa>
 80119fe:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011a02:	4770      	bx	lr

08011a04 <rcl_send_request>:
 8011a04:	b570      	push	{r4, r5, r6, lr}
 8011a06:	b082      	sub	sp, #8
 8011a08:	b1e8      	cbz	r0, 8011a46 <rcl_send_request+0x42>
 8011a0a:	4604      	mov	r4, r0
 8011a0c:	6800      	ldr	r0, [r0, #0]
 8011a0e:	b1d0      	cbz	r0, 8011a46 <rcl_send_request+0x42>
 8011a10:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8011a14:	b1bb      	cbz	r3, 8011a46 <rcl_send_request+0x42>
 8011a16:	460e      	mov	r6, r1
 8011a18:	b1d1      	cbz	r1, 8011a50 <rcl_send_request+0x4c>
 8011a1a:	4615      	mov	r5, r2
 8011a1c:	b1c2      	cbz	r2, 8011a50 <rcl_send_request+0x4c>
 8011a1e:	2105      	movs	r1, #5
 8011a20:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8011a24:	f002 fda4 	bl	8014570 <__atomic_load_8>
 8011a28:	6823      	ldr	r3, [r4, #0]
 8011a2a:	e9c5 0100 	strd	r0, r1, [r5]
 8011a2e:	462a      	mov	r2, r5
 8011a30:	4631      	mov	r1, r6
 8011a32:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011a36:	f003 fc8f 	bl	8015358 <rmw_send_request>
 8011a3a:	4606      	mov	r6, r0
 8011a3c:	b160      	cbz	r0, 8011a58 <rcl_send_request+0x54>
 8011a3e:	2601      	movs	r6, #1
 8011a40:	4630      	mov	r0, r6
 8011a42:	b002      	add	sp, #8
 8011a44:	bd70      	pop	{r4, r5, r6, pc}
 8011a46:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8011a4a:	4630      	mov	r0, r6
 8011a4c:	b002      	add	sp, #8
 8011a4e:	bd70      	pop	{r4, r5, r6, pc}
 8011a50:	260b      	movs	r6, #11
 8011a52:	4630      	mov	r0, r6
 8011a54:	b002      	add	sp, #8
 8011a56:	bd70      	pop	{r4, r5, r6, pc}
 8011a58:	6820      	ldr	r0, [r4, #0]
 8011a5a:	2105      	movs	r1, #5
 8011a5c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011a60:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8011a64:	9100      	str	r1, [sp, #0]
 8011a66:	f002 fdef 	bl	8014648 <__atomic_exchange_8>
 8011a6a:	4630      	mov	r0, r6
 8011a6c:	b002      	add	sp, #8
 8011a6e:	bd70      	pop	{r4, r5, r6, pc}

08011a70 <rcl_take_response>:
 8011a70:	b570      	push	{r4, r5, r6, lr}
 8011a72:	468e      	mov	lr, r1
 8011a74:	460c      	mov	r4, r1
 8011a76:	4616      	mov	r6, r2
 8011a78:	4605      	mov	r5, r0
 8011a7a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011a7e:	b08c      	sub	sp, #48	@ 0x30
 8011a80:	f10d 0c18 	add.w	ip, sp, #24
 8011a84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011a88:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011a8c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011a90:	b35d      	cbz	r5, 8011aea <rcl_take_response+0x7a>
 8011a92:	682b      	ldr	r3, [r5, #0]
 8011a94:	b34b      	cbz	r3, 8011aea <rcl_take_response+0x7a>
 8011a96:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011a9a:	b330      	cbz	r0, 8011aea <rcl_take_response+0x7a>
 8011a9c:	b346      	cbz	r6, 8011af0 <rcl_take_response+0x80>
 8011a9e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8011af8 <rcl_take_response+0x88>
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	f88d 3007 	strb.w	r3, [sp, #7]
 8011aa8:	4632      	mov	r2, r6
 8011aaa:	f10d 0307 	add.w	r3, sp, #7
 8011aae:	a902      	add	r1, sp, #8
 8011ab0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011ab4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011ab8:	f003 fd56 	bl	8015568 <rmw_take_response>
 8011abc:	4605      	mov	r5, r0
 8011abe:	b9c8      	cbnz	r0, 8011af4 <rcl_take_response+0x84>
 8011ac0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011ac4:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8011ac8:	2a00      	cmp	r2, #0
 8011aca:	bf08      	it	eq
 8011acc:	461d      	moveq	r5, r3
 8011ace:	f10d 0e18 	add.w	lr, sp, #24
 8011ad2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011ad6:	46a4      	mov	ip, r4
 8011ad8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011adc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011ae0:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011ae4:	4628      	mov	r0, r5
 8011ae6:	b00c      	add	sp, #48	@ 0x30
 8011ae8:	bd70      	pop	{r4, r5, r6, pc}
 8011aea:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8011aee:	e7ee      	b.n	8011ace <rcl_take_response+0x5e>
 8011af0:	250b      	movs	r5, #11
 8011af2:	e7ec      	b.n	8011ace <rcl_take_response+0x5e>
 8011af4:	2501      	movs	r5, #1
 8011af6:	e7ea      	b.n	8011ace <rcl_take_response+0x5e>
	...

08011b00 <rcl_client_is_valid>:
 8011b00:	b130      	cbz	r0, 8011b10 <rcl_client_is_valid+0x10>
 8011b02:	6800      	ldr	r0, [r0, #0]
 8011b04:	b120      	cbz	r0, 8011b10 <rcl_client_is_valid+0x10>
 8011b06:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011b0a:	3800      	subs	r0, #0
 8011b0c:	bf18      	it	ne
 8011b0e:	2001      	movne	r0, #1
 8011b10:	4770      	bx	lr
 8011b12:	bf00      	nop

08011b14 <rcl_convert_rmw_ret_to_rcl_ret>:
 8011b14:	280b      	cmp	r0, #11
 8011b16:	dc0d      	bgt.n	8011b34 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8011b18:	2800      	cmp	r0, #0
 8011b1a:	db09      	blt.n	8011b30 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8011b1c:	280b      	cmp	r0, #11
 8011b1e:	d807      	bhi.n	8011b30 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8011b20:	e8df f000 	tbb	[pc, r0]
 8011b24:	07060607 	.word	0x07060607
 8011b28:	06060606 	.word	0x06060606
 8011b2c:	07070606 	.word	0x07070606
 8011b30:	2001      	movs	r0, #1
 8011b32:	4770      	bx	lr
 8011b34:	28cb      	cmp	r0, #203	@ 0xcb
 8011b36:	bf18      	it	ne
 8011b38:	2001      	movne	r0, #1
 8011b3a:	4770      	bx	lr

08011b3c <rcl_get_zero_initialized_context>:
 8011b3c:	4a03      	ldr	r2, [pc, #12]	@ (8011b4c <rcl_get_zero_initialized_context+0x10>)
 8011b3e:	4603      	mov	r3, r0
 8011b40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011b44:	e883 0003 	stmia.w	r3, {r0, r1}
 8011b48:	4618      	mov	r0, r3
 8011b4a:	4770      	bx	lr
 8011b4c:	08018cbc 	.word	0x08018cbc

08011b50 <rcl_context_is_valid>:
 8011b50:	b118      	cbz	r0, 8011b5a <rcl_context_is_valid+0xa>
 8011b52:	6840      	ldr	r0, [r0, #4]
 8011b54:	3800      	subs	r0, #0
 8011b56:	bf18      	it	ne
 8011b58:	2001      	movne	r0, #1
 8011b5a:	4770      	bx	lr

08011b5c <__cleanup_context>:
 8011b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b60:	4606      	mov	r6, r0
 8011b62:	6800      	ldr	r0, [r0, #0]
 8011b64:	2300      	movs	r3, #0
 8011b66:	6073      	str	r3, [r6, #4]
 8011b68:	2800      	cmp	r0, #0
 8011b6a:	d049      	beq.n	8011c00 <__cleanup_context+0xa4>
 8011b6c:	6947      	ldr	r7, [r0, #20]
 8011b6e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8011b72:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8011b76:	b137      	cbz	r7, 8011b86 <__cleanup_context+0x2a>
 8011b78:	3014      	adds	r0, #20
 8011b7a:	f7fa f867 	bl	800bc4c <rcl_init_options_fini>
 8011b7e:	4607      	mov	r7, r0
 8011b80:	2800      	cmp	r0, #0
 8011b82:	d144      	bne.n	8011c0e <__cleanup_context+0xb2>
 8011b84:	6830      	ldr	r0, [r6, #0]
 8011b86:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011b88:	b143      	cbz	r3, 8011b9c <__cleanup_context+0x40>
 8011b8a:	3028      	adds	r0, #40	@ 0x28
 8011b8c:	f7fb fc2c 	bl	800d3e8 <rmw_context_fini>
 8011b90:	b118      	cbz	r0, 8011b9a <__cleanup_context+0x3e>
 8011b92:	2f00      	cmp	r7, #0
 8011b94:	d03e      	beq.n	8011c14 <__cleanup_context+0xb8>
 8011b96:	f7fb f95f 	bl	800ce58 <rcutils_reset_error>
 8011b9a:	6830      	ldr	r0, [r6, #0]
 8011b9c:	6a03      	ldr	r3, [r0, #32]
 8011b9e:	b1db      	cbz	r3, 8011bd8 <__cleanup_context+0x7c>
 8011ba0:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8011ba4:	2a01      	cmp	r2, #1
 8011ba6:	f17c 0100 	sbcs.w	r1, ip, #0
 8011baa:	db11      	blt.n	8011bd0 <__cleanup_context+0x74>
 8011bac:	2400      	movs	r4, #0
 8011bae:	4625      	mov	r5, r4
 8011bb0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011bb4:	4649      	mov	r1, r9
 8011bb6:	b1b8      	cbz	r0, 8011be8 <__cleanup_context+0x8c>
 8011bb8:	47c0      	blx	r8
 8011bba:	6833      	ldr	r3, [r6, #0]
 8011bbc:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8011bc0:	3401      	adds	r4, #1
 8011bc2:	f145 0500 	adc.w	r5, r5, #0
 8011bc6:	4294      	cmp	r4, r2
 8011bc8:	eb75 010c 	sbcs.w	r1, r5, ip
 8011bcc:	6a1b      	ldr	r3, [r3, #32]
 8011bce:	dbef      	blt.n	8011bb0 <__cleanup_context+0x54>
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	4649      	mov	r1, r9
 8011bd4:	47c0      	blx	r8
 8011bd6:	6830      	ldr	r0, [r6, #0]
 8011bd8:	4649      	mov	r1, r9
 8011bda:	47c0      	blx	r8
 8011bdc:	2300      	movs	r3, #0
 8011bde:	e9c6 3300 	strd	r3, r3, [r6]
 8011be2:	4638      	mov	r0, r7
 8011be4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011be8:	3401      	adds	r4, #1
 8011bea:	f145 0500 	adc.w	r5, r5, #0
 8011bee:	4294      	cmp	r4, r2
 8011bf0:	eb75 010c 	sbcs.w	r1, r5, ip
 8011bf4:	dbdc      	blt.n	8011bb0 <__cleanup_context+0x54>
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	4649      	mov	r1, r9
 8011bfa:	47c0      	blx	r8
 8011bfc:	6830      	ldr	r0, [r6, #0]
 8011bfe:	e7eb      	b.n	8011bd8 <__cleanup_context+0x7c>
 8011c00:	4607      	mov	r7, r0
 8011c02:	2300      	movs	r3, #0
 8011c04:	e9c6 3300 	strd	r3, r3, [r6]
 8011c08:	4638      	mov	r0, r7
 8011c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c0e:	f7fb f923 	bl	800ce58 <rcutils_reset_error>
 8011c12:	e7b7      	b.n	8011b84 <__cleanup_context+0x28>
 8011c14:	f7ff ff7e 	bl	8011b14 <rcl_convert_rmw_ret_to_rcl_ret>
 8011c18:	4607      	mov	r7, r0
 8011c1a:	e7bc      	b.n	8011b96 <__cleanup_context+0x3a>

08011c1c <rcl_init>:
 8011c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c20:	1e05      	subs	r5, r0, #0
 8011c22:	b09e      	sub	sp, #120	@ 0x78
 8011c24:	460e      	mov	r6, r1
 8011c26:	4690      	mov	r8, r2
 8011c28:	461f      	mov	r7, r3
 8011c2a:	f340 809c 	ble.w	8011d66 <rcl_init+0x14a>
 8011c2e:	2900      	cmp	r1, #0
 8011c30:	f000 809c 	beq.w	8011d6c <rcl_init+0x150>
 8011c34:	f1a1 0e04 	sub.w	lr, r1, #4
 8011c38:	f04f 0c00 	mov.w	ip, #0
 8011c3c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8011c40:	f10c 0c01 	add.w	ip, ip, #1
 8011c44:	2c00      	cmp	r4, #0
 8011c46:	f000 8091 	beq.w	8011d6c <rcl_init+0x150>
 8011c4a:	4565      	cmp	r5, ip
 8011c4c:	d1f6      	bne.n	8011c3c <rcl_init+0x20>
 8011c4e:	f1b8 0f00 	cmp.w	r8, #0
 8011c52:	f000 808b 	beq.w	8011d6c <rcl_init+0x150>
 8011c56:	f8d8 4000 	ldr.w	r4, [r8]
 8011c5a:	2c00      	cmp	r4, #0
 8011c5c:	f000 8086 	beq.w	8011d6c <rcl_init+0x150>
 8011c60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011c62:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8011c66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011c6a:	6823      	ldr	r3, [r4, #0]
 8011c6c:	f8cc 3000 	str.w	r3, [ip]
 8011c70:	a819      	add	r0, sp, #100	@ 0x64
 8011c72:	f7fb f8cb 	bl	800ce0c <rcutils_allocator_is_valid>
 8011c76:	2800      	cmp	r0, #0
 8011c78:	d078      	beq.n	8011d6c <rcl_init+0x150>
 8011c7a:	2f00      	cmp	r7, #0
 8011c7c:	d076      	beq.n	8011d6c <rcl_init+0x150>
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d178      	bne.n	8011d76 <rcl_init+0x15a>
 8011c84:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8011c88:	2178      	movs	r1, #120	@ 0x78
 8011c8a:	2001      	movs	r0, #1
 8011c8c:	4798      	blx	r3
 8011c8e:	4604      	mov	r4, r0
 8011c90:	6038      	str	r0, [r7, #0]
 8011c92:	2800      	cmp	r0, #0
 8011c94:	f000 80b6 	beq.w	8011e04 <rcl_init+0x1e8>
 8011c98:	a802      	add	r0, sp, #8
 8011c9a:	f002 ffb9 	bl	8014c10 <rmw_get_zero_initialized_context>
 8011c9e:	a902      	add	r1, sp, #8
 8011ca0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8011ca4:	2250      	movs	r2, #80	@ 0x50
 8011ca6:	ac19      	add	r4, sp, #100	@ 0x64
 8011ca8:	f005 fdf9 	bl	801789e <memcpy>
 8011cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011cae:	f8d7 e000 	ldr.w	lr, [r7]
 8011cb2:	46f4      	mov	ip, lr
 8011cb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011cb8:	6823      	ldr	r3, [r4, #0]
 8011cba:	f8cc 3000 	str.w	r3, [ip]
 8011cbe:	f10e 0114 	add.w	r1, lr, #20
 8011cc2:	4640      	mov	r0, r8
 8011cc4:	f7f9 ffec 	bl	800bca0 <rcl_init_options_copy>
 8011cc8:	4604      	mov	r4, r0
 8011cca:	2800      	cmp	r0, #0
 8011ccc:	d144      	bne.n	8011d58 <rcl_init+0x13c>
 8011cce:	f8d7 9000 	ldr.w	r9, [r7]
 8011cd2:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8011cd6:	f8c9 0020 	str.w	r0, [r9, #32]
 8011cda:	f8c9 5018 	str.w	r5, [r9, #24]
 8011cde:	f8c9 801c 	str.w	r8, [r9, #28]
 8011ce2:	2d00      	cmp	r5, #0
 8011ce4:	d04e      	beq.n	8011d84 <rcl_init+0x168>
 8011ce6:	2e00      	cmp	r6, #0
 8011ce8:	d04c      	beq.n	8011d84 <rcl_init+0x168>
 8011cea:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8011cee:	2104      	movs	r1, #4
 8011cf0:	4628      	mov	r0, r5
 8011cf2:	4798      	blx	r3
 8011cf4:	f8c9 0020 	str.w	r0, [r9, #32]
 8011cf8:	f8d7 9000 	ldr.w	r9, [r7]
 8011cfc:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8011d00:	46ca      	mov	sl, r9
 8011d02:	b343      	cbz	r3, 8011d56 <rcl_init+0x13a>
 8011d04:	2d01      	cmp	r5, #1
 8011d06:	f178 0300 	sbcs.w	r3, r8, #0
 8011d0a:	db3b      	blt.n	8011d84 <rcl_init+0x168>
 8011d0c:	2400      	movs	r4, #0
 8011d0e:	3e04      	subs	r6, #4
 8011d10:	46a1      	mov	r9, r4
 8011d12:	e00b      	b.n	8011d2c <rcl_init+0x110>
 8011d14:	6831      	ldr	r1, [r6, #0]
 8011d16:	f005 fdc2 	bl	801789e <memcpy>
 8011d1a:	3401      	adds	r4, #1
 8011d1c:	f149 0900 	adc.w	r9, r9, #0
 8011d20:	45c8      	cmp	r8, r9
 8011d22:	bf08      	it	eq
 8011d24:	42a5      	cmpeq	r5, r4
 8011d26:	d02b      	beq.n	8011d80 <rcl_init+0x164>
 8011d28:	f8d7 a000 	ldr.w	sl, [r7]
 8011d2c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8011d30:	f7ee fa80 	bl	8000234 <strlen>
 8011d34:	1c42      	adds	r2, r0, #1
 8011d36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011d38:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8011d3a:	f8da a020 	ldr.w	sl, [sl, #32]
 8011d3e:	9201      	str	r2, [sp, #4]
 8011d40:	4610      	mov	r0, r2
 8011d42:	4798      	blx	r3
 8011d44:	683b      	ldr	r3, [r7, #0]
 8011d46:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8011d4a:	6a1b      	ldr	r3, [r3, #32]
 8011d4c:	9a01      	ldr	r2, [sp, #4]
 8011d4e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011d52:	2800      	cmp	r0, #0
 8011d54:	d1de      	bne.n	8011d14 <rcl_init+0xf8>
 8011d56:	240a      	movs	r4, #10
 8011d58:	4638      	mov	r0, r7
 8011d5a:	f7ff feff 	bl	8011b5c <__cleanup_context>
 8011d5e:	4620      	mov	r0, r4
 8011d60:	b01e      	add	sp, #120	@ 0x78
 8011d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d66:	2900      	cmp	r1, #0
 8011d68:	f43f af71 	beq.w	8011c4e <rcl_init+0x32>
 8011d6c:	240b      	movs	r4, #11
 8011d6e:	4620      	mov	r0, r4
 8011d70:	b01e      	add	sp, #120	@ 0x78
 8011d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d76:	2464      	movs	r4, #100	@ 0x64
 8011d78:	4620      	mov	r0, r4
 8011d7a:	b01e      	add	sp, #120	@ 0x78
 8011d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d80:	f8d7 9000 	ldr.w	r9, [r7]
 8011d84:	4926      	ldr	r1, [pc, #152]	@ (8011e20 <rcl_init+0x204>)
 8011d86:	680b      	ldr	r3, [r1, #0]
 8011d88:	3301      	adds	r3, #1
 8011d8a:	d036      	beq.n	8011dfa <rcl_init+0x1de>
 8011d8c:	600b      	str	r3, [r1, #0]
 8011d8e:	461a      	mov	r2, r3
 8011d90:	2400      	movs	r4, #0
 8011d92:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8011d96:	607b      	str	r3, [r7, #4]
 8011d98:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8011d9a:	3301      	adds	r3, #1
 8011d9c:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8011da0:	d034      	beq.n	8011e0c <rcl_init+0x1f0>
 8011da2:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8011da6:	b93b      	cbnz	r3, 8011db8 <rcl_init+0x19c>
 8011da8:	3030      	adds	r0, #48	@ 0x30
 8011daa:	f000 f83b 	bl	8011e24 <rcl_get_localhost_only>
 8011dae:	4604      	mov	r4, r0
 8011db0:	2800      	cmp	r0, #0
 8011db2:	d1d1      	bne.n	8011d58 <rcl_init+0x13c>
 8011db4:	683b      	ldr	r3, [r7, #0]
 8011db6:	6958      	ldr	r0, [r3, #20]
 8011db8:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8011dba:	aa18      	add	r2, sp, #96	@ 0x60
 8011dbc:	a917      	add	r1, sp, #92	@ 0x5c
 8011dbe:	f001 f871 	bl	8012ea4 <rcl_validate_enclave_name>
 8011dc2:	4604      	mov	r4, r0
 8011dc4:	2800      	cmp	r0, #0
 8011dc6:	d1c7      	bne.n	8011d58 <rcl_init+0x13c>
 8011dc8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011dca:	b9eb      	cbnz	r3, 8011e08 <rcl_init+0x1ec>
 8011dcc:	6839      	ldr	r1, [r7, #0]
 8011dce:	694b      	ldr	r3, [r1, #20]
 8011dd0:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8011dd2:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8011dd6:	f000 fb3f 	bl	8012458 <rcl_get_security_options_from_environment>
 8011dda:	4604      	mov	r4, r0
 8011ddc:	2800      	cmp	r0, #0
 8011dde:	d1bb      	bne.n	8011d58 <rcl_init+0x13c>
 8011de0:	6839      	ldr	r1, [r7, #0]
 8011de2:	6948      	ldr	r0, [r1, #20]
 8011de4:	3128      	adds	r1, #40	@ 0x28
 8011de6:	3018      	adds	r0, #24
 8011de8:	f7fb f9c8 	bl	800d17c <rmw_init>
 8011dec:	4604      	mov	r4, r0
 8011dee:	2800      	cmp	r0, #0
 8011df0:	d0bd      	beq.n	8011d6e <rcl_init+0x152>
 8011df2:	f7ff fe8f 	bl	8011b14 <rcl_convert_rmw_ret_to_rcl_ret>
 8011df6:	4604      	mov	r4, r0
 8011df8:	e7ae      	b.n	8011d58 <rcl_init+0x13c>
 8011dfa:	2201      	movs	r2, #1
 8011dfc:	461c      	mov	r4, r3
 8011dfe:	600a      	str	r2, [r1, #0]
 8011e00:	4613      	mov	r3, r2
 8011e02:	e7c6      	b.n	8011d92 <rcl_init+0x176>
 8011e04:	240a      	movs	r4, #10
 8011e06:	e7b2      	b.n	8011d6e <rcl_init+0x152>
 8011e08:	2401      	movs	r4, #1
 8011e0a:	e7a5      	b.n	8011d58 <rcl_init+0x13c>
 8011e0c:	3024      	adds	r0, #36	@ 0x24
 8011e0e:	f004 fce3 	bl	80167d8 <rcl_get_default_domain_id>
 8011e12:	4604      	mov	r4, r0
 8011e14:	2800      	cmp	r0, #0
 8011e16:	d19f      	bne.n	8011d58 <rcl_init+0x13c>
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	6958      	ldr	r0, [r3, #20]
 8011e1c:	e7c1      	b.n	8011da2 <rcl_init+0x186>
 8011e1e:	bf00      	nop
 8011e20:	2000ac68 	.word	0x2000ac68

08011e24 <rcl_get_localhost_only>:
 8011e24:	b510      	push	{r4, lr}
 8011e26:	b082      	sub	sp, #8
 8011e28:	2300      	movs	r3, #0
 8011e2a:	9301      	str	r3, [sp, #4]
 8011e2c:	b1b8      	cbz	r0, 8011e5e <rcl_get_localhost_only+0x3a>
 8011e2e:	4604      	mov	r4, r0
 8011e30:	a901      	add	r1, sp, #4
 8011e32:	480c      	ldr	r0, [pc, #48]	@ (8011e64 <rcl_get_localhost_only+0x40>)
 8011e34:	f002 fc40 	bl	80146b8 <rcutils_get_env>
 8011e38:	b110      	cbz	r0, 8011e40 <rcl_get_localhost_only+0x1c>
 8011e3a:	2001      	movs	r0, #1
 8011e3c:	b002      	add	sp, #8
 8011e3e:	bd10      	pop	{r4, pc}
 8011e40:	9b01      	ldr	r3, [sp, #4]
 8011e42:	b113      	cbz	r3, 8011e4a <rcl_get_localhost_only+0x26>
 8011e44:	781a      	ldrb	r2, [r3, #0]
 8011e46:	2a31      	cmp	r2, #49	@ 0x31
 8011e48:	d004      	beq.n	8011e54 <rcl_get_localhost_only+0x30>
 8011e4a:	2302      	movs	r3, #2
 8011e4c:	2000      	movs	r0, #0
 8011e4e:	7023      	strb	r3, [r4, #0]
 8011e50:	b002      	add	sp, #8
 8011e52:	bd10      	pop	{r4, pc}
 8011e54:	785b      	ldrb	r3, [r3, #1]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d1f7      	bne.n	8011e4a <rcl_get_localhost_only+0x26>
 8011e5a:	2301      	movs	r3, #1
 8011e5c:	e7f6      	b.n	8011e4c <rcl_get_localhost_only+0x28>
 8011e5e:	200b      	movs	r0, #11
 8011e60:	b002      	add	sp, #8
 8011e62:	bd10      	pop	{r4, pc}
 8011e64:	08018cc4 	.word	0x08018cc4

08011e68 <rcl_get_zero_initialized_node>:
 8011e68:	4a03      	ldr	r2, [pc, #12]	@ (8011e78 <rcl_get_zero_initialized_node+0x10>)
 8011e6a:	4603      	mov	r3, r0
 8011e6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e70:	e883 0003 	stmia.w	r3, {r0, r1}
 8011e74:	4618      	mov	r0, r3
 8011e76:	4770      	bx	lr
 8011e78:	08018ce0 	.word	0x08018ce0

08011e7c <rcl_node_init>:
 8011e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e80:	b0a9      	sub	sp, #164	@ 0xa4
 8011e82:	4604      	mov	r4, r0
 8011e84:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8011e88:	a823      	add	r0, sp, #140	@ 0x8c
 8011e8a:	460e      	mov	r6, r1
 8011e8c:	4615      	mov	r5, r2
 8011e8e:	461f      	mov	r7, r3
 8011e90:	f004 ff16 	bl	8016cc0 <rcl_guard_condition_get_default_options>
 8011e94:	f1b8 0f00 	cmp.w	r8, #0
 8011e98:	f000 80e6 	beq.w	8012068 <rcl_node_init+0x1ec>
 8011e9c:	4640      	mov	r0, r8
 8011e9e:	f7fa ffb5 	bl	800ce0c <rcutils_allocator_is_valid>
 8011ea2:	2800      	cmp	r0, #0
 8011ea4:	f000 80e0 	beq.w	8012068 <rcl_node_init+0x1ec>
 8011ea8:	2e00      	cmp	r6, #0
 8011eaa:	f000 80dd 	beq.w	8012068 <rcl_node_init+0x1ec>
 8011eae:	2d00      	cmp	r5, #0
 8011eb0:	f000 80da 	beq.w	8012068 <rcl_node_init+0x1ec>
 8011eb4:	2c00      	cmp	r4, #0
 8011eb6:	f000 80d7 	beq.w	8012068 <rcl_node_init+0x1ec>
 8011eba:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011ebe:	f1b9 0f00 	cmp.w	r9, #0
 8011ec2:	f040 80fd 	bne.w	80120c0 <rcl_node_init+0x244>
 8011ec6:	2f00      	cmp	r7, #0
 8011ec8:	f000 80ce 	beq.w	8012068 <rcl_node_init+0x1ec>
 8011ecc:	4638      	mov	r0, r7
 8011ece:	f7ff fe3f 	bl	8011b50 <rcl_context_is_valid>
 8011ed2:	4682      	mov	sl, r0
 8011ed4:	2800      	cmp	r0, #0
 8011ed6:	f000 80cd 	beq.w	8012074 <rcl_node_init+0x1f8>
 8011eda:	464a      	mov	r2, r9
 8011edc:	a922      	add	r1, sp, #136	@ 0x88
 8011ede:	4630      	mov	r0, r6
 8011ee0:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8011ee4:	f003 f812 	bl	8014f0c <rmw_validate_node_name>
 8011ee8:	4681      	mov	r9, r0
 8011eea:	2800      	cmp	r0, #0
 8011eec:	f040 80be 	bne.w	801206c <rcl_node_init+0x1f0>
 8011ef0:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8011ef2:	2800      	cmp	r0, #0
 8011ef4:	f040 80f0 	bne.w	80120d8 <rcl_node_init+0x25c>
 8011ef8:	4628      	mov	r0, r5
 8011efa:	f7ee f99b 	bl	8000234 <strlen>
 8011efe:	2800      	cmp	r0, #0
 8011f00:	f040 80bb 	bne.w	801207a <rcl_node_init+0x1fe>
 8011f04:	4d7c      	ldr	r5, [pc, #496]	@ (80120f8 <rcl_node_init+0x27c>)
 8011f06:	a922      	add	r1, sp, #136	@ 0x88
 8011f08:	2200      	movs	r2, #0
 8011f0a:	4628      	mov	r0, r5
 8011f0c:	f002 ffe0 	bl	8014ed0 <rmw_validate_namespace>
 8011f10:	4681      	mov	r9, r0
 8011f12:	2800      	cmp	r0, #0
 8011f14:	f040 80aa 	bne.w	801206c <rcl_node_init+0x1f0>
 8011f18:	4682      	mov	sl, r0
 8011f1a:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8011f1c:	2800      	cmp	r0, #0
 8011f1e:	f040 80e0 	bne.w	80120e2 <rcl_node_init+0x266>
 8011f22:	f8d8 3000 	ldr.w	r3, [r8]
 8011f26:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011f2a:	2078      	movs	r0, #120	@ 0x78
 8011f2c:	4798      	blx	r3
 8011f2e:	4681      	mov	r9, r0
 8011f30:	6060      	str	r0, [r4, #4]
 8011f32:	2800      	cmp	r0, #0
 8011f34:	f000 80ca 	beq.w	80120cc <rcl_node_init+0x250>
 8011f38:	2200      	movs	r2, #0
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8011f40:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8011f44:	a808      	add	r0, sp, #32
 8011f46:	f000 f907 	bl	8012158 <rcl_node_get_default_options>
 8011f4a:	a908      	add	r1, sp, #32
 8011f4c:	4648      	mov	r0, r9
 8011f4e:	2268      	movs	r2, #104	@ 0x68
 8011f50:	f005 fca5 	bl	801789e <memcpy>
 8011f54:	6861      	ldr	r1, [r4, #4]
 8011f56:	6027      	str	r7, [r4, #0]
 8011f58:	4640      	mov	r0, r8
 8011f5a:	f000 f90b 	bl	8012174 <rcl_node_options_copy>
 8011f5e:	2800      	cmp	r0, #0
 8011f60:	d158      	bne.n	8012014 <rcl_node_init+0x198>
 8011f62:	4628      	mov	r0, r5
 8011f64:	f7ee f966 	bl	8000234 <strlen>
 8011f68:	4428      	add	r0, r5
 8011f6a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8011f6e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8011f72:	2b2f      	cmp	r3, #47	@ 0x2f
 8011f74:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011f78:	9300      	str	r3, [sp, #0]
 8011f7a:	bf0c      	ite	eq
 8011f7c:	4b5f      	ldreq	r3, [pc, #380]	@ (80120fc <rcl_node_init+0x280>)
 8011f7e:	4b60      	ldrne	r3, [pc, #384]	@ (8012100 <rcl_node_init+0x284>)
 8011f80:	9302      	str	r3, [sp, #8]
 8011f82:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011f86:	9301      	str	r3, [sp, #4]
 8011f88:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8011f8c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011f90:	f002 fbba 	bl	8014708 <rcutils_format_string_limit>
 8011f94:	6823      	ldr	r3, [r4, #0]
 8011f96:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 8011f9a:	6818      	ldr	r0, [r3, #0]
 8011f9c:	4631      	mov	r1, r6
 8011f9e:	3028      	adds	r0, #40	@ 0x28
 8011fa0:	462a      	mov	r2, r5
 8011fa2:	6866      	ldr	r6, [r4, #4]
 8011fa4:	f7fb facc 	bl	800d540 <rmw_create_node>
 8011fa8:	6863      	ldr	r3, [r4, #4]
 8011faa:	66b0      	str	r0, [r6, #104]	@ 0x68
 8011fac:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8011fae:	2800      	cmp	r0, #0
 8011fb0:	d032      	beq.n	8012018 <rcl_node_init+0x19c>
 8011fb2:	f7fb fb59 	bl	800d668 <rmw_node_get_graph_guard_condition>
 8011fb6:	4681      	mov	r9, r0
 8011fb8:	b360      	cbz	r0, 8012014 <rcl_node_init+0x198>
 8011fba:	f8d8 3000 	ldr.w	r3, [r8]
 8011fbe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011fc2:	6866      	ldr	r6, [r4, #4]
 8011fc4:	2008      	movs	r0, #8
 8011fc6:	4798      	blx	r3
 8011fc8:	6863      	ldr	r3, [r4, #4]
 8011fca:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8011fcc:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8011fd0:	f1bb 0f00 	cmp.w	fp, #0
 8011fd4:	d020      	beq.n	8012018 <rcl_node_init+0x19c>
 8011fd6:	a806      	add	r0, sp, #24
 8011fd8:	f004 fd96 	bl	8016b08 <rcl_get_zero_initialized_guard_condition>
 8011fdc:	a806      	add	r0, sp, #24
 8011fde:	c803      	ldmia	r0, {r0, r1}
 8011fe0:	6863      	ldr	r3, [r4, #4]
 8011fe2:	46c4      	mov	ip, r8
 8011fe4:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8011fe8:	e88b 0003 	stmia.w	fp, {r0, r1}
 8011fec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011ff0:	ae23      	add	r6, sp, #140	@ 0x8c
 8011ff2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011ff4:	f8dc 3000 	ldr.w	r3, [ip]
 8011ff8:	6033      	str	r3, [r6, #0]
 8011ffa:	ab28      	add	r3, sp, #160	@ 0xa0
 8011ffc:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8012000:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8012004:	4649      	mov	r1, r9
 8012006:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012008:	463a      	mov	r2, r7
 801200a:	4670      	mov	r0, lr
 801200c:	f004 fdd2 	bl	8016bb4 <rcl_guard_condition_init_from_rmw>
 8012010:	4681      	mov	r9, r0
 8012012:	b328      	cbz	r0, 8012060 <rcl_node_init+0x1e4>
 8012014:	6863      	ldr	r3, [r4, #4]
 8012016:	b1f3      	cbz	r3, 8012056 <rcl_node_init+0x1da>
 8012018:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801201a:	b128      	cbz	r0, 8012028 <rcl_node_init+0x1ac>
 801201c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012020:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012024:	4798      	blx	r3
 8012026:	6863      	ldr	r3, [r4, #4]
 8012028:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801202a:	b110      	cbz	r0, 8012032 <rcl_node_init+0x1b6>
 801202c:	f7fb faa0 	bl	800d570 <rmw_destroy_node>
 8012030:	6863      	ldr	r3, [r4, #4]
 8012032:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8012034:	b148      	cbz	r0, 801204a <rcl_node_init+0x1ce>
 8012036:	f004 fe1d 	bl	8016c74 <rcl_guard_condition_fini>
 801203a:	6863      	ldr	r3, [r4, #4]
 801203c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012040:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8012042:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012046:	4798      	blx	r3
 8012048:	6863      	ldr	r3, [r4, #4]
 801204a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801204e:	4618      	mov	r0, r3
 8012050:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012054:	4798      	blx	r3
 8012056:	2300      	movs	r3, #0
 8012058:	e9c4 3300 	strd	r3, r3, [r4]
 801205c:	f04f 0901 	mov.w	r9, #1
 8012060:	f1ba 0f00 	cmp.w	sl, #0
 8012064:	d125      	bne.n	80120b2 <rcl_node_init+0x236>
 8012066:	e001      	b.n	801206c <rcl_node_init+0x1f0>
 8012068:	f04f 090b 	mov.w	r9, #11
 801206c:	4648      	mov	r0, r9
 801206e:	b029      	add	sp, #164	@ 0xa4
 8012070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012074:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8012078:	e7f8      	b.n	801206c <rcl_node_init+0x1f0>
 801207a:	782b      	ldrb	r3, [r5, #0]
 801207c:	2b2f      	cmp	r3, #47	@ 0x2f
 801207e:	f43f af42 	beq.w	8011f06 <rcl_node_init+0x8a>
 8012082:	9503      	str	r5, [sp, #12]
 8012084:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012088:	9300      	str	r3, [sp, #0]
 801208a:	4b1e      	ldr	r3, [pc, #120]	@ (8012104 <rcl_node_init+0x288>)
 801208c:	9302      	str	r3, [sp, #8]
 801208e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012092:	9301      	str	r3, [sp, #4]
 8012094:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8012098:	f002 fb36 	bl	8014708 <rcutils_format_string_limit>
 801209c:	4605      	mov	r5, r0
 801209e:	b340      	cbz	r0, 80120f2 <rcl_node_init+0x276>
 80120a0:	2200      	movs	r2, #0
 80120a2:	a922      	add	r1, sp, #136	@ 0x88
 80120a4:	9222      	str	r2, [sp, #136]	@ 0x88
 80120a6:	f002 ff13 	bl	8014ed0 <rmw_validate_namespace>
 80120aa:	4681      	mov	r9, r0
 80120ac:	2800      	cmp	r0, #0
 80120ae:	f43f af34 	beq.w	8011f1a <rcl_node_init+0x9e>
 80120b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80120b6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80120ba:	4628      	mov	r0, r5
 80120bc:	4798      	blx	r3
 80120be:	e7d5      	b.n	801206c <rcl_node_init+0x1f0>
 80120c0:	f04f 0964 	mov.w	r9, #100	@ 0x64
 80120c4:	4648      	mov	r0, r9
 80120c6:	b029      	add	sp, #164	@ 0xa4
 80120c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120cc:	f04f 090a 	mov.w	r9, #10
 80120d0:	f1ba 0f00 	cmp.w	sl, #0
 80120d4:	d1ed      	bne.n	80120b2 <rcl_node_init+0x236>
 80120d6:	e7c9      	b.n	801206c <rcl_node_init+0x1f0>
 80120d8:	f002 ff6a 	bl	8014fb0 <rmw_node_name_validation_result_string>
 80120dc:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 80120e0:	e7c4      	b.n	801206c <rcl_node_init+0x1f0>
 80120e2:	f002 ff07 	bl	8014ef4 <rmw_namespace_validation_result_string>
 80120e6:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 80120ea:	f1ba 0f00 	cmp.w	sl, #0
 80120ee:	d1e0      	bne.n	80120b2 <rcl_node_init+0x236>
 80120f0:	e7bc      	b.n	801206c <rcl_node_init+0x1f0>
 80120f2:	f04f 090a 	mov.w	r9, #10
 80120f6:	e7b9      	b.n	801206c <rcl_node_init+0x1f0>
 80120f8:	08018a70 	.word	0x08018a70
 80120fc:	08018a98 	.word	0x08018a98
 8012100:	08018a74 	.word	0x08018a74
 8012104:	08018cdc 	.word	0x08018cdc

08012108 <rcl_node_is_valid>:
 8012108:	b130      	cbz	r0, 8012118 <rcl_node_is_valid+0x10>
 801210a:	6843      	ldr	r3, [r0, #4]
 801210c:	b123      	cbz	r3, 8012118 <rcl_node_is_valid+0x10>
 801210e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012110:	b113      	cbz	r3, 8012118 <rcl_node_is_valid+0x10>
 8012112:	6800      	ldr	r0, [r0, #0]
 8012114:	f7ff bd1c 	b.w	8011b50 <rcl_context_is_valid>
 8012118:	2000      	movs	r0, #0
 801211a:	4770      	bx	lr

0801211c <rcl_node_get_name>:
 801211c:	b120      	cbz	r0, 8012128 <rcl_node_get_name+0xc>
 801211e:	6840      	ldr	r0, [r0, #4]
 8012120:	b110      	cbz	r0, 8012128 <rcl_node_get_name+0xc>
 8012122:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8012124:	b100      	cbz	r0, 8012128 <rcl_node_get_name+0xc>
 8012126:	6880      	ldr	r0, [r0, #8]
 8012128:	4770      	bx	lr
 801212a:	bf00      	nop

0801212c <rcl_node_get_namespace>:
 801212c:	b120      	cbz	r0, 8012138 <rcl_node_get_namespace+0xc>
 801212e:	6840      	ldr	r0, [r0, #4]
 8012130:	b110      	cbz	r0, 8012138 <rcl_node_get_namespace+0xc>
 8012132:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8012134:	b100      	cbz	r0, 8012138 <rcl_node_get_namespace+0xc>
 8012136:	68c0      	ldr	r0, [r0, #12]
 8012138:	4770      	bx	lr
 801213a:	bf00      	nop

0801213c <rcl_node_get_options>:
 801213c:	b128      	cbz	r0, 801214a <rcl_node_get_options+0xe>
 801213e:	6840      	ldr	r0, [r0, #4]
 8012140:	b118      	cbz	r0, 801214a <rcl_node_get_options+0xe>
 8012142:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8012144:	2b00      	cmp	r3, #0
 8012146:	bf08      	it	eq
 8012148:	2000      	moveq	r0, #0
 801214a:	4770      	bx	lr

0801214c <rcl_node_get_rmw_handle>:
 801214c:	b110      	cbz	r0, 8012154 <rcl_node_get_rmw_handle+0x8>
 801214e:	6840      	ldr	r0, [r0, #4]
 8012150:	b100      	cbz	r0, 8012154 <rcl_node_get_rmw_handle+0x8>
 8012152:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8012154:	4770      	bx	lr
 8012156:	bf00      	nop

08012158 <rcl_node_get_default_options>:
 8012158:	b510      	push	{r4, lr}
 801215a:	2268      	movs	r2, #104	@ 0x68
 801215c:	4604      	mov	r4, r0
 801215e:	2100      	movs	r1, #0
 8012160:	f005 fad4 	bl	801770c <memset>
 8012164:	4620      	mov	r0, r4
 8012166:	f7fa fe43 	bl	800cdf0 <rcutils_get_default_allocator>
 801216a:	2301      	movs	r3, #1
 801216c:	7523      	strb	r3, [r4, #20]
 801216e:	4620      	mov	r0, r4
 8012170:	bd10      	pop	{r4, pc}
 8012172:	bf00      	nop

08012174 <rcl_node_options_copy>:
 8012174:	b1d0      	cbz	r0, 80121ac <rcl_node_options_copy+0x38>
 8012176:	b570      	push	{r4, r5, r6, lr}
 8012178:	460c      	mov	r4, r1
 801217a:	b1a9      	cbz	r1, 80121a8 <rcl_node_options_copy+0x34>
 801217c:	4288      	cmp	r0, r1
 801217e:	4684      	mov	ip, r0
 8012180:	d012      	beq.n	80121a8 <rcl_node_options_copy+0x34>
 8012182:	4605      	mov	r5, r0
 8012184:	8a86      	ldrh	r6, [r0, #20]
 8012186:	468e      	mov	lr, r1
 8012188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801218a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801218e:	682b      	ldr	r3, [r5, #0]
 8012190:	f8ce 3000 	str.w	r3, [lr]
 8012194:	f10c 0118 	add.w	r1, ip, #24
 8012198:	2250      	movs	r2, #80	@ 0x50
 801219a:	82a6      	strh	r6, [r4, #20]
 801219c:	f104 0018 	add.w	r0, r4, #24
 80121a0:	f005 fb7d 	bl	801789e <memcpy>
 80121a4:	2000      	movs	r0, #0
 80121a6:	bd70      	pop	{r4, r5, r6, pc}
 80121a8:	200b      	movs	r0, #11
 80121aa:	bd70      	pop	{r4, r5, r6, pc}
 80121ac:	200b      	movs	r0, #11
 80121ae:	4770      	bx	lr

080121b0 <rcl_node_resolve_name>:
 80121b0:	b082      	sub	sp, #8
 80121b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121b6:	b091      	sub	sp, #68	@ 0x44
 80121b8:	ac1a      	add	r4, sp, #104	@ 0x68
 80121ba:	e884 000c 	stmia.w	r4, {r2, r3}
 80121be:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 80121c2:	2800      	cmp	r0, #0
 80121c4:	d03b      	beq.n	801223e <rcl_node_resolve_name+0x8e>
 80121c6:	460c      	mov	r4, r1
 80121c8:	4605      	mov	r5, r0
 80121ca:	f7ff ffb7 	bl	801213c <rcl_node_get_options>
 80121ce:	2800      	cmp	r0, #0
 80121d0:	d037      	beq.n	8012242 <rcl_node_resolve_name+0x92>
 80121d2:	4628      	mov	r0, r5
 80121d4:	f7ff ffa2 	bl	801211c <rcl_node_get_name>
 80121d8:	4606      	mov	r6, r0
 80121da:	4628      	mov	r0, r5
 80121dc:	f7ff ffa6 	bl	801212c <rcl_node_get_namespace>
 80121e0:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 80121e4:	4681      	mov	r9, r0
 80121e6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80121ea:	ad0b      	add	r5, sp, #44	@ 0x2c
 80121ec:	46ac      	mov	ip, r5
 80121ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80121f2:	f8de 3000 	ldr.w	r3, [lr]
 80121f6:	f8cc 3000 	str.w	r3, [ip]
 80121fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80121fc:	b1fb      	cbz	r3, 801223e <rcl_node_resolve_name+0x8e>
 80121fe:	468a      	mov	sl, r1
 8012200:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8012204:	f002 fbd8 	bl	80149b8 <rcutils_get_zero_initialized_string_map>
 8012208:	ab10      	add	r3, sp, #64	@ 0x40
 801220a:	9008      	str	r0, [sp, #32]
 801220c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8012210:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012214:	2100      	movs	r1, #0
 8012216:	e895 000c 	ldmia.w	r5, {r2, r3}
 801221a:	a808      	add	r0, sp, #32
 801221c:	f002 fc44 	bl	8014aa8 <rcutils_string_map_init>
 8012220:	4607      	mov	r7, r0
 8012222:	b180      	cbz	r0, 8012246 <rcl_node_resolve_name+0x96>
 8012224:	f7fa fe00 	bl	800ce28 <rcutils_get_error_string>
 8012228:	f7fa fe16 	bl	800ce58 <rcutils_reset_error>
 801222c:	2f0a      	cmp	r7, #10
 801222e:	bf18      	it	ne
 8012230:	2701      	movne	r7, #1
 8012232:	4638      	mov	r0, r7
 8012234:	b011      	add	sp, #68	@ 0x44
 8012236:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801223a:	b002      	add	sp, #8
 801223c:	4770      	bx	lr
 801223e:	270b      	movs	r7, #11
 8012240:	e7f7      	b.n	8012232 <rcl_node_resolve_name+0x82>
 8012242:	2701      	movs	r7, #1
 8012244:	e7f5      	b.n	8012232 <rcl_node_resolve_name+0x82>
 8012246:	9009      	str	r0, [sp, #36]	@ 0x24
 8012248:	9007      	str	r0, [sp, #28]
 801224a:	a808      	add	r0, sp, #32
 801224c:	f004 fc56 	bl	8016afc <rcl_get_default_topic_name_substitutions>
 8012250:	4607      	mov	r7, r0
 8012252:	b1a8      	cbz	r0, 8012280 <rcl_node_resolve_name+0xd0>
 8012254:	280a      	cmp	r0, #10
 8012256:	9c07      	ldr	r4, [sp, #28]
 8012258:	d000      	beq.n	801225c <rcl_node_resolve_name+0xac>
 801225a:	2701      	movs	r7, #1
 801225c:	a808      	add	r0, sp, #32
 801225e:	f002 fc63 	bl	8014b28 <rcutils_string_map_fini>
 8012262:	2800      	cmp	r0, #0
 8012264:	d13d      	bne.n	80122e2 <rcl_node_resolve_name+0x132>
 8012266:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012268:	4659      	mov	r1, fp
 801226a:	47d0      	blx	sl
 801226c:	4659      	mov	r1, fp
 801226e:	4620      	mov	r0, r4
 8012270:	47d0      	blx	sl
 8012272:	f1b8 0f00 	cmp.w	r8, #0
 8012276:	d0dc      	beq.n	8012232 <rcl_node_resolve_name+0x82>
 8012278:	2f67      	cmp	r7, #103	@ 0x67
 801227a:	bf08      	it	eq
 801227c:	2768      	moveq	r7, #104	@ 0x68
 801227e:	e7d8      	b.n	8012232 <rcl_node_resolve_name+0x82>
 8012280:	ab09      	add	r3, sp, #36	@ 0x24
 8012282:	9305      	str	r3, [sp, #20]
 8012284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012286:	46ec      	mov	ip, sp
 8012288:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801228c:	682b      	ldr	r3, [r5, #0]
 801228e:	f8cc 3000 	str.w	r3, [ip]
 8012292:	464a      	mov	r2, r9
 8012294:	4631      	mov	r1, r6
 8012296:	4620      	mov	r0, r4
 8012298:	ab08      	add	r3, sp, #32
 801229a:	f004 fad1 	bl	8016840 <rcl_expand_topic_name>
 801229e:	4607      	mov	r7, r0
 80122a0:	b9b8      	cbnz	r0, 80122d2 <rcl_node_resolve_name+0x122>
 80122a2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80122a4:	9009      	str	r0, [sp, #36]	@ 0x24
 80122a6:	4602      	mov	r2, r0
 80122a8:	a90a      	add	r1, sp, #40	@ 0x28
 80122aa:	4620      	mov	r0, r4
 80122ac:	f002 fd4c 	bl	8014d48 <rmw_validate_full_topic_name>
 80122b0:	b988      	cbnz	r0, 80122d6 <rcl_node_resolve_name+0x126>
 80122b2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80122b4:	b9d5      	cbnz	r5, 80122ec <rcl_node_resolve_name+0x13c>
 80122b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80122b8:	a808      	add	r0, sp, #32
 80122ba:	601c      	str	r4, [r3, #0]
 80122bc:	f002 fc34 	bl	8014b28 <rcutils_string_map_fini>
 80122c0:	4607      	mov	r7, r0
 80122c2:	b1a8      	cbz	r0, 80122f0 <rcl_node_resolve_name+0x140>
 80122c4:	f7fa fdb0 	bl	800ce28 <rcutils_get_error_string>
 80122c8:	462c      	mov	r4, r5
 80122ca:	f7fa fdc5 	bl	800ce58 <rcutils_reset_error>
 80122ce:	2701      	movs	r7, #1
 80122d0:	e7c9      	b.n	8012266 <rcl_node_resolve_name+0xb6>
 80122d2:	9c07      	ldr	r4, [sp, #28]
 80122d4:	e7c2      	b.n	801225c <rcl_node_resolve_name+0xac>
 80122d6:	f7fa fda7 	bl	800ce28 <rcutils_get_error_string>
 80122da:	2701      	movs	r7, #1
 80122dc:	f7fa fdbc 	bl	800ce58 <rcutils_reset_error>
 80122e0:	e7bc      	b.n	801225c <rcl_node_resolve_name+0xac>
 80122e2:	f7fa fda1 	bl	800ce28 <rcutils_get_error_string>
 80122e6:	f7fa fdb7 	bl	800ce58 <rcutils_reset_error>
 80122ea:	e7bc      	b.n	8012266 <rcl_node_resolve_name+0xb6>
 80122ec:	2767      	movs	r7, #103	@ 0x67
 80122ee:	e7b5      	b.n	801225c <rcl_node_resolve_name+0xac>
 80122f0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80122f2:	4659      	mov	r1, fp
 80122f4:	47d0      	blx	sl
 80122f6:	4659      	mov	r1, fp
 80122f8:	4638      	mov	r0, r7
 80122fa:	47d0      	blx	sl
 80122fc:	e799      	b.n	8012232 <rcl_node_resolve_name+0x82>
 80122fe:	bf00      	nop

08012300 <exact_match_lookup>:
 8012300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012302:	f102 0708 	add.w	r7, r2, #8
 8012306:	460b      	mov	r3, r1
 8012308:	4614      	mov	r4, r2
 801230a:	4606      	mov	r6, r0
 801230c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8012310:	b085      	sub	sp, #20
 8012312:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012316:	4618      	mov	r0, r3
 8012318:	4919      	ldr	r1, [pc, #100]	@ (8012380 <exact_match_lookup+0x80>)
 801231a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801231e:	f002 f9e5 	bl	80146ec <rcutils_join_path>
 8012322:	7833      	ldrb	r3, [r6, #0]
 8012324:	2b2f      	cmp	r3, #47	@ 0x2f
 8012326:	4605      	mov	r5, r0
 8012328:	d023      	beq.n	8012372 <exact_match_lookup+0x72>
 801232a:	f104 030c 	add.w	r3, r4, #12
 801232e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012332:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012336:	1c70      	adds	r0, r6, #1
 8012338:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801233c:	f002 f9dc 	bl	80146f8 <rcutils_to_native_path>
 8012340:	4606      	mov	r6, r0
 8012342:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8012346:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801234a:	4631      	mov	r1, r6
 801234c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8012350:	4628      	mov	r0, r5
 8012352:	f002 f9cb 	bl	80146ec <rcutils_join_path>
 8012356:	6862      	ldr	r2, [r4, #4]
 8012358:	6921      	ldr	r1, [r4, #16]
 801235a:	4603      	mov	r3, r0
 801235c:	4630      	mov	r0, r6
 801235e:	461e      	mov	r6, r3
 8012360:	4790      	blx	r2
 8012362:	4628      	mov	r0, r5
 8012364:	6863      	ldr	r3, [r4, #4]
 8012366:	6921      	ldr	r1, [r4, #16]
 8012368:	4798      	blx	r3
 801236a:	4635      	mov	r5, r6
 801236c:	4628      	mov	r0, r5
 801236e:	b005      	add	sp, #20
 8012370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012372:	7873      	ldrb	r3, [r6, #1]
 8012374:	2b00      	cmp	r3, #0
 8012376:	d1d8      	bne.n	801232a <exact_match_lookup+0x2a>
 8012378:	4628      	mov	r0, r5
 801237a:	b005      	add	sp, #20
 801237c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801237e:	bf00      	nop
 8012380:	08018d24 	.word	0x08018d24

08012384 <rcl_get_secure_root>:
 8012384:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012388:	b085      	sub	sp, #20
 801238a:	b168      	cbz	r0, 80123a8 <rcl_get_secure_root+0x24>
 801238c:	4607      	mov	r7, r0
 801238e:	4608      	mov	r0, r1
 8012390:	460c      	mov	r4, r1
 8012392:	f7fa fd3b 	bl	800ce0c <rcutils_allocator_is_valid>
 8012396:	b138      	cbz	r0, 80123a8 <rcl_get_secure_root+0x24>
 8012398:	2300      	movs	r3, #0
 801239a:	482d      	ldr	r0, [pc, #180]	@ (8012450 <rcl_get_secure_root+0xcc>)
 801239c:	9303      	str	r3, [sp, #12]
 801239e:	a903      	add	r1, sp, #12
 80123a0:	f002 f98a 	bl	80146b8 <rcutils_get_env>
 80123a4:	4605      	mov	r5, r0
 80123a6:	b120      	cbz	r0, 80123b2 <rcl_get_secure_root+0x2e>
 80123a8:	2500      	movs	r5, #0
 80123aa:	4628      	mov	r0, r5
 80123ac:	b005      	add	sp, #20
 80123ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80123b2:	9b03      	ldr	r3, [sp, #12]
 80123b4:	781a      	ldrb	r2, [r3, #0]
 80123b6:	2a00      	cmp	r2, #0
 80123b8:	d0f6      	beq.n	80123a8 <rcl_get_secure_root+0x24>
 80123ba:	f104 090c 	add.w	r9, r4, #12
 80123be:	e899 0003 	ldmia.w	r9, {r0, r1}
 80123c2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80123c6:	4618      	mov	r0, r3
 80123c8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80123cc:	f002 fab6 	bl	801493c <rcutils_strdup>
 80123d0:	4680      	mov	r8, r0
 80123d2:	2800      	cmp	r0, #0
 80123d4:	d0e8      	beq.n	80123a8 <rcl_get_secure_root+0x24>
 80123d6:	481f      	ldr	r0, [pc, #124]	@ (8012454 <rcl_get_secure_root+0xd0>)
 80123d8:	9503      	str	r5, [sp, #12]
 80123da:	a903      	add	r1, sp, #12
 80123dc:	f002 f96c 	bl	80146b8 <rcutils_get_env>
 80123e0:	b160      	cbz	r0, 80123fc <rcl_get_secure_root+0x78>
 80123e2:	2600      	movs	r6, #0
 80123e4:	6863      	ldr	r3, [r4, #4]
 80123e6:	6921      	ldr	r1, [r4, #16]
 80123e8:	4630      	mov	r0, r6
 80123ea:	4798      	blx	r3
 80123ec:	4640      	mov	r0, r8
 80123ee:	6863      	ldr	r3, [r4, #4]
 80123f0:	6921      	ldr	r1, [r4, #16]
 80123f2:	4798      	blx	r3
 80123f4:	4628      	mov	r0, r5
 80123f6:	b005      	add	sp, #20
 80123f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80123fc:	9b03      	ldr	r3, [sp, #12]
 80123fe:	781e      	ldrb	r6, [r3, #0]
 8012400:	b1f6      	cbz	r6, 8012440 <rcl_get_secure_root+0xbc>
 8012402:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012406:	e88d 0003 	stmia.w	sp, {r0, r1}
 801240a:	4618      	mov	r0, r3
 801240c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012410:	f002 fa94 	bl	801493c <rcutils_strdup>
 8012414:	4606      	mov	r6, r0
 8012416:	2800      	cmp	r0, #0
 8012418:	d0e3      	beq.n	80123e2 <rcl_get_secure_root+0x5e>
 801241a:	4622      	mov	r2, r4
 801241c:	4641      	mov	r1, r8
 801241e:	f7ff ff6f 	bl	8012300 <exact_match_lookup>
 8012422:	4605      	mov	r5, r0
 8012424:	2d00      	cmp	r5, #0
 8012426:	d0dd      	beq.n	80123e4 <rcl_get_secure_root+0x60>
 8012428:	4628      	mov	r0, r5
 801242a:	f002 f95d 	bl	80146e8 <rcutils_is_directory>
 801242e:	4603      	mov	r3, r0
 8012430:	2800      	cmp	r0, #0
 8012432:	d1d7      	bne.n	80123e4 <rcl_get_secure_root+0x60>
 8012434:	4628      	mov	r0, r5
 8012436:	6921      	ldr	r1, [r4, #16]
 8012438:	461d      	mov	r5, r3
 801243a:	6863      	ldr	r3, [r4, #4]
 801243c:	4798      	blx	r3
 801243e:	e7d1      	b.n	80123e4 <rcl_get_secure_root+0x60>
 8012440:	4622      	mov	r2, r4
 8012442:	4638      	mov	r0, r7
 8012444:	4641      	mov	r1, r8
 8012446:	f7ff ff5b 	bl	8012300 <exact_match_lookup>
 801244a:	4605      	mov	r5, r0
 801244c:	e7ea      	b.n	8012424 <rcl_get_secure_root+0xa0>
 801244e:	bf00      	nop
 8012450:	08018d30 	.word	0x08018d30
 8012454:	08018d48 	.word	0x08018d48

08012458 <rcl_get_security_options_from_environment>:
 8012458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801245c:	b082      	sub	sp, #8
 801245e:	2300      	movs	r3, #0
 8012460:	4606      	mov	r6, r0
 8012462:	460f      	mov	r7, r1
 8012464:	4820      	ldr	r0, [pc, #128]	@ (80124e8 <rcl_get_security_options_from_environment+0x90>)
 8012466:	9301      	str	r3, [sp, #4]
 8012468:	a901      	add	r1, sp, #4
 801246a:	4690      	mov	r8, r2
 801246c:	f002 f924 	bl	80146b8 <rcutils_get_env>
 8012470:	b120      	cbz	r0, 801247c <rcl_get_security_options_from_environment+0x24>
 8012472:	2501      	movs	r5, #1
 8012474:	4628      	mov	r0, r5
 8012476:	b002      	add	sp, #8
 8012478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801247c:	491b      	ldr	r1, [pc, #108]	@ (80124ec <rcl_get_security_options_from_environment+0x94>)
 801247e:	4604      	mov	r4, r0
 8012480:	9801      	ldr	r0, [sp, #4]
 8012482:	f7ed fecd 	bl	8000220 <strcmp>
 8012486:	4605      	mov	r5, r0
 8012488:	b9e8      	cbnz	r0, 80124c6 <rcl_get_security_options_from_environment+0x6e>
 801248a:	9001      	str	r0, [sp, #4]
 801248c:	f1b8 0f00 	cmp.w	r8, #0
 8012490:	d020      	beq.n	80124d4 <rcl_get_security_options_from_environment+0x7c>
 8012492:	4817      	ldr	r0, [pc, #92]	@ (80124f0 <rcl_get_security_options_from_environment+0x98>)
 8012494:	a901      	add	r1, sp, #4
 8012496:	f002 f90f 	bl	80146b8 <rcutils_get_env>
 801249a:	2800      	cmp	r0, #0
 801249c:	d1e9      	bne.n	8012472 <rcl_get_security_options_from_environment+0x1a>
 801249e:	4915      	ldr	r1, [pc, #84]	@ (80124f4 <rcl_get_security_options_from_environment+0x9c>)
 80124a0:	9801      	ldr	r0, [sp, #4]
 80124a2:	f7ed febd 	bl	8000220 <strcmp>
 80124a6:	fab0 f080 	clz	r0, r0
 80124aa:	0940      	lsrs	r0, r0, #5
 80124ac:	f888 0000 	strb.w	r0, [r8]
 80124b0:	4639      	mov	r1, r7
 80124b2:	4630      	mov	r0, r6
 80124b4:	f7ff ff66 	bl	8012384 <rcl_get_secure_root>
 80124b8:	b170      	cbz	r0, 80124d8 <rcl_get_security_options_from_environment+0x80>
 80124ba:	f8c8 0004 	str.w	r0, [r8, #4]
 80124be:	4628      	mov	r0, r5
 80124c0:	b002      	add	sp, #8
 80124c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124c6:	4625      	mov	r5, r4
 80124c8:	4628      	mov	r0, r5
 80124ca:	f888 4000 	strb.w	r4, [r8]
 80124ce:	b002      	add	sp, #8
 80124d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124d4:	250b      	movs	r5, #11
 80124d6:	e7cd      	b.n	8012474 <rcl_get_security_options_from_environment+0x1c>
 80124d8:	f898 5000 	ldrb.w	r5, [r8]
 80124dc:	f1a5 0501 	sub.w	r5, r5, #1
 80124e0:	fab5 f585 	clz	r5, r5
 80124e4:	096d      	lsrs	r5, r5, #5
 80124e6:	e7c5      	b.n	8012474 <rcl_get_security_options_from_environment+0x1c>
 80124e8:	08018ce8 	.word	0x08018ce8
 80124ec:	08018cfc 	.word	0x08018cfc
 80124f0:	08018d04 	.word	0x08018d04
 80124f4:	08018d1c 	.word	0x08018d1c

080124f8 <rcl_service_get_rmw_handle>:
 80124f8:	b118      	cbz	r0, 8012502 <rcl_service_get_rmw_handle+0xa>
 80124fa:	6800      	ldr	r0, [r0, #0]
 80124fc:	b108      	cbz	r0, 8012502 <rcl_service_get_rmw_handle+0xa>
 80124fe:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012502:	4770      	bx	lr

08012504 <rcl_take_request>:
 8012504:	b570      	push	{r4, r5, r6, lr}
 8012506:	468e      	mov	lr, r1
 8012508:	460c      	mov	r4, r1
 801250a:	4616      	mov	r6, r2
 801250c:	4605      	mov	r5, r0
 801250e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012512:	b08c      	sub	sp, #48	@ 0x30
 8012514:	f10d 0c18 	add.w	ip, sp, #24
 8012518:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801251c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012520:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012524:	b30d      	cbz	r5, 801256a <rcl_take_request+0x66>
 8012526:	682b      	ldr	r3, [r5, #0]
 8012528:	b1fb      	cbz	r3, 801256a <rcl_take_request+0x66>
 801252a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801252e:	b1e0      	cbz	r0, 801256a <rcl_take_request+0x66>
 8012530:	b336      	cbz	r6, 8012580 <rcl_take_request+0x7c>
 8012532:	2300      	movs	r3, #0
 8012534:	f88d 3007 	strb.w	r3, [sp, #7]
 8012538:	4632      	mov	r2, r6
 801253a:	f10d 0307 	add.w	r3, sp, #7
 801253e:	a902      	add	r1, sp, #8
 8012540:	f002 ff58 	bl	80153f4 <rmw_take_request>
 8012544:	4605      	mov	r5, r0
 8012546:	b198      	cbz	r0, 8012570 <rcl_take_request+0x6c>
 8012548:	280a      	cmp	r0, #10
 801254a:	bf18      	it	ne
 801254c:	2501      	movne	r5, #1
 801254e:	f10d 0e18 	add.w	lr, sp, #24
 8012552:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012556:	46a4      	mov	ip, r4
 8012558:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801255c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012560:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012564:	4628      	mov	r0, r5
 8012566:	b00c      	add	sp, #48	@ 0x30
 8012568:	bd70      	pop	{r4, r5, r6, pc}
 801256a:	f44f 7516 	mov.w	r5, #600	@ 0x258
 801256e:	e7ee      	b.n	801254e <rcl_take_request+0x4a>
 8012570:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012574:	f240 2359 	movw	r3, #601	@ 0x259
 8012578:	2a00      	cmp	r2, #0
 801257a:	bf08      	it	eq
 801257c:	461d      	moveq	r5, r3
 801257e:	e7e6      	b.n	801254e <rcl_take_request+0x4a>
 8012580:	250b      	movs	r5, #11
 8012582:	e7e4      	b.n	801254e <rcl_take_request+0x4a>

08012584 <rcl_send_response>:
 8012584:	b170      	cbz	r0, 80125a4 <rcl_send_response+0x20>
 8012586:	6800      	ldr	r0, [r0, #0]
 8012588:	b160      	cbz	r0, 80125a4 <rcl_send_response+0x20>
 801258a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801258e:	b148      	cbz	r0, 80125a4 <rcl_send_response+0x20>
 8012590:	b159      	cbz	r1, 80125aa <rcl_send_response+0x26>
 8012592:	b510      	push	{r4, lr}
 8012594:	b15a      	cbz	r2, 80125ae <rcl_send_response+0x2a>
 8012596:	f002 ff8b 	bl	80154b0 <rmw_send_response>
 801259a:	b110      	cbz	r0, 80125a2 <rcl_send_response+0x1e>
 801259c:	2802      	cmp	r0, #2
 801259e:	bf18      	it	ne
 80125a0:	2001      	movne	r0, #1
 80125a2:	bd10      	pop	{r4, pc}
 80125a4:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80125a8:	4770      	bx	lr
 80125aa:	200b      	movs	r0, #11
 80125ac:	4770      	bx	lr
 80125ae:	200b      	movs	r0, #11
 80125b0:	bd10      	pop	{r4, pc}
 80125b2:	bf00      	nop

080125b4 <rcl_service_is_valid>:
 80125b4:	b130      	cbz	r0, 80125c4 <rcl_service_is_valid+0x10>
 80125b6:	6800      	ldr	r0, [r0, #0]
 80125b8:	b120      	cbz	r0, 80125c4 <rcl_service_is_valid+0x10>
 80125ba:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80125be:	3800      	subs	r0, #0
 80125c0:	bf18      	it	ne
 80125c2:	2001      	movne	r0, #1
 80125c4:	4770      	bx	lr
 80125c6:	bf00      	nop

080125c8 <rcl_take>:
 80125c8:	2800      	cmp	r0, #0
 80125ca:	d04a      	beq.n	8012662 <rcl_take+0x9a>
 80125cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125d0:	4604      	mov	r4, r0
 80125d2:	6800      	ldr	r0, [r0, #0]
 80125d4:	b0a4      	sub	sp, #144	@ 0x90
 80125d6:	2800      	cmp	r0, #0
 80125d8:	d03b      	beq.n	8012652 <rcl_take+0x8a>
 80125da:	461f      	mov	r7, r3
 80125dc:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d036      	beq.n	8012652 <rcl_take+0x8a>
 80125e4:	460e      	mov	r6, r1
 80125e6:	2900      	cmp	r1, #0
 80125e8:	d039      	beq.n	801265e <rcl_take+0x96>
 80125ea:	4615      	mov	r5, r2
 80125ec:	2a00      	cmp	r2, #0
 80125ee:	d03c      	beq.n	801266a <rcl_take+0xa2>
 80125f0:	a802      	add	r0, sp, #8
 80125f2:	f002 fba1 	bl	8014d38 <rmw_get_zero_initialized_message_info>
 80125f6:	f10d 0c08 	add.w	ip, sp, #8
 80125fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80125fe:	46ae      	mov	lr, r5
 8012600:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012604:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012608:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801260c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012610:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012614:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8012618:	f04f 0800 	mov.w	r8, #0
 801261c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8012620:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8012624:	6822      	ldr	r2, [r4, #0]
 8012626:	462b      	mov	r3, r5
 8012628:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 801262c:	9700      	str	r7, [sp, #0]
 801262e:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8012632:	4631      	mov	r1, r6
 8012634:	f002 ffe2 	bl	80155fc <rmw_take_with_info>
 8012638:	4603      	mov	r3, r0
 801263a:	b9c0      	cbnz	r0, 801266e <rcl_take+0xa6>
 801263c:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8012640:	f240 1291 	movw	r2, #401	@ 0x191
 8012644:	2900      	cmp	r1, #0
 8012646:	bf08      	it	eq
 8012648:	4613      	moveq	r3, r2
 801264a:	4618      	mov	r0, r3
 801264c:	b024      	add	sp, #144	@ 0x90
 801264e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012652:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8012656:	4618      	mov	r0, r3
 8012658:	b024      	add	sp, #144	@ 0x90
 801265a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801265e:	230b      	movs	r3, #11
 8012660:	e7f3      	b.n	801264a <rcl_take+0x82>
 8012662:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8012666:	4618      	mov	r0, r3
 8012668:	4770      	bx	lr
 801266a:	ad14      	add	r5, sp, #80	@ 0x50
 801266c:	e7c0      	b.n	80125f0 <rcl_take+0x28>
 801266e:	f7ff fa51 	bl	8011b14 <rcl_convert_rmw_ret_to_rcl_ret>
 8012672:	4603      	mov	r3, r0
 8012674:	e7e9      	b.n	801264a <rcl_take+0x82>
 8012676:	bf00      	nop

08012678 <rcl_subscription_get_rmw_handle>:
 8012678:	b118      	cbz	r0, 8012682 <rcl_subscription_get_rmw_handle+0xa>
 801267a:	6800      	ldr	r0, [r0, #0]
 801267c:	b108      	cbz	r0, 8012682 <rcl_subscription_get_rmw_handle+0xa>
 801267e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8012682:	4770      	bx	lr

08012684 <rcl_subscription_is_valid>:
 8012684:	b130      	cbz	r0, 8012694 <rcl_subscription_is_valid+0x10>
 8012686:	6800      	ldr	r0, [r0, #0]
 8012688:	b120      	cbz	r0, 8012694 <rcl_subscription_is_valid+0x10>
 801268a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801268e:	3800      	subs	r0, #0
 8012690:	bf18      	it	ne
 8012692:	2001      	movne	r0, #1
 8012694:	4770      	bx	lr
 8012696:	bf00      	nop

08012698 <rcl_get_system_time>:
 8012698:	4608      	mov	r0, r1
 801269a:	f7fa bbf9 	b.w	800ce90 <rcutils_system_time_now>
 801269e:	bf00      	nop

080126a0 <rcl_get_steady_time>:
 80126a0:	4608      	mov	r0, r1
 80126a2:	f7fa bc1d 	b.w	800cee0 <rcutils_steady_time_now>
 80126a6:	bf00      	nop

080126a8 <rcl_get_ros_time>:
 80126a8:	7a03      	ldrb	r3, [r0, #8]
 80126aa:	b510      	push	{r4, lr}
 80126ac:	460c      	mov	r4, r1
 80126ae:	b133      	cbz	r3, 80126be <rcl_get_ros_time+0x16>
 80126b0:	2105      	movs	r1, #5
 80126b2:	f001 ff5d 	bl	8014570 <__atomic_load_8>
 80126b6:	e9c4 0100 	strd	r0, r1, [r4]
 80126ba:	2000      	movs	r0, #0
 80126bc:	bd10      	pop	{r4, pc}
 80126be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126c2:	4608      	mov	r0, r1
 80126c4:	f7fa bbe4 	b.w	800ce90 <rcutils_system_time_now>

080126c8 <rcl_clock_init>:
 80126c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126ca:	4605      	mov	r5, r0
 80126cc:	4610      	mov	r0, r2
 80126ce:	4614      	mov	r4, r2
 80126d0:	460e      	mov	r6, r1
 80126d2:	f7fa fb9b 	bl	800ce0c <rcutils_allocator_is_valid>
 80126d6:	b128      	cbz	r0, 80126e4 <rcl_clock_init+0x1c>
 80126d8:	2d03      	cmp	r5, #3
 80126da:	d803      	bhi.n	80126e4 <rcl_clock_init+0x1c>
 80126dc:	e8df f005 	tbb	[pc, r5]
 80126e0:	06532e1d 	.word	0x06532e1d
 80126e4:	f04f 0c0b 	mov.w	ip, #11
 80126e8:	4660      	mov	r0, ip
 80126ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126ec:	2e00      	cmp	r6, #0
 80126ee:	d0f9      	beq.n	80126e4 <rcl_clock_init+0x1c>
 80126f0:	2c00      	cmp	r4, #0
 80126f2:	d0f7      	beq.n	80126e4 <rcl_clock_init+0x1c>
 80126f4:	2300      	movs	r3, #0
 80126f6:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80126fa:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 80127b0 <rcl_clock_init+0xe8>
 80126fe:	6133      	str	r3, [r6, #16]
 8012700:	f106 0514 	add.w	r5, r6, #20
 8012704:	469c      	mov	ip, r3
 8012706:	2703      	movs	r7, #3
 8012708:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801270a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801270c:	6823      	ldr	r3, [r4, #0]
 801270e:	602b      	str	r3, [r5, #0]
 8012710:	7037      	strb	r7, [r6, #0]
 8012712:	f8c6 e00c 	str.w	lr, [r6, #12]
 8012716:	4660      	mov	r0, ip
 8012718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801271a:	2e00      	cmp	r6, #0
 801271c:	d0e2      	beq.n	80126e4 <rcl_clock_init+0x1c>
 801271e:	2300      	movs	r3, #0
 8012720:	7033      	strb	r3, [r6, #0]
 8012722:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012726:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801272a:	469c      	mov	ip, r3
 801272c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801272e:	f106 0514 	add.w	r5, r6, #20
 8012732:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012734:	6823      	ldr	r3, [r4, #0]
 8012736:	602b      	str	r3, [r5, #0]
 8012738:	4660      	mov	r0, ip
 801273a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801273c:	2e00      	cmp	r6, #0
 801273e:	d0d1      	beq.n	80126e4 <rcl_clock_init+0x1c>
 8012740:	2c00      	cmp	r4, #0
 8012742:	d0cf      	beq.n	80126e4 <rcl_clock_init+0x1c>
 8012744:	2700      	movs	r7, #0
 8012746:	7037      	strb	r7, [r6, #0]
 8012748:	46a4      	mov	ip, r4
 801274a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801274e:	f106 0514 	add.w	r5, r6, #20
 8012752:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8012756:	e9c6 7703 	strd	r7, r7, [r6, #12]
 801275a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801275c:	f8dc 3000 	ldr.w	r3, [ip]
 8012760:	602b      	str	r3, [r5, #0]
 8012762:	6921      	ldr	r1, [r4, #16]
 8012764:	6823      	ldr	r3, [r4, #0]
 8012766:	2010      	movs	r0, #16
 8012768:	4798      	blx	r3
 801276a:	6130      	str	r0, [r6, #16]
 801276c:	b1d0      	cbz	r0, 80127a4 <rcl_clock_init+0xdc>
 801276e:	2200      	movs	r2, #0
 8012770:	2300      	movs	r3, #0
 8012772:	e9c0 2300 	strd	r2, r3, [r0]
 8012776:	2301      	movs	r3, #1
 8012778:	7207      	strb	r7, [r0, #8]
 801277a:	4a0c      	ldr	r2, [pc, #48]	@ (80127ac <rcl_clock_init+0xe4>)
 801277c:	7033      	strb	r3, [r6, #0]
 801277e:	46bc      	mov	ip, r7
 8012780:	60f2      	str	r2, [r6, #12]
 8012782:	4660      	mov	r0, ip
 8012784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012786:	2e00      	cmp	r6, #0
 8012788:	d0ac      	beq.n	80126e4 <rcl_clock_init+0x1c>
 801278a:	2c00      	cmp	r4, #0
 801278c:	d0aa      	beq.n	80126e4 <rcl_clock_init+0x1c>
 801278e:	2300      	movs	r3, #0
 8012790:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012794:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 80127b4 <rcl_clock_init+0xec>
 8012798:	6133      	str	r3, [r6, #16]
 801279a:	f106 0514 	add.w	r5, r6, #20
 801279e:	469c      	mov	ip, r3
 80127a0:	2702      	movs	r7, #2
 80127a2:	e7b1      	b.n	8012708 <rcl_clock_init+0x40>
 80127a4:	f04f 0c0a 	mov.w	ip, #10
 80127a8:	e79e      	b.n	80126e8 <rcl_clock_init+0x20>
 80127aa:	bf00      	nop
 80127ac:	080126a9 	.word	0x080126a9
 80127b0:	080126a1 	.word	0x080126a1
 80127b4:	08012699 	.word	0x08012699

080127b8 <rcl_clock_get_now>:
 80127b8:	b140      	cbz	r0, 80127cc <rcl_clock_get_now+0x14>
 80127ba:	b139      	cbz	r1, 80127cc <rcl_clock_get_now+0x14>
 80127bc:	7803      	ldrb	r3, [r0, #0]
 80127be:	b11b      	cbz	r3, 80127c8 <rcl_clock_get_now+0x10>
 80127c0:	68c3      	ldr	r3, [r0, #12]
 80127c2:	b10b      	cbz	r3, 80127c8 <rcl_clock_get_now+0x10>
 80127c4:	6900      	ldr	r0, [r0, #16]
 80127c6:	4718      	bx	r3
 80127c8:	2001      	movs	r0, #1
 80127ca:	4770      	bx	lr
 80127cc:	200b      	movs	r0, #11
 80127ce:	4770      	bx	lr

080127d0 <rcl_clock_add_jump_callback>:
 80127d0:	b082      	sub	sp, #8
 80127d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127d6:	a906      	add	r1, sp, #24
 80127d8:	e881 000c 	stmia.w	r1, {r2, r3}
 80127dc:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 80127e0:	b320      	cbz	r0, 801282c <rcl_clock_add_jump_callback+0x5c>
 80127e2:	4604      	mov	r4, r0
 80127e4:	3014      	adds	r0, #20
 80127e6:	f7fa fb11 	bl	800ce0c <rcutils_allocator_is_valid>
 80127ea:	b1f8      	cbz	r0, 801282c <rcl_clock_add_jump_callback+0x5c>
 80127ec:	b1f6      	cbz	r6, 801282c <rcl_clock_add_jump_callback+0x5c>
 80127ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	db1b      	blt.n	801282c <rcl_clock_add_jump_callback+0x5c>
 80127f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80127f8:	2a01      	cmp	r2, #1
 80127fa:	f173 0300 	sbcs.w	r3, r3, #0
 80127fe:	da15      	bge.n	801282c <rcl_clock_add_jump_callback+0x5c>
 8012800:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8012804:	2f00      	cmp	r7, #0
 8012806:	d042      	beq.n	801288e <rcl_clock_add_jump_callback+0xbe>
 8012808:	2300      	movs	r3, #0
 801280a:	4602      	mov	r2, r0
 801280c:	e003      	b.n	8012816 <rcl_clock_add_jump_callback+0x46>
 801280e:	42bb      	cmp	r3, r7
 8012810:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8012814:	d011      	beq.n	801283a <rcl_clock_add_jump_callback+0x6a>
 8012816:	6811      	ldr	r1, [r2, #0]
 8012818:	42b1      	cmp	r1, r6
 801281a:	f103 0301 	add.w	r3, r3, #1
 801281e:	d1f6      	bne.n	801280e <rcl_clock_add_jump_callback+0x3e>
 8012820:	6a11      	ldr	r1, [r2, #32]
 8012822:	42a9      	cmp	r1, r5
 8012824:	d1f3      	bne.n	801280e <rcl_clock_add_jump_callback+0x3e>
 8012826:	f04f 0e01 	mov.w	lr, #1
 801282a:	e001      	b.n	8012830 <rcl_clock_add_jump_callback+0x60>
 801282c:	f04f 0e0b 	mov.w	lr, #11
 8012830:	4670      	mov	r0, lr
 8012832:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012836:	b002      	add	sp, #8
 8012838:	4770      	bx	lr
 801283a:	3301      	adds	r3, #1
 801283c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8012840:	00d9      	lsls	r1, r3, #3
 8012842:	69e3      	ldr	r3, [r4, #28]
 8012844:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8012846:	4798      	blx	r3
 8012848:	b1f0      	cbz	r0, 8012888 <rcl_clock_add_jump_callback+0xb8>
 801284a:	68a3      	ldr	r3, [r4, #8]
 801284c:	6060      	str	r0, [r4, #4]
 801284e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8012852:	f10d 0c18 	add.w	ip, sp, #24
 8012856:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 801285a:	f103 0801 	add.w	r8, r3, #1
 801285e:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8012862:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012866:	f106 0708 	add.w	r7, r6, #8
 801286a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801286c:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8012870:	f04f 0e00 	mov.w	lr, #0
 8012874:	e887 0003 	stmia.w	r7, {r0, r1}
 8012878:	6235      	str	r5, [r6, #32]
 801287a:	4670      	mov	r0, lr
 801287c:	f8c4 8008 	str.w	r8, [r4, #8]
 8012880:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012884:	b002      	add	sp, #8
 8012886:	4770      	bx	lr
 8012888:	f04f 0e0a 	mov.w	lr, #10
 801288c:	e7d0      	b.n	8012830 <rcl_clock_add_jump_callback+0x60>
 801288e:	2128      	movs	r1, #40	@ 0x28
 8012890:	e7d7      	b.n	8012842 <rcl_clock_add_jump_callback+0x72>
 8012892:	bf00      	nop

08012894 <rcl_clock_remove_jump_callback>:
 8012894:	2800      	cmp	r0, #0
 8012896:	d057      	beq.n	8012948 <rcl_clock_remove_jump_callback+0xb4>
 8012898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801289c:	4605      	mov	r5, r0
 801289e:	3014      	adds	r0, #20
 80128a0:	4688      	mov	r8, r1
 80128a2:	4692      	mov	sl, r2
 80128a4:	f7fa fab2 	bl	800ce0c <rcutils_allocator_is_valid>
 80128a8:	2800      	cmp	r0, #0
 80128aa:	d03b      	beq.n	8012924 <rcl_clock_remove_jump_callback+0x90>
 80128ac:	f1b8 0f00 	cmp.w	r8, #0
 80128b0:	d038      	beq.n	8012924 <rcl_clock_remove_jump_callback+0x90>
 80128b2:	68ae      	ldr	r6, [r5, #8]
 80128b4:	b166      	cbz	r6, 80128d0 <rcl_clock_remove_jump_callback+0x3c>
 80128b6:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80128ba:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 80128be:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 80128c2:	464c      	mov	r4, r9
 80128c4:	6823      	ldr	r3, [r4, #0]
 80128c6:	4543      	cmp	r3, r8
 80128c8:	d005      	beq.n	80128d6 <rcl_clock_remove_jump_callback+0x42>
 80128ca:	3428      	adds	r4, #40	@ 0x28
 80128cc:	42a7      	cmp	r7, r4
 80128ce:	d1f9      	bne.n	80128c4 <rcl_clock_remove_jump_callback+0x30>
 80128d0:	2001      	movs	r0, #1
 80128d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128d6:	6a23      	ldr	r3, [r4, #32]
 80128d8:	3428      	adds	r4, #40	@ 0x28
 80128da:	42bc      	cmp	r4, r7
 80128dc:	d02d      	beq.n	801293a <rcl_clock_remove_jump_callback+0xa6>
 80128de:	4553      	cmp	r3, sl
 80128e0:	d1f0      	bne.n	80128c4 <rcl_clock_remove_jump_callback+0x30>
 80128e2:	46a6      	mov	lr, r4
 80128e4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80128e8:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 80128ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80128f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80128f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80128f8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80128fc:	3428      	adds	r4, #40	@ 0x28
 80128fe:	42a7      	cmp	r7, r4
 8012900:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012904:	d1ed      	bne.n	80128e2 <rcl_clock_remove_jump_callback+0x4e>
 8012906:	3e01      	subs	r6, #1
 8012908:	60ae      	str	r6, [r5, #8]
 801290a:	b176      	cbz	r6, 801292a <rcl_clock_remove_jump_callback+0x96>
 801290c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8012910:	69eb      	ldr	r3, [r5, #28]
 8012912:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8012914:	00f1      	lsls	r1, r6, #3
 8012916:	4648      	mov	r0, r9
 8012918:	4798      	blx	r3
 801291a:	b1b8      	cbz	r0, 801294c <rcl_clock_remove_jump_callback+0xb8>
 801291c:	6068      	str	r0, [r5, #4]
 801291e:	2000      	movs	r0, #0
 8012920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012924:	200b      	movs	r0, #11
 8012926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801292a:	4648      	mov	r0, r9
 801292c:	69ab      	ldr	r3, [r5, #24]
 801292e:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8012930:	4798      	blx	r3
 8012932:	606e      	str	r6, [r5, #4]
 8012934:	4630      	mov	r0, r6
 8012936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801293a:	4553      	cmp	r3, sl
 801293c:	d1c8      	bne.n	80128d0 <rcl_clock_remove_jump_callback+0x3c>
 801293e:	3e01      	subs	r6, #1
 8012940:	60ae      	str	r6, [r5, #8]
 8012942:	2e00      	cmp	r6, #0
 8012944:	d1e2      	bne.n	801290c <rcl_clock_remove_jump_callback+0x78>
 8012946:	e7f0      	b.n	801292a <rcl_clock_remove_jump_callback+0x96>
 8012948:	200b      	movs	r0, #11
 801294a:	4770      	bx	lr
 801294c:	200a      	movs	r0, #10
 801294e:	e7ea      	b.n	8012926 <rcl_clock_remove_jump_callback+0x92>

08012950 <_rcl_timer_time_jump>:
 8012950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012954:	4605      	mov	r5, r0
 8012956:	b084      	sub	sp, #16
 8012958:	4614      	mov	r4, r2
 801295a:	b131      	cbz	r1, 801296a <_rcl_timer_time_jump+0x1a>
 801295c:	7803      	ldrb	r3, [r0, #0]
 801295e:	3b02      	subs	r3, #2
 8012960:	2b01      	cmp	r3, #1
 8012962:	d93f      	bls.n	80129e4 <_rcl_timer_time_jump+0x94>
 8012964:	b004      	add	sp, #16
 8012966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801296a:	6813      	ldr	r3, [r2, #0]
 801296c:	a902      	add	r1, sp, #8
 801296e:	6818      	ldr	r0, [r3, #0]
 8012970:	f7ff ff22 	bl	80127b8 <rcl_clock_get_now>
 8012974:	2800      	cmp	r0, #0
 8012976:	d1f5      	bne.n	8012964 <_rcl_timer_time_jump+0x14>
 8012978:	6820      	ldr	r0, [r4, #0]
 801297a:	2105      	movs	r1, #5
 801297c:	3020      	adds	r0, #32
 801297e:	f001 fdf7 	bl	8014570 <__atomic_load_8>
 8012982:	6823      	ldr	r3, [r4, #0]
 8012984:	4681      	mov	r9, r0
 8012986:	4688      	mov	r8, r1
 8012988:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 801298c:	2105      	movs	r1, #5
 801298e:	f001 fdef 	bl	8014570 <__atomic_load_8>
 8012992:	4607      	mov	r7, r0
 8012994:	6820      	ldr	r0, [r4, #0]
 8012996:	460e      	mov	r6, r1
 8012998:	3018      	adds	r0, #24
 801299a:	2105      	movs	r1, #5
 801299c:	f001 fde8 	bl	8014570 <__atomic_load_8>
 80129a0:	782b      	ldrb	r3, [r5, #0]
 80129a2:	9a02      	ldr	r2, [sp, #8]
 80129a4:	3b02      	subs	r3, #2
 80129a6:	2b01      	cmp	r3, #1
 80129a8:	460d      	mov	r5, r1
 80129aa:	9b03      	ldr	r3, [sp, #12]
 80129ac:	4682      	mov	sl, r0
 80129ae:	d937      	bls.n	8012a20 <_rcl_timer_time_jump+0xd0>
 80129b0:	42ba      	cmp	r2, r7
 80129b2:	eb73 0106 	sbcs.w	r1, r3, r6
 80129b6:	da5f      	bge.n	8012a78 <_rcl_timer_time_jump+0x128>
 80129b8:	454a      	cmp	r2, r9
 80129ba:	eb73 0108 	sbcs.w	r1, r3, r8
 80129be:	dad1      	bge.n	8012964 <_rcl_timer_time_jump+0x14>
 80129c0:	6820      	ldr	r0, [r4, #0]
 80129c2:	eb1a 0202 	adds.w	r2, sl, r2
 80129c6:	eb43 0305 	adc.w	r3, r3, r5
 80129ca:	2505      	movs	r5, #5
 80129cc:	3028      	adds	r0, #40	@ 0x28
 80129ce:	9500      	str	r5, [sp, #0]
 80129d0:	f001 fe04 	bl	80145dc <__atomic_store_8>
 80129d4:	6820      	ldr	r0, [r4, #0]
 80129d6:	9500      	str	r5, [sp, #0]
 80129d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80129dc:	3020      	adds	r0, #32
 80129de:	f001 fdfd 	bl	80145dc <__atomic_store_8>
 80129e2:	e7bf      	b.n	8012964 <_rcl_timer_time_jump+0x14>
 80129e4:	6813      	ldr	r3, [r2, #0]
 80129e6:	a902      	add	r1, sp, #8
 80129e8:	6818      	ldr	r0, [r3, #0]
 80129ea:	f7ff fee5 	bl	80127b8 <rcl_clock_get_now>
 80129ee:	2800      	cmp	r0, #0
 80129f0:	d1b8      	bne.n	8012964 <_rcl_timer_time_jump+0x14>
 80129f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80129f6:	4313      	orrs	r3, r2
 80129f8:	d0b4      	beq.n	8012964 <_rcl_timer_time_jump+0x14>
 80129fa:	6820      	ldr	r0, [r4, #0]
 80129fc:	2105      	movs	r1, #5
 80129fe:	3028      	adds	r0, #40	@ 0x28
 8012a00:	f001 fdb6 	bl	8014570 <__atomic_load_8>
 8012a04:	9d02      	ldr	r5, [sp, #8]
 8012a06:	9b03      	ldr	r3, [sp, #12]
 8012a08:	4602      	mov	r2, r0
 8012a0a:	6820      	ldr	r0, [r4, #0]
 8012a0c:	1b52      	subs	r2, r2, r5
 8012a0e:	f04f 0405 	mov.w	r4, #5
 8012a12:	9400      	str	r4, [sp, #0]
 8012a14:	eb61 0303 	sbc.w	r3, r1, r3
 8012a18:	3030      	adds	r0, #48	@ 0x30
 8012a1a:	f001 fddf 	bl	80145dc <__atomic_store_8>
 8012a1e:	e7a1      	b.n	8012964 <_rcl_timer_time_jump+0x14>
 8012a20:	4313      	orrs	r3, r2
 8012a22:	d09f      	beq.n	8012964 <_rcl_timer_time_jump+0x14>
 8012a24:	6820      	ldr	r0, [r4, #0]
 8012a26:	f04f 0805 	mov.w	r8, #5
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	f8cd 8000 	str.w	r8, [sp]
 8012a30:	3030      	adds	r0, #48	@ 0x30
 8012a32:	2200      	movs	r2, #0
 8012a34:	f001 fe08 	bl	8014648 <__atomic_exchange_8>
 8012a38:	ea51 0300 	orrs.w	r3, r1, r0
 8012a3c:	4606      	mov	r6, r0
 8012a3e:	460f      	mov	r7, r1
 8012a40:	d090      	beq.n	8012964 <_rcl_timer_time_jump+0x14>
 8012a42:	9a02      	ldr	r2, [sp, #8]
 8012a44:	9b03      	ldr	r3, [sp, #12]
 8012a46:	f8cd 8000 	str.w	r8, [sp]
 8012a4a:	1a12      	subs	r2, r2, r0
 8012a4c:	6820      	ldr	r0, [r4, #0]
 8012a4e:	eb63 0301 	sbc.w	r3, r3, r1
 8012a52:	eb12 020a 	adds.w	r2, r2, sl
 8012a56:	eb43 0305 	adc.w	r3, r3, r5
 8012a5a:	3028      	adds	r0, #40	@ 0x28
 8012a5c:	f001 fdbe 	bl	80145dc <__atomic_store_8>
 8012a60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012a64:	f8cd 8000 	str.w	r8, [sp]
 8012a68:	6820      	ldr	r0, [r4, #0]
 8012a6a:	1b92      	subs	r2, r2, r6
 8012a6c:	eb63 0307 	sbc.w	r3, r3, r7
 8012a70:	3020      	adds	r0, #32
 8012a72:	f001 fdb3 	bl	80145dc <__atomic_store_8>
 8012a76:	e775      	b.n	8012964 <_rcl_timer_time_jump+0x14>
 8012a78:	6820      	ldr	r0, [r4, #0]
 8012a7a:	3008      	adds	r0, #8
 8012a7c:	f004 f93c 	bl	8016cf8 <rcl_trigger_guard_condition>
 8012a80:	e770      	b.n	8012964 <_rcl_timer_time_jump+0x14>
 8012a82:	bf00      	nop

08012a84 <rcl_get_zero_initialized_timer>:
 8012a84:	4b01      	ldr	r3, [pc, #4]	@ (8012a8c <rcl_get_zero_initialized_timer+0x8>)
 8012a86:	6818      	ldr	r0, [r3, #0]
 8012a88:	4770      	bx	lr
 8012a8a:	bf00      	nop
 8012a8c:	08018d68 	.word	0x08018d68

08012a90 <rcl_timer_init>:
 8012a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a94:	b0aa      	sub	sp, #168	@ 0xa8
 8012a96:	4604      	mov	r4, r0
 8012a98:	a835      	add	r0, sp, #212	@ 0xd4
 8012a9a:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 8012a9e:	460d      	mov	r5, r1
 8012aa0:	4692      	mov	sl, r2
 8012aa2:	f7fa f9b3 	bl	800ce0c <rcutils_allocator_is_valid>
 8012aa6:	2800      	cmp	r0, #0
 8012aa8:	d064      	beq.n	8012b74 <rcl_timer_init+0xe4>
 8012aaa:	2c00      	cmp	r4, #0
 8012aac:	d062      	beq.n	8012b74 <rcl_timer_init+0xe4>
 8012aae:	2d00      	cmp	r5, #0
 8012ab0:	d060      	beq.n	8012b74 <rcl_timer_init+0xe4>
 8012ab2:	2f00      	cmp	r7, #0
 8012ab4:	db5e      	blt.n	8012b74 <rcl_timer_init+0xe4>
 8012ab6:	6823      	ldr	r3, [r4, #0]
 8012ab8:	b123      	cbz	r3, 8012ac4 <rcl_timer_init+0x34>
 8012aba:	2664      	movs	r6, #100	@ 0x64
 8012abc:	4630      	mov	r0, r6
 8012abe:	b02a      	add	sp, #168	@ 0xa8
 8012ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ac4:	a908      	add	r1, sp, #32
 8012ac6:	4628      	mov	r0, r5
 8012ac8:	f7ff fe76 	bl	80127b8 <rcl_clock_get_now>
 8012acc:	4606      	mov	r6, r0
 8012ace:	2800      	cmp	r0, #0
 8012ad0:	d1f4      	bne.n	8012abc <rcl_timer_init+0x2c>
 8012ad2:	ae06      	add	r6, sp, #24
 8012ad4:	4630      	mov	r0, r6
 8012ad6:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 8012ada:	f004 f815 	bl	8016b08 <rcl_get_zero_initialized_guard_condition>
 8012ade:	e896 0003 	ldmia.w	r6, {r0, r1}
 8012ae2:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 8012ae6:	ae0b      	add	r6, sp, #44	@ 0x2c
 8012ae8:	e889 0003 	stmia.w	r9, {r0, r1}
 8012aec:	4630      	mov	r0, r6
 8012aee:	f004 f8e7 	bl	8016cc0 <rcl_guard_condition_get_default_options>
 8012af2:	ab0d      	add	r3, sp, #52	@ 0x34
 8012af4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012af8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012afc:	4651      	mov	r1, sl
 8012afe:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012b02:	4648      	mov	r0, r9
 8012b04:	f004 f80a 	bl	8016b1c <rcl_guard_condition_init>
 8012b08:	4606      	mov	r6, r0
 8012b0a:	2800      	cmp	r0, #0
 8012b0c:	d1d6      	bne.n	8012abc <rcl_timer_init+0x2c>
 8012b0e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012b10:	781b      	ldrb	r3, [r3, #0]
 8012b12:	2b01      	cmp	r3, #1
 8012b14:	d033      	beq.n	8012b7e <rcl_timer_init+0xee>
 8012b16:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8012b18:	911a      	str	r1, [sp, #104]	@ 0x68
 8012b1a:	4642      	mov	r2, r8
 8012b1c:	463b      	mov	r3, r7
 8012b1e:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8012b22:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012b26:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8012bd8 <rcl_timer_init+0x148>
 8012b2a:	eb12 0008 	adds.w	r0, r2, r8
 8012b2e:	eb47 0103 	adc.w	r1, r7, r3
 8012b32:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 8012b36:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8012b3a:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8012b3e:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8012b42:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012b46:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8012b4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012b4e:	f8de 3000 	ldr.w	r3, [lr]
 8012b52:	f8cc 3000 	str.w	r3, [ip]
 8012b56:	f04f 0a00 	mov.w	sl, #0
 8012b5a:	4619      	mov	r1, r3
 8012b5c:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8012b60:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8012b62:	2050      	movs	r0, #80	@ 0x50
 8012b64:	4798      	blx	r3
 8012b66:	6020      	str	r0, [r4, #0]
 8012b68:	b358      	cbz	r0, 8012bc2 <rcl_timer_init+0x132>
 8012b6a:	2250      	movs	r2, #80	@ 0x50
 8012b6c:	a916      	add	r1, sp, #88	@ 0x58
 8012b6e:	f004 fe96 	bl	801789e <memcpy>
 8012b72:	e7a3      	b.n	8012abc <rcl_timer_init+0x2c>
 8012b74:	260b      	movs	r6, #11
 8012b76:	4630      	mov	r0, r6
 8012b78:	b02a      	add	sp, #168	@ 0xa8
 8012b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b7e:	2001      	movs	r0, #1
 8012b80:	2100      	movs	r1, #0
 8012b82:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8012b86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012b8a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8012b8e:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8012b92:	4a13      	ldr	r2, [pc, #76]	@ (8012be0 <rcl_timer_init+0x150>)
 8012b94:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8012b98:	9405      	str	r4, [sp, #20]
 8012b9a:	9204      	str	r2, [sp, #16]
 8012b9c:	ab12      	add	r3, sp, #72	@ 0x48
 8012b9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012ba0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8012ba4:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8012ba8:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8012bac:	4628      	mov	r0, r5
 8012bae:	f7ff fe0f 	bl	80127d0 <rcl_clock_add_jump_callback>
 8012bb2:	4682      	mov	sl, r0
 8012bb4:	2800      	cmp	r0, #0
 8012bb6:	d0ae      	beq.n	8012b16 <rcl_timer_init+0x86>
 8012bb8:	4648      	mov	r0, r9
 8012bba:	f004 f85b 	bl	8016c74 <rcl_guard_condition_fini>
 8012bbe:	4656      	mov	r6, sl
 8012bc0:	e77c      	b.n	8012abc <rcl_timer_init+0x2c>
 8012bc2:	4648      	mov	r0, r9
 8012bc4:	f004 f856 	bl	8016c74 <rcl_guard_condition_fini>
 8012bc8:	4905      	ldr	r1, [pc, #20]	@ (8012be0 <rcl_timer_init+0x150>)
 8012bca:	4622      	mov	r2, r4
 8012bcc:	4628      	mov	r0, r5
 8012bce:	f7ff fe61 	bl	8012894 <rcl_clock_remove_jump_callback>
 8012bd2:	260a      	movs	r6, #10
 8012bd4:	e772      	b.n	8012abc <rcl_timer_init+0x2c>
 8012bd6:	bf00      	nop
	...
 8012be0:	08012951 	.word	0x08012951

08012be4 <rcl_timer_call>:
 8012be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012be8:	b087      	sub	sp, #28
 8012bea:	2800      	cmp	r0, #0
 8012bec:	d06d      	beq.n	8012cca <rcl_timer_call+0xe6>
 8012bee:	6803      	ldr	r3, [r0, #0]
 8012bf0:	4604      	mov	r4, r0
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d063      	beq.n	8012cbe <rcl_timer_call+0xda>
 8012bf6:	f3bf 8f5b 	dmb	ish
 8012bfa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012bfe:	f3bf 8f5b 	dmb	ish
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d150      	bne.n	8012ca8 <rcl_timer_call+0xc4>
 8012c06:	6803      	ldr	r3, [r0, #0]
 8012c08:	a904      	add	r1, sp, #16
 8012c0a:	6818      	ldr	r0, [r3, #0]
 8012c0c:	f7ff fdd4 	bl	80127b8 <rcl_clock_get_now>
 8012c10:	4605      	mov	r5, r0
 8012c12:	2800      	cmp	r0, #0
 8012c14:	d14a      	bne.n	8012cac <rcl_timer_call+0xc8>
 8012c16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	db4a      	blt.n	8012cb4 <rcl_timer_call+0xd0>
 8012c1e:	6820      	ldr	r0, [r4, #0]
 8012c20:	f04f 0a05 	mov.w	sl, #5
 8012c24:	f8cd a000 	str.w	sl, [sp]
 8012c28:	3020      	adds	r0, #32
 8012c2a:	f001 fd0d 	bl	8014648 <__atomic_exchange_8>
 8012c2e:	6823      	ldr	r3, [r4, #0]
 8012c30:	f3bf 8f5b 	dmb	ish
 8012c34:	4680      	mov	r8, r0
 8012c36:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8012c3a:	f3bf 8f5b 	dmb	ish
 8012c3e:	6820      	ldr	r0, [r4, #0]
 8012c40:	4689      	mov	r9, r1
 8012c42:	3028      	adds	r0, #40	@ 0x28
 8012c44:	4651      	mov	r1, sl
 8012c46:	f001 fc93 	bl	8014570 <__atomic_load_8>
 8012c4a:	4606      	mov	r6, r0
 8012c4c:	6820      	ldr	r0, [r4, #0]
 8012c4e:	460f      	mov	r7, r1
 8012c50:	3018      	adds	r0, #24
 8012c52:	4651      	mov	r1, sl
 8012c54:	f001 fc8c 	bl	8014570 <__atomic_load_8>
 8012c58:	1836      	adds	r6, r6, r0
 8012c5a:	4602      	mov	r2, r0
 8012c5c:	4682      	mov	sl, r0
 8012c5e:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8012c62:	eb47 0701 	adc.w	r7, r7, r1
 8012c66:	4286      	cmp	r6, r0
 8012c68:	460b      	mov	r3, r1
 8012c6a:	eb77 010c 	sbcs.w	r1, r7, ip
 8012c6e:	da04      	bge.n	8012c7a <rcl_timer_call+0x96>
 8012c70:	ea53 0102 	orrs.w	r1, r3, r2
 8012c74:	d12e      	bne.n	8012cd4 <rcl_timer_call+0xf0>
 8012c76:	4606      	mov	r6, r0
 8012c78:	4667      	mov	r7, ip
 8012c7a:	6820      	ldr	r0, [r4, #0]
 8012c7c:	2105      	movs	r1, #5
 8012c7e:	4632      	mov	r2, r6
 8012c80:	463b      	mov	r3, r7
 8012c82:	3028      	adds	r0, #40	@ 0x28
 8012c84:	9100      	str	r1, [sp, #0]
 8012c86:	f001 fca9 	bl	80145dc <__atomic_store_8>
 8012c8a:	f1bb 0f00 	cmp.w	fp, #0
 8012c8e:	d00d      	beq.n	8012cac <rcl_timer_call+0xc8>
 8012c90:	9a04      	ldr	r2, [sp, #16]
 8012c92:	9b05      	ldr	r3, [sp, #20]
 8012c94:	ebb2 0208 	subs.w	r2, r2, r8
 8012c98:	4620      	mov	r0, r4
 8012c9a:	eb63 0309 	sbc.w	r3, r3, r9
 8012c9e:	47d8      	blx	fp
 8012ca0:	4628      	mov	r0, r5
 8012ca2:	b007      	add	sp, #28
 8012ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ca8:	f240 3521 	movw	r5, #801	@ 0x321
 8012cac:	4628      	mov	r0, r5
 8012cae:	b007      	add	sp, #28
 8012cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cb4:	2501      	movs	r5, #1
 8012cb6:	4628      	mov	r0, r5
 8012cb8:	b007      	add	sp, #28
 8012cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cbe:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8012cc2:	4628      	mov	r0, r5
 8012cc4:	b007      	add	sp, #28
 8012cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cca:	250b      	movs	r5, #11
 8012ccc:	4628      	mov	r0, r5
 8012cce:	b007      	add	sp, #28
 8012cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cd4:	1b80      	subs	r0, r0, r6
 8012cd6:	eb6c 0107 	sbc.w	r1, ip, r7
 8012cda:	3801      	subs	r0, #1
 8012cdc:	f161 0100 	sbc.w	r1, r1, #0
 8012ce0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8012ce4:	f7ed ff22 	bl	8000b2c <__aeabi_ldivmod>
 8012ce8:	9b02      	ldr	r3, [sp, #8]
 8012cea:	3001      	adds	r0, #1
 8012cec:	f141 0100 	adc.w	r1, r1, #0
 8012cf0:	fb00 f303 	mul.w	r3, r0, r3
 8012cf4:	fb01 330a 	mla	r3, r1, sl, r3
 8012cf8:	fba0 0a0a 	umull	r0, sl, r0, sl
 8012cfc:	1986      	adds	r6, r0, r6
 8012cfe:	4453      	add	r3, sl
 8012d00:	eb43 0707 	adc.w	r7, r3, r7
 8012d04:	e7b9      	b.n	8012c7a <rcl_timer_call+0x96>
 8012d06:	bf00      	nop

08012d08 <rcl_timer_is_ready>:
 8012d08:	b570      	push	{r4, r5, r6, lr}
 8012d0a:	b082      	sub	sp, #8
 8012d0c:	b378      	cbz	r0, 8012d6e <rcl_timer_is_ready+0x66>
 8012d0e:	6803      	ldr	r3, [r0, #0]
 8012d10:	4604      	mov	r4, r0
 8012d12:	b383      	cbz	r3, 8012d76 <rcl_timer_is_ready+0x6e>
 8012d14:	460d      	mov	r5, r1
 8012d16:	b351      	cbz	r1, 8012d6e <rcl_timer_is_ready+0x66>
 8012d18:	f3bf 8f5b 	dmb	ish
 8012d1c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012d20:	f3bf 8f5b 	dmb	ish
 8012d24:	b953      	cbnz	r3, 8012d3c <rcl_timer_is_ready+0x34>
 8012d26:	6803      	ldr	r3, [r0, #0]
 8012d28:	4669      	mov	r1, sp
 8012d2a:	6818      	ldr	r0, [r3, #0]
 8012d2c:	f7ff fd44 	bl	80127b8 <rcl_clock_get_now>
 8012d30:	4606      	mov	r6, r0
 8012d32:	b140      	cbz	r0, 8012d46 <rcl_timer_is_ready+0x3e>
 8012d34:	f240 3321 	movw	r3, #801	@ 0x321
 8012d38:	4298      	cmp	r0, r3
 8012d3a:	d101      	bne.n	8012d40 <rcl_timer_is_ready+0x38>
 8012d3c:	2600      	movs	r6, #0
 8012d3e:	702e      	strb	r6, [r5, #0]
 8012d40:	4630      	mov	r0, r6
 8012d42:	b002      	add	sp, #8
 8012d44:	bd70      	pop	{r4, r5, r6, pc}
 8012d46:	6820      	ldr	r0, [r4, #0]
 8012d48:	2105      	movs	r1, #5
 8012d4a:	3028      	adds	r0, #40	@ 0x28
 8012d4c:	f001 fc10 	bl	8014570 <__atomic_load_8>
 8012d50:	9b00      	ldr	r3, [sp, #0]
 8012d52:	1ac0      	subs	r0, r0, r3
 8012d54:	9b01      	ldr	r3, [sp, #4]
 8012d56:	eb61 0103 	sbc.w	r1, r1, r3
 8012d5a:	2801      	cmp	r0, #1
 8012d5c:	f171 0300 	sbcs.w	r3, r1, #0
 8012d60:	bfb4      	ite	lt
 8012d62:	2301      	movlt	r3, #1
 8012d64:	2300      	movge	r3, #0
 8012d66:	4630      	mov	r0, r6
 8012d68:	702b      	strb	r3, [r5, #0]
 8012d6a:	b002      	add	sp, #8
 8012d6c:	bd70      	pop	{r4, r5, r6, pc}
 8012d6e:	260b      	movs	r6, #11
 8012d70:	4630      	mov	r0, r6
 8012d72:	b002      	add	sp, #8
 8012d74:	bd70      	pop	{r4, r5, r6, pc}
 8012d76:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8012d7a:	e7e1      	b.n	8012d40 <rcl_timer_is_ready+0x38>

08012d7c <rcl_timer_get_time_until_next_call>:
 8012d7c:	b570      	push	{r4, r5, r6, lr}
 8012d7e:	b082      	sub	sp, #8
 8012d80:	b330      	cbz	r0, 8012dd0 <rcl_timer_get_time_until_next_call+0x54>
 8012d82:	6803      	ldr	r3, [r0, #0]
 8012d84:	4604      	mov	r4, r0
 8012d86:	b33b      	cbz	r3, 8012dd8 <rcl_timer_get_time_until_next_call+0x5c>
 8012d88:	460d      	mov	r5, r1
 8012d8a:	b309      	cbz	r1, 8012dd0 <rcl_timer_get_time_until_next_call+0x54>
 8012d8c:	f3bf 8f5b 	dmb	ish
 8012d90:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012d94:	f3bf 8f5b 	dmb	ish
 8012d98:	b9ab      	cbnz	r3, 8012dc6 <rcl_timer_get_time_until_next_call+0x4a>
 8012d9a:	6803      	ldr	r3, [r0, #0]
 8012d9c:	4669      	mov	r1, sp
 8012d9e:	6818      	ldr	r0, [r3, #0]
 8012da0:	f7ff fd0a 	bl	80127b8 <rcl_clock_get_now>
 8012da4:	4606      	mov	r6, r0
 8012da6:	b958      	cbnz	r0, 8012dc0 <rcl_timer_get_time_until_next_call+0x44>
 8012da8:	6820      	ldr	r0, [r4, #0]
 8012daa:	2105      	movs	r1, #5
 8012dac:	3028      	adds	r0, #40	@ 0x28
 8012dae:	f001 fbdf 	bl	8014570 <__atomic_load_8>
 8012db2:	9b00      	ldr	r3, [sp, #0]
 8012db4:	1ac0      	subs	r0, r0, r3
 8012db6:	9b01      	ldr	r3, [sp, #4]
 8012db8:	6028      	str	r0, [r5, #0]
 8012dba:	eb61 0103 	sbc.w	r1, r1, r3
 8012dbe:	6069      	str	r1, [r5, #4]
 8012dc0:	4630      	mov	r0, r6
 8012dc2:	b002      	add	sp, #8
 8012dc4:	bd70      	pop	{r4, r5, r6, pc}
 8012dc6:	f240 3621 	movw	r6, #801	@ 0x321
 8012dca:	4630      	mov	r0, r6
 8012dcc:	b002      	add	sp, #8
 8012dce:	bd70      	pop	{r4, r5, r6, pc}
 8012dd0:	260b      	movs	r6, #11
 8012dd2:	4630      	mov	r0, r6
 8012dd4:	b002      	add	sp, #8
 8012dd6:	bd70      	pop	{r4, r5, r6, pc}
 8012dd8:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8012ddc:	e7f0      	b.n	8012dc0 <rcl_timer_get_time_until_next_call+0x44>
 8012dde:	bf00      	nop

08012de0 <rcl_timer_get_guard_condition>:
 8012de0:	b130      	cbz	r0, 8012df0 <rcl_timer_get_guard_condition+0x10>
 8012de2:	6800      	ldr	r0, [r0, #0]
 8012de4:	b120      	cbz	r0, 8012df0 <rcl_timer_get_guard_condition+0x10>
 8012de6:	68c3      	ldr	r3, [r0, #12]
 8012de8:	b10b      	cbz	r3, 8012dee <rcl_timer_get_guard_condition+0xe>
 8012dea:	3008      	adds	r0, #8
 8012dec:	4770      	bx	lr
 8012dee:	4618      	mov	r0, r3
 8012df0:	4770      	bx	lr
 8012df2:	bf00      	nop

08012df4 <rcl_validate_enclave_name_with_size>:
 8012df4:	b378      	cbz	r0, 8012e56 <rcl_validate_enclave_name_with_size+0x62>
 8012df6:	b570      	push	{r4, r5, r6, lr}
 8012df8:	4615      	mov	r5, r2
 8012dfa:	b0c2      	sub	sp, #264	@ 0x108
 8012dfc:	b302      	cbz	r2, 8012e40 <rcl_validate_enclave_name_with_size+0x4c>
 8012dfe:	461e      	mov	r6, r3
 8012e00:	466a      	mov	r2, sp
 8012e02:	ab01      	add	r3, sp, #4
 8012e04:	460c      	mov	r4, r1
 8012e06:	f002 f815 	bl	8014e34 <rmw_validate_namespace_with_size>
 8012e0a:	4684      	mov	ip, r0
 8012e0c:	b9e8      	cbnz	r0, 8012e4a <rcl_validate_enclave_name_with_size+0x56>
 8012e0e:	9b00      	ldr	r3, [sp, #0]
 8012e10:	b923      	cbnz	r3, 8012e1c <rcl_validate_enclave_name_with_size+0x28>
 8012e12:	2300      	movs	r3, #0
 8012e14:	602b      	str	r3, [r5, #0]
 8012e16:	4660      	mov	r0, ip
 8012e18:	b042      	add	sp, #264	@ 0x108
 8012e1a:	bd70      	pop	{r4, r5, r6, pc}
 8012e1c:	2b07      	cmp	r3, #7
 8012e1e:	d007      	beq.n	8012e30 <rcl_validate_enclave_name_with_size+0x3c>
 8012e20:	1e5a      	subs	r2, r3, #1
 8012e22:	2a05      	cmp	r2, #5
 8012e24:	d833      	bhi.n	8012e8e <rcl_validate_enclave_name_with_size+0x9a>
 8012e26:	e8df f002 	tbb	[pc, r2]
 8012e2a:	2c2f      	.short	0x2c2f
 8012e2c:	1a232629 	.word	0x1a232629
 8012e30:	2cff      	cmp	r4, #255	@ 0xff
 8012e32:	d9ee      	bls.n	8012e12 <rcl_validate_enclave_name_with_size+0x1e>
 8012e34:	602b      	str	r3, [r5, #0]
 8012e36:	2e00      	cmp	r6, #0
 8012e38:	d0ed      	beq.n	8012e16 <rcl_validate_enclave_name_with_size+0x22>
 8012e3a:	23fe      	movs	r3, #254	@ 0xfe
 8012e3c:	6033      	str	r3, [r6, #0]
 8012e3e:	e7ea      	b.n	8012e16 <rcl_validate_enclave_name_with_size+0x22>
 8012e40:	f04f 0c0b 	mov.w	ip, #11
 8012e44:	4660      	mov	r0, ip
 8012e46:	b042      	add	sp, #264	@ 0x108
 8012e48:	bd70      	pop	{r4, r5, r6, pc}
 8012e4a:	f7fe fe63 	bl	8011b14 <rcl_convert_rmw_ret_to_rcl_ret>
 8012e4e:	4684      	mov	ip, r0
 8012e50:	4660      	mov	r0, ip
 8012e52:	b042      	add	sp, #264	@ 0x108
 8012e54:	bd70      	pop	{r4, r5, r6, pc}
 8012e56:	f04f 0c0b 	mov.w	ip, #11
 8012e5a:	4660      	mov	r0, ip
 8012e5c:	4770      	bx	lr
 8012e5e:	2306      	movs	r3, #6
 8012e60:	602b      	str	r3, [r5, #0]
 8012e62:	2e00      	cmp	r6, #0
 8012e64:	d0d7      	beq.n	8012e16 <rcl_validate_enclave_name_with_size+0x22>
 8012e66:	9b01      	ldr	r3, [sp, #4]
 8012e68:	6033      	str	r3, [r6, #0]
 8012e6a:	4660      	mov	r0, ip
 8012e6c:	b042      	add	sp, #264	@ 0x108
 8012e6e:	bd70      	pop	{r4, r5, r6, pc}
 8012e70:	2305      	movs	r3, #5
 8012e72:	602b      	str	r3, [r5, #0]
 8012e74:	e7f5      	b.n	8012e62 <rcl_validate_enclave_name_with_size+0x6e>
 8012e76:	2304      	movs	r3, #4
 8012e78:	602b      	str	r3, [r5, #0]
 8012e7a:	e7f2      	b.n	8012e62 <rcl_validate_enclave_name_with_size+0x6e>
 8012e7c:	2303      	movs	r3, #3
 8012e7e:	602b      	str	r3, [r5, #0]
 8012e80:	e7ef      	b.n	8012e62 <rcl_validate_enclave_name_with_size+0x6e>
 8012e82:	2302      	movs	r3, #2
 8012e84:	602b      	str	r3, [r5, #0]
 8012e86:	e7ec      	b.n	8012e62 <rcl_validate_enclave_name_with_size+0x6e>
 8012e88:	2301      	movs	r3, #1
 8012e8a:	602b      	str	r3, [r5, #0]
 8012e8c:	e7e9      	b.n	8012e62 <rcl_validate_enclave_name_with_size+0x6e>
 8012e8e:	4a04      	ldr	r2, [pc, #16]	@ (8012ea0 <rcl_validate_enclave_name_with_size+0xac>)
 8012e90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012e94:	a802      	add	r0, sp, #8
 8012e96:	f001 fd25 	bl	80148e4 <rcutils_snprintf>
 8012e9a:	f04f 0c01 	mov.w	ip, #1
 8012e9e:	e7ba      	b.n	8012e16 <rcl_validate_enclave_name_with_size+0x22>
 8012ea0:	08018d6c 	.word	0x08018d6c

08012ea4 <rcl_validate_enclave_name>:
 8012ea4:	b168      	cbz	r0, 8012ec2 <rcl_validate_enclave_name+0x1e>
 8012ea6:	b570      	push	{r4, r5, r6, lr}
 8012ea8:	460d      	mov	r5, r1
 8012eaa:	4616      	mov	r6, r2
 8012eac:	4604      	mov	r4, r0
 8012eae:	f7ed f9c1 	bl	8000234 <strlen>
 8012eb2:	4633      	mov	r3, r6
 8012eb4:	4601      	mov	r1, r0
 8012eb6:	462a      	mov	r2, r5
 8012eb8:	4620      	mov	r0, r4
 8012eba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012ebe:	f7ff bf99 	b.w	8012df4 <rcl_validate_enclave_name_with_size>
 8012ec2:	200b      	movs	r0, #11
 8012ec4:	4770      	bx	lr
 8012ec6:	bf00      	nop

08012ec8 <rcl_get_zero_initialized_wait_set>:
 8012ec8:	b510      	push	{r4, lr}
 8012eca:	4c08      	ldr	r4, [pc, #32]	@ (8012eec <rcl_get_zero_initialized_wait_set+0x24>)
 8012ecc:	4686      	mov	lr, r0
 8012ece:	4684      	mov	ip, r0
 8012ed0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012ed2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012ed6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012ed8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012edc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012ede:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012ee2:	6823      	ldr	r3, [r4, #0]
 8012ee4:	f8cc 3000 	str.w	r3, [ip]
 8012ee8:	4670      	mov	r0, lr
 8012eea:	bd10      	pop	{r4, pc}
 8012eec:	08018dcc 	.word	0x08018dcc

08012ef0 <rcl_wait_set_is_valid>:
 8012ef0:	b118      	cbz	r0, 8012efa <rcl_wait_set_is_valid+0xa>
 8012ef2:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8012ef4:	3800      	subs	r0, #0
 8012ef6:	bf18      	it	ne
 8012ef8:	2001      	movne	r0, #1
 8012efa:	4770      	bx	lr

08012efc <rcl_wait_set_fini>:
 8012efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f00:	b082      	sub	sp, #8
 8012f02:	2800      	cmp	r0, #0
 8012f04:	f000 8095 	beq.w	8013032 <rcl_wait_set_fini+0x136>
 8012f08:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8012f0a:	4604      	mov	r4, r0
 8012f0c:	2e00      	cmp	r6, #0
 8012f0e:	f000 808c 	beq.w	801302a <rcl_wait_set_fini+0x12e>
 8012f12:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8012f14:	f002 fd48 	bl	80159a8 <rmw_destroy_wait_set>
 8012f18:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012f1a:	1e06      	subs	r6, r0, #0
 8012f1c:	bf18      	it	ne
 8012f1e:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8012f22:	2d00      	cmp	r5, #0
 8012f24:	f000 8081 	beq.w	801302a <rcl_wait_set_fini+0x12e>
 8012f28:	6820      	ldr	r0, [r4, #0]
 8012f2a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8012f2e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012f30:	2700      	movs	r7, #0
 8012f32:	6067      	str	r7, [r4, #4]
 8012f34:	602f      	str	r7, [r5, #0]
 8012f36:	b120      	cbz	r0, 8012f42 <rcl_wait_set_fini+0x46>
 8012f38:	9101      	str	r1, [sp, #4]
 8012f3a:	47c0      	blx	r8
 8012f3c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012f3e:	9901      	ldr	r1, [sp, #4]
 8012f40:	6027      	str	r7, [r4, #0]
 8012f42:	68a8      	ldr	r0, [r5, #8]
 8012f44:	b120      	cbz	r0, 8012f50 <rcl_wait_set_fini+0x54>
 8012f46:	47c0      	blx	r8
 8012f48:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012f4a:	2300      	movs	r3, #0
 8012f4c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8012f50:	68a0      	ldr	r0, [r4, #8]
 8012f52:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8012f54:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012f56:	f04f 0800 	mov.w	r8, #0
 8012f5a:	f8c4 800c 	str.w	r8, [r4, #12]
 8012f5e:	f8c5 800c 	str.w	r8, [r5, #12]
 8012f62:	b128      	cbz	r0, 8012f70 <rcl_wait_set_fini+0x74>
 8012f64:	47b8      	blx	r7
 8012f66:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012f68:	f8c4 8008 	str.w	r8, [r4, #8]
 8012f6c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8012f6e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012f70:	6968      	ldr	r0, [r5, #20]
 8012f72:	f04f 0800 	mov.w	r8, #0
 8012f76:	f8c5 8010 	str.w	r8, [r5, #16]
 8012f7a:	b128      	cbz	r0, 8012f88 <rcl_wait_set_fini+0x8c>
 8012f7c:	47b8      	blx	r7
 8012f7e:	f8c5 8014 	str.w	r8, [r5, #20]
 8012f82:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012f84:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8012f86:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012f88:	6920      	ldr	r0, [r4, #16]
 8012f8a:	f04f 0800 	mov.w	r8, #0
 8012f8e:	f8c4 8014 	str.w	r8, [r4, #20]
 8012f92:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8012f96:	b128      	cbz	r0, 8012fa4 <rcl_wait_set_fini+0xa8>
 8012f98:	47b8      	blx	r7
 8012f9a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012f9c:	f8c4 8010 	str.w	r8, [r4, #16]
 8012fa0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8012fa2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012fa4:	69a0      	ldr	r0, [r4, #24]
 8012fa6:	f04f 0800 	mov.w	r8, #0
 8012faa:	f8c4 801c 	str.w	r8, [r4, #28]
 8012fae:	f8c5 8018 	str.w	r8, [r5, #24]
 8012fb2:	b128      	cbz	r0, 8012fc0 <rcl_wait_set_fini+0xc4>
 8012fb4:	9101      	str	r1, [sp, #4]
 8012fb6:	47b8      	blx	r7
 8012fb8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012fba:	9901      	ldr	r1, [sp, #4]
 8012fbc:	f8c4 8018 	str.w	r8, [r4, #24]
 8012fc0:	6a28      	ldr	r0, [r5, #32]
 8012fc2:	b120      	cbz	r0, 8012fce <rcl_wait_set_fini+0xd2>
 8012fc4:	47b8      	blx	r7
 8012fc6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012fc8:	2300      	movs	r3, #0
 8012fca:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8012fce:	6a20      	ldr	r0, [r4, #32]
 8012fd0:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8012fd4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012fd6:	2700      	movs	r7, #0
 8012fd8:	6267      	str	r7, [r4, #36]	@ 0x24
 8012fda:	626f      	str	r7, [r5, #36]	@ 0x24
 8012fdc:	b120      	cbz	r0, 8012fe8 <rcl_wait_set_fini+0xec>
 8012fde:	9101      	str	r1, [sp, #4]
 8012fe0:	47c0      	blx	r8
 8012fe2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012fe4:	9901      	ldr	r1, [sp, #4]
 8012fe6:	6227      	str	r7, [r4, #32]
 8012fe8:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8012fea:	b120      	cbz	r0, 8012ff6 <rcl_wait_set_fini+0xfa>
 8012fec:	47c0      	blx	r8
 8012fee:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8012ff6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8012ff8:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8012ffc:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012ffe:	2700      	movs	r7, #0
 8013000:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8013002:	632f      	str	r7, [r5, #48]	@ 0x30
 8013004:	b120      	cbz	r0, 8013010 <rcl_wait_set_fini+0x114>
 8013006:	9101      	str	r1, [sp, #4]
 8013008:	47c0      	blx	r8
 801300a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801300c:	9901      	ldr	r1, [sp, #4]
 801300e:	62a7      	str	r7, [r4, #40]	@ 0x28
 8013010:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8013012:	b120      	cbz	r0, 801301e <rcl_wait_set_fini+0x122>
 8013014:	47c0      	blx	r8
 8013016:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013018:	2300      	movs	r3, #0
 801301a:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 801301e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8013020:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013022:	4628      	mov	r0, r5
 8013024:	4798      	blx	r3
 8013026:	2300      	movs	r3, #0
 8013028:	6323      	str	r3, [r4, #48]	@ 0x30
 801302a:	4630      	mov	r0, r6
 801302c:	b002      	add	sp, #8
 801302e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013032:	260b      	movs	r6, #11
 8013034:	4630      	mov	r0, r6
 8013036:	b002      	add	sp, #8
 8013038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801303c <rcl_wait_set_add_subscription>:
 801303c:	b318      	cbz	r0, 8013086 <rcl_wait_set_add_subscription+0x4a>
 801303e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013040:	b570      	push	{r4, r5, r6, lr}
 8013042:	4604      	mov	r4, r0
 8013044:	b30b      	cbz	r3, 801308a <rcl_wait_set_add_subscription+0x4e>
 8013046:	b319      	cbz	r1, 8013090 <rcl_wait_set_add_subscription+0x54>
 8013048:	681d      	ldr	r5, [r3, #0]
 801304a:	6840      	ldr	r0, [r0, #4]
 801304c:	4285      	cmp	r5, r0
 801304e:	d217      	bcs.n	8013080 <rcl_wait_set_add_subscription+0x44>
 8013050:	6820      	ldr	r0, [r4, #0]
 8013052:	1c6e      	adds	r6, r5, #1
 8013054:	601e      	str	r6, [r3, #0]
 8013056:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801305a:	b102      	cbz	r2, 801305e <rcl_wait_set_add_subscription+0x22>
 801305c:	6015      	str	r5, [r2, #0]
 801305e:	4608      	mov	r0, r1
 8013060:	f7ff fb0a 	bl	8012678 <rcl_subscription_get_rmw_handle>
 8013064:	b150      	cbz	r0, 801307c <rcl_wait_set_add_subscription+0x40>
 8013066:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013068:	6842      	ldr	r2, [r0, #4]
 801306a:	689b      	ldr	r3, [r3, #8]
 801306c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013070:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013072:	6853      	ldr	r3, [r2, #4]
 8013074:	3301      	adds	r3, #1
 8013076:	2000      	movs	r0, #0
 8013078:	6053      	str	r3, [r2, #4]
 801307a:	bd70      	pop	{r4, r5, r6, pc}
 801307c:	2001      	movs	r0, #1
 801307e:	bd70      	pop	{r4, r5, r6, pc}
 8013080:	f240 3086 	movw	r0, #902	@ 0x386
 8013084:	bd70      	pop	{r4, r5, r6, pc}
 8013086:	200b      	movs	r0, #11
 8013088:	4770      	bx	lr
 801308a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801308e:	bd70      	pop	{r4, r5, r6, pc}
 8013090:	200b      	movs	r0, #11
 8013092:	bd70      	pop	{r4, r5, r6, pc}

08013094 <rcl_wait_set_clear>:
 8013094:	2800      	cmp	r0, #0
 8013096:	d073      	beq.n	8013180 <rcl_wait_set_clear+0xec>
 8013098:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801309a:	b510      	push	{r4, lr}
 801309c:	4604      	mov	r4, r0
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d070      	beq.n	8013184 <rcl_wait_set_clear+0xf0>
 80130a2:	6800      	ldr	r0, [r0, #0]
 80130a4:	b138      	cbz	r0, 80130b6 <rcl_wait_set_clear+0x22>
 80130a6:	6862      	ldr	r2, [r4, #4]
 80130a8:	2100      	movs	r1, #0
 80130aa:	0092      	lsls	r2, r2, #2
 80130ac:	f004 fb2e 	bl	801770c <memset>
 80130b0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80130b2:	2200      	movs	r2, #0
 80130b4:	601a      	str	r2, [r3, #0]
 80130b6:	68a0      	ldr	r0, [r4, #8]
 80130b8:	b138      	cbz	r0, 80130ca <rcl_wait_set_clear+0x36>
 80130ba:	68e2      	ldr	r2, [r4, #12]
 80130bc:	2100      	movs	r1, #0
 80130be:	0092      	lsls	r2, r2, #2
 80130c0:	f004 fb24 	bl	801770c <memset>
 80130c4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80130c6:	2200      	movs	r2, #0
 80130c8:	60da      	str	r2, [r3, #12]
 80130ca:	69a0      	ldr	r0, [r4, #24]
 80130cc:	b138      	cbz	r0, 80130de <rcl_wait_set_clear+0x4a>
 80130ce:	69e2      	ldr	r2, [r4, #28]
 80130d0:	2100      	movs	r1, #0
 80130d2:	0092      	lsls	r2, r2, #2
 80130d4:	f004 fb1a 	bl	801770c <memset>
 80130d8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80130da:	2200      	movs	r2, #0
 80130dc:	619a      	str	r2, [r3, #24]
 80130de:	6a20      	ldr	r0, [r4, #32]
 80130e0:	b138      	cbz	r0, 80130f2 <rcl_wait_set_clear+0x5e>
 80130e2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80130e4:	2100      	movs	r1, #0
 80130e6:	0092      	lsls	r2, r2, #2
 80130e8:	f004 fb10 	bl	801770c <memset>
 80130ec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80130ee:	2200      	movs	r2, #0
 80130f0:	625a      	str	r2, [r3, #36]	@ 0x24
 80130f2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80130f4:	b138      	cbz	r0, 8013106 <rcl_wait_set_clear+0x72>
 80130f6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80130f8:	2100      	movs	r1, #0
 80130fa:	0092      	lsls	r2, r2, #2
 80130fc:	f004 fb06 	bl	801770c <memset>
 8013100:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013102:	2200      	movs	r2, #0
 8013104:	631a      	str	r2, [r3, #48]	@ 0x30
 8013106:	6920      	ldr	r0, [r4, #16]
 8013108:	b138      	cbz	r0, 801311a <rcl_wait_set_clear+0x86>
 801310a:	6962      	ldr	r2, [r4, #20]
 801310c:	2100      	movs	r1, #0
 801310e:	0092      	lsls	r2, r2, #2
 8013110:	f004 fafc 	bl	801770c <memset>
 8013114:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013116:	2200      	movs	r2, #0
 8013118:	641a      	str	r2, [r3, #64]	@ 0x40
 801311a:	6898      	ldr	r0, [r3, #8]
 801311c:	b138      	cbz	r0, 801312e <rcl_wait_set_clear+0x9a>
 801311e:	685a      	ldr	r2, [r3, #4]
 8013120:	2100      	movs	r1, #0
 8013122:	0092      	lsls	r2, r2, #2
 8013124:	f004 faf2 	bl	801770c <memset>
 8013128:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801312a:	2200      	movs	r2, #0
 801312c:	605a      	str	r2, [r3, #4]
 801312e:	6958      	ldr	r0, [r3, #20]
 8013130:	b138      	cbz	r0, 8013142 <rcl_wait_set_clear+0xae>
 8013132:	691a      	ldr	r2, [r3, #16]
 8013134:	2100      	movs	r1, #0
 8013136:	0092      	lsls	r2, r2, #2
 8013138:	f004 fae8 	bl	801770c <memset>
 801313c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801313e:	2200      	movs	r2, #0
 8013140:	611a      	str	r2, [r3, #16]
 8013142:	6a18      	ldr	r0, [r3, #32]
 8013144:	b138      	cbz	r0, 8013156 <rcl_wait_set_clear+0xc2>
 8013146:	69da      	ldr	r2, [r3, #28]
 8013148:	2100      	movs	r1, #0
 801314a:	0092      	lsls	r2, r2, #2
 801314c:	f004 fade 	bl	801770c <memset>
 8013150:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013152:	2200      	movs	r2, #0
 8013154:	61da      	str	r2, [r3, #28]
 8013156:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8013158:	b138      	cbz	r0, 801316a <rcl_wait_set_clear+0xd6>
 801315a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801315c:	2100      	movs	r1, #0
 801315e:	0092      	lsls	r2, r2, #2
 8013160:	f004 fad4 	bl	801770c <memset>
 8013164:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013166:	2200      	movs	r2, #0
 8013168:	629a      	str	r2, [r3, #40]	@ 0x28
 801316a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801316c:	b138      	cbz	r0, 801317e <rcl_wait_set_clear+0xea>
 801316e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013170:	2100      	movs	r1, #0
 8013172:	0092      	lsls	r2, r2, #2
 8013174:	f004 faca 	bl	801770c <memset>
 8013178:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801317a:	2000      	movs	r0, #0
 801317c:	6358      	str	r0, [r3, #52]	@ 0x34
 801317e:	bd10      	pop	{r4, pc}
 8013180:	200b      	movs	r0, #11
 8013182:	4770      	bx	lr
 8013184:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013188:	bd10      	pop	{r4, pc}
 801318a:	bf00      	nop

0801318c <rcl_wait_set_resize>:
 801318c:	2800      	cmp	r0, #0
 801318e:	f000 8185 	beq.w	801349c <rcl_wait_set_resize+0x310>
 8013192:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013196:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8013198:	b083      	sub	sp, #12
 801319a:	4605      	mov	r5, r0
 801319c:	2c00      	cmp	r4, #0
 801319e:	f000 817f 	beq.w	80134a0 <rcl_wait_set_resize+0x314>
 80131a2:	f04f 0900 	mov.w	r9, #0
 80131a6:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 80131aa:	461f      	mov	r7, r3
 80131ac:	4688      	mov	r8, r1
 80131ae:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 80131b2:	4616      	mov	r6, r2
 80131b4:	f8c0 9004 	str.w	r9, [r0, #4]
 80131b8:	f8c4 9000 	str.w	r9, [r4]
 80131bc:	2900      	cmp	r1, #0
 80131be:	f000 80bd 	beq.w	801333c <rcl_wait_set_resize+0x1b0>
 80131c2:	008c      	lsls	r4, r1, #2
 80131c4:	6800      	ldr	r0, [r0, #0]
 80131c6:	9301      	str	r3, [sp, #4]
 80131c8:	4652      	mov	r2, sl
 80131ca:	4621      	mov	r1, r4
 80131cc:	4798      	blx	r3
 80131ce:	9b01      	ldr	r3, [sp, #4]
 80131d0:	6028      	str	r0, [r5, #0]
 80131d2:	2800      	cmp	r0, #0
 80131d4:	f000 80cb 	beq.w	801336e <rcl_wait_set_resize+0x1e2>
 80131d8:	4622      	mov	r2, r4
 80131da:	4649      	mov	r1, r9
 80131dc:	9301      	str	r3, [sp, #4]
 80131de:	f004 fa95 	bl	801770c <memset>
 80131e2:	f8c5 8004 	str.w	r8, [r5, #4]
 80131e6:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 80131ea:	9b01      	ldr	r3, [sp, #4]
 80131ec:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80131f0:	f8c8 9004 	str.w	r9, [r8, #4]
 80131f4:	4652      	mov	r2, sl
 80131f6:	4621      	mov	r1, r4
 80131f8:	4798      	blx	r3
 80131fa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80131fc:	f8c8 0008 	str.w	r0, [r8, #8]
 8013200:	689b      	ldr	r3, [r3, #8]
 8013202:	2b00      	cmp	r3, #0
 8013204:	f000 80ac 	beq.w	8013360 <rcl_wait_set_resize+0x1d4>
 8013208:	4622      	mov	r2, r4
 801320a:	4649      	mov	r1, r9
 801320c:	4618      	mov	r0, r3
 801320e:	f004 fa7d 	bl	801770c <memset>
 8013212:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013214:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013218:	f04f 0800 	mov.w	r8, #0
 801321c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8013220:	f8c5 800c 	str.w	r8, [r5, #12]
 8013224:	f8c4 800c 	str.w	r8, [r4, #12]
 8013228:	2e00      	cmp	r6, #0
 801322a:	f040 80a4 	bne.w	8013376 <rcl_wait_set_resize+0x1ea>
 801322e:	68a8      	ldr	r0, [r5, #8]
 8013230:	b128      	cbz	r0, 801323e <rcl_wait_set_resize+0xb2>
 8013232:	4649      	mov	r1, r9
 8013234:	4790      	blx	r2
 8013236:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013238:	60ae      	str	r6, [r5, #8]
 801323a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801323e:	f04f 0800 	mov.w	r8, #0
 8013242:	19f6      	adds	r6, r6, r7
 8013244:	f8c4 8010 	str.w	r8, [r4, #16]
 8013248:	f040 80ac 	bne.w	80133a4 <rcl_wait_set_resize+0x218>
 801324c:	6960      	ldr	r0, [r4, #20]
 801324e:	b130      	cbz	r0, 801325e <rcl_wait_set_resize+0xd2>
 8013250:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8013252:	4649      	mov	r1, r9
 8013254:	4798      	blx	r3
 8013256:	6166      	str	r6, [r4, #20]
 8013258:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801325a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801325e:	2600      	movs	r6, #0
 8013260:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8013264:	616e      	str	r6, [r5, #20]
 8013266:	6426      	str	r6, [r4, #64]	@ 0x40
 8013268:	2f00      	cmp	r7, #0
 801326a:	f040 80ad 	bne.w	80133c8 <rcl_wait_set_resize+0x23c>
 801326e:	6928      	ldr	r0, [r5, #16]
 8013270:	b138      	cbz	r0, 8013282 <rcl_wait_set_resize+0xf6>
 8013272:	4649      	mov	r1, r9
 8013274:	47d0      	blx	sl
 8013276:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013278:	612f      	str	r7, [r5, #16]
 801327a:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801327e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013282:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013284:	2600      	movs	r6, #0
 8013286:	61ee      	str	r6, [r5, #28]
 8013288:	61a6      	str	r6, [r4, #24]
 801328a:	2b00      	cmp	r3, #0
 801328c:	f040 80af 	bne.w	80133ee <rcl_wait_set_resize+0x262>
 8013290:	69a8      	ldr	r0, [r5, #24]
 8013292:	b120      	cbz	r0, 801329e <rcl_wait_set_resize+0x112>
 8013294:	4649      	mov	r1, r9
 8013296:	47d0      	blx	sl
 8013298:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801329a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801329c:	61ab      	str	r3, [r5, #24]
 801329e:	6a20      	ldr	r0, [r4, #32]
 80132a0:	b128      	cbz	r0, 80132ae <rcl_wait_set_resize+0x122>
 80132a2:	4649      	mov	r1, r9
 80132a4:	47d0      	blx	sl
 80132a6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80132a8:	2300      	movs	r3, #0
 80132aa:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80132ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80132b0:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80132b2:	2600      	movs	r6, #0
 80132b4:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80132b8:	626e      	str	r6, [r5, #36]	@ 0x24
 80132ba:	6266      	str	r6, [r4, #36]	@ 0x24
 80132bc:	2b00      	cmp	r3, #0
 80132be:	f000 80b6 	beq.w	801342e <rcl_wait_set_resize+0x2a2>
 80132c2:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80132c6:	6a28      	ldr	r0, [r5, #32]
 80132c8:	463a      	mov	r2, r7
 80132ca:	4651      	mov	r1, sl
 80132cc:	47c8      	blx	r9
 80132ce:	6228      	str	r0, [r5, #32]
 80132d0:	2800      	cmp	r0, #0
 80132d2:	d04c      	beq.n	801336e <rcl_wait_set_resize+0x1e2>
 80132d4:	4652      	mov	r2, sl
 80132d6:	4631      	mov	r1, r6
 80132d8:	f004 fa18 	bl	801770c <memset>
 80132dc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80132de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80132e0:	626b      	str	r3, [r5, #36]	@ 0x24
 80132e2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80132e4:	62a6      	str	r6, [r4, #40]	@ 0x28
 80132e6:	463a      	mov	r2, r7
 80132e8:	4651      	mov	r1, sl
 80132ea:	47c8      	blx	r9
 80132ec:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80132ee:	62e0      	str	r0, [r4, #44]	@ 0x2c
 80132f0:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80132f2:	2c00      	cmp	r4, #0
 80132f4:	f000 80f0 	beq.w	80134d8 <rcl_wait_set_resize+0x34c>
 80132f8:	4620      	mov	r0, r4
 80132fa:	4652      	mov	r2, sl
 80132fc:	4631      	mov	r1, r6
 80132fe:	f004 fa05 	bl	801770c <memset>
 8013302:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013304:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013306:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8013308:	2600      	movs	r6, #0
 801330a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801330e:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8013310:	6326      	str	r6, [r4, #48]	@ 0x30
 8013312:	2b00      	cmp	r3, #0
 8013314:	f040 809d 	bne.w	8013452 <rcl_wait_set_resize+0x2c6>
 8013318:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801331a:	b120      	cbz	r0, 8013326 <rcl_wait_set_resize+0x19a>
 801331c:	4639      	mov	r1, r7
 801331e:	47c0      	blx	r8
 8013320:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013322:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013324:	62ab      	str	r3, [r5, #40]	@ 0x28
 8013326:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8013328:	b310      	cbz	r0, 8013370 <rcl_wait_set_resize+0x1e4>
 801332a:	4639      	mov	r1, r7
 801332c:	47c0      	blx	r8
 801332e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013330:	2000      	movs	r0, #0
 8013332:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8013336:	b003      	add	sp, #12
 8013338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801333c:	6800      	ldr	r0, [r0, #0]
 801333e:	b120      	cbz	r0, 801334a <rcl_wait_set_resize+0x1be>
 8013340:	4651      	mov	r1, sl
 8013342:	47d8      	blx	fp
 8013344:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013346:	f8c5 8000 	str.w	r8, [r5]
 801334a:	68a0      	ldr	r0, [r4, #8]
 801334c:	2800      	cmp	r0, #0
 801334e:	f43f af61 	beq.w	8013214 <rcl_wait_set_resize+0x88>
 8013352:	4651      	mov	r1, sl
 8013354:	47d8      	blx	fp
 8013356:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013358:	2300      	movs	r3, #0
 801335a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801335e:	e759      	b.n	8013214 <rcl_wait_set_resize+0x88>
 8013360:	6828      	ldr	r0, [r5, #0]
 8013362:	9301      	str	r3, [sp, #4]
 8013364:	4651      	mov	r1, sl
 8013366:	47d8      	blx	fp
 8013368:	9b01      	ldr	r3, [sp, #4]
 801336a:	e9c5 3300 	strd	r3, r3, [r5]
 801336e:	200a      	movs	r0, #10
 8013370:	b003      	add	sp, #12
 8013372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013376:	00b4      	lsls	r4, r6, #2
 8013378:	68a8      	ldr	r0, [r5, #8]
 801337a:	464a      	mov	r2, r9
 801337c:	4621      	mov	r1, r4
 801337e:	4798      	blx	r3
 8013380:	60a8      	str	r0, [r5, #8]
 8013382:	2800      	cmp	r0, #0
 8013384:	d0f3      	beq.n	801336e <rcl_wait_set_resize+0x1e2>
 8013386:	4622      	mov	r2, r4
 8013388:	4641      	mov	r1, r8
 801338a:	f004 f9bf 	bl	801770c <memset>
 801338e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013390:	60ee      	str	r6, [r5, #12]
 8013392:	f04f 0800 	mov.w	r8, #0
 8013396:	19f6      	adds	r6, r6, r7
 8013398:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801339c:	f8c4 8010 	str.w	r8, [r4, #16]
 80133a0:	f43f af54 	beq.w	801324c <rcl_wait_set_resize+0xc0>
 80133a4:	00b6      	lsls	r6, r6, #2
 80133a6:	464a      	mov	r2, r9
 80133a8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80133aa:	6960      	ldr	r0, [r4, #20]
 80133ac:	4631      	mov	r1, r6
 80133ae:	4798      	blx	r3
 80133b0:	4681      	mov	r9, r0
 80133b2:	6160      	str	r0, [r4, #20]
 80133b4:	2800      	cmp	r0, #0
 80133b6:	d076      	beq.n	80134a6 <rcl_wait_set_resize+0x31a>
 80133b8:	4632      	mov	r2, r6
 80133ba:	4641      	mov	r1, r8
 80133bc:	f004 f9a6 	bl	801770c <memset>
 80133c0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80133c2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80133c6:	e74a      	b.n	801325e <rcl_wait_set_resize+0xd2>
 80133c8:	00bc      	lsls	r4, r7, #2
 80133ca:	6928      	ldr	r0, [r5, #16]
 80133cc:	464a      	mov	r2, r9
 80133ce:	4621      	mov	r1, r4
 80133d0:	47c0      	blx	r8
 80133d2:	6128      	str	r0, [r5, #16]
 80133d4:	2800      	cmp	r0, #0
 80133d6:	d0ca      	beq.n	801336e <rcl_wait_set_resize+0x1e2>
 80133d8:	4622      	mov	r2, r4
 80133da:	4631      	mov	r1, r6
 80133dc:	f004 f996 	bl	801770c <memset>
 80133e0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80133e2:	616f      	str	r7, [r5, #20]
 80133e4:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80133e8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80133ec:	e749      	b.n	8013282 <rcl_wait_set_resize+0xf6>
 80133ee:	009c      	lsls	r4, r3, #2
 80133f0:	69a8      	ldr	r0, [r5, #24]
 80133f2:	464a      	mov	r2, r9
 80133f4:	4621      	mov	r1, r4
 80133f6:	47c0      	blx	r8
 80133f8:	61a8      	str	r0, [r5, #24]
 80133fa:	2800      	cmp	r0, #0
 80133fc:	d0b7      	beq.n	801336e <rcl_wait_set_resize+0x1e2>
 80133fe:	4622      	mov	r2, r4
 8013400:	4631      	mov	r1, r6
 8013402:	f004 f983 	bl	801770c <memset>
 8013406:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8013408:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801340a:	61eb      	str	r3, [r5, #28]
 801340c:	6a38      	ldr	r0, [r7, #32]
 801340e:	61fe      	str	r6, [r7, #28]
 8013410:	464a      	mov	r2, r9
 8013412:	4621      	mov	r1, r4
 8013414:	47c0      	blx	r8
 8013416:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013418:	6238      	str	r0, [r7, #32]
 801341a:	6a1f      	ldr	r7, [r3, #32]
 801341c:	2f00      	cmp	r7, #0
 801341e:	d054      	beq.n	80134ca <rcl_wait_set_resize+0x33e>
 8013420:	4622      	mov	r2, r4
 8013422:	4631      	mov	r1, r6
 8013424:	4638      	mov	r0, r7
 8013426:	f004 f971 	bl	801770c <memset>
 801342a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801342c:	e73f      	b.n	80132ae <rcl_wait_set_resize+0x122>
 801342e:	6a28      	ldr	r0, [r5, #32]
 8013430:	b120      	cbz	r0, 801343c <rcl_wait_set_resize+0x2b0>
 8013432:	4639      	mov	r1, r7
 8013434:	47c0      	blx	r8
 8013436:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013438:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801343a:	622b      	str	r3, [r5, #32]
 801343c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801343e:	2800      	cmp	r0, #0
 8013440:	f43f af60 	beq.w	8013304 <rcl_wait_set_resize+0x178>
 8013444:	4639      	mov	r1, r7
 8013446:	47c0      	blx	r8
 8013448:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801344a:	2300      	movs	r3, #0
 801344c:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8013450:	e758      	b.n	8013304 <rcl_wait_set_resize+0x178>
 8013452:	009c      	lsls	r4, r3, #2
 8013454:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8013456:	463a      	mov	r2, r7
 8013458:	4621      	mov	r1, r4
 801345a:	47c8      	blx	r9
 801345c:	62a8      	str	r0, [r5, #40]	@ 0x28
 801345e:	2800      	cmp	r0, #0
 8013460:	d085      	beq.n	801336e <rcl_wait_set_resize+0x1e2>
 8013462:	4622      	mov	r2, r4
 8013464:	4631      	mov	r1, r6
 8013466:	f004 f951 	bl	801770c <memset>
 801346a:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801346e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013470:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8013472:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8013476:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 801347a:	463a      	mov	r2, r7
 801347c:	4621      	mov	r1, r4
 801347e:	47c8      	blx	r9
 8013480:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013482:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8013486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013488:	b36b      	cbz	r3, 80134e6 <rcl_wait_set_resize+0x35a>
 801348a:	4622      	mov	r2, r4
 801348c:	4631      	mov	r1, r6
 801348e:	4618      	mov	r0, r3
 8013490:	f004 f93c 	bl	801770c <memset>
 8013494:	4630      	mov	r0, r6
 8013496:	b003      	add	sp, #12
 8013498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801349c:	200b      	movs	r0, #11
 801349e:	4770      	bx	lr
 80134a0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80134a4:	e764      	b.n	8013370 <rcl_wait_set_resize+0x1e4>
 80134a6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80134a8:	68a8      	ldr	r0, [r5, #8]
 80134aa:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80134ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80134ae:	4798      	blx	r3
 80134b0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80134b2:	6928      	ldr	r0, [r5, #16]
 80134b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80134b6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80134b8:	f8c5 900c 	str.w	r9, [r5, #12]
 80134bc:	f8c5 9008 	str.w	r9, [r5, #8]
 80134c0:	4790      	blx	r2
 80134c2:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80134c6:	200a      	movs	r0, #10
 80134c8:	e752      	b.n	8013370 <rcl_wait_set_resize+0x1e4>
 80134ca:	69a8      	ldr	r0, [r5, #24]
 80134cc:	4649      	mov	r1, r9
 80134ce:	47d0      	blx	sl
 80134d0:	e9c5 7706 	strd	r7, r7, [r5, #24]
 80134d4:	200a      	movs	r0, #10
 80134d6:	e74b      	b.n	8013370 <rcl_wait_set_resize+0x1e4>
 80134d8:	6a28      	ldr	r0, [r5, #32]
 80134da:	4639      	mov	r1, r7
 80134dc:	47c0      	blx	r8
 80134de:	e9c5 4408 	strd	r4, r4, [r5, #32]
 80134e2:	200a      	movs	r0, #10
 80134e4:	e744      	b.n	8013370 <rcl_wait_set_resize+0x1e4>
 80134e6:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80134e8:	9301      	str	r3, [sp, #4]
 80134ea:	4639      	mov	r1, r7
 80134ec:	47c0      	blx	r8
 80134ee:	9b01      	ldr	r3, [sp, #4]
 80134f0:	200a      	movs	r0, #10
 80134f2:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80134f6:	e73b      	b.n	8013370 <rcl_wait_set_resize+0x1e4>

080134f8 <rcl_wait_set_init>:
 80134f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80134fc:	b084      	sub	sp, #16
 80134fe:	4604      	mov	r4, r0
 8013500:	a810      	add	r0, sp, #64	@ 0x40
 8013502:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8013506:	460f      	mov	r7, r1
 8013508:	4690      	mov	r8, r2
 801350a:	4699      	mov	r9, r3
 801350c:	f7f9 fc7e 	bl	800ce0c <rcutils_allocator_is_valid>
 8013510:	2800      	cmp	r0, #0
 8013512:	d06b      	beq.n	80135ec <rcl_wait_set_init+0xf4>
 8013514:	2c00      	cmp	r4, #0
 8013516:	d069      	beq.n	80135ec <rcl_wait_set_init+0xf4>
 8013518:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801351a:	b125      	cbz	r5, 8013526 <rcl_wait_set_init+0x2e>
 801351c:	2564      	movs	r5, #100	@ 0x64
 801351e:	4628      	mov	r0, r5
 8013520:	b004      	add	sp, #16
 8013522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013526:	f1ba 0f00 	cmp.w	sl, #0
 801352a:	d05f      	beq.n	80135ec <rcl_wait_set_init+0xf4>
 801352c:	4650      	mov	r0, sl
 801352e:	f7fe fb0f 	bl	8011b50 <rcl_context_is_valid>
 8013532:	2800      	cmp	r0, #0
 8013534:	d067      	beq.n	8013606 <rcl_wait_set_init+0x10e>
 8013536:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013538:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801353a:	205c      	movs	r0, #92	@ 0x5c
 801353c:	4798      	blx	r3
 801353e:	6320      	str	r0, [r4, #48]	@ 0x30
 8013540:	2800      	cmp	r0, #0
 8013542:	d062      	beq.n	801360a <rcl_wait_set_init+0x112>
 8013544:	4629      	mov	r1, r5
 8013546:	225c      	movs	r2, #92	@ 0x5c
 8013548:	f004 f8e0 	bl	801770c <memset>
 801354c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8013550:	eb03 0e02 	add.w	lr, r3, r2
 8013554:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013556:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8013558:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 801355c:	449e      	add	lr, r3
 801355e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013562:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8013566:	e9c6 5504 	strd	r5, r5, [r6, #16]
 801356a:	e9c6 5507 	strd	r5, r5, [r6, #28]
 801356e:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8013572:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8013576:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 801357a:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 801357e:	f8da a000 	ldr.w	sl, [sl]
 8013582:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013584:	44c6      	add	lr, r8
 8013586:	f8dc 3000 	ldr.w	r3, [ip]
 801358a:	602b      	str	r3, [r5, #0]
 801358c:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8013590:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8013594:	f002 f9fe 	bl	8015994 <rmw_create_wait_set>
 8013598:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801359a:	63f0      	str	r0, [r6, #60]	@ 0x3c
 801359c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801359e:	b350      	cbz	r0, 80135f6 <rcl_wait_set_init+0xfe>
 80135a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80135a2:	9302      	str	r3, [sp, #8]
 80135a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80135a6:	9301      	str	r3, [sp, #4]
 80135a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80135aa:	9300      	str	r3, [sp, #0]
 80135ac:	4642      	mov	r2, r8
 80135ae:	464b      	mov	r3, r9
 80135b0:	4639      	mov	r1, r7
 80135b2:	4620      	mov	r0, r4
 80135b4:	f7ff fdea 	bl	801318c <rcl_wait_set_resize>
 80135b8:	4605      	mov	r5, r0
 80135ba:	2800      	cmp	r0, #0
 80135bc:	d0af      	beq.n	801351e <rcl_wait_set_init+0x26>
 80135be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80135c0:	bb2b      	cbnz	r3, 801360e <rcl_wait_set_init+0x116>
 80135c2:	2600      	movs	r6, #0
 80135c4:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80135c8:	9600      	str	r6, [sp, #0]
 80135ca:	4633      	mov	r3, r6
 80135cc:	4632      	mov	r2, r6
 80135ce:	4631      	mov	r1, r6
 80135d0:	4620      	mov	r0, r4
 80135d2:	f7ff fddb 	bl	801318c <rcl_wait_set_resize>
 80135d6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80135d8:	2800      	cmp	r0, #0
 80135da:	d0a0      	beq.n	801351e <rcl_wait_set_init+0x26>
 80135dc:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80135de:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80135e0:	4798      	blx	r3
 80135e2:	4628      	mov	r0, r5
 80135e4:	6326      	str	r6, [r4, #48]	@ 0x30
 80135e6:	b004      	add	sp, #16
 80135e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135ec:	250b      	movs	r5, #11
 80135ee:	4628      	mov	r0, r5
 80135f0:	b004      	add	sp, #16
 80135f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135f6:	2501      	movs	r5, #1
 80135f8:	f002 f9d6 	bl	80159a8 <rmw_destroy_wait_set>
 80135fc:	2800      	cmp	r0, #0
 80135fe:	bf18      	it	ne
 8013600:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8013604:	e7dd      	b.n	80135c2 <rcl_wait_set_init+0xca>
 8013606:	2565      	movs	r5, #101	@ 0x65
 8013608:	e789      	b.n	801351e <rcl_wait_set_init+0x26>
 801360a:	250a      	movs	r5, #10
 801360c:	e787      	b.n	801351e <rcl_wait_set_init+0x26>
 801360e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8013610:	e7f2      	b.n	80135f8 <rcl_wait_set_init+0x100>
 8013612:	bf00      	nop

08013614 <rcl_wait_set_add_guard_condition>:
 8013614:	b318      	cbz	r0, 801365e <rcl_wait_set_add_guard_condition+0x4a>
 8013616:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013618:	b570      	push	{r4, r5, r6, lr}
 801361a:	4604      	mov	r4, r0
 801361c:	b30b      	cbz	r3, 8013662 <rcl_wait_set_add_guard_condition+0x4e>
 801361e:	b319      	cbz	r1, 8013668 <rcl_wait_set_add_guard_condition+0x54>
 8013620:	68dd      	ldr	r5, [r3, #12]
 8013622:	68c0      	ldr	r0, [r0, #12]
 8013624:	4285      	cmp	r5, r0
 8013626:	d217      	bcs.n	8013658 <rcl_wait_set_add_guard_condition+0x44>
 8013628:	68a0      	ldr	r0, [r4, #8]
 801362a:	1c6e      	adds	r6, r5, #1
 801362c:	60de      	str	r6, [r3, #12]
 801362e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013632:	b102      	cbz	r2, 8013636 <rcl_wait_set_add_guard_condition+0x22>
 8013634:	6015      	str	r5, [r2, #0]
 8013636:	4608      	mov	r0, r1
 8013638:	f003 fb6e 	bl	8016d18 <rcl_guard_condition_get_rmw_handle>
 801363c:	b150      	cbz	r0, 8013654 <rcl_wait_set_add_guard_condition+0x40>
 801363e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013640:	6842      	ldr	r2, [r0, #4]
 8013642:	695b      	ldr	r3, [r3, #20]
 8013644:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013648:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801364a:	6913      	ldr	r3, [r2, #16]
 801364c:	3301      	adds	r3, #1
 801364e:	2000      	movs	r0, #0
 8013650:	6113      	str	r3, [r2, #16]
 8013652:	bd70      	pop	{r4, r5, r6, pc}
 8013654:	2001      	movs	r0, #1
 8013656:	bd70      	pop	{r4, r5, r6, pc}
 8013658:	f240 3086 	movw	r0, #902	@ 0x386
 801365c:	bd70      	pop	{r4, r5, r6, pc}
 801365e:	200b      	movs	r0, #11
 8013660:	4770      	bx	lr
 8013662:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013666:	bd70      	pop	{r4, r5, r6, pc}
 8013668:	200b      	movs	r0, #11
 801366a:	bd70      	pop	{r4, r5, r6, pc}

0801366c <rcl_wait_set_add_timer>:
 801366c:	b328      	cbz	r0, 80136ba <rcl_wait_set_add_timer+0x4e>
 801366e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013670:	b570      	push	{r4, r5, r6, lr}
 8013672:	4604      	mov	r4, r0
 8013674:	b31b      	cbz	r3, 80136be <rcl_wait_set_add_timer+0x52>
 8013676:	b329      	cbz	r1, 80136c4 <rcl_wait_set_add_timer+0x58>
 8013678:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801367a:	6965      	ldr	r5, [r4, #20]
 801367c:	42a8      	cmp	r0, r5
 801367e:	d219      	bcs.n	80136b4 <rcl_wait_set_add_timer+0x48>
 8013680:	6925      	ldr	r5, [r4, #16]
 8013682:	1c46      	adds	r6, r0, #1
 8013684:	641e      	str	r6, [r3, #64]	@ 0x40
 8013686:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 801368a:	b102      	cbz	r2, 801368e <rcl_wait_set_add_timer+0x22>
 801368c:	6010      	str	r0, [r2, #0]
 801368e:	4608      	mov	r0, r1
 8013690:	f7ff fba6 	bl	8012de0 <rcl_timer_get_guard_condition>
 8013694:	b168      	cbz	r0, 80136b2 <rcl_wait_set_add_timer+0x46>
 8013696:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013698:	68e3      	ldr	r3, [r4, #12]
 801369a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 801369c:	3b01      	subs	r3, #1
 801369e:	441d      	add	r5, r3
 80136a0:	f003 fb3a 	bl	8016d18 <rcl_guard_condition_get_rmw_handle>
 80136a4:	b180      	cbz	r0, 80136c8 <rcl_wait_set_add_timer+0x5c>
 80136a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80136a8:	6842      	ldr	r2, [r0, #4]
 80136aa:	695b      	ldr	r3, [r3, #20]
 80136ac:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80136b0:	2000      	movs	r0, #0
 80136b2:	bd70      	pop	{r4, r5, r6, pc}
 80136b4:	f240 3086 	movw	r0, #902	@ 0x386
 80136b8:	bd70      	pop	{r4, r5, r6, pc}
 80136ba:	200b      	movs	r0, #11
 80136bc:	4770      	bx	lr
 80136be:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80136c2:	bd70      	pop	{r4, r5, r6, pc}
 80136c4:	200b      	movs	r0, #11
 80136c6:	bd70      	pop	{r4, r5, r6, pc}
 80136c8:	2001      	movs	r0, #1
 80136ca:	bd70      	pop	{r4, r5, r6, pc}

080136cc <rcl_wait_set_add_client>:
 80136cc:	b318      	cbz	r0, 8013716 <rcl_wait_set_add_client+0x4a>
 80136ce:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80136d0:	b570      	push	{r4, r5, r6, lr}
 80136d2:	4604      	mov	r4, r0
 80136d4:	b30b      	cbz	r3, 801371a <rcl_wait_set_add_client+0x4e>
 80136d6:	b319      	cbz	r1, 8013720 <rcl_wait_set_add_client+0x54>
 80136d8:	699d      	ldr	r5, [r3, #24]
 80136da:	69c0      	ldr	r0, [r0, #28]
 80136dc:	4285      	cmp	r5, r0
 80136de:	d217      	bcs.n	8013710 <rcl_wait_set_add_client+0x44>
 80136e0:	69a0      	ldr	r0, [r4, #24]
 80136e2:	1c6e      	adds	r6, r5, #1
 80136e4:	619e      	str	r6, [r3, #24]
 80136e6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80136ea:	b102      	cbz	r2, 80136ee <rcl_wait_set_add_client+0x22>
 80136ec:	6015      	str	r5, [r2, #0]
 80136ee:	4608      	mov	r0, r1
 80136f0:	f7fe f982 	bl	80119f8 <rcl_client_get_rmw_handle>
 80136f4:	b150      	cbz	r0, 801370c <rcl_wait_set_add_client+0x40>
 80136f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80136f8:	6842      	ldr	r2, [r0, #4]
 80136fa:	6a1b      	ldr	r3, [r3, #32]
 80136fc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013700:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013702:	69d3      	ldr	r3, [r2, #28]
 8013704:	3301      	adds	r3, #1
 8013706:	2000      	movs	r0, #0
 8013708:	61d3      	str	r3, [r2, #28]
 801370a:	bd70      	pop	{r4, r5, r6, pc}
 801370c:	2001      	movs	r0, #1
 801370e:	bd70      	pop	{r4, r5, r6, pc}
 8013710:	f240 3086 	movw	r0, #902	@ 0x386
 8013714:	bd70      	pop	{r4, r5, r6, pc}
 8013716:	200b      	movs	r0, #11
 8013718:	4770      	bx	lr
 801371a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801371e:	bd70      	pop	{r4, r5, r6, pc}
 8013720:	200b      	movs	r0, #11
 8013722:	bd70      	pop	{r4, r5, r6, pc}

08013724 <rcl_wait_set_add_service>:
 8013724:	b318      	cbz	r0, 801376e <rcl_wait_set_add_service+0x4a>
 8013726:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013728:	b570      	push	{r4, r5, r6, lr}
 801372a:	4604      	mov	r4, r0
 801372c:	b30b      	cbz	r3, 8013772 <rcl_wait_set_add_service+0x4e>
 801372e:	b319      	cbz	r1, 8013778 <rcl_wait_set_add_service+0x54>
 8013730:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8013732:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8013734:	4285      	cmp	r5, r0
 8013736:	d217      	bcs.n	8013768 <rcl_wait_set_add_service+0x44>
 8013738:	6a20      	ldr	r0, [r4, #32]
 801373a:	1c6e      	adds	r6, r5, #1
 801373c:	625e      	str	r6, [r3, #36]	@ 0x24
 801373e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013742:	b102      	cbz	r2, 8013746 <rcl_wait_set_add_service+0x22>
 8013744:	6015      	str	r5, [r2, #0]
 8013746:	4608      	mov	r0, r1
 8013748:	f7fe fed6 	bl	80124f8 <rcl_service_get_rmw_handle>
 801374c:	b150      	cbz	r0, 8013764 <rcl_wait_set_add_service+0x40>
 801374e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013750:	6842      	ldr	r2, [r0, #4]
 8013752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013754:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013758:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801375a:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 801375c:	3301      	adds	r3, #1
 801375e:	2000      	movs	r0, #0
 8013760:	6293      	str	r3, [r2, #40]	@ 0x28
 8013762:	bd70      	pop	{r4, r5, r6, pc}
 8013764:	2001      	movs	r0, #1
 8013766:	bd70      	pop	{r4, r5, r6, pc}
 8013768:	f240 3086 	movw	r0, #902	@ 0x386
 801376c:	bd70      	pop	{r4, r5, r6, pc}
 801376e:	200b      	movs	r0, #11
 8013770:	4770      	bx	lr
 8013772:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013776:	bd70      	pop	{r4, r5, r6, pc}
 8013778:	200b      	movs	r0, #11
 801377a:	bd70      	pop	{r4, r5, r6, pc}
 801377c:	0000      	movs	r0, r0
	...

08013780 <rcl_wait>:
 8013780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013784:	ed2d 8b02 	vpush	{d8}
 8013788:	b08d      	sub	sp, #52	@ 0x34
 801378a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801378e:	2800      	cmp	r0, #0
 8013790:	f000 8143 	beq.w	8013a1a <rcl_wait+0x29a>
 8013794:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8013796:	4605      	mov	r5, r0
 8013798:	2e00      	cmp	r6, #0
 801379a:	f000 8112 	beq.w	80139c2 <rcl_wait+0x242>
 801379e:	6843      	ldr	r3, [r0, #4]
 80137a0:	b983      	cbnz	r3, 80137c4 <rcl_wait+0x44>
 80137a2:	68eb      	ldr	r3, [r5, #12]
 80137a4:	b973      	cbnz	r3, 80137c4 <rcl_wait+0x44>
 80137a6:	696b      	ldr	r3, [r5, #20]
 80137a8:	b963      	cbnz	r3, 80137c4 <rcl_wait+0x44>
 80137aa:	69eb      	ldr	r3, [r5, #28]
 80137ac:	b953      	cbnz	r3, 80137c4 <rcl_wait+0x44>
 80137ae:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80137b0:	b943      	cbnz	r3, 80137c4 <rcl_wait+0x44>
 80137b2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80137b4:	b933      	cbnz	r3, 80137c4 <rcl_wait+0x44>
 80137b6:	f240 3085 	movw	r0, #901	@ 0x385
 80137ba:	b00d      	add	sp, #52	@ 0x34
 80137bc:	ecbd 8b02 	vpop	{d8}
 80137c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137c4:	9b04      	ldr	r3, [sp, #16]
 80137c6:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 80137c8:	2b01      	cmp	r3, #1
 80137ca:	9b05      	ldr	r3, [sp, #20]
 80137cc:	f173 0300 	sbcs.w	r3, r3, #0
 80137d0:	f2c0 80f0 	blt.w	80139b4 <rcl_wait+0x234>
 80137d4:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 80137d8:	4643      	mov	r3, r8
 80137da:	2a00      	cmp	r2, #0
 80137dc:	f000 8133 	beq.w	8013a46 <rcl_wait+0x2c6>
 80137e0:	2400      	movs	r4, #0
 80137e2:	4613      	mov	r3, r2
 80137e4:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8013a58 <rcl_wait+0x2d8>
 80137e8:	46a2      	mov	sl, r4
 80137ea:	46a3      	mov	fp, r4
 80137ec:	f240 3921 	movw	r9, #801	@ 0x321
 80137f0:	4632      	mov	r2, r6
 80137f2:	e014      	b.n	801381e <rcl_wait+0x9e>
 80137f4:	2800      	cmp	r0, #0
 80137f6:	d1e0      	bne.n	80137ba <rcl_wait+0x3a>
 80137f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80137fc:	4542      	cmp	r2, r8
 80137fe:	eb73 0107 	sbcs.w	r1, r3, r7
 8013802:	da03      	bge.n	801380c <rcl_wait+0x8c>
 8013804:	4690      	mov	r8, r2
 8013806:	461f      	mov	r7, r3
 8013808:	f04f 0b01 	mov.w	fp, #1
 801380c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801380e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013810:	3401      	adds	r4, #1
 8013812:	f14a 0a00 	adc.w	sl, sl, #0
 8013816:	429c      	cmp	r4, r3
 8013818:	f17a 0100 	sbcs.w	r1, sl, #0
 801381c:	d228      	bcs.n	8013870 <rcl_wait+0xf0>
 801381e:	6928      	ldr	r0, [r5, #16]
 8013820:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013824:	a908      	add	r1, sp, #32
 8013826:	00a6      	lsls	r6, r4, #2
 8013828:	2800      	cmp	r0, #0
 801382a:	d0f1      	beq.n	8013810 <rcl_wait+0x90>
 801382c:	68eb      	ldr	r3, [r5, #12]
 801382e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8013832:	4423      	add	r3, r4
 8013834:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8013838:	f1be 0f00 	cmp.w	lr, #0
 801383c:	d006      	beq.n	801384c <rcl_wait+0xcc>
 801383e:	6913      	ldr	r3, [r2, #16]
 8013840:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8013844:	3301      	adds	r3, #1
 8013846:	6113      	str	r3, [r2, #16]
 8013848:	692b      	ldr	r3, [r5, #16]
 801384a:	5998      	ldr	r0, [r3, r6]
 801384c:	ed8d 8b08 	vstr	d8, [sp, #32]
 8013850:	f7ff fa94 	bl	8012d7c <rcl_timer_get_time_until_next_call>
 8013854:	4548      	cmp	r0, r9
 8013856:	d1cd      	bne.n	80137f4 <rcl_wait+0x74>
 8013858:	692b      	ldr	r3, [r5, #16]
 801385a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801385c:	2100      	movs	r1, #0
 801385e:	5199      	str	r1, [r3, r6]
 8013860:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013862:	3401      	adds	r4, #1
 8013864:	f14a 0a00 	adc.w	sl, sl, #0
 8013868:	429c      	cmp	r4, r3
 801386a:	f17a 0100 	sbcs.w	r1, sl, #0
 801386e:	d3d6      	bcc.n	801381e <rcl_wait+0x9e>
 8013870:	4616      	mov	r6, r2
 8013872:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8013876:	4313      	orrs	r3, r2
 8013878:	46d9      	mov	r9, fp
 801387a:	f040 80a9 	bne.w	80139d0 <rcl_wait+0x250>
 801387e:	2300      	movs	r3, #0
 8013880:	2200      	movs	r2, #0
 8013882:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013886:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801388a:	ab08      	add	r3, sp, #32
 801388c:	9302      	str	r3, [sp, #8]
 801388e:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8013890:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8013894:	e9cd 3200 	strd	r3, r2, [sp]
 8013898:	f106 0110 	add.w	r1, r6, #16
 801389c:	f106 031c 	add.w	r3, r6, #28
 80138a0:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 80138a4:	1d30      	adds	r0, r6, #4
 80138a6:	f001 fefd 	bl	80156a4 <rmw_wait>
 80138aa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80138ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80138ae:	4680      	mov	r8, r0
 80138b0:	b1ca      	cbz	r2, 80138e6 <rcl_wait+0x166>
 80138b2:	2400      	movs	r4, #0
 80138b4:	4627      	mov	r7, r4
 80138b6:	692a      	ldr	r2, [r5, #16]
 80138b8:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80138bc:	f10d 011f 	add.w	r1, sp, #31
 80138c0:	00a6      	lsls	r6, r4, #2
 80138c2:	b160      	cbz	r0, 80138de <rcl_wait+0x15e>
 80138c4:	f88d 701f 	strb.w	r7, [sp, #31]
 80138c8:	f7ff fa1e 	bl	8012d08 <rcl_timer_is_ready>
 80138cc:	2800      	cmp	r0, #0
 80138ce:	f47f af74 	bne.w	80137ba <rcl_wait+0x3a>
 80138d2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80138d6:	b90b      	cbnz	r3, 80138dc <rcl_wait+0x15c>
 80138d8:	692a      	ldr	r2, [r5, #16]
 80138da:	5193      	str	r3, [r2, r6]
 80138dc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80138de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80138e0:	3401      	adds	r4, #1
 80138e2:	42a2      	cmp	r2, r4
 80138e4:	d8e7      	bhi.n	80138b6 <rcl_wait+0x136>
 80138e6:	f038 0002 	bics.w	r0, r8, #2
 80138ea:	f040 8090 	bne.w	8013a0e <rcl_wait+0x28e>
 80138ee:	686e      	ldr	r6, [r5, #4]
 80138f0:	4602      	mov	r2, r0
 80138f2:	b91e      	cbnz	r6, 80138fc <rcl_wait+0x17c>
 80138f4:	e00d      	b.n	8013912 <rcl_wait+0x192>
 80138f6:	3201      	adds	r2, #1
 80138f8:	42b2      	cmp	r2, r6
 80138fa:	d00a      	beq.n	8013912 <rcl_wait+0x192>
 80138fc:	6899      	ldr	r1, [r3, #8]
 80138fe:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013902:	2900      	cmp	r1, #0
 8013904:	d1f7      	bne.n	80138f6 <rcl_wait+0x176>
 8013906:	682c      	ldr	r4, [r5, #0]
 8013908:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801390c:	3201      	adds	r2, #1
 801390e:	42b2      	cmp	r2, r6
 8013910:	d1f4      	bne.n	80138fc <rcl_wait+0x17c>
 8013912:	68ee      	ldr	r6, [r5, #12]
 8013914:	2200      	movs	r2, #0
 8013916:	b91e      	cbnz	r6, 8013920 <rcl_wait+0x1a0>
 8013918:	e00d      	b.n	8013936 <rcl_wait+0x1b6>
 801391a:	3201      	adds	r2, #1
 801391c:	42b2      	cmp	r2, r6
 801391e:	d00a      	beq.n	8013936 <rcl_wait+0x1b6>
 8013920:	6959      	ldr	r1, [r3, #20]
 8013922:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013926:	2900      	cmp	r1, #0
 8013928:	d1f7      	bne.n	801391a <rcl_wait+0x19a>
 801392a:	68ac      	ldr	r4, [r5, #8]
 801392c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013930:	3201      	adds	r2, #1
 8013932:	42b2      	cmp	r2, r6
 8013934:	d1f4      	bne.n	8013920 <rcl_wait+0x1a0>
 8013936:	69ee      	ldr	r6, [r5, #28]
 8013938:	2200      	movs	r2, #0
 801393a:	b91e      	cbnz	r6, 8013944 <rcl_wait+0x1c4>
 801393c:	e00d      	b.n	801395a <rcl_wait+0x1da>
 801393e:	3201      	adds	r2, #1
 8013940:	42b2      	cmp	r2, r6
 8013942:	d00a      	beq.n	801395a <rcl_wait+0x1da>
 8013944:	6a19      	ldr	r1, [r3, #32]
 8013946:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801394a:	2900      	cmp	r1, #0
 801394c:	d1f7      	bne.n	801393e <rcl_wait+0x1be>
 801394e:	69ac      	ldr	r4, [r5, #24]
 8013950:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013954:	3201      	adds	r2, #1
 8013956:	42b2      	cmp	r2, r6
 8013958:	d1f4      	bne.n	8013944 <rcl_wait+0x1c4>
 801395a:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 801395c:	2200      	movs	r2, #0
 801395e:	b91e      	cbnz	r6, 8013968 <rcl_wait+0x1e8>
 8013960:	e00d      	b.n	801397e <rcl_wait+0x1fe>
 8013962:	3201      	adds	r2, #1
 8013964:	4296      	cmp	r6, r2
 8013966:	d00a      	beq.n	801397e <rcl_wait+0x1fe>
 8013968:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801396a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801396e:	2900      	cmp	r1, #0
 8013970:	d1f7      	bne.n	8013962 <rcl_wait+0x1e2>
 8013972:	6a2c      	ldr	r4, [r5, #32]
 8013974:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013978:	3201      	adds	r2, #1
 801397a:	4296      	cmp	r6, r2
 801397c:	d1f4      	bne.n	8013968 <rcl_wait+0x1e8>
 801397e:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8013980:	2200      	movs	r2, #0
 8013982:	b91e      	cbnz	r6, 801398c <rcl_wait+0x20c>
 8013984:	e00d      	b.n	80139a2 <rcl_wait+0x222>
 8013986:	3201      	adds	r2, #1
 8013988:	42b2      	cmp	r2, r6
 801398a:	d00a      	beq.n	80139a2 <rcl_wait+0x222>
 801398c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801398e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013992:	2900      	cmp	r1, #0
 8013994:	d1f7      	bne.n	8013986 <rcl_wait+0x206>
 8013996:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8013998:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801399c:	3201      	adds	r2, #1
 801399e:	42b2      	cmp	r2, r6
 80139a0:	d1f4      	bne.n	801398c <rcl_wait+0x20c>
 80139a2:	f1b8 0f02 	cmp.w	r8, #2
 80139a6:	f47f af08 	bne.w	80137ba <rcl_wait+0x3a>
 80139aa:	464b      	mov	r3, r9
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	bf08      	it	eq
 80139b0:	2002      	moveq	r0, #2
 80139b2:	e702      	b.n	80137ba <rcl_wait+0x3a>
 80139b4:	2a00      	cmp	r2, #0
 80139b6:	d03a      	beq.n	8013a2e <rcl_wait+0x2ae>
 80139b8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80139bc:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80139c0:	e70e      	b.n	80137e0 <rcl_wait+0x60>
 80139c2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80139c6:	b00d      	add	sp, #52	@ 0x34
 80139c8:	ecbd 8b02 	vpop	{d8}
 80139cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139d0:	9b04      	ldr	r3, [sp, #16]
 80139d2:	2b01      	cmp	r3, #1
 80139d4:	9b05      	ldr	r3, [sp, #20]
 80139d6:	f173 0300 	sbcs.w	r3, r3, #0
 80139da:	db24      	blt.n	8013a26 <rcl_wait+0x2a6>
 80139dc:	2f00      	cmp	r7, #0
 80139de:	bfbc      	itt	lt
 80139e0:	f04f 0800 	movlt.w	r8, #0
 80139e4:	4647      	movlt	r7, r8
 80139e6:	a31e      	add	r3, pc, #120	@ (adr r3, 8013a60 <rcl_wait+0x2e0>)
 80139e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ec:	4640      	mov	r0, r8
 80139ee:	4639      	mov	r1, r7
 80139f0:	f7ed f89c 	bl	8000b2c <__aeabi_ldivmod>
 80139f4:	a31a      	add	r3, pc, #104	@ (adr r3, 8013a60 <rcl_wait+0x2e0>)
 80139f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139fa:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80139fe:	4640      	mov	r0, r8
 8013a00:	4639      	mov	r1, r7
 8013a02:	f7ed f893 	bl	8000b2c <__aeabi_ldivmod>
 8013a06:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8013a0a:	ab08      	add	r3, sp, #32
 8013a0c:	e73e      	b.n	801388c <rcl_wait+0x10c>
 8013a0e:	2001      	movs	r0, #1
 8013a10:	b00d      	add	sp, #52	@ 0x34
 8013a12:	ecbd 8b02 	vpop	{d8}
 8013a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a1a:	200b      	movs	r0, #11
 8013a1c:	b00d      	add	sp, #52	@ 0x34
 8013a1e:	ecbd 8b02 	vpop	{d8}
 8013a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a26:	465b      	mov	r3, fp
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d1d7      	bne.n	80139dc <rcl_wait+0x25c>
 8013a2c:	e72e      	b.n	801388c <rcl_wait+0x10c>
 8013a2e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8013a32:	430b      	orrs	r3, r1
 8013a34:	bf08      	it	eq
 8013a36:	4691      	moveq	r9, r2
 8013a38:	f43f af21 	beq.w	801387e <rcl_wait+0xfe>
 8013a3c:	9b04      	ldr	r3, [sp, #16]
 8013a3e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8013a42:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8013a46:	2b01      	cmp	r3, #1
 8013a48:	9b05      	ldr	r3, [sp, #20]
 8013a4a:	f173 0300 	sbcs.w	r3, r3, #0
 8013a4e:	f04f 0300 	mov.w	r3, #0
 8013a52:	4699      	mov	r9, r3
 8013a54:	dac2      	bge.n	80139dc <rcl_wait+0x25c>
 8013a56:	e719      	b.n	801388c <rcl_wait+0x10c>
 8013a58:	ffffffff 	.word	0xffffffff
 8013a5c:	7fffffff 	.word	0x7fffffff
 8013a60:	3b9aca00 	.word	0x3b9aca00
 8013a64:	00000000 	.word	0x00000000

08013a68 <rcl_action_take_goal_response>:
 8013a68:	2800      	cmp	r0, #0
 8013a6a:	d039      	beq.n	8013ae0 <rcl_action_take_goal_response+0x78>
 8013a6c:	b570      	push	{r4, r5, r6, lr}
 8013a6e:	4604      	mov	r4, r0
 8013a70:	6800      	ldr	r0, [r0, #0]
 8013a72:	b380      	cbz	r0, 8013ad6 <rcl_action_take_goal_response+0x6e>
 8013a74:	460d      	mov	r5, r1
 8013a76:	4616      	mov	r6, r2
 8013a78:	f7fe f842 	bl	8011b00 <rcl_client_is_valid>
 8013a7c:	b330      	cbz	r0, 8013acc <rcl_action_take_goal_response+0x64>
 8013a7e:	6820      	ldr	r0, [r4, #0]
 8013a80:	3004      	adds	r0, #4
 8013a82:	f7fe f83d 	bl	8011b00 <rcl_client_is_valid>
 8013a86:	b308      	cbz	r0, 8013acc <rcl_action_take_goal_response+0x64>
 8013a88:	6820      	ldr	r0, [r4, #0]
 8013a8a:	3008      	adds	r0, #8
 8013a8c:	f7fe f838 	bl	8011b00 <rcl_client_is_valid>
 8013a90:	b1e0      	cbz	r0, 8013acc <rcl_action_take_goal_response+0x64>
 8013a92:	6820      	ldr	r0, [r4, #0]
 8013a94:	300c      	adds	r0, #12
 8013a96:	f7fe fdf5 	bl	8012684 <rcl_subscription_is_valid>
 8013a9a:	b1b8      	cbz	r0, 8013acc <rcl_action_take_goal_response+0x64>
 8013a9c:	6820      	ldr	r0, [r4, #0]
 8013a9e:	3010      	adds	r0, #16
 8013aa0:	f7fe fdf0 	bl	8012684 <rcl_subscription_is_valid>
 8013aa4:	b190      	cbz	r0, 8013acc <rcl_action_take_goal_response+0x64>
 8013aa6:	b1cd      	cbz	r5, 8013adc <rcl_action_take_goal_response+0x74>
 8013aa8:	b1c6      	cbz	r6, 8013adc <rcl_action_take_goal_response+0x74>
 8013aaa:	6820      	ldr	r0, [r4, #0]
 8013aac:	4632      	mov	r2, r6
 8013aae:	4629      	mov	r1, r5
 8013ab0:	f7fd ffde 	bl	8011a70 <rcl_take_response>
 8013ab4:	b148      	cbz	r0, 8013aca <rcl_action_take_goal_response+0x62>
 8013ab6:	280a      	cmp	r0, #10
 8013ab8:	d007      	beq.n	8013aca <rcl_action_take_goal_response+0x62>
 8013aba:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013abe:	f640 0337 	movw	r3, #2103	@ 0x837
 8013ac2:	4290      	cmp	r0, r2
 8013ac4:	bf0c      	ite	eq
 8013ac6:	4618      	moveq	r0, r3
 8013ac8:	2001      	movne	r0, #1
 8013aca:	bd70      	pop	{r4, r5, r6, pc}
 8013acc:	f7f9 f9c4 	bl	800ce58 <rcutils_reset_error>
 8013ad0:	f640 0036 	movw	r0, #2102	@ 0x836
 8013ad4:	bd70      	pop	{r4, r5, r6, pc}
 8013ad6:	f640 0036 	movw	r0, #2102	@ 0x836
 8013ada:	bd70      	pop	{r4, r5, r6, pc}
 8013adc:	200b      	movs	r0, #11
 8013ade:	bd70      	pop	{r4, r5, r6, pc}
 8013ae0:	f640 0036 	movw	r0, #2102	@ 0x836
 8013ae4:	4770      	bx	lr
 8013ae6:	bf00      	nop

08013ae8 <rcl_action_send_result_request>:
 8013ae8:	b390      	cbz	r0, 8013b50 <rcl_action_send_result_request+0x68>
 8013aea:	b570      	push	{r4, r5, r6, lr}
 8013aec:	4604      	mov	r4, r0
 8013aee:	6800      	ldr	r0, [r0, #0]
 8013af0:	b348      	cbz	r0, 8013b46 <rcl_action_send_result_request+0x5e>
 8013af2:	460d      	mov	r5, r1
 8013af4:	4616      	mov	r6, r2
 8013af6:	f7fe f803 	bl	8011b00 <rcl_client_is_valid>
 8013afa:	b1f8      	cbz	r0, 8013b3c <rcl_action_send_result_request+0x54>
 8013afc:	6820      	ldr	r0, [r4, #0]
 8013afe:	3004      	adds	r0, #4
 8013b00:	f7fd fffe 	bl	8011b00 <rcl_client_is_valid>
 8013b04:	b1d0      	cbz	r0, 8013b3c <rcl_action_send_result_request+0x54>
 8013b06:	6820      	ldr	r0, [r4, #0]
 8013b08:	3008      	adds	r0, #8
 8013b0a:	f7fd fff9 	bl	8011b00 <rcl_client_is_valid>
 8013b0e:	b1a8      	cbz	r0, 8013b3c <rcl_action_send_result_request+0x54>
 8013b10:	6820      	ldr	r0, [r4, #0]
 8013b12:	300c      	adds	r0, #12
 8013b14:	f7fe fdb6 	bl	8012684 <rcl_subscription_is_valid>
 8013b18:	b180      	cbz	r0, 8013b3c <rcl_action_send_result_request+0x54>
 8013b1a:	6820      	ldr	r0, [r4, #0]
 8013b1c:	3010      	adds	r0, #16
 8013b1e:	f7fe fdb1 	bl	8012684 <rcl_subscription_is_valid>
 8013b22:	b158      	cbz	r0, 8013b3c <rcl_action_send_result_request+0x54>
 8013b24:	b195      	cbz	r5, 8013b4c <rcl_action_send_result_request+0x64>
 8013b26:	b18e      	cbz	r6, 8013b4c <rcl_action_send_result_request+0x64>
 8013b28:	6820      	ldr	r0, [r4, #0]
 8013b2a:	4632      	mov	r2, r6
 8013b2c:	4629      	mov	r1, r5
 8013b2e:	3008      	adds	r0, #8
 8013b30:	f7fd ff68 	bl	8011a04 <rcl_send_request>
 8013b34:	3800      	subs	r0, #0
 8013b36:	bf18      	it	ne
 8013b38:	2001      	movne	r0, #1
 8013b3a:	bd70      	pop	{r4, r5, r6, pc}
 8013b3c:	f7f9 f98c 	bl	800ce58 <rcutils_reset_error>
 8013b40:	f640 0036 	movw	r0, #2102	@ 0x836
 8013b44:	bd70      	pop	{r4, r5, r6, pc}
 8013b46:	f640 0036 	movw	r0, #2102	@ 0x836
 8013b4a:	bd70      	pop	{r4, r5, r6, pc}
 8013b4c:	200b      	movs	r0, #11
 8013b4e:	bd70      	pop	{r4, r5, r6, pc}
 8013b50:	f640 0036 	movw	r0, #2102	@ 0x836
 8013b54:	4770      	bx	lr
 8013b56:	bf00      	nop

08013b58 <rcl_action_take_result_response>:
 8013b58:	2800      	cmp	r0, #0
 8013b5a:	d03a      	beq.n	8013bd2 <rcl_action_take_result_response+0x7a>
 8013b5c:	b570      	push	{r4, r5, r6, lr}
 8013b5e:	4604      	mov	r4, r0
 8013b60:	6800      	ldr	r0, [r0, #0]
 8013b62:	b388      	cbz	r0, 8013bc8 <rcl_action_take_result_response+0x70>
 8013b64:	460d      	mov	r5, r1
 8013b66:	4616      	mov	r6, r2
 8013b68:	f7fd ffca 	bl	8011b00 <rcl_client_is_valid>
 8013b6c:	b338      	cbz	r0, 8013bbe <rcl_action_take_result_response+0x66>
 8013b6e:	6820      	ldr	r0, [r4, #0]
 8013b70:	3004      	adds	r0, #4
 8013b72:	f7fd ffc5 	bl	8011b00 <rcl_client_is_valid>
 8013b76:	b310      	cbz	r0, 8013bbe <rcl_action_take_result_response+0x66>
 8013b78:	6820      	ldr	r0, [r4, #0]
 8013b7a:	3008      	adds	r0, #8
 8013b7c:	f7fd ffc0 	bl	8011b00 <rcl_client_is_valid>
 8013b80:	b1e8      	cbz	r0, 8013bbe <rcl_action_take_result_response+0x66>
 8013b82:	6820      	ldr	r0, [r4, #0]
 8013b84:	300c      	adds	r0, #12
 8013b86:	f7fe fd7d 	bl	8012684 <rcl_subscription_is_valid>
 8013b8a:	b1c0      	cbz	r0, 8013bbe <rcl_action_take_result_response+0x66>
 8013b8c:	6820      	ldr	r0, [r4, #0]
 8013b8e:	3010      	adds	r0, #16
 8013b90:	f7fe fd78 	bl	8012684 <rcl_subscription_is_valid>
 8013b94:	b198      	cbz	r0, 8013bbe <rcl_action_take_result_response+0x66>
 8013b96:	b1d5      	cbz	r5, 8013bce <rcl_action_take_result_response+0x76>
 8013b98:	b1ce      	cbz	r6, 8013bce <rcl_action_take_result_response+0x76>
 8013b9a:	6820      	ldr	r0, [r4, #0]
 8013b9c:	4632      	mov	r2, r6
 8013b9e:	4629      	mov	r1, r5
 8013ba0:	3008      	adds	r0, #8
 8013ba2:	f7fd ff65 	bl	8011a70 <rcl_take_response>
 8013ba6:	b148      	cbz	r0, 8013bbc <rcl_action_take_result_response+0x64>
 8013ba8:	280a      	cmp	r0, #10
 8013baa:	d007      	beq.n	8013bbc <rcl_action_take_result_response+0x64>
 8013bac:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013bb0:	f640 0337 	movw	r3, #2103	@ 0x837
 8013bb4:	4290      	cmp	r0, r2
 8013bb6:	bf0c      	ite	eq
 8013bb8:	4618      	moveq	r0, r3
 8013bba:	2001      	movne	r0, #1
 8013bbc:	bd70      	pop	{r4, r5, r6, pc}
 8013bbe:	f7f9 f94b 	bl	800ce58 <rcutils_reset_error>
 8013bc2:	f640 0036 	movw	r0, #2102	@ 0x836
 8013bc6:	bd70      	pop	{r4, r5, r6, pc}
 8013bc8:	f640 0036 	movw	r0, #2102	@ 0x836
 8013bcc:	bd70      	pop	{r4, r5, r6, pc}
 8013bce:	200b      	movs	r0, #11
 8013bd0:	bd70      	pop	{r4, r5, r6, pc}
 8013bd2:	f640 0036 	movw	r0, #2102	@ 0x836
 8013bd6:	4770      	bx	lr

08013bd8 <rcl_action_take_cancel_response>:
 8013bd8:	2800      	cmp	r0, #0
 8013bda:	d03a      	beq.n	8013c52 <rcl_action_take_cancel_response+0x7a>
 8013bdc:	b570      	push	{r4, r5, r6, lr}
 8013bde:	4604      	mov	r4, r0
 8013be0:	6800      	ldr	r0, [r0, #0]
 8013be2:	b388      	cbz	r0, 8013c48 <rcl_action_take_cancel_response+0x70>
 8013be4:	460d      	mov	r5, r1
 8013be6:	4616      	mov	r6, r2
 8013be8:	f7fd ff8a 	bl	8011b00 <rcl_client_is_valid>
 8013bec:	b338      	cbz	r0, 8013c3e <rcl_action_take_cancel_response+0x66>
 8013bee:	6820      	ldr	r0, [r4, #0]
 8013bf0:	3004      	adds	r0, #4
 8013bf2:	f7fd ff85 	bl	8011b00 <rcl_client_is_valid>
 8013bf6:	b310      	cbz	r0, 8013c3e <rcl_action_take_cancel_response+0x66>
 8013bf8:	6820      	ldr	r0, [r4, #0]
 8013bfa:	3008      	adds	r0, #8
 8013bfc:	f7fd ff80 	bl	8011b00 <rcl_client_is_valid>
 8013c00:	b1e8      	cbz	r0, 8013c3e <rcl_action_take_cancel_response+0x66>
 8013c02:	6820      	ldr	r0, [r4, #0]
 8013c04:	300c      	adds	r0, #12
 8013c06:	f7fe fd3d 	bl	8012684 <rcl_subscription_is_valid>
 8013c0a:	b1c0      	cbz	r0, 8013c3e <rcl_action_take_cancel_response+0x66>
 8013c0c:	6820      	ldr	r0, [r4, #0]
 8013c0e:	3010      	adds	r0, #16
 8013c10:	f7fe fd38 	bl	8012684 <rcl_subscription_is_valid>
 8013c14:	b198      	cbz	r0, 8013c3e <rcl_action_take_cancel_response+0x66>
 8013c16:	b1d5      	cbz	r5, 8013c4e <rcl_action_take_cancel_response+0x76>
 8013c18:	b1ce      	cbz	r6, 8013c4e <rcl_action_take_cancel_response+0x76>
 8013c1a:	6820      	ldr	r0, [r4, #0]
 8013c1c:	4632      	mov	r2, r6
 8013c1e:	4629      	mov	r1, r5
 8013c20:	3004      	adds	r0, #4
 8013c22:	f7fd ff25 	bl	8011a70 <rcl_take_response>
 8013c26:	b148      	cbz	r0, 8013c3c <rcl_action_take_cancel_response+0x64>
 8013c28:	280a      	cmp	r0, #10
 8013c2a:	d007      	beq.n	8013c3c <rcl_action_take_cancel_response+0x64>
 8013c2c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013c30:	f640 0337 	movw	r3, #2103	@ 0x837
 8013c34:	4290      	cmp	r0, r2
 8013c36:	bf0c      	ite	eq
 8013c38:	4618      	moveq	r0, r3
 8013c3a:	2001      	movne	r0, #1
 8013c3c:	bd70      	pop	{r4, r5, r6, pc}
 8013c3e:	f7f9 f90b 	bl	800ce58 <rcutils_reset_error>
 8013c42:	f640 0036 	movw	r0, #2102	@ 0x836
 8013c46:	bd70      	pop	{r4, r5, r6, pc}
 8013c48:	f640 0036 	movw	r0, #2102	@ 0x836
 8013c4c:	bd70      	pop	{r4, r5, r6, pc}
 8013c4e:	200b      	movs	r0, #11
 8013c50:	bd70      	pop	{r4, r5, r6, pc}
 8013c52:	f640 0036 	movw	r0, #2102	@ 0x836
 8013c56:	4770      	bx	lr

08013c58 <rcl_action_take_feedback>:
 8013c58:	2800      	cmp	r0, #0
 8013c5a:	d038      	beq.n	8013cce <rcl_action_take_feedback+0x76>
 8013c5c:	b530      	push	{r4, r5, lr}
 8013c5e:	4604      	mov	r4, r0
 8013c60:	6800      	ldr	r0, [r0, #0]
 8013c62:	b091      	sub	sp, #68	@ 0x44
 8013c64:	b378      	cbz	r0, 8013cc6 <rcl_action_take_feedback+0x6e>
 8013c66:	460d      	mov	r5, r1
 8013c68:	f7fd ff4a 	bl	8011b00 <rcl_client_is_valid>
 8013c6c:	b328      	cbz	r0, 8013cba <rcl_action_take_feedback+0x62>
 8013c6e:	6820      	ldr	r0, [r4, #0]
 8013c70:	3004      	adds	r0, #4
 8013c72:	f7fd ff45 	bl	8011b00 <rcl_client_is_valid>
 8013c76:	b300      	cbz	r0, 8013cba <rcl_action_take_feedback+0x62>
 8013c78:	6820      	ldr	r0, [r4, #0]
 8013c7a:	3008      	adds	r0, #8
 8013c7c:	f7fd ff40 	bl	8011b00 <rcl_client_is_valid>
 8013c80:	b1d8      	cbz	r0, 8013cba <rcl_action_take_feedback+0x62>
 8013c82:	6820      	ldr	r0, [r4, #0]
 8013c84:	300c      	adds	r0, #12
 8013c86:	f7fe fcfd 	bl	8012684 <rcl_subscription_is_valid>
 8013c8a:	b1b0      	cbz	r0, 8013cba <rcl_action_take_feedback+0x62>
 8013c8c:	6820      	ldr	r0, [r4, #0]
 8013c8e:	3010      	adds	r0, #16
 8013c90:	f7fe fcf8 	bl	8012684 <rcl_subscription_is_valid>
 8013c94:	b188      	cbz	r0, 8013cba <rcl_action_take_feedback+0x62>
 8013c96:	b1ed      	cbz	r5, 8013cd4 <rcl_action_take_feedback+0x7c>
 8013c98:	6820      	ldr	r0, [r4, #0]
 8013c9a:	2300      	movs	r3, #0
 8013c9c:	466a      	mov	r2, sp
 8013c9e:	4629      	mov	r1, r5
 8013ca0:	300c      	adds	r0, #12
 8013ca2:	f7fe fc91 	bl	80125c8 <rcl_take>
 8013ca6:	b160      	cbz	r0, 8013cc2 <rcl_action_take_feedback+0x6a>
 8013ca8:	f240 1391 	movw	r3, #401	@ 0x191
 8013cac:	4298      	cmp	r0, r3
 8013cae:	d014      	beq.n	8013cda <rcl_action_take_feedback+0x82>
 8013cb0:	280a      	cmp	r0, #10
 8013cb2:	bf18      	it	ne
 8013cb4:	2001      	movne	r0, #1
 8013cb6:	b011      	add	sp, #68	@ 0x44
 8013cb8:	bd30      	pop	{r4, r5, pc}
 8013cba:	f7f9 f8cd 	bl	800ce58 <rcutils_reset_error>
 8013cbe:	f640 0036 	movw	r0, #2102	@ 0x836
 8013cc2:	b011      	add	sp, #68	@ 0x44
 8013cc4:	bd30      	pop	{r4, r5, pc}
 8013cc6:	f640 0036 	movw	r0, #2102	@ 0x836
 8013cca:	b011      	add	sp, #68	@ 0x44
 8013ccc:	bd30      	pop	{r4, r5, pc}
 8013cce:	f640 0036 	movw	r0, #2102	@ 0x836
 8013cd2:	4770      	bx	lr
 8013cd4:	200b      	movs	r0, #11
 8013cd6:	b011      	add	sp, #68	@ 0x44
 8013cd8:	bd30      	pop	{r4, r5, pc}
 8013cda:	f640 0037 	movw	r0, #2103	@ 0x837
 8013cde:	e7f0      	b.n	8013cc2 <rcl_action_take_feedback+0x6a>

08013ce0 <rcl_action_wait_set_add_action_client>:
 8013ce0:	2800      	cmp	r0, #0
 8013ce2:	d048      	beq.n	8013d76 <rcl_action_wait_set_add_action_client+0x96>
 8013ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ce6:	460c      	mov	r4, r1
 8013ce8:	2900      	cmp	r1, #0
 8013cea:	d03c      	beq.n	8013d66 <rcl_action_wait_set_add_action_client+0x86>
 8013cec:	4605      	mov	r5, r0
 8013cee:	6808      	ldr	r0, [r1, #0]
 8013cf0:	2800      	cmp	r0, #0
 8013cf2:	d038      	beq.n	8013d66 <rcl_action_wait_set_add_action_client+0x86>
 8013cf4:	4617      	mov	r7, r2
 8013cf6:	461e      	mov	r6, r3
 8013cf8:	f7fd ff02 	bl	8011b00 <rcl_client_is_valid>
 8013cfc:	b3b0      	cbz	r0, 8013d6c <rcl_action_wait_set_add_action_client+0x8c>
 8013cfe:	6820      	ldr	r0, [r4, #0]
 8013d00:	3004      	adds	r0, #4
 8013d02:	f7fd fefd 	bl	8011b00 <rcl_client_is_valid>
 8013d06:	b388      	cbz	r0, 8013d6c <rcl_action_wait_set_add_action_client+0x8c>
 8013d08:	6820      	ldr	r0, [r4, #0]
 8013d0a:	3008      	adds	r0, #8
 8013d0c:	f7fd fef8 	bl	8011b00 <rcl_client_is_valid>
 8013d10:	b360      	cbz	r0, 8013d6c <rcl_action_wait_set_add_action_client+0x8c>
 8013d12:	6820      	ldr	r0, [r4, #0]
 8013d14:	300c      	adds	r0, #12
 8013d16:	f7fe fcb5 	bl	8012684 <rcl_subscription_is_valid>
 8013d1a:	b338      	cbz	r0, 8013d6c <rcl_action_wait_set_add_action_client+0x8c>
 8013d1c:	6820      	ldr	r0, [r4, #0]
 8013d1e:	3010      	adds	r0, #16
 8013d20:	f7fe fcb0 	bl	8012684 <rcl_subscription_is_valid>
 8013d24:	b310      	cbz	r0, 8013d6c <rcl_action_wait_set_add_action_client+0x8c>
 8013d26:	6821      	ldr	r1, [r4, #0]
 8013d28:	4628      	mov	r0, r5
 8013d2a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8013d2e:	f7ff fccd 	bl	80136cc <rcl_wait_set_add_client>
 8013d32:	b9b8      	cbnz	r0, 8013d64 <rcl_action_wait_set_add_action_client+0x84>
 8013d34:	6821      	ldr	r1, [r4, #0]
 8013d36:	4628      	mov	r0, r5
 8013d38:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8013d3c:	3104      	adds	r1, #4
 8013d3e:	f7ff fcc5 	bl	80136cc <rcl_wait_set_add_client>
 8013d42:	b978      	cbnz	r0, 8013d64 <rcl_action_wait_set_add_action_client+0x84>
 8013d44:	6821      	ldr	r1, [r4, #0]
 8013d46:	4628      	mov	r0, r5
 8013d48:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8013d4c:	3108      	adds	r1, #8
 8013d4e:	f7ff fcbd 	bl	80136cc <rcl_wait_set_add_client>
 8013d52:	b938      	cbnz	r0, 8013d64 <rcl_action_wait_set_add_action_client+0x84>
 8013d54:	6821      	ldr	r1, [r4, #0]
 8013d56:	4628      	mov	r0, r5
 8013d58:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8013d5c:	310c      	adds	r1, #12
 8013d5e:	f7ff f96d 	bl	801303c <rcl_wait_set_add_subscription>
 8013d62:	b158      	cbz	r0, 8013d7c <rcl_action_wait_set_add_action_client+0x9c>
 8013d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d66:	f640 0036 	movw	r0, #2102	@ 0x836
 8013d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d6c:	f7f9 f874 	bl	800ce58 <rcutils_reset_error>
 8013d70:	f640 0036 	movw	r0, #2102	@ 0x836
 8013d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d76:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013d7a:	4770      	bx	lr
 8013d7c:	6821      	ldr	r1, [r4, #0]
 8013d7e:	4628      	mov	r0, r5
 8013d80:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8013d84:	3110      	adds	r1, #16
 8013d86:	f7ff f959 	bl	801303c <rcl_wait_set_add_subscription>
 8013d8a:	2800      	cmp	r0, #0
 8013d8c:	d1ea      	bne.n	8013d64 <rcl_action_wait_set_add_action_client+0x84>
 8013d8e:	b11f      	cbz	r7, 8013d98 <rcl_action_wait_set_add_action_client+0xb8>
 8013d90:	6823      	ldr	r3, [r4, #0]
 8013d92:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8013d96:	603b      	str	r3, [r7, #0]
 8013d98:	2e00      	cmp	r6, #0
 8013d9a:	d0e3      	beq.n	8013d64 <rcl_action_wait_set_add_action_client+0x84>
 8013d9c:	6823      	ldr	r3, [r4, #0]
 8013d9e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8013da2:	6033      	str	r3, [r6, #0]
 8013da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013da6:	bf00      	nop

08013da8 <rcl_action_client_wait_set_get_entities_ready>:
 8013da8:	2800      	cmp	r0, #0
 8013daa:	f000 808d 	beq.w	8013ec8 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8013dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013db2:	460c      	mov	r4, r1
 8013db4:	2900      	cmp	r1, #0
 8013db6:	d077      	beq.n	8013ea8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8013db8:	4605      	mov	r5, r0
 8013dba:	6808      	ldr	r0, [r1, #0]
 8013dbc:	2800      	cmp	r0, #0
 8013dbe:	d073      	beq.n	8013ea8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8013dc0:	4616      	mov	r6, r2
 8013dc2:	461f      	mov	r7, r3
 8013dc4:	f7fd fe9c 	bl	8011b00 <rcl_client_is_valid>
 8013dc8:	2800      	cmp	r0, #0
 8013dca:	d071      	beq.n	8013eb0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013dcc:	6820      	ldr	r0, [r4, #0]
 8013dce:	3004      	adds	r0, #4
 8013dd0:	f7fd fe96 	bl	8011b00 <rcl_client_is_valid>
 8013dd4:	2800      	cmp	r0, #0
 8013dd6:	d06b      	beq.n	8013eb0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013dd8:	6820      	ldr	r0, [r4, #0]
 8013dda:	3008      	adds	r0, #8
 8013ddc:	f7fd fe90 	bl	8011b00 <rcl_client_is_valid>
 8013de0:	2800      	cmp	r0, #0
 8013de2:	d065      	beq.n	8013eb0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013de4:	6820      	ldr	r0, [r4, #0]
 8013de6:	300c      	adds	r0, #12
 8013de8:	f7fe fc4c 	bl	8012684 <rcl_subscription_is_valid>
 8013dec:	2800      	cmp	r0, #0
 8013dee:	d05f      	beq.n	8013eb0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013df0:	6820      	ldr	r0, [r4, #0]
 8013df2:	3010      	adds	r0, #16
 8013df4:	f7fe fc46 	bl	8012684 <rcl_subscription_is_valid>
 8013df8:	2800      	cmp	r0, #0
 8013dfa:	d059      	beq.n	8013eb0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013dfc:	2e00      	cmp	r6, #0
 8013dfe:	d060      	beq.n	8013ec2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8013e00:	2f00      	cmp	r7, #0
 8013e02:	d05e      	beq.n	8013ec2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8013e04:	9b06      	ldr	r3, [sp, #24]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d05b      	beq.n	8013ec2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8013e0a:	9b07      	ldr	r3, [sp, #28]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d058      	beq.n	8013ec2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8013e10:	9b08      	ldr	r3, [sp, #32]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d055      	beq.n	8013ec2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8013e16:	6823      	ldr	r3, [r4, #0]
 8013e18:	686a      	ldr	r2, [r5, #4]
 8013e1a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8013e1e:	428a      	cmp	r2, r1
 8013e20:	d94c      	bls.n	8013ebc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8013e22:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8013e26:	4282      	cmp	r2, r0
 8013e28:	d948      	bls.n	8013ebc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8013e2a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8013e2e:	69ea      	ldr	r2, [r5, #28]
 8013e30:	42a2      	cmp	r2, r4
 8013e32:	d943      	bls.n	8013ebc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8013e34:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8013e38:	4562      	cmp	r2, ip
 8013e3a:	d93f      	bls.n	8013ebc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8013e3c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8013e40:	4572      	cmp	r2, lr
 8013e42:	d93b      	bls.n	8013ebc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8013e44:	69aa      	ldr	r2, [r5, #24]
 8013e46:	682d      	ldr	r5, [r5, #0]
 8013e48:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8013e4c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8013e50:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8013e54:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8013e58:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8013e5c:	f103 0c0c 	add.w	ip, r3, #12
 8013e60:	eba5 050c 	sub.w	r5, r5, ip
 8013e64:	fab5 f585 	clz	r5, r5
 8013e68:	096d      	lsrs	r5, r5, #5
 8013e6a:	7035      	strb	r5, [r6, #0]
 8013e6c:	f103 0510 	add.w	r5, r3, #16
 8013e70:	1b64      	subs	r4, r4, r5
 8013e72:	fab4 f484 	clz	r4, r4
 8013e76:	0964      	lsrs	r4, r4, #5
 8013e78:	703c      	strb	r4, [r7, #0]
 8013e7a:	eba3 0008 	sub.w	r0, r3, r8
 8013e7e:	1d1c      	adds	r4, r3, #4
 8013e80:	3308      	adds	r3, #8
 8013e82:	1ad3      	subs	r3, r2, r3
 8013e84:	fab0 f080 	clz	r0, r0
 8013e88:	9a06      	ldr	r2, [sp, #24]
 8013e8a:	0940      	lsrs	r0, r0, #5
 8013e8c:	1b09      	subs	r1, r1, r4
 8013e8e:	7010      	strb	r0, [r2, #0]
 8013e90:	fab1 f181 	clz	r1, r1
 8013e94:	9a07      	ldr	r2, [sp, #28]
 8013e96:	0949      	lsrs	r1, r1, #5
 8013e98:	7011      	strb	r1, [r2, #0]
 8013e9a:	fab3 f383 	clz	r3, r3
 8013e9e:	9a08      	ldr	r2, [sp, #32]
 8013ea0:	095b      	lsrs	r3, r3, #5
 8013ea2:	2000      	movs	r0, #0
 8013ea4:	7013      	strb	r3, [r2, #0]
 8013ea6:	e001      	b.n	8013eac <rcl_action_client_wait_set_get_entities_ready+0x104>
 8013ea8:	f640 0036 	movw	r0, #2102	@ 0x836
 8013eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013eb0:	f7f8 ffd2 	bl	800ce58 <rcutils_reset_error>
 8013eb4:	f640 0036 	movw	r0, #2102	@ 0x836
 8013eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ebc:	2001      	movs	r0, #1
 8013ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ec2:	200b      	movs	r0, #11
 8013ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ec8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013ecc:	4770      	bx	lr
 8013ece:	bf00      	nop

08013ed0 <rcl_action_take_goal_request>:
 8013ed0:	2800      	cmp	r0, #0
 8013ed2:	d039      	beq.n	8013f48 <rcl_action_take_goal_request+0x78>
 8013ed4:	b570      	push	{r4, r5, r6, lr}
 8013ed6:	4604      	mov	r4, r0
 8013ed8:	6800      	ldr	r0, [r0, #0]
 8013eda:	b380      	cbz	r0, 8013f3e <rcl_action_take_goal_request+0x6e>
 8013edc:	460d      	mov	r5, r1
 8013ede:	4616      	mov	r6, r2
 8013ee0:	f7fe fb68 	bl	80125b4 <rcl_service_is_valid>
 8013ee4:	b330      	cbz	r0, 8013f34 <rcl_action_take_goal_request+0x64>
 8013ee6:	6820      	ldr	r0, [r4, #0]
 8013ee8:	3004      	adds	r0, #4
 8013eea:	f7fe fb63 	bl	80125b4 <rcl_service_is_valid>
 8013eee:	b308      	cbz	r0, 8013f34 <rcl_action_take_goal_request+0x64>
 8013ef0:	6820      	ldr	r0, [r4, #0]
 8013ef2:	3008      	adds	r0, #8
 8013ef4:	f7fe fb5e 	bl	80125b4 <rcl_service_is_valid>
 8013ef8:	b1e0      	cbz	r0, 8013f34 <rcl_action_take_goal_request+0x64>
 8013efa:	6820      	ldr	r0, [r4, #0]
 8013efc:	300c      	adds	r0, #12
 8013efe:	f7f8 f831 	bl	800bf64 <rcl_publisher_is_valid>
 8013f02:	b1b8      	cbz	r0, 8013f34 <rcl_action_take_goal_request+0x64>
 8013f04:	6820      	ldr	r0, [r4, #0]
 8013f06:	3010      	adds	r0, #16
 8013f08:	f7f8 f82c 	bl	800bf64 <rcl_publisher_is_valid>
 8013f0c:	b190      	cbz	r0, 8013f34 <rcl_action_take_goal_request+0x64>
 8013f0e:	b1cd      	cbz	r5, 8013f44 <rcl_action_take_goal_request+0x74>
 8013f10:	b1c6      	cbz	r6, 8013f44 <rcl_action_take_goal_request+0x74>
 8013f12:	6820      	ldr	r0, [r4, #0]
 8013f14:	4632      	mov	r2, r6
 8013f16:	4629      	mov	r1, r5
 8013f18:	f7fe faf4 	bl	8012504 <rcl_take_request>
 8013f1c:	b148      	cbz	r0, 8013f32 <rcl_action_take_goal_request+0x62>
 8013f1e:	280a      	cmp	r0, #10
 8013f20:	d007      	beq.n	8013f32 <rcl_action_take_goal_request+0x62>
 8013f22:	f240 2259 	movw	r2, #601	@ 0x259
 8013f26:	f640 0399 	movw	r3, #2201	@ 0x899
 8013f2a:	4290      	cmp	r0, r2
 8013f2c:	bf0c      	ite	eq
 8013f2e:	4618      	moveq	r0, r3
 8013f30:	2001      	movne	r0, #1
 8013f32:	bd70      	pop	{r4, r5, r6, pc}
 8013f34:	f7f8 ff90 	bl	800ce58 <rcutils_reset_error>
 8013f38:	f640 0098 	movw	r0, #2200	@ 0x898
 8013f3c:	bd70      	pop	{r4, r5, r6, pc}
 8013f3e:	f640 0098 	movw	r0, #2200	@ 0x898
 8013f42:	bd70      	pop	{r4, r5, r6, pc}
 8013f44:	200b      	movs	r0, #11
 8013f46:	bd70      	pop	{r4, r5, r6, pc}
 8013f48:	f640 0098 	movw	r0, #2200	@ 0x898
 8013f4c:	4770      	bx	lr
 8013f4e:	bf00      	nop

08013f50 <rcl_action_send_goal_response>:
 8013f50:	b390      	cbz	r0, 8013fb8 <rcl_action_send_goal_response+0x68>
 8013f52:	b570      	push	{r4, r5, r6, lr}
 8013f54:	4604      	mov	r4, r0
 8013f56:	6800      	ldr	r0, [r0, #0]
 8013f58:	b348      	cbz	r0, 8013fae <rcl_action_send_goal_response+0x5e>
 8013f5a:	460d      	mov	r5, r1
 8013f5c:	4616      	mov	r6, r2
 8013f5e:	f7fe fb29 	bl	80125b4 <rcl_service_is_valid>
 8013f62:	b1f8      	cbz	r0, 8013fa4 <rcl_action_send_goal_response+0x54>
 8013f64:	6820      	ldr	r0, [r4, #0]
 8013f66:	3004      	adds	r0, #4
 8013f68:	f7fe fb24 	bl	80125b4 <rcl_service_is_valid>
 8013f6c:	b1d0      	cbz	r0, 8013fa4 <rcl_action_send_goal_response+0x54>
 8013f6e:	6820      	ldr	r0, [r4, #0]
 8013f70:	3008      	adds	r0, #8
 8013f72:	f7fe fb1f 	bl	80125b4 <rcl_service_is_valid>
 8013f76:	b1a8      	cbz	r0, 8013fa4 <rcl_action_send_goal_response+0x54>
 8013f78:	6820      	ldr	r0, [r4, #0]
 8013f7a:	300c      	adds	r0, #12
 8013f7c:	f7f7 fff2 	bl	800bf64 <rcl_publisher_is_valid>
 8013f80:	b180      	cbz	r0, 8013fa4 <rcl_action_send_goal_response+0x54>
 8013f82:	6820      	ldr	r0, [r4, #0]
 8013f84:	3010      	adds	r0, #16
 8013f86:	f7f7 ffed 	bl	800bf64 <rcl_publisher_is_valid>
 8013f8a:	b158      	cbz	r0, 8013fa4 <rcl_action_send_goal_response+0x54>
 8013f8c:	b195      	cbz	r5, 8013fb4 <rcl_action_send_goal_response+0x64>
 8013f8e:	b18e      	cbz	r6, 8013fb4 <rcl_action_send_goal_response+0x64>
 8013f90:	6820      	ldr	r0, [r4, #0]
 8013f92:	4632      	mov	r2, r6
 8013f94:	4629      	mov	r1, r5
 8013f96:	f7fe faf5 	bl	8012584 <rcl_send_response>
 8013f9a:	b110      	cbz	r0, 8013fa2 <rcl_action_send_goal_response+0x52>
 8013f9c:	2802      	cmp	r0, #2
 8013f9e:	bf18      	it	ne
 8013fa0:	2001      	movne	r0, #1
 8013fa2:	bd70      	pop	{r4, r5, r6, pc}
 8013fa4:	f7f8 ff58 	bl	800ce58 <rcutils_reset_error>
 8013fa8:	f640 0098 	movw	r0, #2200	@ 0x898
 8013fac:	bd70      	pop	{r4, r5, r6, pc}
 8013fae:	f640 0098 	movw	r0, #2200	@ 0x898
 8013fb2:	bd70      	pop	{r4, r5, r6, pc}
 8013fb4:	200b      	movs	r0, #11
 8013fb6:	bd70      	pop	{r4, r5, r6, pc}
 8013fb8:	f640 0098 	movw	r0, #2200	@ 0x898
 8013fbc:	4770      	bx	lr
 8013fbe:	bf00      	nop

08013fc0 <rcl_action_take_result_request>:
 8013fc0:	2800      	cmp	r0, #0
 8013fc2:	d03a      	beq.n	801403a <rcl_action_take_result_request+0x7a>
 8013fc4:	b570      	push	{r4, r5, r6, lr}
 8013fc6:	4604      	mov	r4, r0
 8013fc8:	6800      	ldr	r0, [r0, #0]
 8013fca:	b388      	cbz	r0, 8014030 <rcl_action_take_result_request+0x70>
 8013fcc:	460d      	mov	r5, r1
 8013fce:	4616      	mov	r6, r2
 8013fd0:	f7fe faf0 	bl	80125b4 <rcl_service_is_valid>
 8013fd4:	b338      	cbz	r0, 8014026 <rcl_action_take_result_request+0x66>
 8013fd6:	6820      	ldr	r0, [r4, #0]
 8013fd8:	3004      	adds	r0, #4
 8013fda:	f7fe faeb 	bl	80125b4 <rcl_service_is_valid>
 8013fde:	b310      	cbz	r0, 8014026 <rcl_action_take_result_request+0x66>
 8013fe0:	6820      	ldr	r0, [r4, #0]
 8013fe2:	3008      	adds	r0, #8
 8013fe4:	f7fe fae6 	bl	80125b4 <rcl_service_is_valid>
 8013fe8:	b1e8      	cbz	r0, 8014026 <rcl_action_take_result_request+0x66>
 8013fea:	6820      	ldr	r0, [r4, #0]
 8013fec:	300c      	adds	r0, #12
 8013fee:	f7f7 ffb9 	bl	800bf64 <rcl_publisher_is_valid>
 8013ff2:	b1c0      	cbz	r0, 8014026 <rcl_action_take_result_request+0x66>
 8013ff4:	6820      	ldr	r0, [r4, #0]
 8013ff6:	3010      	adds	r0, #16
 8013ff8:	f7f7 ffb4 	bl	800bf64 <rcl_publisher_is_valid>
 8013ffc:	b198      	cbz	r0, 8014026 <rcl_action_take_result_request+0x66>
 8013ffe:	b1d5      	cbz	r5, 8014036 <rcl_action_take_result_request+0x76>
 8014000:	b1ce      	cbz	r6, 8014036 <rcl_action_take_result_request+0x76>
 8014002:	6820      	ldr	r0, [r4, #0]
 8014004:	4632      	mov	r2, r6
 8014006:	4629      	mov	r1, r5
 8014008:	3008      	adds	r0, #8
 801400a:	f7fe fa7b 	bl	8012504 <rcl_take_request>
 801400e:	b148      	cbz	r0, 8014024 <rcl_action_take_result_request+0x64>
 8014010:	280a      	cmp	r0, #10
 8014012:	d007      	beq.n	8014024 <rcl_action_take_result_request+0x64>
 8014014:	f240 2259 	movw	r2, #601	@ 0x259
 8014018:	f640 0399 	movw	r3, #2201	@ 0x899
 801401c:	4290      	cmp	r0, r2
 801401e:	bf0c      	ite	eq
 8014020:	4618      	moveq	r0, r3
 8014022:	2001      	movne	r0, #1
 8014024:	bd70      	pop	{r4, r5, r6, pc}
 8014026:	f7f8 ff17 	bl	800ce58 <rcutils_reset_error>
 801402a:	f640 0098 	movw	r0, #2200	@ 0x898
 801402e:	bd70      	pop	{r4, r5, r6, pc}
 8014030:	f640 0098 	movw	r0, #2200	@ 0x898
 8014034:	bd70      	pop	{r4, r5, r6, pc}
 8014036:	200b      	movs	r0, #11
 8014038:	bd70      	pop	{r4, r5, r6, pc}
 801403a:	f640 0098 	movw	r0, #2200	@ 0x898
 801403e:	4770      	bx	lr

08014040 <rcl_action_take_cancel_request>:
 8014040:	2800      	cmp	r0, #0
 8014042:	d03a      	beq.n	80140ba <rcl_action_take_cancel_request+0x7a>
 8014044:	b570      	push	{r4, r5, r6, lr}
 8014046:	4604      	mov	r4, r0
 8014048:	6800      	ldr	r0, [r0, #0]
 801404a:	b388      	cbz	r0, 80140b0 <rcl_action_take_cancel_request+0x70>
 801404c:	460d      	mov	r5, r1
 801404e:	4616      	mov	r6, r2
 8014050:	f7fe fab0 	bl	80125b4 <rcl_service_is_valid>
 8014054:	b338      	cbz	r0, 80140a6 <rcl_action_take_cancel_request+0x66>
 8014056:	6820      	ldr	r0, [r4, #0]
 8014058:	3004      	adds	r0, #4
 801405a:	f7fe faab 	bl	80125b4 <rcl_service_is_valid>
 801405e:	b310      	cbz	r0, 80140a6 <rcl_action_take_cancel_request+0x66>
 8014060:	6820      	ldr	r0, [r4, #0]
 8014062:	3008      	adds	r0, #8
 8014064:	f7fe faa6 	bl	80125b4 <rcl_service_is_valid>
 8014068:	b1e8      	cbz	r0, 80140a6 <rcl_action_take_cancel_request+0x66>
 801406a:	6820      	ldr	r0, [r4, #0]
 801406c:	300c      	adds	r0, #12
 801406e:	f7f7 ff79 	bl	800bf64 <rcl_publisher_is_valid>
 8014072:	b1c0      	cbz	r0, 80140a6 <rcl_action_take_cancel_request+0x66>
 8014074:	6820      	ldr	r0, [r4, #0]
 8014076:	3010      	adds	r0, #16
 8014078:	f7f7 ff74 	bl	800bf64 <rcl_publisher_is_valid>
 801407c:	b198      	cbz	r0, 80140a6 <rcl_action_take_cancel_request+0x66>
 801407e:	b1d5      	cbz	r5, 80140b6 <rcl_action_take_cancel_request+0x76>
 8014080:	b1ce      	cbz	r6, 80140b6 <rcl_action_take_cancel_request+0x76>
 8014082:	6820      	ldr	r0, [r4, #0]
 8014084:	4632      	mov	r2, r6
 8014086:	4629      	mov	r1, r5
 8014088:	3004      	adds	r0, #4
 801408a:	f7fe fa3b 	bl	8012504 <rcl_take_request>
 801408e:	b148      	cbz	r0, 80140a4 <rcl_action_take_cancel_request+0x64>
 8014090:	280a      	cmp	r0, #10
 8014092:	d007      	beq.n	80140a4 <rcl_action_take_cancel_request+0x64>
 8014094:	f240 2259 	movw	r2, #601	@ 0x259
 8014098:	f640 0399 	movw	r3, #2201	@ 0x899
 801409c:	4290      	cmp	r0, r2
 801409e:	bf0c      	ite	eq
 80140a0:	4618      	moveq	r0, r3
 80140a2:	2001      	movne	r0, #1
 80140a4:	bd70      	pop	{r4, r5, r6, pc}
 80140a6:	f7f8 fed7 	bl	800ce58 <rcutils_reset_error>
 80140aa:	f640 0098 	movw	r0, #2200	@ 0x898
 80140ae:	bd70      	pop	{r4, r5, r6, pc}
 80140b0:	f640 0098 	movw	r0, #2200	@ 0x898
 80140b4:	bd70      	pop	{r4, r5, r6, pc}
 80140b6:	200b      	movs	r0, #11
 80140b8:	bd70      	pop	{r4, r5, r6, pc}
 80140ba:	f640 0098 	movw	r0, #2200	@ 0x898
 80140be:	4770      	bx	lr

080140c0 <rcl_action_send_cancel_response>:
 80140c0:	b398      	cbz	r0, 801412a <rcl_action_send_cancel_response+0x6a>
 80140c2:	b570      	push	{r4, r5, r6, lr}
 80140c4:	4604      	mov	r4, r0
 80140c6:	6800      	ldr	r0, [r0, #0]
 80140c8:	b350      	cbz	r0, 8014120 <rcl_action_send_cancel_response+0x60>
 80140ca:	460d      	mov	r5, r1
 80140cc:	4616      	mov	r6, r2
 80140ce:	f7fe fa71 	bl	80125b4 <rcl_service_is_valid>
 80140d2:	b300      	cbz	r0, 8014116 <rcl_action_send_cancel_response+0x56>
 80140d4:	6820      	ldr	r0, [r4, #0]
 80140d6:	3004      	adds	r0, #4
 80140d8:	f7fe fa6c 	bl	80125b4 <rcl_service_is_valid>
 80140dc:	b1d8      	cbz	r0, 8014116 <rcl_action_send_cancel_response+0x56>
 80140de:	6820      	ldr	r0, [r4, #0]
 80140e0:	3008      	adds	r0, #8
 80140e2:	f7fe fa67 	bl	80125b4 <rcl_service_is_valid>
 80140e6:	b1b0      	cbz	r0, 8014116 <rcl_action_send_cancel_response+0x56>
 80140e8:	6820      	ldr	r0, [r4, #0]
 80140ea:	300c      	adds	r0, #12
 80140ec:	f7f7 ff3a 	bl	800bf64 <rcl_publisher_is_valid>
 80140f0:	b188      	cbz	r0, 8014116 <rcl_action_send_cancel_response+0x56>
 80140f2:	6820      	ldr	r0, [r4, #0]
 80140f4:	3010      	adds	r0, #16
 80140f6:	f7f7 ff35 	bl	800bf64 <rcl_publisher_is_valid>
 80140fa:	b160      	cbz	r0, 8014116 <rcl_action_send_cancel_response+0x56>
 80140fc:	b19d      	cbz	r5, 8014126 <rcl_action_send_cancel_response+0x66>
 80140fe:	b196      	cbz	r6, 8014126 <rcl_action_send_cancel_response+0x66>
 8014100:	6820      	ldr	r0, [r4, #0]
 8014102:	4632      	mov	r2, r6
 8014104:	4629      	mov	r1, r5
 8014106:	3004      	adds	r0, #4
 8014108:	f7fe fa3c 	bl	8012584 <rcl_send_response>
 801410c:	b110      	cbz	r0, 8014114 <rcl_action_send_cancel_response+0x54>
 801410e:	2802      	cmp	r0, #2
 8014110:	bf18      	it	ne
 8014112:	2001      	movne	r0, #1
 8014114:	bd70      	pop	{r4, r5, r6, pc}
 8014116:	f7f8 fe9f 	bl	800ce58 <rcutils_reset_error>
 801411a:	f640 0098 	movw	r0, #2200	@ 0x898
 801411e:	bd70      	pop	{r4, r5, r6, pc}
 8014120:	f640 0098 	movw	r0, #2200	@ 0x898
 8014124:	bd70      	pop	{r4, r5, r6, pc}
 8014126:	200b      	movs	r0, #11
 8014128:	bd70      	pop	{r4, r5, r6, pc}
 801412a:	f640 0098 	movw	r0, #2200	@ 0x898
 801412e:	4770      	bx	lr

08014130 <rcl_action_wait_set_add_action_server>:
 8014130:	2800      	cmp	r0, #0
 8014132:	d04d      	beq.n	80141d0 <rcl_action_wait_set_add_action_server+0xa0>
 8014134:	b570      	push	{r4, r5, r6, lr}
 8014136:	460c      	mov	r4, r1
 8014138:	b159      	cbz	r1, 8014152 <rcl_action_wait_set_add_action_server+0x22>
 801413a:	4605      	mov	r5, r0
 801413c:	6808      	ldr	r0, [r1, #0]
 801413e:	b140      	cbz	r0, 8014152 <rcl_action_wait_set_add_action_server+0x22>
 8014140:	4616      	mov	r6, r2
 8014142:	f7fe fa37 	bl	80125b4 <rcl_service_is_valid>
 8014146:	b120      	cbz	r0, 8014152 <rcl_action_wait_set_add_action_server+0x22>
 8014148:	6820      	ldr	r0, [r4, #0]
 801414a:	3004      	adds	r0, #4
 801414c:	f7fe fa32 	bl	80125b4 <rcl_service_is_valid>
 8014150:	b910      	cbnz	r0, 8014158 <rcl_action_wait_set_add_action_server+0x28>
 8014152:	f640 0098 	movw	r0, #2200	@ 0x898
 8014156:	bd70      	pop	{r4, r5, r6, pc}
 8014158:	6820      	ldr	r0, [r4, #0]
 801415a:	3008      	adds	r0, #8
 801415c:	f7fe fa2a 	bl	80125b4 <rcl_service_is_valid>
 8014160:	2800      	cmp	r0, #0
 8014162:	d0f6      	beq.n	8014152 <rcl_action_wait_set_add_action_server+0x22>
 8014164:	6820      	ldr	r0, [r4, #0]
 8014166:	300c      	adds	r0, #12
 8014168:	f7f7 ff14 	bl	800bf94 <rcl_publisher_is_valid_except_context>
 801416c:	2800      	cmp	r0, #0
 801416e:	d0f0      	beq.n	8014152 <rcl_action_wait_set_add_action_server+0x22>
 8014170:	6820      	ldr	r0, [r4, #0]
 8014172:	3010      	adds	r0, #16
 8014174:	f7f7 ff0e 	bl	800bf94 <rcl_publisher_is_valid_except_context>
 8014178:	2800      	cmp	r0, #0
 801417a:	d0ea      	beq.n	8014152 <rcl_action_wait_set_add_action_server+0x22>
 801417c:	6821      	ldr	r1, [r4, #0]
 801417e:	4628      	mov	r0, r5
 8014180:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8014184:	f7ff face 	bl	8013724 <rcl_wait_set_add_service>
 8014188:	2800      	cmp	r0, #0
 801418a:	d1e4      	bne.n	8014156 <rcl_action_wait_set_add_action_server+0x26>
 801418c:	6821      	ldr	r1, [r4, #0]
 801418e:	4628      	mov	r0, r5
 8014190:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8014194:	3104      	adds	r1, #4
 8014196:	f7ff fac5 	bl	8013724 <rcl_wait_set_add_service>
 801419a:	2800      	cmp	r0, #0
 801419c:	d1db      	bne.n	8014156 <rcl_action_wait_set_add_action_server+0x26>
 801419e:	6821      	ldr	r1, [r4, #0]
 80141a0:	4628      	mov	r0, r5
 80141a2:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80141a6:	3108      	adds	r1, #8
 80141a8:	f7ff fabc 	bl	8013724 <rcl_wait_set_add_service>
 80141ac:	2800      	cmp	r0, #0
 80141ae:	d1d2      	bne.n	8014156 <rcl_action_wait_set_add_action_server+0x26>
 80141b0:	6821      	ldr	r1, [r4, #0]
 80141b2:	4628      	mov	r0, r5
 80141b4:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80141b8:	3114      	adds	r1, #20
 80141ba:	f7ff fa57 	bl	801366c <rcl_wait_set_add_timer>
 80141be:	2800      	cmp	r0, #0
 80141c0:	d1c9      	bne.n	8014156 <rcl_action_wait_set_add_action_server+0x26>
 80141c2:	2e00      	cmp	r6, #0
 80141c4:	d0c7      	beq.n	8014156 <rcl_action_wait_set_add_action_server+0x26>
 80141c6:	6823      	ldr	r3, [r4, #0]
 80141c8:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 80141cc:	6033      	str	r3, [r6, #0]
 80141ce:	bd70      	pop	{r4, r5, r6, pc}
 80141d0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80141d4:	4770      	bx	lr
 80141d6:	bf00      	nop

080141d8 <rcl_action_server_wait_set_get_entities_ready>:
 80141d8:	2800      	cmp	r0, #0
 80141da:	d05a      	beq.n	8014292 <rcl_action_server_wait_set_get_entities_ready+0xba>
 80141dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141de:	460c      	mov	r4, r1
 80141e0:	b161      	cbz	r1, 80141fc <rcl_action_server_wait_set_get_entities_ready+0x24>
 80141e2:	4605      	mov	r5, r0
 80141e4:	6808      	ldr	r0, [r1, #0]
 80141e6:	b148      	cbz	r0, 80141fc <rcl_action_server_wait_set_get_entities_ready+0x24>
 80141e8:	4616      	mov	r6, r2
 80141ea:	461f      	mov	r7, r3
 80141ec:	f7fe f9e2 	bl	80125b4 <rcl_service_is_valid>
 80141f0:	b120      	cbz	r0, 80141fc <rcl_action_server_wait_set_get_entities_ready+0x24>
 80141f2:	6820      	ldr	r0, [r4, #0]
 80141f4:	3004      	adds	r0, #4
 80141f6:	f7fe f9dd 	bl	80125b4 <rcl_service_is_valid>
 80141fa:	b910      	cbnz	r0, 8014202 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 80141fc:	f640 0098 	movw	r0, #2200	@ 0x898
 8014200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014202:	6820      	ldr	r0, [r4, #0]
 8014204:	3008      	adds	r0, #8
 8014206:	f7fe f9d5 	bl	80125b4 <rcl_service_is_valid>
 801420a:	2800      	cmp	r0, #0
 801420c:	d0f6      	beq.n	80141fc <rcl_action_server_wait_set_get_entities_ready+0x24>
 801420e:	6820      	ldr	r0, [r4, #0]
 8014210:	300c      	adds	r0, #12
 8014212:	f7f7 febf 	bl	800bf94 <rcl_publisher_is_valid_except_context>
 8014216:	2800      	cmp	r0, #0
 8014218:	d0f0      	beq.n	80141fc <rcl_action_server_wait_set_get_entities_ready+0x24>
 801421a:	6820      	ldr	r0, [r4, #0]
 801421c:	3010      	adds	r0, #16
 801421e:	f7f7 feb9 	bl	800bf94 <rcl_publisher_is_valid_except_context>
 8014222:	2800      	cmp	r0, #0
 8014224:	d0ea      	beq.n	80141fc <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014226:	b3be      	cbz	r6, 8014298 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8014228:	b3b7      	cbz	r7, 8014298 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801422a:	9b06      	ldr	r3, [sp, #24]
 801422c:	b3a3      	cbz	r3, 8014298 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801422e:	9b07      	ldr	r3, [sp, #28]
 8014230:	b393      	cbz	r3, 8014298 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8014232:	6821      	ldr	r1, [r4, #0]
 8014234:	692a      	ldr	r2, [r5, #16]
 8014236:	6a2c      	ldr	r4, [r5, #32]
 8014238:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 801423c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8014240:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8014244:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8014248:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 801424c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8014250:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8014254:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8014258:	1a64      	subs	r4, r4, r1
 801425a:	fab4 f484 	clz	r4, r4
 801425e:	0964      	lsrs	r4, r4, #5
 8014260:	7034      	strb	r4, [r6, #0]
 8014262:	1d0c      	adds	r4, r1, #4
 8014264:	1b1b      	subs	r3, r3, r4
 8014266:	fab3 f383 	clz	r3, r3
 801426a:	095b      	lsrs	r3, r3, #5
 801426c:	f101 0408 	add.w	r4, r1, #8
 8014270:	703b      	strb	r3, [r7, #0]
 8014272:	f101 0314 	add.w	r3, r1, #20
 8014276:	1b01      	subs	r1, r0, r4
 8014278:	1ad3      	subs	r3, r2, r3
 801427a:	fab1 f181 	clz	r1, r1
 801427e:	9a06      	ldr	r2, [sp, #24]
 8014280:	0949      	lsrs	r1, r1, #5
 8014282:	7011      	strb	r1, [r2, #0]
 8014284:	fab3 f383 	clz	r3, r3
 8014288:	9a07      	ldr	r2, [sp, #28]
 801428a:	095b      	lsrs	r3, r3, #5
 801428c:	2000      	movs	r0, #0
 801428e:	7013      	strb	r3, [r2, #0]
 8014290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014292:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014296:	4770      	bx	lr
 8014298:	200b      	movs	r0, #11
 801429a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801429c <_execute_event_handler>:
 801429c:	2002      	movs	r0, #2
 801429e:	4770      	bx	lr

080142a0 <_cancel_goal_event_handler>:
 80142a0:	2003      	movs	r0, #3
 80142a2:	4770      	bx	lr

080142a4 <_succeed_event_handler>:
 80142a4:	2004      	movs	r0, #4
 80142a6:	4770      	bx	lr

080142a8 <_abort_event_handler>:
 80142a8:	2006      	movs	r0, #6
 80142aa:	4770      	bx	lr

080142ac <_canceled_event_handler>:
 80142ac:	2005      	movs	r0, #5
 80142ae:	4770      	bx	lr

080142b0 <rcl_action_transition_goal_state>:
 80142b0:	b2c2      	uxtb	r2, r0
 80142b2:	2a06      	cmp	r2, #6
 80142b4:	d80c      	bhi.n	80142d0 <rcl_action_transition_goal_state+0x20>
 80142b6:	2904      	cmp	r1, #4
 80142b8:	d80a      	bhi.n	80142d0 <rcl_action_transition_goal_state+0x20>
 80142ba:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80142be:	b410      	push	{r4}
 80142c0:	1853      	adds	r3, r2, r1
 80142c2:	4c06      	ldr	r4, [pc, #24]	@ (80142dc <rcl_action_transition_goal_state+0x2c>)
 80142c4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80142c8:	b123      	cbz	r3, 80142d4 <rcl_action_transition_goal_state+0x24>
 80142ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80142ce:	4718      	bx	r3
 80142d0:	2000      	movs	r0, #0
 80142d2:	4770      	bx	lr
 80142d4:	2000      	movs	r0, #0
 80142d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80142da:	4770      	bx	lr
 80142dc:	08018e00 	.word	0x08018e00

080142e0 <rcl_action_get_zero_initialized_cancel_response>:
 80142e0:	b510      	push	{r4, lr}
 80142e2:	4c07      	ldr	r4, [pc, #28]	@ (8014300 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 80142e4:	4686      	mov	lr, r0
 80142e6:	4684      	mov	ip, r0
 80142e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80142ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80142ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80142f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80142f4:	6823      	ldr	r3, [r4, #0]
 80142f6:	f8cc 3000 	str.w	r3, [ip]
 80142fa:	4670      	mov	r0, lr
 80142fc:	bd10      	pop	{r4, pc}
 80142fe:	bf00      	nop
 8014300:	08018e8c 	.word	0x08018e8c

08014304 <rclc_action_send_result_request>:
 8014304:	b1d0      	cbz	r0, 801433c <rclc_action_send_result_request+0x38>
 8014306:	b500      	push	{lr}
 8014308:	4684      	mov	ip, r0
 801430a:	b087      	sub	sp, #28
 801430c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8014310:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8014314:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8014318:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801431c:	f10d 0e08 	add.w	lr, sp, #8
 8014320:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014324:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8014328:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801432c:	a902      	add	r1, sp, #8
 801432e:	3010      	adds	r0, #16
 8014330:	f7ff fbda 	bl	8013ae8 <rcl_action_send_result_request>
 8014334:	b920      	cbnz	r0, 8014340 <rclc_action_send_result_request+0x3c>
 8014336:	b007      	add	sp, #28
 8014338:	f85d fb04 	ldr.w	pc, [sp], #4
 801433c:	200b      	movs	r0, #11
 801433e:	4770      	bx	lr
 8014340:	9001      	str	r0, [sp, #4]
 8014342:	f7f8 fd89 	bl	800ce58 <rcutils_reset_error>
 8014346:	9801      	ldr	r0, [sp, #4]
 8014348:	b007      	add	sp, #28
 801434a:	f85d fb04 	ldr.w	pc, [sp], #4
 801434e:	bf00      	nop

08014350 <rclc_action_take_goal_handle>:
 8014350:	b160      	cbz	r0, 801436c <rclc_action_take_goal_handle+0x1c>
 8014352:	6883      	ldr	r3, [r0, #8]
 8014354:	b143      	cbz	r3, 8014368 <rclc_action_take_goal_handle+0x18>
 8014356:	6819      	ldr	r1, [r3, #0]
 8014358:	6081      	str	r1, [r0, #8]
 801435a:	2200      	movs	r2, #0
 801435c:	721a      	strb	r2, [r3, #8]
 801435e:	68c1      	ldr	r1, [r0, #12]
 8014360:	6019      	str	r1, [r3, #0]
 8014362:	621a      	str	r2, [r3, #32]
 8014364:	849a      	strh	r2, [r3, #36]	@ 0x24
 8014366:	60c3      	str	r3, [r0, #12]
 8014368:	4618      	mov	r0, r3
 801436a:	4770      	bx	lr
 801436c:	4603      	mov	r3, r0
 801436e:	e7fb      	b.n	8014368 <rclc_action_take_goal_handle+0x18>

08014370 <rclc_action_remove_used_goal_handle>:
 8014370:	b180      	cbz	r0, 8014394 <rclc_action_remove_used_goal_handle+0x24>
 8014372:	b179      	cbz	r1, 8014394 <rclc_action_remove_used_goal_handle+0x24>
 8014374:	68c3      	ldr	r3, [r0, #12]
 8014376:	4299      	cmp	r1, r3
 8014378:	d00d      	beq.n	8014396 <rclc_action_remove_used_goal_handle+0x26>
 801437a:	b12b      	cbz	r3, 8014388 <rclc_action_remove_used_goal_handle+0x18>
 801437c:	681a      	ldr	r2, [r3, #0]
 801437e:	4291      	cmp	r1, r2
 8014380:	d003      	beq.n	801438a <rclc_action_remove_used_goal_handle+0x1a>
 8014382:	4613      	mov	r3, r2
 8014384:	2b00      	cmp	r3, #0
 8014386:	d1f9      	bne.n	801437c <rclc_action_remove_used_goal_handle+0xc>
 8014388:	4770      	bx	lr
 801438a:	680a      	ldr	r2, [r1, #0]
 801438c:	601a      	str	r2, [r3, #0]
 801438e:	6883      	ldr	r3, [r0, #8]
 8014390:	600b      	str	r3, [r1, #0]
 8014392:	6081      	str	r1, [r0, #8]
 8014394:	4770      	bx	lr
 8014396:	680b      	ldr	r3, [r1, #0]
 8014398:	60c3      	str	r3, [r0, #12]
 801439a:	e7f8      	b.n	801438e <rclc_action_remove_used_goal_handle+0x1e>

0801439c <rclc_action_find_goal_handle_by_uuid>:
 801439c:	b538      	push	{r3, r4, r5, lr}
 801439e:	b180      	cbz	r0, 80143c2 <rclc_action_find_goal_handle_by_uuid+0x26>
 80143a0:	460d      	mov	r5, r1
 80143a2:	b181      	cbz	r1, 80143c6 <rclc_action_find_goal_handle_by_uuid+0x2a>
 80143a4:	68c4      	ldr	r4, [r0, #12]
 80143a6:	b914      	cbnz	r4, 80143ae <rclc_action_find_goal_handle_by_uuid+0x12>
 80143a8:	e009      	b.n	80143be <rclc_action_find_goal_handle_by_uuid+0x22>
 80143aa:	6824      	ldr	r4, [r4, #0]
 80143ac:	b13c      	cbz	r4, 80143be <rclc_action_find_goal_handle_by_uuid+0x22>
 80143ae:	f104 0009 	add.w	r0, r4, #9
 80143b2:	2210      	movs	r2, #16
 80143b4:	4629      	mov	r1, r5
 80143b6:	f003 f97f 	bl	80176b8 <memcmp>
 80143ba:	2800      	cmp	r0, #0
 80143bc:	d1f5      	bne.n	80143aa <rclc_action_find_goal_handle_by_uuid+0xe>
 80143be:	4620      	mov	r0, r4
 80143c0:	bd38      	pop	{r3, r4, r5, pc}
 80143c2:	4604      	mov	r4, r0
 80143c4:	e7fb      	b.n	80143be <rclc_action_find_goal_handle_by_uuid+0x22>
 80143c6:	460c      	mov	r4, r1
 80143c8:	e7f9      	b.n	80143be <rclc_action_find_goal_handle_by_uuid+0x22>
 80143ca:	bf00      	nop

080143cc <rclc_action_find_first_handle_by_status>:
 80143cc:	b140      	cbz	r0, 80143e0 <rclc_action_find_first_handle_by_status+0x14>
 80143ce:	68c0      	ldr	r0, [r0, #12]
 80143d0:	b910      	cbnz	r0, 80143d8 <rclc_action_find_first_handle_by_status+0xc>
 80143d2:	e005      	b.n	80143e0 <rclc_action_find_first_handle_by_status+0x14>
 80143d4:	6800      	ldr	r0, [r0, #0]
 80143d6:	b118      	cbz	r0, 80143e0 <rclc_action_find_first_handle_by_status+0x14>
 80143d8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80143dc:	428b      	cmp	r3, r1
 80143de:	d1f9      	bne.n	80143d4 <rclc_action_find_first_handle_by_status+0x8>
 80143e0:	4770      	bx	lr
 80143e2:	bf00      	nop

080143e4 <rclc_action_find_first_terminated_handle>:
 80143e4:	b140      	cbz	r0, 80143f8 <rclc_action_find_first_terminated_handle+0x14>
 80143e6:	68c0      	ldr	r0, [r0, #12]
 80143e8:	b910      	cbnz	r0, 80143f0 <rclc_action_find_first_terminated_handle+0xc>
 80143ea:	e005      	b.n	80143f8 <rclc_action_find_first_terminated_handle+0x14>
 80143ec:	6800      	ldr	r0, [r0, #0]
 80143ee:	b118      	cbz	r0, 80143f8 <rclc_action_find_first_terminated_handle+0x14>
 80143f0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80143f4:	2b03      	cmp	r3, #3
 80143f6:	ddf9      	ble.n	80143ec <rclc_action_find_first_terminated_handle+0x8>
 80143f8:	4770      	bx	lr
 80143fa:	bf00      	nop

080143fc <rclc_action_find_handle_by_goal_request_sequence_number>:
 80143fc:	b170      	cbz	r0, 801441c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80143fe:	68c0      	ldr	r0, [r0, #12]
 8014400:	b160      	cbz	r0, 801441c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8014402:	b410      	push	{r4}
 8014404:	e001      	b.n	801440a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8014406:	6800      	ldr	r0, [r0, #0]
 8014408:	b128      	cbz	r0, 8014416 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801440a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801440e:	4299      	cmp	r1, r3
 8014410:	bf08      	it	eq
 8014412:	4294      	cmpeq	r4, r2
 8014414:	d1f7      	bne.n	8014406 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8014416:	f85d 4b04 	ldr.w	r4, [sp], #4
 801441a:	4770      	bx	lr
 801441c:	4770      	bx	lr
 801441e:	bf00      	nop

08014420 <rclc_action_find_handle_by_result_request_sequence_number>:
 8014420:	b170      	cbz	r0, 8014440 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8014422:	68c0      	ldr	r0, [r0, #12]
 8014424:	b160      	cbz	r0, 8014440 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8014426:	b410      	push	{r4}
 8014428:	e001      	b.n	801442e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801442a:	6800      	ldr	r0, [r0, #0]
 801442c:	b128      	cbz	r0, 801443a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801442e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8014432:	4299      	cmp	r1, r3
 8014434:	bf08      	it	eq
 8014436:	4294      	cmpeq	r4, r2
 8014438:	d1f7      	bne.n	801442a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801443a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801443e:	4770      	bx	lr
 8014440:	4770      	bx	lr
 8014442:	bf00      	nop

08014444 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8014444:	b170      	cbz	r0, 8014464 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8014446:	68c0      	ldr	r0, [r0, #12]
 8014448:	b160      	cbz	r0, 8014464 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801444a:	b410      	push	{r4}
 801444c:	e001      	b.n	8014452 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801444e:	6800      	ldr	r0, [r0, #0]
 8014450:	b128      	cbz	r0, 801445e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8014452:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8014456:	4299      	cmp	r1, r3
 8014458:	bf08      	it	eq
 801445a:	4294      	cmpeq	r4, r2
 801445c:	d1f7      	bne.n	801444e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801445e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014462:	4770      	bx	lr
 8014464:	4770      	bx	lr
 8014466:	bf00      	nop

08014468 <rclc_action_find_first_handle_with_goal_response>:
 8014468:	b140      	cbz	r0, 801447c <rclc_action_find_first_handle_with_goal_response+0x14>
 801446a:	68c0      	ldr	r0, [r0, #12]
 801446c:	b910      	cbnz	r0, 8014474 <rclc_action_find_first_handle_with_goal_response+0xc>
 801446e:	e005      	b.n	801447c <rclc_action_find_first_handle_with_goal_response+0x14>
 8014470:	6800      	ldr	r0, [r0, #0]
 8014472:	b118      	cbz	r0, 801447c <rclc_action_find_first_handle_with_goal_response+0x14>
 8014474:	f890 3020 	ldrb.w	r3, [r0, #32]
 8014478:	2b00      	cmp	r3, #0
 801447a:	d0f9      	beq.n	8014470 <rclc_action_find_first_handle_with_goal_response+0x8>
 801447c:	4770      	bx	lr
 801447e:	bf00      	nop

08014480 <rclc_action_find_first_handle_with_result_response>:
 8014480:	b140      	cbz	r0, 8014494 <rclc_action_find_first_handle_with_result_response+0x14>
 8014482:	68c0      	ldr	r0, [r0, #12]
 8014484:	b910      	cbnz	r0, 801448c <rclc_action_find_first_handle_with_result_response+0xc>
 8014486:	e005      	b.n	8014494 <rclc_action_find_first_handle_with_result_response+0x14>
 8014488:	6800      	ldr	r0, [r0, #0]
 801448a:	b118      	cbz	r0, 8014494 <rclc_action_find_first_handle_with_result_response+0x14>
 801448c:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8014490:	2b00      	cmp	r3, #0
 8014492:	d0f9      	beq.n	8014488 <rclc_action_find_first_handle_with_result_response+0x8>
 8014494:	4770      	bx	lr
 8014496:	bf00      	nop

08014498 <rclc_action_server_response_goal_request>:
 8014498:	b198      	cbz	r0, 80144c2 <rclc_action_server_response_goal_request+0x2a>
 801449a:	b510      	push	{r4, lr}
 801449c:	6844      	ldr	r4, [r0, #4]
 801449e:	b086      	sub	sp, #24
 80144a0:	2200      	movs	r2, #0
 80144a2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80144a6:	460b      	mov	r3, r1
 80144a8:	9205      	str	r2, [sp, #20]
 80144aa:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80144ae:	aa03      	add	r2, sp, #12
 80144b0:	f104 0010 	add.w	r0, r4, #16
 80144b4:	f88d 300c 	strb.w	r3, [sp, #12]
 80144b8:	f7ff fd4a 	bl	8013f50 <rcl_action_send_goal_response>
 80144bc:	b918      	cbnz	r0, 80144c6 <rclc_action_server_response_goal_request+0x2e>
 80144be:	b006      	add	sp, #24
 80144c0:	bd10      	pop	{r4, pc}
 80144c2:	200b      	movs	r0, #11
 80144c4:	4770      	bx	lr
 80144c6:	9001      	str	r0, [sp, #4]
 80144c8:	f7f8 fcc6 	bl	800ce58 <rcutils_reset_error>
 80144cc:	9801      	ldr	r0, [sp, #4]
 80144ce:	b006      	add	sp, #24
 80144d0:	bd10      	pop	{r4, pc}
 80144d2:	bf00      	nop
 80144d4:	0000      	movs	r0, r0
	...

080144d8 <rclc_action_server_goal_cancel_accept>:
 80144d8:	b310      	cbz	r0, 8014520 <rclc_action_server_goal_cancel_accept+0x48>
 80144da:	b510      	push	{r4, lr}
 80144dc:	b090      	sub	sp, #64	@ 0x40
 80144de:	4604      	mov	r4, r0
 80144e0:	a806      	add	r0, sp, #24
 80144e2:	f7ff fefd 	bl	80142e0 <rcl_action_get_zero_initialized_cancel_response>
 80144e6:	2300      	movs	r3, #0
 80144e8:	f8d4 0009 	ldr.w	r0, [r4, #9]
 80144ec:	f8d4 100d 	ldr.w	r1, [r4, #13]
 80144f0:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80144f4:	f88d 3018 	strb.w	r3, [sp, #24]
 80144f8:	f8d4 3015 	ldr.w	r3, [r4, #21]
 80144fc:	f8cd d01c 	str.w	sp, [sp, #28]
 8014500:	46ec      	mov	ip, sp
 8014502:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014506:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8014528 <rclc_action_server_goal_cancel_accept+0x50>
 801450a:	6860      	ldr	r0, [r4, #4]
 801450c:	aa06      	add	r2, sp, #24
 801450e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8014512:	3010      	adds	r0, #16
 8014514:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014518:	f7ff fdd2 	bl	80140c0 <rcl_action_send_cancel_response>
 801451c:	b010      	add	sp, #64	@ 0x40
 801451e:	bd10      	pop	{r4, pc}
 8014520:	200b      	movs	r0, #11
 8014522:	4770      	bx	lr
 8014524:	f3af 8000 	nop.w
 8014528:	00000001 	.word	0x00000001
 801452c:	00000001 	.word	0x00000001

08014530 <rclc_action_server_goal_cancel_reject>:
 8014530:	b082      	sub	sp, #8
 8014532:	b530      	push	{r4, r5, lr}
 8014534:	b08b      	sub	sp, #44	@ 0x2c
 8014536:	ac0e      	add	r4, sp, #56	@ 0x38
 8014538:	e884 000c 	stmia.w	r4, {r2, r3}
 801453c:	b188      	cbz	r0, 8014562 <rclc_action_server_goal_cancel_reject+0x32>
 801453e:	4604      	mov	r4, r0
 8014540:	a801      	add	r0, sp, #4
 8014542:	460d      	mov	r5, r1
 8014544:	f7ff fecc 	bl	80142e0 <rcl_action_get_zero_initialized_cancel_response>
 8014548:	aa01      	add	r2, sp, #4
 801454a:	a90e      	add	r1, sp, #56	@ 0x38
 801454c:	f104 0010 	add.w	r0, r4, #16
 8014550:	f88d 5004 	strb.w	r5, [sp, #4]
 8014554:	f7ff fdb4 	bl	80140c0 <rcl_action_send_cancel_response>
 8014558:	b00b      	add	sp, #44	@ 0x2c
 801455a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801455e:	b002      	add	sp, #8
 8014560:	4770      	bx	lr
 8014562:	200b      	movs	r0, #11
 8014564:	b00b      	add	sp, #44	@ 0x2c
 8014566:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801456a:	b002      	add	sp, #8
 801456c:	4770      	bx	lr
 801456e:	bf00      	nop

08014570 <__atomic_load_8>:
 8014570:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8014574:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8014578:	4a15      	ldr	r2, [pc, #84]	@ (80145d0 <__atomic_load_8+0x60>)
 801457a:	4b16      	ldr	r3, [pc, #88]	@ (80145d4 <__atomic_load_8+0x64>)
 801457c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8014580:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8014584:	fb02 f101 	mul.w	r1, r2, r1
 8014588:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801458c:	fba3 2301 	umull	r2, r3, r3, r1
 8014590:	091b      	lsrs	r3, r3, #4
 8014592:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8014596:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801459a:	b4d0      	push	{r4, r6, r7}
 801459c:	4c0e      	ldr	r4, [pc, #56]	@ (80145d8 <__atomic_load_8+0x68>)
 801459e:	1ac9      	subs	r1, r1, r3
 80145a0:	1862      	adds	r2, r4, r1
 80145a2:	f04f 0c01 	mov.w	ip, #1
 80145a6:	e8d2 3f4f 	ldrexb	r3, [r2]
 80145aa:	e8c2 cf46 	strexb	r6, ip, [r2]
 80145ae:	2e00      	cmp	r6, #0
 80145b0:	d1f9      	bne.n	80145a6 <__atomic_load_8+0x36>
 80145b2:	f3bf 8f5b 	dmb	ish
 80145b6:	b2db      	uxtb	r3, r3
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d1f4      	bne.n	80145a6 <__atomic_load_8+0x36>
 80145bc:	e9d0 6700 	ldrd	r6, r7, [r0]
 80145c0:	f3bf 8f5b 	dmb	ish
 80145c4:	5463      	strb	r3, [r4, r1]
 80145c6:	4630      	mov	r0, r6
 80145c8:	4639      	mov	r1, r7
 80145ca:	bcd0      	pop	{r4, r6, r7}
 80145cc:	4770      	bx	lr
 80145ce:	bf00      	nop
 80145d0:	27d4eb2d 	.word	0x27d4eb2d
 80145d4:	b21642c9 	.word	0xb21642c9
 80145d8:	2000ac6c 	.word	0x2000ac6c

080145dc <__atomic_store_8>:
 80145dc:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80145e0:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80145e4:	b570      	push	{r4, r5, r6, lr}
 80145e6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80145ea:	4c14      	ldr	r4, [pc, #80]	@ (801463c <__atomic_store_8+0x60>)
 80145ec:	4d14      	ldr	r5, [pc, #80]	@ (8014640 <__atomic_store_8+0x64>)
 80145ee:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80145f2:	fb04 f101 	mul.w	r1, r4, r1
 80145f6:	4c13      	ldr	r4, [pc, #76]	@ (8014644 <__atomic_store_8+0x68>)
 80145f8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80145fc:	fba4 4e01 	umull	r4, lr, r4, r1
 8014600:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8014604:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8014608:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 801460c:	eba1 0e0e 	sub.w	lr, r1, lr
 8014610:	eb05 0c0e 	add.w	ip, r5, lr
 8014614:	f04f 0401 	mov.w	r4, #1
 8014618:	e8dc 1f4f 	ldrexb	r1, [ip]
 801461c:	e8cc 4f46 	strexb	r6, r4, [ip]
 8014620:	2e00      	cmp	r6, #0
 8014622:	d1f9      	bne.n	8014618 <__atomic_store_8+0x3c>
 8014624:	f3bf 8f5b 	dmb	ish
 8014628:	b2c9      	uxtb	r1, r1
 801462a:	2900      	cmp	r1, #0
 801462c:	d1f4      	bne.n	8014618 <__atomic_store_8+0x3c>
 801462e:	e9c0 2300 	strd	r2, r3, [r0]
 8014632:	f3bf 8f5b 	dmb	ish
 8014636:	f805 100e 	strb.w	r1, [r5, lr]
 801463a:	bd70      	pop	{r4, r5, r6, pc}
 801463c:	27d4eb2d 	.word	0x27d4eb2d
 8014640:	2000ac6c 	.word	0x2000ac6c
 8014644:	b21642c9 	.word	0xb21642c9

08014648 <__atomic_exchange_8>:
 8014648:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801464c:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8014650:	4916      	ldr	r1, [pc, #88]	@ (80146ac <__atomic_exchange_8+0x64>)
 8014652:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8014656:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801465a:	fb01 fc0c 	mul.w	ip, r1, ip
 801465e:	4914      	ldr	r1, [pc, #80]	@ (80146b0 <__atomic_exchange_8+0x68>)
 8014660:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8014664:	b570      	push	{r4, r5, r6, lr}
 8014666:	4605      	mov	r5, r0
 8014668:	fba1 010c 	umull	r0, r1, r1, ip
 801466c:	0909      	lsrs	r1, r1, #4
 801466e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8014672:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8014676:	4e0f      	ldr	r6, [pc, #60]	@ (80146b4 <__atomic_exchange_8+0x6c>)
 8014678:	ebac 0c01 	sub.w	ip, ip, r1
 801467c:	eb06 010c 	add.w	r1, r6, ip
 8014680:	f04f 0e01 	mov.w	lr, #1
 8014684:	e8d1 4f4f 	ldrexb	r4, [r1]
 8014688:	e8c1 ef40 	strexb	r0, lr, [r1]
 801468c:	2800      	cmp	r0, #0
 801468e:	d1f9      	bne.n	8014684 <__atomic_exchange_8+0x3c>
 8014690:	f3bf 8f5b 	dmb	ish
 8014694:	b2e4      	uxtb	r4, r4
 8014696:	2c00      	cmp	r4, #0
 8014698:	d1f4      	bne.n	8014684 <__atomic_exchange_8+0x3c>
 801469a:	e9d5 0100 	ldrd	r0, r1, [r5]
 801469e:	e9c5 2300 	strd	r2, r3, [r5]
 80146a2:	f3bf 8f5b 	dmb	ish
 80146a6:	f806 400c 	strb.w	r4, [r6, ip]
 80146aa:	bd70      	pop	{r4, r5, r6, pc}
 80146ac:	27d4eb2d 	.word	0x27d4eb2d
 80146b0:	b21642c9 	.word	0xb21642c9
 80146b4:	2000ac6c 	.word	0x2000ac6c

080146b8 <rcutils_get_env>:
 80146b8:	b168      	cbz	r0, 80146d6 <rcutils_get_env+0x1e>
 80146ba:	b510      	push	{r4, lr}
 80146bc:	460c      	mov	r4, r1
 80146be:	b129      	cbz	r1, 80146cc <rcutils_get_env+0x14>
 80146c0:	f002 fc56 	bl	8016f70 <getenv>
 80146c4:	b120      	cbz	r0, 80146d0 <rcutils_get_env+0x18>
 80146c6:	6020      	str	r0, [r4, #0]
 80146c8:	2000      	movs	r0, #0
 80146ca:	bd10      	pop	{r4, pc}
 80146cc:	4803      	ldr	r0, [pc, #12]	@ (80146dc <rcutils_get_env+0x24>)
 80146ce:	bd10      	pop	{r4, pc}
 80146d0:	4b03      	ldr	r3, [pc, #12]	@ (80146e0 <rcutils_get_env+0x28>)
 80146d2:	6023      	str	r3, [r4, #0]
 80146d4:	bd10      	pop	{r4, pc}
 80146d6:	4803      	ldr	r0, [pc, #12]	@ (80146e4 <rcutils_get_env+0x2c>)
 80146d8:	4770      	bx	lr
 80146da:	bf00      	nop
 80146dc:	08018ecc 	.word	0x08018ecc
 80146e0:	08018ff0 	.word	0x08018ff0
 80146e4:	08018eb0 	.word	0x08018eb0

080146e8 <rcutils_is_directory>:
 80146e8:	2000      	movs	r0, #0
 80146ea:	4770      	bx	lr

080146ec <rcutils_join_path>:
 80146ec:	b082      	sub	sp, #8
 80146ee:	e88d 000c 	stmia.w	sp, {r2, r3}
 80146f2:	2000      	movs	r0, #0
 80146f4:	b002      	add	sp, #8
 80146f6:	4770      	bx	lr

080146f8 <rcutils_to_native_path>:
 80146f8:	b084      	sub	sp, #16
 80146fa:	a801      	add	r0, sp, #4
 80146fc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8014700:	b004      	add	sp, #16
 8014702:	2000      	movs	r0, #0
 8014704:	4770      	bx	lr
 8014706:	bf00      	nop

08014708 <rcutils_format_string_limit>:
 8014708:	b40f      	push	{r0, r1, r2, r3}
 801470a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801470c:	b083      	sub	sp, #12
 801470e:	ac08      	add	r4, sp, #32
 8014710:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8014712:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014716:	b34e      	cbz	r6, 801476c <rcutils_format_string_limit+0x64>
 8014718:	a808      	add	r0, sp, #32
 801471a:	f7f8 fb77 	bl	800ce0c <rcutils_allocator_is_valid>
 801471e:	b328      	cbz	r0, 801476c <rcutils_format_string_limit+0x64>
 8014720:	2100      	movs	r1, #0
 8014722:	ab0f      	add	r3, sp, #60	@ 0x3c
 8014724:	4632      	mov	r2, r6
 8014726:	4608      	mov	r0, r1
 8014728:	e9cd 3300 	strd	r3, r3, [sp]
 801472c:	f000 f8f4 	bl	8014918 <rcutils_vsnprintf>
 8014730:	1c43      	adds	r3, r0, #1
 8014732:	4605      	mov	r5, r0
 8014734:	d01a      	beq.n	801476c <rcutils_format_string_limit+0x64>
 8014736:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014738:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801473a:	1c47      	adds	r7, r0, #1
 801473c:	429f      	cmp	r7, r3
 801473e:	bf84      	itt	hi
 8014740:	461f      	movhi	r7, r3
 8014742:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8014746:	4638      	mov	r0, r7
 8014748:	9b08      	ldr	r3, [sp, #32]
 801474a:	4798      	blx	r3
 801474c:	4604      	mov	r4, r0
 801474e:	b168      	cbz	r0, 801476c <rcutils_format_string_limit+0x64>
 8014750:	9b01      	ldr	r3, [sp, #4]
 8014752:	4632      	mov	r2, r6
 8014754:	4639      	mov	r1, r7
 8014756:	f000 f8df 	bl	8014918 <rcutils_vsnprintf>
 801475a:	2800      	cmp	r0, #0
 801475c:	db02      	blt.n	8014764 <rcutils_format_string_limit+0x5c>
 801475e:	2300      	movs	r3, #0
 8014760:	5563      	strb	r3, [r4, r5]
 8014762:	e004      	b.n	801476e <rcutils_format_string_limit+0x66>
 8014764:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014766:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014768:	4620      	mov	r0, r4
 801476a:	4798      	blx	r3
 801476c:	2400      	movs	r4, #0
 801476e:	4620      	mov	r0, r4
 8014770:	b003      	add	sp, #12
 8014772:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014776:	b004      	add	sp, #16
 8014778:	4770      	bx	lr
 801477a:	bf00      	nop

0801477c <rcutils_repl_str>:
 801477c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014780:	ed2d 8b02 	vpush	{d8}
 8014784:	b087      	sub	sp, #28
 8014786:	4680      	mov	r8, r0
 8014788:	4608      	mov	r0, r1
 801478a:	f8cd 8004 	str.w	r8, [sp, #4]
 801478e:	ee08 2a10 	vmov	s16, r2
 8014792:	468a      	mov	sl, r1
 8014794:	4699      	mov	r9, r3
 8014796:	f7eb fd4d 	bl	8000234 <strlen>
 801479a:	2600      	movs	r6, #0
 801479c:	4647      	mov	r7, r8
 801479e:	9002      	str	r0, [sp, #8]
 80147a0:	46b3      	mov	fp, r6
 80147a2:	2510      	movs	r5, #16
 80147a4:	46b0      	mov	r8, r6
 80147a6:	e01d      	b.n	80147e4 <rcutils_repl_str+0x68>
 80147a8:	f10b 0b01 	add.w	fp, fp, #1
 80147ac:	455e      	cmp	r6, fp
 80147ae:	d211      	bcs.n	80147d4 <rcutils_repl_str+0x58>
 80147b0:	442e      	add	r6, r5
 80147b2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80147b6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80147ba:	00b1      	lsls	r1, r6, #2
 80147bc:	4798      	blx	r3
 80147be:	2800      	cmp	r0, #0
 80147c0:	f000 8088 	beq.w	80148d4 <rcutils_repl_str+0x158>
 80147c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80147c8:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 80147cc:	4680      	mov	r8, r0
 80147ce:	bf28      	it	cs
 80147d0:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 80147d4:	9a01      	ldr	r2, [sp, #4]
 80147d6:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 80147da:	1aa2      	subs	r2, r4, r2
 80147dc:	f843 2c04 	str.w	r2, [r3, #-4]
 80147e0:	9b02      	ldr	r3, [sp, #8]
 80147e2:	18e7      	adds	r7, r4, r3
 80147e4:	4651      	mov	r1, sl
 80147e6:	4638      	mov	r0, r7
 80147e8:	f002 ffb7 	bl	801775a <strstr>
 80147ec:	4604      	mov	r4, r0
 80147ee:	4640      	mov	r0, r8
 80147f0:	2c00      	cmp	r4, #0
 80147f2:	d1d9      	bne.n	80147a8 <rcutils_repl_str+0x2c>
 80147f4:	46b8      	mov	r8, r7
 80147f6:	4607      	mov	r7, r0
 80147f8:	4640      	mov	r0, r8
 80147fa:	f7eb fd1b 	bl	8000234 <strlen>
 80147fe:	9b01      	ldr	r3, [sp, #4]
 8014800:	eba8 0303 	sub.w	r3, r8, r3
 8014804:	181c      	adds	r4, r3, r0
 8014806:	9404      	str	r4, [sp, #16]
 8014808:	f1bb 0f00 	cmp.w	fp, #0
 801480c:	d04a      	beq.n	80148a4 <rcutils_repl_str+0x128>
 801480e:	ee18 0a10 	vmov	r0, s16
 8014812:	f7eb fd0f 	bl	8000234 <strlen>
 8014816:	9b02      	ldr	r3, [sp, #8]
 8014818:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801481c:	1ac3      	subs	r3, r0, r3
 801481e:	fb0b 4303 	mla	r3, fp, r3, r4
 8014822:	461a      	mov	r2, r3
 8014824:	9305      	str	r3, [sp, #20]
 8014826:	4606      	mov	r6, r0
 8014828:	f8d9 3000 	ldr.w	r3, [r9]
 801482c:	1c50      	adds	r0, r2, #1
 801482e:	4798      	blx	r3
 8014830:	9003      	str	r0, [sp, #12]
 8014832:	2800      	cmp	r0, #0
 8014834:	d04f      	beq.n	80148d6 <rcutils_repl_str+0x15a>
 8014836:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801483a:	683a      	ldr	r2, [r7, #0]
 801483c:	4641      	mov	r1, r8
 801483e:	f003 f82e 	bl	801789e <memcpy>
 8014842:	683d      	ldr	r5, [r7, #0]
 8014844:	9b03      	ldr	r3, [sp, #12]
 8014846:	9701      	str	r7, [sp, #4]
 8014848:	46ba      	mov	sl, r7
 801484a:	441d      	add	r5, r3
 801484c:	9f02      	ldr	r7, [sp, #8]
 801484e:	f8cd 9008 	str.w	r9, [sp, #8]
 8014852:	2401      	movs	r4, #1
 8014854:	46d1      	mov	r9, sl
 8014856:	ee18 aa10 	vmov	sl, s16
 801485a:	e00a      	b.n	8014872 <rcutils_repl_str+0xf6>
 801485c:	f8d9 5000 	ldr.w	r5, [r9]
 8014860:	1aaa      	subs	r2, r5, r2
 8014862:	1885      	adds	r5, r0, r2
 8014864:	f003 f81b 	bl	801789e <memcpy>
 8014868:	45a3      	cmp	fp, r4
 801486a:	f104 0201 	add.w	r2, r4, #1
 801486e:	d935      	bls.n	80148dc <rcutils_repl_str+0x160>
 8014870:	4614      	mov	r4, r2
 8014872:	4632      	mov	r2, r6
 8014874:	4651      	mov	r1, sl
 8014876:	4628      	mov	r0, r5
 8014878:	f003 f811 	bl	801789e <memcpy>
 801487c:	f859 2b04 	ldr.w	r2, [r9], #4
 8014880:	45a3      	cmp	fp, r4
 8014882:	443a      	add	r2, r7
 8014884:	eb05 0006 	add.w	r0, r5, r6
 8014888:	eb08 0102 	add.w	r1, r8, r2
 801488c:	d1e6      	bne.n	801485c <rcutils_repl_str+0xe0>
 801488e:	9b04      	ldr	r3, [sp, #16]
 8014890:	1a9a      	subs	r2, r3, r2
 8014892:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8014896:	f003 f802 	bl	801789e <memcpy>
 801489a:	9a03      	ldr	r2, [sp, #12]
 801489c:	9905      	ldr	r1, [sp, #20]
 801489e:	2300      	movs	r3, #0
 80148a0:	5453      	strb	r3, [r2, r1]
 80148a2:	e00b      	b.n	80148bc <rcutils_repl_str+0x140>
 80148a4:	4620      	mov	r0, r4
 80148a6:	f8d9 3000 	ldr.w	r3, [r9]
 80148aa:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80148ae:	3001      	adds	r0, #1
 80148b0:	4798      	blx	r3
 80148b2:	9003      	str	r0, [sp, #12]
 80148b4:	b110      	cbz	r0, 80148bc <rcutils_repl_str+0x140>
 80148b6:	9901      	ldr	r1, [sp, #4]
 80148b8:	f002 ffe9 	bl	801788e <strcpy>
 80148bc:	4638      	mov	r0, r7
 80148be:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80148c2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80148c6:	4798      	blx	r3
 80148c8:	9803      	ldr	r0, [sp, #12]
 80148ca:	b007      	add	sp, #28
 80148cc:	ecbd 8b02 	vpop	{d8}
 80148d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148d4:	4647      	mov	r7, r8
 80148d6:	2300      	movs	r3, #0
 80148d8:	9303      	str	r3, [sp, #12]
 80148da:	e7ef      	b.n	80148bc <rcutils_repl_str+0x140>
 80148dc:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80148e0:	e7db      	b.n	801489a <rcutils_repl_str+0x11e>
 80148e2:	bf00      	nop

080148e4 <rcutils_snprintf>:
 80148e4:	b40c      	push	{r2, r3}
 80148e6:	b530      	push	{r4, r5, lr}
 80148e8:	b083      	sub	sp, #12
 80148ea:	ab06      	add	r3, sp, #24
 80148ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80148f0:	9301      	str	r3, [sp, #4]
 80148f2:	b152      	cbz	r2, 801490a <rcutils_snprintf+0x26>
 80148f4:	b138      	cbz	r0, 8014906 <rcutils_snprintf+0x22>
 80148f6:	b141      	cbz	r1, 801490a <rcutils_snprintf+0x26>
 80148f8:	f002 fed0 	bl	801769c <vsniprintf>
 80148fc:	b003      	add	sp, #12
 80148fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014902:	b002      	add	sp, #8
 8014904:	4770      	bx	lr
 8014906:	2900      	cmp	r1, #0
 8014908:	d0f6      	beq.n	80148f8 <rcutils_snprintf+0x14>
 801490a:	f002 ff93 	bl	8017834 <__errno>
 801490e:	2316      	movs	r3, #22
 8014910:	6003      	str	r3, [r0, #0]
 8014912:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014916:	e7f1      	b.n	80148fc <rcutils_snprintf+0x18>

08014918 <rcutils_vsnprintf>:
 8014918:	b570      	push	{r4, r5, r6, lr}
 801491a:	b13a      	cbz	r2, 801492c <rcutils_vsnprintf+0x14>
 801491c:	b120      	cbz	r0, 8014928 <rcutils_vsnprintf+0x10>
 801491e:	b129      	cbz	r1, 801492c <rcutils_vsnprintf+0x14>
 8014920:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014924:	f002 beba 	b.w	801769c <vsniprintf>
 8014928:	2900      	cmp	r1, #0
 801492a:	d0f9      	beq.n	8014920 <rcutils_vsnprintf+0x8>
 801492c:	f002 ff82 	bl	8017834 <__errno>
 8014930:	2316      	movs	r3, #22
 8014932:	6003      	str	r3, [r0, #0]
 8014934:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014938:	bd70      	pop	{r4, r5, r6, pc}
 801493a:	bf00      	nop

0801493c <rcutils_strdup>:
 801493c:	b084      	sub	sp, #16
 801493e:	b570      	push	{r4, r5, r6, lr}
 8014940:	b082      	sub	sp, #8
 8014942:	ac07      	add	r4, sp, #28
 8014944:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8014948:	4605      	mov	r5, r0
 801494a:	b1b0      	cbz	r0, 801497a <rcutils_strdup+0x3e>
 801494c:	f7eb fc72 	bl	8000234 <strlen>
 8014950:	1c42      	adds	r2, r0, #1
 8014952:	9b07      	ldr	r3, [sp, #28]
 8014954:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014956:	9201      	str	r2, [sp, #4]
 8014958:	4606      	mov	r6, r0
 801495a:	4610      	mov	r0, r2
 801495c:	4798      	blx	r3
 801495e:	4604      	mov	r4, r0
 8014960:	b128      	cbz	r0, 801496e <rcutils_strdup+0x32>
 8014962:	9a01      	ldr	r2, [sp, #4]
 8014964:	4629      	mov	r1, r5
 8014966:	f002 ff9a 	bl	801789e <memcpy>
 801496a:	2300      	movs	r3, #0
 801496c:	55a3      	strb	r3, [r4, r6]
 801496e:	4620      	mov	r0, r4
 8014970:	b002      	add	sp, #8
 8014972:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014976:	b004      	add	sp, #16
 8014978:	4770      	bx	lr
 801497a:	4604      	mov	r4, r0
 801497c:	e7f7      	b.n	801496e <rcutils_strdup+0x32>
 801497e:	bf00      	nop

08014980 <rcutils_strndup>:
 8014980:	b082      	sub	sp, #8
 8014982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014984:	ac06      	add	r4, sp, #24
 8014986:	e884 000c 	stmia.w	r4, {r2, r3}
 801498a:	4605      	mov	r5, r0
 801498c:	b188      	cbz	r0, 80149b2 <rcutils_strndup+0x32>
 801498e:	1c4f      	adds	r7, r1, #1
 8014990:	460e      	mov	r6, r1
 8014992:	4638      	mov	r0, r7
 8014994:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8014996:	4790      	blx	r2
 8014998:	4604      	mov	r4, r0
 801499a:	b128      	cbz	r0, 80149a8 <rcutils_strndup+0x28>
 801499c:	463a      	mov	r2, r7
 801499e:	4629      	mov	r1, r5
 80149a0:	f002 ff7d 	bl	801789e <memcpy>
 80149a4:	2300      	movs	r3, #0
 80149a6:	55a3      	strb	r3, [r4, r6]
 80149a8:	4620      	mov	r0, r4
 80149aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80149ae:	b002      	add	sp, #8
 80149b0:	4770      	bx	lr
 80149b2:	4604      	mov	r4, r0
 80149b4:	e7f8      	b.n	80149a8 <rcutils_strndup+0x28>
 80149b6:	bf00      	nop

080149b8 <rcutils_get_zero_initialized_string_map>:
 80149b8:	4b01      	ldr	r3, [pc, #4]	@ (80149c0 <rcutils_get_zero_initialized_string_map+0x8>)
 80149ba:	2000      	movs	r0, #0
 80149bc:	6018      	str	r0, [r3, #0]
 80149be:	4770      	bx	lr
 80149c0:	2000ac84 	.word	0x2000ac84

080149c4 <rcutils_string_map_reserve>:
 80149c4:	2800      	cmp	r0, #0
 80149c6:	d05f      	beq.n	8014a88 <rcutils_string_map_reserve+0xc4>
 80149c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149cc:	460c      	mov	r4, r1
 80149ce:	6801      	ldr	r1, [r0, #0]
 80149d0:	b082      	sub	sp, #8
 80149d2:	4605      	mov	r5, r0
 80149d4:	b129      	cbz	r1, 80149e2 <rcutils_string_map_reserve+0x1e>
 80149d6:	68cb      	ldr	r3, [r1, #12]
 80149d8:	42a3      	cmp	r3, r4
 80149da:	d906      	bls.n	80149ea <rcutils_string_map_reserve+0x26>
 80149dc:	461c      	mov	r4, r3
 80149de:	2900      	cmp	r1, #0
 80149e0:	d1f9      	bne.n	80149d6 <rcutils_string_map_reserve+0x12>
 80149e2:	201f      	movs	r0, #31
 80149e4:	b002      	add	sp, #8
 80149e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149ea:	688b      	ldr	r3, [r1, #8]
 80149ec:	42a3      	cmp	r3, r4
 80149ee:	d047      	beq.n	8014a80 <rcutils_string_map_reserve+0xbc>
 80149f0:	6a0e      	ldr	r6, [r1, #32]
 80149f2:	2c00      	cmp	r4, #0
 80149f4:	d034      	beq.n	8014a60 <rcutils_string_map_reserve+0x9c>
 80149f6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80149fa:	d243      	bcs.n	8014a84 <rcutils_string_map_reserve+0xc0>
 80149fc:	00a7      	lsls	r7, r4, #2
 80149fe:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8014a02:	6808      	ldr	r0, [r1, #0]
 8014a04:	4632      	mov	r2, r6
 8014a06:	4639      	mov	r1, r7
 8014a08:	47c0      	blx	r8
 8014a0a:	2800      	cmp	r0, #0
 8014a0c:	d03a      	beq.n	8014a84 <rcutils_string_map_reserve+0xc0>
 8014a0e:	682b      	ldr	r3, [r5, #0]
 8014a10:	4632      	mov	r2, r6
 8014a12:	6018      	str	r0, [r3, #0]
 8014a14:	4639      	mov	r1, r7
 8014a16:	6858      	ldr	r0, [r3, #4]
 8014a18:	47c0      	blx	r8
 8014a1a:	2800      	cmp	r0, #0
 8014a1c:	d032      	beq.n	8014a84 <rcutils_string_map_reserve+0xc0>
 8014a1e:	682d      	ldr	r5, [r5, #0]
 8014a20:	68ab      	ldr	r3, [r5, #8]
 8014a22:	6068      	str	r0, [r5, #4]
 8014a24:	42a3      	cmp	r3, r4
 8014a26:	d226      	bcs.n	8014a76 <rcutils_string_map_reserve+0xb2>
 8014a28:	682a      	ldr	r2, [r5, #0]
 8014a2a:	eb00 0c07 	add.w	ip, r0, r7
 8014a2e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8014a32:	45e6      	cmp	lr, ip
 8014a34:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8014a38:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8014a3c:	d203      	bcs.n	8014a46 <rcutils_string_map_reserve+0x82>
 8014a3e:	eb02 0c07 	add.w	ip, r2, r7
 8014a42:	4566      	cmp	r6, ip
 8014a44:	d322      	bcc.n	8014a8c <rcutils_string_map_reserve+0xc8>
 8014a46:	1ae3      	subs	r3, r4, r3
 8014a48:	009a      	lsls	r2, r3, #2
 8014a4a:	4670      	mov	r0, lr
 8014a4c:	2100      	movs	r1, #0
 8014a4e:	9201      	str	r2, [sp, #4]
 8014a50:	f002 fe5c 	bl	801770c <memset>
 8014a54:	9a01      	ldr	r2, [sp, #4]
 8014a56:	2100      	movs	r1, #0
 8014a58:	4630      	mov	r0, r6
 8014a5a:	f002 fe57 	bl	801770c <memset>
 8014a5e:	e00a      	b.n	8014a76 <rcutils_string_map_reserve+0xb2>
 8014a60:	694f      	ldr	r7, [r1, #20]
 8014a62:	6808      	ldr	r0, [r1, #0]
 8014a64:	4631      	mov	r1, r6
 8014a66:	47b8      	blx	r7
 8014a68:	682b      	ldr	r3, [r5, #0]
 8014a6a:	4631      	mov	r1, r6
 8014a6c:	6858      	ldr	r0, [r3, #4]
 8014a6e:	601c      	str	r4, [r3, #0]
 8014a70:	47b8      	blx	r7
 8014a72:	682d      	ldr	r5, [r5, #0]
 8014a74:	606c      	str	r4, [r5, #4]
 8014a76:	2000      	movs	r0, #0
 8014a78:	60ac      	str	r4, [r5, #8]
 8014a7a:	b002      	add	sp, #8
 8014a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a80:	2000      	movs	r0, #0
 8014a82:	e7af      	b.n	80149e4 <rcutils_string_map_reserve+0x20>
 8014a84:	200a      	movs	r0, #10
 8014a86:	e7ad      	b.n	80149e4 <rcutils_string_map_reserve+0x20>
 8014a88:	200b      	movs	r0, #11
 8014a8a:	4770      	bx	lr
 8014a8c:	1f0b      	subs	r3, r1, #4
 8014a8e:	4418      	add	r0, r3
 8014a90:	4413      	add	r3, r2
 8014a92:	3a04      	subs	r2, #4
 8014a94:	4417      	add	r7, r2
 8014a96:	2200      	movs	r2, #0
 8014a98:	f843 2f04 	str.w	r2, [r3, #4]!
 8014a9c:	42bb      	cmp	r3, r7
 8014a9e:	f840 2f04 	str.w	r2, [r0, #4]!
 8014aa2:	d1f9      	bne.n	8014a98 <rcutils_string_map_reserve+0xd4>
 8014aa4:	e7e7      	b.n	8014a76 <rcutils_string_map_reserve+0xb2>
 8014aa6:	bf00      	nop

08014aa8 <rcutils_string_map_init>:
 8014aa8:	b082      	sub	sp, #8
 8014aaa:	b570      	push	{r4, r5, r6, lr}
 8014aac:	ac04      	add	r4, sp, #16
 8014aae:	e884 000c 	stmia.w	r4, {r2, r3}
 8014ab2:	b380      	cbz	r0, 8014b16 <rcutils_string_map_init+0x6e>
 8014ab4:	6806      	ldr	r6, [r0, #0]
 8014ab6:	4604      	mov	r4, r0
 8014ab8:	b12e      	cbz	r6, 8014ac6 <rcutils_string_map_init+0x1e>
 8014aba:	251e      	movs	r5, #30
 8014abc:	4628      	mov	r0, r5
 8014abe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014ac2:	b002      	add	sp, #8
 8014ac4:	4770      	bx	lr
 8014ac6:	a804      	add	r0, sp, #16
 8014ac8:	460d      	mov	r5, r1
 8014aca:	f7f8 f99f 	bl	800ce0c <rcutils_allocator_is_valid>
 8014ace:	b310      	cbz	r0, 8014b16 <rcutils_string_map_init+0x6e>
 8014ad0:	9b04      	ldr	r3, [sp, #16]
 8014ad2:	9908      	ldr	r1, [sp, #32]
 8014ad4:	2024      	movs	r0, #36	@ 0x24
 8014ad6:	4798      	blx	r3
 8014ad8:	6020      	str	r0, [r4, #0]
 8014ada:	b310      	cbz	r0, 8014b22 <rcutils_string_map_init+0x7a>
 8014adc:	f10d 0e10 	add.w	lr, sp, #16
 8014ae0:	e9c0 6600 	strd	r6, r6, [r0]
 8014ae4:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8014ae8:	f100 0c10 	add.w	ip, r0, #16
 8014aec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014af0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014af4:	f8de 3000 	ldr.w	r3, [lr]
 8014af8:	f8cc 3000 	str.w	r3, [ip]
 8014afc:	4629      	mov	r1, r5
 8014afe:	4620      	mov	r0, r4
 8014b00:	f7ff ff60 	bl	80149c4 <rcutils_string_map_reserve>
 8014b04:	4605      	mov	r5, r0
 8014b06:	2800      	cmp	r0, #0
 8014b08:	d0d8      	beq.n	8014abc <rcutils_string_map_init+0x14>
 8014b0a:	9b05      	ldr	r3, [sp, #20]
 8014b0c:	9908      	ldr	r1, [sp, #32]
 8014b0e:	6820      	ldr	r0, [r4, #0]
 8014b10:	4798      	blx	r3
 8014b12:	6026      	str	r6, [r4, #0]
 8014b14:	e7d2      	b.n	8014abc <rcutils_string_map_init+0x14>
 8014b16:	250b      	movs	r5, #11
 8014b18:	4628      	mov	r0, r5
 8014b1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014b1e:	b002      	add	sp, #8
 8014b20:	4770      	bx	lr
 8014b22:	250a      	movs	r5, #10
 8014b24:	e7ca      	b.n	8014abc <rcutils_string_map_init+0x14>
 8014b26:	bf00      	nop

08014b28 <rcutils_string_map_fini>:
 8014b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b2c:	b082      	sub	sp, #8
 8014b2e:	2800      	cmp	r0, #0
 8014b30:	d03a      	beq.n	8014ba8 <rcutils_string_map_fini+0x80>
 8014b32:	6804      	ldr	r4, [r0, #0]
 8014b34:	4606      	mov	r6, r0
 8014b36:	2c00      	cmp	r4, #0
 8014b38:	d032      	beq.n	8014ba0 <rcutils_string_map_fini+0x78>
 8014b3a:	68a3      	ldr	r3, [r4, #8]
 8014b3c:	b32b      	cbz	r3, 8014b8a <rcutils_string_map_fini+0x62>
 8014b3e:	2500      	movs	r5, #0
 8014b40:	6822      	ldr	r2, [r4, #0]
 8014b42:	462f      	mov	r7, r5
 8014b44:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014b48:	b1e0      	cbz	r0, 8014b84 <rcutils_string_map_fini+0x5c>
 8014b4a:	6a21      	ldr	r1, [r4, #32]
 8014b4c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8014b50:	9101      	str	r1, [sp, #4]
 8014b52:	47c0      	blx	r8
 8014b54:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014b58:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8014b5c:	9901      	ldr	r1, [sp, #4]
 8014b5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014b62:	47c0      	blx	r8
 8014b64:	68e3      	ldr	r3, [r4, #12]
 8014b66:	6862      	ldr	r2, [r4, #4]
 8014b68:	3b01      	subs	r3, #1
 8014b6a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8014b6e:	60e3      	str	r3, [r4, #12]
 8014b70:	6834      	ldr	r4, [r6, #0]
 8014b72:	68a3      	ldr	r3, [r4, #8]
 8014b74:	3501      	adds	r5, #1
 8014b76:	429d      	cmp	r5, r3
 8014b78:	d207      	bcs.n	8014b8a <rcutils_string_map_fini+0x62>
 8014b7a:	6822      	ldr	r2, [r4, #0]
 8014b7c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014b80:	2800      	cmp	r0, #0
 8014b82:	d1e2      	bne.n	8014b4a <rcutils_string_map_fini+0x22>
 8014b84:	3501      	adds	r5, #1
 8014b86:	429d      	cmp	r5, r3
 8014b88:	d3dc      	bcc.n	8014b44 <rcutils_string_map_fini+0x1c>
 8014b8a:	2100      	movs	r1, #0
 8014b8c:	4630      	mov	r0, r6
 8014b8e:	f7ff ff19 	bl	80149c4 <rcutils_string_map_reserve>
 8014b92:	4604      	mov	r4, r0
 8014b94:	b920      	cbnz	r0, 8014ba0 <rcutils_string_map_fini+0x78>
 8014b96:	6830      	ldr	r0, [r6, #0]
 8014b98:	6943      	ldr	r3, [r0, #20]
 8014b9a:	6a01      	ldr	r1, [r0, #32]
 8014b9c:	4798      	blx	r3
 8014b9e:	6034      	str	r4, [r6, #0]
 8014ba0:	4620      	mov	r0, r4
 8014ba2:	b002      	add	sp, #8
 8014ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ba8:	240b      	movs	r4, #11
 8014baa:	4620      	mov	r0, r4
 8014bac:	b002      	add	sp, #8
 8014bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bb2:	bf00      	nop

08014bb4 <rcutils_string_map_getn>:
 8014bb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bb8:	b300      	cbz	r0, 8014bfc <rcutils_string_map_getn+0x48>
 8014bba:	6807      	ldr	r7, [r0, #0]
 8014bbc:	b1ff      	cbz	r7, 8014bfe <rcutils_string_map_getn+0x4a>
 8014bbe:	4688      	mov	r8, r1
 8014bc0:	b1e1      	cbz	r1, 8014bfc <rcutils_string_map_getn+0x48>
 8014bc2:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8014bc6:	683e      	ldr	r6, [r7, #0]
 8014bc8:	f1ba 0f00 	cmp.w	sl, #0
 8014bcc:	d016      	beq.n	8014bfc <rcutils_string_map_getn+0x48>
 8014bce:	4691      	mov	r9, r2
 8014bd0:	3e04      	subs	r6, #4
 8014bd2:	2400      	movs	r4, #0
 8014bd4:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8014bd8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014bdc:	4628      	mov	r0, r5
 8014bde:	3401      	adds	r4, #1
 8014be0:	b155      	cbz	r5, 8014bf8 <rcutils_string_map_getn+0x44>
 8014be2:	f7eb fb27 	bl	8000234 <strlen>
 8014be6:	4548      	cmp	r0, r9
 8014be8:	4602      	mov	r2, r0
 8014bea:	4629      	mov	r1, r5
 8014bec:	bf38      	it	cc
 8014bee:	464a      	movcc	r2, r9
 8014bf0:	4640      	mov	r0, r8
 8014bf2:	f002 fda0 	bl	8017736 <strncmp>
 8014bf6:	b128      	cbz	r0, 8014c04 <rcutils_string_map_getn+0x50>
 8014bf8:	45a2      	cmp	sl, r4
 8014bfa:	d1eb      	bne.n	8014bd4 <rcutils_string_map_getn+0x20>
 8014bfc:	2700      	movs	r7, #0
 8014bfe:	4638      	mov	r0, r7
 8014c00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	f853 700b 	ldr.w	r7, [r3, fp]
 8014c0a:	4638      	mov	r0, r7
 8014c0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014c10 <rmw_get_zero_initialized_context>:
 8014c10:	b510      	push	{r4, lr}
 8014c12:	4604      	mov	r4, r0
 8014c14:	3010      	adds	r0, #16
 8014c16:	f7f8 f98b 	bl	800cf30 <rmw_get_zero_initialized_init_options>
 8014c1a:	2300      	movs	r3, #0
 8014c1c:	2000      	movs	r0, #0
 8014c1e:	2100      	movs	r1, #0
 8014c20:	e9c4 0100 	strd	r0, r1, [r4]
 8014c24:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8014c28:	60a3      	str	r3, [r4, #8]
 8014c2a:	4620      	mov	r0, r4
 8014c2c:	bd10      	pop	{r4, pc}
 8014c2e:	bf00      	nop

08014c30 <rmw_time_equal>:
 8014c30:	b4f0      	push	{r4, r5, r6, r7}
 8014c32:	b084      	sub	sp, #16
 8014c34:	ac04      	add	r4, sp, #16
 8014c36:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8014c3a:	4603      	mov	r3, r0
 8014c3c:	4924      	ldr	r1, [pc, #144]	@ (8014cd0 <rmw_time_equal+0xa0>)
 8014c3e:	9e03      	ldr	r6, [sp, #12]
 8014c40:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8014c44:	2202      	movs	r2, #2
 8014c46:	4299      	cmp	r1, r3
 8014c48:	41aa      	sbcs	r2, r5
 8014c4a:	d330      	bcc.n	8014cae <rmw_time_equal+0x7e>
 8014c4c:	4c21      	ldr	r4, [pc, #132]	@ (8014cd4 <rmw_time_equal+0xa4>)
 8014c4e:	fba3 3204 	umull	r3, r2, r3, r4
 8014c52:	fb04 2205 	mla	r2, r4, r5, r2
 8014c56:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014c5a:	43dd      	mvns	r5, r3
 8014c5c:	1a8c      	subs	r4, r1, r2
 8014c5e:	4285      	cmp	r5, r0
 8014c60:	41b4      	sbcs	r4, r6
 8014c62:	d332      	bcc.n	8014cca <rmw_time_equal+0x9a>
 8014c64:	eb10 0c03 	adds.w	ip, r0, r3
 8014c68:	eb42 0106 	adc.w	r1, r2, r6
 8014c6c:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8014c70:	4817      	ldr	r0, [pc, #92]	@ (8014cd0 <rmw_time_equal+0xa0>)
 8014c72:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8014c74:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8014c76:	2202      	movs	r2, #2
 8014c78:	4298      	cmp	r0, r3
 8014c7a:	41b2      	sbcs	r2, r6
 8014c7c:	d31c      	bcc.n	8014cb8 <rmw_time_equal+0x88>
 8014c7e:	4c15      	ldr	r4, [pc, #84]	@ (8014cd4 <rmw_time_equal+0xa4>)
 8014c80:	fba3 3204 	umull	r3, r2, r3, r4
 8014c84:	fb04 2206 	mla	r2, r4, r6, r2
 8014c88:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8014c8c:	43de      	mvns	r6, r3
 8014c8e:	1a84      	subs	r4, r0, r2
 8014c90:	42ae      	cmp	r6, r5
 8014c92:	41bc      	sbcs	r4, r7
 8014c94:	d315      	bcc.n	8014cc2 <rmw_time_equal+0x92>
 8014c96:	195b      	adds	r3, r3, r5
 8014c98:	eb42 0207 	adc.w	r2, r2, r7
 8014c9c:	428a      	cmp	r2, r1
 8014c9e:	bf08      	it	eq
 8014ca0:	4563      	cmpeq	r3, ip
 8014ca2:	bf0c      	ite	eq
 8014ca4:	2001      	moveq	r0, #1
 8014ca6:	2000      	movne	r0, #0
 8014ca8:	b004      	add	sp, #16
 8014caa:	bcf0      	pop	{r4, r5, r6, r7}
 8014cac:	4770      	bx	lr
 8014cae:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8014cb2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014cb6:	e7d9      	b.n	8014c6c <rmw_time_equal+0x3c>
 8014cb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014cbc:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8014cc0:	e7ec      	b.n	8014c9c <rmw_time_equal+0x6c>
 8014cc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014cc6:	4602      	mov	r2, r0
 8014cc8:	e7e8      	b.n	8014c9c <rmw_time_equal+0x6c>
 8014cca:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8014cce:	e7cd      	b.n	8014c6c <rmw_time_equal+0x3c>
 8014cd0:	25c17d04 	.word	0x25c17d04
 8014cd4:	3b9aca00 	.word	0x3b9aca00

08014cd8 <rmw_time_total_nsec>:
 8014cd8:	b470      	push	{r4, r5, r6}
 8014cda:	b085      	sub	sp, #20
 8014cdc:	ac04      	add	r4, sp, #16
 8014cde:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8014ce2:	4603      	mov	r3, r0
 8014ce4:	4912      	ldr	r1, [pc, #72]	@ (8014d30 <rmw_time_total_nsec+0x58>)
 8014ce6:	9e03      	ldr	r6, [sp, #12]
 8014ce8:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8014cec:	2202      	movs	r2, #2
 8014cee:	4299      	cmp	r1, r3
 8014cf0:	41aa      	sbcs	r2, r5
 8014cf2:	d311      	bcc.n	8014d18 <rmw_time_total_nsec+0x40>
 8014cf4:	4c0f      	ldr	r4, [pc, #60]	@ (8014d34 <rmw_time_total_nsec+0x5c>)
 8014cf6:	fba3 3204 	umull	r3, r2, r3, r4
 8014cfa:	fb04 2205 	mla	r2, r4, r5, r2
 8014cfe:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014d02:	43dd      	mvns	r5, r3
 8014d04:	1a8c      	subs	r4, r1, r2
 8014d06:	4285      	cmp	r5, r0
 8014d08:	41b4      	sbcs	r4, r6
 8014d0a:	d30c      	bcc.n	8014d26 <rmw_time_total_nsec+0x4e>
 8014d0c:	1818      	adds	r0, r3, r0
 8014d0e:	eb42 0106 	adc.w	r1, r2, r6
 8014d12:	b005      	add	sp, #20
 8014d14:	bc70      	pop	{r4, r5, r6}
 8014d16:	4770      	bx	lr
 8014d18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014d1c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014d20:	b005      	add	sp, #20
 8014d22:	bc70      	pop	{r4, r5, r6}
 8014d24:	4770      	bx	lr
 8014d26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014d2a:	b005      	add	sp, #20
 8014d2c:	bc70      	pop	{r4, r5, r6}
 8014d2e:	4770      	bx	lr
 8014d30:	25c17d04 	.word	0x25c17d04
 8014d34:	3b9aca00 	.word	0x3b9aca00

08014d38 <rmw_get_zero_initialized_message_info>:
 8014d38:	b510      	push	{r4, lr}
 8014d3a:	2240      	movs	r2, #64	@ 0x40
 8014d3c:	4604      	mov	r4, r0
 8014d3e:	2100      	movs	r1, #0
 8014d40:	f002 fce4 	bl	801770c <memset>
 8014d44:	4620      	mov	r0, r4
 8014d46:	bd10      	pop	{r4, pc}

08014d48 <rmw_validate_full_topic_name>:
 8014d48:	2800      	cmp	r0, #0
 8014d4a:	d057      	beq.n	8014dfc <rmw_validate_full_topic_name+0xb4>
 8014d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d50:	460d      	mov	r5, r1
 8014d52:	2900      	cmp	r1, #0
 8014d54:	d054      	beq.n	8014e00 <rmw_validate_full_topic_name+0xb8>
 8014d56:	4616      	mov	r6, r2
 8014d58:	4604      	mov	r4, r0
 8014d5a:	f7eb fa6b 	bl	8000234 <strlen>
 8014d5e:	b148      	cbz	r0, 8014d74 <rmw_validate_full_topic_name+0x2c>
 8014d60:	7823      	ldrb	r3, [r4, #0]
 8014d62:	2b2f      	cmp	r3, #47	@ 0x2f
 8014d64:	d00d      	beq.n	8014d82 <rmw_validate_full_topic_name+0x3a>
 8014d66:	2302      	movs	r3, #2
 8014d68:	602b      	str	r3, [r5, #0]
 8014d6a:	b13e      	cbz	r6, 8014d7c <rmw_validate_full_topic_name+0x34>
 8014d6c:	2000      	movs	r0, #0
 8014d6e:	6030      	str	r0, [r6, #0]
 8014d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d74:	2301      	movs	r3, #1
 8014d76:	602b      	str	r3, [r5, #0]
 8014d78:	2e00      	cmp	r6, #0
 8014d7a:	d1f7      	bne.n	8014d6c <rmw_validate_full_topic_name+0x24>
 8014d7c:	2000      	movs	r0, #0
 8014d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d82:	1e43      	subs	r3, r0, #1
 8014d84:	5ce2      	ldrb	r2, [r4, r3]
 8014d86:	2a2f      	cmp	r2, #47	@ 0x2f
 8014d88:	d03c      	beq.n	8014e04 <rmw_validate_full_topic_name+0xbc>
 8014d8a:	1e63      	subs	r3, r4, #1
 8014d8c:	eb03 0800 	add.w	r8, r3, r0
 8014d90:	f1c4 0e01 	rsb	lr, r4, #1
 8014d94:	eb0e 0703 	add.w	r7, lr, r3
 8014d98:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8014d9c:	f021 0220 	bic.w	r2, r1, #32
 8014da0:	3a41      	subs	r2, #65	@ 0x41
 8014da2:	2a19      	cmp	r2, #25
 8014da4:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8014da8:	d90b      	bls.n	8014dc2 <rmw_validate_full_topic_name+0x7a>
 8014daa:	295f      	cmp	r1, #95	@ 0x5f
 8014dac:	d009      	beq.n	8014dc2 <rmw_validate_full_topic_name+0x7a>
 8014dae:	f1bc 0f0a 	cmp.w	ip, #10
 8014db2:	d906      	bls.n	8014dc2 <rmw_validate_full_topic_name+0x7a>
 8014db4:	2304      	movs	r3, #4
 8014db6:	602b      	str	r3, [r5, #0]
 8014db8:	2e00      	cmp	r6, #0
 8014dba:	d0df      	beq.n	8014d7c <rmw_validate_full_topic_name+0x34>
 8014dbc:	6037      	str	r7, [r6, #0]
 8014dbe:	2000      	movs	r0, #0
 8014dc0:	e7d6      	b.n	8014d70 <rmw_validate_full_topic_name+0x28>
 8014dc2:	4543      	cmp	r3, r8
 8014dc4:	d1e6      	bne.n	8014d94 <rmw_validate_full_topic_name+0x4c>
 8014dc6:	4f1a      	ldr	r7, [pc, #104]	@ (8014e30 <rmw_validate_full_topic_name+0xe8>)
 8014dc8:	2301      	movs	r3, #1
 8014dca:	e004      	b.n	8014dd6 <rmw_validate_full_topic_name+0x8e>
 8014dcc:	4298      	cmp	r0, r3
 8014dce:	f104 0401 	add.w	r4, r4, #1
 8014dd2:	d91c      	bls.n	8014e0e <rmw_validate_full_topic_name+0xc6>
 8014dd4:	4613      	mov	r3, r2
 8014dd6:	4298      	cmp	r0, r3
 8014dd8:	f103 0201 	add.w	r2, r3, #1
 8014ddc:	d0f6      	beq.n	8014dcc <rmw_validate_full_topic_name+0x84>
 8014dde:	7821      	ldrb	r1, [r4, #0]
 8014de0:	292f      	cmp	r1, #47	@ 0x2f
 8014de2:	d1f3      	bne.n	8014dcc <rmw_validate_full_topic_name+0x84>
 8014de4:	7861      	ldrb	r1, [r4, #1]
 8014de6:	292f      	cmp	r1, #47	@ 0x2f
 8014de8:	d01c      	beq.n	8014e24 <rmw_validate_full_topic_name+0xdc>
 8014dea:	5dc9      	ldrb	r1, [r1, r7]
 8014dec:	0749      	lsls	r1, r1, #29
 8014dee:	d5ed      	bpl.n	8014dcc <rmw_validate_full_topic_name+0x84>
 8014df0:	2206      	movs	r2, #6
 8014df2:	602a      	str	r2, [r5, #0]
 8014df4:	2e00      	cmp	r6, #0
 8014df6:	d0c1      	beq.n	8014d7c <rmw_validate_full_topic_name+0x34>
 8014df8:	6033      	str	r3, [r6, #0]
 8014dfa:	e7bf      	b.n	8014d7c <rmw_validate_full_topic_name+0x34>
 8014dfc:	200b      	movs	r0, #11
 8014dfe:	4770      	bx	lr
 8014e00:	200b      	movs	r0, #11
 8014e02:	e7b5      	b.n	8014d70 <rmw_validate_full_topic_name+0x28>
 8014e04:	2203      	movs	r2, #3
 8014e06:	602a      	str	r2, [r5, #0]
 8014e08:	2e00      	cmp	r6, #0
 8014e0a:	d1f5      	bne.n	8014df8 <rmw_validate_full_topic_name+0xb0>
 8014e0c:	e7b6      	b.n	8014d7c <rmw_validate_full_topic_name+0x34>
 8014e0e:	28f7      	cmp	r0, #247	@ 0xf7
 8014e10:	d802      	bhi.n	8014e18 <rmw_validate_full_topic_name+0xd0>
 8014e12:	2000      	movs	r0, #0
 8014e14:	6028      	str	r0, [r5, #0]
 8014e16:	e7ab      	b.n	8014d70 <rmw_validate_full_topic_name+0x28>
 8014e18:	2307      	movs	r3, #7
 8014e1a:	602b      	str	r3, [r5, #0]
 8014e1c:	2e00      	cmp	r6, #0
 8014e1e:	d0ad      	beq.n	8014d7c <rmw_validate_full_topic_name+0x34>
 8014e20:	23f6      	movs	r3, #246	@ 0xf6
 8014e22:	e7e9      	b.n	8014df8 <rmw_validate_full_topic_name+0xb0>
 8014e24:	2205      	movs	r2, #5
 8014e26:	602a      	str	r2, [r5, #0]
 8014e28:	2e00      	cmp	r6, #0
 8014e2a:	d1e5      	bne.n	8014df8 <rmw_validate_full_topic_name+0xb0>
 8014e2c:	e7a6      	b.n	8014d7c <rmw_validate_full_topic_name+0x34>
 8014e2e:	bf00      	nop
 8014e30:	080192c8 	.word	0x080192c8

08014e34 <rmw_validate_namespace_with_size>:
 8014e34:	b340      	cbz	r0, 8014e88 <rmw_validate_namespace_with_size+0x54>
 8014e36:	b570      	push	{r4, r5, r6, lr}
 8014e38:	4614      	mov	r4, r2
 8014e3a:	b0c2      	sub	sp, #264	@ 0x108
 8014e3c:	b332      	cbz	r2, 8014e8c <rmw_validate_namespace_with_size+0x58>
 8014e3e:	2901      	cmp	r1, #1
 8014e40:	460d      	mov	r5, r1
 8014e42:	461e      	mov	r6, r3
 8014e44:	d102      	bne.n	8014e4c <rmw_validate_namespace_with_size+0x18>
 8014e46:	7803      	ldrb	r3, [r0, #0]
 8014e48:	2b2f      	cmp	r3, #47	@ 0x2f
 8014e4a:	d012      	beq.n	8014e72 <rmw_validate_namespace_with_size+0x3e>
 8014e4c:	aa01      	add	r2, sp, #4
 8014e4e:	4669      	mov	r1, sp
 8014e50:	f7ff ff7a 	bl	8014d48 <rmw_validate_full_topic_name>
 8014e54:	b978      	cbnz	r0, 8014e76 <rmw_validate_namespace_with_size+0x42>
 8014e56:	9b00      	ldr	r3, [sp, #0]
 8014e58:	b14b      	cbz	r3, 8014e6e <rmw_validate_namespace_with_size+0x3a>
 8014e5a:	2b07      	cmp	r3, #7
 8014e5c:	d007      	beq.n	8014e6e <rmw_validate_namespace_with_size+0x3a>
 8014e5e:	1e5a      	subs	r2, r3, #1
 8014e60:	2a05      	cmp	r2, #5
 8014e62:	d82b      	bhi.n	8014ebc <rmw_validate_namespace_with_size+0x88>
 8014e64:	e8df f002 	tbb	[pc, r2]
 8014e68:	1e212427 	.word	0x1e212427
 8014e6c:	141b      	.short	0x141b
 8014e6e:	2df5      	cmp	r5, #245	@ 0xf5
 8014e70:	d803      	bhi.n	8014e7a <rmw_validate_namespace_with_size+0x46>
 8014e72:	2000      	movs	r0, #0
 8014e74:	6020      	str	r0, [r4, #0]
 8014e76:	b042      	add	sp, #264	@ 0x108
 8014e78:	bd70      	pop	{r4, r5, r6, pc}
 8014e7a:	2307      	movs	r3, #7
 8014e7c:	6023      	str	r3, [r4, #0]
 8014e7e:	2e00      	cmp	r6, #0
 8014e80:	d0f9      	beq.n	8014e76 <rmw_validate_namespace_with_size+0x42>
 8014e82:	23f4      	movs	r3, #244	@ 0xf4
 8014e84:	6033      	str	r3, [r6, #0]
 8014e86:	e7f6      	b.n	8014e76 <rmw_validate_namespace_with_size+0x42>
 8014e88:	200b      	movs	r0, #11
 8014e8a:	4770      	bx	lr
 8014e8c:	200b      	movs	r0, #11
 8014e8e:	e7f2      	b.n	8014e76 <rmw_validate_namespace_with_size+0x42>
 8014e90:	2306      	movs	r3, #6
 8014e92:	6023      	str	r3, [r4, #0]
 8014e94:	2e00      	cmp	r6, #0
 8014e96:	d0ee      	beq.n	8014e76 <rmw_validate_namespace_with_size+0x42>
 8014e98:	9b01      	ldr	r3, [sp, #4]
 8014e9a:	6033      	str	r3, [r6, #0]
 8014e9c:	e7eb      	b.n	8014e76 <rmw_validate_namespace_with_size+0x42>
 8014e9e:	2305      	movs	r3, #5
 8014ea0:	6023      	str	r3, [r4, #0]
 8014ea2:	e7f7      	b.n	8014e94 <rmw_validate_namespace_with_size+0x60>
 8014ea4:	2304      	movs	r3, #4
 8014ea6:	6023      	str	r3, [r4, #0]
 8014ea8:	e7f4      	b.n	8014e94 <rmw_validate_namespace_with_size+0x60>
 8014eaa:	2303      	movs	r3, #3
 8014eac:	6023      	str	r3, [r4, #0]
 8014eae:	e7f1      	b.n	8014e94 <rmw_validate_namespace_with_size+0x60>
 8014eb0:	2302      	movs	r3, #2
 8014eb2:	6023      	str	r3, [r4, #0]
 8014eb4:	e7ee      	b.n	8014e94 <rmw_validate_namespace_with_size+0x60>
 8014eb6:	2301      	movs	r3, #1
 8014eb8:	6023      	str	r3, [r4, #0]
 8014eba:	e7eb      	b.n	8014e94 <rmw_validate_namespace_with_size+0x60>
 8014ebc:	4a03      	ldr	r2, [pc, #12]	@ (8014ecc <rmw_validate_namespace_with_size+0x98>)
 8014ebe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8014ec2:	a802      	add	r0, sp, #8
 8014ec4:	f7ff fd0e 	bl	80148e4 <rcutils_snprintf>
 8014ec8:	2001      	movs	r0, #1
 8014eca:	e7d4      	b.n	8014e76 <rmw_validate_namespace_with_size+0x42>
 8014ecc:	08018ee8 	.word	0x08018ee8

08014ed0 <rmw_validate_namespace>:
 8014ed0:	b168      	cbz	r0, 8014eee <rmw_validate_namespace+0x1e>
 8014ed2:	b570      	push	{r4, r5, r6, lr}
 8014ed4:	460d      	mov	r5, r1
 8014ed6:	4616      	mov	r6, r2
 8014ed8:	4604      	mov	r4, r0
 8014eda:	f7eb f9ab 	bl	8000234 <strlen>
 8014ede:	4633      	mov	r3, r6
 8014ee0:	4601      	mov	r1, r0
 8014ee2:	462a      	mov	r2, r5
 8014ee4:	4620      	mov	r0, r4
 8014ee6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014eea:	f7ff bfa3 	b.w	8014e34 <rmw_validate_namespace_with_size>
 8014eee:	200b      	movs	r0, #11
 8014ef0:	4770      	bx	lr
 8014ef2:	bf00      	nop

08014ef4 <rmw_namespace_validation_result_string>:
 8014ef4:	2807      	cmp	r0, #7
 8014ef6:	bf9a      	itte	ls
 8014ef8:	4b02      	ldrls	r3, [pc, #8]	@ (8014f04 <rmw_namespace_validation_result_string+0x10>)
 8014efa:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8014efe:	4802      	ldrhi	r0, [pc, #8]	@ (8014f08 <rmw_namespace_validation_result_string+0x14>)
 8014f00:	4770      	bx	lr
 8014f02:	bf00      	nop
 8014f04:	080190e0 	.word	0x080190e0
 8014f08:	08018f38 	.word	0x08018f38

08014f0c <rmw_validate_node_name>:
 8014f0c:	2800      	cmp	r0, #0
 8014f0e:	d03b      	beq.n	8014f88 <rmw_validate_node_name+0x7c>
 8014f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f14:	460d      	mov	r5, r1
 8014f16:	2900      	cmp	r1, #0
 8014f18:	d038      	beq.n	8014f8c <rmw_validate_node_name+0x80>
 8014f1a:	4616      	mov	r6, r2
 8014f1c:	4604      	mov	r4, r0
 8014f1e:	f7eb f989 	bl	8000234 <strlen>
 8014f22:	b1e0      	cbz	r0, 8014f5e <rmw_validate_node_name+0x52>
 8014f24:	1e63      	subs	r3, r4, #1
 8014f26:	eb03 0800 	add.w	r8, r3, r0
 8014f2a:	f1c4 0101 	rsb	r1, r4, #1
 8014f2e:	18cf      	adds	r7, r1, r3
 8014f30:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8014f34:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8014f38:	f02e 0c20 	bic.w	ip, lr, #32
 8014f3c:	2a09      	cmp	r2, #9
 8014f3e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8014f42:	d914      	bls.n	8014f6e <rmw_validate_node_name+0x62>
 8014f44:	f1bc 0f19 	cmp.w	ip, #25
 8014f48:	d911      	bls.n	8014f6e <rmw_validate_node_name+0x62>
 8014f4a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8014f4e:	d00e      	beq.n	8014f6e <rmw_validate_node_name+0x62>
 8014f50:	2302      	movs	r3, #2
 8014f52:	602b      	str	r3, [r5, #0]
 8014f54:	b106      	cbz	r6, 8014f58 <rmw_validate_node_name+0x4c>
 8014f56:	6037      	str	r7, [r6, #0]
 8014f58:	2000      	movs	r0, #0
 8014f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f5e:	2301      	movs	r3, #1
 8014f60:	602b      	str	r3, [r5, #0]
 8014f62:	2e00      	cmp	r6, #0
 8014f64:	d0f8      	beq.n	8014f58 <rmw_validate_node_name+0x4c>
 8014f66:	2000      	movs	r0, #0
 8014f68:	6030      	str	r0, [r6, #0]
 8014f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f6e:	4543      	cmp	r3, r8
 8014f70:	d1dd      	bne.n	8014f2e <rmw_validate_node_name+0x22>
 8014f72:	7822      	ldrb	r2, [r4, #0]
 8014f74:	4b0d      	ldr	r3, [pc, #52]	@ (8014fac <rmw_validate_node_name+0xa0>)
 8014f76:	5cd3      	ldrb	r3, [r2, r3]
 8014f78:	f013 0304 	ands.w	r3, r3, #4
 8014f7c:	d110      	bne.n	8014fa0 <rmw_validate_node_name+0x94>
 8014f7e:	28ff      	cmp	r0, #255	@ 0xff
 8014f80:	d806      	bhi.n	8014f90 <rmw_validate_node_name+0x84>
 8014f82:	602b      	str	r3, [r5, #0]
 8014f84:	4618      	mov	r0, r3
 8014f86:	e7e8      	b.n	8014f5a <rmw_validate_node_name+0x4e>
 8014f88:	200b      	movs	r0, #11
 8014f8a:	4770      	bx	lr
 8014f8c:	200b      	movs	r0, #11
 8014f8e:	e7e4      	b.n	8014f5a <rmw_validate_node_name+0x4e>
 8014f90:	2204      	movs	r2, #4
 8014f92:	602a      	str	r2, [r5, #0]
 8014f94:	2e00      	cmp	r6, #0
 8014f96:	d0df      	beq.n	8014f58 <rmw_validate_node_name+0x4c>
 8014f98:	22fe      	movs	r2, #254	@ 0xfe
 8014f9a:	6032      	str	r2, [r6, #0]
 8014f9c:	4618      	mov	r0, r3
 8014f9e:	e7dc      	b.n	8014f5a <rmw_validate_node_name+0x4e>
 8014fa0:	2303      	movs	r3, #3
 8014fa2:	602b      	str	r3, [r5, #0]
 8014fa4:	2e00      	cmp	r6, #0
 8014fa6:	d1de      	bne.n	8014f66 <rmw_validate_node_name+0x5a>
 8014fa8:	e7d6      	b.n	8014f58 <rmw_validate_node_name+0x4c>
 8014faa:	bf00      	nop
 8014fac:	080192c8 	.word	0x080192c8

08014fb0 <rmw_node_name_validation_result_string>:
 8014fb0:	2804      	cmp	r0, #4
 8014fb2:	bf9a      	itte	ls
 8014fb4:	4b02      	ldrls	r3, [pc, #8]	@ (8014fc0 <rmw_node_name_validation_result_string+0x10>)
 8014fb6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8014fba:	4802      	ldrhi	r0, [pc, #8]	@ (8014fc4 <rmw_node_name_validation_result_string+0x14>)
 8014fbc:	4770      	bx	lr
 8014fbe:	bf00      	nop
 8014fc0:	080191ec 	.word	0x080191ec
 8014fc4:	08019100 	.word	0x08019100

08014fc8 <on_status>:
 8014fc8:	b082      	sub	sp, #8
 8014fca:	b002      	add	sp, #8
 8014fcc:	4770      	bx	lr
 8014fce:	bf00      	nop

08014fd0 <on_topic>:
 8014fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fd4:	4a22      	ldr	r2, [pc, #136]	@ (8015060 <on_topic+0x90>)
 8014fd6:	b094      	sub	sp, #80	@ 0x50
 8014fd8:	6812      	ldr	r2, [r2, #0]
 8014fda:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8014fdc:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8014fe0:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8014fe4:	b3c2      	cbz	r2, 8015058 <on_topic+0x88>
 8014fe6:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8014fea:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8014fee:	e001      	b.n	8014ff4 <on_topic+0x24>
 8014ff0:	6852      	ldr	r2, [r2, #4]
 8014ff2:	b38a      	cbz	r2, 8015058 <on_topic+0x88>
 8014ff4:	6894      	ldr	r4, [r2, #8]
 8014ff6:	8aa3      	ldrh	r3, [r4, #20]
 8014ff8:	428b      	cmp	r3, r1
 8014ffa:	d1f9      	bne.n	8014ff0 <on_topic+0x20>
 8014ffc:	7da3      	ldrb	r3, [r4, #22]
 8014ffe:	4283      	cmp	r3, r0
 8015000:	d1f6      	bne.n	8014ff0 <on_topic+0x20>
 8015002:	2248      	movs	r2, #72	@ 0x48
 8015004:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8015008:	4668      	mov	r0, sp
 801500a:	f002 fc48 	bl	801789e <memcpy>
 801500e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8015012:	cb0c      	ldmia	r3, {r2, r3}
 8015014:	4620      	mov	r0, r4
 8015016:	f7f8 ff8f 	bl	800df38 <rmw_uxrce_get_static_input_buffer_for_entity>
 801501a:	4607      	mov	r7, r0
 801501c:	b1e0      	cbz	r0, 8015058 <on_topic+0x88>
 801501e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8015022:	4632      	mov	r2, r6
 8015024:	4628      	mov	r0, r5
 8015026:	f108 0110 	add.w	r1, r8, #16
 801502a:	f000 fd99 	bl	8015b60 <ucdr_deserialize_array_uint8_t>
 801502e:	b930      	cbnz	r0, 801503e <on_topic+0x6e>
 8015030:	480c      	ldr	r0, [pc, #48]	@ (8015064 <on_topic+0x94>)
 8015032:	4639      	mov	r1, r7
 8015034:	b014      	add	sp, #80	@ 0x50
 8015036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801503a:	f000 b8bd 	b.w	80151b8 <put_memory>
 801503e:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8015042:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8015046:	f7f8 fd75 	bl	800db34 <rmw_uros_epoch_nanos>
 801504a:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801504e:	2305      	movs	r3, #5
 8015050:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015054:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8015058:	b014      	add	sp, #80	@ 0x50
 801505a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801505e:	bf00      	nop
 8015060:	2000ac34 	.word	0x2000ac34
 8015064:	2000ac24 	.word	0x2000ac24

08015068 <on_request>:
 8015068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801506c:	4823      	ldr	r0, [pc, #140]	@ (80150fc <on_request+0x94>)
 801506e:	b094      	sub	sp, #80	@ 0x50
 8015070:	6800      	ldr	r0, [r0, #0]
 8015072:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8015074:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015078:	9113      	str	r1, [sp, #76]	@ 0x4c
 801507a:	2800      	cmp	r0, #0
 801507c:	d03b      	beq.n	80150f6 <on_request+0x8e>
 801507e:	461d      	mov	r5, r3
 8015080:	e001      	b.n	8015086 <on_request+0x1e>
 8015082:	6840      	ldr	r0, [r0, #4]
 8015084:	b3b8      	cbz	r0, 80150f6 <on_request+0x8e>
 8015086:	6884      	ldr	r4, [r0, #8]
 8015088:	8b21      	ldrh	r1, [r4, #24]
 801508a:	4291      	cmp	r1, r2
 801508c:	d1f9      	bne.n	8015082 <on_request+0x1a>
 801508e:	2248      	movs	r2, #72	@ 0x48
 8015090:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8015094:	4668      	mov	r0, sp
 8015096:	f002 fc02 	bl	801789e <memcpy>
 801509a:	f104 0320 	add.w	r3, r4, #32
 801509e:	cb0c      	ldmia	r3, {r2, r3}
 80150a0:	4620      	mov	r0, r4
 80150a2:	f7f8 ff49 	bl	800df38 <rmw_uxrce_get_static_input_buffer_for_entity>
 80150a6:	4680      	mov	r8, r0
 80150a8:	b328      	cbz	r0, 80150f6 <on_request+0x8e>
 80150aa:	4638      	mov	r0, r7
 80150ac:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80150b0:	4632      	mov	r2, r6
 80150b2:	f107 0110 	add.w	r1, r7, #16
 80150b6:	f000 fd53 	bl	8015b60 <ucdr_deserialize_array_uint8_t>
 80150ba:	b930      	cbnz	r0, 80150ca <on_request+0x62>
 80150bc:	4810      	ldr	r0, [pc, #64]	@ (8015100 <on_request+0x98>)
 80150be:	4641      	mov	r1, r8
 80150c0:	b014      	add	sp, #80	@ 0x50
 80150c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80150c6:	f000 b877 	b.w	80151b8 <put_memory>
 80150ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80150cc:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 80150d0:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80150d4:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80150d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80150dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80150e0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80150e4:	f7f8 fd26 	bl	800db34 <rmw_uros_epoch_nanos>
 80150e8:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80150ec:	2303      	movs	r3, #3
 80150ee:	e942 0102 	strd	r0, r1, [r2, #-8]
 80150f2:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80150f6:	b014      	add	sp, #80	@ 0x50
 80150f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150fc:	2000ac04 	.word	0x2000ac04
 8015100:	2000ac24 	.word	0x2000ac24

08015104 <on_reply>:
 8015104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015108:	4821      	ldr	r0, [pc, #132]	@ (8015190 <on_reply+0x8c>)
 801510a:	b094      	sub	sp, #80	@ 0x50
 801510c:	6800      	ldr	r0, [r0, #0]
 801510e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8015110:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015114:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015116:	b3b8      	cbz	r0, 8015188 <on_reply+0x84>
 8015118:	461d      	mov	r5, r3
 801511a:	e001      	b.n	8015120 <on_reply+0x1c>
 801511c:	6840      	ldr	r0, [r0, #4]
 801511e:	b398      	cbz	r0, 8015188 <on_reply+0x84>
 8015120:	6884      	ldr	r4, [r0, #8]
 8015122:	8b21      	ldrh	r1, [r4, #24]
 8015124:	4291      	cmp	r1, r2
 8015126:	d1f9      	bne.n	801511c <on_reply+0x18>
 8015128:	2248      	movs	r2, #72	@ 0x48
 801512a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801512e:	4668      	mov	r0, sp
 8015130:	f002 fbb5 	bl	801789e <memcpy>
 8015134:	f104 0320 	add.w	r3, r4, #32
 8015138:	cb0c      	ldmia	r3, {r2, r3}
 801513a:	4620      	mov	r0, r4
 801513c:	f7f8 fefc 	bl	800df38 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015140:	4680      	mov	r8, r0
 8015142:	b308      	cbz	r0, 8015188 <on_reply+0x84>
 8015144:	4638      	mov	r0, r7
 8015146:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801514a:	4632      	mov	r2, r6
 801514c:	f107 0110 	add.w	r1, r7, #16
 8015150:	f000 fd06 	bl	8015b60 <ucdr_deserialize_array_uint8_t>
 8015154:	b930      	cbnz	r0, 8015164 <on_reply+0x60>
 8015156:	480f      	ldr	r0, [pc, #60]	@ (8015194 <on_reply+0x90>)
 8015158:	4641      	mov	r1, r8
 801515a:	b014      	add	sp, #80	@ 0x50
 801515c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015160:	f000 b82a 	b.w	80151b8 <put_memory>
 8015164:	2200      	movs	r2, #0
 8015166:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801516a:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801516e:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8015172:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8015176:	f7f8 fcdd 	bl	800db34 <rmw_uros_epoch_nanos>
 801517a:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801517e:	2304      	movs	r3, #4
 8015180:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015184:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8015188:	b014      	add	sp, #80	@ 0x50
 801518a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801518e:	bf00      	nop
 8015190:	20006314 	.word	0x20006314
 8015194:	2000ac24 	.word	0x2000ac24

08015198 <get_memory>:
 8015198:	4603      	mov	r3, r0
 801519a:	6840      	ldr	r0, [r0, #4]
 801519c:	b158      	cbz	r0, 80151b6 <get_memory+0x1e>
 801519e:	6842      	ldr	r2, [r0, #4]
 80151a0:	605a      	str	r2, [r3, #4]
 80151a2:	b10a      	cbz	r2, 80151a8 <get_memory+0x10>
 80151a4:	2100      	movs	r1, #0
 80151a6:	6011      	str	r1, [r2, #0]
 80151a8:	681a      	ldr	r2, [r3, #0]
 80151aa:	6042      	str	r2, [r0, #4]
 80151ac:	b102      	cbz	r2, 80151b0 <get_memory+0x18>
 80151ae:	6010      	str	r0, [r2, #0]
 80151b0:	2200      	movs	r2, #0
 80151b2:	6002      	str	r2, [r0, #0]
 80151b4:	6018      	str	r0, [r3, #0]
 80151b6:	4770      	bx	lr

080151b8 <put_memory>:
 80151b8:	680b      	ldr	r3, [r1, #0]
 80151ba:	b10b      	cbz	r3, 80151c0 <put_memory+0x8>
 80151bc:	684a      	ldr	r2, [r1, #4]
 80151be:	605a      	str	r2, [r3, #4]
 80151c0:	684a      	ldr	r2, [r1, #4]
 80151c2:	b102      	cbz	r2, 80151c6 <put_memory+0xe>
 80151c4:	6013      	str	r3, [r2, #0]
 80151c6:	6803      	ldr	r3, [r0, #0]
 80151c8:	428b      	cmp	r3, r1
 80151ca:	6843      	ldr	r3, [r0, #4]
 80151cc:	bf08      	it	eq
 80151ce:	6002      	streq	r2, [r0, #0]
 80151d0:	604b      	str	r3, [r1, #4]
 80151d2:	b103      	cbz	r3, 80151d6 <put_memory+0x1e>
 80151d4:	6019      	str	r1, [r3, #0]
 80151d6:	2300      	movs	r3, #0
 80151d8:	600b      	str	r3, [r1, #0]
 80151da:	6041      	str	r1, [r0, #4]
 80151dc:	4770      	bx	lr
 80151de:	bf00      	nop

080151e0 <rmw_destroy_client>:
 80151e0:	b570      	push	{r4, r5, r6, lr}
 80151e2:	b128      	cbz	r0, 80151f0 <rmw_destroy_client+0x10>
 80151e4:	4604      	mov	r4, r0
 80151e6:	6800      	ldr	r0, [r0, #0]
 80151e8:	460d      	mov	r5, r1
 80151ea:	f7f9 f81b 	bl	800e224 <is_uxrce_rmw_identifier_valid>
 80151ee:	b910      	cbnz	r0, 80151f6 <rmw_destroy_client+0x16>
 80151f0:	2401      	movs	r4, #1
 80151f2:	4620      	mov	r0, r4
 80151f4:	bd70      	pop	{r4, r5, r6, pc}
 80151f6:	6863      	ldr	r3, [r4, #4]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d0f9      	beq.n	80151f0 <rmw_destroy_client+0x10>
 80151fc:	2d00      	cmp	r5, #0
 80151fe:	d0f7      	beq.n	80151f0 <rmw_destroy_client+0x10>
 8015200:	6828      	ldr	r0, [r5, #0]
 8015202:	f7f9 f80f 	bl	800e224 <is_uxrce_rmw_identifier_valid>
 8015206:	2800      	cmp	r0, #0
 8015208:	d0f2      	beq.n	80151f0 <rmw_destroy_client+0x10>
 801520a:	686e      	ldr	r6, [r5, #4]
 801520c:	2e00      	cmp	r6, #0
 801520e:	d0ef      	beq.n	80151f0 <rmw_destroy_client+0x10>
 8015210:	6864      	ldr	r4, [r4, #4]
 8015212:	6932      	ldr	r2, [r6, #16]
 8015214:	6920      	ldr	r0, [r4, #16]
 8015216:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801521a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801521e:	6819      	ldr	r1, [r3, #0]
 8015220:	f7f9 fa9a 	bl	800e758 <uxr_buffer_cancel_data>
 8015224:	4602      	mov	r2, r0
 8015226:	6920      	ldr	r0, [r4, #16]
 8015228:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801522c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015230:	f7f8 ff78 	bl	800e124 <run_xrce_session>
 8015234:	6920      	ldr	r0, [r4, #16]
 8015236:	6932      	ldr	r2, [r6, #16]
 8015238:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801523c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015240:	6819      	ldr	r1, [r3, #0]
 8015242:	f7f9 f83d 	bl	800e2c0 <uxr_buffer_delete_entity>
 8015246:	4602      	mov	r2, r0
 8015248:	6920      	ldr	r0, [r4, #16]
 801524a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801524e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015252:	f7f8 ff67 	bl	800e124 <run_xrce_session>
 8015256:	2800      	cmp	r0, #0
 8015258:	4628      	mov	r0, r5
 801525a:	bf14      	ite	ne
 801525c:	2400      	movne	r4, #0
 801525e:	2402      	moveq	r4, #2
 8015260:	f7f8 fe48 	bl	800def4 <rmw_uxrce_fini_client_memory>
 8015264:	e7c5      	b.n	80151f2 <rmw_destroy_client+0x12>
 8015266:	bf00      	nop

08015268 <rmw_get_implementation_identifier>:
 8015268:	4b01      	ldr	r3, [pc, #4]	@ (8015270 <rmw_get_implementation_identifier+0x8>)
 801526a:	6818      	ldr	r0, [r3, #0]
 801526c:	4770      	bx	lr
 801526e:	bf00      	nop
 8015270:	08019218 	.word	0x08019218

08015274 <create_topic>:
 8015274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015278:	4605      	mov	r5, r0
 801527a:	b084      	sub	sp, #16
 801527c:	4822      	ldr	r0, [pc, #136]	@ (8015308 <create_topic+0x94>)
 801527e:	460f      	mov	r7, r1
 8015280:	4616      	mov	r6, r2
 8015282:	f7ff ff89 	bl	8015198 <get_memory>
 8015286:	4604      	mov	r4, r0
 8015288:	2800      	cmp	r0, #0
 801528a:	d039      	beq.n	8015300 <create_topic+0x8c>
 801528c:	692b      	ldr	r3, [r5, #16]
 801528e:	6884      	ldr	r4, [r0, #8]
 8015290:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8015310 <create_topic+0x9c>
 8015294:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015298:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801529c:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 80152a0:	1c42      	adds	r2, r0, #1
 80152a2:	2102      	movs	r1, #2
 80152a4:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80152a8:	f7f9 fa26 	bl	800e6f8 <uxr_object_id>
 80152ac:	223c      	movs	r2, #60	@ 0x3c
 80152ae:	6120      	str	r0, [r4, #16]
 80152b0:	4641      	mov	r1, r8
 80152b2:	4638      	mov	r0, r7
 80152b4:	f7f8 ff9c 	bl	800e1f0 <generate_topic_name>
 80152b8:	b1f0      	cbz	r0, 80152f8 <create_topic+0x84>
 80152ba:	4f14      	ldr	r7, [pc, #80]	@ (801530c <create_topic+0x98>)
 80152bc:	4630      	mov	r0, r6
 80152be:	2264      	movs	r2, #100	@ 0x64
 80152c0:	4639      	mov	r1, r7
 80152c2:	f7f8 ff65 	bl	800e190 <generate_type_name>
 80152c6:	b1b8      	cbz	r0, 80152f8 <create_topic+0x84>
 80152c8:	6928      	ldr	r0, [r5, #16]
 80152ca:	2306      	movs	r3, #6
 80152cc:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80152d0:	f8cd 8000 	str.w	r8, [sp]
 80152d4:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80152d8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80152dc:	6811      	ldr	r1, [r2, #0]
 80152de:	696b      	ldr	r3, [r5, #20]
 80152e0:	6922      	ldr	r2, [r4, #16]
 80152e2:	f7f9 f86b 	bl	800e3bc <uxr_buffer_create_topic_bin>
 80152e6:	4602      	mov	r2, r0
 80152e8:	6928      	ldr	r0, [r5, #16]
 80152ea:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80152ee:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80152f2:	f7f8 ff17 	bl	800e124 <run_xrce_session>
 80152f6:	b918      	cbnz	r0, 8015300 <create_topic+0x8c>
 80152f8:	4620      	mov	r0, r4
 80152fa:	f7f8 fe11 	bl	800df20 <rmw_uxrce_fini_topic_memory>
 80152fe:	2400      	movs	r4, #0
 8015300:	4620      	mov	r0, r4
 8015302:	b004      	add	sp, #16
 8015304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015308:	2000ac44 	.word	0x2000ac44
 801530c:	2000acc4 	.word	0x2000acc4
 8015310:	2000ac88 	.word	0x2000ac88

08015314 <destroy_topic>:
 8015314:	b538      	push	{r3, r4, r5, lr}
 8015316:	6985      	ldr	r5, [r0, #24]
 8015318:	b1d5      	cbz	r5, 8015350 <destroy_topic+0x3c>
 801531a:	4604      	mov	r4, r0
 801531c:	6928      	ldr	r0, [r5, #16]
 801531e:	6922      	ldr	r2, [r4, #16]
 8015320:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015324:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015328:	6819      	ldr	r1, [r3, #0]
 801532a:	f7f8 ffc9 	bl	800e2c0 <uxr_buffer_delete_entity>
 801532e:	4602      	mov	r2, r0
 8015330:	6928      	ldr	r0, [r5, #16]
 8015332:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015336:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801533a:	f7f8 fef3 	bl	800e124 <run_xrce_session>
 801533e:	2800      	cmp	r0, #0
 8015340:	4620      	mov	r0, r4
 8015342:	bf14      	ite	ne
 8015344:	2400      	movne	r4, #0
 8015346:	2402      	moveq	r4, #2
 8015348:	f7f8 fdea 	bl	800df20 <rmw_uxrce_fini_topic_memory>
 801534c:	4620      	mov	r0, r4
 801534e:	bd38      	pop	{r3, r4, r5, pc}
 8015350:	2401      	movs	r4, #1
 8015352:	4620      	mov	r0, r4
 8015354:	bd38      	pop	{r3, r4, r5, pc}
 8015356:	bf00      	nop

08015358 <rmw_send_request>:
 8015358:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801535c:	4604      	mov	r4, r0
 801535e:	6800      	ldr	r0, [r0, #0]
 8015360:	b08b      	sub	sp, #44	@ 0x2c
 8015362:	460e      	mov	r6, r1
 8015364:	4615      	mov	r5, r2
 8015366:	b128      	cbz	r0, 8015374 <rmw_send_request+0x1c>
 8015368:	4b21      	ldr	r3, [pc, #132]	@ (80153f0 <rmw_send_request+0x98>)
 801536a:	6819      	ldr	r1, [r3, #0]
 801536c:	f7ea ff58 	bl	8000220 <strcmp>
 8015370:	2800      	cmp	r0, #0
 8015372:	d139      	bne.n	80153e8 <rmw_send_request+0x90>
 8015374:	6864      	ldr	r4, [r4, #4]
 8015376:	6963      	ldr	r3, [r4, #20]
 8015378:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 801537c:	689b      	ldr	r3, [r3, #8]
 801537e:	4798      	blx	r3
 8015380:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8015384:	4630      	mov	r0, r6
 8015386:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801538a:	4798      	blx	r3
 801538c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015390:	9000      	str	r0, [sp, #0]
 8015392:	6922      	ldr	r2, [r4, #16]
 8015394:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8015396:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801539a:	ab02      	add	r3, sp, #8
 801539c:	f7fb fa82 	bl	80108a4 <uxr_prepare_output_stream>
 80153a0:	2700      	movs	r7, #0
 80153a2:	6028      	str	r0, [r5, #0]
 80153a4:	606f      	str	r7, [r5, #4]
 80153a6:	b198      	cbz	r0, 80153d0 <rmw_send_request+0x78>
 80153a8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80153ac:	a902      	add	r1, sp, #8
 80153ae:	4630      	mov	r0, r6
 80153b0:	4798      	blx	r3
 80153b2:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80153b6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80153ba:	2b01      	cmp	r3, #1
 80153bc:	d00c      	beq.n	80153d8 <rmw_send_request+0x80>
 80153be:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80153c0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80153c4:	f7f9 ff9c 	bl	800f300 <uxr_run_session_until_confirm_delivery>
 80153c8:	4638      	mov	r0, r7
 80153ca:	b00b      	add	sp, #44	@ 0x2c
 80153cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80153d0:	2001      	movs	r0, #1
 80153d2:	b00b      	add	sp, #44	@ 0x2c
 80153d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80153d8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80153dc:	f7f9 fbd0 	bl	800eb80 <uxr_flash_output_streams>
 80153e0:	4638      	mov	r0, r7
 80153e2:	b00b      	add	sp, #44	@ 0x2c
 80153e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80153e8:	200c      	movs	r0, #12
 80153ea:	b00b      	add	sp, #44	@ 0x2c
 80153ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80153f0:	08019218 	.word	0x08019218

080153f4 <rmw_take_request>:
 80153f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80153f8:	4605      	mov	r5, r0
 80153fa:	6800      	ldr	r0, [r0, #0]
 80153fc:	b089      	sub	sp, #36	@ 0x24
 80153fe:	460c      	mov	r4, r1
 8015400:	4690      	mov	r8, r2
 8015402:	461e      	mov	r6, r3
 8015404:	b128      	cbz	r0, 8015412 <rmw_take_request+0x1e>
 8015406:	4b28      	ldr	r3, [pc, #160]	@ (80154a8 <rmw_take_request+0xb4>)
 8015408:	6819      	ldr	r1, [r3, #0]
 801540a:	f7ea ff09 	bl	8000220 <strcmp>
 801540e:	2800      	cmp	r0, #0
 8015410:	d146      	bne.n	80154a0 <rmw_take_request+0xac>
 8015412:	b10e      	cbz	r6, 8015418 <rmw_take_request+0x24>
 8015414:	2300      	movs	r3, #0
 8015416:	7033      	strb	r3, [r6, #0]
 8015418:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801541c:	f7f8 fe04 	bl	800e028 <rmw_uxrce_clean_expired_static_input_buffer>
 8015420:	4648      	mov	r0, r9
 8015422:	f7f8 fdd9 	bl	800dfd8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015426:	4607      	mov	r7, r0
 8015428:	b3b0      	cbz	r0, 8015498 <rmw_take_request+0xa4>
 801542a:	6885      	ldr	r5, [r0, #8]
 801542c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8015430:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8015434:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8015438:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801543c:	7423      	strb	r3, [r4, #16]
 801543e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8015442:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8015446:	74e2      	strb	r2, [r4, #19]
 8015448:	f8a4 3011 	strh.w	r3, [r4, #17]
 801544c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8015450:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8015454:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8015458:	61e1      	str	r1, [r4, #28]
 801545a:	6162      	str	r2, [r4, #20]
 801545c:	61a3      	str	r3, [r4, #24]
 801545e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8015462:	689b      	ldr	r3, [r3, #8]
 8015464:	4798      	blx	r3
 8015466:	6844      	ldr	r4, [r0, #4]
 8015468:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801546c:	f105 0110 	add.w	r1, r5, #16
 8015470:	4668      	mov	r0, sp
 8015472:	f7f6 fb13 	bl	800ba9c <ucdr_init_buffer>
 8015476:	68e3      	ldr	r3, [r4, #12]
 8015478:	4641      	mov	r1, r8
 801547a:	4668      	mov	r0, sp
 801547c:	4798      	blx	r3
 801547e:	4639      	mov	r1, r7
 8015480:	4604      	mov	r4, r0
 8015482:	480a      	ldr	r0, [pc, #40]	@ (80154ac <rmw_take_request+0xb8>)
 8015484:	f7ff fe98 	bl	80151b8 <put_memory>
 8015488:	b106      	cbz	r6, 801548c <rmw_take_request+0x98>
 801548a:	7034      	strb	r4, [r6, #0]
 801548c:	f084 0001 	eor.w	r0, r4, #1
 8015490:	b2c0      	uxtb	r0, r0
 8015492:	b009      	add	sp, #36	@ 0x24
 8015494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015498:	2001      	movs	r0, #1
 801549a:	b009      	add	sp, #36	@ 0x24
 801549c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80154a0:	200c      	movs	r0, #12
 80154a2:	b009      	add	sp, #36	@ 0x24
 80154a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80154a8:	08019218 	.word	0x08019218
 80154ac:	2000ac24 	.word	0x2000ac24

080154b0 <rmw_send_response>:
 80154b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154b2:	4605      	mov	r5, r0
 80154b4:	6800      	ldr	r0, [r0, #0]
 80154b6:	b091      	sub	sp, #68	@ 0x44
 80154b8:	460c      	mov	r4, r1
 80154ba:	4616      	mov	r6, r2
 80154bc:	b128      	cbz	r0, 80154ca <rmw_send_response+0x1a>
 80154be:	4b29      	ldr	r3, [pc, #164]	@ (8015564 <rmw_send_response+0xb4>)
 80154c0:	6819      	ldr	r1, [r3, #0]
 80154c2:	f7ea fead 	bl	8000220 <strcmp>
 80154c6:	2800      	cmp	r0, #0
 80154c8:	d141      	bne.n	801554e <rmw_send_response+0x9e>
 80154ca:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80154ce:	9306      	str	r3, [sp, #24]
 80154d0:	4623      	mov	r3, r4
 80154d2:	9207      	str	r2, [sp, #28]
 80154d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80154d8:	686d      	ldr	r5, [r5, #4]
 80154da:	789b      	ldrb	r3, [r3, #2]
 80154dc:	68a1      	ldr	r1, [r4, #8]
 80154de:	f88d 2017 	strb.w	r2, [sp, #23]
 80154e2:	f88d 3016 	strb.w	r3, [sp, #22]
 80154e6:	68e2      	ldr	r2, [r4, #12]
 80154e8:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80154ec:	6860      	ldr	r0, [r4, #4]
 80154ee:	f8ad 3014 	strh.w	r3, [sp, #20]
 80154f2:	ab02      	add	r3, sp, #8
 80154f4:	c307      	stmia	r3!, {r0, r1, r2}
 80154f6:	696b      	ldr	r3, [r5, #20]
 80154f8:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 80154fa:	68db      	ldr	r3, [r3, #12]
 80154fc:	4798      	blx	r3
 80154fe:	6844      	ldr	r4, [r0, #4]
 8015500:	4630      	mov	r0, r6
 8015502:	6923      	ldr	r3, [r4, #16]
 8015504:	4798      	blx	r3
 8015506:	f100 0318 	add.w	r3, r0, #24
 801550a:	6938      	ldr	r0, [r7, #16]
 801550c:	9300      	str	r3, [sp, #0]
 801550e:	692a      	ldr	r2, [r5, #16]
 8015510:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8015512:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015516:	ab08      	add	r3, sp, #32
 8015518:	f7fb f9c4 	bl	80108a4 <uxr_prepare_output_stream>
 801551c:	b910      	cbnz	r0, 8015524 <rmw_send_response+0x74>
 801551e:	2001      	movs	r0, #1
 8015520:	b011      	add	sp, #68	@ 0x44
 8015522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015524:	a902      	add	r1, sp, #8
 8015526:	a808      	add	r0, sp, #32
 8015528:	f7fc fa16 	bl	8011958 <uxr_serialize_SampleIdentity>
 801552c:	68a3      	ldr	r3, [r4, #8]
 801552e:	a908      	add	r1, sp, #32
 8015530:	4630      	mov	r0, r6
 8015532:	4798      	blx	r3
 8015534:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8015538:	6938      	ldr	r0, [r7, #16]
 801553a:	2b01      	cmp	r3, #1
 801553c:	d00a      	beq.n	8015554 <rmw_send_response+0xa4>
 801553e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8015540:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015544:	f7f9 fedc 	bl	800f300 <uxr_run_session_until_confirm_delivery>
 8015548:	2000      	movs	r0, #0
 801554a:	b011      	add	sp, #68	@ 0x44
 801554c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801554e:	200c      	movs	r0, #12
 8015550:	b011      	add	sp, #68	@ 0x44
 8015552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015554:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015558:	f7f9 fb12 	bl	800eb80 <uxr_flash_output_streams>
 801555c:	2000      	movs	r0, #0
 801555e:	b011      	add	sp, #68	@ 0x44
 8015560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015562:	bf00      	nop
 8015564:	08019218 	.word	0x08019218

08015568 <rmw_take_response>:
 8015568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801556c:	4604      	mov	r4, r0
 801556e:	6800      	ldr	r0, [r0, #0]
 8015570:	b088      	sub	sp, #32
 8015572:	4688      	mov	r8, r1
 8015574:	4617      	mov	r7, r2
 8015576:	461d      	mov	r5, r3
 8015578:	b120      	cbz	r0, 8015584 <rmw_take_response+0x1c>
 801557a:	4b1e      	ldr	r3, [pc, #120]	@ (80155f4 <rmw_take_response+0x8c>)
 801557c:	6819      	ldr	r1, [r3, #0]
 801557e:	f7ea fe4f 	bl	8000220 <strcmp>
 8015582:	bb78      	cbnz	r0, 80155e4 <rmw_take_response+0x7c>
 8015584:	b10d      	cbz	r5, 801558a <rmw_take_response+0x22>
 8015586:	2300      	movs	r3, #0
 8015588:	702b      	strb	r3, [r5, #0]
 801558a:	6864      	ldr	r4, [r4, #4]
 801558c:	f7f8 fd4c 	bl	800e028 <rmw_uxrce_clean_expired_static_input_buffer>
 8015590:	4620      	mov	r0, r4
 8015592:	f7f8 fd21 	bl	800dfd8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015596:	4606      	mov	r6, r0
 8015598:	b340      	cbz	r0, 80155ec <rmw_take_response+0x84>
 801559a:	6963      	ldr	r3, [r4, #20]
 801559c:	6884      	ldr	r4, [r0, #8]
 801559e:	68db      	ldr	r3, [r3, #12]
 80155a0:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 80155a4:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80155a8:	e9c8 0108 	strd	r0, r1, [r8, #32]
 80155ac:	4798      	blx	r3
 80155ae:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80155b2:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 80155b6:	f104 0110 	add.w	r1, r4, #16
 80155ba:	4668      	mov	r0, sp
 80155bc:	f7f6 fa6e 	bl	800ba9c <ucdr_init_buffer>
 80155c0:	4639      	mov	r1, r7
 80155c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80155c6:	4668      	mov	r0, sp
 80155c8:	4798      	blx	r3
 80155ca:	4631      	mov	r1, r6
 80155cc:	4604      	mov	r4, r0
 80155ce:	480a      	ldr	r0, [pc, #40]	@ (80155f8 <rmw_take_response+0x90>)
 80155d0:	f7ff fdf2 	bl	80151b8 <put_memory>
 80155d4:	b105      	cbz	r5, 80155d8 <rmw_take_response+0x70>
 80155d6:	702c      	strb	r4, [r5, #0]
 80155d8:	f084 0001 	eor.w	r0, r4, #1
 80155dc:	b2c0      	uxtb	r0, r0
 80155de:	b008      	add	sp, #32
 80155e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155e4:	200c      	movs	r0, #12
 80155e6:	b008      	add	sp, #32
 80155e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155ec:	2001      	movs	r0, #1
 80155ee:	b008      	add	sp, #32
 80155f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155f4:	08019218 	.word	0x08019218
 80155f8:	2000ac24 	.word	0x2000ac24

080155fc <rmw_take_with_info>:
 80155fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155fe:	4604      	mov	r4, r0
 8015600:	6800      	ldr	r0, [r0, #0]
 8015602:	b089      	sub	sp, #36	@ 0x24
 8015604:	460f      	mov	r7, r1
 8015606:	4615      	mov	r5, r2
 8015608:	b128      	cbz	r0, 8015616 <rmw_take_with_info+0x1a>
 801560a:	4b24      	ldr	r3, [pc, #144]	@ (801569c <rmw_take_with_info+0xa0>)
 801560c:	6819      	ldr	r1, [r3, #0]
 801560e:	f7ea fe07 	bl	8000220 <strcmp>
 8015612:	2800      	cmp	r0, #0
 8015614:	d13e      	bne.n	8015694 <rmw_take_with_info+0x98>
 8015616:	b305      	cbz	r5, 801565a <rmw_take_with_info+0x5e>
 8015618:	6864      	ldr	r4, [r4, #4]
 801561a:	2300      	movs	r3, #0
 801561c:	702b      	strb	r3, [r5, #0]
 801561e:	f7f8 fd03 	bl	800e028 <rmw_uxrce_clean_expired_static_input_buffer>
 8015622:	4620      	mov	r0, r4
 8015624:	f7f8 fcd8 	bl	800dfd8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015628:	4606      	mov	r6, r0
 801562a:	b1f0      	cbz	r0, 801566a <rmw_take_with_info+0x6e>
 801562c:	6881      	ldr	r1, [r0, #8]
 801562e:	4668      	mov	r0, sp
 8015630:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8015634:	3110      	adds	r1, #16
 8015636:	f7f6 fa31 	bl	800ba9c <ucdr_init_buffer>
 801563a:	69a3      	ldr	r3, [r4, #24]
 801563c:	4639      	mov	r1, r7
 801563e:	68db      	ldr	r3, [r3, #12]
 8015640:	4668      	mov	r0, sp
 8015642:	4798      	blx	r3
 8015644:	4631      	mov	r1, r6
 8015646:	4604      	mov	r4, r0
 8015648:	4815      	ldr	r0, [pc, #84]	@ (80156a0 <rmw_take_with_info+0xa4>)
 801564a:	f7ff fdb5 	bl	80151b8 <put_memory>
 801564e:	702c      	strb	r4, [r5, #0]
 8015650:	f084 0001 	eor.w	r0, r4, #1
 8015654:	b2c0      	uxtb	r0, r0
 8015656:	b009      	add	sp, #36	@ 0x24
 8015658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801565a:	6864      	ldr	r4, [r4, #4]
 801565c:	f7f8 fce4 	bl	800e028 <rmw_uxrce_clean_expired_static_input_buffer>
 8015660:	4620      	mov	r0, r4
 8015662:	f7f8 fcb9 	bl	800dfd8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015666:	4605      	mov	r5, r0
 8015668:	b910      	cbnz	r0, 8015670 <rmw_take_with_info+0x74>
 801566a:	2001      	movs	r0, #1
 801566c:	b009      	add	sp, #36	@ 0x24
 801566e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015670:	68a9      	ldr	r1, [r5, #8]
 8015672:	4668      	mov	r0, sp
 8015674:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8015678:	3110      	adds	r1, #16
 801567a:	f7f6 fa0f 	bl	800ba9c <ucdr_init_buffer>
 801567e:	69a3      	ldr	r3, [r4, #24]
 8015680:	4639      	mov	r1, r7
 8015682:	68db      	ldr	r3, [r3, #12]
 8015684:	4668      	mov	r0, sp
 8015686:	4798      	blx	r3
 8015688:	4629      	mov	r1, r5
 801568a:	4604      	mov	r4, r0
 801568c:	4804      	ldr	r0, [pc, #16]	@ (80156a0 <rmw_take_with_info+0xa4>)
 801568e:	f7ff fd93 	bl	80151b8 <put_memory>
 8015692:	e7dd      	b.n	8015650 <rmw_take_with_info+0x54>
 8015694:	200c      	movs	r0, #12
 8015696:	b009      	add	sp, #36	@ 0x24
 8015698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801569a:	bf00      	nop
 801569c:	08019218 	.word	0x08019218
 80156a0:	2000ac24 	.word	0x2000ac24

080156a4 <rmw_wait>:
 80156a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80156a8:	b089      	sub	sp, #36	@ 0x24
 80156aa:	4605      	mov	r5, r0
 80156ac:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80156ae:	460e      	mov	r6, r1
 80156b0:	4698      	mov	r8, r3
 80156b2:	4691      	mov	r9, r2
 80156b4:	2a00      	cmp	r2, #0
 80156b6:	f000 810a 	beq.w	80158ce <rmw_wait+0x22a>
 80156ba:	b16c      	cbz	r4, 80156d8 <rmw_wait+0x34>
 80156bc:	4bae      	ldr	r3, [pc, #696]	@ (8015978 <rmw_wait+0x2d4>)
 80156be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80156c0:	af04      	add	r7, sp, #16
 80156c2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80156c6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80156ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80156ce:	f7ff faaf 	bl	8014c30 <rmw_time_equal>
 80156d2:	2800      	cmp	r0, #0
 80156d4:	f000 8127 	beq.w	8015926 <rmw_wait+0x282>
 80156d8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80156dc:	f7f8 fca4 	bl	800e028 <rmw_uxrce_clean_expired_static_input_buffer>
 80156e0:	4ba6      	ldr	r3, [pc, #664]	@ (801597c <rmw_wait+0x2d8>)
 80156e2:	681c      	ldr	r4, [r3, #0]
 80156e4:	b14c      	cbz	r4, 80156fa <rmw_wait+0x56>
 80156e6:	4623      	mov	r3, r4
 80156e8:	2100      	movs	r1, #0
 80156ea:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 80156ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80156f2:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d1f7      	bne.n	80156ea <rmw_wait+0x46>
 80156fa:	f1b9 0f00 	cmp.w	r9, #0
 80156fe:	d011      	beq.n	8015724 <rmw_wait+0x80>
 8015700:	f8d9 1000 	ldr.w	r1, [r9]
 8015704:	b171      	cbz	r1, 8015724 <rmw_wait+0x80>
 8015706:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801570a:	2300      	movs	r3, #0
 801570c:	2001      	movs	r0, #1
 801570e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015712:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8015714:	6912      	ldr	r2, [r2, #16]
 8015716:	3301      	adds	r3, #1
 8015718:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801571c:	4299      	cmp	r1, r3
 801571e:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015722:	d1f4      	bne.n	801570e <rmw_wait+0x6a>
 8015724:	f1b8 0f00 	cmp.w	r8, #0
 8015728:	d011      	beq.n	801574e <rmw_wait+0xaa>
 801572a:	f8d8 1000 	ldr.w	r1, [r8]
 801572e:	b171      	cbz	r1, 801574e <rmw_wait+0xaa>
 8015730:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8015734:	2300      	movs	r3, #0
 8015736:	2001      	movs	r0, #1
 8015738:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801573c:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801573e:	6912      	ldr	r2, [r2, #16]
 8015740:	3301      	adds	r3, #1
 8015742:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015746:	4299      	cmp	r1, r3
 8015748:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801574c:	d1f4      	bne.n	8015738 <rmw_wait+0x94>
 801574e:	b185      	cbz	r5, 8015772 <rmw_wait+0xce>
 8015750:	6829      	ldr	r1, [r5, #0]
 8015752:	b171      	cbz	r1, 8015772 <rmw_wait+0xce>
 8015754:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8015758:	2300      	movs	r3, #0
 801575a:	2001      	movs	r0, #1
 801575c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015760:	6a12      	ldr	r2, [r2, #32]
 8015762:	6912      	ldr	r2, [r2, #16]
 8015764:	3301      	adds	r3, #1
 8015766:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801576a:	4299      	cmp	r1, r3
 801576c:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015770:	d1f4      	bne.n	801575c <rmw_wait+0xb8>
 8015772:	b34c      	cbz	r4, 80157c8 <rmw_wait+0x124>
 8015774:	4622      	mov	r2, r4
 8015776:	2300      	movs	r3, #0
 8015778:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801577c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8015780:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8015784:	440b      	add	r3, r1
 8015786:	b2db      	uxtb	r3, r3
 8015788:	2a00      	cmp	r2, #0
 801578a:	d1f5      	bne.n	8015778 <rmw_wait+0xd4>
 801578c:	2b00      	cmp	r3, #0
 801578e:	f000 8084 	beq.w	801589a <rmw_wait+0x1f6>
 8015792:	1c7a      	adds	r2, r7, #1
 8015794:	d00d      	beq.n	80157b2 <rmw_wait+0x10e>
 8015796:	ee07 7a90 	vmov	s15, r7
 801579a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801579e:	ee07 3a90 	vmov	s15, r3
 80157a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80157a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80157aa:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80157ae:	ee17 7a90 	vmov	r7, s15
 80157b2:	68a0      	ldr	r0, [r4, #8]
 80157b4:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 80157b8:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 80157bc:	2b00      	cmp	r3, #0
 80157be:	f040 8090 	bne.w	80158e2 <rmw_wait+0x23e>
 80157c2:	6864      	ldr	r4, [r4, #4]
 80157c4:	2c00      	cmp	r4, #0
 80157c6:	d1f4      	bne.n	80157b2 <rmw_wait+0x10e>
 80157c8:	f1b9 0f00 	cmp.w	r9, #0
 80157cc:	f000 80bc 	beq.w	8015948 <rmw_wait+0x2a4>
 80157d0:	f8d9 7000 	ldr.w	r7, [r9]
 80157d4:	2f00      	cmp	r7, #0
 80157d6:	f000 808e 	beq.w	80158f6 <rmw_wait+0x252>
 80157da:	2400      	movs	r4, #0
 80157dc:	4627      	mov	r7, r4
 80157de:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80157e2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80157e6:	f7f8 fbf7 	bl	800dfd8 <rmw_uxrce_find_static_input_buffer_by_owner>
 80157ea:	2800      	cmp	r0, #0
 80157ec:	d05f      	beq.n	80158ae <rmw_wait+0x20a>
 80157ee:	f8d9 3000 	ldr.w	r3, [r9]
 80157f2:	3401      	adds	r4, #1
 80157f4:	42a3      	cmp	r3, r4
 80157f6:	f04f 0701 	mov.w	r7, #1
 80157fa:	d8f0      	bhi.n	80157de <rmw_wait+0x13a>
 80157fc:	f1b8 0f00 	cmp.w	r8, #0
 8015800:	d012      	beq.n	8015828 <rmw_wait+0x184>
 8015802:	f8d8 3000 	ldr.w	r3, [r8]
 8015806:	b17b      	cbz	r3, 8015828 <rmw_wait+0x184>
 8015808:	2400      	movs	r4, #0
 801580a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801580e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015812:	f7f8 fbe1 	bl	800dfd8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015816:	2800      	cmp	r0, #0
 8015818:	d051      	beq.n	80158be <rmw_wait+0x21a>
 801581a:	f8d8 3000 	ldr.w	r3, [r8]
 801581e:	3401      	adds	r4, #1
 8015820:	42a3      	cmp	r3, r4
 8015822:	f04f 0701 	mov.w	r7, #1
 8015826:	d8f0      	bhi.n	801580a <rmw_wait+0x166>
 8015828:	b1dd      	cbz	r5, 8015862 <rmw_wait+0x1be>
 801582a:	682b      	ldr	r3, [r5, #0]
 801582c:	b1cb      	cbz	r3, 8015862 <rmw_wait+0x1be>
 801582e:	2400      	movs	r4, #0
 8015830:	686b      	ldr	r3, [r5, #4]
 8015832:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015836:	f7f8 fbcf 	bl	800dfd8 <rmw_uxrce_find_static_input_buffer_by_owner>
 801583a:	b158      	cbz	r0, 8015854 <rmw_wait+0x1b0>
 801583c:	682b      	ldr	r3, [r5, #0]
 801583e:	3401      	adds	r4, #1
 8015840:	42a3      	cmp	r3, r4
 8015842:	d969      	bls.n	8015918 <rmw_wait+0x274>
 8015844:	686b      	ldr	r3, [r5, #4]
 8015846:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801584a:	2701      	movs	r7, #1
 801584c:	f7f8 fbc4 	bl	800dfd8 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015850:	2800      	cmp	r0, #0
 8015852:	d1f3      	bne.n	801583c <rmw_wait+0x198>
 8015854:	e9d5 3200 	ldrd	r3, r2, [r5]
 8015858:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801585c:	3401      	adds	r4, #1
 801585e:	42a3      	cmp	r3, r4
 8015860:	d8e6      	bhi.n	8015830 <rmw_wait+0x18c>
 8015862:	b1a6      	cbz	r6, 801588e <rmw_wait+0x1ea>
 8015864:	6834      	ldr	r4, [r6, #0]
 8015866:	b194      	cbz	r4, 801588e <rmw_wait+0x1ea>
 8015868:	2300      	movs	r3, #0
 801586a:	461d      	mov	r5, r3
 801586c:	e004      	b.n	8015878 <rmw_wait+0x1d4>
 801586e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8015872:	3301      	adds	r3, #1
 8015874:	42a3      	cmp	r3, r4
 8015876:	d00a      	beq.n	801588e <rmw_wait+0x1ea>
 8015878:	6870      	ldr	r0, [r6, #4]
 801587a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801587e:	7c0a      	ldrb	r2, [r1, #16]
 8015880:	2a00      	cmp	r2, #0
 8015882:	d0f4      	beq.n	801586e <rmw_wait+0x1ca>
 8015884:	3301      	adds	r3, #1
 8015886:	42a3      	cmp	r3, r4
 8015888:	740d      	strb	r5, [r1, #16]
 801588a:	4617      	mov	r7, r2
 801588c:	d1f4      	bne.n	8015878 <rmw_wait+0x1d4>
 801588e:	2f00      	cmp	r7, #0
 8015890:	d03e      	beq.n	8015910 <rmw_wait+0x26c>
 8015892:	2000      	movs	r0, #0
 8015894:	b009      	add	sp, #36	@ 0x24
 8015896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801589a:	68a0      	ldr	r0, [r4, #8]
 801589c:	2100      	movs	r1, #0
 801589e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80158a2:	f7f9 fcf3 	bl	800f28c <uxr_run_session_timeout>
 80158a6:	6864      	ldr	r4, [r4, #4]
 80158a8:	2c00      	cmp	r4, #0
 80158aa:	d1f6      	bne.n	801589a <rmw_wait+0x1f6>
 80158ac:	e78c      	b.n	80157c8 <rmw_wait+0x124>
 80158ae:	e9d9 3200 	ldrd	r3, r2, [r9]
 80158b2:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80158b6:	3401      	adds	r4, #1
 80158b8:	42a3      	cmp	r3, r4
 80158ba:	d890      	bhi.n	80157de <rmw_wait+0x13a>
 80158bc:	e79e      	b.n	80157fc <rmw_wait+0x158>
 80158be:	e9d8 3200 	ldrd	r3, r2, [r8]
 80158c2:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80158c6:	3401      	adds	r4, #1
 80158c8:	429c      	cmp	r4, r3
 80158ca:	d39e      	bcc.n	801580a <rmw_wait+0x166>
 80158cc:	e7ac      	b.n	8015828 <rmw_wait+0x184>
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	f47f aef3 	bne.w	80156ba <rmw_wait+0x16>
 80158d4:	2800      	cmp	r0, #0
 80158d6:	f47f aef0 	bne.w	80156ba <rmw_wait+0x16>
 80158da:	2900      	cmp	r1, #0
 80158dc:	f47f aeed 	bne.w	80156ba <rmw_wait+0x16>
 80158e0:	e7d7      	b.n	8015892 <rmw_wait+0x1ee>
 80158e2:	4639      	mov	r1, r7
 80158e4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80158e8:	f7f9 fcea 	bl	800f2c0 <uxr_run_session_until_data>
 80158ec:	6864      	ldr	r4, [r4, #4]
 80158ee:	2c00      	cmp	r4, #0
 80158f0:	f47f af5f 	bne.w	80157b2 <rmw_wait+0x10e>
 80158f4:	e768      	b.n	80157c8 <rmw_wait+0x124>
 80158f6:	f1b8 0f00 	cmp.w	r8, #0
 80158fa:	d032      	beq.n	8015962 <rmw_wait+0x2be>
 80158fc:	f8d8 3000 	ldr.w	r3, [r8]
 8015900:	2b00      	cmp	r3, #0
 8015902:	d181      	bne.n	8015808 <rmw_wait+0x164>
 8015904:	461f      	mov	r7, r3
 8015906:	2d00      	cmp	r5, #0
 8015908:	d18f      	bne.n	801582a <rmw_wait+0x186>
 801590a:	462f      	mov	r7, r5
 801590c:	2e00      	cmp	r6, #0
 801590e:	d1a9      	bne.n	8015864 <rmw_wait+0x1c0>
 8015910:	2002      	movs	r0, #2
 8015912:	b009      	add	sp, #36	@ 0x24
 8015914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015918:	2e00      	cmp	r6, #0
 801591a:	d0ba      	beq.n	8015892 <rmw_wait+0x1ee>
 801591c:	6834      	ldr	r4, [r6, #0]
 801591e:	2701      	movs	r7, #1
 8015920:	2c00      	cmp	r4, #0
 8015922:	d1a1      	bne.n	8015868 <rmw_wait+0x1c4>
 8015924:	e7b5      	b.n	8015892 <rmw_wait+0x1ee>
 8015926:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801592a:	f7ff f9d5 	bl	8014cd8 <rmw_time_total_nsec>
 801592e:	2300      	movs	r3, #0
 8015930:	4a13      	ldr	r2, [pc, #76]	@ (8015980 <rmw_wait+0x2dc>)
 8015932:	f7eb f94b 	bl	8000bcc <__aeabi_uldivmod>
 8015936:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801593a:	f171 0300 	sbcs.w	r3, r1, #0
 801593e:	4607      	mov	r7, r0
 8015940:	bfa8      	it	ge
 8015942:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8015946:	e6c9      	b.n	80156dc <rmw_wait+0x38>
 8015948:	f1b8 0f00 	cmp.w	r8, #0
 801594c:	d009      	beq.n	8015962 <rmw_wait+0x2be>
 801594e:	f8d8 3000 	ldr.w	r3, [r8]
 8015952:	464f      	mov	r7, r9
 8015954:	2b00      	cmp	r3, #0
 8015956:	f47f af57 	bne.w	8015808 <rmw_wait+0x164>
 801595a:	2d00      	cmp	r5, #0
 801595c:	f47f af65 	bne.w	801582a <rmw_wait+0x186>
 8015960:	e7d3      	b.n	801590a <rmw_wait+0x266>
 8015962:	b17d      	cbz	r5, 8015984 <rmw_wait+0x2e0>
 8015964:	682b      	ldr	r3, [r5, #0]
 8015966:	4647      	mov	r7, r8
 8015968:	2b00      	cmp	r3, #0
 801596a:	f47f af60 	bne.w	801582e <rmw_wait+0x18a>
 801596e:	2e00      	cmp	r6, #0
 8015970:	f47f af78 	bne.w	8015864 <rmw_wait+0x1c0>
 8015974:	e7cc      	b.n	8015910 <rmw_wait+0x26c>
 8015976:	bf00      	nop
 8015978:	080186f8 	.word	0x080186f8
 801597c:	2000ac14 	.word	0x2000ac14
 8015980:	000f4240 	.word	0x000f4240
 8015984:	2e00      	cmp	r6, #0
 8015986:	d0c3      	beq.n	8015910 <rmw_wait+0x26c>
 8015988:	6834      	ldr	r4, [r6, #0]
 801598a:	462f      	mov	r7, r5
 801598c:	2c00      	cmp	r4, #0
 801598e:	f47f af6b 	bne.w	8015868 <rmw_wait+0x1c4>
 8015992:	e7bd      	b.n	8015910 <rmw_wait+0x26c>

08015994 <rmw_create_wait_set>:
 8015994:	b508      	push	{r3, lr}
 8015996:	4803      	ldr	r0, [pc, #12]	@ (80159a4 <rmw_create_wait_set+0x10>)
 8015998:	f7ff fbfe 	bl	8015198 <get_memory>
 801599c:	b108      	cbz	r0, 80159a2 <rmw_create_wait_set+0xe>
 801599e:	6880      	ldr	r0, [r0, #8]
 80159a0:	3010      	adds	r0, #16
 80159a2:	bd08      	pop	{r3, pc}
 80159a4:	2000ac54 	.word	0x2000ac54

080159a8 <rmw_destroy_wait_set>:
 80159a8:	b508      	push	{r3, lr}
 80159aa:	4b08      	ldr	r3, [pc, #32]	@ (80159cc <rmw_destroy_wait_set+0x24>)
 80159ac:	6819      	ldr	r1, [r3, #0]
 80159ae:	b911      	cbnz	r1, 80159b6 <rmw_destroy_wait_set+0xe>
 80159b0:	e00a      	b.n	80159c8 <rmw_destroy_wait_set+0x20>
 80159b2:	6849      	ldr	r1, [r1, #4]
 80159b4:	b141      	cbz	r1, 80159c8 <rmw_destroy_wait_set+0x20>
 80159b6:	688b      	ldr	r3, [r1, #8]
 80159b8:	3310      	adds	r3, #16
 80159ba:	4298      	cmp	r0, r3
 80159bc:	d1f9      	bne.n	80159b2 <rmw_destroy_wait_set+0xa>
 80159be:	4803      	ldr	r0, [pc, #12]	@ (80159cc <rmw_destroy_wait_set+0x24>)
 80159c0:	f7ff fbfa 	bl	80151b8 <put_memory>
 80159c4:	2000      	movs	r0, #0
 80159c6:	bd08      	pop	{r3, pc}
 80159c8:	2001      	movs	r0, #1
 80159ca:	bd08      	pop	{r3, pc}
 80159cc:	2000ac54 	.word	0x2000ac54

080159d0 <ucdr_serialize_endian_array_char>:
 80159d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159d4:	4619      	mov	r1, r3
 80159d6:	461f      	mov	r7, r3
 80159d8:	4605      	mov	r5, r0
 80159da:	4690      	mov	r8, r2
 80159dc:	f7f6 f80a 	bl	800b9f4 <ucdr_check_buffer_available_for>
 80159e0:	b9e0      	cbnz	r0, 8015a1c <ucdr_serialize_endian_array_char+0x4c>
 80159e2:	463e      	mov	r6, r7
 80159e4:	e009      	b.n	80159fa <ucdr_serialize_endian_array_char+0x2a>
 80159e6:	68a8      	ldr	r0, [r5, #8]
 80159e8:	f001 ff59 	bl	801789e <memcpy>
 80159ec:	68ab      	ldr	r3, [r5, #8]
 80159ee:	6928      	ldr	r0, [r5, #16]
 80159f0:	4423      	add	r3, r4
 80159f2:	4420      	add	r0, r4
 80159f4:	1b36      	subs	r6, r6, r4
 80159f6:	60ab      	str	r3, [r5, #8]
 80159f8:	6128      	str	r0, [r5, #16]
 80159fa:	4631      	mov	r1, r6
 80159fc:	2201      	movs	r2, #1
 80159fe:	4628      	mov	r0, r5
 8015a00:	f7f6 f880 	bl	800bb04 <ucdr_check_final_buffer_behavior_array>
 8015a04:	1bb9      	subs	r1, r7, r6
 8015a06:	4441      	add	r1, r8
 8015a08:	4604      	mov	r4, r0
 8015a0a:	4602      	mov	r2, r0
 8015a0c:	2800      	cmp	r0, #0
 8015a0e:	d1ea      	bne.n	80159e6 <ucdr_serialize_endian_array_char+0x16>
 8015a10:	2301      	movs	r3, #1
 8015a12:	7da8      	ldrb	r0, [r5, #22]
 8015a14:	756b      	strb	r3, [r5, #21]
 8015a16:	4058      	eors	r0, r3
 8015a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a1c:	463a      	mov	r2, r7
 8015a1e:	68a8      	ldr	r0, [r5, #8]
 8015a20:	4641      	mov	r1, r8
 8015a22:	f001 ff3c 	bl	801789e <memcpy>
 8015a26:	68aa      	ldr	r2, [r5, #8]
 8015a28:	692b      	ldr	r3, [r5, #16]
 8015a2a:	443a      	add	r2, r7
 8015a2c:	443b      	add	r3, r7
 8015a2e:	60aa      	str	r2, [r5, #8]
 8015a30:	612b      	str	r3, [r5, #16]
 8015a32:	e7ed      	b.n	8015a10 <ucdr_serialize_endian_array_char+0x40>

08015a34 <ucdr_deserialize_endian_array_char>:
 8015a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a38:	4619      	mov	r1, r3
 8015a3a:	461f      	mov	r7, r3
 8015a3c:	4605      	mov	r5, r0
 8015a3e:	4690      	mov	r8, r2
 8015a40:	f7f5 ffd8 	bl	800b9f4 <ucdr_check_buffer_available_for>
 8015a44:	b9e0      	cbnz	r0, 8015a80 <ucdr_deserialize_endian_array_char+0x4c>
 8015a46:	463e      	mov	r6, r7
 8015a48:	e009      	b.n	8015a5e <ucdr_deserialize_endian_array_char+0x2a>
 8015a4a:	68a9      	ldr	r1, [r5, #8]
 8015a4c:	f001 ff27 	bl	801789e <memcpy>
 8015a50:	68ab      	ldr	r3, [r5, #8]
 8015a52:	6928      	ldr	r0, [r5, #16]
 8015a54:	4423      	add	r3, r4
 8015a56:	4420      	add	r0, r4
 8015a58:	1b36      	subs	r6, r6, r4
 8015a5a:	60ab      	str	r3, [r5, #8]
 8015a5c:	6128      	str	r0, [r5, #16]
 8015a5e:	2201      	movs	r2, #1
 8015a60:	4631      	mov	r1, r6
 8015a62:	4628      	mov	r0, r5
 8015a64:	f7f6 f84e 	bl	800bb04 <ucdr_check_final_buffer_behavior_array>
 8015a68:	4604      	mov	r4, r0
 8015a6a:	1bb8      	subs	r0, r7, r6
 8015a6c:	4440      	add	r0, r8
 8015a6e:	4622      	mov	r2, r4
 8015a70:	2c00      	cmp	r4, #0
 8015a72:	d1ea      	bne.n	8015a4a <ucdr_deserialize_endian_array_char+0x16>
 8015a74:	2301      	movs	r3, #1
 8015a76:	7da8      	ldrb	r0, [r5, #22]
 8015a78:	756b      	strb	r3, [r5, #21]
 8015a7a:	4058      	eors	r0, r3
 8015a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a80:	463a      	mov	r2, r7
 8015a82:	68a9      	ldr	r1, [r5, #8]
 8015a84:	4640      	mov	r0, r8
 8015a86:	f001 ff0a 	bl	801789e <memcpy>
 8015a8a:	68aa      	ldr	r2, [r5, #8]
 8015a8c:	692b      	ldr	r3, [r5, #16]
 8015a8e:	443a      	add	r2, r7
 8015a90:	443b      	add	r3, r7
 8015a92:	60aa      	str	r2, [r5, #8]
 8015a94:	612b      	str	r3, [r5, #16]
 8015a96:	e7ed      	b.n	8015a74 <ucdr_deserialize_endian_array_char+0x40>

08015a98 <ucdr_serialize_array_uint8_t>:
 8015a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a9c:	4688      	mov	r8, r1
 8015a9e:	4611      	mov	r1, r2
 8015aa0:	4617      	mov	r7, r2
 8015aa2:	4605      	mov	r5, r0
 8015aa4:	f7f5 ffa6 	bl	800b9f4 <ucdr_check_buffer_available_for>
 8015aa8:	b9e0      	cbnz	r0, 8015ae4 <ucdr_serialize_array_uint8_t+0x4c>
 8015aaa:	463e      	mov	r6, r7
 8015aac:	e009      	b.n	8015ac2 <ucdr_serialize_array_uint8_t+0x2a>
 8015aae:	68a8      	ldr	r0, [r5, #8]
 8015ab0:	f001 fef5 	bl	801789e <memcpy>
 8015ab4:	68aa      	ldr	r2, [r5, #8]
 8015ab6:	692b      	ldr	r3, [r5, #16]
 8015ab8:	4422      	add	r2, r4
 8015aba:	4423      	add	r3, r4
 8015abc:	1b36      	subs	r6, r6, r4
 8015abe:	60aa      	str	r2, [r5, #8]
 8015ac0:	612b      	str	r3, [r5, #16]
 8015ac2:	4631      	mov	r1, r6
 8015ac4:	2201      	movs	r2, #1
 8015ac6:	4628      	mov	r0, r5
 8015ac8:	f7f6 f81c 	bl	800bb04 <ucdr_check_final_buffer_behavior_array>
 8015acc:	1bb9      	subs	r1, r7, r6
 8015ace:	4441      	add	r1, r8
 8015ad0:	4604      	mov	r4, r0
 8015ad2:	4602      	mov	r2, r0
 8015ad4:	2800      	cmp	r0, #0
 8015ad6:	d1ea      	bne.n	8015aae <ucdr_serialize_array_uint8_t+0x16>
 8015ad8:	2301      	movs	r3, #1
 8015ada:	7da8      	ldrb	r0, [r5, #22]
 8015adc:	756b      	strb	r3, [r5, #21]
 8015ade:	4058      	eors	r0, r3
 8015ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ae4:	463a      	mov	r2, r7
 8015ae6:	68a8      	ldr	r0, [r5, #8]
 8015ae8:	4641      	mov	r1, r8
 8015aea:	f001 fed8 	bl	801789e <memcpy>
 8015aee:	68aa      	ldr	r2, [r5, #8]
 8015af0:	692b      	ldr	r3, [r5, #16]
 8015af2:	443a      	add	r2, r7
 8015af4:	443b      	add	r3, r7
 8015af6:	60aa      	str	r2, [r5, #8]
 8015af8:	612b      	str	r3, [r5, #16]
 8015afa:	e7ed      	b.n	8015ad8 <ucdr_serialize_array_uint8_t+0x40>

08015afc <ucdr_serialize_endian_array_uint8_t>:
 8015afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b00:	4619      	mov	r1, r3
 8015b02:	461f      	mov	r7, r3
 8015b04:	4605      	mov	r5, r0
 8015b06:	4690      	mov	r8, r2
 8015b08:	f7f5 ff74 	bl	800b9f4 <ucdr_check_buffer_available_for>
 8015b0c:	b9e0      	cbnz	r0, 8015b48 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8015b0e:	463e      	mov	r6, r7
 8015b10:	e009      	b.n	8015b26 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8015b12:	68a8      	ldr	r0, [r5, #8]
 8015b14:	f001 fec3 	bl	801789e <memcpy>
 8015b18:	68ab      	ldr	r3, [r5, #8]
 8015b1a:	6928      	ldr	r0, [r5, #16]
 8015b1c:	4423      	add	r3, r4
 8015b1e:	4420      	add	r0, r4
 8015b20:	1b36      	subs	r6, r6, r4
 8015b22:	60ab      	str	r3, [r5, #8]
 8015b24:	6128      	str	r0, [r5, #16]
 8015b26:	4631      	mov	r1, r6
 8015b28:	2201      	movs	r2, #1
 8015b2a:	4628      	mov	r0, r5
 8015b2c:	f7f5 ffea 	bl	800bb04 <ucdr_check_final_buffer_behavior_array>
 8015b30:	1bb9      	subs	r1, r7, r6
 8015b32:	4441      	add	r1, r8
 8015b34:	4604      	mov	r4, r0
 8015b36:	4602      	mov	r2, r0
 8015b38:	2800      	cmp	r0, #0
 8015b3a:	d1ea      	bne.n	8015b12 <ucdr_serialize_endian_array_uint8_t+0x16>
 8015b3c:	2301      	movs	r3, #1
 8015b3e:	7da8      	ldrb	r0, [r5, #22]
 8015b40:	756b      	strb	r3, [r5, #21]
 8015b42:	4058      	eors	r0, r3
 8015b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b48:	463a      	mov	r2, r7
 8015b4a:	68a8      	ldr	r0, [r5, #8]
 8015b4c:	4641      	mov	r1, r8
 8015b4e:	f001 fea6 	bl	801789e <memcpy>
 8015b52:	68aa      	ldr	r2, [r5, #8]
 8015b54:	692b      	ldr	r3, [r5, #16]
 8015b56:	443a      	add	r2, r7
 8015b58:	443b      	add	r3, r7
 8015b5a:	60aa      	str	r2, [r5, #8]
 8015b5c:	612b      	str	r3, [r5, #16]
 8015b5e:	e7ed      	b.n	8015b3c <ucdr_serialize_endian_array_uint8_t+0x40>

08015b60 <ucdr_deserialize_array_uint8_t>:
 8015b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b64:	4688      	mov	r8, r1
 8015b66:	4611      	mov	r1, r2
 8015b68:	4617      	mov	r7, r2
 8015b6a:	4605      	mov	r5, r0
 8015b6c:	f7f5 ff42 	bl	800b9f4 <ucdr_check_buffer_available_for>
 8015b70:	b9e0      	cbnz	r0, 8015bac <ucdr_deserialize_array_uint8_t+0x4c>
 8015b72:	463e      	mov	r6, r7
 8015b74:	e009      	b.n	8015b8a <ucdr_deserialize_array_uint8_t+0x2a>
 8015b76:	68a9      	ldr	r1, [r5, #8]
 8015b78:	f001 fe91 	bl	801789e <memcpy>
 8015b7c:	68aa      	ldr	r2, [r5, #8]
 8015b7e:	692b      	ldr	r3, [r5, #16]
 8015b80:	4422      	add	r2, r4
 8015b82:	4423      	add	r3, r4
 8015b84:	1b36      	subs	r6, r6, r4
 8015b86:	60aa      	str	r2, [r5, #8]
 8015b88:	612b      	str	r3, [r5, #16]
 8015b8a:	2201      	movs	r2, #1
 8015b8c:	4631      	mov	r1, r6
 8015b8e:	4628      	mov	r0, r5
 8015b90:	f7f5 ffb8 	bl	800bb04 <ucdr_check_final_buffer_behavior_array>
 8015b94:	4604      	mov	r4, r0
 8015b96:	1bb8      	subs	r0, r7, r6
 8015b98:	4440      	add	r0, r8
 8015b9a:	4622      	mov	r2, r4
 8015b9c:	2c00      	cmp	r4, #0
 8015b9e:	d1ea      	bne.n	8015b76 <ucdr_deserialize_array_uint8_t+0x16>
 8015ba0:	2301      	movs	r3, #1
 8015ba2:	7da8      	ldrb	r0, [r5, #22]
 8015ba4:	756b      	strb	r3, [r5, #21]
 8015ba6:	4058      	eors	r0, r3
 8015ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015bac:	463a      	mov	r2, r7
 8015bae:	68a9      	ldr	r1, [r5, #8]
 8015bb0:	4640      	mov	r0, r8
 8015bb2:	f001 fe74 	bl	801789e <memcpy>
 8015bb6:	68aa      	ldr	r2, [r5, #8]
 8015bb8:	692b      	ldr	r3, [r5, #16]
 8015bba:	443a      	add	r2, r7
 8015bbc:	443b      	add	r3, r7
 8015bbe:	60aa      	str	r2, [r5, #8]
 8015bc0:	612b      	str	r3, [r5, #16]
 8015bc2:	e7ed      	b.n	8015ba0 <ucdr_deserialize_array_uint8_t+0x40>

08015bc4 <ucdr_deserialize_endian_array_uint8_t>:
 8015bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bc8:	4619      	mov	r1, r3
 8015bca:	461f      	mov	r7, r3
 8015bcc:	4605      	mov	r5, r0
 8015bce:	4690      	mov	r8, r2
 8015bd0:	f7f5 ff10 	bl	800b9f4 <ucdr_check_buffer_available_for>
 8015bd4:	b9e0      	cbnz	r0, 8015c10 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8015bd6:	463e      	mov	r6, r7
 8015bd8:	e009      	b.n	8015bee <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8015bda:	68a9      	ldr	r1, [r5, #8]
 8015bdc:	f001 fe5f 	bl	801789e <memcpy>
 8015be0:	68ab      	ldr	r3, [r5, #8]
 8015be2:	6928      	ldr	r0, [r5, #16]
 8015be4:	4423      	add	r3, r4
 8015be6:	4420      	add	r0, r4
 8015be8:	1b36      	subs	r6, r6, r4
 8015bea:	60ab      	str	r3, [r5, #8]
 8015bec:	6128      	str	r0, [r5, #16]
 8015bee:	2201      	movs	r2, #1
 8015bf0:	4631      	mov	r1, r6
 8015bf2:	4628      	mov	r0, r5
 8015bf4:	f7f5 ff86 	bl	800bb04 <ucdr_check_final_buffer_behavior_array>
 8015bf8:	4604      	mov	r4, r0
 8015bfa:	1bb8      	subs	r0, r7, r6
 8015bfc:	4440      	add	r0, r8
 8015bfe:	4622      	mov	r2, r4
 8015c00:	2c00      	cmp	r4, #0
 8015c02:	d1ea      	bne.n	8015bda <ucdr_deserialize_endian_array_uint8_t+0x16>
 8015c04:	2301      	movs	r3, #1
 8015c06:	7da8      	ldrb	r0, [r5, #22]
 8015c08:	756b      	strb	r3, [r5, #21]
 8015c0a:	4058      	eors	r0, r3
 8015c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c10:	463a      	mov	r2, r7
 8015c12:	68a9      	ldr	r1, [r5, #8]
 8015c14:	4640      	mov	r0, r8
 8015c16:	f001 fe42 	bl	801789e <memcpy>
 8015c1a:	68aa      	ldr	r2, [r5, #8]
 8015c1c:	692b      	ldr	r3, [r5, #16]
 8015c1e:	443a      	add	r2, r7
 8015c20:	443b      	add	r3, r7
 8015c22:	60aa      	str	r2, [r5, #8]
 8015c24:	612b      	str	r3, [r5, #16]
 8015c26:	e7ed      	b.n	8015c04 <ucdr_deserialize_endian_array_uint8_t+0x40>

08015c28 <ucdr_serialize_sequence_char>:
 8015c28:	b570      	push	{r4, r5, r6, lr}
 8015c2a:	4615      	mov	r5, r2
 8015c2c:	460e      	mov	r6, r1
 8015c2e:	7d01      	ldrb	r1, [r0, #20]
 8015c30:	4604      	mov	r4, r0
 8015c32:	f7f5 f89f 	bl	800ad74 <ucdr_serialize_endian_uint32_t>
 8015c36:	b90d      	cbnz	r5, 8015c3c <ucdr_serialize_sequence_char+0x14>
 8015c38:	2001      	movs	r0, #1
 8015c3a:	bd70      	pop	{r4, r5, r6, pc}
 8015c3c:	7d21      	ldrb	r1, [r4, #20]
 8015c3e:	462b      	mov	r3, r5
 8015c40:	4632      	mov	r2, r6
 8015c42:	4620      	mov	r0, r4
 8015c44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015c48:	f7ff bec2 	b.w	80159d0 <ucdr_serialize_endian_array_char>

08015c4c <ucdr_deserialize_sequence_char>:
 8015c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c50:	461d      	mov	r5, r3
 8015c52:	4616      	mov	r6, r2
 8015c54:	460f      	mov	r7, r1
 8015c56:	461a      	mov	r2, r3
 8015c58:	7d01      	ldrb	r1, [r0, #20]
 8015c5a:	4604      	mov	r4, r0
 8015c5c:	f7f5 f9b2 	bl	800afc4 <ucdr_deserialize_endian_uint32_t>
 8015c60:	682b      	ldr	r3, [r5, #0]
 8015c62:	429e      	cmp	r6, r3
 8015c64:	bf3c      	itt	cc
 8015c66:	2201      	movcc	r2, #1
 8015c68:	75a2      	strbcc	r2, [r4, #22]
 8015c6a:	b913      	cbnz	r3, 8015c72 <ucdr_deserialize_sequence_char+0x26>
 8015c6c:	2001      	movs	r0, #1
 8015c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c72:	7d21      	ldrb	r1, [r4, #20]
 8015c74:	463a      	mov	r2, r7
 8015c76:	4620      	mov	r0, r4
 8015c78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015c7c:	f7ff beda 	b.w	8015a34 <ucdr_deserialize_endian_array_char>

08015c80 <ucdr_serialize_sequence_uint8_t>:
 8015c80:	b570      	push	{r4, r5, r6, lr}
 8015c82:	4615      	mov	r5, r2
 8015c84:	460e      	mov	r6, r1
 8015c86:	7d01      	ldrb	r1, [r0, #20]
 8015c88:	4604      	mov	r4, r0
 8015c8a:	f7f5 f873 	bl	800ad74 <ucdr_serialize_endian_uint32_t>
 8015c8e:	b90d      	cbnz	r5, 8015c94 <ucdr_serialize_sequence_uint8_t+0x14>
 8015c90:	2001      	movs	r0, #1
 8015c92:	bd70      	pop	{r4, r5, r6, pc}
 8015c94:	7d21      	ldrb	r1, [r4, #20]
 8015c96:	462b      	mov	r3, r5
 8015c98:	4632      	mov	r2, r6
 8015c9a:	4620      	mov	r0, r4
 8015c9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015ca0:	f7ff bf2c 	b.w	8015afc <ucdr_serialize_endian_array_uint8_t>

08015ca4 <ucdr_deserialize_sequence_uint8_t>:
 8015ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ca8:	461d      	mov	r5, r3
 8015caa:	4616      	mov	r6, r2
 8015cac:	460f      	mov	r7, r1
 8015cae:	461a      	mov	r2, r3
 8015cb0:	7d01      	ldrb	r1, [r0, #20]
 8015cb2:	4604      	mov	r4, r0
 8015cb4:	f7f5 f986 	bl	800afc4 <ucdr_deserialize_endian_uint32_t>
 8015cb8:	682b      	ldr	r3, [r5, #0]
 8015cba:	429e      	cmp	r6, r3
 8015cbc:	bf3c      	itt	cc
 8015cbe:	2201      	movcc	r2, #1
 8015cc0:	75a2      	strbcc	r2, [r4, #22]
 8015cc2:	b913      	cbnz	r3, 8015cca <ucdr_deserialize_sequence_uint8_t+0x26>
 8015cc4:	2001      	movs	r0, #1
 8015cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cca:	7d21      	ldrb	r1, [r4, #20]
 8015ccc:	463a      	mov	r2, r7
 8015cce:	4620      	mov	r0, r4
 8015cd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015cd4:	f7ff bf76 	b.w	8015bc4 <ucdr_deserialize_endian_array_uint8_t>

08015cd8 <ucdr_serialize_string>:
 8015cd8:	b510      	push	{r4, lr}
 8015cda:	b082      	sub	sp, #8
 8015cdc:	4604      	mov	r4, r0
 8015cde:	4608      	mov	r0, r1
 8015ce0:	9101      	str	r1, [sp, #4]
 8015ce2:	f7ea faa7 	bl	8000234 <strlen>
 8015ce6:	9901      	ldr	r1, [sp, #4]
 8015ce8:	1c42      	adds	r2, r0, #1
 8015cea:	4620      	mov	r0, r4
 8015cec:	b002      	add	sp, #8
 8015cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015cf2:	f7ff bf99 	b.w	8015c28 <ucdr_serialize_sequence_char>
 8015cf6:	bf00      	nop

08015cf8 <ucdr_deserialize_string>:
 8015cf8:	b500      	push	{lr}
 8015cfa:	b083      	sub	sp, #12
 8015cfc:	ab01      	add	r3, sp, #4
 8015cfe:	f7ff ffa5 	bl	8015c4c <ucdr_deserialize_sequence_char>
 8015d02:	b003      	add	sp, #12
 8015d04:	f85d fb04 	ldr.w	pc, [sp], #4

08015d08 <uxr_init_input_best_effort_stream>:
 8015d08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015d0c:	8003      	strh	r3, [r0, #0]
 8015d0e:	4770      	bx	lr

08015d10 <uxr_reset_input_best_effort_stream>:
 8015d10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015d14:	8003      	strh	r3, [r0, #0]
 8015d16:	4770      	bx	lr

08015d18 <uxr_receive_best_effort_message>:
 8015d18:	b538      	push	{r3, r4, r5, lr}
 8015d1a:	4604      	mov	r4, r0
 8015d1c:	8800      	ldrh	r0, [r0, #0]
 8015d1e:	460d      	mov	r5, r1
 8015d20:	f000 fd42 	bl	80167a8 <uxr_seq_num_cmp>
 8015d24:	4603      	mov	r3, r0
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8015d2c:	bfb8      	it	lt
 8015d2e:	8025      	strhlt	r5, [r4, #0]
 8015d30:	bd38      	pop	{r3, r4, r5, pc}
 8015d32:	bf00      	nop

08015d34 <on_full_input_buffer>:
 8015d34:	b570      	push	{r4, r5, r6, lr}
 8015d36:	4605      	mov	r5, r0
 8015d38:	460c      	mov	r4, r1
 8015d3a:	682b      	ldr	r3, [r5, #0]
 8015d3c:	6809      	ldr	r1, [r1, #0]
 8015d3e:	8920      	ldrh	r0, [r4, #8]
 8015d40:	6862      	ldr	r2, [r4, #4]
 8015d42:	fbb2 f2f0 	udiv	r2, r2, r0
 8015d46:	eba3 0c01 	sub.w	ip, r3, r1
 8015d4a:	fbbc fcf2 	udiv	ip, ip, r2
 8015d4e:	f10c 0c01 	add.w	ip, ip, #1
 8015d52:	fa1f f38c 	uxth.w	r3, ip
 8015d56:	fbb3 f6f0 	udiv	r6, r3, r0
 8015d5a:	fb00 3316 	mls	r3, r0, r6, r3
 8015d5e:	b29b      	uxth	r3, r3
 8015d60:	fb02 f303 	mul.w	r3, r2, r3
 8015d64:	1d18      	adds	r0, r3, #4
 8015d66:	4408      	add	r0, r1
 8015d68:	7d26      	ldrb	r6, [r4, #20]
 8015d6a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8015d6e:	b116      	cbz	r6, 8015d76 <on_full_input_buffer+0x42>
 8015d70:	2600      	movs	r6, #0
 8015d72:	f840 6c04 	str.w	r6, [r0, #-4]
 8015d76:	2a03      	cmp	r2, #3
 8015d78:	d801      	bhi.n	8015d7e <on_full_input_buffer+0x4a>
 8015d7a:	2001      	movs	r0, #1
 8015d7c:	bd70      	pop	{r4, r5, r6, pc}
 8015d7e:	3308      	adds	r3, #8
 8015d80:	4419      	add	r1, r3
 8015d82:	4628      	mov	r0, r5
 8015d84:	692b      	ldr	r3, [r5, #16]
 8015d86:	3a04      	subs	r2, #4
 8015d88:	f7f5 fe80 	bl	800ba8c <ucdr_init_buffer_origin>
 8015d8c:	4628      	mov	r0, r5
 8015d8e:	4903      	ldr	r1, [pc, #12]	@ (8015d9c <on_full_input_buffer+0x68>)
 8015d90:	4622      	mov	r2, r4
 8015d92:	f7f5 fe57 	bl	800ba44 <ucdr_set_on_full_buffer_callback>
 8015d96:	2000      	movs	r0, #0
 8015d98:	bd70      	pop	{r4, r5, r6, pc}
 8015d9a:	bf00      	nop
 8015d9c:	08015d35 	.word	0x08015d35

08015da0 <uxr_init_input_reliable_stream>:
 8015da0:	b500      	push	{lr}
 8015da2:	e9c0 1200 	strd	r1, r2, [r0]
 8015da6:	f04f 0e00 	mov.w	lr, #0
 8015daa:	9a01      	ldr	r2, [sp, #4]
 8015dac:	8103      	strh	r3, [r0, #8]
 8015dae:	6102      	str	r2, [r0, #16]
 8015db0:	f880 e014 	strb.w	lr, [r0, #20]
 8015db4:	b1d3      	cbz	r3, 8015dec <uxr_init_input_reliable_stream+0x4c>
 8015db6:	f8c1 e000 	str.w	lr, [r1]
 8015dba:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015dbe:	f1bc 0f01 	cmp.w	ip, #1
 8015dc2:	d913      	bls.n	8015dec <uxr_init_input_reliable_stream+0x4c>
 8015dc4:	2301      	movs	r3, #1
 8015dc6:	fbb3 f1fc 	udiv	r1, r3, ip
 8015dca:	fb0c 3111 	mls	r1, ip, r1, r3
 8015dce:	b289      	uxth	r1, r1
 8015dd0:	6842      	ldr	r2, [r0, #4]
 8015dd2:	fbb2 f2fc 	udiv	r2, r2, ip
 8015dd6:	fb01 f202 	mul.w	r2, r1, r2
 8015dda:	6801      	ldr	r1, [r0, #0]
 8015ddc:	f841 e002 	str.w	lr, [r1, r2]
 8015de0:	3301      	adds	r3, #1
 8015de2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015de6:	b29b      	uxth	r3, r3
 8015de8:	459c      	cmp	ip, r3
 8015dea:	d8ec      	bhi.n	8015dc6 <uxr_init_input_reliable_stream+0x26>
 8015dec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015df0:	60c3      	str	r3, [r0, #12]
 8015df2:	f85d fb04 	ldr.w	pc, [sp], #4
 8015df6:	bf00      	nop

08015df8 <uxr_reset_input_reliable_stream>:
 8015df8:	8901      	ldrh	r1, [r0, #8]
 8015dfa:	b1e9      	cbz	r1, 8015e38 <uxr_reset_input_reliable_stream+0x40>
 8015dfc:	f04f 0c00 	mov.w	ip, #0
 8015e00:	b500      	push	{lr}
 8015e02:	4663      	mov	r3, ip
 8015e04:	46e6      	mov	lr, ip
 8015e06:	fbb3 f2f1 	udiv	r2, r3, r1
 8015e0a:	fb01 3312 	mls	r3, r1, r2, r3
 8015e0e:	b29b      	uxth	r3, r3
 8015e10:	6842      	ldr	r2, [r0, #4]
 8015e12:	fbb2 f2f1 	udiv	r2, r2, r1
 8015e16:	fb02 f303 	mul.w	r3, r2, r3
 8015e1a:	6802      	ldr	r2, [r0, #0]
 8015e1c:	f842 e003 	str.w	lr, [r2, r3]
 8015e20:	f10c 0c01 	add.w	ip, ip, #1
 8015e24:	8901      	ldrh	r1, [r0, #8]
 8015e26:	fa1f f38c 	uxth.w	r3, ip
 8015e2a:	4299      	cmp	r1, r3
 8015e2c:	d8eb      	bhi.n	8015e06 <uxr_reset_input_reliable_stream+0xe>
 8015e2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015e32:	60c3      	str	r3, [r0, #12]
 8015e34:	f85d fb04 	ldr.w	pc, [sp], #4
 8015e38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015e3c:	60c3      	str	r3, [r0, #12]
 8015e3e:	4770      	bx	lr

08015e40 <uxr_receive_reliable_message>:
 8015e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e44:	4604      	mov	r4, r0
 8015e46:	460d      	mov	r5, r1
 8015e48:	8901      	ldrh	r1, [r0, #8]
 8015e4a:	8980      	ldrh	r0, [r0, #12]
 8015e4c:	4690      	mov	r8, r2
 8015e4e:	461f      	mov	r7, r3
 8015e50:	f000 fca2 	bl	8016798 <uxr_seq_num_add>
 8015e54:	4629      	mov	r1, r5
 8015e56:	4606      	mov	r6, r0
 8015e58:	89a0      	ldrh	r0, [r4, #12]
 8015e5a:	f000 fca5 	bl	80167a8 <uxr_seq_num_cmp>
 8015e5e:	2800      	cmp	r0, #0
 8015e60:	db0a      	blt.n	8015e78 <uxr_receive_reliable_message+0x38>
 8015e62:	2600      	movs	r6, #0
 8015e64:	89e0      	ldrh	r0, [r4, #14]
 8015e66:	4629      	mov	r1, r5
 8015e68:	f000 fc9e 	bl	80167a8 <uxr_seq_num_cmp>
 8015e6c:	2800      	cmp	r0, #0
 8015e6e:	da00      	bge.n	8015e72 <uxr_receive_reliable_message+0x32>
 8015e70:	81e5      	strh	r5, [r4, #14]
 8015e72:	4630      	mov	r0, r6
 8015e74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015e78:	4630      	mov	r0, r6
 8015e7a:	4629      	mov	r1, r5
 8015e7c:	f000 fc94 	bl	80167a8 <uxr_seq_num_cmp>
 8015e80:	2800      	cmp	r0, #0
 8015e82:	dbee      	blt.n	8015e62 <uxr_receive_reliable_message+0x22>
 8015e84:	6923      	ldr	r3, [r4, #16]
 8015e86:	4640      	mov	r0, r8
 8015e88:	4798      	blx	r3
 8015e8a:	2101      	movs	r1, #1
 8015e8c:	4681      	mov	r9, r0
 8015e8e:	89a0      	ldrh	r0, [r4, #12]
 8015e90:	f000 fc82 	bl	8016798 <uxr_seq_num_add>
 8015e94:	f1b9 0f00 	cmp.w	r9, #0
 8015e98:	d101      	bne.n	8015e9e <uxr_receive_reliable_message+0x5e>
 8015e9a:	4285      	cmp	r5, r0
 8015e9c:	d047      	beq.n	8015f2e <uxr_receive_reliable_message+0xee>
 8015e9e:	8922      	ldrh	r2, [r4, #8]
 8015ea0:	fbb5 f0f2 	udiv	r0, r5, r2
 8015ea4:	fb02 5010 	mls	r0, r2, r0, r5
 8015ea8:	b280      	uxth	r0, r0
 8015eaa:	6863      	ldr	r3, [r4, #4]
 8015eac:	fbb3 f3f2 	udiv	r3, r3, r2
 8015eb0:	fb00 f303 	mul.w	r3, r0, r3
 8015eb4:	6820      	ldr	r0, [r4, #0]
 8015eb6:	3304      	adds	r3, #4
 8015eb8:	4418      	add	r0, r3
 8015eba:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d1cf      	bne.n	8015e62 <uxr_receive_reliable_message+0x22>
 8015ec2:	4641      	mov	r1, r8
 8015ec4:	463a      	mov	r2, r7
 8015ec6:	f001 fcea 	bl	801789e <memcpy>
 8015eca:	8921      	ldrh	r1, [r4, #8]
 8015ecc:	fbb5 f2f1 	udiv	r2, r5, r1
 8015ed0:	fb01 5212 	mls	r2, r1, r2, r5
 8015ed4:	b292      	uxth	r2, r2
 8015ed6:	6863      	ldr	r3, [r4, #4]
 8015ed8:	fbb3 f3f1 	udiv	r3, r3, r1
 8015edc:	fb02 f303 	mul.w	r3, r2, r3
 8015ee0:	6822      	ldr	r2, [r4, #0]
 8015ee2:	50d7      	str	r7, [r2, r3]
 8015ee4:	9a08      	ldr	r2, [sp, #32]
 8015ee6:	2301      	movs	r3, #1
 8015ee8:	7013      	strb	r3, [r2, #0]
 8015eea:	f1b9 0f00 	cmp.w	r9, #0
 8015eee:	d0b8      	beq.n	8015e62 <uxr_receive_reliable_message+0x22>
 8015ef0:	89a6      	ldrh	r6, [r4, #12]
 8015ef2:	4630      	mov	r0, r6
 8015ef4:	2101      	movs	r1, #1
 8015ef6:	f000 fc4f 	bl	8016798 <uxr_seq_num_add>
 8015efa:	8922      	ldrh	r2, [r4, #8]
 8015efc:	6863      	ldr	r3, [r4, #4]
 8015efe:	fbb3 f3f2 	udiv	r3, r3, r2
 8015f02:	4606      	mov	r6, r0
 8015f04:	fbb0 f0f2 	udiv	r0, r0, r2
 8015f08:	fb02 6010 	mls	r0, r2, r0, r6
 8015f0c:	b280      	uxth	r0, r0
 8015f0e:	fb00 f303 	mul.w	r3, r0, r3
 8015f12:	6820      	ldr	r0, [r4, #0]
 8015f14:	3304      	adds	r3, #4
 8015f16:	4418      	add	r0, r3
 8015f18:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d0a0      	beq.n	8015e62 <uxr_receive_reliable_message+0x22>
 8015f20:	6923      	ldr	r3, [r4, #16]
 8015f22:	4798      	blx	r3
 8015f24:	2802      	cmp	r0, #2
 8015f26:	d008      	beq.n	8015f3a <uxr_receive_reliable_message+0xfa>
 8015f28:	2801      	cmp	r0, #1
 8015f2a:	d0e2      	beq.n	8015ef2 <uxr_receive_reliable_message+0xb2>
 8015f2c:	e799      	b.n	8015e62 <uxr_receive_reliable_message+0x22>
 8015f2e:	9b08      	ldr	r3, [sp, #32]
 8015f30:	81a5      	strh	r5, [r4, #12]
 8015f32:	2601      	movs	r6, #1
 8015f34:	f883 9000 	strb.w	r9, [r3]
 8015f38:	e794      	b.n	8015e64 <uxr_receive_reliable_message+0x24>
 8015f3a:	2601      	movs	r6, #1
 8015f3c:	e792      	b.n	8015e64 <uxr_receive_reliable_message+0x24>
 8015f3e:	bf00      	nop

08015f40 <uxr_next_input_reliable_buffer_available>:
 8015f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f44:	4604      	mov	r4, r0
 8015f46:	460f      	mov	r7, r1
 8015f48:	8980      	ldrh	r0, [r0, #12]
 8015f4a:	2101      	movs	r1, #1
 8015f4c:	4690      	mov	r8, r2
 8015f4e:	f000 fc23 	bl	8016798 <uxr_seq_num_add>
 8015f52:	8922      	ldrh	r2, [r4, #8]
 8015f54:	fbb0 f6f2 	udiv	r6, r0, r2
 8015f58:	fb02 0616 	mls	r6, r2, r6, r0
 8015f5c:	b2b6      	uxth	r6, r6
 8015f5e:	6863      	ldr	r3, [r4, #4]
 8015f60:	fbb3 f3f2 	udiv	r3, r3, r2
 8015f64:	fb06 f303 	mul.w	r3, r6, r3
 8015f68:	6826      	ldr	r6, [r4, #0]
 8015f6a:	3304      	adds	r3, #4
 8015f6c:	441e      	add	r6, r3
 8015f6e:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8015f72:	f1b9 0f00 	cmp.w	r9, #0
 8015f76:	d023      	beq.n	8015fc0 <uxr_next_input_reliable_buffer_available+0x80>
 8015f78:	6923      	ldr	r3, [r4, #16]
 8015f7a:	4605      	mov	r5, r0
 8015f7c:	4630      	mov	r0, r6
 8015f7e:	4798      	blx	r3
 8015f80:	4682      	mov	sl, r0
 8015f82:	b300      	cbz	r0, 8015fc6 <uxr_next_input_reliable_buffer_available+0x86>
 8015f84:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8015f88:	2101      	movs	r1, #1
 8015f8a:	4650      	mov	r0, sl
 8015f8c:	f000 fc04 	bl	8016798 <uxr_seq_num_add>
 8015f90:	8921      	ldrh	r1, [r4, #8]
 8015f92:	fbb0 f2f1 	udiv	r2, r0, r1
 8015f96:	4682      	mov	sl, r0
 8015f98:	fb01 0212 	mls	r2, r1, r2, r0
 8015f9c:	e9d4 0300 	ldrd	r0, r3, [r4]
 8015fa0:	b292      	uxth	r2, r2
 8015fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8015fa6:	fb02 f303 	mul.w	r3, r2, r3
 8015faa:	3304      	adds	r3, #4
 8015fac:	4418      	add	r0, r3
 8015fae:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015fb2:	b12b      	cbz	r3, 8015fc0 <uxr_next_input_reliable_buffer_available+0x80>
 8015fb4:	6923      	ldr	r3, [r4, #16]
 8015fb6:	4798      	blx	r3
 8015fb8:	2802      	cmp	r0, #2
 8015fba:	d01b      	beq.n	8015ff4 <uxr_next_input_reliable_buffer_available+0xb4>
 8015fbc:	2801      	cmp	r0, #1
 8015fbe:	d0e3      	beq.n	8015f88 <uxr_next_input_reliable_buffer_available+0x48>
 8015fc0:	2000      	movs	r0, #0
 8015fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015fc6:	464a      	mov	r2, r9
 8015fc8:	4631      	mov	r1, r6
 8015fca:	4638      	mov	r0, r7
 8015fcc:	f7f5 fd66 	bl	800ba9c <ucdr_init_buffer>
 8015fd0:	8921      	ldrh	r1, [r4, #8]
 8015fd2:	fbb5 f2f1 	udiv	r2, r5, r1
 8015fd6:	fb01 5212 	mls	r2, r1, r2, r5
 8015fda:	b292      	uxth	r2, r2
 8015fdc:	6863      	ldr	r3, [r4, #4]
 8015fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8015fe2:	fb02 f303 	mul.w	r3, r2, r3
 8015fe6:	6822      	ldr	r2, [r4, #0]
 8015fe8:	f842 a003 	str.w	sl, [r2, r3]
 8015fec:	2001      	movs	r0, #1
 8015fee:	81a5      	strh	r5, [r4, #12]
 8015ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ff4:	8920      	ldrh	r0, [r4, #8]
 8015ff6:	fbb5 f3f0 	udiv	r3, r5, r0
 8015ffa:	fb00 5513 	mls	r5, r0, r3, r5
 8015ffe:	b2ad      	uxth	r5, r5
 8016000:	6863      	ldr	r3, [r4, #4]
 8016002:	fbb3 f3f0 	udiv	r3, r3, r0
 8016006:	fb03 f505 	mul.w	r5, r3, r5
 801600a:	6823      	ldr	r3, [r4, #0]
 801600c:	2000      	movs	r0, #0
 801600e:	5158      	str	r0, [r3, r5]
 8016010:	eb06 0108 	add.w	r1, r6, r8
 8016014:	eba9 0208 	sub.w	r2, r9, r8
 8016018:	4638      	mov	r0, r7
 801601a:	f7f5 fd3f 	bl	800ba9c <ucdr_init_buffer>
 801601e:	4638      	mov	r0, r7
 8016020:	4903      	ldr	r1, [pc, #12]	@ (8016030 <uxr_next_input_reliable_buffer_available+0xf0>)
 8016022:	4622      	mov	r2, r4
 8016024:	f7f5 fd0e 	bl	800ba44 <ucdr_set_on_full_buffer_callback>
 8016028:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801602c:	2001      	movs	r0, #1
 801602e:	e7c8      	b.n	8015fc2 <uxr_next_input_reliable_buffer_available+0x82>
 8016030:	08015d35 	.word	0x08015d35

08016034 <uxr_process_heartbeat>:
 8016034:	b538      	push	{r3, r4, r5, lr}
 8016036:	4611      	mov	r1, r2
 8016038:	4604      	mov	r4, r0
 801603a:	89c0      	ldrh	r0, [r0, #14]
 801603c:	4615      	mov	r5, r2
 801603e:	f000 fbb3 	bl	80167a8 <uxr_seq_num_cmp>
 8016042:	2800      	cmp	r0, #0
 8016044:	bfb8      	it	lt
 8016046:	81e5      	strhlt	r5, [r4, #14]
 8016048:	bd38      	pop	{r3, r4, r5, pc}
 801604a:	bf00      	nop

0801604c <uxr_compute_acknack>:
 801604c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016050:	8903      	ldrh	r3, [r0, #8]
 8016052:	8985      	ldrh	r5, [r0, #12]
 8016054:	4604      	mov	r4, r0
 8016056:	460e      	mov	r6, r1
 8016058:	b1d3      	cbz	r3, 8016090 <uxr_compute_acknack+0x44>
 801605a:	4628      	mov	r0, r5
 801605c:	2701      	movs	r7, #1
 801605e:	e003      	b.n	8016068 <uxr_compute_acknack+0x1c>
 8016060:	4567      	cmp	r7, ip
 8016062:	d215      	bcs.n	8016090 <uxr_compute_acknack+0x44>
 8016064:	89a0      	ldrh	r0, [r4, #12]
 8016066:	3701      	adds	r7, #1
 8016068:	b2b9      	uxth	r1, r7
 801606a:	f000 fb95 	bl	8016798 <uxr_seq_num_add>
 801606e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016072:	fbb0 f3fc 	udiv	r3, r0, ip
 8016076:	fb0c 0313 	mls	r3, ip, r3, r0
 801607a:	b29a      	uxth	r2, r3
 801607c:	e9d4 1300 	ldrd	r1, r3, [r4]
 8016080:	fbb3 f3fc 	udiv	r3, r3, ip
 8016084:	fb02 f303 	mul.w	r3, r2, r3
 8016088:	58cb      	ldr	r3, [r1, r3]
 801608a:	2b00      	cmp	r3, #0
 801608c:	d1e8      	bne.n	8016060 <uxr_compute_acknack+0x14>
 801608e:	4605      	mov	r5, r0
 8016090:	8035      	strh	r5, [r6, #0]
 8016092:	2101      	movs	r1, #1
 8016094:	4628      	mov	r0, r5
 8016096:	89e7      	ldrh	r7, [r4, #14]
 8016098:	f000 fb82 	bl	80167a0 <uxr_seq_num_sub>
 801609c:	4601      	mov	r1, r0
 801609e:	4638      	mov	r0, r7
 80160a0:	f000 fb7e 	bl	80167a0 <uxr_seq_num_sub>
 80160a4:	4605      	mov	r5, r0
 80160a6:	b318      	cbz	r0, 80160f0 <uxr_compute_acknack+0xa4>
 80160a8:	f04f 0900 	mov.w	r9, #0
 80160ac:	464f      	mov	r7, r9
 80160ae:	f04f 0801 	mov.w	r8, #1
 80160b2:	fa1f f189 	uxth.w	r1, r9
 80160b6:	8830      	ldrh	r0, [r6, #0]
 80160b8:	f000 fb6e 	bl	8016798 <uxr_seq_num_add>
 80160bc:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80160c0:	fbb0 f3fc 	udiv	r3, r0, ip
 80160c4:	e9d4 1200 	ldrd	r1, r2, [r4]
 80160c8:	fb03 001c 	mls	r0, r3, ip, r0
 80160cc:	b283      	uxth	r3, r0
 80160ce:	fbb2 f2fc 	udiv	r2, r2, ip
 80160d2:	fb02 f303 	mul.w	r3, r2, r3
 80160d6:	fa08 f209 	lsl.w	r2, r8, r9
 80160da:	58cb      	ldr	r3, [r1, r3]
 80160dc:	f109 0901 	add.w	r9, r9, #1
 80160e0:	b90b      	cbnz	r3, 80160e6 <uxr_compute_acknack+0x9a>
 80160e2:	4317      	orrs	r7, r2
 80160e4:	b2bf      	uxth	r7, r7
 80160e6:	454d      	cmp	r5, r9
 80160e8:	d1e3      	bne.n	80160b2 <uxr_compute_acknack+0x66>
 80160ea:	4638      	mov	r0, r7
 80160ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80160f0:	4607      	mov	r7, r0
 80160f2:	4638      	mov	r0, r7
 80160f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080160f8 <uxr_init_output_best_effort_stream>:
 80160f8:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80160fc:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8016100:	6001      	str	r1, [r0, #0]
 8016102:	7303      	strb	r3, [r0, #12]
 8016104:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8016108:	4770      	bx	lr
 801610a:	bf00      	nop

0801610c <uxr_reset_output_best_effort_stream>:
 801610c:	7b02      	ldrb	r2, [r0, #12]
 801610e:	6042      	str	r2, [r0, #4]
 8016110:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016114:	81c3      	strh	r3, [r0, #14]
 8016116:	4770      	bx	lr

08016118 <uxr_prepare_best_effort_buffer_to_write>:
 8016118:	b5f0      	push	{r4, r5, r6, r7, lr}
 801611a:	4604      	mov	r4, r0
 801611c:	b083      	sub	sp, #12
 801611e:	6840      	ldr	r0, [r0, #4]
 8016120:	460d      	mov	r5, r1
 8016122:	4616      	mov	r6, r2
 8016124:	f7fa fafe 	bl	8010724 <uxr_submessage_padding>
 8016128:	6863      	ldr	r3, [r4, #4]
 801612a:	4418      	add	r0, r3
 801612c:	68a3      	ldr	r3, [r4, #8]
 801612e:	1942      	adds	r2, r0, r5
 8016130:	4293      	cmp	r3, r2
 8016132:	bf2c      	ite	cs
 8016134:	2701      	movcs	r7, #1
 8016136:	2700      	movcc	r7, #0
 8016138:	d202      	bcs.n	8016140 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801613a:	4638      	mov	r0, r7
 801613c:	b003      	add	sp, #12
 801613e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016140:	9000      	str	r0, [sp, #0]
 8016142:	6821      	ldr	r1, [r4, #0]
 8016144:	4630      	mov	r0, r6
 8016146:	2300      	movs	r3, #0
 8016148:	f7f5 fc96 	bl	800ba78 <ucdr_init_buffer_origin_offset>
 801614c:	6861      	ldr	r1, [r4, #4]
 801614e:	4638      	mov	r0, r7
 8016150:	4429      	add	r1, r5
 8016152:	6061      	str	r1, [r4, #4]
 8016154:	b003      	add	sp, #12
 8016156:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016158 <uxr_prepare_best_effort_buffer_to_send>:
 8016158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801615c:	4604      	mov	r4, r0
 801615e:	461d      	mov	r5, r3
 8016160:	6840      	ldr	r0, [r0, #4]
 8016162:	7b23      	ldrb	r3, [r4, #12]
 8016164:	4298      	cmp	r0, r3
 8016166:	bf8c      	ite	hi
 8016168:	2601      	movhi	r6, #1
 801616a:	2600      	movls	r6, #0
 801616c:	d802      	bhi.n	8016174 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801616e:	4630      	mov	r0, r6
 8016170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016174:	4688      	mov	r8, r1
 8016176:	89e0      	ldrh	r0, [r4, #14]
 8016178:	2101      	movs	r1, #1
 801617a:	4617      	mov	r7, r2
 801617c:	f000 fb0c 	bl	8016798 <uxr_seq_num_add>
 8016180:	6823      	ldr	r3, [r4, #0]
 8016182:	81e0      	strh	r0, [r4, #14]
 8016184:	8028      	strh	r0, [r5, #0]
 8016186:	f8c8 3000 	str.w	r3, [r8]
 801618a:	6863      	ldr	r3, [r4, #4]
 801618c:	603b      	str	r3, [r7, #0]
 801618e:	7b23      	ldrb	r3, [r4, #12]
 8016190:	6063      	str	r3, [r4, #4]
 8016192:	4630      	mov	r0, r6
 8016194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016198 <on_full_output_buffer>:
 8016198:	b538      	push	{r3, r4, r5, lr}
 801619a:	6802      	ldr	r2, [r0, #0]
 801619c:	460c      	mov	r4, r1
 801619e:	6809      	ldr	r1, [r1, #0]
 80161a0:	8923      	ldrh	r3, [r4, #8]
 80161a2:	eba2 0c01 	sub.w	ip, r2, r1
 80161a6:	6862      	ldr	r2, [r4, #4]
 80161a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80161ac:	fbbc fcf2 	udiv	ip, ip, r2
 80161b0:	f10c 0c01 	add.w	ip, ip, #1
 80161b4:	fa1f fc8c 	uxth.w	ip, ip
 80161b8:	fbbc fef3 	udiv	lr, ip, r3
 80161bc:	fb03 c31e 	mls	r3, r3, lr, ip
 80161c0:	b29b      	uxth	r3, r3
 80161c2:	fb02 f303 	mul.w	r3, r2, r3
 80161c6:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80161ca:	58ca      	ldr	r2, [r1, r3]
 80161cc:	4463      	add	r3, ip
 80161ce:	eba2 020c 	sub.w	r2, r2, ip
 80161d2:	3308      	adds	r3, #8
 80161d4:	4605      	mov	r5, r0
 80161d6:	4419      	add	r1, r3
 80161d8:	3a04      	subs	r2, #4
 80161da:	6903      	ldr	r3, [r0, #16]
 80161dc:	f7f5 fc56 	bl	800ba8c <ucdr_init_buffer_origin>
 80161e0:	4628      	mov	r0, r5
 80161e2:	4903      	ldr	r1, [pc, #12]	@ (80161f0 <on_full_output_buffer+0x58>)
 80161e4:	4622      	mov	r2, r4
 80161e6:	f7f5 fc2d 	bl	800ba44 <ucdr_set_on_full_buffer_callback>
 80161ea:	2000      	movs	r0, #0
 80161ec:	bd38      	pop	{r3, r4, r5, pc}
 80161ee:	bf00      	nop
 80161f0:	08016199 	.word	0x08016199

080161f4 <uxr_init_output_reliable_stream>:
 80161f4:	b410      	push	{r4}
 80161f6:	f89d c004 	ldrb.w	ip, [sp, #4]
 80161fa:	8103      	strh	r3, [r0, #8]
 80161fc:	e9c0 1200 	strd	r1, r2, [r0]
 8016200:	f880 c00c 	strb.w	ip, [r0, #12]
 8016204:	b1d3      	cbz	r3, 801623c <uxr_init_output_reliable_stream+0x48>
 8016206:	f8c1 c000 	str.w	ip, [r1]
 801620a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801620e:	f1bc 0f01 	cmp.w	ip, #1
 8016212:	d913      	bls.n	801623c <uxr_init_output_reliable_stream+0x48>
 8016214:	2301      	movs	r3, #1
 8016216:	fbb3 f1fc 	udiv	r1, r3, ip
 801621a:	fb0c 3111 	mls	r1, ip, r1, r3
 801621e:	b289      	uxth	r1, r1
 8016220:	6842      	ldr	r2, [r0, #4]
 8016222:	6804      	ldr	r4, [r0, #0]
 8016224:	fbb2 f2fc 	udiv	r2, r2, ip
 8016228:	fb01 f202 	mul.w	r2, r1, r2
 801622c:	7b01      	ldrb	r1, [r0, #12]
 801622e:	50a1      	str	r1, [r4, r2]
 8016230:	3301      	adds	r3, #1
 8016232:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016236:	b29b      	uxth	r3, r3
 8016238:	459c      	cmp	ip, r3
 801623a:	d8ec      	bhi.n	8016216 <uxr_init_output_reliable_stream+0x22>
 801623c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016240:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016244:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8016248:	4905      	ldr	r1, [pc, #20]	@ (8016260 <uxr_init_output_reliable_stream+0x6c>)
 801624a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801624e:	f8c0 100e 	str.w	r1, [r0, #14]
 8016252:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016256:	2300      	movs	r3, #0
 8016258:	8242      	strh	r2, [r0, #18]
 801625a:	8403      	strh	r3, [r0, #32]
 801625c:	4770      	bx	lr
 801625e:	bf00      	nop
 8016260:	ffff0000 	.word	0xffff0000

08016264 <uxr_reset_output_reliable_stream>:
 8016264:	8901      	ldrh	r1, [r0, #8]
 8016266:	b1b1      	cbz	r1, 8016296 <uxr_reset_output_reliable_stream+0x32>
 8016268:	f04f 0c00 	mov.w	ip, #0
 801626c:	4663      	mov	r3, ip
 801626e:	fbb3 f2f1 	udiv	r2, r3, r1
 8016272:	fb01 3312 	mls	r3, r1, r2, r3
 8016276:	b29b      	uxth	r3, r3
 8016278:	6842      	ldr	r2, [r0, #4]
 801627a:	fbb2 f2f1 	udiv	r2, r2, r1
 801627e:	6801      	ldr	r1, [r0, #0]
 8016280:	fb02 f303 	mul.w	r3, r2, r3
 8016284:	7b02      	ldrb	r2, [r0, #12]
 8016286:	50ca      	str	r2, [r1, r3]
 8016288:	f10c 0c01 	add.w	ip, ip, #1
 801628c:	8901      	ldrh	r1, [r0, #8]
 801628e:	fa1f f38c 	uxth.w	r3, ip
 8016292:	4299      	cmp	r1, r3
 8016294:	d8eb      	bhi.n	801626e <uxr_reset_output_reliable_stream+0xa>
 8016296:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801629a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801629e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80162a2:	4904      	ldr	r1, [pc, #16]	@ (80162b4 <uxr_reset_output_reliable_stream+0x50>)
 80162a4:	f8c0 100e 	str.w	r1, [r0, #14]
 80162a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80162ac:	2300      	movs	r3, #0
 80162ae:	8242      	strh	r2, [r0, #18]
 80162b0:	8403      	strh	r3, [r0, #32]
 80162b2:	4770      	bx	lr
 80162b4:	ffff0000 	.word	0xffff0000

080162b8 <uxr_prepare_reliable_buffer_to_write>:
 80162b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162bc:	4604      	mov	r4, r0
 80162be:	b091      	sub	sp, #68	@ 0x44
 80162c0:	8900      	ldrh	r0, [r0, #8]
 80162c2:	89e6      	ldrh	r6, [r4, #14]
 80162c4:	6823      	ldr	r3, [r4, #0]
 80162c6:	9204      	str	r2, [sp, #16]
 80162c8:	fbb6 f2f0 	udiv	r2, r6, r0
 80162cc:	fb00 6212 	mls	r2, r0, r2, r6
 80162d0:	b292      	uxth	r2, r2
 80162d2:	6865      	ldr	r5, [r4, #4]
 80162d4:	fbb5 f5f0 	udiv	r5, r5, r0
 80162d8:	fb05 3202 	mla	r2, r5, r2, r3
 80162dc:	3204      	adds	r2, #4
 80162de:	f852 8c04 	ldr.w	r8, [r2, #-4]
 80162e2:	f894 900c 	ldrb.w	r9, [r4, #12]
 80162e6:	9203      	str	r2, [sp, #12]
 80162e8:	468b      	mov	fp, r1
 80162ea:	1f2f      	subs	r7, r5, #4
 80162ec:	2800      	cmp	r0, #0
 80162ee:	f000 814c 	beq.w	801658a <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80162f2:	f04f 0c00 	mov.w	ip, #0
 80162f6:	46e2      	mov	sl, ip
 80162f8:	4661      	mov	r1, ip
 80162fa:	fbb1 f2f0 	udiv	r2, r1, r0
 80162fe:	fb00 1212 	mls	r2, r0, r2, r1
 8016302:	b292      	uxth	r2, r2
 8016304:	fb05 f202 	mul.w	r2, r5, r2
 8016308:	f10c 0c01 	add.w	ip, ip, #1
 801630c:	589a      	ldr	r2, [r3, r2]
 801630e:	454a      	cmp	r2, r9
 8016310:	bf08      	it	eq
 8016312:	f10a 0a01 	addeq.w	sl, sl, #1
 8016316:	fa1f f18c 	uxth.w	r1, ip
 801631a:	bf08      	it	eq
 801631c:	fa1f fa8a 	uxtheq.w	sl, sl
 8016320:	4281      	cmp	r1, r0
 8016322:	d3ea      	bcc.n	80162fa <uxr_prepare_reliable_buffer_to_write+0x42>
 8016324:	4640      	mov	r0, r8
 8016326:	2104      	movs	r1, #4
 8016328:	f8cd a014 	str.w	sl, [sp, #20]
 801632c:	f7f5 fbba 	bl	800baa4 <ucdr_alignment>
 8016330:	4480      	add	r8, r0
 8016332:	eb08 020b 	add.w	r2, r8, fp
 8016336:	42ba      	cmp	r2, r7
 8016338:	f240 80cd 	bls.w	80164d6 <uxr_prepare_reliable_buffer_to_write+0x21e>
 801633c:	7b22      	ldrb	r2, [r4, #12]
 801633e:	445a      	add	r2, fp
 8016340:	42ba      	cmp	r2, r7
 8016342:	f240 80b5 	bls.w	80164b0 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8016346:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 801634a:	33fc      	adds	r3, #252	@ 0xfc
 801634c:	b2ba      	uxth	r2, r7
 801634e:	4413      	add	r3, r2
 8016350:	b29b      	uxth	r3, r3
 8016352:	fb0a f903 	mul.w	r9, sl, r3
 8016356:	45d9      	cmp	r9, fp
 8016358:	9305      	str	r3, [sp, #20]
 801635a:	9306      	str	r3, [sp, #24]
 801635c:	f0c0 80b7 	bcc.w	80164ce <uxr_prepare_reliable_buffer_to_write+0x216>
 8016360:	f108 0304 	add.w	r3, r8, #4
 8016364:	42bb      	cmp	r3, r7
 8016366:	f080 80db 	bcs.w	8016520 <uxr_prepare_reliable_buffer_to_write+0x268>
 801636a:	f1a2 0904 	sub.w	r9, r2, #4
 801636e:	eba9 0908 	sub.w	r9, r9, r8
 8016372:	9b05      	ldr	r3, [sp, #20]
 8016374:	fa1f f989 	uxth.w	r9, r9
 8016378:	ebab 0b09 	sub.w	fp, fp, r9
 801637c:	fbbb f2f3 	udiv	r2, fp, r3
 8016380:	fb03 b312 	mls	r3, r3, r2, fp
 8016384:	2b00      	cmp	r3, #0
 8016386:	f000 80c8 	beq.w	801651a <uxr_prepare_reliable_buffer_to_write+0x262>
 801638a:	3201      	adds	r2, #1
 801638c:	b292      	uxth	r2, r2
 801638e:	9306      	str	r3, [sp, #24]
 8016390:	4552      	cmp	r2, sl
 8016392:	f200 809c 	bhi.w	80164ce <uxr_prepare_reliable_buffer_to_write+0x216>
 8016396:	f10d 0b20 	add.w	fp, sp, #32
 801639a:	2a00      	cmp	r2, #0
 801639c:	d042      	beq.n	8016424 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801639e:	f8cd 801c 	str.w	r8, [sp, #28]
 80163a2:	f04f 0a00 	mov.w	sl, #0
 80163a6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80163aa:	9505      	str	r5, [sp, #20]
 80163ac:	f10d 0b20 	add.w	fp, sp, #32
 80163b0:	4615      	mov	r5, r2
 80163b2:	e000      	b.n	80163b6 <uxr_prepare_reliable_buffer_to_write+0xfe>
 80163b4:	46c1      	mov	r9, r8
 80163b6:	8920      	ldrh	r0, [r4, #8]
 80163b8:	fbb6 f2f0 	udiv	r2, r6, r0
 80163bc:	fb00 6112 	mls	r1, r0, r2, r6
 80163c0:	b28a      	uxth	r2, r1
 80163c2:	6863      	ldr	r3, [r4, #4]
 80163c4:	fbb3 f1f0 	udiv	r1, r3, r0
 80163c8:	6823      	ldr	r3, [r4, #0]
 80163ca:	fb02 f101 	mul.w	r1, r2, r1
 80163ce:	3104      	adds	r1, #4
 80163d0:	4419      	add	r1, r3
 80163d2:	4658      	mov	r0, fp
 80163d4:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80163d8:	9200      	str	r2, [sp, #0]
 80163da:	2300      	movs	r3, #0
 80163dc:	463a      	mov	r2, r7
 80163de:	f7f5 fb4b 	bl	800ba78 <ucdr_init_buffer_origin_offset>
 80163e2:	464a      	mov	r2, r9
 80163e4:	2300      	movs	r3, #0
 80163e6:	210d      	movs	r1, #13
 80163e8:	4658      	mov	r0, fp
 80163ea:	f7fa f95b 	bl	80106a4 <uxr_buffer_submessage_header>
 80163ee:	8921      	ldrh	r1, [r4, #8]
 80163f0:	fbb6 f2f1 	udiv	r2, r6, r1
 80163f4:	fb01 6212 	mls	r2, r1, r2, r6
 80163f8:	b292      	uxth	r2, r2
 80163fa:	6863      	ldr	r3, [r4, #4]
 80163fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8016400:	fb02 f303 	mul.w	r3, r2, r3
 8016404:	6822      	ldr	r2, [r4, #0]
 8016406:	4630      	mov	r0, r6
 8016408:	50d7      	str	r7, [r2, r3]
 801640a:	2101      	movs	r1, #1
 801640c:	f000 f9c4 	bl	8016798 <uxr_seq_num_add>
 8016410:	f10a 0a01 	add.w	sl, sl, #1
 8016414:	fa1f f38a 	uxth.w	r3, sl
 8016418:	429d      	cmp	r5, r3
 801641a:	4606      	mov	r6, r0
 801641c:	d8ca      	bhi.n	80163b4 <uxr_prepare_reliable_buffer_to_write+0xfc>
 801641e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8016422:	9d05      	ldr	r5, [sp, #20]
 8016424:	8920      	ldrh	r0, [r4, #8]
 8016426:	fbb6 f3f0 	udiv	r3, r6, r0
 801642a:	fb00 6313 	mls	r3, r0, r3, r6
 801642e:	b299      	uxth	r1, r3
 8016430:	6863      	ldr	r3, [r4, #4]
 8016432:	fbb3 f3f0 	udiv	r3, r3, r0
 8016436:	fb01 f303 	mul.w	r3, r1, r3
 801643a:	6821      	ldr	r1, [r4, #0]
 801643c:	3304      	adds	r3, #4
 801643e:	4419      	add	r1, r3
 8016440:	463a      	mov	r2, r7
 8016442:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8016446:	9000      	str	r0, [sp, #0]
 8016448:	2300      	movs	r3, #0
 801644a:	4658      	mov	r0, fp
 801644c:	f7f5 fb14 	bl	800ba78 <ucdr_init_buffer_origin_offset>
 8016450:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8016454:	4658      	mov	r0, fp
 8016456:	fa1f f289 	uxth.w	r2, r9
 801645a:	2302      	movs	r3, #2
 801645c:	210d      	movs	r1, #13
 801645e:	f7fa f921 	bl	80106a4 <uxr_buffer_submessage_header>
 8016462:	9b03      	ldr	r3, [sp, #12]
 8016464:	8927      	ldrh	r7, [r4, #8]
 8016466:	7b20      	ldrb	r0, [r4, #12]
 8016468:	f108 0104 	add.w	r1, r8, #4
 801646c:	440b      	add	r3, r1
 801646e:	4619      	mov	r1, r3
 8016470:	fbb6 f3f7 	udiv	r3, r6, r7
 8016474:	fb07 6313 	mls	r3, r7, r3, r6
 8016478:	f1a5 0208 	sub.w	r2, r5, #8
 801647c:	b29d      	uxth	r5, r3
 801647e:	3004      	adds	r0, #4
 8016480:	6863      	ldr	r3, [r4, #4]
 8016482:	fbb3 f3f7 	udiv	r3, r3, r7
 8016486:	fb05 f303 	mul.w	r3, r5, r3
 801648a:	6825      	ldr	r5, [r4, #0]
 801648c:	4448      	add	r0, r9
 801648e:	50e8      	str	r0, [r5, r3]
 8016490:	9d04      	ldr	r5, [sp, #16]
 8016492:	eba2 0208 	sub.w	r2, r2, r8
 8016496:	4628      	mov	r0, r5
 8016498:	f7f5 fb00 	bl	800ba9c <ucdr_init_buffer>
 801649c:	4628      	mov	r0, r5
 801649e:	493c      	ldr	r1, [pc, #240]	@ (8016590 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 80164a0:	4622      	mov	r2, r4
 80164a2:	f7f5 facf 	bl	800ba44 <ucdr_set_on_full_buffer_callback>
 80164a6:	2001      	movs	r0, #1
 80164a8:	81e6      	strh	r6, [r4, #14]
 80164aa:	b011      	add	sp, #68	@ 0x44
 80164ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164b0:	2101      	movs	r1, #1
 80164b2:	89e0      	ldrh	r0, [r4, #14]
 80164b4:	f000 f970 	bl	8016798 <uxr_seq_num_add>
 80164b8:	8921      	ldrh	r1, [r4, #8]
 80164ba:	4605      	mov	r5, r0
 80164bc:	8a60      	ldrh	r0, [r4, #18]
 80164be:	f000 f96b 	bl	8016798 <uxr_seq_num_add>
 80164c2:	4601      	mov	r1, r0
 80164c4:	4628      	mov	r0, r5
 80164c6:	f000 f96f 	bl	80167a8 <uxr_seq_num_cmp>
 80164ca:	2800      	cmp	r0, #0
 80164cc:	dd42      	ble.n	8016554 <uxr_prepare_reliable_buffer_to_write+0x29c>
 80164ce:	2000      	movs	r0, #0
 80164d0:	b011      	add	sp, #68	@ 0x44
 80164d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164d6:	8921      	ldrh	r1, [r4, #8]
 80164d8:	8a60      	ldrh	r0, [r4, #18]
 80164da:	9205      	str	r2, [sp, #20]
 80164dc:	f000 f95c 	bl	8016798 <uxr_seq_num_add>
 80164e0:	4601      	mov	r1, r0
 80164e2:	4630      	mov	r0, r6
 80164e4:	f000 f960 	bl	80167a8 <uxr_seq_num_cmp>
 80164e8:	2800      	cmp	r0, #0
 80164ea:	9a05      	ldr	r2, [sp, #20]
 80164ec:	dcef      	bgt.n	80164ce <uxr_prepare_reliable_buffer_to_write+0x216>
 80164ee:	8927      	ldrh	r7, [r4, #8]
 80164f0:	fbb6 f3f7 	udiv	r3, r6, r7
 80164f4:	fb07 6313 	mls	r3, r7, r3, r6
 80164f8:	b29d      	uxth	r5, r3
 80164fa:	6863      	ldr	r3, [r4, #4]
 80164fc:	6824      	ldr	r4, [r4, #0]
 80164fe:	fbb3 f3f7 	udiv	r3, r3, r7
 8016502:	fb05 f303 	mul.w	r3, r5, r3
 8016506:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801650a:	50e2      	str	r2, [r4, r3]
 801650c:	2300      	movs	r3, #0
 801650e:	f8cd 8000 	str.w	r8, [sp]
 8016512:	f7f5 fab1 	bl	800ba78 <ucdr_init_buffer_origin_offset>
 8016516:	2001      	movs	r0, #1
 8016518:	e7da      	b.n	80164d0 <uxr_prepare_reliable_buffer_to_write+0x218>
 801651a:	b293      	uxth	r3, r2
 801651c:	461a      	mov	r2, r3
 801651e:	e737      	b.n	8016390 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8016520:	4630      	mov	r0, r6
 8016522:	2101      	movs	r1, #1
 8016524:	9207      	str	r2, [sp, #28]
 8016526:	f000 f937 	bl	8016798 <uxr_seq_num_add>
 801652a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801652e:	fbb0 f1fc 	udiv	r1, r0, ip
 8016532:	fb0c 0111 	mls	r1, ip, r1, r0
 8016536:	4606      	mov	r6, r0
 8016538:	b288      	uxth	r0, r1
 801653a:	6863      	ldr	r3, [r4, #4]
 801653c:	fbb3 f1fc 	udiv	r1, r3, ip
 8016540:	6823      	ldr	r3, [r4, #0]
 8016542:	9a07      	ldr	r2, [sp, #28]
 8016544:	fb00 f101 	mul.w	r1, r0, r1
 8016548:	3104      	adds	r1, #4
 801654a:	440b      	add	r3, r1
 801654c:	9303      	str	r3, [sp, #12]
 801654e:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8016552:	e70a      	b.n	801636a <uxr_prepare_reliable_buffer_to_write+0xb2>
 8016554:	8921      	ldrh	r1, [r4, #8]
 8016556:	fbb5 f3f1 	udiv	r3, r5, r1
 801655a:	fb01 5313 	mls	r3, r1, r3, r5
 801655e:	b29a      	uxth	r2, r3
 8016560:	6863      	ldr	r3, [r4, #4]
 8016562:	fbb3 f3f1 	udiv	r3, r3, r1
 8016566:	6821      	ldr	r1, [r4, #0]
 8016568:	9804      	ldr	r0, [sp, #16]
 801656a:	fb02 f303 	mul.w	r3, r2, r3
 801656e:	3304      	adds	r3, #4
 8016570:	7b22      	ldrb	r2, [r4, #12]
 8016572:	4419      	add	r1, r3
 8016574:	445a      	add	r2, fp
 8016576:	f841 2c04 	str.w	r2, [r1, #-4]
 801657a:	7b23      	ldrb	r3, [r4, #12]
 801657c:	9300      	str	r3, [sp, #0]
 801657e:	2300      	movs	r3, #0
 8016580:	f7f5 fa7a 	bl	800ba78 <ucdr_init_buffer_origin_offset>
 8016584:	81e5      	strh	r5, [r4, #14]
 8016586:	2001      	movs	r0, #1
 8016588:	e7a2      	b.n	80164d0 <uxr_prepare_reliable_buffer_to_write+0x218>
 801658a:	4682      	mov	sl, r0
 801658c:	e6ca      	b.n	8016324 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801658e:	bf00      	nop
 8016590:	08016199 	.word	0x08016199

08016594 <uxr_prepare_next_reliable_buffer_to_send>:
 8016594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016596:	4604      	mov	r4, r0
 8016598:	460f      	mov	r7, r1
 801659a:	8a00      	ldrh	r0, [r0, #16]
 801659c:	2101      	movs	r1, #1
 801659e:	4616      	mov	r6, r2
 80165a0:	461d      	mov	r5, r3
 80165a2:	f000 f8f9 	bl	8016798 <uxr_seq_num_add>
 80165a6:	8028      	strh	r0, [r5, #0]
 80165a8:	8922      	ldrh	r2, [r4, #8]
 80165aa:	fbb0 f3f2 	udiv	r3, r0, r2
 80165ae:	fb02 0c13 	mls	ip, r2, r3, r0
 80165b2:	fa1f fc8c 	uxth.w	ip, ip
 80165b6:	6863      	ldr	r3, [r4, #4]
 80165b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80165bc:	fb0c fc03 	mul.w	ip, ip, r3
 80165c0:	6823      	ldr	r3, [r4, #0]
 80165c2:	89e1      	ldrh	r1, [r4, #14]
 80165c4:	f10c 0c04 	add.w	ip, ip, #4
 80165c8:	4463      	add	r3, ip
 80165ca:	603b      	str	r3, [r7, #0]
 80165cc:	6823      	ldr	r3, [r4, #0]
 80165ce:	449c      	add	ip, r3
 80165d0:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 80165d4:	6033      	str	r3, [r6, #0]
 80165d6:	f000 f8e7 	bl	80167a8 <uxr_seq_num_cmp>
 80165da:	2800      	cmp	r0, #0
 80165dc:	dd01      	ble.n	80165e2 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80165de:	2000      	movs	r0, #0
 80165e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80165e2:	7b23      	ldrb	r3, [r4, #12]
 80165e4:	6832      	ldr	r2, [r6, #0]
 80165e6:	429a      	cmp	r2, r3
 80165e8:	d9f9      	bls.n	80165de <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80165ea:	8a61      	ldrh	r1, [r4, #18]
 80165ec:	8a20      	ldrh	r0, [r4, #16]
 80165ee:	f000 f8d7 	bl	80167a0 <uxr_seq_num_sub>
 80165f2:	8923      	ldrh	r3, [r4, #8]
 80165f4:	4283      	cmp	r3, r0
 80165f6:	d0f2      	beq.n	80165de <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80165f8:	8828      	ldrh	r0, [r5, #0]
 80165fa:	89e3      	ldrh	r3, [r4, #14]
 80165fc:	8220      	strh	r0, [r4, #16]
 80165fe:	4298      	cmp	r0, r3
 8016600:	d001      	beq.n	8016606 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8016602:	2001      	movs	r0, #1
 8016604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016606:	2101      	movs	r1, #1
 8016608:	f000 f8c6 	bl	8016798 <uxr_seq_num_add>
 801660c:	81e0      	strh	r0, [r4, #14]
 801660e:	2001      	movs	r0, #1
 8016610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016612:	bf00      	nop

08016614 <uxr_update_output_stream_heartbeat_timestamp>:
 8016614:	b570      	push	{r4, r5, r6, lr}
 8016616:	8a01      	ldrh	r1, [r0, #16]
 8016618:	4604      	mov	r4, r0
 801661a:	8a40      	ldrh	r0, [r0, #18]
 801661c:	4615      	mov	r5, r2
 801661e:	461e      	mov	r6, r3
 8016620:	f000 f8c2 	bl	80167a8 <uxr_seq_num_cmp>
 8016624:	2800      	cmp	r0, #0
 8016626:	db07      	blt.n	8016638 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8016628:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801662c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016630:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8016634:	2000      	movs	r0, #0
 8016636:	bd70      	pop	{r4, r5, r6, pc}
 8016638:	f894 0020 	ldrb.w	r0, [r4, #32]
 801663c:	b940      	cbnz	r0, 8016650 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801663e:	2301      	movs	r3, #1
 8016640:	f884 3020 	strb.w	r3, [r4, #32]
 8016644:	3564      	adds	r5, #100	@ 0x64
 8016646:	f146 0600 	adc.w	r6, r6, #0
 801664a:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801664e:	bd70      	pop	{r4, r5, r6, pc}
 8016650:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8016654:	4295      	cmp	r5, r2
 8016656:	eb76 0303 	sbcs.w	r3, r6, r3
 801665a:	bfa5      	ittet	ge
 801665c:	3001      	addge	r0, #1
 801665e:	f884 0020 	strbge.w	r0, [r4, #32]
 8016662:	2000      	movlt	r0, #0
 8016664:	2001      	movge	r0, #1
 8016666:	e7ed      	b.n	8016644 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08016668 <uxr_begin_output_nack_buffer_it>:
 8016668:	8a40      	ldrh	r0, [r0, #18]
 801666a:	4770      	bx	lr

0801666c <uxr_next_reliable_nack_buffer_to_send>:
 801666c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016670:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8016674:	b082      	sub	sp, #8
 8016676:	f1b8 0f00 	cmp.w	r8, #0
 801667a:	d011      	beq.n	80166a0 <uxr_next_reliable_nack_buffer_to_send+0x34>
 801667c:	4604      	mov	r4, r0
 801667e:	8818      	ldrh	r0, [r3, #0]
 8016680:	460e      	mov	r6, r1
 8016682:	4617      	mov	r7, r2
 8016684:	461d      	mov	r5, r3
 8016686:	2101      	movs	r1, #1
 8016688:	f000 f886 	bl	8016798 <uxr_seq_num_add>
 801668c:	8028      	strh	r0, [r5, #0]
 801668e:	8a21      	ldrh	r1, [r4, #16]
 8016690:	f000 f88a 	bl	80167a8 <uxr_seq_num_cmp>
 8016694:	2800      	cmp	r0, #0
 8016696:	dd07      	ble.n	80166a8 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8016698:	f04f 0800 	mov.w	r8, #0
 801669c:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 80166a0:	4640      	mov	r0, r8
 80166a2:	b002      	add	sp, #8
 80166a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166a8:	8921      	ldrh	r1, [r4, #8]
 80166aa:	8828      	ldrh	r0, [r5, #0]
 80166ac:	6823      	ldr	r3, [r4, #0]
 80166ae:	fbb0 f2f1 	udiv	r2, r0, r1
 80166b2:	fb01 0c12 	mls	ip, r1, r2, r0
 80166b6:	fa1f f28c 	uxth.w	r2, ip
 80166ba:	9301      	str	r3, [sp, #4]
 80166bc:	6863      	ldr	r3, [r4, #4]
 80166be:	fbb3 fcf1 	udiv	ip, r3, r1
 80166c2:	9b01      	ldr	r3, [sp, #4]
 80166c4:	fb02 fc0c 	mul.w	ip, r2, ip
 80166c8:	f10c 0c04 	add.w	ip, ip, #4
 80166cc:	4463      	add	r3, ip
 80166ce:	6033      	str	r3, [r6, #0]
 80166d0:	6823      	ldr	r3, [r4, #0]
 80166d2:	4463      	add	r3, ip
 80166d4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80166d8:	603b      	str	r3, [r7, #0]
 80166da:	7b22      	ldrb	r2, [r4, #12]
 80166dc:	429a      	cmp	r2, r3
 80166de:	d0d2      	beq.n	8016686 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 80166e0:	4640      	mov	r0, r8
 80166e2:	b002      	add	sp, #8
 80166e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080166e8 <uxr_process_acknack>:
 80166e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166ea:	4604      	mov	r4, r0
 80166ec:	460e      	mov	r6, r1
 80166ee:	4610      	mov	r0, r2
 80166f0:	2101      	movs	r1, #1
 80166f2:	f000 f855 	bl	80167a0 <uxr_seq_num_sub>
 80166f6:	8a61      	ldrh	r1, [r4, #18]
 80166f8:	f000 f852 	bl	80167a0 <uxr_seq_num_sub>
 80166fc:	b1c0      	cbz	r0, 8016730 <uxr_process_acknack+0x48>
 80166fe:	4605      	mov	r5, r0
 8016700:	2700      	movs	r7, #0
 8016702:	2101      	movs	r1, #1
 8016704:	8a60      	ldrh	r0, [r4, #18]
 8016706:	f000 f847 	bl	8016798 <uxr_seq_num_add>
 801670a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801670e:	fbb0 f1fc 	udiv	r1, r0, ip
 8016712:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016716:	fb0c 0111 	mls	r1, ip, r1, r0
 801671a:	b289      	uxth	r1, r1
 801671c:	3701      	adds	r7, #1
 801671e:	fbb3 f3fc 	udiv	r3, r3, ip
 8016722:	fb01 f303 	mul.w	r3, r1, r3
 8016726:	42bd      	cmp	r5, r7
 8016728:	7b21      	ldrb	r1, [r4, #12]
 801672a:	8260      	strh	r0, [r4, #18]
 801672c:	50d1      	str	r1, [r2, r3]
 801672e:	d1e8      	bne.n	8016702 <uxr_process_acknack+0x1a>
 8016730:	3e00      	subs	r6, #0
 8016732:	f04f 0300 	mov.w	r3, #0
 8016736:	bf18      	it	ne
 8016738:	2601      	movne	r6, #1
 801673a:	f884 3020 	strb.w	r3, [r4, #32]
 801673e:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8016742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016744 <uxr_is_output_up_to_date>:
 8016744:	8a01      	ldrh	r1, [r0, #16]
 8016746:	8a40      	ldrh	r0, [r0, #18]
 8016748:	b508      	push	{r3, lr}
 801674a:	f000 f82d 	bl	80167a8 <uxr_seq_num_cmp>
 801674e:	fab0 f080 	clz	r0, r0
 8016752:	0940      	lsrs	r0, r0, #5
 8016754:	bd08      	pop	{r3, pc}
 8016756:	bf00      	nop

08016758 <get_available_free_slots>:
 8016758:	8902      	ldrh	r2, [r0, #8]
 801675a:	b1da      	cbz	r2, 8016794 <get_available_free_slots+0x3c>
 801675c:	b530      	push	{r4, r5, lr}
 801675e:	2100      	movs	r1, #0
 8016760:	6843      	ldr	r3, [r0, #4]
 8016762:	6805      	ldr	r5, [r0, #0]
 8016764:	7b04      	ldrb	r4, [r0, #12]
 8016766:	fbb3 fef2 	udiv	lr, r3, r2
 801676a:	4608      	mov	r0, r1
 801676c:	460b      	mov	r3, r1
 801676e:	fbb3 fcf2 	udiv	ip, r3, r2
 8016772:	fb02 331c 	mls	r3, r2, ip, r3
 8016776:	b29b      	uxth	r3, r3
 8016778:	fb0e f303 	mul.w	r3, lr, r3
 801677c:	3101      	adds	r1, #1
 801677e:	f855 c003 	ldr.w	ip, [r5, r3]
 8016782:	4564      	cmp	r4, ip
 8016784:	bf08      	it	eq
 8016786:	3001      	addeq	r0, #1
 8016788:	b28b      	uxth	r3, r1
 801678a:	bf08      	it	eq
 801678c:	b280      	uxtheq	r0, r0
 801678e:	4293      	cmp	r3, r2
 8016790:	d3ed      	bcc.n	801676e <get_available_free_slots+0x16>
 8016792:	bd30      	pop	{r4, r5, pc}
 8016794:	4610      	mov	r0, r2
 8016796:	4770      	bx	lr

08016798 <uxr_seq_num_add>:
 8016798:	4408      	add	r0, r1
 801679a:	b280      	uxth	r0, r0
 801679c:	4770      	bx	lr
 801679e:	bf00      	nop

080167a0 <uxr_seq_num_sub>:
 80167a0:	1a40      	subs	r0, r0, r1
 80167a2:	b280      	uxth	r0, r0
 80167a4:	4770      	bx	lr
 80167a6:	bf00      	nop

080167a8 <uxr_seq_num_cmp>:
 80167a8:	4288      	cmp	r0, r1
 80167aa:	d011      	beq.n	80167d0 <uxr_seq_num_cmp+0x28>
 80167ac:	d309      	bcc.n	80167c2 <uxr_seq_num_cmp+0x1a>
 80167ae:	4288      	cmp	r0, r1
 80167b0:	d910      	bls.n	80167d4 <uxr_seq_num_cmp+0x2c>
 80167b2:	1a40      	subs	r0, r0, r1
 80167b4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80167b8:	bfd4      	ite	le
 80167ba:	2001      	movle	r0, #1
 80167bc:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 80167c0:	4770      	bx	lr
 80167c2:	1a0b      	subs	r3, r1, r0
 80167c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80167c8:	daf1      	bge.n	80167ae <uxr_seq_num_cmp+0x6>
 80167ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80167ce:	4770      	bx	lr
 80167d0:	2000      	movs	r0, #0
 80167d2:	4770      	bx	lr
 80167d4:	2001      	movs	r0, #1
 80167d6:	4770      	bx	lr

080167d8 <rcl_get_default_domain_id>:
 80167d8:	b530      	push	{r4, r5, lr}
 80167da:	b083      	sub	sp, #12
 80167dc:	2300      	movs	r3, #0
 80167de:	9300      	str	r3, [sp, #0]
 80167e0:	b1d0      	cbz	r0, 8016818 <rcl_get_default_domain_id+0x40>
 80167e2:	4604      	mov	r4, r0
 80167e4:	4669      	mov	r1, sp
 80167e6:	4815      	ldr	r0, [pc, #84]	@ (801683c <rcl_get_default_domain_id+0x64>)
 80167e8:	f7fd ff66 	bl	80146b8 <rcutils_get_env>
 80167ec:	4602      	mov	r2, r0
 80167ee:	b110      	cbz	r0, 80167f6 <rcl_get_default_domain_id+0x1e>
 80167f0:	2001      	movs	r0, #1
 80167f2:	b003      	add	sp, #12
 80167f4:	bd30      	pop	{r4, r5, pc}
 80167f6:	9b00      	ldr	r3, [sp, #0]
 80167f8:	b18b      	cbz	r3, 801681e <rcl_get_default_domain_id+0x46>
 80167fa:	7818      	ldrb	r0, [r3, #0]
 80167fc:	2800      	cmp	r0, #0
 80167fe:	d0f8      	beq.n	80167f2 <rcl_get_default_domain_id+0x1a>
 8016800:	a901      	add	r1, sp, #4
 8016802:	4618      	mov	r0, r3
 8016804:	9201      	str	r2, [sp, #4]
 8016806:	f000 fdc9 	bl	801739c <strtoul>
 801680a:	4605      	mov	r5, r0
 801680c:	b150      	cbz	r0, 8016824 <rcl_get_default_domain_id+0x4c>
 801680e:	1c43      	adds	r3, r0, #1
 8016810:	d00d      	beq.n	801682e <rcl_get_default_domain_id+0x56>
 8016812:	6025      	str	r5, [r4, #0]
 8016814:	2000      	movs	r0, #0
 8016816:	e7ec      	b.n	80167f2 <rcl_get_default_domain_id+0x1a>
 8016818:	200b      	movs	r0, #11
 801681a:	b003      	add	sp, #12
 801681c:	bd30      	pop	{r4, r5, pc}
 801681e:	4618      	mov	r0, r3
 8016820:	b003      	add	sp, #12
 8016822:	bd30      	pop	{r4, r5, pc}
 8016824:	9b01      	ldr	r3, [sp, #4]
 8016826:	781b      	ldrb	r3, [r3, #0]
 8016828:	2b00      	cmp	r3, #0
 801682a:	d0f2      	beq.n	8016812 <rcl_get_default_domain_id+0x3a>
 801682c:	e7e0      	b.n	80167f0 <rcl_get_default_domain_id+0x18>
 801682e:	f001 f801 	bl	8017834 <__errno>
 8016832:	6803      	ldr	r3, [r0, #0]
 8016834:	2b22      	cmp	r3, #34	@ 0x22
 8016836:	d1ec      	bne.n	8016812 <rcl_get_default_domain_id+0x3a>
 8016838:	e7da      	b.n	80167f0 <rcl_get_default_domain_id+0x18>
 801683a:	bf00      	nop
 801683c:	0801921c 	.word	0x0801921c

08016840 <rcl_expand_topic_name>:
 8016840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016844:	b08b      	sub	sp, #44	@ 0x2c
 8016846:	9306      	str	r3, [sp, #24]
 8016848:	2800      	cmp	r0, #0
 801684a:	f000 80ad 	beq.w	80169a8 <rcl_expand_topic_name+0x168>
 801684e:	460e      	mov	r6, r1
 8016850:	2900      	cmp	r1, #0
 8016852:	f000 80a9 	beq.w	80169a8 <rcl_expand_topic_name+0x168>
 8016856:	4617      	mov	r7, r2
 8016858:	2a00      	cmp	r2, #0
 801685a:	f000 80a5 	beq.w	80169a8 <rcl_expand_topic_name+0x168>
 801685e:	2b00      	cmp	r3, #0
 8016860:	f000 80a2 	beq.w	80169a8 <rcl_expand_topic_name+0x168>
 8016864:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016866:	2b00      	cmp	r3, #0
 8016868:	f000 809e 	beq.w	80169a8 <rcl_expand_topic_name+0x168>
 801686c:	2200      	movs	r2, #0
 801686e:	a909      	add	r1, sp, #36	@ 0x24
 8016870:	4680      	mov	r8, r0
 8016872:	f000 fa57 	bl	8016d24 <rcl_validate_topic_name>
 8016876:	4604      	mov	r4, r0
 8016878:	2800      	cmp	r0, #0
 801687a:	f040 8096 	bne.w	80169aa <rcl_expand_topic_name+0x16a>
 801687e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016880:	2b00      	cmp	r3, #0
 8016882:	f040 809a 	bne.w	80169ba <rcl_expand_topic_name+0x17a>
 8016886:	4602      	mov	r2, r0
 8016888:	a909      	add	r1, sp, #36	@ 0x24
 801688a:	4630      	mov	r0, r6
 801688c:	f7fe fb3e 	bl	8014f0c <rmw_validate_node_name>
 8016890:	2800      	cmp	r0, #0
 8016892:	f040 808e 	bne.w	80169b2 <rcl_expand_topic_name+0x172>
 8016896:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016898:	2a00      	cmp	r2, #0
 801689a:	f040 8093 	bne.w	80169c4 <rcl_expand_topic_name+0x184>
 801689e:	a909      	add	r1, sp, #36	@ 0x24
 80168a0:	4638      	mov	r0, r7
 80168a2:	f7fe fb15 	bl	8014ed0 <rmw_validate_namespace>
 80168a6:	2800      	cmp	r0, #0
 80168a8:	f040 8083 	bne.w	80169b2 <rcl_expand_topic_name+0x172>
 80168ac:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80168ae:	2c00      	cmp	r4, #0
 80168b0:	f040 80ed 	bne.w	8016a8e <rcl_expand_topic_name+0x24e>
 80168b4:	217b      	movs	r1, #123	@ 0x7b
 80168b6:	4640      	mov	r0, r8
 80168b8:	f000 ff30 	bl	801771c <strchr>
 80168bc:	f898 3000 	ldrb.w	r3, [r8]
 80168c0:	2b2f      	cmp	r3, #47	@ 0x2f
 80168c2:	4605      	mov	r5, r0
 80168c4:	f000 809e 	beq.w	8016a04 <rcl_expand_topic_name+0x1c4>
 80168c8:	2b7e      	cmp	r3, #126	@ 0x7e
 80168ca:	f040 80a2 	bne.w	8016a12 <rcl_expand_topic_name+0x1d2>
 80168ce:	4638      	mov	r0, r7
 80168d0:	f7e9 fcb0 	bl	8000234 <strlen>
 80168d4:	4a82      	ldr	r2, [pc, #520]	@ (8016ae0 <rcl_expand_topic_name+0x2a0>)
 80168d6:	4b83      	ldr	r3, [pc, #524]	@ (8016ae4 <rcl_expand_topic_name+0x2a4>)
 80168d8:	2801      	cmp	r0, #1
 80168da:	bf18      	it	ne
 80168dc:	4613      	movne	r3, r2
 80168de:	9302      	str	r3, [sp, #8]
 80168e0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80168e2:	9300      	str	r3, [sp, #0]
 80168e4:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80168e8:	f108 0301 	add.w	r3, r8, #1
 80168ec:	9305      	str	r3, [sp, #20]
 80168ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80168f2:	9301      	str	r3, [sp, #4]
 80168f4:	ab14      	add	r3, sp, #80	@ 0x50
 80168f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80168f8:	f7fd ff06 	bl	8014708 <rcutils_format_string_limit>
 80168fc:	4682      	mov	sl, r0
 80168fe:	2800      	cmp	r0, #0
 8016900:	f000 80c7 	beq.w	8016a92 <rcl_expand_topic_name+0x252>
 8016904:	2d00      	cmp	r5, #0
 8016906:	f000 80a2 	beq.w	8016a4e <rcl_expand_topic_name+0x20e>
 801690a:	217b      	movs	r1, #123	@ 0x7b
 801690c:	f000 ff06 	bl	801771c <strchr>
 8016910:	46d1      	mov	r9, sl
 8016912:	4605      	mov	r5, r0
 8016914:	9407      	str	r4, [sp, #28]
 8016916:	46d3      	mov	fp, sl
 8016918:	464c      	mov	r4, r9
 801691a:	2d00      	cmp	r5, #0
 801691c:	f000 80be 	beq.w	8016a9c <rcl_expand_topic_name+0x25c>
 8016920:	217d      	movs	r1, #125	@ 0x7d
 8016922:	4620      	mov	r0, r4
 8016924:	f000 fefa 	bl	801771c <strchr>
 8016928:	eba0 0905 	sub.w	r9, r0, r5
 801692c:	f109 0a01 	add.w	sl, r9, #1
 8016930:	486d      	ldr	r0, [pc, #436]	@ (8016ae8 <rcl_expand_topic_name+0x2a8>)
 8016932:	4652      	mov	r2, sl
 8016934:	4629      	mov	r1, r5
 8016936:	f000 fefe 	bl	8017736 <strncmp>
 801693a:	2800      	cmp	r0, #0
 801693c:	d067      	beq.n	8016a0e <rcl_expand_topic_name+0x1ce>
 801693e:	486b      	ldr	r0, [pc, #428]	@ (8016aec <rcl_expand_topic_name+0x2ac>)
 8016940:	4652      	mov	r2, sl
 8016942:	4629      	mov	r1, r5
 8016944:	f000 fef7 	bl	8017736 <strncmp>
 8016948:	b130      	cbz	r0, 8016958 <rcl_expand_topic_name+0x118>
 801694a:	4869      	ldr	r0, [pc, #420]	@ (8016af0 <rcl_expand_topic_name+0x2b0>)
 801694c:	4652      	mov	r2, sl
 801694e:	4629      	mov	r1, r5
 8016950:	f000 fef1 	bl	8017736 <strncmp>
 8016954:	2800      	cmp	r0, #0
 8016956:	d137      	bne.n	80169c8 <rcl_expand_topic_name+0x188>
 8016958:	46b9      	mov	r9, r7
 801695a:	ab16      	add	r3, sp, #88	@ 0x58
 801695c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016960:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016964:	ab14      	add	r3, sp, #80	@ 0x50
 8016966:	4628      	mov	r0, r5
 8016968:	cb0c      	ldmia	r3, {r2, r3}
 801696a:	4651      	mov	r1, sl
 801696c:	f7fe f808 	bl	8014980 <rcutils_strndup>
 8016970:	4605      	mov	r5, r0
 8016972:	2800      	cmp	r0, #0
 8016974:	f000 809c 	beq.w	8016ab0 <rcl_expand_topic_name+0x270>
 8016978:	464a      	mov	r2, r9
 801697a:	4620      	mov	r0, r4
 801697c:	ab14      	add	r3, sp, #80	@ 0x50
 801697e:	4629      	mov	r1, r5
 8016980:	f7fd fefc 	bl	801477c <rcutils_repl_str>
 8016984:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016986:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016988:	4604      	mov	r4, r0
 801698a:	4628      	mov	r0, r5
 801698c:	4798      	blx	r3
 801698e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016990:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016992:	4658      	mov	r0, fp
 8016994:	4798      	blx	r3
 8016996:	2c00      	cmp	r4, #0
 8016998:	d07b      	beq.n	8016a92 <rcl_expand_topic_name+0x252>
 801699a:	217b      	movs	r1, #123	@ 0x7b
 801699c:	4620      	mov	r0, r4
 801699e:	f000 febd 	bl	801771c <strchr>
 80169a2:	46a3      	mov	fp, r4
 80169a4:	4605      	mov	r5, r0
 80169a6:	e7b8      	b.n	801691a <rcl_expand_topic_name+0xda>
 80169a8:	240b      	movs	r4, #11
 80169aa:	4620      	mov	r0, r4
 80169ac:	b00b      	add	sp, #44	@ 0x2c
 80169ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169b2:	f7fb f8af 	bl	8011b14 <rcl_convert_rmw_ret_to_rcl_ret>
 80169b6:	4604      	mov	r4, r0
 80169b8:	e7f7      	b.n	80169aa <rcl_expand_topic_name+0x16a>
 80169ba:	2467      	movs	r4, #103	@ 0x67
 80169bc:	4620      	mov	r0, r4
 80169be:	b00b      	add	sp, #44	@ 0x2c
 80169c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169c4:	24c9      	movs	r4, #201	@ 0xc9
 80169c6:	e7f0      	b.n	80169aa <rcl_expand_topic_name+0x16a>
 80169c8:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 80169cc:	9806      	ldr	r0, [sp, #24]
 80169ce:	1c69      	adds	r1, r5, #1
 80169d0:	f7fe f8f0 	bl	8014bb4 <rcutils_string_map_getn>
 80169d4:	4681      	mov	r9, r0
 80169d6:	2800      	cmp	r0, #0
 80169d8:	d1bf      	bne.n	801695a <rcl_expand_topic_name+0x11a>
 80169da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80169dc:	aa16      	add	r2, sp, #88	@ 0x58
 80169de:	6018      	str	r0, [r3, #0]
 80169e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80169e2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80169e6:	ab14      	add	r3, sp, #80	@ 0x50
 80169e8:	cb0c      	ldmia	r3, {r2, r3}
 80169ea:	4651      	mov	r1, sl
 80169ec:	4628      	mov	r0, r5
 80169ee:	f7fd ffc7 	bl	8014980 <rcutils_strndup>
 80169f2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80169f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80169f6:	4798      	blx	r3
 80169f8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80169fa:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80169fc:	4658      	mov	r0, fp
 80169fe:	2469      	movs	r4, #105	@ 0x69
 8016a00:	4798      	blx	r3
 8016a02:	e7d2      	b.n	80169aa <rcl_expand_topic_name+0x16a>
 8016a04:	2800      	cmp	r0, #0
 8016a06:	d05b      	beq.n	8016ac0 <rcl_expand_topic_name+0x280>
 8016a08:	46c1      	mov	r9, r8
 8016a0a:	46a2      	mov	sl, r4
 8016a0c:	e782      	b.n	8016914 <rcl_expand_topic_name+0xd4>
 8016a0e:	46b1      	mov	r9, r6
 8016a10:	e7a3      	b.n	801695a <rcl_expand_topic_name+0x11a>
 8016a12:	2800      	cmp	r0, #0
 8016a14:	d1f8      	bne.n	8016a08 <rcl_expand_topic_name+0x1c8>
 8016a16:	4638      	mov	r0, r7
 8016a18:	f7e9 fc0c 	bl	8000234 <strlen>
 8016a1c:	4a35      	ldr	r2, [pc, #212]	@ (8016af4 <rcl_expand_topic_name+0x2b4>)
 8016a1e:	4b36      	ldr	r3, [pc, #216]	@ (8016af8 <rcl_expand_topic_name+0x2b8>)
 8016a20:	f8cd 8010 	str.w	r8, [sp, #16]
 8016a24:	2801      	cmp	r0, #1
 8016a26:	bf18      	it	ne
 8016a28:	4613      	movne	r3, r2
 8016a2a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8016a2e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8016a32:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016a34:	9703      	str	r7, [sp, #12]
 8016a36:	9200      	str	r2, [sp, #0]
 8016a38:	ab14      	add	r3, sp, #80	@ 0x50
 8016a3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016a3c:	f7fd fe64 	bl	8014708 <rcutils_format_string_limit>
 8016a40:	4682      	mov	sl, r0
 8016a42:	4653      	mov	r3, sl
 8016a44:	b32b      	cbz	r3, 8016a92 <rcl_expand_topic_name+0x252>
 8016a46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016a48:	f8c3 a000 	str.w	sl, [r3]
 8016a4c:	e7ad      	b.n	80169aa <rcl_expand_topic_name+0x16a>
 8016a4e:	f89a 3000 	ldrb.w	r3, [sl]
 8016a52:	2b2f      	cmp	r3, #47	@ 0x2f
 8016a54:	d0f7      	beq.n	8016a46 <rcl_expand_topic_name+0x206>
 8016a56:	4638      	mov	r0, r7
 8016a58:	f7e9 fbec 	bl	8000234 <strlen>
 8016a5c:	4a25      	ldr	r2, [pc, #148]	@ (8016af4 <rcl_expand_topic_name+0x2b4>)
 8016a5e:	4b26      	ldr	r3, [pc, #152]	@ (8016af8 <rcl_expand_topic_name+0x2b8>)
 8016a60:	f8cd a010 	str.w	sl, [sp, #16]
 8016a64:	2801      	cmp	r0, #1
 8016a66:	bf18      	it	ne
 8016a68:	4613      	movne	r3, r2
 8016a6a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8016a6e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8016a72:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016a74:	9703      	str	r7, [sp, #12]
 8016a76:	9200      	str	r2, [sp, #0]
 8016a78:	ab14      	add	r3, sp, #80	@ 0x50
 8016a7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016a7c:	f7fd fe44 	bl	8014708 <rcutils_format_string_limit>
 8016a80:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016a82:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016a84:	4605      	mov	r5, r0
 8016a86:	4650      	mov	r0, sl
 8016a88:	4798      	blx	r3
 8016a8a:	46aa      	mov	sl, r5
 8016a8c:	e7d9      	b.n	8016a42 <rcl_expand_topic_name+0x202>
 8016a8e:	24ca      	movs	r4, #202	@ 0xca
 8016a90:	e78b      	b.n	80169aa <rcl_expand_topic_name+0x16a>
 8016a92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016a94:	2300      	movs	r3, #0
 8016a96:	6013      	str	r3, [r2, #0]
 8016a98:	240a      	movs	r4, #10
 8016a9a:	e786      	b.n	80169aa <rcl_expand_topic_name+0x16a>
 8016a9c:	465b      	mov	r3, fp
 8016a9e:	9c07      	ldr	r4, [sp, #28]
 8016aa0:	46da      	mov	sl, fp
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d1d3      	bne.n	8016a4e <rcl_expand_topic_name+0x20e>
 8016aa6:	f898 3000 	ldrb.w	r3, [r8]
 8016aaa:	2b2f      	cmp	r3, #47	@ 0x2f
 8016aac:	d0cb      	beq.n	8016a46 <rcl_expand_topic_name+0x206>
 8016aae:	e7b2      	b.n	8016a16 <rcl_expand_topic_name+0x1d6>
 8016ab0:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8016ab4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016ab6:	6015      	str	r5, [r2, #0]
 8016ab8:	4658      	mov	r0, fp
 8016aba:	4798      	blx	r3
 8016abc:	240a      	movs	r4, #10
 8016abe:	e774      	b.n	80169aa <rcl_expand_topic_name+0x16a>
 8016ac0:	ab17      	add	r3, sp, #92	@ 0x5c
 8016ac2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016ac6:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016aca:	ab14      	add	r3, sp, #80	@ 0x50
 8016acc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016ace:	4640      	mov	r0, r8
 8016ad0:	f7fd ff34 	bl	801493c <rcutils_strdup>
 8016ad4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016ad6:	2800      	cmp	r0, #0
 8016ad8:	6018      	str	r0, [r3, #0]
 8016ada:	bf08      	it	eq
 8016adc:	240a      	moveq	r4, #10
 8016ade:	e764      	b.n	80169aa <rcl_expand_topic_name+0x16a>
 8016ae0:	0801922c 	.word	0x0801922c
 8016ae4:	08018a88 	.word	0x08018a88
 8016ae8:	08019234 	.word	0x08019234
 8016aec:	0801923c 	.word	0x0801923c
 8016af0:	08019244 	.word	0x08019244
 8016af4:	08018a74 	.word	0x08018a74
 8016af8:	08018a98 	.word	0x08018a98

08016afc <rcl_get_default_topic_name_substitutions>:
 8016afc:	2800      	cmp	r0, #0
 8016afe:	bf0c      	ite	eq
 8016b00:	200b      	moveq	r0, #11
 8016b02:	2000      	movne	r0, #0
 8016b04:	4770      	bx	lr
 8016b06:	bf00      	nop

08016b08 <rcl_get_zero_initialized_guard_condition>:
 8016b08:	4a03      	ldr	r2, [pc, #12]	@ (8016b18 <rcl_get_zero_initialized_guard_condition+0x10>)
 8016b0a:	4603      	mov	r3, r0
 8016b0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016b10:	e883 0003 	stmia.w	r3, {r0, r1}
 8016b14:	4618      	mov	r0, r3
 8016b16:	4770      	bx	lr
 8016b18:	08019250 	.word	0x08019250

08016b1c <rcl_guard_condition_init>:
 8016b1c:	b082      	sub	sp, #8
 8016b1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b20:	b087      	sub	sp, #28
 8016b22:	ac0c      	add	r4, sp, #48	@ 0x30
 8016b24:	e884 000c 	stmia.w	r4, {r2, r3}
 8016b28:	46a6      	mov	lr, r4
 8016b2a:	460d      	mov	r5, r1
 8016b2c:	4604      	mov	r4, r0
 8016b2e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016b32:	f10d 0c04 	add.w	ip, sp, #4
 8016b36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016b3a:	f8de 3000 	ldr.w	r3, [lr]
 8016b3e:	f8cc 3000 	str.w	r3, [ip]
 8016b42:	a801      	add	r0, sp, #4
 8016b44:	f7f6 f962 	bl	800ce0c <rcutils_allocator_is_valid>
 8016b48:	b338      	cbz	r0, 8016b9a <rcl_guard_condition_init+0x7e>
 8016b4a:	b334      	cbz	r4, 8016b9a <rcl_guard_condition_init+0x7e>
 8016b4c:	6866      	ldr	r6, [r4, #4]
 8016b4e:	b9ee      	cbnz	r6, 8016b8c <rcl_guard_condition_init+0x70>
 8016b50:	b31d      	cbz	r5, 8016b9a <rcl_guard_condition_init+0x7e>
 8016b52:	4628      	mov	r0, r5
 8016b54:	f7fa fffc 	bl	8011b50 <rcl_context_is_valid>
 8016b58:	b308      	cbz	r0, 8016b9e <rcl_guard_condition_init+0x82>
 8016b5a:	9b01      	ldr	r3, [sp, #4]
 8016b5c:	9905      	ldr	r1, [sp, #20]
 8016b5e:	201c      	movs	r0, #28
 8016b60:	4798      	blx	r3
 8016b62:	4607      	mov	r7, r0
 8016b64:	6060      	str	r0, [r4, #4]
 8016b66:	b310      	cbz	r0, 8016bae <rcl_guard_condition_init+0x92>
 8016b68:	6828      	ldr	r0, [r5, #0]
 8016b6a:	3028      	adds	r0, #40	@ 0x28
 8016b6c:	f000 f9ac 	bl	8016ec8 <rmw_create_guard_condition>
 8016b70:	6038      	str	r0, [r7, #0]
 8016b72:	6860      	ldr	r0, [r4, #4]
 8016b74:	6805      	ldr	r5, [r0, #0]
 8016b76:	b1a5      	cbz	r5, 8016ba2 <rcl_guard_condition_init+0x86>
 8016b78:	2301      	movs	r3, #1
 8016b7a:	ac01      	add	r4, sp, #4
 8016b7c:	7103      	strb	r3, [r0, #4]
 8016b7e:	f100 0708 	add.w	r7, r0, #8
 8016b82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016b84:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016b86:	6823      	ldr	r3, [r4, #0]
 8016b88:	603b      	str	r3, [r7, #0]
 8016b8a:	e000      	b.n	8016b8e <rcl_guard_condition_init+0x72>
 8016b8c:	2664      	movs	r6, #100	@ 0x64
 8016b8e:	4630      	mov	r0, r6
 8016b90:	b007      	add	sp, #28
 8016b92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016b96:	b002      	add	sp, #8
 8016b98:	4770      	bx	lr
 8016b9a:	260b      	movs	r6, #11
 8016b9c:	e7f7      	b.n	8016b8e <rcl_guard_condition_init+0x72>
 8016b9e:	2665      	movs	r6, #101	@ 0x65
 8016ba0:	e7f5      	b.n	8016b8e <rcl_guard_condition_init+0x72>
 8016ba2:	9b02      	ldr	r3, [sp, #8]
 8016ba4:	9905      	ldr	r1, [sp, #20]
 8016ba6:	4798      	blx	r3
 8016ba8:	2601      	movs	r6, #1
 8016baa:	6065      	str	r5, [r4, #4]
 8016bac:	e7ef      	b.n	8016b8e <rcl_guard_condition_init+0x72>
 8016bae:	260a      	movs	r6, #10
 8016bb0:	e7ed      	b.n	8016b8e <rcl_guard_condition_init+0x72>
 8016bb2:	bf00      	nop

08016bb4 <rcl_guard_condition_init_from_rmw>:
 8016bb4:	b082      	sub	sp, #8
 8016bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bba:	b086      	sub	sp, #24
 8016bbc:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8016bc0:	4604      	mov	r4, r0
 8016bc2:	f84c 3f04 	str.w	r3, [ip, #4]!
 8016bc6:	460e      	mov	r6, r1
 8016bc8:	4617      	mov	r7, r2
 8016bca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016bce:	f10d 0e04 	add.w	lr, sp, #4
 8016bd2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016bd6:	f8dc 3000 	ldr.w	r3, [ip]
 8016bda:	f8ce 3000 	str.w	r3, [lr]
 8016bde:	a801      	add	r0, sp, #4
 8016be0:	f7f6 f914 	bl	800ce0c <rcutils_allocator_is_valid>
 8016be4:	b350      	cbz	r0, 8016c3c <rcl_guard_condition_init_from_rmw+0x88>
 8016be6:	b34c      	cbz	r4, 8016c3c <rcl_guard_condition_init_from_rmw+0x88>
 8016be8:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8016bec:	f1b8 0f00 	cmp.w	r8, #0
 8016bf0:	d11e      	bne.n	8016c30 <rcl_guard_condition_init_from_rmw+0x7c>
 8016bf2:	b31f      	cbz	r7, 8016c3c <rcl_guard_condition_init_from_rmw+0x88>
 8016bf4:	4638      	mov	r0, r7
 8016bf6:	f7fa ffab 	bl	8011b50 <rcl_context_is_valid>
 8016bfa:	b328      	cbz	r0, 8016c48 <rcl_guard_condition_init_from_rmw+0x94>
 8016bfc:	9b01      	ldr	r3, [sp, #4]
 8016bfe:	9905      	ldr	r1, [sp, #20]
 8016c00:	201c      	movs	r0, #28
 8016c02:	4798      	blx	r3
 8016c04:	4605      	mov	r5, r0
 8016c06:	6060      	str	r0, [r4, #4]
 8016c08:	b358      	cbz	r0, 8016c62 <rcl_guard_condition_init_from_rmw+0xae>
 8016c0a:	b1fe      	cbz	r6, 8016c4c <rcl_guard_condition_init_from_rmw+0x98>
 8016c0c:	6006      	str	r6, [r0, #0]
 8016c0e:	f880 8004 	strb.w	r8, [r0, #4]
 8016c12:	ac01      	add	r4, sp, #4
 8016c14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016c16:	f105 0c08 	add.w	ip, r5, #8
 8016c1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016c1e:	6823      	ldr	r3, [r4, #0]
 8016c20:	f8cc 3000 	str.w	r3, [ip]
 8016c24:	2000      	movs	r0, #0
 8016c26:	b006      	add	sp, #24
 8016c28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c2c:	b002      	add	sp, #8
 8016c2e:	4770      	bx	lr
 8016c30:	2064      	movs	r0, #100	@ 0x64
 8016c32:	b006      	add	sp, #24
 8016c34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c38:	b002      	add	sp, #8
 8016c3a:	4770      	bx	lr
 8016c3c:	200b      	movs	r0, #11
 8016c3e:	b006      	add	sp, #24
 8016c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c44:	b002      	add	sp, #8
 8016c46:	4770      	bx	lr
 8016c48:	2065      	movs	r0, #101	@ 0x65
 8016c4a:	e7f2      	b.n	8016c32 <rcl_guard_condition_init_from_rmw+0x7e>
 8016c4c:	6838      	ldr	r0, [r7, #0]
 8016c4e:	3028      	adds	r0, #40	@ 0x28
 8016c50:	f000 f93a 	bl	8016ec8 <rmw_create_guard_condition>
 8016c54:	6028      	str	r0, [r5, #0]
 8016c56:	6865      	ldr	r5, [r4, #4]
 8016c58:	682e      	ldr	r6, [r5, #0]
 8016c5a:	b126      	cbz	r6, 8016c66 <rcl_guard_condition_init_from_rmw+0xb2>
 8016c5c:	2301      	movs	r3, #1
 8016c5e:	712b      	strb	r3, [r5, #4]
 8016c60:	e7d7      	b.n	8016c12 <rcl_guard_condition_init_from_rmw+0x5e>
 8016c62:	200a      	movs	r0, #10
 8016c64:	e7e5      	b.n	8016c32 <rcl_guard_condition_init_from_rmw+0x7e>
 8016c66:	4628      	mov	r0, r5
 8016c68:	9b02      	ldr	r3, [sp, #8]
 8016c6a:	9905      	ldr	r1, [sp, #20]
 8016c6c:	4798      	blx	r3
 8016c6e:	6066      	str	r6, [r4, #4]
 8016c70:	2001      	movs	r0, #1
 8016c72:	e7de      	b.n	8016c32 <rcl_guard_condition_init_from_rmw+0x7e>

08016c74 <rcl_guard_condition_fini>:
 8016c74:	b570      	push	{r4, r5, r6, lr}
 8016c76:	b082      	sub	sp, #8
 8016c78:	b1f0      	cbz	r0, 8016cb8 <rcl_guard_condition_fini+0x44>
 8016c7a:	6843      	ldr	r3, [r0, #4]
 8016c7c:	4604      	mov	r4, r0
 8016c7e:	b163      	cbz	r3, 8016c9a <rcl_guard_condition_fini+0x26>
 8016c80:	6818      	ldr	r0, [r3, #0]
 8016c82:	68de      	ldr	r6, [r3, #12]
 8016c84:	6999      	ldr	r1, [r3, #24]
 8016c86:	b160      	cbz	r0, 8016ca2 <rcl_guard_condition_fini+0x2e>
 8016c88:	791d      	ldrb	r5, [r3, #4]
 8016c8a:	b965      	cbnz	r5, 8016ca6 <rcl_guard_condition_fini+0x32>
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	47b0      	blx	r6
 8016c90:	2300      	movs	r3, #0
 8016c92:	4628      	mov	r0, r5
 8016c94:	6063      	str	r3, [r4, #4]
 8016c96:	b002      	add	sp, #8
 8016c98:	bd70      	pop	{r4, r5, r6, pc}
 8016c9a:	461d      	mov	r5, r3
 8016c9c:	4628      	mov	r0, r5
 8016c9e:	b002      	add	sp, #8
 8016ca0:	bd70      	pop	{r4, r5, r6, pc}
 8016ca2:	4605      	mov	r5, r0
 8016ca4:	e7f2      	b.n	8016c8c <rcl_guard_condition_fini+0x18>
 8016ca6:	9101      	str	r1, [sp, #4]
 8016ca8:	f000 f922 	bl	8016ef0 <rmw_destroy_guard_condition>
 8016cac:	1e05      	subs	r5, r0, #0
 8016cae:	6863      	ldr	r3, [r4, #4]
 8016cb0:	9901      	ldr	r1, [sp, #4]
 8016cb2:	bf18      	it	ne
 8016cb4:	2501      	movne	r5, #1
 8016cb6:	e7e9      	b.n	8016c8c <rcl_guard_condition_fini+0x18>
 8016cb8:	250b      	movs	r5, #11
 8016cba:	4628      	mov	r0, r5
 8016cbc:	b002      	add	sp, #8
 8016cbe:	bd70      	pop	{r4, r5, r6, pc}

08016cc0 <rcl_guard_condition_get_default_options>:
 8016cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016cc2:	b087      	sub	sp, #28
 8016cc4:	4606      	mov	r6, r0
 8016cc6:	4668      	mov	r0, sp
 8016cc8:	f7f6 f892 	bl	800cdf0 <rcutils_get_default_allocator>
 8016ccc:	4b09      	ldr	r3, [pc, #36]	@ (8016cf4 <rcl_guard_condition_get_default_options+0x34>)
 8016cce:	46ee      	mov	lr, sp
 8016cd0:	469c      	mov	ip, r3
 8016cd2:	461d      	mov	r5, r3
 8016cd4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016cd8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016cde:	4634      	mov	r4, r6
 8016ce0:	f8de 7000 	ldr.w	r7, [lr]
 8016ce4:	f8cc 7000 	str.w	r7, [ip]
 8016ce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016cea:	4630      	mov	r0, r6
 8016cec:	6027      	str	r7, [r4, #0]
 8016cee:	b007      	add	sp, #28
 8016cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016cf2:	bf00      	nop
 8016cf4:	2000ad28 	.word	0x2000ad28

08016cf8 <rcl_trigger_guard_condition>:
 8016cf8:	b148      	cbz	r0, 8016d0e <rcl_trigger_guard_condition+0x16>
 8016cfa:	b508      	push	{r3, lr}
 8016cfc:	6843      	ldr	r3, [r0, #4]
 8016cfe:	b143      	cbz	r3, 8016d12 <rcl_trigger_guard_condition+0x1a>
 8016d00:	6818      	ldr	r0, [r3, #0]
 8016d02:	f000 f909 	bl	8016f18 <rmw_trigger_guard_condition>
 8016d06:	3800      	subs	r0, #0
 8016d08:	bf18      	it	ne
 8016d0a:	2001      	movne	r0, #1
 8016d0c:	bd08      	pop	{r3, pc}
 8016d0e:	200b      	movs	r0, #11
 8016d10:	4770      	bx	lr
 8016d12:	200b      	movs	r0, #11
 8016d14:	bd08      	pop	{r3, pc}
 8016d16:	bf00      	nop

08016d18 <rcl_guard_condition_get_rmw_handle>:
 8016d18:	b110      	cbz	r0, 8016d20 <rcl_guard_condition_get_rmw_handle+0x8>
 8016d1a:	6840      	ldr	r0, [r0, #4]
 8016d1c:	b100      	cbz	r0, 8016d20 <rcl_guard_condition_get_rmw_handle+0x8>
 8016d1e:	6800      	ldr	r0, [r0, #0]
 8016d20:	4770      	bx	lr
 8016d22:	bf00      	nop

08016d24 <rcl_validate_topic_name>:
 8016d24:	2800      	cmp	r0, #0
 8016d26:	d07a      	beq.n	8016e1e <rcl_validate_topic_name+0xfa>
 8016d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d2c:	460e      	mov	r6, r1
 8016d2e:	2900      	cmp	r1, #0
 8016d30:	d07c      	beq.n	8016e2c <rcl_validate_topic_name+0x108>
 8016d32:	4617      	mov	r7, r2
 8016d34:	4605      	mov	r5, r0
 8016d36:	f7e9 fa7d 	bl	8000234 <strlen>
 8016d3a:	b1b0      	cbz	r0, 8016d6a <rcl_validate_topic_name+0x46>
 8016d3c:	f895 9000 	ldrb.w	r9, [r5]
 8016d40:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8016ec4 <rcl_validate_topic_name+0x1a0>
 8016d44:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8016d48:	f013 0304 	ands.w	r3, r3, #4
 8016d4c:	d169      	bne.n	8016e22 <rcl_validate_topic_name+0xfe>
 8016d4e:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 8016d52:	f815 2008 	ldrb.w	r2, [r5, r8]
 8016d56:	2a2f      	cmp	r2, #47	@ 0x2f
 8016d58:	d10e      	bne.n	8016d78 <rcl_validate_topic_name+0x54>
 8016d5a:	2202      	movs	r2, #2
 8016d5c:	6032      	str	r2, [r6, #0]
 8016d5e:	b36f      	cbz	r7, 8016dbc <rcl_validate_topic_name+0x98>
 8016d60:	f8c7 8000 	str.w	r8, [r7]
 8016d64:	4618      	mov	r0, r3
 8016d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d6a:	2301      	movs	r3, #1
 8016d6c:	6033      	str	r3, [r6, #0]
 8016d6e:	b32f      	cbz	r7, 8016dbc <rcl_validate_topic_name+0x98>
 8016d70:	2000      	movs	r0, #0
 8016d72:	6038      	str	r0, [r7, #0]
 8016d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d78:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8016d7c:	461c      	mov	r4, r3
 8016d7e:	4619      	mov	r1, r3
 8016d80:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8016d84:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8016d88:	f1be 0f09 	cmp.w	lr, #9
 8016d8c:	d919      	bls.n	8016dc2 <rcl_validate_topic_name+0x9e>
 8016d8e:	f022 0e20 	bic.w	lr, r2, #32
 8016d92:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8016d96:	f1be 0f19 	cmp.w	lr, #25
 8016d9a:	d912      	bls.n	8016dc2 <rcl_validate_topic_name+0x9e>
 8016d9c:	2a5f      	cmp	r2, #95	@ 0x5f
 8016d9e:	d019      	beq.n	8016dd4 <rcl_validate_topic_name+0xb0>
 8016da0:	2a2f      	cmp	r2, #47	@ 0x2f
 8016da2:	d051      	beq.n	8016e48 <rcl_validate_topic_name+0x124>
 8016da4:	2a7e      	cmp	r2, #126	@ 0x7e
 8016da6:	d048      	beq.n	8016e3a <rcl_validate_topic_name+0x116>
 8016da8:	2a7b      	cmp	r2, #123	@ 0x7b
 8016daa:	d054      	beq.n	8016e56 <rcl_validate_topic_name+0x132>
 8016dac:	2a7d      	cmp	r2, #125	@ 0x7d
 8016dae:	d161      	bne.n	8016e74 <rcl_validate_topic_name+0x150>
 8016db0:	2c00      	cmp	r4, #0
 8016db2:	d155      	bne.n	8016e60 <rcl_validate_topic_name+0x13c>
 8016db4:	2305      	movs	r3, #5
 8016db6:	6033      	str	r3, [r6, #0]
 8016db8:	b107      	cbz	r7, 8016dbc <rcl_validate_topic_name+0x98>
 8016dba:	6039      	str	r1, [r7, #0]
 8016dbc:	2000      	movs	r0, #0
 8016dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016dc2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016dc6:	0752      	lsls	r2, r2, #29
 8016dc8:	d504      	bpl.n	8016dd4 <rcl_validate_topic_name+0xb0>
 8016dca:	b11c      	cbz	r4, 8016dd4 <rcl_validate_topic_name+0xb0>
 8016dcc:	b111      	cbz	r1, 8016dd4 <rcl_validate_topic_name+0xb0>
 8016dce:	1e4a      	subs	r2, r1, #1
 8016dd0:	429a      	cmp	r2, r3
 8016dd2:	d02d      	beq.n	8016e30 <rcl_validate_topic_name+0x10c>
 8016dd4:	3101      	adds	r1, #1
 8016dd6:	4288      	cmp	r0, r1
 8016dd8:	d1d2      	bne.n	8016d80 <rcl_validate_topic_name+0x5c>
 8016dda:	2c00      	cmp	r4, #0
 8016ddc:	d145      	bne.n	8016e6a <rcl_validate_topic_name+0x146>
 8016dde:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8016de2:	d04f      	beq.n	8016e84 <rcl_validate_topic_name+0x160>
 8016de4:	4620      	mov	r0, r4
 8016de6:	2301      	movs	r3, #1
 8016de8:	e006      	b.n	8016df8 <rcl_validate_topic_name+0xd4>
 8016dea:	428b      	cmp	r3, r1
 8016dec:	f105 0501 	add.w	r5, r5, #1
 8016df0:	f103 0201 	add.w	r2, r3, #1
 8016df4:	d236      	bcs.n	8016e64 <rcl_validate_topic_name+0x140>
 8016df6:	4613      	mov	r3, r2
 8016df8:	4580      	cmp	r8, r0
 8016dfa:	f100 0001 	add.w	r0, r0, #1
 8016dfe:	d0f4      	beq.n	8016dea <rcl_validate_topic_name+0xc6>
 8016e00:	782a      	ldrb	r2, [r5, #0]
 8016e02:	2a2f      	cmp	r2, #47	@ 0x2f
 8016e04:	d1f1      	bne.n	8016dea <rcl_validate_topic_name+0xc6>
 8016e06:	786a      	ldrb	r2, [r5, #1]
 8016e08:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016e0c:	0754      	lsls	r4, r2, #29
 8016e0e:	d5ec      	bpl.n	8016dea <rcl_validate_topic_name+0xc6>
 8016e10:	2204      	movs	r2, #4
 8016e12:	6032      	str	r2, [r6, #0]
 8016e14:	2f00      	cmp	r7, #0
 8016e16:	d0d1      	beq.n	8016dbc <rcl_validate_topic_name+0x98>
 8016e18:	603b      	str	r3, [r7, #0]
 8016e1a:	2000      	movs	r0, #0
 8016e1c:	e7aa      	b.n	8016d74 <rcl_validate_topic_name+0x50>
 8016e1e:	200b      	movs	r0, #11
 8016e20:	4770      	bx	lr
 8016e22:	2304      	movs	r3, #4
 8016e24:	6033      	str	r3, [r6, #0]
 8016e26:	2f00      	cmp	r7, #0
 8016e28:	d1a2      	bne.n	8016d70 <rcl_validate_topic_name+0x4c>
 8016e2a:	e7c7      	b.n	8016dbc <rcl_validate_topic_name+0x98>
 8016e2c:	200b      	movs	r0, #11
 8016e2e:	e7a1      	b.n	8016d74 <rcl_validate_topic_name+0x50>
 8016e30:	2309      	movs	r3, #9
 8016e32:	6033      	str	r3, [r6, #0]
 8016e34:	2f00      	cmp	r7, #0
 8016e36:	d1c0      	bne.n	8016dba <rcl_validate_topic_name+0x96>
 8016e38:	e7c0      	b.n	8016dbc <rcl_validate_topic_name+0x98>
 8016e3a:	2900      	cmp	r1, #0
 8016e3c:	d0ca      	beq.n	8016dd4 <rcl_validate_topic_name+0xb0>
 8016e3e:	2306      	movs	r3, #6
 8016e40:	6033      	str	r3, [r6, #0]
 8016e42:	2f00      	cmp	r7, #0
 8016e44:	d1b9      	bne.n	8016dba <rcl_validate_topic_name+0x96>
 8016e46:	e7b9      	b.n	8016dbc <rcl_validate_topic_name+0x98>
 8016e48:	2c00      	cmp	r4, #0
 8016e4a:	d0c3      	beq.n	8016dd4 <rcl_validate_topic_name+0xb0>
 8016e4c:	2308      	movs	r3, #8
 8016e4e:	6033      	str	r3, [r6, #0]
 8016e50:	2f00      	cmp	r7, #0
 8016e52:	d1b2      	bne.n	8016dba <rcl_validate_topic_name+0x96>
 8016e54:	e7b2      	b.n	8016dbc <rcl_validate_topic_name+0x98>
 8016e56:	2c00      	cmp	r4, #0
 8016e58:	d1f8      	bne.n	8016e4c <rcl_validate_topic_name+0x128>
 8016e5a:	460b      	mov	r3, r1
 8016e5c:	2401      	movs	r4, #1
 8016e5e:	e7b9      	b.n	8016dd4 <rcl_validate_topic_name+0xb0>
 8016e60:	2400      	movs	r4, #0
 8016e62:	e7b7      	b.n	8016dd4 <rcl_validate_topic_name+0xb0>
 8016e64:	2000      	movs	r0, #0
 8016e66:	6030      	str	r0, [r6, #0]
 8016e68:	e784      	b.n	8016d74 <rcl_validate_topic_name+0x50>
 8016e6a:	2205      	movs	r2, #5
 8016e6c:	6032      	str	r2, [r6, #0]
 8016e6e:	2f00      	cmp	r7, #0
 8016e70:	d1d2      	bne.n	8016e18 <rcl_validate_topic_name+0xf4>
 8016e72:	e7a3      	b.n	8016dbc <rcl_validate_topic_name+0x98>
 8016e74:	2c00      	cmp	r4, #0
 8016e76:	bf14      	ite	ne
 8016e78:	2308      	movne	r3, #8
 8016e7a:	2303      	moveq	r3, #3
 8016e7c:	6033      	str	r3, [r6, #0]
 8016e7e:	2f00      	cmp	r7, #0
 8016e80:	d19b      	bne.n	8016dba <rcl_validate_topic_name+0x96>
 8016e82:	e79b      	b.n	8016dbc <rcl_validate_topic_name+0x98>
 8016e84:	2301      	movs	r3, #1
 8016e86:	e00a      	b.n	8016e9e <rcl_validate_topic_name+0x17a>
 8016e88:	2c01      	cmp	r4, #1
 8016e8a:	d013      	beq.n	8016eb4 <rcl_validate_topic_name+0x190>
 8016e8c:	4299      	cmp	r1, r3
 8016e8e:	f104 0401 	add.w	r4, r4, #1
 8016e92:	f105 0501 	add.w	r5, r5, #1
 8016e96:	f103 0201 	add.w	r2, r3, #1
 8016e9a:	d9e3      	bls.n	8016e64 <rcl_validate_topic_name+0x140>
 8016e9c:	4613      	mov	r3, r2
 8016e9e:	45a0      	cmp	r8, r4
 8016ea0:	d0f4      	beq.n	8016e8c <rcl_validate_topic_name+0x168>
 8016ea2:	782a      	ldrb	r2, [r5, #0]
 8016ea4:	2a2f      	cmp	r2, #47	@ 0x2f
 8016ea6:	d1ef      	bne.n	8016e88 <rcl_validate_topic_name+0x164>
 8016ea8:	786a      	ldrb	r2, [r5, #1]
 8016eaa:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016eae:	0752      	lsls	r2, r2, #29
 8016eb0:	d5ec      	bpl.n	8016e8c <rcl_validate_topic_name+0x168>
 8016eb2:	e7ad      	b.n	8016e10 <rcl_validate_topic_name+0xec>
 8016eb4:	2307      	movs	r3, #7
 8016eb6:	6033      	str	r3, [r6, #0]
 8016eb8:	2f00      	cmp	r7, #0
 8016eba:	f43f af7f 	beq.w	8016dbc <rcl_validate_topic_name+0x98>
 8016ebe:	603c      	str	r4, [r7, #0]
 8016ec0:	2000      	movs	r0, #0
 8016ec2:	e757      	b.n	8016d74 <rcl_validate_topic_name+0x50>
 8016ec4:	080192c8 	.word	0x080192c8

08016ec8 <rmw_create_guard_condition>:
 8016ec8:	b538      	push	{r3, r4, r5, lr}
 8016eca:	4605      	mov	r5, r0
 8016ecc:	4807      	ldr	r0, [pc, #28]	@ (8016eec <rmw_create_guard_condition+0x24>)
 8016ece:	f7fe f963 	bl	8015198 <get_memory>
 8016ed2:	b148      	cbz	r0, 8016ee8 <rmw_create_guard_condition+0x20>
 8016ed4:	6884      	ldr	r4, [r0, #8]
 8016ed6:	2300      	movs	r3, #0
 8016ed8:	7423      	strb	r3, [r4, #16]
 8016eda:	61e5      	str	r5, [r4, #28]
 8016edc:	f7fe f9c4 	bl	8015268 <rmw_get_implementation_identifier>
 8016ee0:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8016ee4:	f104 0014 	add.w	r0, r4, #20
 8016ee8:	bd38      	pop	{r3, r4, r5, pc}
 8016eea:	bf00      	nop
 8016eec:	2000abc4 	.word	0x2000abc4

08016ef0 <rmw_destroy_guard_condition>:
 8016ef0:	b508      	push	{r3, lr}
 8016ef2:	4b08      	ldr	r3, [pc, #32]	@ (8016f14 <rmw_destroy_guard_condition+0x24>)
 8016ef4:	6819      	ldr	r1, [r3, #0]
 8016ef6:	b911      	cbnz	r1, 8016efe <rmw_destroy_guard_condition+0xe>
 8016ef8:	e00a      	b.n	8016f10 <rmw_destroy_guard_condition+0x20>
 8016efa:	6849      	ldr	r1, [r1, #4]
 8016efc:	b141      	cbz	r1, 8016f10 <rmw_destroy_guard_condition+0x20>
 8016efe:	688b      	ldr	r3, [r1, #8]
 8016f00:	3314      	adds	r3, #20
 8016f02:	4298      	cmp	r0, r3
 8016f04:	d1f9      	bne.n	8016efa <rmw_destroy_guard_condition+0xa>
 8016f06:	4803      	ldr	r0, [pc, #12]	@ (8016f14 <rmw_destroy_guard_condition+0x24>)
 8016f08:	f7fe f956 	bl	80151b8 <put_memory>
 8016f0c:	2000      	movs	r0, #0
 8016f0e:	bd08      	pop	{r3, pc}
 8016f10:	2001      	movs	r0, #1
 8016f12:	bd08      	pop	{r3, pc}
 8016f14:	2000abc4 	.word	0x2000abc4

08016f18 <rmw_trigger_guard_condition>:
 8016f18:	b160      	cbz	r0, 8016f34 <rmw_trigger_guard_condition+0x1c>
 8016f1a:	b510      	push	{r4, lr}
 8016f1c:	4604      	mov	r4, r0
 8016f1e:	6800      	ldr	r0, [r0, #0]
 8016f20:	f7f7 f980 	bl	800e224 <is_uxrce_rmw_identifier_valid>
 8016f24:	b908      	cbnz	r0, 8016f2a <rmw_trigger_guard_condition+0x12>
 8016f26:	2001      	movs	r0, #1
 8016f28:	bd10      	pop	{r4, pc}
 8016f2a:	6863      	ldr	r3, [r4, #4]
 8016f2c:	2201      	movs	r2, #1
 8016f2e:	741a      	strb	r2, [r3, #16]
 8016f30:	2000      	movs	r0, #0
 8016f32:	bd10      	pop	{r4, pc}
 8016f34:	2001      	movs	r0, #1
 8016f36:	4770      	bx	lr

08016f38 <calloc>:
 8016f38:	4b02      	ldr	r3, [pc, #8]	@ (8016f44 <calloc+0xc>)
 8016f3a:	460a      	mov	r2, r1
 8016f3c:	4601      	mov	r1, r0
 8016f3e:	6818      	ldr	r0, [r3, #0]
 8016f40:	f000 b802 	b.w	8016f48 <_calloc_r>
 8016f44:	200000fc 	.word	0x200000fc

08016f48 <_calloc_r>:
 8016f48:	b570      	push	{r4, r5, r6, lr}
 8016f4a:	fba1 5402 	umull	r5, r4, r1, r2
 8016f4e:	b93c      	cbnz	r4, 8016f60 <_calloc_r+0x18>
 8016f50:	4629      	mov	r1, r5
 8016f52:	f000 f887 	bl	8017064 <_malloc_r>
 8016f56:	4606      	mov	r6, r0
 8016f58:	b928      	cbnz	r0, 8016f66 <_calloc_r+0x1e>
 8016f5a:	2600      	movs	r6, #0
 8016f5c:	4630      	mov	r0, r6
 8016f5e:	bd70      	pop	{r4, r5, r6, pc}
 8016f60:	220c      	movs	r2, #12
 8016f62:	6002      	str	r2, [r0, #0]
 8016f64:	e7f9      	b.n	8016f5a <_calloc_r+0x12>
 8016f66:	462a      	mov	r2, r5
 8016f68:	4621      	mov	r1, r4
 8016f6a:	f000 fbcf 	bl	801770c <memset>
 8016f6e:	e7f5      	b.n	8016f5c <_calloc_r+0x14>

08016f70 <getenv>:
 8016f70:	b507      	push	{r0, r1, r2, lr}
 8016f72:	4b04      	ldr	r3, [pc, #16]	@ (8016f84 <getenv+0x14>)
 8016f74:	4601      	mov	r1, r0
 8016f76:	aa01      	add	r2, sp, #4
 8016f78:	6818      	ldr	r0, [r3, #0]
 8016f7a:	f000 f805 	bl	8016f88 <_findenv_r>
 8016f7e:	b003      	add	sp, #12
 8016f80:	f85d fb04 	ldr.w	pc, [sp], #4
 8016f84:	200000fc 	.word	0x200000fc

08016f88 <_findenv_r>:
 8016f88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f8c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8016ffc <_findenv_r+0x74>
 8016f90:	4606      	mov	r6, r0
 8016f92:	4689      	mov	r9, r1
 8016f94:	4617      	mov	r7, r2
 8016f96:	f000 fcaf 	bl	80178f8 <__env_lock>
 8016f9a:	f8da 4000 	ldr.w	r4, [sl]
 8016f9e:	b134      	cbz	r4, 8016fae <_findenv_r+0x26>
 8016fa0:	464b      	mov	r3, r9
 8016fa2:	4698      	mov	r8, r3
 8016fa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016fa8:	b13a      	cbz	r2, 8016fba <_findenv_r+0x32>
 8016faa:	2a3d      	cmp	r2, #61	@ 0x3d
 8016fac:	d1f9      	bne.n	8016fa2 <_findenv_r+0x1a>
 8016fae:	4630      	mov	r0, r6
 8016fb0:	f000 fca8 	bl	8017904 <__env_unlock>
 8016fb4:	2000      	movs	r0, #0
 8016fb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fba:	eba8 0809 	sub.w	r8, r8, r9
 8016fbe:	46a3      	mov	fp, r4
 8016fc0:	f854 0b04 	ldr.w	r0, [r4], #4
 8016fc4:	2800      	cmp	r0, #0
 8016fc6:	d0f2      	beq.n	8016fae <_findenv_r+0x26>
 8016fc8:	4642      	mov	r2, r8
 8016fca:	4649      	mov	r1, r9
 8016fcc:	f000 fbb3 	bl	8017736 <strncmp>
 8016fd0:	2800      	cmp	r0, #0
 8016fd2:	d1f4      	bne.n	8016fbe <_findenv_r+0x36>
 8016fd4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016fd8:	eb03 0508 	add.w	r5, r3, r8
 8016fdc:	f813 3008 	ldrb.w	r3, [r3, r8]
 8016fe0:	2b3d      	cmp	r3, #61	@ 0x3d
 8016fe2:	d1ec      	bne.n	8016fbe <_findenv_r+0x36>
 8016fe4:	f8da 3000 	ldr.w	r3, [sl]
 8016fe8:	ebab 0303 	sub.w	r3, fp, r3
 8016fec:	109b      	asrs	r3, r3, #2
 8016fee:	4630      	mov	r0, r6
 8016ff0:	603b      	str	r3, [r7, #0]
 8016ff2:	f000 fc87 	bl	8017904 <__env_unlock>
 8016ff6:	1c68      	adds	r0, r5, #1
 8016ff8:	e7dd      	b.n	8016fb6 <_findenv_r+0x2e>
 8016ffa:	bf00      	nop
 8016ffc:	20000000 	.word	0x20000000

08017000 <malloc>:
 8017000:	4b02      	ldr	r3, [pc, #8]	@ (801700c <malloc+0xc>)
 8017002:	4601      	mov	r1, r0
 8017004:	6818      	ldr	r0, [r3, #0]
 8017006:	f000 b82d 	b.w	8017064 <_malloc_r>
 801700a:	bf00      	nop
 801700c:	200000fc 	.word	0x200000fc

08017010 <free>:
 8017010:	4b02      	ldr	r3, [pc, #8]	@ (801701c <free+0xc>)
 8017012:	4601      	mov	r1, r0
 8017014:	6818      	ldr	r0, [r3, #0]
 8017016:	f000 bc7b 	b.w	8017910 <_free_r>
 801701a:	bf00      	nop
 801701c:	200000fc 	.word	0x200000fc

08017020 <sbrk_aligned>:
 8017020:	b570      	push	{r4, r5, r6, lr}
 8017022:	4e0f      	ldr	r6, [pc, #60]	@ (8017060 <sbrk_aligned+0x40>)
 8017024:	460c      	mov	r4, r1
 8017026:	6831      	ldr	r1, [r6, #0]
 8017028:	4605      	mov	r5, r0
 801702a:	b911      	cbnz	r1, 8017032 <sbrk_aligned+0x12>
 801702c:	f000 fbe0 	bl	80177f0 <_sbrk_r>
 8017030:	6030      	str	r0, [r6, #0]
 8017032:	4621      	mov	r1, r4
 8017034:	4628      	mov	r0, r5
 8017036:	f000 fbdb 	bl	80177f0 <_sbrk_r>
 801703a:	1c43      	adds	r3, r0, #1
 801703c:	d103      	bne.n	8017046 <sbrk_aligned+0x26>
 801703e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8017042:	4620      	mov	r0, r4
 8017044:	bd70      	pop	{r4, r5, r6, pc}
 8017046:	1cc4      	adds	r4, r0, #3
 8017048:	f024 0403 	bic.w	r4, r4, #3
 801704c:	42a0      	cmp	r0, r4
 801704e:	d0f8      	beq.n	8017042 <sbrk_aligned+0x22>
 8017050:	1a21      	subs	r1, r4, r0
 8017052:	4628      	mov	r0, r5
 8017054:	f000 fbcc 	bl	80177f0 <_sbrk_r>
 8017058:	3001      	adds	r0, #1
 801705a:	d1f2      	bne.n	8017042 <sbrk_aligned+0x22>
 801705c:	e7ef      	b.n	801703e <sbrk_aligned+0x1e>
 801705e:	bf00      	nop
 8017060:	2000ad3c 	.word	0x2000ad3c

08017064 <_malloc_r>:
 8017064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017068:	1ccd      	adds	r5, r1, #3
 801706a:	f025 0503 	bic.w	r5, r5, #3
 801706e:	3508      	adds	r5, #8
 8017070:	2d0c      	cmp	r5, #12
 8017072:	bf38      	it	cc
 8017074:	250c      	movcc	r5, #12
 8017076:	2d00      	cmp	r5, #0
 8017078:	4606      	mov	r6, r0
 801707a:	db01      	blt.n	8017080 <_malloc_r+0x1c>
 801707c:	42a9      	cmp	r1, r5
 801707e:	d904      	bls.n	801708a <_malloc_r+0x26>
 8017080:	230c      	movs	r3, #12
 8017082:	6033      	str	r3, [r6, #0]
 8017084:	2000      	movs	r0, #0
 8017086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801708a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017160 <_malloc_r+0xfc>
 801708e:	f000 f869 	bl	8017164 <__malloc_lock>
 8017092:	f8d8 3000 	ldr.w	r3, [r8]
 8017096:	461c      	mov	r4, r3
 8017098:	bb44      	cbnz	r4, 80170ec <_malloc_r+0x88>
 801709a:	4629      	mov	r1, r5
 801709c:	4630      	mov	r0, r6
 801709e:	f7ff ffbf 	bl	8017020 <sbrk_aligned>
 80170a2:	1c43      	adds	r3, r0, #1
 80170a4:	4604      	mov	r4, r0
 80170a6:	d158      	bne.n	801715a <_malloc_r+0xf6>
 80170a8:	f8d8 4000 	ldr.w	r4, [r8]
 80170ac:	4627      	mov	r7, r4
 80170ae:	2f00      	cmp	r7, #0
 80170b0:	d143      	bne.n	801713a <_malloc_r+0xd6>
 80170b2:	2c00      	cmp	r4, #0
 80170b4:	d04b      	beq.n	801714e <_malloc_r+0xea>
 80170b6:	6823      	ldr	r3, [r4, #0]
 80170b8:	4639      	mov	r1, r7
 80170ba:	4630      	mov	r0, r6
 80170bc:	eb04 0903 	add.w	r9, r4, r3
 80170c0:	f000 fb96 	bl	80177f0 <_sbrk_r>
 80170c4:	4581      	cmp	r9, r0
 80170c6:	d142      	bne.n	801714e <_malloc_r+0xea>
 80170c8:	6821      	ldr	r1, [r4, #0]
 80170ca:	1a6d      	subs	r5, r5, r1
 80170cc:	4629      	mov	r1, r5
 80170ce:	4630      	mov	r0, r6
 80170d0:	f7ff ffa6 	bl	8017020 <sbrk_aligned>
 80170d4:	3001      	adds	r0, #1
 80170d6:	d03a      	beq.n	801714e <_malloc_r+0xea>
 80170d8:	6823      	ldr	r3, [r4, #0]
 80170da:	442b      	add	r3, r5
 80170dc:	6023      	str	r3, [r4, #0]
 80170de:	f8d8 3000 	ldr.w	r3, [r8]
 80170e2:	685a      	ldr	r2, [r3, #4]
 80170e4:	bb62      	cbnz	r2, 8017140 <_malloc_r+0xdc>
 80170e6:	f8c8 7000 	str.w	r7, [r8]
 80170ea:	e00f      	b.n	801710c <_malloc_r+0xa8>
 80170ec:	6822      	ldr	r2, [r4, #0]
 80170ee:	1b52      	subs	r2, r2, r5
 80170f0:	d420      	bmi.n	8017134 <_malloc_r+0xd0>
 80170f2:	2a0b      	cmp	r2, #11
 80170f4:	d917      	bls.n	8017126 <_malloc_r+0xc2>
 80170f6:	1961      	adds	r1, r4, r5
 80170f8:	42a3      	cmp	r3, r4
 80170fa:	6025      	str	r5, [r4, #0]
 80170fc:	bf18      	it	ne
 80170fe:	6059      	strne	r1, [r3, #4]
 8017100:	6863      	ldr	r3, [r4, #4]
 8017102:	bf08      	it	eq
 8017104:	f8c8 1000 	streq.w	r1, [r8]
 8017108:	5162      	str	r2, [r4, r5]
 801710a:	604b      	str	r3, [r1, #4]
 801710c:	4630      	mov	r0, r6
 801710e:	f000 f82f 	bl	8017170 <__malloc_unlock>
 8017112:	f104 000b 	add.w	r0, r4, #11
 8017116:	1d23      	adds	r3, r4, #4
 8017118:	f020 0007 	bic.w	r0, r0, #7
 801711c:	1ac2      	subs	r2, r0, r3
 801711e:	bf1c      	itt	ne
 8017120:	1a1b      	subne	r3, r3, r0
 8017122:	50a3      	strne	r3, [r4, r2]
 8017124:	e7af      	b.n	8017086 <_malloc_r+0x22>
 8017126:	6862      	ldr	r2, [r4, #4]
 8017128:	42a3      	cmp	r3, r4
 801712a:	bf0c      	ite	eq
 801712c:	f8c8 2000 	streq.w	r2, [r8]
 8017130:	605a      	strne	r2, [r3, #4]
 8017132:	e7eb      	b.n	801710c <_malloc_r+0xa8>
 8017134:	4623      	mov	r3, r4
 8017136:	6864      	ldr	r4, [r4, #4]
 8017138:	e7ae      	b.n	8017098 <_malloc_r+0x34>
 801713a:	463c      	mov	r4, r7
 801713c:	687f      	ldr	r7, [r7, #4]
 801713e:	e7b6      	b.n	80170ae <_malloc_r+0x4a>
 8017140:	461a      	mov	r2, r3
 8017142:	685b      	ldr	r3, [r3, #4]
 8017144:	42a3      	cmp	r3, r4
 8017146:	d1fb      	bne.n	8017140 <_malloc_r+0xdc>
 8017148:	2300      	movs	r3, #0
 801714a:	6053      	str	r3, [r2, #4]
 801714c:	e7de      	b.n	801710c <_malloc_r+0xa8>
 801714e:	230c      	movs	r3, #12
 8017150:	6033      	str	r3, [r6, #0]
 8017152:	4630      	mov	r0, r6
 8017154:	f000 f80c 	bl	8017170 <__malloc_unlock>
 8017158:	e794      	b.n	8017084 <_malloc_r+0x20>
 801715a:	6005      	str	r5, [r0, #0]
 801715c:	e7d6      	b.n	801710c <_malloc_r+0xa8>
 801715e:	bf00      	nop
 8017160:	2000ad40 	.word	0x2000ad40

08017164 <__malloc_lock>:
 8017164:	4801      	ldr	r0, [pc, #4]	@ (801716c <__malloc_lock+0x8>)
 8017166:	f000 bb90 	b.w	801788a <__retarget_lock_acquire_recursive>
 801716a:	bf00      	nop
 801716c:	2000ae85 	.word	0x2000ae85

08017170 <__malloc_unlock>:
 8017170:	4801      	ldr	r0, [pc, #4]	@ (8017178 <__malloc_unlock+0x8>)
 8017172:	f000 bb8b 	b.w	801788c <__retarget_lock_release_recursive>
 8017176:	bf00      	nop
 8017178:	2000ae85 	.word	0x2000ae85

0801717c <srand>:
 801717c:	b538      	push	{r3, r4, r5, lr}
 801717e:	4b10      	ldr	r3, [pc, #64]	@ (80171c0 <srand+0x44>)
 8017180:	681d      	ldr	r5, [r3, #0]
 8017182:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017184:	4604      	mov	r4, r0
 8017186:	b9b3      	cbnz	r3, 80171b6 <srand+0x3a>
 8017188:	2018      	movs	r0, #24
 801718a:	f7ff ff39 	bl	8017000 <malloc>
 801718e:	4602      	mov	r2, r0
 8017190:	6328      	str	r0, [r5, #48]	@ 0x30
 8017192:	b920      	cbnz	r0, 801719e <srand+0x22>
 8017194:	4b0b      	ldr	r3, [pc, #44]	@ (80171c4 <srand+0x48>)
 8017196:	480c      	ldr	r0, [pc, #48]	@ (80171c8 <srand+0x4c>)
 8017198:	2146      	movs	r1, #70	@ 0x46
 801719a:	f000 fb8f 	bl	80178bc <__assert_func>
 801719e:	490b      	ldr	r1, [pc, #44]	@ (80171cc <srand+0x50>)
 80171a0:	4b0b      	ldr	r3, [pc, #44]	@ (80171d0 <srand+0x54>)
 80171a2:	e9c0 1300 	strd	r1, r3, [r0]
 80171a6:	4b0b      	ldr	r3, [pc, #44]	@ (80171d4 <srand+0x58>)
 80171a8:	6083      	str	r3, [r0, #8]
 80171aa:	230b      	movs	r3, #11
 80171ac:	8183      	strh	r3, [r0, #12]
 80171ae:	2100      	movs	r1, #0
 80171b0:	2001      	movs	r0, #1
 80171b2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80171b6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80171b8:	2200      	movs	r2, #0
 80171ba:	611c      	str	r4, [r3, #16]
 80171bc:	615a      	str	r2, [r3, #20]
 80171be:	bd38      	pop	{r3, r4, r5, pc}
 80171c0:	200000fc 	.word	0x200000fc
 80171c4:	08019258 	.word	0x08019258
 80171c8:	0801926f 	.word	0x0801926f
 80171cc:	abcd330e 	.word	0xabcd330e
 80171d0:	e66d1234 	.word	0xe66d1234
 80171d4:	0005deec 	.word	0x0005deec

080171d8 <rand>:
 80171d8:	4b16      	ldr	r3, [pc, #88]	@ (8017234 <rand+0x5c>)
 80171da:	b510      	push	{r4, lr}
 80171dc:	681c      	ldr	r4, [r3, #0]
 80171de:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80171e0:	b9b3      	cbnz	r3, 8017210 <rand+0x38>
 80171e2:	2018      	movs	r0, #24
 80171e4:	f7ff ff0c 	bl	8017000 <malloc>
 80171e8:	4602      	mov	r2, r0
 80171ea:	6320      	str	r0, [r4, #48]	@ 0x30
 80171ec:	b920      	cbnz	r0, 80171f8 <rand+0x20>
 80171ee:	4b12      	ldr	r3, [pc, #72]	@ (8017238 <rand+0x60>)
 80171f0:	4812      	ldr	r0, [pc, #72]	@ (801723c <rand+0x64>)
 80171f2:	2152      	movs	r1, #82	@ 0x52
 80171f4:	f000 fb62 	bl	80178bc <__assert_func>
 80171f8:	4911      	ldr	r1, [pc, #68]	@ (8017240 <rand+0x68>)
 80171fa:	4b12      	ldr	r3, [pc, #72]	@ (8017244 <rand+0x6c>)
 80171fc:	e9c0 1300 	strd	r1, r3, [r0]
 8017200:	4b11      	ldr	r3, [pc, #68]	@ (8017248 <rand+0x70>)
 8017202:	6083      	str	r3, [r0, #8]
 8017204:	230b      	movs	r3, #11
 8017206:	8183      	strh	r3, [r0, #12]
 8017208:	2100      	movs	r1, #0
 801720a:	2001      	movs	r0, #1
 801720c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017210:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017212:	480e      	ldr	r0, [pc, #56]	@ (801724c <rand+0x74>)
 8017214:	690b      	ldr	r3, [r1, #16]
 8017216:	694c      	ldr	r4, [r1, #20]
 8017218:	4a0d      	ldr	r2, [pc, #52]	@ (8017250 <rand+0x78>)
 801721a:	4358      	muls	r0, r3
 801721c:	fb02 0004 	mla	r0, r2, r4, r0
 8017220:	fba3 3202 	umull	r3, r2, r3, r2
 8017224:	3301      	adds	r3, #1
 8017226:	eb40 0002 	adc.w	r0, r0, r2
 801722a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801722e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8017232:	bd10      	pop	{r4, pc}
 8017234:	200000fc 	.word	0x200000fc
 8017238:	08019258 	.word	0x08019258
 801723c:	0801926f 	.word	0x0801926f
 8017240:	abcd330e 	.word	0xabcd330e
 8017244:	e66d1234 	.word	0xe66d1234
 8017248:	0005deec 	.word	0x0005deec
 801724c:	5851f42d 	.word	0x5851f42d
 8017250:	4c957f2d 	.word	0x4c957f2d

08017254 <realloc>:
 8017254:	4b02      	ldr	r3, [pc, #8]	@ (8017260 <realloc+0xc>)
 8017256:	460a      	mov	r2, r1
 8017258:	4601      	mov	r1, r0
 801725a:	6818      	ldr	r0, [r3, #0]
 801725c:	f000 b802 	b.w	8017264 <_realloc_r>
 8017260:	200000fc 	.word	0x200000fc

08017264 <_realloc_r>:
 8017264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017268:	4680      	mov	r8, r0
 801726a:	4615      	mov	r5, r2
 801726c:	460c      	mov	r4, r1
 801726e:	b921      	cbnz	r1, 801727a <_realloc_r+0x16>
 8017270:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017274:	4611      	mov	r1, r2
 8017276:	f7ff bef5 	b.w	8017064 <_malloc_r>
 801727a:	b92a      	cbnz	r2, 8017288 <_realloc_r+0x24>
 801727c:	f000 fb48 	bl	8017910 <_free_r>
 8017280:	2400      	movs	r4, #0
 8017282:	4620      	mov	r0, r4
 8017284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017288:	f000 fb8c 	bl	80179a4 <_malloc_usable_size_r>
 801728c:	4285      	cmp	r5, r0
 801728e:	4606      	mov	r6, r0
 8017290:	d802      	bhi.n	8017298 <_realloc_r+0x34>
 8017292:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017296:	d8f4      	bhi.n	8017282 <_realloc_r+0x1e>
 8017298:	4629      	mov	r1, r5
 801729a:	4640      	mov	r0, r8
 801729c:	f7ff fee2 	bl	8017064 <_malloc_r>
 80172a0:	4607      	mov	r7, r0
 80172a2:	2800      	cmp	r0, #0
 80172a4:	d0ec      	beq.n	8017280 <_realloc_r+0x1c>
 80172a6:	42b5      	cmp	r5, r6
 80172a8:	462a      	mov	r2, r5
 80172aa:	4621      	mov	r1, r4
 80172ac:	bf28      	it	cs
 80172ae:	4632      	movcs	r2, r6
 80172b0:	f000 faf5 	bl	801789e <memcpy>
 80172b4:	4621      	mov	r1, r4
 80172b6:	4640      	mov	r0, r8
 80172b8:	f000 fb2a 	bl	8017910 <_free_r>
 80172bc:	463c      	mov	r4, r7
 80172be:	e7e0      	b.n	8017282 <_realloc_r+0x1e>

080172c0 <_strtoul_l.constprop.0>:
 80172c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80172c4:	4e34      	ldr	r6, [pc, #208]	@ (8017398 <_strtoul_l.constprop.0+0xd8>)
 80172c6:	4686      	mov	lr, r0
 80172c8:	460d      	mov	r5, r1
 80172ca:	4628      	mov	r0, r5
 80172cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80172d0:	5d37      	ldrb	r7, [r6, r4]
 80172d2:	f017 0708 	ands.w	r7, r7, #8
 80172d6:	d1f8      	bne.n	80172ca <_strtoul_l.constprop.0+0xa>
 80172d8:	2c2d      	cmp	r4, #45	@ 0x2d
 80172da:	d12f      	bne.n	801733c <_strtoul_l.constprop.0+0x7c>
 80172dc:	782c      	ldrb	r4, [r5, #0]
 80172de:	2701      	movs	r7, #1
 80172e0:	1c85      	adds	r5, r0, #2
 80172e2:	f033 0010 	bics.w	r0, r3, #16
 80172e6:	d109      	bne.n	80172fc <_strtoul_l.constprop.0+0x3c>
 80172e8:	2c30      	cmp	r4, #48	@ 0x30
 80172ea:	d12c      	bne.n	8017346 <_strtoul_l.constprop.0+0x86>
 80172ec:	7828      	ldrb	r0, [r5, #0]
 80172ee:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80172f2:	2858      	cmp	r0, #88	@ 0x58
 80172f4:	d127      	bne.n	8017346 <_strtoul_l.constprop.0+0x86>
 80172f6:	786c      	ldrb	r4, [r5, #1]
 80172f8:	2310      	movs	r3, #16
 80172fa:	3502      	adds	r5, #2
 80172fc:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8017300:	2600      	movs	r6, #0
 8017302:	fbb8 f8f3 	udiv	r8, r8, r3
 8017306:	fb03 f908 	mul.w	r9, r3, r8
 801730a:	ea6f 0909 	mvn.w	r9, r9
 801730e:	4630      	mov	r0, r6
 8017310:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8017314:	f1bc 0f09 	cmp.w	ip, #9
 8017318:	d81c      	bhi.n	8017354 <_strtoul_l.constprop.0+0x94>
 801731a:	4664      	mov	r4, ip
 801731c:	42a3      	cmp	r3, r4
 801731e:	dd2a      	ble.n	8017376 <_strtoul_l.constprop.0+0xb6>
 8017320:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8017324:	d007      	beq.n	8017336 <_strtoul_l.constprop.0+0x76>
 8017326:	4580      	cmp	r8, r0
 8017328:	d322      	bcc.n	8017370 <_strtoul_l.constprop.0+0xb0>
 801732a:	d101      	bne.n	8017330 <_strtoul_l.constprop.0+0x70>
 801732c:	45a1      	cmp	r9, r4
 801732e:	db1f      	blt.n	8017370 <_strtoul_l.constprop.0+0xb0>
 8017330:	fb00 4003 	mla	r0, r0, r3, r4
 8017334:	2601      	movs	r6, #1
 8017336:	f815 4b01 	ldrb.w	r4, [r5], #1
 801733a:	e7e9      	b.n	8017310 <_strtoul_l.constprop.0+0x50>
 801733c:	2c2b      	cmp	r4, #43	@ 0x2b
 801733e:	bf04      	itt	eq
 8017340:	782c      	ldrbeq	r4, [r5, #0]
 8017342:	1c85      	addeq	r5, r0, #2
 8017344:	e7cd      	b.n	80172e2 <_strtoul_l.constprop.0+0x22>
 8017346:	2b00      	cmp	r3, #0
 8017348:	d1d8      	bne.n	80172fc <_strtoul_l.constprop.0+0x3c>
 801734a:	2c30      	cmp	r4, #48	@ 0x30
 801734c:	bf0c      	ite	eq
 801734e:	2308      	moveq	r3, #8
 8017350:	230a      	movne	r3, #10
 8017352:	e7d3      	b.n	80172fc <_strtoul_l.constprop.0+0x3c>
 8017354:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8017358:	f1bc 0f19 	cmp.w	ip, #25
 801735c:	d801      	bhi.n	8017362 <_strtoul_l.constprop.0+0xa2>
 801735e:	3c37      	subs	r4, #55	@ 0x37
 8017360:	e7dc      	b.n	801731c <_strtoul_l.constprop.0+0x5c>
 8017362:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8017366:	f1bc 0f19 	cmp.w	ip, #25
 801736a:	d804      	bhi.n	8017376 <_strtoul_l.constprop.0+0xb6>
 801736c:	3c57      	subs	r4, #87	@ 0x57
 801736e:	e7d5      	b.n	801731c <_strtoul_l.constprop.0+0x5c>
 8017370:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8017374:	e7df      	b.n	8017336 <_strtoul_l.constprop.0+0x76>
 8017376:	1c73      	adds	r3, r6, #1
 8017378:	d106      	bne.n	8017388 <_strtoul_l.constprop.0+0xc8>
 801737a:	2322      	movs	r3, #34	@ 0x22
 801737c:	f8ce 3000 	str.w	r3, [lr]
 8017380:	4630      	mov	r0, r6
 8017382:	b932      	cbnz	r2, 8017392 <_strtoul_l.constprop.0+0xd2>
 8017384:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017388:	b107      	cbz	r7, 801738c <_strtoul_l.constprop.0+0xcc>
 801738a:	4240      	negs	r0, r0
 801738c:	2a00      	cmp	r2, #0
 801738e:	d0f9      	beq.n	8017384 <_strtoul_l.constprop.0+0xc4>
 8017390:	b106      	cbz	r6, 8017394 <_strtoul_l.constprop.0+0xd4>
 8017392:	1e69      	subs	r1, r5, #1
 8017394:	6011      	str	r1, [r2, #0]
 8017396:	e7f5      	b.n	8017384 <_strtoul_l.constprop.0+0xc4>
 8017398:	080192c8 	.word	0x080192c8

0801739c <strtoul>:
 801739c:	4613      	mov	r3, r2
 801739e:	460a      	mov	r2, r1
 80173a0:	4601      	mov	r1, r0
 80173a2:	4802      	ldr	r0, [pc, #8]	@ (80173ac <strtoul+0x10>)
 80173a4:	6800      	ldr	r0, [r0, #0]
 80173a6:	f7ff bf8b 	b.w	80172c0 <_strtoul_l.constprop.0>
 80173aa:	bf00      	nop
 80173ac:	200000fc 	.word	0x200000fc

080173b0 <std>:
 80173b0:	2300      	movs	r3, #0
 80173b2:	b510      	push	{r4, lr}
 80173b4:	4604      	mov	r4, r0
 80173b6:	e9c0 3300 	strd	r3, r3, [r0]
 80173ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80173be:	6083      	str	r3, [r0, #8]
 80173c0:	8181      	strh	r1, [r0, #12]
 80173c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80173c4:	81c2      	strh	r2, [r0, #14]
 80173c6:	6183      	str	r3, [r0, #24]
 80173c8:	4619      	mov	r1, r3
 80173ca:	2208      	movs	r2, #8
 80173cc:	305c      	adds	r0, #92	@ 0x5c
 80173ce:	f000 f99d 	bl	801770c <memset>
 80173d2:	4b0d      	ldr	r3, [pc, #52]	@ (8017408 <std+0x58>)
 80173d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80173d6:	4b0d      	ldr	r3, [pc, #52]	@ (801740c <std+0x5c>)
 80173d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80173da:	4b0d      	ldr	r3, [pc, #52]	@ (8017410 <std+0x60>)
 80173dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80173de:	4b0d      	ldr	r3, [pc, #52]	@ (8017414 <std+0x64>)
 80173e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80173e2:	4b0d      	ldr	r3, [pc, #52]	@ (8017418 <std+0x68>)
 80173e4:	6224      	str	r4, [r4, #32]
 80173e6:	429c      	cmp	r4, r3
 80173e8:	d006      	beq.n	80173f8 <std+0x48>
 80173ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80173ee:	4294      	cmp	r4, r2
 80173f0:	d002      	beq.n	80173f8 <std+0x48>
 80173f2:	33d0      	adds	r3, #208	@ 0xd0
 80173f4:	429c      	cmp	r4, r3
 80173f6:	d105      	bne.n	8017404 <std+0x54>
 80173f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80173fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017400:	f000 ba42 	b.w	8017888 <__retarget_lock_init_recursive>
 8017404:	bd10      	pop	{r4, pc}
 8017406:	bf00      	nop
 8017408:	080175c1 	.word	0x080175c1
 801740c:	080175e3 	.word	0x080175e3
 8017410:	0801761b 	.word	0x0801761b
 8017414:	0801763f 	.word	0x0801763f
 8017418:	2000ad44 	.word	0x2000ad44

0801741c <stdio_exit_handler>:
 801741c:	4a02      	ldr	r2, [pc, #8]	@ (8017428 <stdio_exit_handler+0xc>)
 801741e:	4903      	ldr	r1, [pc, #12]	@ (801742c <stdio_exit_handler+0x10>)
 8017420:	4803      	ldr	r0, [pc, #12]	@ (8017430 <stdio_exit_handler+0x14>)
 8017422:	f000 b869 	b.w	80174f8 <_fwalk_sglue>
 8017426:	bf00      	nop
 8017428:	200000f0 	.word	0x200000f0
 801742c:	0801830d 	.word	0x0801830d
 8017430:	20000100 	.word	0x20000100

08017434 <cleanup_stdio>:
 8017434:	6841      	ldr	r1, [r0, #4]
 8017436:	4b0c      	ldr	r3, [pc, #48]	@ (8017468 <cleanup_stdio+0x34>)
 8017438:	4299      	cmp	r1, r3
 801743a:	b510      	push	{r4, lr}
 801743c:	4604      	mov	r4, r0
 801743e:	d001      	beq.n	8017444 <cleanup_stdio+0x10>
 8017440:	f000 ff64 	bl	801830c <_fflush_r>
 8017444:	68a1      	ldr	r1, [r4, #8]
 8017446:	4b09      	ldr	r3, [pc, #36]	@ (801746c <cleanup_stdio+0x38>)
 8017448:	4299      	cmp	r1, r3
 801744a:	d002      	beq.n	8017452 <cleanup_stdio+0x1e>
 801744c:	4620      	mov	r0, r4
 801744e:	f000 ff5d 	bl	801830c <_fflush_r>
 8017452:	68e1      	ldr	r1, [r4, #12]
 8017454:	4b06      	ldr	r3, [pc, #24]	@ (8017470 <cleanup_stdio+0x3c>)
 8017456:	4299      	cmp	r1, r3
 8017458:	d004      	beq.n	8017464 <cleanup_stdio+0x30>
 801745a:	4620      	mov	r0, r4
 801745c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017460:	f000 bf54 	b.w	801830c <_fflush_r>
 8017464:	bd10      	pop	{r4, pc}
 8017466:	bf00      	nop
 8017468:	2000ad44 	.word	0x2000ad44
 801746c:	2000adac 	.word	0x2000adac
 8017470:	2000ae14 	.word	0x2000ae14

08017474 <global_stdio_init.part.0>:
 8017474:	b510      	push	{r4, lr}
 8017476:	4b0b      	ldr	r3, [pc, #44]	@ (80174a4 <global_stdio_init.part.0+0x30>)
 8017478:	4c0b      	ldr	r4, [pc, #44]	@ (80174a8 <global_stdio_init.part.0+0x34>)
 801747a:	4a0c      	ldr	r2, [pc, #48]	@ (80174ac <global_stdio_init.part.0+0x38>)
 801747c:	601a      	str	r2, [r3, #0]
 801747e:	4620      	mov	r0, r4
 8017480:	2200      	movs	r2, #0
 8017482:	2104      	movs	r1, #4
 8017484:	f7ff ff94 	bl	80173b0 <std>
 8017488:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801748c:	2201      	movs	r2, #1
 801748e:	2109      	movs	r1, #9
 8017490:	f7ff ff8e 	bl	80173b0 <std>
 8017494:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017498:	2202      	movs	r2, #2
 801749a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801749e:	2112      	movs	r1, #18
 80174a0:	f7ff bf86 	b.w	80173b0 <std>
 80174a4:	2000ae7c 	.word	0x2000ae7c
 80174a8:	2000ad44 	.word	0x2000ad44
 80174ac:	0801741d 	.word	0x0801741d

080174b0 <__sfp_lock_acquire>:
 80174b0:	4801      	ldr	r0, [pc, #4]	@ (80174b8 <__sfp_lock_acquire+0x8>)
 80174b2:	f000 b9ea 	b.w	801788a <__retarget_lock_acquire_recursive>
 80174b6:	bf00      	nop
 80174b8:	2000ae86 	.word	0x2000ae86

080174bc <__sfp_lock_release>:
 80174bc:	4801      	ldr	r0, [pc, #4]	@ (80174c4 <__sfp_lock_release+0x8>)
 80174be:	f000 b9e5 	b.w	801788c <__retarget_lock_release_recursive>
 80174c2:	bf00      	nop
 80174c4:	2000ae86 	.word	0x2000ae86

080174c8 <__sinit>:
 80174c8:	b510      	push	{r4, lr}
 80174ca:	4604      	mov	r4, r0
 80174cc:	f7ff fff0 	bl	80174b0 <__sfp_lock_acquire>
 80174d0:	6a23      	ldr	r3, [r4, #32]
 80174d2:	b11b      	cbz	r3, 80174dc <__sinit+0x14>
 80174d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80174d8:	f7ff bff0 	b.w	80174bc <__sfp_lock_release>
 80174dc:	4b04      	ldr	r3, [pc, #16]	@ (80174f0 <__sinit+0x28>)
 80174de:	6223      	str	r3, [r4, #32]
 80174e0:	4b04      	ldr	r3, [pc, #16]	@ (80174f4 <__sinit+0x2c>)
 80174e2:	681b      	ldr	r3, [r3, #0]
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d1f5      	bne.n	80174d4 <__sinit+0xc>
 80174e8:	f7ff ffc4 	bl	8017474 <global_stdio_init.part.0>
 80174ec:	e7f2      	b.n	80174d4 <__sinit+0xc>
 80174ee:	bf00      	nop
 80174f0:	08017435 	.word	0x08017435
 80174f4:	2000ae7c 	.word	0x2000ae7c

080174f8 <_fwalk_sglue>:
 80174f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80174fc:	4607      	mov	r7, r0
 80174fe:	4688      	mov	r8, r1
 8017500:	4614      	mov	r4, r2
 8017502:	2600      	movs	r6, #0
 8017504:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017508:	f1b9 0901 	subs.w	r9, r9, #1
 801750c:	d505      	bpl.n	801751a <_fwalk_sglue+0x22>
 801750e:	6824      	ldr	r4, [r4, #0]
 8017510:	2c00      	cmp	r4, #0
 8017512:	d1f7      	bne.n	8017504 <_fwalk_sglue+0xc>
 8017514:	4630      	mov	r0, r6
 8017516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801751a:	89ab      	ldrh	r3, [r5, #12]
 801751c:	2b01      	cmp	r3, #1
 801751e:	d907      	bls.n	8017530 <_fwalk_sglue+0x38>
 8017520:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017524:	3301      	adds	r3, #1
 8017526:	d003      	beq.n	8017530 <_fwalk_sglue+0x38>
 8017528:	4629      	mov	r1, r5
 801752a:	4638      	mov	r0, r7
 801752c:	47c0      	blx	r8
 801752e:	4306      	orrs	r6, r0
 8017530:	3568      	adds	r5, #104	@ 0x68
 8017532:	e7e9      	b.n	8017508 <_fwalk_sglue+0x10>

08017534 <iprintf>:
 8017534:	b40f      	push	{r0, r1, r2, r3}
 8017536:	b507      	push	{r0, r1, r2, lr}
 8017538:	4906      	ldr	r1, [pc, #24]	@ (8017554 <iprintf+0x20>)
 801753a:	ab04      	add	r3, sp, #16
 801753c:	6808      	ldr	r0, [r1, #0]
 801753e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017542:	6881      	ldr	r1, [r0, #8]
 8017544:	9301      	str	r3, [sp, #4]
 8017546:	f000 fbb7 	bl	8017cb8 <_vfiprintf_r>
 801754a:	b003      	add	sp, #12
 801754c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017550:	b004      	add	sp, #16
 8017552:	4770      	bx	lr
 8017554:	200000fc 	.word	0x200000fc

08017558 <sniprintf>:
 8017558:	b40c      	push	{r2, r3}
 801755a:	b530      	push	{r4, r5, lr}
 801755c:	4b17      	ldr	r3, [pc, #92]	@ (80175bc <sniprintf+0x64>)
 801755e:	1e0c      	subs	r4, r1, #0
 8017560:	681d      	ldr	r5, [r3, #0]
 8017562:	b09d      	sub	sp, #116	@ 0x74
 8017564:	da08      	bge.n	8017578 <sniprintf+0x20>
 8017566:	238b      	movs	r3, #139	@ 0x8b
 8017568:	602b      	str	r3, [r5, #0]
 801756a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801756e:	b01d      	add	sp, #116	@ 0x74
 8017570:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017574:	b002      	add	sp, #8
 8017576:	4770      	bx	lr
 8017578:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801757c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017580:	bf14      	ite	ne
 8017582:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8017586:	4623      	moveq	r3, r4
 8017588:	9304      	str	r3, [sp, #16]
 801758a:	9307      	str	r3, [sp, #28]
 801758c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017590:	9002      	str	r0, [sp, #8]
 8017592:	9006      	str	r0, [sp, #24]
 8017594:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017598:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801759a:	ab21      	add	r3, sp, #132	@ 0x84
 801759c:	a902      	add	r1, sp, #8
 801759e:	4628      	mov	r0, r5
 80175a0:	9301      	str	r3, [sp, #4]
 80175a2:	f000 fa63 	bl	8017a6c <_svfiprintf_r>
 80175a6:	1c43      	adds	r3, r0, #1
 80175a8:	bfbc      	itt	lt
 80175aa:	238b      	movlt	r3, #139	@ 0x8b
 80175ac:	602b      	strlt	r3, [r5, #0]
 80175ae:	2c00      	cmp	r4, #0
 80175b0:	d0dd      	beq.n	801756e <sniprintf+0x16>
 80175b2:	9b02      	ldr	r3, [sp, #8]
 80175b4:	2200      	movs	r2, #0
 80175b6:	701a      	strb	r2, [r3, #0]
 80175b8:	e7d9      	b.n	801756e <sniprintf+0x16>
 80175ba:	bf00      	nop
 80175bc:	200000fc 	.word	0x200000fc

080175c0 <__sread>:
 80175c0:	b510      	push	{r4, lr}
 80175c2:	460c      	mov	r4, r1
 80175c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80175c8:	f000 f900 	bl	80177cc <_read_r>
 80175cc:	2800      	cmp	r0, #0
 80175ce:	bfab      	itete	ge
 80175d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80175d2:	89a3      	ldrhlt	r3, [r4, #12]
 80175d4:	181b      	addge	r3, r3, r0
 80175d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80175da:	bfac      	ite	ge
 80175dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80175de:	81a3      	strhlt	r3, [r4, #12]
 80175e0:	bd10      	pop	{r4, pc}

080175e2 <__swrite>:
 80175e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175e6:	461f      	mov	r7, r3
 80175e8:	898b      	ldrh	r3, [r1, #12]
 80175ea:	05db      	lsls	r3, r3, #23
 80175ec:	4605      	mov	r5, r0
 80175ee:	460c      	mov	r4, r1
 80175f0:	4616      	mov	r6, r2
 80175f2:	d505      	bpl.n	8017600 <__swrite+0x1e>
 80175f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80175f8:	2302      	movs	r3, #2
 80175fa:	2200      	movs	r2, #0
 80175fc:	f000 f8d4 	bl	80177a8 <_lseek_r>
 8017600:	89a3      	ldrh	r3, [r4, #12]
 8017602:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017606:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801760a:	81a3      	strh	r3, [r4, #12]
 801760c:	4632      	mov	r2, r6
 801760e:	463b      	mov	r3, r7
 8017610:	4628      	mov	r0, r5
 8017612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017616:	f000 b8fb 	b.w	8017810 <_write_r>

0801761a <__sseek>:
 801761a:	b510      	push	{r4, lr}
 801761c:	460c      	mov	r4, r1
 801761e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017622:	f000 f8c1 	bl	80177a8 <_lseek_r>
 8017626:	1c43      	adds	r3, r0, #1
 8017628:	89a3      	ldrh	r3, [r4, #12]
 801762a:	bf15      	itete	ne
 801762c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801762e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017632:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017636:	81a3      	strheq	r3, [r4, #12]
 8017638:	bf18      	it	ne
 801763a:	81a3      	strhne	r3, [r4, #12]
 801763c:	bd10      	pop	{r4, pc}

0801763e <__sclose>:
 801763e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017642:	f000 b8a1 	b.w	8017788 <_close_r>

08017646 <_vsniprintf_r>:
 8017646:	b530      	push	{r4, r5, lr}
 8017648:	4614      	mov	r4, r2
 801764a:	2c00      	cmp	r4, #0
 801764c:	b09b      	sub	sp, #108	@ 0x6c
 801764e:	4605      	mov	r5, r0
 8017650:	461a      	mov	r2, r3
 8017652:	da05      	bge.n	8017660 <_vsniprintf_r+0x1a>
 8017654:	238b      	movs	r3, #139	@ 0x8b
 8017656:	6003      	str	r3, [r0, #0]
 8017658:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801765c:	b01b      	add	sp, #108	@ 0x6c
 801765e:	bd30      	pop	{r4, r5, pc}
 8017660:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017664:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017668:	bf14      	ite	ne
 801766a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801766e:	4623      	moveq	r3, r4
 8017670:	9302      	str	r3, [sp, #8]
 8017672:	9305      	str	r3, [sp, #20]
 8017674:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017678:	9100      	str	r1, [sp, #0]
 801767a:	9104      	str	r1, [sp, #16]
 801767c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017680:	4669      	mov	r1, sp
 8017682:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017684:	f000 f9f2 	bl	8017a6c <_svfiprintf_r>
 8017688:	1c43      	adds	r3, r0, #1
 801768a:	bfbc      	itt	lt
 801768c:	238b      	movlt	r3, #139	@ 0x8b
 801768e:	602b      	strlt	r3, [r5, #0]
 8017690:	2c00      	cmp	r4, #0
 8017692:	d0e3      	beq.n	801765c <_vsniprintf_r+0x16>
 8017694:	9b00      	ldr	r3, [sp, #0]
 8017696:	2200      	movs	r2, #0
 8017698:	701a      	strb	r2, [r3, #0]
 801769a:	e7df      	b.n	801765c <_vsniprintf_r+0x16>

0801769c <vsniprintf>:
 801769c:	b507      	push	{r0, r1, r2, lr}
 801769e:	9300      	str	r3, [sp, #0]
 80176a0:	4613      	mov	r3, r2
 80176a2:	460a      	mov	r2, r1
 80176a4:	4601      	mov	r1, r0
 80176a6:	4803      	ldr	r0, [pc, #12]	@ (80176b4 <vsniprintf+0x18>)
 80176a8:	6800      	ldr	r0, [r0, #0]
 80176aa:	f7ff ffcc 	bl	8017646 <_vsniprintf_r>
 80176ae:	b003      	add	sp, #12
 80176b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80176b4:	200000fc 	.word	0x200000fc

080176b8 <memcmp>:
 80176b8:	b510      	push	{r4, lr}
 80176ba:	3901      	subs	r1, #1
 80176bc:	4402      	add	r2, r0
 80176be:	4290      	cmp	r0, r2
 80176c0:	d101      	bne.n	80176c6 <memcmp+0xe>
 80176c2:	2000      	movs	r0, #0
 80176c4:	e005      	b.n	80176d2 <memcmp+0x1a>
 80176c6:	7803      	ldrb	r3, [r0, #0]
 80176c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80176cc:	42a3      	cmp	r3, r4
 80176ce:	d001      	beq.n	80176d4 <memcmp+0x1c>
 80176d0:	1b18      	subs	r0, r3, r4
 80176d2:	bd10      	pop	{r4, pc}
 80176d4:	3001      	adds	r0, #1
 80176d6:	e7f2      	b.n	80176be <memcmp+0x6>

080176d8 <memmove>:
 80176d8:	4288      	cmp	r0, r1
 80176da:	b510      	push	{r4, lr}
 80176dc:	eb01 0402 	add.w	r4, r1, r2
 80176e0:	d902      	bls.n	80176e8 <memmove+0x10>
 80176e2:	4284      	cmp	r4, r0
 80176e4:	4623      	mov	r3, r4
 80176e6:	d807      	bhi.n	80176f8 <memmove+0x20>
 80176e8:	1e43      	subs	r3, r0, #1
 80176ea:	42a1      	cmp	r1, r4
 80176ec:	d008      	beq.n	8017700 <memmove+0x28>
 80176ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80176f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80176f6:	e7f8      	b.n	80176ea <memmove+0x12>
 80176f8:	4402      	add	r2, r0
 80176fa:	4601      	mov	r1, r0
 80176fc:	428a      	cmp	r2, r1
 80176fe:	d100      	bne.n	8017702 <memmove+0x2a>
 8017700:	bd10      	pop	{r4, pc}
 8017702:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017706:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801770a:	e7f7      	b.n	80176fc <memmove+0x24>

0801770c <memset>:
 801770c:	4402      	add	r2, r0
 801770e:	4603      	mov	r3, r0
 8017710:	4293      	cmp	r3, r2
 8017712:	d100      	bne.n	8017716 <memset+0xa>
 8017714:	4770      	bx	lr
 8017716:	f803 1b01 	strb.w	r1, [r3], #1
 801771a:	e7f9      	b.n	8017710 <memset+0x4>

0801771c <strchr>:
 801771c:	b2c9      	uxtb	r1, r1
 801771e:	4603      	mov	r3, r0
 8017720:	4618      	mov	r0, r3
 8017722:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017726:	b112      	cbz	r2, 801772e <strchr+0x12>
 8017728:	428a      	cmp	r2, r1
 801772a:	d1f9      	bne.n	8017720 <strchr+0x4>
 801772c:	4770      	bx	lr
 801772e:	2900      	cmp	r1, #0
 8017730:	bf18      	it	ne
 8017732:	2000      	movne	r0, #0
 8017734:	4770      	bx	lr

08017736 <strncmp>:
 8017736:	b510      	push	{r4, lr}
 8017738:	b16a      	cbz	r2, 8017756 <strncmp+0x20>
 801773a:	3901      	subs	r1, #1
 801773c:	1884      	adds	r4, r0, r2
 801773e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017742:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017746:	429a      	cmp	r2, r3
 8017748:	d103      	bne.n	8017752 <strncmp+0x1c>
 801774a:	42a0      	cmp	r0, r4
 801774c:	d001      	beq.n	8017752 <strncmp+0x1c>
 801774e:	2a00      	cmp	r2, #0
 8017750:	d1f5      	bne.n	801773e <strncmp+0x8>
 8017752:	1ad0      	subs	r0, r2, r3
 8017754:	bd10      	pop	{r4, pc}
 8017756:	4610      	mov	r0, r2
 8017758:	e7fc      	b.n	8017754 <strncmp+0x1e>

0801775a <strstr>:
 801775a:	780a      	ldrb	r2, [r1, #0]
 801775c:	b570      	push	{r4, r5, r6, lr}
 801775e:	b96a      	cbnz	r2, 801777c <strstr+0x22>
 8017760:	bd70      	pop	{r4, r5, r6, pc}
 8017762:	429a      	cmp	r2, r3
 8017764:	d109      	bne.n	801777a <strstr+0x20>
 8017766:	460c      	mov	r4, r1
 8017768:	4605      	mov	r5, r0
 801776a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801776e:	2b00      	cmp	r3, #0
 8017770:	d0f6      	beq.n	8017760 <strstr+0x6>
 8017772:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8017776:	429e      	cmp	r6, r3
 8017778:	d0f7      	beq.n	801776a <strstr+0x10>
 801777a:	3001      	adds	r0, #1
 801777c:	7803      	ldrb	r3, [r0, #0]
 801777e:	2b00      	cmp	r3, #0
 8017780:	d1ef      	bne.n	8017762 <strstr+0x8>
 8017782:	4618      	mov	r0, r3
 8017784:	e7ec      	b.n	8017760 <strstr+0x6>
	...

08017788 <_close_r>:
 8017788:	b538      	push	{r3, r4, r5, lr}
 801778a:	4d06      	ldr	r5, [pc, #24]	@ (80177a4 <_close_r+0x1c>)
 801778c:	2300      	movs	r3, #0
 801778e:	4604      	mov	r4, r0
 8017790:	4608      	mov	r0, r1
 8017792:	602b      	str	r3, [r5, #0]
 8017794:	f7ea fdaa 	bl	80022ec <_close>
 8017798:	1c43      	adds	r3, r0, #1
 801779a:	d102      	bne.n	80177a2 <_close_r+0x1a>
 801779c:	682b      	ldr	r3, [r5, #0]
 801779e:	b103      	cbz	r3, 80177a2 <_close_r+0x1a>
 80177a0:	6023      	str	r3, [r4, #0]
 80177a2:	bd38      	pop	{r3, r4, r5, pc}
 80177a4:	2000ae80 	.word	0x2000ae80

080177a8 <_lseek_r>:
 80177a8:	b538      	push	{r3, r4, r5, lr}
 80177aa:	4d07      	ldr	r5, [pc, #28]	@ (80177c8 <_lseek_r+0x20>)
 80177ac:	4604      	mov	r4, r0
 80177ae:	4608      	mov	r0, r1
 80177b0:	4611      	mov	r1, r2
 80177b2:	2200      	movs	r2, #0
 80177b4:	602a      	str	r2, [r5, #0]
 80177b6:	461a      	mov	r2, r3
 80177b8:	f7ea fdbf 	bl	800233a <_lseek>
 80177bc:	1c43      	adds	r3, r0, #1
 80177be:	d102      	bne.n	80177c6 <_lseek_r+0x1e>
 80177c0:	682b      	ldr	r3, [r5, #0]
 80177c2:	b103      	cbz	r3, 80177c6 <_lseek_r+0x1e>
 80177c4:	6023      	str	r3, [r4, #0]
 80177c6:	bd38      	pop	{r3, r4, r5, pc}
 80177c8:	2000ae80 	.word	0x2000ae80

080177cc <_read_r>:
 80177cc:	b538      	push	{r3, r4, r5, lr}
 80177ce:	4d07      	ldr	r5, [pc, #28]	@ (80177ec <_read_r+0x20>)
 80177d0:	4604      	mov	r4, r0
 80177d2:	4608      	mov	r0, r1
 80177d4:	4611      	mov	r1, r2
 80177d6:	2200      	movs	r2, #0
 80177d8:	602a      	str	r2, [r5, #0]
 80177da:	461a      	mov	r2, r3
 80177dc:	f7ea fd4d 	bl	800227a <_read>
 80177e0:	1c43      	adds	r3, r0, #1
 80177e2:	d102      	bne.n	80177ea <_read_r+0x1e>
 80177e4:	682b      	ldr	r3, [r5, #0]
 80177e6:	b103      	cbz	r3, 80177ea <_read_r+0x1e>
 80177e8:	6023      	str	r3, [r4, #0]
 80177ea:	bd38      	pop	{r3, r4, r5, pc}
 80177ec:	2000ae80 	.word	0x2000ae80

080177f0 <_sbrk_r>:
 80177f0:	b538      	push	{r3, r4, r5, lr}
 80177f2:	4d06      	ldr	r5, [pc, #24]	@ (801780c <_sbrk_r+0x1c>)
 80177f4:	2300      	movs	r3, #0
 80177f6:	4604      	mov	r4, r0
 80177f8:	4608      	mov	r0, r1
 80177fa:	602b      	str	r3, [r5, #0]
 80177fc:	f7ea fdaa 	bl	8002354 <_sbrk>
 8017800:	1c43      	adds	r3, r0, #1
 8017802:	d102      	bne.n	801780a <_sbrk_r+0x1a>
 8017804:	682b      	ldr	r3, [r5, #0]
 8017806:	b103      	cbz	r3, 801780a <_sbrk_r+0x1a>
 8017808:	6023      	str	r3, [r4, #0]
 801780a:	bd38      	pop	{r3, r4, r5, pc}
 801780c:	2000ae80 	.word	0x2000ae80

08017810 <_write_r>:
 8017810:	b538      	push	{r3, r4, r5, lr}
 8017812:	4d07      	ldr	r5, [pc, #28]	@ (8017830 <_write_r+0x20>)
 8017814:	4604      	mov	r4, r0
 8017816:	4608      	mov	r0, r1
 8017818:	4611      	mov	r1, r2
 801781a:	2200      	movs	r2, #0
 801781c:	602a      	str	r2, [r5, #0]
 801781e:	461a      	mov	r2, r3
 8017820:	f7ea fd48 	bl	80022b4 <_write>
 8017824:	1c43      	adds	r3, r0, #1
 8017826:	d102      	bne.n	801782e <_write_r+0x1e>
 8017828:	682b      	ldr	r3, [r5, #0]
 801782a:	b103      	cbz	r3, 801782e <_write_r+0x1e>
 801782c:	6023      	str	r3, [r4, #0]
 801782e:	bd38      	pop	{r3, r4, r5, pc}
 8017830:	2000ae80 	.word	0x2000ae80

08017834 <__errno>:
 8017834:	4b01      	ldr	r3, [pc, #4]	@ (801783c <__errno+0x8>)
 8017836:	6818      	ldr	r0, [r3, #0]
 8017838:	4770      	bx	lr
 801783a:	bf00      	nop
 801783c:	200000fc 	.word	0x200000fc

08017840 <__libc_init_array>:
 8017840:	b570      	push	{r4, r5, r6, lr}
 8017842:	4d0d      	ldr	r5, [pc, #52]	@ (8017878 <__libc_init_array+0x38>)
 8017844:	4c0d      	ldr	r4, [pc, #52]	@ (801787c <__libc_init_array+0x3c>)
 8017846:	1b64      	subs	r4, r4, r5
 8017848:	10a4      	asrs	r4, r4, #2
 801784a:	2600      	movs	r6, #0
 801784c:	42a6      	cmp	r6, r4
 801784e:	d109      	bne.n	8017864 <__libc_init_array+0x24>
 8017850:	4d0b      	ldr	r5, [pc, #44]	@ (8017880 <__libc_init_array+0x40>)
 8017852:	4c0c      	ldr	r4, [pc, #48]	@ (8017884 <__libc_init_array+0x44>)
 8017854:	f000 fef8 	bl	8018648 <_init>
 8017858:	1b64      	subs	r4, r4, r5
 801785a:	10a4      	asrs	r4, r4, #2
 801785c:	2600      	movs	r6, #0
 801785e:	42a6      	cmp	r6, r4
 8017860:	d105      	bne.n	801786e <__libc_init_array+0x2e>
 8017862:	bd70      	pop	{r4, r5, r6, pc}
 8017864:	f855 3b04 	ldr.w	r3, [r5], #4
 8017868:	4798      	blx	r3
 801786a:	3601      	adds	r6, #1
 801786c:	e7ee      	b.n	801784c <__libc_init_array+0xc>
 801786e:	f855 3b04 	ldr.w	r3, [r5], #4
 8017872:	4798      	blx	r3
 8017874:	3601      	adds	r6, #1
 8017876:	e7f2      	b.n	801785e <__libc_init_array+0x1e>
 8017878:	08019440 	.word	0x08019440
 801787c:	08019440 	.word	0x08019440
 8017880:	08019440 	.word	0x08019440
 8017884:	08019448 	.word	0x08019448

08017888 <__retarget_lock_init_recursive>:
 8017888:	4770      	bx	lr

0801788a <__retarget_lock_acquire_recursive>:
 801788a:	4770      	bx	lr

0801788c <__retarget_lock_release_recursive>:
 801788c:	4770      	bx	lr

0801788e <strcpy>:
 801788e:	4603      	mov	r3, r0
 8017890:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017894:	f803 2b01 	strb.w	r2, [r3], #1
 8017898:	2a00      	cmp	r2, #0
 801789a:	d1f9      	bne.n	8017890 <strcpy+0x2>
 801789c:	4770      	bx	lr

0801789e <memcpy>:
 801789e:	440a      	add	r2, r1
 80178a0:	4291      	cmp	r1, r2
 80178a2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80178a6:	d100      	bne.n	80178aa <memcpy+0xc>
 80178a8:	4770      	bx	lr
 80178aa:	b510      	push	{r4, lr}
 80178ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80178b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80178b4:	4291      	cmp	r1, r2
 80178b6:	d1f9      	bne.n	80178ac <memcpy+0xe>
 80178b8:	bd10      	pop	{r4, pc}
	...

080178bc <__assert_func>:
 80178bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80178be:	4614      	mov	r4, r2
 80178c0:	461a      	mov	r2, r3
 80178c2:	4b09      	ldr	r3, [pc, #36]	@ (80178e8 <__assert_func+0x2c>)
 80178c4:	681b      	ldr	r3, [r3, #0]
 80178c6:	4605      	mov	r5, r0
 80178c8:	68d8      	ldr	r0, [r3, #12]
 80178ca:	b954      	cbnz	r4, 80178e2 <__assert_func+0x26>
 80178cc:	4b07      	ldr	r3, [pc, #28]	@ (80178ec <__assert_func+0x30>)
 80178ce:	461c      	mov	r4, r3
 80178d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80178d4:	9100      	str	r1, [sp, #0]
 80178d6:	462b      	mov	r3, r5
 80178d8:	4905      	ldr	r1, [pc, #20]	@ (80178f0 <__assert_func+0x34>)
 80178da:	f000 fd3f 	bl	801835c <fiprintf>
 80178de:	f000 fde3 	bl	80184a8 <abort>
 80178e2:	4b04      	ldr	r3, [pc, #16]	@ (80178f4 <__assert_func+0x38>)
 80178e4:	e7f4      	b.n	80178d0 <__assert_func+0x14>
 80178e6:	bf00      	nop
 80178e8:	200000fc 	.word	0x200000fc
 80178ec:	08019403 	.word	0x08019403
 80178f0:	080193d5 	.word	0x080193d5
 80178f4:	080193c8 	.word	0x080193c8

080178f8 <__env_lock>:
 80178f8:	4801      	ldr	r0, [pc, #4]	@ (8017900 <__env_lock+0x8>)
 80178fa:	f7ff bfc6 	b.w	801788a <__retarget_lock_acquire_recursive>
 80178fe:	bf00      	nop
 8017900:	2000ae84 	.word	0x2000ae84

08017904 <__env_unlock>:
 8017904:	4801      	ldr	r0, [pc, #4]	@ (801790c <__env_unlock+0x8>)
 8017906:	f7ff bfc1 	b.w	801788c <__retarget_lock_release_recursive>
 801790a:	bf00      	nop
 801790c:	2000ae84 	.word	0x2000ae84

08017910 <_free_r>:
 8017910:	b538      	push	{r3, r4, r5, lr}
 8017912:	4605      	mov	r5, r0
 8017914:	2900      	cmp	r1, #0
 8017916:	d041      	beq.n	801799c <_free_r+0x8c>
 8017918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801791c:	1f0c      	subs	r4, r1, #4
 801791e:	2b00      	cmp	r3, #0
 8017920:	bfb8      	it	lt
 8017922:	18e4      	addlt	r4, r4, r3
 8017924:	f7ff fc1e 	bl	8017164 <__malloc_lock>
 8017928:	4a1d      	ldr	r2, [pc, #116]	@ (80179a0 <_free_r+0x90>)
 801792a:	6813      	ldr	r3, [r2, #0]
 801792c:	b933      	cbnz	r3, 801793c <_free_r+0x2c>
 801792e:	6063      	str	r3, [r4, #4]
 8017930:	6014      	str	r4, [r2, #0]
 8017932:	4628      	mov	r0, r5
 8017934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017938:	f7ff bc1a 	b.w	8017170 <__malloc_unlock>
 801793c:	42a3      	cmp	r3, r4
 801793e:	d908      	bls.n	8017952 <_free_r+0x42>
 8017940:	6820      	ldr	r0, [r4, #0]
 8017942:	1821      	adds	r1, r4, r0
 8017944:	428b      	cmp	r3, r1
 8017946:	bf01      	itttt	eq
 8017948:	6819      	ldreq	r1, [r3, #0]
 801794a:	685b      	ldreq	r3, [r3, #4]
 801794c:	1809      	addeq	r1, r1, r0
 801794e:	6021      	streq	r1, [r4, #0]
 8017950:	e7ed      	b.n	801792e <_free_r+0x1e>
 8017952:	461a      	mov	r2, r3
 8017954:	685b      	ldr	r3, [r3, #4]
 8017956:	b10b      	cbz	r3, 801795c <_free_r+0x4c>
 8017958:	42a3      	cmp	r3, r4
 801795a:	d9fa      	bls.n	8017952 <_free_r+0x42>
 801795c:	6811      	ldr	r1, [r2, #0]
 801795e:	1850      	adds	r0, r2, r1
 8017960:	42a0      	cmp	r0, r4
 8017962:	d10b      	bne.n	801797c <_free_r+0x6c>
 8017964:	6820      	ldr	r0, [r4, #0]
 8017966:	4401      	add	r1, r0
 8017968:	1850      	adds	r0, r2, r1
 801796a:	4283      	cmp	r3, r0
 801796c:	6011      	str	r1, [r2, #0]
 801796e:	d1e0      	bne.n	8017932 <_free_r+0x22>
 8017970:	6818      	ldr	r0, [r3, #0]
 8017972:	685b      	ldr	r3, [r3, #4]
 8017974:	6053      	str	r3, [r2, #4]
 8017976:	4408      	add	r0, r1
 8017978:	6010      	str	r0, [r2, #0]
 801797a:	e7da      	b.n	8017932 <_free_r+0x22>
 801797c:	d902      	bls.n	8017984 <_free_r+0x74>
 801797e:	230c      	movs	r3, #12
 8017980:	602b      	str	r3, [r5, #0]
 8017982:	e7d6      	b.n	8017932 <_free_r+0x22>
 8017984:	6820      	ldr	r0, [r4, #0]
 8017986:	1821      	adds	r1, r4, r0
 8017988:	428b      	cmp	r3, r1
 801798a:	bf04      	itt	eq
 801798c:	6819      	ldreq	r1, [r3, #0]
 801798e:	685b      	ldreq	r3, [r3, #4]
 8017990:	6063      	str	r3, [r4, #4]
 8017992:	bf04      	itt	eq
 8017994:	1809      	addeq	r1, r1, r0
 8017996:	6021      	streq	r1, [r4, #0]
 8017998:	6054      	str	r4, [r2, #4]
 801799a:	e7ca      	b.n	8017932 <_free_r+0x22>
 801799c:	bd38      	pop	{r3, r4, r5, pc}
 801799e:	bf00      	nop
 80179a0:	2000ad40 	.word	0x2000ad40

080179a4 <_malloc_usable_size_r>:
 80179a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80179a8:	1f18      	subs	r0, r3, #4
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	bfbc      	itt	lt
 80179ae:	580b      	ldrlt	r3, [r1, r0]
 80179b0:	18c0      	addlt	r0, r0, r3
 80179b2:	4770      	bx	lr

080179b4 <__ssputs_r>:
 80179b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80179b8:	688e      	ldr	r6, [r1, #8]
 80179ba:	461f      	mov	r7, r3
 80179bc:	42be      	cmp	r6, r7
 80179be:	680b      	ldr	r3, [r1, #0]
 80179c0:	4682      	mov	sl, r0
 80179c2:	460c      	mov	r4, r1
 80179c4:	4690      	mov	r8, r2
 80179c6:	d82d      	bhi.n	8017a24 <__ssputs_r+0x70>
 80179c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80179cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80179d0:	d026      	beq.n	8017a20 <__ssputs_r+0x6c>
 80179d2:	6965      	ldr	r5, [r4, #20]
 80179d4:	6909      	ldr	r1, [r1, #16]
 80179d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80179da:	eba3 0901 	sub.w	r9, r3, r1
 80179de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80179e2:	1c7b      	adds	r3, r7, #1
 80179e4:	444b      	add	r3, r9
 80179e6:	106d      	asrs	r5, r5, #1
 80179e8:	429d      	cmp	r5, r3
 80179ea:	bf38      	it	cc
 80179ec:	461d      	movcc	r5, r3
 80179ee:	0553      	lsls	r3, r2, #21
 80179f0:	d527      	bpl.n	8017a42 <__ssputs_r+0x8e>
 80179f2:	4629      	mov	r1, r5
 80179f4:	f7ff fb36 	bl	8017064 <_malloc_r>
 80179f8:	4606      	mov	r6, r0
 80179fa:	b360      	cbz	r0, 8017a56 <__ssputs_r+0xa2>
 80179fc:	6921      	ldr	r1, [r4, #16]
 80179fe:	464a      	mov	r2, r9
 8017a00:	f7ff ff4d 	bl	801789e <memcpy>
 8017a04:	89a3      	ldrh	r3, [r4, #12]
 8017a06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017a0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017a0e:	81a3      	strh	r3, [r4, #12]
 8017a10:	6126      	str	r6, [r4, #16]
 8017a12:	6165      	str	r5, [r4, #20]
 8017a14:	444e      	add	r6, r9
 8017a16:	eba5 0509 	sub.w	r5, r5, r9
 8017a1a:	6026      	str	r6, [r4, #0]
 8017a1c:	60a5      	str	r5, [r4, #8]
 8017a1e:	463e      	mov	r6, r7
 8017a20:	42be      	cmp	r6, r7
 8017a22:	d900      	bls.n	8017a26 <__ssputs_r+0x72>
 8017a24:	463e      	mov	r6, r7
 8017a26:	6820      	ldr	r0, [r4, #0]
 8017a28:	4632      	mov	r2, r6
 8017a2a:	4641      	mov	r1, r8
 8017a2c:	f7ff fe54 	bl	80176d8 <memmove>
 8017a30:	68a3      	ldr	r3, [r4, #8]
 8017a32:	1b9b      	subs	r3, r3, r6
 8017a34:	60a3      	str	r3, [r4, #8]
 8017a36:	6823      	ldr	r3, [r4, #0]
 8017a38:	4433      	add	r3, r6
 8017a3a:	6023      	str	r3, [r4, #0]
 8017a3c:	2000      	movs	r0, #0
 8017a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a42:	462a      	mov	r2, r5
 8017a44:	f7ff fc0e 	bl	8017264 <_realloc_r>
 8017a48:	4606      	mov	r6, r0
 8017a4a:	2800      	cmp	r0, #0
 8017a4c:	d1e0      	bne.n	8017a10 <__ssputs_r+0x5c>
 8017a4e:	6921      	ldr	r1, [r4, #16]
 8017a50:	4650      	mov	r0, sl
 8017a52:	f7ff ff5d 	bl	8017910 <_free_r>
 8017a56:	230c      	movs	r3, #12
 8017a58:	f8ca 3000 	str.w	r3, [sl]
 8017a5c:	89a3      	ldrh	r3, [r4, #12]
 8017a5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017a62:	81a3      	strh	r3, [r4, #12]
 8017a64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017a68:	e7e9      	b.n	8017a3e <__ssputs_r+0x8a>
	...

08017a6c <_svfiprintf_r>:
 8017a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a70:	4698      	mov	r8, r3
 8017a72:	898b      	ldrh	r3, [r1, #12]
 8017a74:	061b      	lsls	r3, r3, #24
 8017a76:	b09d      	sub	sp, #116	@ 0x74
 8017a78:	4607      	mov	r7, r0
 8017a7a:	460d      	mov	r5, r1
 8017a7c:	4614      	mov	r4, r2
 8017a7e:	d510      	bpl.n	8017aa2 <_svfiprintf_r+0x36>
 8017a80:	690b      	ldr	r3, [r1, #16]
 8017a82:	b973      	cbnz	r3, 8017aa2 <_svfiprintf_r+0x36>
 8017a84:	2140      	movs	r1, #64	@ 0x40
 8017a86:	f7ff faed 	bl	8017064 <_malloc_r>
 8017a8a:	6028      	str	r0, [r5, #0]
 8017a8c:	6128      	str	r0, [r5, #16]
 8017a8e:	b930      	cbnz	r0, 8017a9e <_svfiprintf_r+0x32>
 8017a90:	230c      	movs	r3, #12
 8017a92:	603b      	str	r3, [r7, #0]
 8017a94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017a98:	b01d      	add	sp, #116	@ 0x74
 8017a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a9e:	2340      	movs	r3, #64	@ 0x40
 8017aa0:	616b      	str	r3, [r5, #20]
 8017aa2:	2300      	movs	r3, #0
 8017aa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8017aa6:	2320      	movs	r3, #32
 8017aa8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017aac:	f8cd 800c 	str.w	r8, [sp, #12]
 8017ab0:	2330      	movs	r3, #48	@ 0x30
 8017ab2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017c50 <_svfiprintf_r+0x1e4>
 8017ab6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017aba:	f04f 0901 	mov.w	r9, #1
 8017abe:	4623      	mov	r3, r4
 8017ac0:	469a      	mov	sl, r3
 8017ac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017ac6:	b10a      	cbz	r2, 8017acc <_svfiprintf_r+0x60>
 8017ac8:	2a25      	cmp	r2, #37	@ 0x25
 8017aca:	d1f9      	bne.n	8017ac0 <_svfiprintf_r+0x54>
 8017acc:	ebba 0b04 	subs.w	fp, sl, r4
 8017ad0:	d00b      	beq.n	8017aea <_svfiprintf_r+0x7e>
 8017ad2:	465b      	mov	r3, fp
 8017ad4:	4622      	mov	r2, r4
 8017ad6:	4629      	mov	r1, r5
 8017ad8:	4638      	mov	r0, r7
 8017ada:	f7ff ff6b 	bl	80179b4 <__ssputs_r>
 8017ade:	3001      	adds	r0, #1
 8017ae0:	f000 80a7 	beq.w	8017c32 <_svfiprintf_r+0x1c6>
 8017ae4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017ae6:	445a      	add	r2, fp
 8017ae8:	9209      	str	r2, [sp, #36]	@ 0x24
 8017aea:	f89a 3000 	ldrb.w	r3, [sl]
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	f000 809f 	beq.w	8017c32 <_svfiprintf_r+0x1c6>
 8017af4:	2300      	movs	r3, #0
 8017af6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017afa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017afe:	f10a 0a01 	add.w	sl, sl, #1
 8017b02:	9304      	str	r3, [sp, #16]
 8017b04:	9307      	str	r3, [sp, #28]
 8017b06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017b0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8017b0c:	4654      	mov	r4, sl
 8017b0e:	2205      	movs	r2, #5
 8017b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b14:	484e      	ldr	r0, [pc, #312]	@ (8017c50 <_svfiprintf_r+0x1e4>)
 8017b16:	f7e8 fb9b 	bl	8000250 <memchr>
 8017b1a:	9a04      	ldr	r2, [sp, #16]
 8017b1c:	b9d8      	cbnz	r0, 8017b56 <_svfiprintf_r+0xea>
 8017b1e:	06d0      	lsls	r0, r2, #27
 8017b20:	bf44      	itt	mi
 8017b22:	2320      	movmi	r3, #32
 8017b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017b28:	0711      	lsls	r1, r2, #28
 8017b2a:	bf44      	itt	mi
 8017b2c:	232b      	movmi	r3, #43	@ 0x2b
 8017b2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017b32:	f89a 3000 	ldrb.w	r3, [sl]
 8017b36:	2b2a      	cmp	r3, #42	@ 0x2a
 8017b38:	d015      	beq.n	8017b66 <_svfiprintf_r+0xfa>
 8017b3a:	9a07      	ldr	r2, [sp, #28]
 8017b3c:	4654      	mov	r4, sl
 8017b3e:	2000      	movs	r0, #0
 8017b40:	f04f 0c0a 	mov.w	ip, #10
 8017b44:	4621      	mov	r1, r4
 8017b46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017b4a:	3b30      	subs	r3, #48	@ 0x30
 8017b4c:	2b09      	cmp	r3, #9
 8017b4e:	d94b      	bls.n	8017be8 <_svfiprintf_r+0x17c>
 8017b50:	b1b0      	cbz	r0, 8017b80 <_svfiprintf_r+0x114>
 8017b52:	9207      	str	r2, [sp, #28]
 8017b54:	e014      	b.n	8017b80 <_svfiprintf_r+0x114>
 8017b56:	eba0 0308 	sub.w	r3, r0, r8
 8017b5a:	fa09 f303 	lsl.w	r3, r9, r3
 8017b5e:	4313      	orrs	r3, r2
 8017b60:	9304      	str	r3, [sp, #16]
 8017b62:	46a2      	mov	sl, r4
 8017b64:	e7d2      	b.n	8017b0c <_svfiprintf_r+0xa0>
 8017b66:	9b03      	ldr	r3, [sp, #12]
 8017b68:	1d19      	adds	r1, r3, #4
 8017b6a:	681b      	ldr	r3, [r3, #0]
 8017b6c:	9103      	str	r1, [sp, #12]
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	bfbb      	ittet	lt
 8017b72:	425b      	neglt	r3, r3
 8017b74:	f042 0202 	orrlt.w	r2, r2, #2
 8017b78:	9307      	strge	r3, [sp, #28]
 8017b7a:	9307      	strlt	r3, [sp, #28]
 8017b7c:	bfb8      	it	lt
 8017b7e:	9204      	strlt	r2, [sp, #16]
 8017b80:	7823      	ldrb	r3, [r4, #0]
 8017b82:	2b2e      	cmp	r3, #46	@ 0x2e
 8017b84:	d10a      	bne.n	8017b9c <_svfiprintf_r+0x130>
 8017b86:	7863      	ldrb	r3, [r4, #1]
 8017b88:	2b2a      	cmp	r3, #42	@ 0x2a
 8017b8a:	d132      	bne.n	8017bf2 <_svfiprintf_r+0x186>
 8017b8c:	9b03      	ldr	r3, [sp, #12]
 8017b8e:	1d1a      	adds	r2, r3, #4
 8017b90:	681b      	ldr	r3, [r3, #0]
 8017b92:	9203      	str	r2, [sp, #12]
 8017b94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017b98:	3402      	adds	r4, #2
 8017b9a:	9305      	str	r3, [sp, #20]
 8017b9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017c60 <_svfiprintf_r+0x1f4>
 8017ba0:	7821      	ldrb	r1, [r4, #0]
 8017ba2:	2203      	movs	r2, #3
 8017ba4:	4650      	mov	r0, sl
 8017ba6:	f7e8 fb53 	bl	8000250 <memchr>
 8017baa:	b138      	cbz	r0, 8017bbc <_svfiprintf_r+0x150>
 8017bac:	9b04      	ldr	r3, [sp, #16]
 8017bae:	eba0 000a 	sub.w	r0, r0, sl
 8017bb2:	2240      	movs	r2, #64	@ 0x40
 8017bb4:	4082      	lsls	r2, r0
 8017bb6:	4313      	orrs	r3, r2
 8017bb8:	3401      	adds	r4, #1
 8017bba:	9304      	str	r3, [sp, #16]
 8017bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017bc0:	4824      	ldr	r0, [pc, #144]	@ (8017c54 <_svfiprintf_r+0x1e8>)
 8017bc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017bc6:	2206      	movs	r2, #6
 8017bc8:	f7e8 fb42 	bl	8000250 <memchr>
 8017bcc:	2800      	cmp	r0, #0
 8017bce:	d036      	beq.n	8017c3e <_svfiprintf_r+0x1d2>
 8017bd0:	4b21      	ldr	r3, [pc, #132]	@ (8017c58 <_svfiprintf_r+0x1ec>)
 8017bd2:	bb1b      	cbnz	r3, 8017c1c <_svfiprintf_r+0x1b0>
 8017bd4:	9b03      	ldr	r3, [sp, #12]
 8017bd6:	3307      	adds	r3, #7
 8017bd8:	f023 0307 	bic.w	r3, r3, #7
 8017bdc:	3308      	adds	r3, #8
 8017bde:	9303      	str	r3, [sp, #12]
 8017be0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017be2:	4433      	add	r3, r6
 8017be4:	9309      	str	r3, [sp, #36]	@ 0x24
 8017be6:	e76a      	b.n	8017abe <_svfiprintf_r+0x52>
 8017be8:	fb0c 3202 	mla	r2, ip, r2, r3
 8017bec:	460c      	mov	r4, r1
 8017bee:	2001      	movs	r0, #1
 8017bf0:	e7a8      	b.n	8017b44 <_svfiprintf_r+0xd8>
 8017bf2:	2300      	movs	r3, #0
 8017bf4:	3401      	adds	r4, #1
 8017bf6:	9305      	str	r3, [sp, #20]
 8017bf8:	4619      	mov	r1, r3
 8017bfa:	f04f 0c0a 	mov.w	ip, #10
 8017bfe:	4620      	mov	r0, r4
 8017c00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017c04:	3a30      	subs	r2, #48	@ 0x30
 8017c06:	2a09      	cmp	r2, #9
 8017c08:	d903      	bls.n	8017c12 <_svfiprintf_r+0x1a6>
 8017c0a:	2b00      	cmp	r3, #0
 8017c0c:	d0c6      	beq.n	8017b9c <_svfiprintf_r+0x130>
 8017c0e:	9105      	str	r1, [sp, #20]
 8017c10:	e7c4      	b.n	8017b9c <_svfiprintf_r+0x130>
 8017c12:	fb0c 2101 	mla	r1, ip, r1, r2
 8017c16:	4604      	mov	r4, r0
 8017c18:	2301      	movs	r3, #1
 8017c1a:	e7f0      	b.n	8017bfe <_svfiprintf_r+0x192>
 8017c1c:	ab03      	add	r3, sp, #12
 8017c1e:	9300      	str	r3, [sp, #0]
 8017c20:	462a      	mov	r2, r5
 8017c22:	4b0e      	ldr	r3, [pc, #56]	@ (8017c5c <_svfiprintf_r+0x1f0>)
 8017c24:	a904      	add	r1, sp, #16
 8017c26:	4638      	mov	r0, r7
 8017c28:	f3af 8000 	nop.w
 8017c2c:	1c42      	adds	r2, r0, #1
 8017c2e:	4606      	mov	r6, r0
 8017c30:	d1d6      	bne.n	8017be0 <_svfiprintf_r+0x174>
 8017c32:	89ab      	ldrh	r3, [r5, #12]
 8017c34:	065b      	lsls	r3, r3, #25
 8017c36:	f53f af2d 	bmi.w	8017a94 <_svfiprintf_r+0x28>
 8017c3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017c3c:	e72c      	b.n	8017a98 <_svfiprintf_r+0x2c>
 8017c3e:	ab03      	add	r3, sp, #12
 8017c40:	9300      	str	r3, [sp, #0]
 8017c42:	462a      	mov	r2, r5
 8017c44:	4b05      	ldr	r3, [pc, #20]	@ (8017c5c <_svfiprintf_r+0x1f0>)
 8017c46:	a904      	add	r1, sp, #16
 8017c48:	4638      	mov	r0, r7
 8017c4a:	f000 f9bb 	bl	8017fc4 <_printf_i>
 8017c4e:	e7ed      	b.n	8017c2c <_svfiprintf_r+0x1c0>
 8017c50:	08019404 	.word	0x08019404
 8017c54:	0801940e 	.word	0x0801940e
 8017c58:	00000000 	.word	0x00000000
 8017c5c:	080179b5 	.word	0x080179b5
 8017c60:	0801940a 	.word	0x0801940a

08017c64 <__sfputc_r>:
 8017c64:	6893      	ldr	r3, [r2, #8]
 8017c66:	3b01      	subs	r3, #1
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	b410      	push	{r4}
 8017c6c:	6093      	str	r3, [r2, #8]
 8017c6e:	da08      	bge.n	8017c82 <__sfputc_r+0x1e>
 8017c70:	6994      	ldr	r4, [r2, #24]
 8017c72:	42a3      	cmp	r3, r4
 8017c74:	db01      	blt.n	8017c7a <__sfputc_r+0x16>
 8017c76:	290a      	cmp	r1, #10
 8017c78:	d103      	bne.n	8017c82 <__sfputc_r+0x1e>
 8017c7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c7e:	f000 bb7f 	b.w	8018380 <__swbuf_r>
 8017c82:	6813      	ldr	r3, [r2, #0]
 8017c84:	1c58      	adds	r0, r3, #1
 8017c86:	6010      	str	r0, [r2, #0]
 8017c88:	7019      	strb	r1, [r3, #0]
 8017c8a:	4608      	mov	r0, r1
 8017c8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c90:	4770      	bx	lr

08017c92 <__sfputs_r>:
 8017c92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c94:	4606      	mov	r6, r0
 8017c96:	460f      	mov	r7, r1
 8017c98:	4614      	mov	r4, r2
 8017c9a:	18d5      	adds	r5, r2, r3
 8017c9c:	42ac      	cmp	r4, r5
 8017c9e:	d101      	bne.n	8017ca4 <__sfputs_r+0x12>
 8017ca0:	2000      	movs	r0, #0
 8017ca2:	e007      	b.n	8017cb4 <__sfputs_r+0x22>
 8017ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ca8:	463a      	mov	r2, r7
 8017caa:	4630      	mov	r0, r6
 8017cac:	f7ff ffda 	bl	8017c64 <__sfputc_r>
 8017cb0:	1c43      	adds	r3, r0, #1
 8017cb2:	d1f3      	bne.n	8017c9c <__sfputs_r+0xa>
 8017cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017cb8 <_vfiprintf_r>:
 8017cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cbc:	460d      	mov	r5, r1
 8017cbe:	b09d      	sub	sp, #116	@ 0x74
 8017cc0:	4614      	mov	r4, r2
 8017cc2:	4698      	mov	r8, r3
 8017cc4:	4606      	mov	r6, r0
 8017cc6:	b118      	cbz	r0, 8017cd0 <_vfiprintf_r+0x18>
 8017cc8:	6a03      	ldr	r3, [r0, #32]
 8017cca:	b90b      	cbnz	r3, 8017cd0 <_vfiprintf_r+0x18>
 8017ccc:	f7ff fbfc 	bl	80174c8 <__sinit>
 8017cd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017cd2:	07d9      	lsls	r1, r3, #31
 8017cd4:	d405      	bmi.n	8017ce2 <_vfiprintf_r+0x2a>
 8017cd6:	89ab      	ldrh	r3, [r5, #12]
 8017cd8:	059a      	lsls	r2, r3, #22
 8017cda:	d402      	bmi.n	8017ce2 <_vfiprintf_r+0x2a>
 8017cdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017cde:	f7ff fdd4 	bl	801788a <__retarget_lock_acquire_recursive>
 8017ce2:	89ab      	ldrh	r3, [r5, #12]
 8017ce4:	071b      	lsls	r3, r3, #28
 8017ce6:	d501      	bpl.n	8017cec <_vfiprintf_r+0x34>
 8017ce8:	692b      	ldr	r3, [r5, #16]
 8017cea:	b99b      	cbnz	r3, 8017d14 <_vfiprintf_r+0x5c>
 8017cec:	4629      	mov	r1, r5
 8017cee:	4630      	mov	r0, r6
 8017cf0:	f000 fb84 	bl	80183fc <__swsetup_r>
 8017cf4:	b170      	cbz	r0, 8017d14 <_vfiprintf_r+0x5c>
 8017cf6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017cf8:	07dc      	lsls	r4, r3, #31
 8017cfa:	d504      	bpl.n	8017d06 <_vfiprintf_r+0x4e>
 8017cfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017d00:	b01d      	add	sp, #116	@ 0x74
 8017d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d06:	89ab      	ldrh	r3, [r5, #12]
 8017d08:	0598      	lsls	r0, r3, #22
 8017d0a:	d4f7      	bmi.n	8017cfc <_vfiprintf_r+0x44>
 8017d0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017d0e:	f7ff fdbd 	bl	801788c <__retarget_lock_release_recursive>
 8017d12:	e7f3      	b.n	8017cfc <_vfiprintf_r+0x44>
 8017d14:	2300      	movs	r3, #0
 8017d16:	9309      	str	r3, [sp, #36]	@ 0x24
 8017d18:	2320      	movs	r3, #32
 8017d1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017d1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017d22:	2330      	movs	r3, #48	@ 0x30
 8017d24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017ed4 <_vfiprintf_r+0x21c>
 8017d28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017d2c:	f04f 0901 	mov.w	r9, #1
 8017d30:	4623      	mov	r3, r4
 8017d32:	469a      	mov	sl, r3
 8017d34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017d38:	b10a      	cbz	r2, 8017d3e <_vfiprintf_r+0x86>
 8017d3a:	2a25      	cmp	r2, #37	@ 0x25
 8017d3c:	d1f9      	bne.n	8017d32 <_vfiprintf_r+0x7a>
 8017d3e:	ebba 0b04 	subs.w	fp, sl, r4
 8017d42:	d00b      	beq.n	8017d5c <_vfiprintf_r+0xa4>
 8017d44:	465b      	mov	r3, fp
 8017d46:	4622      	mov	r2, r4
 8017d48:	4629      	mov	r1, r5
 8017d4a:	4630      	mov	r0, r6
 8017d4c:	f7ff ffa1 	bl	8017c92 <__sfputs_r>
 8017d50:	3001      	adds	r0, #1
 8017d52:	f000 80a7 	beq.w	8017ea4 <_vfiprintf_r+0x1ec>
 8017d56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017d58:	445a      	add	r2, fp
 8017d5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8017d5c:	f89a 3000 	ldrb.w	r3, [sl]
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	f000 809f 	beq.w	8017ea4 <_vfiprintf_r+0x1ec>
 8017d66:	2300      	movs	r3, #0
 8017d68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017d6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017d70:	f10a 0a01 	add.w	sl, sl, #1
 8017d74:	9304      	str	r3, [sp, #16]
 8017d76:	9307      	str	r3, [sp, #28]
 8017d78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017d7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8017d7e:	4654      	mov	r4, sl
 8017d80:	2205      	movs	r2, #5
 8017d82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d86:	4853      	ldr	r0, [pc, #332]	@ (8017ed4 <_vfiprintf_r+0x21c>)
 8017d88:	f7e8 fa62 	bl	8000250 <memchr>
 8017d8c:	9a04      	ldr	r2, [sp, #16]
 8017d8e:	b9d8      	cbnz	r0, 8017dc8 <_vfiprintf_r+0x110>
 8017d90:	06d1      	lsls	r1, r2, #27
 8017d92:	bf44      	itt	mi
 8017d94:	2320      	movmi	r3, #32
 8017d96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017d9a:	0713      	lsls	r3, r2, #28
 8017d9c:	bf44      	itt	mi
 8017d9e:	232b      	movmi	r3, #43	@ 0x2b
 8017da0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017da4:	f89a 3000 	ldrb.w	r3, [sl]
 8017da8:	2b2a      	cmp	r3, #42	@ 0x2a
 8017daa:	d015      	beq.n	8017dd8 <_vfiprintf_r+0x120>
 8017dac:	9a07      	ldr	r2, [sp, #28]
 8017dae:	4654      	mov	r4, sl
 8017db0:	2000      	movs	r0, #0
 8017db2:	f04f 0c0a 	mov.w	ip, #10
 8017db6:	4621      	mov	r1, r4
 8017db8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017dbc:	3b30      	subs	r3, #48	@ 0x30
 8017dbe:	2b09      	cmp	r3, #9
 8017dc0:	d94b      	bls.n	8017e5a <_vfiprintf_r+0x1a2>
 8017dc2:	b1b0      	cbz	r0, 8017df2 <_vfiprintf_r+0x13a>
 8017dc4:	9207      	str	r2, [sp, #28]
 8017dc6:	e014      	b.n	8017df2 <_vfiprintf_r+0x13a>
 8017dc8:	eba0 0308 	sub.w	r3, r0, r8
 8017dcc:	fa09 f303 	lsl.w	r3, r9, r3
 8017dd0:	4313      	orrs	r3, r2
 8017dd2:	9304      	str	r3, [sp, #16]
 8017dd4:	46a2      	mov	sl, r4
 8017dd6:	e7d2      	b.n	8017d7e <_vfiprintf_r+0xc6>
 8017dd8:	9b03      	ldr	r3, [sp, #12]
 8017dda:	1d19      	adds	r1, r3, #4
 8017ddc:	681b      	ldr	r3, [r3, #0]
 8017dde:	9103      	str	r1, [sp, #12]
 8017de0:	2b00      	cmp	r3, #0
 8017de2:	bfbb      	ittet	lt
 8017de4:	425b      	neglt	r3, r3
 8017de6:	f042 0202 	orrlt.w	r2, r2, #2
 8017dea:	9307      	strge	r3, [sp, #28]
 8017dec:	9307      	strlt	r3, [sp, #28]
 8017dee:	bfb8      	it	lt
 8017df0:	9204      	strlt	r2, [sp, #16]
 8017df2:	7823      	ldrb	r3, [r4, #0]
 8017df4:	2b2e      	cmp	r3, #46	@ 0x2e
 8017df6:	d10a      	bne.n	8017e0e <_vfiprintf_r+0x156>
 8017df8:	7863      	ldrb	r3, [r4, #1]
 8017dfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8017dfc:	d132      	bne.n	8017e64 <_vfiprintf_r+0x1ac>
 8017dfe:	9b03      	ldr	r3, [sp, #12]
 8017e00:	1d1a      	adds	r2, r3, #4
 8017e02:	681b      	ldr	r3, [r3, #0]
 8017e04:	9203      	str	r2, [sp, #12]
 8017e06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017e0a:	3402      	adds	r4, #2
 8017e0c:	9305      	str	r3, [sp, #20]
 8017e0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017ee4 <_vfiprintf_r+0x22c>
 8017e12:	7821      	ldrb	r1, [r4, #0]
 8017e14:	2203      	movs	r2, #3
 8017e16:	4650      	mov	r0, sl
 8017e18:	f7e8 fa1a 	bl	8000250 <memchr>
 8017e1c:	b138      	cbz	r0, 8017e2e <_vfiprintf_r+0x176>
 8017e1e:	9b04      	ldr	r3, [sp, #16]
 8017e20:	eba0 000a 	sub.w	r0, r0, sl
 8017e24:	2240      	movs	r2, #64	@ 0x40
 8017e26:	4082      	lsls	r2, r0
 8017e28:	4313      	orrs	r3, r2
 8017e2a:	3401      	adds	r4, #1
 8017e2c:	9304      	str	r3, [sp, #16]
 8017e2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e32:	4829      	ldr	r0, [pc, #164]	@ (8017ed8 <_vfiprintf_r+0x220>)
 8017e34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017e38:	2206      	movs	r2, #6
 8017e3a:	f7e8 fa09 	bl	8000250 <memchr>
 8017e3e:	2800      	cmp	r0, #0
 8017e40:	d03f      	beq.n	8017ec2 <_vfiprintf_r+0x20a>
 8017e42:	4b26      	ldr	r3, [pc, #152]	@ (8017edc <_vfiprintf_r+0x224>)
 8017e44:	bb1b      	cbnz	r3, 8017e8e <_vfiprintf_r+0x1d6>
 8017e46:	9b03      	ldr	r3, [sp, #12]
 8017e48:	3307      	adds	r3, #7
 8017e4a:	f023 0307 	bic.w	r3, r3, #7
 8017e4e:	3308      	adds	r3, #8
 8017e50:	9303      	str	r3, [sp, #12]
 8017e52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017e54:	443b      	add	r3, r7
 8017e56:	9309      	str	r3, [sp, #36]	@ 0x24
 8017e58:	e76a      	b.n	8017d30 <_vfiprintf_r+0x78>
 8017e5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8017e5e:	460c      	mov	r4, r1
 8017e60:	2001      	movs	r0, #1
 8017e62:	e7a8      	b.n	8017db6 <_vfiprintf_r+0xfe>
 8017e64:	2300      	movs	r3, #0
 8017e66:	3401      	adds	r4, #1
 8017e68:	9305      	str	r3, [sp, #20]
 8017e6a:	4619      	mov	r1, r3
 8017e6c:	f04f 0c0a 	mov.w	ip, #10
 8017e70:	4620      	mov	r0, r4
 8017e72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017e76:	3a30      	subs	r2, #48	@ 0x30
 8017e78:	2a09      	cmp	r2, #9
 8017e7a:	d903      	bls.n	8017e84 <_vfiprintf_r+0x1cc>
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	d0c6      	beq.n	8017e0e <_vfiprintf_r+0x156>
 8017e80:	9105      	str	r1, [sp, #20]
 8017e82:	e7c4      	b.n	8017e0e <_vfiprintf_r+0x156>
 8017e84:	fb0c 2101 	mla	r1, ip, r1, r2
 8017e88:	4604      	mov	r4, r0
 8017e8a:	2301      	movs	r3, #1
 8017e8c:	e7f0      	b.n	8017e70 <_vfiprintf_r+0x1b8>
 8017e8e:	ab03      	add	r3, sp, #12
 8017e90:	9300      	str	r3, [sp, #0]
 8017e92:	462a      	mov	r2, r5
 8017e94:	4b12      	ldr	r3, [pc, #72]	@ (8017ee0 <_vfiprintf_r+0x228>)
 8017e96:	a904      	add	r1, sp, #16
 8017e98:	4630      	mov	r0, r6
 8017e9a:	f3af 8000 	nop.w
 8017e9e:	4607      	mov	r7, r0
 8017ea0:	1c78      	adds	r0, r7, #1
 8017ea2:	d1d6      	bne.n	8017e52 <_vfiprintf_r+0x19a>
 8017ea4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017ea6:	07d9      	lsls	r1, r3, #31
 8017ea8:	d405      	bmi.n	8017eb6 <_vfiprintf_r+0x1fe>
 8017eaa:	89ab      	ldrh	r3, [r5, #12]
 8017eac:	059a      	lsls	r2, r3, #22
 8017eae:	d402      	bmi.n	8017eb6 <_vfiprintf_r+0x1fe>
 8017eb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017eb2:	f7ff fceb 	bl	801788c <__retarget_lock_release_recursive>
 8017eb6:	89ab      	ldrh	r3, [r5, #12]
 8017eb8:	065b      	lsls	r3, r3, #25
 8017eba:	f53f af1f 	bmi.w	8017cfc <_vfiprintf_r+0x44>
 8017ebe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017ec0:	e71e      	b.n	8017d00 <_vfiprintf_r+0x48>
 8017ec2:	ab03      	add	r3, sp, #12
 8017ec4:	9300      	str	r3, [sp, #0]
 8017ec6:	462a      	mov	r2, r5
 8017ec8:	4b05      	ldr	r3, [pc, #20]	@ (8017ee0 <_vfiprintf_r+0x228>)
 8017eca:	a904      	add	r1, sp, #16
 8017ecc:	4630      	mov	r0, r6
 8017ece:	f000 f879 	bl	8017fc4 <_printf_i>
 8017ed2:	e7e4      	b.n	8017e9e <_vfiprintf_r+0x1e6>
 8017ed4:	08019404 	.word	0x08019404
 8017ed8:	0801940e 	.word	0x0801940e
 8017edc:	00000000 	.word	0x00000000
 8017ee0:	08017c93 	.word	0x08017c93
 8017ee4:	0801940a 	.word	0x0801940a

08017ee8 <_printf_common>:
 8017ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017eec:	4616      	mov	r6, r2
 8017eee:	4698      	mov	r8, r3
 8017ef0:	688a      	ldr	r2, [r1, #8]
 8017ef2:	690b      	ldr	r3, [r1, #16]
 8017ef4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017ef8:	4293      	cmp	r3, r2
 8017efa:	bfb8      	it	lt
 8017efc:	4613      	movlt	r3, r2
 8017efe:	6033      	str	r3, [r6, #0]
 8017f00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017f04:	4607      	mov	r7, r0
 8017f06:	460c      	mov	r4, r1
 8017f08:	b10a      	cbz	r2, 8017f0e <_printf_common+0x26>
 8017f0a:	3301      	adds	r3, #1
 8017f0c:	6033      	str	r3, [r6, #0]
 8017f0e:	6823      	ldr	r3, [r4, #0]
 8017f10:	0699      	lsls	r1, r3, #26
 8017f12:	bf42      	ittt	mi
 8017f14:	6833      	ldrmi	r3, [r6, #0]
 8017f16:	3302      	addmi	r3, #2
 8017f18:	6033      	strmi	r3, [r6, #0]
 8017f1a:	6825      	ldr	r5, [r4, #0]
 8017f1c:	f015 0506 	ands.w	r5, r5, #6
 8017f20:	d106      	bne.n	8017f30 <_printf_common+0x48>
 8017f22:	f104 0a19 	add.w	sl, r4, #25
 8017f26:	68e3      	ldr	r3, [r4, #12]
 8017f28:	6832      	ldr	r2, [r6, #0]
 8017f2a:	1a9b      	subs	r3, r3, r2
 8017f2c:	42ab      	cmp	r3, r5
 8017f2e:	dc26      	bgt.n	8017f7e <_printf_common+0x96>
 8017f30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017f34:	6822      	ldr	r2, [r4, #0]
 8017f36:	3b00      	subs	r3, #0
 8017f38:	bf18      	it	ne
 8017f3a:	2301      	movne	r3, #1
 8017f3c:	0692      	lsls	r2, r2, #26
 8017f3e:	d42b      	bmi.n	8017f98 <_printf_common+0xb0>
 8017f40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017f44:	4641      	mov	r1, r8
 8017f46:	4638      	mov	r0, r7
 8017f48:	47c8      	blx	r9
 8017f4a:	3001      	adds	r0, #1
 8017f4c:	d01e      	beq.n	8017f8c <_printf_common+0xa4>
 8017f4e:	6823      	ldr	r3, [r4, #0]
 8017f50:	6922      	ldr	r2, [r4, #16]
 8017f52:	f003 0306 	and.w	r3, r3, #6
 8017f56:	2b04      	cmp	r3, #4
 8017f58:	bf02      	ittt	eq
 8017f5a:	68e5      	ldreq	r5, [r4, #12]
 8017f5c:	6833      	ldreq	r3, [r6, #0]
 8017f5e:	1aed      	subeq	r5, r5, r3
 8017f60:	68a3      	ldr	r3, [r4, #8]
 8017f62:	bf0c      	ite	eq
 8017f64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017f68:	2500      	movne	r5, #0
 8017f6a:	4293      	cmp	r3, r2
 8017f6c:	bfc4      	itt	gt
 8017f6e:	1a9b      	subgt	r3, r3, r2
 8017f70:	18ed      	addgt	r5, r5, r3
 8017f72:	2600      	movs	r6, #0
 8017f74:	341a      	adds	r4, #26
 8017f76:	42b5      	cmp	r5, r6
 8017f78:	d11a      	bne.n	8017fb0 <_printf_common+0xc8>
 8017f7a:	2000      	movs	r0, #0
 8017f7c:	e008      	b.n	8017f90 <_printf_common+0xa8>
 8017f7e:	2301      	movs	r3, #1
 8017f80:	4652      	mov	r2, sl
 8017f82:	4641      	mov	r1, r8
 8017f84:	4638      	mov	r0, r7
 8017f86:	47c8      	blx	r9
 8017f88:	3001      	adds	r0, #1
 8017f8a:	d103      	bne.n	8017f94 <_printf_common+0xac>
 8017f8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f94:	3501      	adds	r5, #1
 8017f96:	e7c6      	b.n	8017f26 <_printf_common+0x3e>
 8017f98:	18e1      	adds	r1, r4, r3
 8017f9a:	1c5a      	adds	r2, r3, #1
 8017f9c:	2030      	movs	r0, #48	@ 0x30
 8017f9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017fa2:	4422      	add	r2, r4
 8017fa4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017fa8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017fac:	3302      	adds	r3, #2
 8017fae:	e7c7      	b.n	8017f40 <_printf_common+0x58>
 8017fb0:	2301      	movs	r3, #1
 8017fb2:	4622      	mov	r2, r4
 8017fb4:	4641      	mov	r1, r8
 8017fb6:	4638      	mov	r0, r7
 8017fb8:	47c8      	blx	r9
 8017fba:	3001      	adds	r0, #1
 8017fbc:	d0e6      	beq.n	8017f8c <_printf_common+0xa4>
 8017fbe:	3601      	adds	r6, #1
 8017fc0:	e7d9      	b.n	8017f76 <_printf_common+0x8e>
	...

08017fc4 <_printf_i>:
 8017fc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017fc8:	7e0f      	ldrb	r7, [r1, #24]
 8017fca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017fcc:	2f78      	cmp	r7, #120	@ 0x78
 8017fce:	4691      	mov	r9, r2
 8017fd0:	4680      	mov	r8, r0
 8017fd2:	460c      	mov	r4, r1
 8017fd4:	469a      	mov	sl, r3
 8017fd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017fda:	d807      	bhi.n	8017fec <_printf_i+0x28>
 8017fdc:	2f62      	cmp	r7, #98	@ 0x62
 8017fde:	d80a      	bhi.n	8017ff6 <_printf_i+0x32>
 8017fe0:	2f00      	cmp	r7, #0
 8017fe2:	f000 80d2 	beq.w	801818a <_printf_i+0x1c6>
 8017fe6:	2f58      	cmp	r7, #88	@ 0x58
 8017fe8:	f000 80b9 	beq.w	801815e <_printf_i+0x19a>
 8017fec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017ff0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017ff4:	e03a      	b.n	801806c <_printf_i+0xa8>
 8017ff6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017ffa:	2b15      	cmp	r3, #21
 8017ffc:	d8f6      	bhi.n	8017fec <_printf_i+0x28>
 8017ffe:	a101      	add	r1, pc, #4	@ (adr r1, 8018004 <_printf_i+0x40>)
 8018000:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018004:	0801805d 	.word	0x0801805d
 8018008:	08018071 	.word	0x08018071
 801800c:	08017fed 	.word	0x08017fed
 8018010:	08017fed 	.word	0x08017fed
 8018014:	08017fed 	.word	0x08017fed
 8018018:	08017fed 	.word	0x08017fed
 801801c:	08018071 	.word	0x08018071
 8018020:	08017fed 	.word	0x08017fed
 8018024:	08017fed 	.word	0x08017fed
 8018028:	08017fed 	.word	0x08017fed
 801802c:	08017fed 	.word	0x08017fed
 8018030:	08018171 	.word	0x08018171
 8018034:	0801809b 	.word	0x0801809b
 8018038:	0801812b 	.word	0x0801812b
 801803c:	08017fed 	.word	0x08017fed
 8018040:	08017fed 	.word	0x08017fed
 8018044:	08018193 	.word	0x08018193
 8018048:	08017fed 	.word	0x08017fed
 801804c:	0801809b 	.word	0x0801809b
 8018050:	08017fed 	.word	0x08017fed
 8018054:	08017fed 	.word	0x08017fed
 8018058:	08018133 	.word	0x08018133
 801805c:	6833      	ldr	r3, [r6, #0]
 801805e:	1d1a      	adds	r2, r3, #4
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	6032      	str	r2, [r6, #0]
 8018064:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018068:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801806c:	2301      	movs	r3, #1
 801806e:	e09d      	b.n	80181ac <_printf_i+0x1e8>
 8018070:	6833      	ldr	r3, [r6, #0]
 8018072:	6820      	ldr	r0, [r4, #0]
 8018074:	1d19      	adds	r1, r3, #4
 8018076:	6031      	str	r1, [r6, #0]
 8018078:	0606      	lsls	r6, r0, #24
 801807a:	d501      	bpl.n	8018080 <_printf_i+0xbc>
 801807c:	681d      	ldr	r5, [r3, #0]
 801807e:	e003      	b.n	8018088 <_printf_i+0xc4>
 8018080:	0645      	lsls	r5, r0, #25
 8018082:	d5fb      	bpl.n	801807c <_printf_i+0xb8>
 8018084:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018088:	2d00      	cmp	r5, #0
 801808a:	da03      	bge.n	8018094 <_printf_i+0xd0>
 801808c:	232d      	movs	r3, #45	@ 0x2d
 801808e:	426d      	negs	r5, r5
 8018090:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018094:	4859      	ldr	r0, [pc, #356]	@ (80181fc <_printf_i+0x238>)
 8018096:	230a      	movs	r3, #10
 8018098:	e011      	b.n	80180be <_printf_i+0xfa>
 801809a:	6821      	ldr	r1, [r4, #0]
 801809c:	6833      	ldr	r3, [r6, #0]
 801809e:	0608      	lsls	r0, r1, #24
 80180a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80180a4:	d402      	bmi.n	80180ac <_printf_i+0xe8>
 80180a6:	0649      	lsls	r1, r1, #25
 80180a8:	bf48      	it	mi
 80180aa:	b2ad      	uxthmi	r5, r5
 80180ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80180ae:	4853      	ldr	r0, [pc, #332]	@ (80181fc <_printf_i+0x238>)
 80180b0:	6033      	str	r3, [r6, #0]
 80180b2:	bf14      	ite	ne
 80180b4:	230a      	movne	r3, #10
 80180b6:	2308      	moveq	r3, #8
 80180b8:	2100      	movs	r1, #0
 80180ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80180be:	6866      	ldr	r6, [r4, #4]
 80180c0:	60a6      	str	r6, [r4, #8]
 80180c2:	2e00      	cmp	r6, #0
 80180c4:	bfa2      	ittt	ge
 80180c6:	6821      	ldrge	r1, [r4, #0]
 80180c8:	f021 0104 	bicge.w	r1, r1, #4
 80180cc:	6021      	strge	r1, [r4, #0]
 80180ce:	b90d      	cbnz	r5, 80180d4 <_printf_i+0x110>
 80180d0:	2e00      	cmp	r6, #0
 80180d2:	d04b      	beq.n	801816c <_printf_i+0x1a8>
 80180d4:	4616      	mov	r6, r2
 80180d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80180da:	fb03 5711 	mls	r7, r3, r1, r5
 80180de:	5dc7      	ldrb	r7, [r0, r7]
 80180e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80180e4:	462f      	mov	r7, r5
 80180e6:	42bb      	cmp	r3, r7
 80180e8:	460d      	mov	r5, r1
 80180ea:	d9f4      	bls.n	80180d6 <_printf_i+0x112>
 80180ec:	2b08      	cmp	r3, #8
 80180ee:	d10b      	bne.n	8018108 <_printf_i+0x144>
 80180f0:	6823      	ldr	r3, [r4, #0]
 80180f2:	07df      	lsls	r7, r3, #31
 80180f4:	d508      	bpl.n	8018108 <_printf_i+0x144>
 80180f6:	6923      	ldr	r3, [r4, #16]
 80180f8:	6861      	ldr	r1, [r4, #4]
 80180fa:	4299      	cmp	r1, r3
 80180fc:	bfde      	ittt	le
 80180fe:	2330      	movle	r3, #48	@ 0x30
 8018100:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018104:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8018108:	1b92      	subs	r2, r2, r6
 801810a:	6122      	str	r2, [r4, #16]
 801810c:	f8cd a000 	str.w	sl, [sp]
 8018110:	464b      	mov	r3, r9
 8018112:	aa03      	add	r2, sp, #12
 8018114:	4621      	mov	r1, r4
 8018116:	4640      	mov	r0, r8
 8018118:	f7ff fee6 	bl	8017ee8 <_printf_common>
 801811c:	3001      	adds	r0, #1
 801811e:	d14a      	bne.n	80181b6 <_printf_i+0x1f2>
 8018120:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018124:	b004      	add	sp, #16
 8018126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801812a:	6823      	ldr	r3, [r4, #0]
 801812c:	f043 0320 	orr.w	r3, r3, #32
 8018130:	6023      	str	r3, [r4, #0]
 8018132:	4833      	ldr	r0, [pc, #204]	@ (8018200 <_printf_i+0x23c>)
 8018134:	2778      	movs	r7, #120	@ 0x78
 8018136:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801813a:	6823      	ldr	r3, [r4, #0]
 801813c:	6831      	ldr	r1, [r6, #0]
 801813e:	061f      	lsls	r7, r3, #24
 8018140:	f851 5b04 	ldr.w	r5, [r1], #4
 8018144:	d402      	bmi.n	801814c <_printf_i+0x188>
 8018146:	065f      	lsls	r7, r3, #25
 8018148:	bf48      	it	mi
 801814a:	b2ad      	uxthmi	r5, r5
 801814c:	6031      	str	r1, [r6, #0]
 801814e:	07d9      	lsls	r1, r3, #31
 8018150:	bf44      	itt	mi
 8018152:	f043 0320 	orrmi.w	r3, r3, #32
 8018156:	6023      	strmi	r3, [r4, #0]
 8018158:	b11d      	cbz	r5, 8018162 <_printf_i+0x19e>
 801815a:	2310      	movs	r3, #16
 801815c:	e7ac      	b.n	80180b8 <_printf_i+0xf4>
 801815e:	4827      	ldr	r0, [pc, #156]	@ (80181fc <_printf_i+0x238>)
 8018160:	e7e9      	b.n	8018136 <_printf_i+0x172>
 8018162:	6823      	ldr	r3, [r4, #0]
 8018164:	f023 0320 	bic.w	r3, r3, #32
 8018168:	6023      	str	r3, [r4, #0]
 801816a:	e7f6      	b.n	801815a <_printf_i+0x196>
 801816c:	4616      	mov	r6, r2
 801816e:	e7bd      	b.n	80180ec <_printf_i+0x128>
 8018170:	6833      	ldr	r3, [r6, #0]
 8018172:	6825      	ldr	r5, [r4, #0]
 8018174:	6961      	ldr	r1, [r4, #20]
 8018176:	1d18      	adds	r0, r3, #4
 8018178:	6030      	str	r0, [r6, #0]
 801817a:	062e      	lsls	r6, r5, #24
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	d501      	bpl.n	8018184 <_printf_i+0x1c0>
 8018180:	6019      	str	r1, [r3, #0]
 8018182:	e002      	b.n	801818a <_printf_i+0x1c6>
 8018184:	0668      	lsls	r0, r5, #25
 8018186:	d5fb      	bpl.n	8018180 <_printf_i+0x1bc>
 8018188:	8019      	strh	r1, [r3, #0]
 801818a:	2300      	movs	r3, #0
 801818c:	6123      	str	r3, [r4, #16]
 801818e:	4616      	mov	r6, r2
 8018190:	e7bc      	b.n	801810c <_printf_i+0x148>
 8018192:	6833      	ldr	r3, [r6, #0]
 8018194:	1d1a      	adds	r2, r3, #4
 8018196:	6032      	str	r2, [r6, #0]
 8018198:	681e      	ldr	r6, [r3, #0]
 801819a:	6862      	ldr	r2, [r4, #4]
 801819c:	2100      	movs	r1, #0
 801819e:	4630      	mov	r0, r6
 80181a0:	f7e8 f856 	bl	8000250 <memchr>
 80181a4:	b108      	cbz	r0, 80181aa <_printf_i+0x1e6>
 80181a6:	1b80      	subs	r0, r0, r6
 80181a8:	6060      	str	r0, [r4, #4]
 80181aa:	6863      	ldr	r3, [r4, #4]
 80181ac:	6123      	str	r3, [r4, #16]
 80181ae:	2300      	movs	r3, #0
 80181b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80181b4:	e7aa      	b.n	801810c <_printf_i+0x148>
 80181b6:	6923      	ldr	r3, [r4, #16]
 80181b8:	4632      	mov	r2, r6
 80181ba:	4649      	mov	r1, r9
 80181bc:	4640      	mov	r0, r8
 80181be:	47d0      	blx	sl
 80181c0:	3001      	adds	r0, #1
 80181c2:	d0ad      	beq.n	8018120 <_printf_i+0x15c>
 80181c4:	6823      	ldr	r3, [r4, #0]
 80181c6:	079b      	lsls	r3, r3, #30
 80181c8:	d413      	bmi.n	80181f2 <_printf_i+0x22e>
 80181ca:	68e0      	ldr	r0, [r4, #12]
 80181cc:	9b03      	ldr	r3, [sp, #12]
 80181ce:	4298      	cmp	r0, r3
 80181d0:	bfb8      	it	lt
 80181d2:	4618      	movlt	r0, r3
 80181d4:	e7a6      	b.n	8018124 <_printf_i+0x160>
 80181d6:	2301      	movs	r3, #1
 80181d8:	4632      	mov	r2, r6
 80181da:	4649      	mov	r1, r9
 80181dc:	4640      	mov	r0, r8
 80181de:	47d0      	blx	sl
 80181e0:	3001      	adds	r0, #1
 80181e2:	d09d      	beq.n	8018120 <_printf_i+0x15c>
 80181e4:	3501      	adds	r5, #1
 80181e6:	68e3      	ldr	r3, [r4, #12]
 80181e8:	9903      	ldr	r1, [sp, #12]
 80181ea:	1a5b      	subs	r3, r3, r1
 80181ec:	42ab      	cmp	r3, r5
 80181ee:	dcf2      	bgt.n	80181d6 <_printf_i+0x212>
 80181f0:	e7eb      	b.n	80181ca <_printf_i+0x206>
 80181f2:	2500      	movs	r5, #0
 80181f4:	f104 0619 	add.w	r6, r4, #25
 80181f8:	e7f5      	b.n	80181e6 <_printf_i+0x222>
 80181fa:	bf00      	nop
 80181fc:	08019415 	.word	0x08019415
 8018200:	08019426 	.word	0x08019426

08018204 <__sflush_r>:
 8018204:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801820c:	0716      	lsls	r6, r2, #28
 801820e:	4605      	mov	r5, r0
 8018210:	460c      	mov	r4, r1
 8018212:	d454      	bmi.n	80182be <__sflush_r+0xba>
 8018214:	684b      	ldr	r3, [r1, #4]
 8018216:	2b00      	cmp	r3, #0
 8018218:	dc02      	bgt.n	8018220 <__sflush_r+0x1c>
 801821a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801821c:	2b00      	cmp	r3, #0
 801821e:	dd48      	ble.n	80182b2 <__sflush_r+0xae>
 8018220:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018222:	2e00      	cmp	r6, #0
 8018224:	d045      	beq.n	80182b2 <__sflush_r+0xae>
 8018226:	2300      	movs	r3, #0
 8018228:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801822c:	682f      	ldr	r7, [r5, #0]
 801822e:	6a21      	ldr	r1, [r4, #32]
 8018230:	602b      	str	r3, [r5, #0]
 8018232:	d030      	beq.n	8018296 <__sflush_r+0x92>
 8018234:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018236:	89a3      	ldrh	r3, [r4, #12]
 8018238:	0759      	lsls	r1, r3, #29
 801823a:	d505      	bpl.n	8018248 <__sflush_r+0x44>
 801823c:	6863      	ldr	r3, [r4, #4]
 801823e:	1ad2      	subs	r2, r2, r3
 8018240:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018242:	b10b      	cbz	r3, 8018248 <__sflush_r+0x44>
 8018244:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018246:	1ad2      	subs	r2, r2, r3
 8018248:	2300      	movs	r3, #0
 801824a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801824c:	6a21      	ldr	r1, [r4, #32]
 801824e:	4628      	mov	r0, r5
 8018250:	47b0      	blx	r6
 8018252:	1c43      	adds	r3, r0, #1
 8018254:	89a3      	ldrh	r3, [r4, #12]
 8018256:	d106      	bne.n	8018266 <__sflush_r+0x62>
 8018258:	6829      	ldr	r1, [r5, #0]
 801825a:	291d      	cmp	r1, #29
 801825c:	d82b      	bhi.n	80182b6 <__sflush_r+0xb2>
 801825e:	4a2a      	ldr	r2, [pc, #168]	@ (8018308 <__sflush_r+0x104>)
 8018260:	410a      	asrs	r2, r1
 8018262:	07d6      	lsls	r6, r2, #31
 8018264:	d427      	bmi.n	80182b6 <__sflush_r+0xb2>
 8018266:	2200      	movs	r2, #0
 8018268:	6062      	str	r2, [r4, #4]
 801826a:	04d9      	lsls	r1, r3, #19
 801826c:	6922      	ldr	r2, [r4, #16]
 801826e:	6022      	str	r2, [r4, #0]
 8018270:	d504      	bpl.n	801827c <__sflush_r+0x78>
 8018272:	1c42      	adds	r2, r0, #1
 8018274:	d101      	bne.n	801827a <__sflush_r+0x76>
 8018276:	682b      	ldr	r3, [r5, #0]
 8018278:	b903      	cbnz	r3, 801827c <__sflush_r+0x78>
 801827a:	6560      	str	r0, [r4, #84]	@ 0x54
 801827c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801827e:	602f      	str	r7, [r5, #0]
 8018280:	b1b9      	cbz	r1, 80182b2 <__sflush_r+0xae>
 8018282:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018286:	4299      	cmp	r1, r3
 8018288:	d002      	beq.n	8018290 <__sflush_r+0x8c>
 801828a:	4628      	mov	r0, r5
 801828c:	f7ff fb40 	bl	8017910 <_free_r>
 8018290:	2300      	movs	r3, #0
 8018292:	6363      	str	r3, [r4, #52]	@ 0x34
 8018294:	e00d      	b.n	80182b2 <__sflush_r+0xae>
 8018296:	2301      	movs	r3, #1
 8018298:	4628      	mov	r0, r5
 801829a:	47b0      	blx	r6
 801829c:	4602      	mov	r2, r0
 801829e:	1c50      	adds	r0, r2, #1
 80182a0:	d1c9      	bne.n	8018236 <__sflush_r+0x32>
 80182a2:	682b      	ldr	r3, [r5, #0]
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	d0c6      	beq.n	8018236 <__sflush_r+0x32>
 80182a8:	2b1d      	cmp	r3, #29
 80182aa:	d001      	beq.n	80182b0 <__sflush_r+0xac>
 80182ac:	2b16      	cmp	r3, #22
 80182ae:	d11e      	bne.n	80182ee <__sflush_r+0xea>
 80182b0:	602f      	str	r7, [r5, #0]
 80182b2:	2000      	movs	r0, #0
 80182b4:	e022      	b.n	80182fc <__sflush_r+0xf8>
 80182b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80182ba:	b21b      	sxth	r3, r3
 80182bc:	e01b      	b.n	80182f6 <__sflush_r+0xf2>
 80182be:	690f      	ldr	r7, [r1, #16]
 80182c0:	2f00      	cmp	r7, #0
 80182c2:	d0f6      	beq.n	80182b2 <__sflush_r+0xae>
 80182c4:	0793      	lsls	r3, r2, #30
 80182c6:	680e      	ldr	r6, [r1, #0]
 80182c8:	bf08      	it	eq
 80182ca:	694b      	ldreq	r3, [r1, #20]
 80182cc:	600f      	str	r7, [r1, #0]
 80182ce:	bf18      	it	ne
 80182d0:	2300      	movne	r3, #0
 80182d2:	eba6 0807 	sub.w	r8, r6, r7
 80182d6:	608b      	str	r3, [r1, #8]
 80182d8:	f1b8 0f00 	cmp.w	r8, #0
 80182dc:	dde9      	ble.n	80182b2 <__sflush_r+0xae>
 80182de:	6a21      	ldr	r1, [r4, #32]
 80182e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80182e2:	4643      	mov	r3, r8
 80182e4:	463a      	mov	r2, r7
 80182e6:	4628      	mov	r0, r5
 80182e8:	47b0      	blx	r6
 80182ea:	2800      	cmp	r0, #0
 80182ec:	dc08      	bgt.n	8018300 <__sflush_r+0xfc>
 80182ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80182f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80182f6:	81a3      	strh	r3, [r4, #12]
 80182f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80182fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018300:	4407      	add	r7, r0
 8018302:	eba8 0800 	sub.w	r8, r8, r0
 8018306:	e7e7      	b.n	80182d8 <__sflush_r+0xd4>
 8018308:	dfbffffe 	.word	0xdfbffffe

0801830c <_fflush_r>:
 801830c:	b538      	push	{r3, r4, r5, lr}
 801830e:	690b      	ldr	r3, [r1, #16]
 8018310:	4605      	mov	r5, r0
 8018312:	460c      	mov	r4, r1
 8018314:	b913      	cbnz	r3, 801831c <_fflush_r+0x10>
 8018316:	2500      	movs	r5, #0
 8018318:	4628      	mov	r0, r5
 801831a:	bd38      	pop	{r3, r4, r5, pc}
 801831c:	b118      	cbz	r0, 8018326 <_fflush_r+0x1a>
 801831e:	6a03      	ldr	r3, [r0, #32]
 8018320:	b90b      	cbnz	r3, 8018326 <_fflush_r+0x1a>
 8018322:	f7ff f8d1 	bl	80174c8 <__sinit>
 8018326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801832a:	2b00      	cmp	r3, #0
 801832c:	d0f3      	beq.n	8018316 <_fflush_r+0xa>
 801832e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018330:	07d0      	lsls	r0, r2, #31
 8018332:	d404      	bmi.n	801833e <_fflush_r+0x32>
 8018334:	0599      	lsls	r1, r3, #22
 8018336:	d402      	bmi.n	801833e <_fflush_r+0x32>
 8018338:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801833a:	f7ff faa6 	bl	801788a <__retarget_lock_acquire_recursive>
 801833e:	4628      	mov	r0, r5
 8018340:	4621      	mov	r1, r4
 8018342:	f7ff ff5f 	bl	8018204 <__sflush_r>
 8018346:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018348:	07da      	lsls	r2, r3, #31
 801834a:	4605      	mov	r5, r0
 801834c:	d4e4      	bmi.n	8018318 <_fflush_r+0xc>
 801834e:	89a3      	ldrh	r3, [r4, #12]
 8018350:	059b      	lsls	r3, r3, #22
 8018352:	d4e1      	bmi.n	8018318 <_fflush_r+0xc>
 8018354:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018356:	f7ff fa99 	bl	801788c <__retarget_lock_release_recursive>
 801835a:	e7dd      	b.n	8018318 <_fflush_r+0xc>

0801835c <fiprintf>:
 801835c:	b40e      	push	{r1, r2, r3}
 801835e:	b503      	push	{r0, r1, lr}
 8018360:	4601      	mov	r1, r0
 8018362:	ab03      	add	r3, sp, #12
 8018364:	4805      	ldr	r0, [pc, #20]	@ (801837c <fiprintf+0x20>)
 8018366:	f853 2b04 	ldr.w	r2, [r3], #4
 801836a:	6800      	ldr	r0, [r0, #0]
 801836c:	9301      	str	r3, [sp, #4]
 801836e:	f7ff fca3 	bl	8017cb8 <_vfiprintf_r>
 8018372:	b002      	add	sp, #8
 8018374:	f85d eb04 	ldr.w	lr, [sp], #4
 8018378:	b003      	add	sp, #12
 801837a:	4770      	bx	lr
 801837c:	200000fc 	.word	0x200000fc

08018380 <__swbuf_r>:
 8018380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018382:	460e      	mov	r6, r1
 8018384:	4614      	mov	r4, r2
 8018386:	4605      	mov	r5, r0
 8018388:	b118      	cbz	r0, 8018392 <__swbuf_r+0x12>
 801838a:	6a03      	ldr	r3, [r0, #32]
 801838c:	b90b      	cbnz	r3, 8018392 <__swbuf_r+0x12>
 801838e:	f7ff f89b 	bl	80174c8 <__sinit>
 8018392:	69a3      	ldr	r3, [r4, #24]
 8018394:	60a3      	str	r3, [r4, #8]
 8018396:	89a3      	ldrh	r3, [r4, #12]
 8018398:	071a      	lsls	r2, r3, #28
 801839a:	d501      	bpl.n	80183a0 <__swbuf_r+0x20>
 801839c:	6923      	ldr	r3, [r4, #16]
 801839e:	b943      	cbnz	r3, 80183b2 <__swbuf_r+0x32>
 80183a0:	4621      	mov	r1, r4
 80183a2:	4628      	mov	r0, r5
 80183a4:	f000 f82a 	bl	80183fc <__swsetup_r>
 80183a8:	b118      	cbz	r0, 80183b2 <__swbuf_r+0x32>
 80183aa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80183ae:	4638      	mov	r0, r7
 80183b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80183b2:	6823      	ldr	r3, [r4, #0]
 80183b4:	6922      	ldr	r2, [r4, #16]
 80183b6:	1a98      	subs	r0, r3, r2
 80183b8:	6963      	ldr	r3, [r4, #20]
 80183ba:	b2f6      	uxtb	r6, r6
 80183bc:	4283      	cmp	r3, r0
 80183be:	4637      	mov	r7, r6
 80183c0:	dc05      	bgt.n	80183ce <__swbuf_r+0x4e>
 80183c2:	4621      	mov	r1, r4
 80183c4:	4628      	mov	r0, r5
 80183c6:	f7ff ffa1 	bl	801830c <_fflush_r>
 80183ca:	2800      	cmp	r0, #0
 80183cc:	d1ed      	bne.n	80183aa <__swbuf_r+0x2a>
 80183ce:	68a3      	ldr	r3, [r4, #8]
 80183d0:	3b01      	subs	r3, #1
 80183d2:	60a3      	str	r3, [r4, #8]
 80183d4:	6823      	ldr	r3, [r4, #0]
 80183d6:	1c5a      	adds	r2, r3, #1
 80183d8:	6022      	str	r2, [r4, #0]
 80183da:	701e      	strb	r6, [r3, #0]
 80183dc:	6962      	ldr	r2, [r4, #20]
 80183de:	1c43      	adds	r3, r0, #1
 80183e0:	429a      	cmp	r2, r3
 80183e2:	d004      	beq.n	80183ee <__swbuf_r+0x6e>
 80183e4:	89a3      	ldrh	r3, [r4, #12]
 80183e6:	07db      	lsls	r3, r3, #31
 80183e8:	d5e1      	bpl.n	80183ae <__swbuf_r+0x2e>
 80183ea:	2e0a      	cmp	r6, #10
 80183ec:	d1df      	bne.n	80183ae <__swbuf_r+0x2e>
 80183ee:	4621      	mov	r1, r4
 80183f0:	4628      	mov	r0, r5
 80183f2:	f7ff ff8b 	bl	801830c <_fflush_r>
 80183f6:	2800      	cmp	r0, #0
 80183f8:	d0d9      	beq.n	80183ae <__swbuf_r+0x2e>
 80183fa:	e7d6      	b.n	80183aa <__swbuf_r+0x2a>

080183fc <__swsetup_r>:
 80183fc:	b538      	push	{r3, r4, r5, lr}
 80183fe:	4b29      	ldr	r3, [pc, #164]	@ (80184a4 <__swsetup_r+0xa8>)
 8018400:	4605      	mov	r5, r0
 8018402:	6818      	ldr	r0, [r3, #0]
 8018404:	460c      	mov	r4, r1
 8018406:	b118      	cbz	r0, 8018410 <__swsetup_r+0x14>
 8018408:	6a03      	ldr	r3, [r0, #32]
 801840a:	b90b      	cbnz	r3, 8018410 <__swsetup_r+0x14>
 801840c:	f7ff f85c 	bl	80174c8 <__sinit>
 8018410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018414:	0719      	lsls	r1, r3, #28
 8018416:	d422      	bmi.n	801845e <__swsetup_r+0x62>
 8018418:	06da      	lsls	r2, r3, #27
 801841a:	d407      	bmi.n	801842c <__swsetup_r+0x30>
 801841c:	2209      	movs	r2, #9
 801841e:	602a      	str	r2, [r5, #0]
 8018420:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018424:	81a3      	strh	r3, [r4, #12]
 8018426:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801842a:	e033      	b.n	8018494 <__swsetup_r+0x98>
 801842c:	0758      	lsls	r0, r3, #29
 801842e:	d512      	bpl.n	8018456 <__swsetup_r+0x5a>
 8018430:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018432:	b141      	cbz	r1, 8018446 <__swsetup_r+0x4a>
 8018434:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018438:	4299      	cmp	r1, r3
 801843a:	d002      	beq.n	8018442 <__swsetup_r+0x46>
 801843c:	4628      	mov	r0, r5
 801843e:	f7ff fa67 	bl	8017910 <_free_r>
 8018442:	2300      	movs	r3, #0
 8018444:	6363      	str	r3, [r4, #52]	@ 0x34
 8018446:	89a3      	ldrh	r3, [r4, #12]
 8018448:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801844c:	81a3      	strh	r3, [r4, #12]
 801844e:	2300      	movs	r3, #0
 8018450:	6063      	str	r3, [r4, #4]
 8018452:	6923      	ldr	r3, [r4, #16]
 8018454:	6023      	str	r3, [r4, #0]
 8018456:	89a3      	ldrh	r3, [r4, #12]
 8018458:	f043 0308 	orr.w	r3, r3, #8
 801845c:	81a3      	strh	r3, [r4, #12]
 801845e:	6923      	ldr	r3, [r4, #16]
 8018460:	b94b      	cbnz	r3, 8018476 <__swsetup_r+0x7a>
 8018462:	89a3      	ldrh	r3, [r4, #12]
 8018464:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018468:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801846c:	d003      	beq.n	8018476 <__swsetup_r+0x7a>
 801846e:	4621      	mov	r1, r4
 8018470:	4628      	mov	r0, r5
 8018472:	f000 f846 	bl	8018502 <__smakebuf_r>
 8018476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801847a:	f013 0201 	ands.w	r2, r3, #1
 801847e:	d00a      	beq.n	8018496 <__swsetup_r+0x9a>
 8018480:	2200      	movs	r2, #0
 8018482:	60a2      	str	r2, [r4, #8]
 8018484:	6962      	ldr	r2, [r4, #20]
 8018486:	4252      	negs	r2, r2
 8018488:	61a2      	str	r2, [r4, #24]
 801848a:	6922      	ldr	r2, [r4, #16]
 801848c:	b942      	cbnz	r2, 80184a0 <__swsetup_r+0xa4>
 801848e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018492:	d1c5      	bne.n	8018420 <__swsetup_r+0x24>
 8018494:	bd38      	pop	{r3, r4, r5, pc}
 8018496:	0799      	lsls	r1, r3, #30
 8018498:	bf58      	it	pl
 801849a:	6962      	ldrpl	r2, [r4, #20]
 801849c:	60a2      	str	r2, [r4, #8]
 801849e:	e7f4      	b.n	801848a <__swsetup_r+0x8e>
 80184a0:	2000      	movs	r0, #0
 80184a2:	e7f7      	b.n	8018494 <__swsetup_r+0x98>
 80184a4:	200000fc 	.word	0x200000fc

080184a8 <abort>:
 80184a8:	b508      	push	{r3, lr}
 80184aa:	2006      	movs	r0, #6
 80184ac:	f000 f88e 	bl	80185cc <raise>
 80184b0:	2001      	movs	r0, #1
 80184b2:	f7e9 fed7 	bl	8002264 <_exit>

080184b6 <__swhatbuf_r>:
 80184b6:	b570      	push	{r4, r5, r6, lr}
 80184b8:	460c      	mov	r4, r1
 80184ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80184be:	2900      	cmp	r1, #0
 80184c0:	b096      	sub	sp, #88	@ 0x58
 80184c2:	4615      	mov	r5, r2
 80184c4:	461e      	mov	r6, r3
 80184c6:	da0d      	bge.n	80184e4 <__swhatbuf_r+0x2e>
 80184c8:	89a3      	ldrh	r3, [r4, #12]
 80184ca:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80184ce:	f04f 0100 	mov.w	r1, #0
 80184d2:	bf14      	ite	ne
 80184d4:	2340      	movne	r3, #64	@ 0x40
 80184d6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80184da:	2000      	movs	r0, #0
 80184dc:	6031      	str	r1, [r6, #0]
 80184de:	602b      	str	r3, [r5, #0]
 80184e0:	b016      	add	sp, #88	@ 0x58
 80184e2:	bd70      	pop	{r4, r5, r6, pc}
 80184e4:	466a      	mov	r2, sp
 80184e6:	f000 f879 	bl	80185dc <_fstat_r>
 80184ea:	2800      	cmp	r0, #0
 80184ec:	dbec      	blt.n	80184c8 <__swhatbuf_r+0x12>
 80184ee:	9901      	ldr	r1, [sp, #4]
 80184f0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80184f4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80184f8:	4259      	negs	r1, r3
 80184fa:	4159      	adcs	r1, r3
 80184fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018500:	e7eb      	b.n	80184da <__swhatbuf_r+0x24>

08018502 <__smakebuf_r>:
 8018502:	898b      	ldrh	r3, [r1, #12]
 8018504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018506:	079d      	lsls	r5, r3, #30
 8018508:	4606      	mov	r6, r0
 801850a:	460c      	mov	r4, r1
 801850c:	d507      	bpl.n	801851e <__smakebuf_r+0x1c>
 801850e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018512:	6023      	str	r3, [r4, #0]
 8018514:	6123      	str	r3, [r4, #16]
 8018516:	2301      	movs	r3, #1
 8018518:	6163      	str	r3, [r4, #20]
 801851a:	b003      	add	sp, #12
 801851c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801851e:	ab01      	add	r3, sp, #4
 8018520:	466a      	mov	r2, sp
 8018522:	f7ff ffc8 	bl	80184b6 <__swhatbuf_r>
 8018526:	9f00      	ldr	r7, [sp, #0]
 8018528:	4605      	mov	r5, r0
 801852a:	4639      	mov	r1, r7
 801852c:	4630      	mov	r0, r6
 801852e:	f7fe fd99 	bl	8017064 <_malloc_r>
 8018532:	b948      	cbnz	r0, 8018548 <__smakebuf_r+0x46>
 8018534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018538:	059a      	lsls	r2, r3, #22
 801853a:	d4ee      	bmi.n	801851a <__smakebuf_r+0x18>
 801853c:	f023 0303 	bic.w	r3, r3, #3
 8018540:	f043 0302 	orr.w	r3, r3, #2
 8018544:	81a3      	strh	r3, [r4, #12]
 8018546:	e7e2      	b.n	801850e <__smakebuf_r+0xc>
 8018548:	89a3      	ldrh	r3, [r4, #12]
 801854a:	6020      	str	r0, [r4, #0]
 801854c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018550:	81a3      	strh	r3, [r4, #12]
 8018552:	9b01      	ldr	r3, [sp, #4]
 8018554:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018558:	b15b      	cbz	r3, 8018572 <__smakebuf_r+0x70>
 801855a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801855e:	4630      	mov	r0, r6
 8018560:	f000 f84e 	bl	8018600 <_isatty_r>
 8018564:	b128      	cbz	r0, 8018572 <__smakebuf_r+0x70>
 8018566:	89a3      	ldrh	r3, [r4, #12]
 8018568:	f023 0303 	bic.w	r3, r3, #3
 801856c:	f043 0301 	orr.w	r3, r3, #1
 8018570:	81a3      	strh	r3, [r4, #12]
 8018572:	89a3      	ldrh	r3, [r4, #12]
 8018574:	431d      	orrs	r5, r3
 8018576:	81a5      	strh	r5, [r4, #12]
 8018578:	e7cf      	b.n	801851a <__smakebuf_r+0x18>

0801857a <_raise_r>:
 801857a:	291f      	cmp	r1, #31
 801857c:	b538      	push	{r3, r4, r5, lr}
 801857e:	4605      	mov	r5, r0
 8018580:	460c      	mov	r4, r1
 8018582:	d904      	bls.n	801858e <_raise_r+0x14>
 8018584:	2316      	movs	r3, #22
 8018586:	6003      	str	r3, [r0, #0]
 8018588:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801858c:	bd38      	pop	{r3, r4, r5, pc}
 801858e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018590:	b112      	cbz	r2, 8018598 <_raise_r+0x1e>
 8018592:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018596:	b94b      	cbnz	r3, 80185ac <_raise_r+0x32>
 8018598:	4628      	mov	r0, r5
 801859a:	f000 f853 	bl	8018644 <_getpid_r>
 801859e:	4622      	mov	r2, r4
 80185a0:	4601      	mov	r1, r0
 80185a2:	4628      	mov	r0, r5
 80185a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80185a8:	f000 b83a 	b.w	8018620 <_kill_r>
 80185ac:	2b01      	cmp	r3, #1
 80185ae:	d00a      	beq.n	80185c6 <_raise_r+0x4c>
 80185b0:	1c59      	adds	r1, r3, #1
 80185b2:	d103      	bne.n	80185bc <_raise_r+0x42>
 80185b4:	2316      	movs	r3, #22
 80185b6:	6003      	str	r3, [r0, #0]
 80185b8:	2001      	movs	r0, #1
 80185ba:	e7e7      	b.n	801858c <_raise_r+0x12>
 80185bc:	2100      	movs	r1, #0
 80185be:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80185c2:	4620      	mov	r0, r4
 80185c4:	4798      	blx	r3
 80185c6:	2000      	movs	r0, #0
 80185c8:	e7e0      	b.n	801858c <_raise_r+0x12>
	...

080185cc <raise>:
 80185cc:	4b02      	ldr	r3, [pc, #8]	@ (80185d8 <raise+0xc>)
 80185ce:	4601      	mov	r1, r0
 80185d0:	6818      	ldr	r0, [r3, #0]
 80185d2:	f7ff bfd2 	b.w	801857a <_raise_r>
 80185d6:	bf00      	nop
 80185d8:	200000fc 	.word	0x200000fc

080185dc <_fstat_r>:
 80185dc:	b538      	push	{r3, r4, r5, lr}
 80185de:	4d07      	ldr	r5, [pc, #28]	@ (80185fc <_fstat_r+0x20>)
 80185e0:	2300      	movs	r3, #0
 80185e2:	4604      	mov	r4, r0
 80185e4:	4608      	mov	r0, r1
 80185e6:	4611      	mov	r1, r2
 80185e8:	602b      	str	r3, [r5, #0]
 80185ea:	f7e9 fe8b 	bl	8002304 <_fstat>
 80185ee:	1c43      	adds	r3, r0, #1
 80185f0:	d102      	bne.n	80185f8 <_fstat_r+0x1c>
 80185f2:	682b      	ldr	r3, [r5, #0]
 80185f4:	b103      	cbz	r3, 80185f8 <_fstat_r+0x1c>
 80185f6:	6023      	str	r3, [r4, #0]
 80185f8:	bd38      	pop	{r3, r4, r5, pc}
 80185fa:	bf00      	nop
 80185fc:	2000ae80 	.word	0x2000ae80

08018600 <_isatty_r>:
 8018600:	b538      	push	{r3, r4, r5, lr}
 8018602:	4d06      	ldr	r5, [pc, #24]	@ (801861c <_isatty_r+0x1c>)
 8018604:	2300      	movs	r3, #0
 8018606:	4604      	mov	r4, r0
 8018608:	4608      	mov	r0, r1
 801860a:	602b      	str	r3, [r5, #0]
 801860c:	f7e9 fe8a 	bl	8002324 <_isatty>
 8018610:	1c43      	adds	r3, r0, #1
 8018612:	d102      	bne.n	801861a <_isatty_r+0x1a>
 8018614:	682b      	ldr	r3, [r5, #0]
 8018616:	b103      	cbz	r3, 801861a <_isatty_r+0x1a>
 8018618:	6023      	str	r3, [r4, #0]
 801861a:	bd38      	pop	{r3, r4, r5, pc}
 801861c:	2000ae80 	.word	0x2000ae80

08018620 <_kill_r>:
 8018620:	b538      	push	{r3, r4, r5, lr}
 8018622:	4d07      	ldr	r5, [pc, #28]	@ (8018640 <_kill_r+0x20>)
 8018624:	2300      	movs	r3, #0
 8018626:	4604      	mov	r4, r0
 8018628:	4608      	mov	r0, r1
 801862a:	4611      	mov	r1, r2
 801862c:	602b      	str	r3, [r5, #0]
 801862e:	f7e9 fe09 	bl	8002244 <_kill>
 8018632:	1c43      	adds	r3, r0, #1
 8018634:	d102      	bne.n	801863c <_kill_r+0x1c>
 8018636:	682b      	ldr	r3, [r5, #0]
 8018638:	b103      	cbz	r3, 801863c <_kill_r+0x1c>
 801863a:	6023      	str	r3, [r4, #0]
 801863c:	bd38      	pop	{r3, r4, r5, pc}
 801863e:	bf00      	nop
 8018640:	2000ae80 	.word	0x2000ae80

08018644 <_getpid_r>:
 8018644:	f7e9 bdf6 	b.w	8002234 <_getpid>

08018648 <_init>:
 8018648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801864a:	bf00      	nop
 801864c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801864e:	bc08      	pop	{r3}
 8018650:	469e      	mov	lr, r3
 8018652:	4770      	bx	lr

08018654 <_fini>:
 8018654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018656:	bf00      	nop
 8018658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801865a:	bc08      	pop	{r3}
 801865c:	469e      	mov	lr, r3
 801865e:	4770      	bx	lr
